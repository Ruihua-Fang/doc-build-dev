import{S as tl,i as sl,s as ll,e as l,k as m,w as v,t as r,M as ol,c as o,d as a,m as f,a as i,x as $,h as n,b as d,N as ds,F as t,g as p,y,q as w,o as E,B as j}from"../chunks/vendor-e67aec41.js";import{T as rl}from"../chunks/Tip-76459d1c.js";import{I as Za}from"../chunks/IconCopyLink-ffd7f84e.js";import{C as T}from"../chunks/CodeBlock-e2bcf023.js";function nl(Ue){let c,x,h,u,F,I,ae,L,B,C,k,te;return{c(){c=l("p"),x=r("You can also access the path and bytes of an image file by setting "),h=l("code"),u=r("decode=False"),F=r(" when you load a dataset. In this case, you will need to cast the "),I=l("code"),ae=r("image"),L=r(" column:"),B=m(),C=l("p"),k=l("code"),te=r(`dataset = load_dataset("food101", split="train[100:]").cast_column('image', Image(decode=False))`)},l(g){c=o(g,"P",{});var b=i(c);x=n(b,"You can also access the path and bytes of an image file by setting "),h=o(b,"CODE",{});var ke=i(h);u=n(ke,"decode=False"),ke.forEach(a),F=n(b," when you load a dataset. In this case, you will need to cast the "),I=o(b,"CODE",{});var se=i(I);ae=n(se,"image"),se.forEach(a),L=n(b," column:"),b.forEach(a),B=f(g),C=o(g,"P",{});var _=i(C);k=o(_,"CODE",{});var S=i(k);te=n(S,`dataset = load_dataset("food101", split="train[100:]").cast_column('image', Image(decode=False))`),S.forEach(a),_.forEach(a)},m(g,b){p(g,c,b),t(c,x),t(c,h),t(h,u),t(c,F),t(c,I),t(I,ae),t(c,L),p(g,B,b),p(g,C,b),t(C,k),t(k,te)},d(g){g&&a(c),g&&a(B),g&&a(C)}}}function il(Ue){let c,x,h,u,F,I,ae,L,B,C,k,te,g,b,ke,se,_,S,et,at,le,tt,Ye,st,lt,ot,Ge,rt,nt,oe,it,be,pt,mt,na,O,U,ze,re,ft,Me,dt,ia,Ie,ct,pa,Y,ne,ht,Re,gt,ut,_t,He,vt,ma,G,$t,ie,yt,wt,fa,pe,da,q,Et,qe,jt,kt,Ke,bt,It,Qe,qt,Ct,ca,me,ha,Ce,xe,cs,ga,P,xt,Pe,Pt,At,Ae,Dt,Tt,ua,fe,_a,De,Te,hs,va,z,$a,N,M,Ve,de,Ft,We,Lt,ya,R,Ot,Xe,Nt,Jt,wa,ce,Ea,A,Bt,Ze,St,Ut,ea,Yt,Gt,ja,he,ka,H,zt,aa,Mt,Rt,ba,ge,Ia,J,K,ta,ue,Ht,sa,Kt,qa,Q,Qt,_e,Vt,Wt,Ca,V,Xt,ve,la,Zt,es,xa,$e,Pa,W,as,oa,ts,ss,Aa,ye,Da,D,ls,Fe,os,rs,Le,ns,is,Ta,we,Fa,X,ps,ra,ms,fs,La,Ee,Oa,Oe,Ne,gs,Na;return I=new Za({}),re=new Za({}),pe=new T({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("food101", split="train[100:]")
dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[100:]&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;image&#x27;</span>: &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=384x512 at <span class="hljs-number">0x7FC45AB5C590</span>&gt;,
 <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">6</span>}`}}),me=new T({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("food101", split="train[100:200]")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[100:200]&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),fe=new T({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("cats_vs_dogs").cast_column("image_file_path", Image())
dataset[0]["image_file_path"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;cats_vs_dogs&quot;</span>).cast_column(<span class="hljs-string">&quot;image_file_path&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image_file_path&quot;</span>]`}}),z=new rl({props:{$$slots:{default:[nl]},$$scope:{ctx:Ue}}}),de=new Za({}),ce=new T({props:{code:`folder/dog/golden_retriever.png
folder/dog/german_shepherd.png
folder/dog/chihuahua.png

folder/cat/maine_coon.png
folder/cat/bengal.png
folder/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/dog/g</span>olden_retriever.png
folder<span class="hljs-regexp">/dog/g</span>erman_shepherd.png
folder<span class="hljs-regexp">/dog/</span>chihuahua.png

folder<span class="hljs-regexp">/cat/m</span>aine_coon.png
folder<span class="hljs-regexp">/cat/</span>bengal.png
folder<span class="hljs-regexp">/cat/</span>birman.png`}}),he=new T({props:{code:`from datasets import load_dataset
dataset = load_dataset("imagefolder", data_dir="/path/to/folder")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)`}}),ge=new T({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),ue=new Za({}),$e=new T({props:{code:`from torchvision.transforms import Compose, ColorJitter, ToTensor

jitter = Compose(`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torchvision.transforms <span class="hljs-keyword">import</span> Compose, ColorJitter, ToTensor

<span class="hljs-meta">&gt;&gt;&gt; </span>jitter = Compose(
    [
     ColorJitter(brightness=<span class="hljs-number">0.25</span>, contrast=<span class="hljs-number">0.25</span>, saturation=<span class="hljs-number">0.25</span>, hue=<span class="hljs-number">0.7</span>),
     ToTensor(),
    ]
)`}}),ye=new T({props:{code:`def transforms(examples):
    examples["pixel_values"] = [jitter(image.convert("RGB")) for image in examples["image"]]
    return examples`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">transforms</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    examples[<span class="hljs-string">&quot;pixel_values&quot;</span>] = [jitter(image.convert(<span class="hljs-string">&quot;RGB&quot;</span>)) <span class="hljs-keyword">for</span> image <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;image&quot;</span>]]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> examples`}}),we=new T({props:{code:"dataset.set_transform(transforms)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_transform(transforms)'}}),Ee=new T({props:{code:`import numpy as np
import matplotlib.pyplot as plt

img = dataset[0]["pixel_values"]
plt.imshow(img.permute(1, 2, 0))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt

<span class="hljs-meta">&gt;&gt;&gt; </span>img = dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;pixel_values&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.imshow(img.permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>))`}}),{c(){c=l("meta"),x=m(),h=l("h1"),u=l("a"),F=l("span"),v(I.$$.fragment),ae=m(),L=l("span"),B=r("Process image data"),C=m(),k=l("p"),te=r("\u{1F917} Datasets support loading and processing images with the "),g=l("a"),b=r("~Image"),ke=r(" feature. This guide will show you how to:"),se=m(),_=l("ul"),S=l("li"),et=r("Load an image dataset."),at=m(),le=l("li"),tt=r("Load a generic image dataset with "),Ye=l("code"),st=r("ImageFolder"),lt=r("."),ot=m(),Ge=l("li"),rt=r("Add data augmentations to your images."),nt=m(),oe=l("li"),it=r("Use "),be=l("a"),pt=r("map()"),mt=r(" to quickly apply your transforms to the entire dataset."),na=m(),O=l("h2"),U=l("a"),ze=l("span"),v(re.$$.fragment),ft=m(),Me=l("span"),dt=r("Image datasets"),ia=m(),Ie=l("p"),ct=r("The images in an image dataset are typically either a:"),pa=m(),Y=l("ul"),ne=l("li"),ht=r("PIL "),Re=l("code"),gt=r("image"),ut=r("."),_t=m(),He=l("li"),vt=r("Path to an image file that you can load."),ma=m(),G=l("p"),$t=r("For example, load the "),ie=l("a"),yt=r("Food-101"),wt=r(" dataset and take a look:"),fa=m(),v(pe.$$.fragment),da=m(),q=l("p"),Et=r("The "),qe=l("a"),jt=r("~Image"),kt=r(" feature automatically decodes the data from the "),Ke=l("code"),bt=r("image"),It=r(" column to return an image object. Now try and call the "),Qe=l("code"),qt=r("image"),Ct=r(" column to see what the image is:"),ca=m(),v(me.$$.fragment),ha=m(),Ce=l("p"),xe=l("img"),ga=m(),P=l("p"),xt=r("To load an image from its path, use the "),Pe=l("a"),Pt=r("cast_column()"),At=r(" method. The "),Ae=l("a"),Dt=r("~Image"),Tt=r(" feature will decode the data at the path to return an image object:"),ua=m(),v(fe.$$.fragment),_a=m(),De=l("p"),Te=l("img"),va=m(),v(z.$$.fragment),$a=m(),N=l("h2"),M=l("a"),Ve=l("span"),v(de.$$.fragment),Ft=m(),We=l("span"),Lt=r("ImageFolder"),ya=m(),R=l("p"),Ot=r("You can also load your image dataset with our "),Xe=l("code"),Nt=r("ImageFolder"),Jt=r(" dataset builder without writing a custom dataloader. Your image dataset structure should look like this:"),wa=m(),v(ce.$$.fragment),Ea=m(),A=l("p"),Bt=r("Then you can load your dataset by specifying "),Ze=l("code"),St=r("imagefolder"),Ut=r(" and the directory of your dataset in "),ea=l("code"),Yt=r("data_dir"),Gt=r(":"),ja=m(),v(he.$$.fragment),ka=m(),H=l("p"),zt=r("Load remote datasets from their URLs with the "),aa=l("code"),Mt=r("data_files"),Rt=r(" parameter:"),ba=m(),v(ge.$$.fragment),Ia=m(),J=l("h2"),K=l("a"),ta=l("span"),v(ue.$$.fragment),Ht=m(),sa=l("span"),Kt=r("Data augmentation"),qa=m(),Q=l("p"),Qt=r("Adding data augmentations to a dataset is common to prevent overfitting and achieve better performance. You can use any library or package you want to apply the augmentations. This guide will use the transforms from "),_e=l("a"),Vt=r("torchvision"),Wt=r("."),Ca=m(),V=l("p"),Xt=r("Add the "),ve=l("a"),la=l("code"),Zt=r("ColorJitter"),es=r(" transform to change the color properties of the image randomly:"),xa=m(),v($e.$$.fragment),Pa=m(),W=l("p"),as=r("Create a function to apply the "),oa=l("code"),ts=r("ColorJitter"),ss=r(" transform to an image:"),Aa=m(),v(ye.$$.fragment),Da=m(),D=l("p"),ls=r("Use the "),Fe=l("a"),os=r("set_transform()"),rs=r(" function to apply the transformation on-the-fly. This is generally faster than "),Le=l("a"),ns=r("map()"),is=r(" because it only prepares the data when it is used, instead of preparing it across the entire dataset ahead of time:"),Ta=m(),v(we.$$.fragment),Fa=m(),X=l("p"),ps=r("Now you can visualize the results of the "),ra=l("code"),ms=r("ColorJitter"),fs=r(" transform:"),La=m(),v(Ee.$$.fragment),Oa=m(),Oe=l("p"),Ne=l("img"),this.h()},l(e){const s=ol('[data-svelte="svelte-1phssyn"]',document.head);c=o(s,"META",{name:!0,content:!0}),s.forEach(a),x=f(e),h=o(e,"H1",{class:!0});var je=i(h);u=o(je,"A",{id:!0,class:!0,href:!0});var us=i(u);F=o(us,"SPAN",{});var _s=i(F);$(I.$$.fragment,_s),_s.forEach(a),us.forEach(a),ae=f(je),L=o(je,"SPAN",{});var vs=i(L);B=n(vs,"Process image data"),vs.forEach(a),je.forEach(a),C=f(e),k=o(e,"P",{});var Ja=i(k);te=n(Ja,"\u{1F917} Datasets support loading and processing images with the "),g=o(Ja,"A",{href:!0});var $s=i(g);b=n($s,"~Image"),$s.forEach(a),ke=n(Ja," feature. This guide will show you how to:"),Ja.forEach(a),se=f(e),_=o(e,"UL",{});var Z=i(_);S=o(Z,"LI",{});var ys=i(S);et=n(ys,"Load an image dataset."),ys.forEach(a),at=f(Z),le=o(Z,"LI",{});var Ba=i(le);tt=n(Ba,"Load a generic image dataset with "),Ye=o(Ba,"CODE",{});var ws=i(Ye);st=n(ws,"ImageFolder"),ws.forEach(a),lt=n(Ba,"."),Ba.forEach(a),ot=f(Z),Ge=o(Z,"LI",{});var Es=i(Ge);rt=n(Es,"Add data augmentations to your images."),Es.forEach(a),nt=f(Z),oe=o(Z,"LI",{});var Sa=i(oe);it=n(Sa,"Use "),be=o(Sa,"A",{href:!0});var js=i(be);pt=n(js,"map()"),js.forEach(a),mt=n(Sa," to quickly apply your transforms to the entire dataset."),Sa.forEach(a),Z.forEach(a),na=f(e),O=o(e,"H2",{class:!0});var Ua=i(O);U=o(Ua,"A",{id:!0,class:!0,href:!0});var ks=i(U);ze=o(ks,"SPAN",{});var bs=i(ze);$(re.$$.fragment,bs),bs.forEach(a),ks.forEach(a),ft=f(Ua),Me=o(Ua,"SPAN",{});var Is=i(Me);dt=n(Is,"Image datasets"),Is.forEach(a),Ua.forEach(a),ia=f(e),Ie=o(e,"P",{});var qs=i(Ie);ct=n(qs,"The images in an image dataset are typically either a:"),qs.forEach(a),pa=f(e),Y=o(e,"UL",{});var Ya=i(Y);ne=o(Ya,"LI",{});var Ga=i(ne);ht=n(Ga,"PIL "),Re=o(Ga,"CODE",{});var Cs=i(Re);gt=n(Cs,"image"),Cs.forEach(a),ut=n(Ga,"."),Ga.forEach(a),_t=f(Ya),He=o(Ya,"LI",{});var xs=i(He);vt=n(xs,"Path to an image file that you can load."),xs.forEach(a),Ya.forEach(a),ma=f(e),G=o(e,"P",{});var za=i(G);$t=n(za,"For example, load the "),ie=o(za,"A",{href:!0,rel:!0});var Ps=i(ie);yt=n(Ps,"Food-101"),Ps.forEach(a),wt=n(za," dataset and take a look:"),za.forEach(a),fa=f(e),$(pe.$$.fragment,e),da=f(e),q=o(e,"P",{});var ee=i(q);Et=n(ee,"The "),qe=o(ee,"A",{href:!0});var As=i(qe);jt=n(As,"~Image"),As.forEach(a),kt=n(ee," feature automatically decodes the data from the "),Ke=o(ee,"CODE",{});var Ds=i(Ke);bt=n(Ds,"image"),Ds.forEach(a),It=n(ee," column to return an image object. Now try and call the "),Qe=o(ee,"CODE",{});var Ts=i(Qe);qt=n(Ts,"image"),Ts.forEach(a),Ct=n(ee," column to see what the image is:"),ee.forEach(a),ca=f(e),$(me.$$.fragment,e),ha=f(e),Ce=o(e,"P",{});var Fs=i(Ce);xe=o(Fs,"IMG",{src:!0,alt:!0}),Fs.forEach(a),ga=f(e),P=o(e,"P",{});var Je=i(P);xt=n(Je,"To load an image from its path, use the "),Pe=o(Je,"A",{href:!0});var Ls=i(Pe);Pt=n(Ls,"cast_column()"),Ls.forEach(a),At=n(Je," method. The "),Ae=o(Je,"A",{href:!0});var Os=i(Ae);Dt=n(Os,"~Image"),Os.forEach(a),Tt=n(Je," feature will decode the data at the path to return an image object:"),Je.forEach(a),ua=f(e),$(fe.$$.fragment,e),_a=f(e),De=o(e,"P",{});var Ns=i(De);Te=o(Ns,"IMG",{src:!0,alt:!0}),Ns.forEach(a),va=f(e),$(z.$$.fragment,e),$a=f(e),N=o(e,"H2",{class:!0});var Ma=i(N);M=o(Ma,"A",{id:!0,class:!0,href:!0});var Js=i(M);Ve=o(Js,"SPAN",{});var Bs=i(Ve);$(de.$$.fragment,Bs),Bs.forEach(a),Js.forEach(a),Ft=f(Ma),We=o(Ma,"SPAN",{});var Ss=i(We);Lt=n(Ss,"ImageFolder"),Ss.forEach(a),Ma.forEach(a),ya=f(e),R=o(e,"P",{});var Ra=i(R);Ot=n(Ra,"You can also load your image dataset with our "),Xe=o(Ra,"CODE",{});var Us=i(Xe);Nt=n(Us,"ImageFolder"),Us.forEach(a),Jt=n(Ra," dataset builder without writing a custom dataloader. Your image dataset structure should look like this:"),Ra.forEach(a),wa=f(e),$(ce.$$.fragment,e),Ea=f(e),A=o(e,"P",{});var Be=i(A);Bt=n(Be,"Then you can load your dataset by specifying "),Ze=o(Be,"CODE",{});var Ys=i(Ze);St=n(Ys,"imagefolder"),Ys.forEach(a),Ut=n(Be," and the directory of your dataset in "),ea=o(Be,"CODE",{});var Gs=i(ea);Yt=n(Gs,"data_dir"),Gs.forEach(a),Gt=n(Be,":"),Be.forEach(a),ja=f(e),$(he.$$.fragment,e),ka=f(e),H=o(e,"P",{});var Ha=i(H);zt=n(Ha,"Load remote datasets from their URLs with the "),aa=o(Ha,"CODE",{});var zs=i(aa);Mt=n(zs,"data_files"),zs.forEach(a),Rt=n(Ha," parameter:"),Ha.forEach(a),ba=f(e),$(ge.$$.fragment,e),Ia=f(e),J=o(e,"H2",{class:!0});var Ka=i(J);K=o(Ka,"A",{id:!0,class:!0,href:!0});var Ms=i(K);ta=o(Ms,"SPAN",{});var Rs=i(ta);$(ue.$$.fragment,Rs),Rs.forEach(a),Ms.forEach(a),Ht=f(Ka),sa=o(Ka,"SPAN",{});var Hs=i(sa);Kt=n(Hs,"Data augmentation"),Hs.forEach(a),Ka.forEach(a),qa=f(e),Q=o(e,"P",{});var Qa=i(Q);Qt=n(Qa,"Adding data augmentations to a dataset is common to prevent overfitting and achieve better performance. You can use any library or package you want to apply the augmentations. This guide will use the transforms from "),_e=o(Qa,"A",{href:!0,rel:!0});var Ks=i(_e);Vt=n(Ks,"torchvision"),Ks.forEach(a),Wt=n(Qa,"."),Qa.forEach(a),Ca=f(e),V=o(e,"P",{});var Va=i(V);Xt=n(Va,"Add the "),ve=o(Va,"A",{href:!0,rel:!0});var Qs=i(ve);la=o(Qs,"CODE",{});var Vs=i(la);Zt=n(Vs,"ColorJitter"),Vs.forEach(a),Qs.forEach(a),es=n(Va," transform to change the color properties of the image randomly:"),Va.forEach(a),xa=f(e),$($e.$$.fragment,e),Pa=f(e),W=o(e,"P",{});var Wa=i(W);as=n(Wa,"Create a function to apply the "),oa=o(Wa,"CODE",{});var Ws=i(oa);ts=n(Ws,"ColorJitter"),Ws.forEach(a),ss=n(Wa," transform to an image:"),Wa.forEach(a),Aa=f(e),$(ye.$$.fragment,e),Da=f(e),D=o(e,"P",{});var Se=i(D);ls=n(Se,"Use the "),Fe=o(Se,"A",{href:!0});var Xs=i(Fe);os=n(Xs,"set_transform()"),Xs.forEach(a),rs=n(Se," function to apply the transformation on-the-fly. This is generally faster than "),Le=o(Se,"A",{href:!0});var Zs=i(Le);ns=n(Zs,"map()"),Zs.forEach(a),is=n(Se," because it only prepares the data when it is used, instead of preparing it across the entire dataset ahead of time:"),Se.forEach(a),Ta=f(e),$(we.$$.fragment,e),Fa=f(e),X=o(e,"P",{});var Xa=i(X);ps=n(Xa,"Now you can visualize the results of the "),ra=o(Xa,"CODE",{});var el=i(ra);ms=n(el,"ColorJitter"),el.forEach(a),fs=n(Xa," transform:"),Xa.forEach(a),La=f(e),$(Ee.$$.fragment,e),Oa=f(e),Oe=o(e,"P",{});var al=i(Oe);Ne=o(al,"IMG",{src:!0,alt:!0}),al.forEach(a),this.h()},h(){d(c,"name","hf:doc:metadata"),d(c,"content",JSON.stringify(pl)),d(u,"id","process-image-data"),d(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u,"href","#process-image-data"),d(h,"class","relative group"),d(g,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Image"),d(be,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.map"),d(U,"id","image-datasets"),d(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U,"href","#image-datasets"),d(O,"class","relative group"),d(ie,"href","https://huggingface.co/datasets/food101"),d(ie,"rel","nofollow"),d(qe,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Image"),ds(xe.src,cs="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/image_process_beignet.png")||d(xe,"src",cs),d(xe,"alt","image_process_beignet"),d(Pe,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.cast_column"),d(Ae,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Image"),ds(Te.src,hs="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/image_process_dog.png")||d(Te,"src",hs),d(Te,"alt","image_process_dog"),d(M,"id","imagefolder"),d(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M,"href","#imagefolder"),d(N,"class","relative group"),d(K,"id","data-augmentation"),d(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K,"href","#data-augmentation"),d(J,"class","relative group"),d(_e,"href","https://pytorch.org/vision/stable/transforms.html"),d(_e,"rel","nofollow"),d(ve,"href","https://pytorch.org/vision/stable/transforms.html#torchvision.transforms.ColorJitter"),d(ve,"rel","nofollow"),d(Fe,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.set_transform"),d(Le,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.map"),ds(Ne.src,gs="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/image_process_dog.png")||d(Ne,"src",gs),d(Ne,"alt","image_process_jitter")},m(e,s){t(document.head,c),p(e,x,s),p(e,h,s),t(h,u),t(u,F),y(I,F,null),t(h,ae),t(h,L),t(L,B),p(e,C,s),p(e,k,s),t(k,te),t(k,g),t(g,b),t(k,ke),p(e,se,s),p(e,_,s),t(_,S),t(S,et),t(_,at),t(_,le),t(le,tt),t(le,Ye),t(Ye,st),t(le,lt),t(_,ot),t(_,Ge),t(Ge,rt),t(_,nt),t(_,oe),t(oe,it),t(oe,be),t(be,pt),t(oe,mt),p(e,na,s),p(e,O,s),t(O,U),t(U,ze),y(re,ze,null),t(O,ft),t(O,Me),t(Me,dt),p(e,ia,s),p(e,Ie,s),t(Ie,ct),p(e,pa,s),p(e,Y,s),t(Y,ne),t(ne,ht),t(ne,Re),t(Re,gt),t(ne,ut),t(Y,_t),t(Y,He),t(He,vt),p(e,ma,s),p(e,G,s),t(G,$t),t(G,ie),t(ie,yt),t(G,wt),p(e,fa,s),y(pe,e,s),p(e,da,s),p(e,q,s),t(q,Et),t(q,qe),t(qe,jt),t(q,kt),t(q,Ke),t(Ke,bt),t(q,It),t(q,Qe),t(Qe,qt),t(q,Ct),p(e,ca,s),y(me,e,s),p(e,ha,s),p(e,Ce,s),t(Ce,xe),p(e,ga,s),p(e,P,s),t(P,xt),t(P,Pe),t(Pe,Pt),t(P,At),t(P,Ae),t(Ae,Dt),t(P,Tt),p(e,ua,s),y(fe,e,s),p(e,_a,s),p(e,De,s),t(De,Te),p(e,va,s),y(z,e,s),p(e,$a,s),p(e,N,s),t(N,M),t(M,Ve),y(de,Ve,null),t(N,Ft),t(N,We),t(We,Lt),p(e,ya,s),p(e,R,s),t(R,Ot),t(R,Xe),t(Xe,Nt),t(R,Jt),p(e,wa,s),y(ce,e,s),p(e,Ea,s),p(e,A,s),t(A,Bt),t(A,Ze),t(Ze,St),t(A,Ut),t(A,ea),t(ea,Yt),t(A,Gt),p(e,ja,s),y(he,e,s),p(e,ka,s),p(e,H,s),t(H,zt),t(H,aa),t(aa,Mt),t(H,Rt),p(e,ba,s),y(ge,e,s),p(e,Ia,s),p(e,J,s),t(J,K),t(K,ta),y(ue,ta,null),t(J,Ht),t(J,sa),t(sa,Kt),p(e,qa,s),p(e,Q,s),t(Q,Qt),t(Q,_e),t(_e,Vt),t(Q,Wt),p(e,Ca,s),p(e,V,s),t(V,Xt),t(V,ve),t(ve,la),t(la,Zt),t(V,es),p(e,xa,s),y($e,e,s),p(e,Pa,s),p(e,W,s),t(W,as),t(W,oa),t(oa,ts),t(W,ss),p(e,Aa,s),y(ye,e,s),p(e,Da,s),p(e,D,s),t(D,ls),t(D,Fe),t(Fe,os),t(D,rs),t(D,Le),t(Le,ns),t(D,is),p(e,Ta,s),y(we,e,s),p(e,Fa,s),p(e,X,s),t(X,ps),t(X,ra),t(ra,ms),t(X,fs),p(e,La,s),y(Ee,e,s),p(e,Oa,s),p(e,Oe,s),t(Oe,Ne),Na=!0},p(e,[s]){const je={};s&2&&(je.$$scope={dirty:s,ctx:e}),z.$set(je)},i(e){Na||(w(I.$$.fragment,e),w(re.$$.fragment,e),w(pe.$$.fragment,e),w(me.$$.fragment,e),w(fe.$$.fragment,e),w(z.$$.fragment,e),w(de.$$.fragment,e),w(ce.$$.fragment,e),w(he.$$.fragment,e),w(ge.$$.fragment,e),w(ue.$$.fragment,e),w($e.$$.fragment,e),w(ye.$$.fragment,e),w(we.$$.fragment,e),w(Ee.$$.fragment,e),Na=!0)},o(e){E(I.$$.fragment,e),E(re.$$.fragment,e),E(pe.$$.fragment,e),E(me.$$.fragment,e),E(fe.$$.fragment,e),E(z.$$.fragment,e),E(de.$$.fragment,e),E(ce.$$.fragment,e),E(he.$$.fragment,e),E(ge.$$.fragment,e),E(ue.$$.fragment,e),E($e.$$.fragment,e),E(ye.$$.fragment,e),E(we.$$.fragment,e),E(Ee.$$.fragment,e),Na=!1},d(e){a(c),e&&a(x),e&&a(h),j(I),e&&a(C),e&&a(k),e&&a(se),e&&a(_),e&&a(na),e&&a(O),j(re),e&&a(ia),e&&a(Ie),e&&a(pa),e&&a(Y),e&&a(ma),e&&a(G),e&&a(fa),j(pe,e),e&&a(da),e&&a(q),e&&a(ca),j(me,e),e&&a(ha),e&&a(Ce),e&&a(ga),e&&a(P),e&&a(ua),j(fe,e),e&&a(_a),e&&a(De),e&&a(va),j(z,e),e&&a($a),e&&a(N),j(de),e&&a(ya),e&&a(R),e&&a(wa),j(ce,e),e&&a(Ea),e&&a(A),e&&a(ja),j(he,e),e&&a(ka),e&&a(H),e&&a(ba),j(ge,e),e&&a(Ia),e&&a(J),j(ue),e&&a(qa),e&&a(Q),e&&a(Ca),e&&a(V),e&&a(xa),j($e,e),e&&a(Pa),e&&a(W),e&&a(Aa),j(ye,e),e&&a(Da),e&&a(D),e&&a(Ta),j(we,e),e&&a(Fa),e&&a(X),e&&a(La),j(Ee,e),e&&a(Oa),e&&a(Oe)}}}const pl={local:"process-image-data",sections:[{local:"image-datasets",title:"Image datasets"},{local:"imagefolder",title:"ImageFolder"},{local:"data-augmentation",title:"Data augmentation"}],title:"Process image data"};function ml(Ue,c,x){let{fw:h}=c;return Ue.$$set=u=>{"fw"in u&&x(0,h=u.fw)},[h]}class gl extends tl{constructor(c){super();sl(this,c,ml,il,ll,{fw:0})}}export{gl as default,pl as metadata};
