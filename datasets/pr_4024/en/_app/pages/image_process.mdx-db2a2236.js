import{S as gr,i as _r,s as vr,e as r,k as m,w as u,t as s,M as $r,c as n,d as t,m as f,a as i,x as g,h as l,b as c,N as ur,F as a,g as p,y as _,q as v,o as $,B as w,v as wr}from"../chunks/vendor-aa873a46.js";import{T as io}from"../chunks/Tip-f7f252ab.js";import{I as Ma}from"../chunks/IconCopyLink-d0ca3106.js";import{C as I}from"../chunks/CodeBlock-1f14baf3.js";function yr(U){let d,E,h,j,x,y,b,q;return{c(){d=r("p"),E=s("If the image files come from a trusted source, pass "),h=r("code"),j=s("ignore_verifications=True"),x=s(" to "),y=r("a"),b=s("load_dataset()"),q=s(" to skip checksum verification and speed up loading."),this.h()},l(z){d=n(z,"P",{});var D=i(d);E=l(D,"If the image files come from a trusted source, pass "),h=n(D,"CODE",{});var A=i(h);j=l(A,"ignore_verifications=True"),A.forEach(t),x=l(D," to "),y=n(D,"A",{href:!0});var Je=i(y);b=l(Je,"load_dataset()"),Je.forEach(t),q=l(D," to skip checksum verification and speed up loading."),D.forEach(t),this.h()},h(){c(y,"href","/docs/datasets/pr_4024/en/package_reference/loading_methods#datasets.load_dataset")},m(z,D){p(z,d,D),a(d,E),a(d,h),a(h,j),a(d,x),a(d,y),a(y,b),a(d,q)},d(z){z&&t(d)}}}function Er(U){let d,E,h,j,x;return{c(){d=r("p"),E=s("Feel free to use other data augmentation libraries like "),h=r("a"),j=s("Albumentations"),x=s(". \u{1F917} Datasets can apply any custom function and transforms to an entire dataset!"),this.h()},l(y){d=n(y,"P",{});var b=i(d);E=l(b,"Feel free to use other data augmentation libraries like "),h=n(b,"A",{href:!0,rel:!0});var q=i(h);j=l(q,"Albumentations"),q.forEach(t),x=l(b,". \u{1F917} Datasets can apply any custom function and transforms to an entire dataset!"),b.forEach(t),this.h()},h(){c(h,"href","https://albumentations.ai/docs/"),c(h,"rel","nofollow")},m(y,b){p(y,d,b),a(d,E),a(d,h),a(h,j),a(d,x)},d(y){y&&t(d)}}}function jr(U){let d;return{c(){d=s("PyTorch's data augmentations use PIL under the hood, installing [Pillow](https://pillow.readthedocs.io/en/latest/installation.html) will increase performance by 2/3x in most systems.")},l(E){d=l(E,"PyTorch's data augmentations use PIL under the hood, installing [Pillow](https://pillow.readthedocs.io/en/latest/installation.html) will increase performance by 2/3x in most systems.")},m(E,h){p(E,d,h)},d(E){E&&t(d)}}}function br(U){let d,E,h,j,x,y,b,q,z,D,A,Je,Se,rs,ns,Ya,P,fa,is,ps,ce,ms,ca,fs,cs,ds,de,hs,Re,us,gs,_s,he,vs,Ue,$s,ws,Ha,B,G,da,ue,ys,ha,Es,Ka,Ge,js,Qa,M,ge,bs,ua,ks,xs,Ds,ga,Is,Va,Y,qs,_e,Ps,Cs,Wa,ve,Xa,C,As,Me,Ts,Ls,_a,Fs,Os,va,zs,Bs,Za,$e,et,Ye,He,po,at,T,Ns,Ke,Js,Ss,Qe,Rs,Us,tt,we,st,L,Gs,$a,Ms,Ys,wa,Hs,Ks,lt,ye,ot,N,H,ya,Ee,Qs,Ea,Vs,rt,K,Ws,ja,Xs,Zs,nt,je,it,F,el,ba,al,tl,ka,sl,ll,pt,be,mt,Q,ol,xa,rl,nl,ft,ke,ct,J,Da,il,pl,Ia,ml,fl,dt,V,ht,S,W,qa,xe,cl,Pa,dl,ut,De,Ve,hl,ul,gt,X,gl,Ie,Ca,_l,vl,_t,qe,vt,k,$l,We,wl,yl,Aa,El,jl,Ta,bl,kl,La,xl,Dl,$t,Pe,wt,Z,Il,Xe,ql,Pl,yt,Ce,Ze,Cl,Al,Et,ee,ea,aa,Fa,Tl,Ll,Fl,ta,sa,Oa,Ol,zl,jt,ae,Bl,la,Nl,Jl,bt,R,te,za,Ae,Sl,Ba,Rl,kt,se,Ul,Te,Gl,Ml,xt,le,Dt,oe,Yl,Le,Na,Hl,Kl,It,Fe,qt,re,Ql,Ja,Vl,Wl,Pt,Oe,Ct,ne,Xl,oa,Zl,eo,At,ze,Tt,ie,ao,Sa,to,so,Lt,Be,Ft,ra,na,mo,Ot,pe,zt;return y=new Ma({}),ue=new Ma({}),ve=new I({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("food101", split="train[:100]")
dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[:100]&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;image&#x27;</span>: &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=384x512 at <span class="hljs-number">0x7FC45AB5C590</span>&gt;,
 <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">6</span>}`}}),$e=new I({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("food101", split="train[100:200]")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[100:200]&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),we=new I({props:{code:`from datasets import load_dataset, Image

dataset = Dataset.from_dict({"image": ["path/to/image_1", "path/to/image_2", ..., "path/to/image_n"]}).cast_column("image", Image())
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: [<span class="hljs-string">&quot;path/to/image_1&quot;</span>, <span class="hljs-string">&quot;path/to/image_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/image_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),ye=new I({props:{code:`dataset = load_dataset("food101", split="train[:100]").cast_column('image', Image(decode=False))`,highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[:100]&quot;</span>).cast_column(<span class="hljs-string">&#x27;image&#x27;</span>, Image(decode=<span class="hljs-literal">False</span>))'}}),Ee=new Ma({}),je=new I({props:{code:`folder/dog/golden_retriever.png
folder/dog/german_shepherd.png
folder/dog/chihuahua.png

folder/cat/maine_coon.png
folder/cat/bengal.png
folder/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/dog/g</span>olden_retriever.png
folder<span class="hljs-regexp">/dog/g</span>erman_shepherd.png
folder<span class="hljs-regexp">/dog/</span>chihuahua.png

folder<span class="hljs-regexp">/cat/m</span>aine_coon.png
folder<span class="hljs-regexp">/cat/</span>bengal.png
folder<span class="hljs-regexp">/cat/</span>birman.png`}}),be=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset("imagefolder", data_dir="/path/to/folder")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)`}}),ke=new I({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),V=new io({props:{$$slots:{default:[yr]},$$scope:{ctx:U}}}),xe=new Ma({}),qe=new I({props:{code:`def transforms(examples):
    examples["pixel_values"] = [image.convert("RGB").resize((100,100)) for image in examples["image"]]
    return examples`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">transforms</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    examples[<span class="hljs-string">&quot;pixel_values&quot;</span>] = [image.convert(<span class="hljs-string">&quot;RGB&quot;</span>).resize((<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)) <span class="hljs-keyword">for</span> image <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;image&quot;</span>]]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> examples`}}),Pe=new I({props:{code:`dataset = dataset.map(transforms, remove_columns=["image"], batched=True)
dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.<span class="hljs-built_in">map</span>(transforms, remove_columns=[<span class="hljs-string">&quot;image&quot;</span>], batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">6</span>,
 <span class="hljs-string">&#x27;pixel_values&#x27;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGB size=100x100 at <span class="hljs-number">0x7F058237BB10</span>&gt;}`}}),Ae=new Ma({}),le=new io({props:{$$slots:{default:[Er]},$$scope:{ctx:U}}}),Fe=new I({props:{code:`from torchvision.transforms import Compose, ColorJitter, ToTensor

jitter = Compose(
    [
         ColorJitter(brightness=0.25, contrast=0.25, saturation=0.25, hue=0.7),
         ToTensor(),
    ]
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torchvision.transforms <span class="hljs-keyword">import</span> Compose, ColorJitter, ToTensor

<span class="hljs-meta">&gt;&gt;&gt; </span>jitter = Compose(
<span class="hljs-meta">... </span>    [
<span class="hljs-meta">... </span>         ColorJitter(brightness=<span class="hljs-number">0.25</span>, contrast=<span class="hljs-number">0.25</span>, saturation=<span class="hljs-number">0.25</span>, hue=<span class="hljs-number">0.7</span>),
<span class="hljs-meta">... </span>         ToTensor(),
<span class="hljs-meta">... </span>    ]
<span class="hljs-meta">... </span>)`}}),Oe=new I({props:{code:`def transforms(examples):
    examples["pixel_values"] = [jitter(image.convert("RGB")) for image in examples["image"]]
    return examples`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">transforms</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    examples[<span class="hljs-string">&quot;pixel_values&quot;</span>] = [jitter(image.convert(<span class="hljs-string">&quot;RGB&quot;</span>)) <span class="hljs-keyword">for</span> image <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;image&quot;</span>]]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> examples`}}),ze=new I({props:{code:"dataset.set_transform(transforms)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_transform(transforms)'}}),Be=new I({props:{code:`import numpy as np
import matplotlib.pyplot as plt

img = dataset[0]["pixel_values"]
plt.imshow(img.permute(1, 2, 0))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt

<span class="hljs-meta">&gt;&gt;&gt; </span>img = dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;pixel_values&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.imshow(img.permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>))`}}),pe=new io({props:{$$slots:{default:[jr]},$$scope:{ctx:U}}}),{c(){d=r("meta"),E=m(),h=r("h1"),j=r("a"),x=r("span"),u(y.$$.fragment),b=m(),q=r("span"),z=s("Process image data"),D=m(),A=r("p"),Je=s("\u{1F917} Datasets support loading and processing images with the "),Se=r("a"),rs=s("Image"),ns=s(" feature. This guide will show you how to:"),Ya=m(),P=r("ul"),fa=r("li"),is=s("Load an image dataset."),ps=m(),ce=r("li"),ms=s("Load a generic image dataset with "),ca=r("code"),fs=s("ImageFolder"),cs=s("."),ds=m(),de=r("li"),hs=s("Use "),Re=r("a"),us=s("Dataset.map()"),gs=s(" to quickly apply transforms to an entire dataset."),_s=m(),he=r("li"),vs=s("Add data augmentations to your images with "),Ue=r("a"),$s=s("Dataset.set_transform()"),ws=s("."),Ha=m(),B=r("h2"),G=r("a"),da=r("span"),u(ue.$$.fragment),ys=m(),ha=r("span"),Es=s("Image datasets"),Ka=m(),Ge=r("p"),js=s("The images in an image dataset are typically either a:"),Qa=m(),M=r("ul"),ge=r("li"),bs=s("PIL "),ua=r("code"),ks=s("image"),xs=s("."),Ds=m(),ga=r("li"),Is=s("Path to an image file you can load."),Va=m(),Y=r("p"),qs=s("For example, load the "),_e=r("a"),Ps=s("Food-101"),Cs=s(" dataset and take a look:"),Wa=m(),u(ve.$$.fragment),Xa=m(),C=r("p"),As=s("The "),Me=r("a"),Ts=s("Image"),Ls=s(" feature automatically decodes the data from the "),_a=r("code"),Fs=s("image"),Os=s(" column to return an image object. Now try and call the "),va=r("code"),zs=s("image"),Bs=s(" column to see what the image is:"),Za=m(),u($e.$$.fragment),et=m(),Ye=r("p"),He=r("img"),at=m(),T=r("p"),Ns=s("To load an image from its path, use the "),Ke=r("a"),Js=s("Dataset.cast_column()"),Ss=s(" method. The "),Qe=r("a"),Rs=s("Image"),Us=s(" feature will decode the data at the path to return an image object:"),tt=m(),u(we.$$.fragment),st=m(),L=r("p"),Gs=s("You can also access the path and bytes of an image file by setting "),$a=r("code"),Ms=s("decode=False"),Ys=s(" when you load a dataset. In this case, you will need to cast the "),wa=r("code"),Hs=s("image"),Ks=s(" column:"),lt=m(),u(ye.$$.fragment),ot=m(),N=r("h2"),H=r("a"),ya=r("span"),u(Ee.$$.fragment),Qs=m(),Ea=r("span"),Vs=s("ImageFolder"),rt=m(),K=r("p"),Ws=s("You can also load your image dataset with a "),ja=r("code"),Xs=s("ImageFolder"),Zs=s(" dataset builder without writing a custom dataloader. Your image dataset structure should look like this:"),nt=m(),u(je.$$.fragment),it=m(),F=r("p"),el=s("Then load your dataset by specifying "),ba=r("code"),al=s("imagefolder"),tl=s(" and the directory of your dataset in "),ka=r("code"),sl=s("data_dir"),ll=s(":"),pt=m(),u(be.$$.fragment),mt=m(),Q=r("p"),ol=s("Load remote datasets from their URLs with the "),xa=r("code"),rl=s("data_files"),nl=s(" parameter:"),ft=m(),u(ke.$$.fragment),ct=m(),J=r("p"),Da=r("code"),il=s("ImageFolder"),pl=s(" will create a "),Ia=r("code"),ml=s("label"),fl=s(" column, and the label name is based on the directory name."),dt=m(),u(V.$$.fragment),ht=m(),S=r("h2"),W=r("a"),qa=r("span"),u(xe.$$.fragment),cl=m(),Pa=r("span"),dl=s("Map"),ut=m(),De=r("p"),Ve=r("a"),hl=s("Dataset.map()"),ul=s(" can apply transforms over an entire dataset and it also generates a cache file."),gt=m(),X=r("p"),gl=s("Create a simple "),Ie=r("a"),Ca=r("code"),_l=s("Resize"),vl=s(" function:"),_t=m(),u(qe.$$.fragment),vt=m(),k=r("p"),$l=s("Now "),We=r("a"),wl=s("Dataset.map()"),yl=s(" the function over the entire dataset and set "),Aa=r("code"),El=s("batched=True"),jl=s(". The transform returns "),Ta=r("code"),bl=s("pixel_values"),kl=s(" as a cacheable "),La=r("code"),xl=s("PIL.Image"),Dl=s(" object:"),$t=m(),u(Pe.$$.fragment),wt=m(),Z=r("p"),Il=s("This saves time because you don\u2019t have to execute the same transform twice. It is best to use "),Xe=r("a"),ql=s("Dataset.map()"),Pl=s(" for operations you only run once per training - like resizing an image - instead of using it for operations executed for each epoch, like data augmentations."),yt=m(),Ce=r("p"),Ze=r("a"),Cl=s("Dataset.map()"),Al=s(" takes up some memory, but you can reduce its memory requirements with the following parameters:"),Et=m(),ee=r("ul"),ea=r("li"),aa=r("a"),Fa=r("code"),Tl=s("batch_size"),Ll=s(" determines the number of examples that are processed in one call to the transform function."),Fl=m(),ta=r("li"),sa=r("a"),Oa=r("code"),Ol=s("writer_batch_size"),zl=s(" determines the number of processed examples that are kept in memory before they are stored away."),jt=m(),ae=r("p"),Bl=s("Both parameter values default to 1000, which can be expensive if you are storing images. Lower the value to use less memory when calling "),la=r("a"),Nl=s("Dataset.map()"),Jl=s("."),bt=m(),R=r("h2"),te=r("a"),za=r("span"),u(Ae.$$.fragment),Sl=m(),Ba=r("span"),Rl=s("Data augmentation"),kt=m(),se=r("p"),Ul=s("Adding data augmentations to a dataset is common to prevent overfitting and achieve better performance. You can use any library or package you want to apply the augmentations. This guide will use the transforms from "),Te=r("a"),Gl=s("torchvision"),Ml=s("."),xt=m(),u(le.$$.fragment),Dt=m(),oe=r("p"),Yl=s("Add the "),Le=r("a"),Na=r("code"),Hl=s("ColorJitter"),Kl=s(" transform to change the color properties of the image randomly:"),It=m(),u(Fe.$$.fragment),qt=m(),re=r("p"),Ql=s("Create a function to apply the "),Ja=r("code"),Vl=s("ColorJitter"),Wl=s(" transform to an image:"),Pt=m(),u(Oe.$$.fragment),Ct=m(),ne=r("p"),Xl=s("Then you can use the "),oa=r("a"),Zl=s("Dataset.set_transform()"),eo=s(" function to apply the transform on-the-fly to consume less disk space. Use this function if you only need to access the examples once:"),At=m(),u(ze.$$.fragment),Tt=m(),ie=r("p"),ao=s("Now visualize the results of the "),Sa=r("code"),to=s("ColorJitter"),so=s(" transform:"),Lt=m(),u(Be.$$.fragment),Ft=m(),ra=r("p"),na=r("img"),Ot=m(),u(pe.$$.fragment),this.h()},l(e){const o=$r('[data-svelte="svelte-1phssyn"]',document.head);d=n(o,"META",{name:!0,content:!0}),o.forEach(t),E=f(e),h=n(e,"H1",{class:!0});var Ne=i(h);j=n(Ne,"A",{id:!0,class:!0,href:!0});var Ra=i(j);x=n(Ra,"SPAN",{});var Ua=i(x);g(y.$$.fragment,Ua),Ua.forEach(t),Ra.forEach(t),b=f(Ne),q=n(Ne,"SPAN",{});var fo=i(q);z=l(fo,"Process image data"),fo.forEach(t),Ne.forEach(t),D=f(e),A=n(e,"P",{});var Bt=i(A);Je=l(Bt,"\u{1F917} Datasets support loading and processing images with the "),Se=n(Bt,"A",{href:!0});var co=i(Se);rs=l(co,"Image"),co.forEach(t),ns=l(Bt," feature. This guide will show you how to:"),Bt.forEach(t),Ya=f(e),P=n(e,"UL",{});var me=i(P);fa=n(me,"LI",{});var ho=i(fa);is=l(ho,"Load an image dataset."),ho.forEach(t),ps=f(me),ce=n(me,"LI",{});var Nt=i(ce);ms=l(Nt,"Load a generic image dataset with "),ca=n(Nt,"CODE",{});var uo=i(ca);fs=l(uo,"ImageFolder"),uo.forEach(t),cs=l(Nt,"."),Nt.forEach(t),ds=f(me),de=n(me,"LI",{});var Jt=i(de);hs=l(Jt,"Use "),Re=n(Jt,"A",{href:!0});var go=i(Re);us=l(go,"Dataset.map()"),go.forEach(t),gs=l(Jt," to quickly apply transforms to an entire dataset."),Jt.forEach(t),_s=f(me),he=n(me,"LI",{});var St=i(he);vs=l(St,"Add data augmentations to your images with "),Ue=n(St,"A",{href:!0});var _o=i(Ue);$s=l(_o,"Dataset.set_transform()"),_o.forEach(t),ws=l(St,"."),St.forEach(t),me.forEach(t),Ha=f(e),B=n(e,"H2",{class:!0});var Rt=i(B);G=n(Rt,"A",{id:!0,class:!0,href:!0});var vo=i(G);da=n(vo,"SPAN",{});var $o=i(da);g(ue.$$.fragment,$o),$o.forEach(t),vo.forEach(t),ys=f(Rt),ha=n(Rt,"SPAN",{});var wo=i(ha);Es=l(wo,"Image datasets"),wo.forEach(t),Rt.forEach(t),Ka=f(e),Ge=n(e,"P",{});var yo=i(Ge);js=l(yo,"The images in an image dataset are typically either a:"),yo.forEach(t),Qa=f(e),M=n(e,"UL",{});var Ut=i(M);ge=n(Ut,"LI",{});var Gt=i(ge);bs=l(Gt,"PIL "),ua=n(Gt,"CODE",{});var Eo=i(ua);ks=l(Eo,"image"),Eo.forEach(t),xs=l(Gt,"."),Gt.forEach(t),Ds=f(Ut),ga=n(Ut,"LI",{});var jo=i(ga);Is=l(jo,"Path to an image file you can load."),jo.forEach(t),Ut.forEach(t),Va=f(e),Y=n(e,"P",{});var Mt=i(Y);qs=l(Mt,"For example, load the "),_e=n(Mt,"A",{href:!0,rel:!0});var bo=i(_e);Ps=l(bo,"Food-101"),bo.forEach(t),Cs=l(Mt," dataset and take a look:"),Mt.forEach(t),Wa=f(e),g(ve.$$.fragment,e),Xa=f(e),C=n(e,"P",{});var fe=i(C);As=l(fe,"The "),Me=n(fe,"A",{href:!0});var ko=i(Me);Ts=l(ko,"Image"),ko.forEach(t),Ls=l(fe," feature automatically decodes the data from the "),_a=n(fe,"CODE",{});var xo=i(_a);Fs=l(xo,"image"),xo.forEach(t),Os=l(fe," column to return an image object. Now try and call the "),va=n(fe,"CODE",{});var Do=i(va);zs=l(Do,"image"),Do.forEach(t),Bs=l(fe," column to see what the image is:"),fe.forEach(t),Za=f(e),g($e.$$.fragment,e),et=f(e),Ye=n(e,"P",{});var Io=i(Ye);He=n(Io,"IMG",{src:!0,alt:!0}),Io.forEach(t),at=f(e),T=n(e,"P",{});var ia=i(T);Ns=l(ia,"To load an image from its path, use the "),Ke=n(ia,"A",{href:!0});var qo=i(Ke);Js=l(qo,"Dataset.cast_column()"),qo.forEach(t),Ss=l(ia," method. The "),Qe=n(ia,"A",{href:!0});var Po=i(Qe);Rs=l(Po,"Image"),Po.forEach(t),Us=l(ia," feature will decode the data at the path to return an image object:"),ia.forEach(t),tt=f(e),g(we.$$.fragment,e),st=f(e),L=n(e,"P",{});var pa=i(L);Gs=l(pa,"You can also access the path and bytes of an image file by setting "),$a=n(pa,"CODE",{});var Co=i($a);Ms=l(Co,"decode=False"),Co.forEach(t),Ys=l(pa," when you load a dataset. In this case, you will need to cast the "),wa=n(pa,"CODE",{});var Ao=i(wa);Hs=l(Ao,"image"),Ao.forEach(t),Ks=l(pa," column:"),pa.forEach(t),lt=f(e),g(ye.$$.fragment,e),ot=f(e),N=n(e,"H2",{class:!0});var Yt=i(N);H=n(Yt,"A",{id:!0,class:!0,href:!0});var To=i(H);ya=n(To,"SPAN",{});var Lo=i(ya);g(Ee.$$.fragment,Lo),Lo.forEach(t),To.forEach(t),Qs=f(Yt),Ea=n(Yt,"SPAN",{});var Fo=i(Ea);Vs=l(Fo,"ImageFolder"),Fo.forEach(t),Yt.forEach(t),rt=f(e),K=n(e,"P",{});var Ht=i(K);Ws=l(Ht,"You can also load your image dataset with a "),ja=n(Ht,"CODE",{});var Oo=i(ja);Xs=l(Oo,"ImageFolder"),Oo.forEach(t),Zs=l(Ht," dataset builder without writing a custom dataloader. Your image dataset structure should look like this:"),Ht.forEach(t),nt=f(e),g(je.$$.fragment,e),it=f(e),F=n(e,"P",{});var ma=i(F);el=l(ma,"Then load your dataset by specifying "),ba=n(ma,"CODE",{});var zo=i(ba);al=l(zo,"imagefolder"),zo.forEach(t),tl=l(ma," and the directory of your dataset in "),ka=n(ma,"CODE",{});var Bo=i(ka);sl=l(Bo,"data_dir"),Bo.forEach(t),ll=l(ma,":"),ma.forEach(t),pt=f(e),g(be.$$.fragment,e),mt=f(e),Q=n(e,"P",{});var Kt=i(Q);ol=l(Kt,"Load remote datasets from their URLs with the "),xa=n(Kt,"CODE",{});var No=i(xa);rl=l(No,"data_files"),No.forEach(t),nl=l(Kt," parameter:"),Kt.forEach(t),ft=f(e),g(ke.$$.fragment,e),ct=f(e),J=n(e,"P",{});var Ga=i(J);Da=n(Ga,"CODE",{});var Jo=i(Da);il=l(Jo,"ImageFolder"),Jo.forEach(t),pl=l(Ga," will create a "),Ia=n(Ga,"CODE",{});var So=i(Ia);ml=l(So,"label"),So.forEach(t),fl=l(Ga," column, and the label name is based on the directory name."),Ga.forEach(t),dt=f(e),g(V.$$.fragment,e),ht=f(e),S=n(e,"H2",{class:!0});var Qt=i(S);W=n(Qt,"A",{id:!0,class:!0,href:!0});var Ro=i(W);qa=n(Ro,"SPAN",{});var Uo=i(qa);g(xe.$$.fragment,Uo),Uo.forEach(t),Ro.forEach(t),cl=f(Qt),Pa=n(Qt,"SPAN",{});var Go=i(Pa);dl=l(Go,"Map"),Go.forEach(t),Qt.forEach(t),ut=f(e),De=n(e,"P",{});var lo=i(De);Ve=n(lo,"A",{href:!0});var Mo=i(Ve);hl=l(Mo,"Dataset.map()"),Mo.forEach(t),ul=l(lo," can apply transforms over an entire dataset and it also generates a cache file."),lo.forEach(t),gt=f(e),X=n(e,"P",{});var Vt=i(X);gl=l(Vt,"Create a simple "),Ie=n(Vt,"A",{href:!0,rel:!0});var Yo=i(Ie);Ca=n(Yo,"CODE",{});var Ho=i(Ca);_l=l(Ho,"Resize"),Ho.forEach(t),Yo.forEach(t),vl=l(Vt," function:"),Vt.forEach(t),_t=f(e),g(qe.$$.fragment,e),vt=f(e),k=n(e,"P",{});var O=i(k);$l=l(O,"Now "),We=n(O,"A",{href:!0});var Ko=i(We);wl=l(Ko,"Dataset.map()"),Ko.forEach(t),yl=l(O," the function over the entire dataset and set "),Aa=n(O,"CODE",{});var Qo=i(Aa);El=l(Qo,"batched=True"),Qo.forEach(t),jl=l(O,". The transform returns "),Ta=n(O,"CODE",{});var Vo=i(Ta);bl=l(Vo,"pixel_values"),Vo.forEach(t),kl=l(O," as a cacheable "),La=n(O,"CODE",{});var Wo=i(La);xl=l(Wo,"PIL.Image"),Wo.forEach(t),Dl=l(O," object:"),O.forEach(t),$t=f(e),g(Pe.$$.fragment,e),wt=f(e),Z=n(e,"P",{});var Wt=i(Z);Il=l(Wt,"This saves time because you don\u2019t have to execute the same transform twice. It is best to use "),Xe=n(Wt,"A",{href:!0});var Xo=i(Xe);ql=l(Xo,"Dataset.map()"),Xo.forEach(t),Pl=l(Wt," for operations you only run once per training - like resizing an image - instead of using it for operations executed for each epoch, like data augmentations."),Wt.forEach(t),yt=f(e),Ce=n(e,"P",{});var oo=i(Ce);Ze=n(oo,"A",{href:!0});var Zo=i(Ze);Cl=l(Zo,"Dataset.map()"),Zo.forEach(t),Al=l(oo," takes up some memory, but you can reduce its memory requirements with the following parameters:"),oo.forEach(t),Et=f(e),ee=n(e,"UL",{});var Xt=i(ee);ea=n(Xt,"LI",{});var ro=i(ea);aa=n(ro,"A",{href:!0});var er=i(aa);Fa=n(er,"CODE",{});var ar=i(Fa);Tl=l(ar,"batch_size"),ar.forEach(t),er.forEach(t),Ll=l(ro," determines the number of examples that are processed in one call to the transform function."),ro.forEach(t),Fl=f(Xt),ta=n(Xt,"LI",{});var no=i(ta);sa=n(no,"A",{href:!0});var tr=i(sa);Oa=n(tr,"CODE",{});var sr=i(Oa);Ol=l(sr,"writer_batch_size"),sr.forEach(t),tr.forEach(t),zl=l(no," determines the number of processed examples that are kept in memory before they are stored away."),no.forEach(t),Xt.forEach(t),jt=f(e),ae=n(e,"P",{});var Zt=i(ae);Bl=l(Zt,"Both parameter values default to 1000, which can be expensive if you are storing images. Lower the value to use less memory when calling "),la=n(Zt,"A",{href:!0});var lr=i(la);Nl=l(lr,"Dataset.map()"),lr.forEach(t),Jl=l(Zt,"."),Zt.forEach(t),bt=f(e),R=n(e,"H2",{class:!0});var es=i(R);te=n(es,"A",{id:!0,class:!0,href:!0});var or=i(te);za=n(or,"SPAN",{});var rr=i(za);g(Ae.$$.fragment,rr),rr.forEach(t),or.forEach(t),Sl=f(es),Ba=n(es,"SPAN",{});var nr=i(Ba);Rl=l(nr,"Data augmentation"),nr.forEach(t),es.forEach(t),kt=f(e),se=n(e,"P",{});var as=i(se);Ul=l(as,"Adding data augmentations to a dataset is common to prevent overfitting and achieve better performance. You can use any library or package you want to apply the augmentations. This guide will use the transforms from "),Te=n(as,"A",{href:!0,rel:!0});var ir=i(Te);Gl=l(ir,"torchvision"),ir.forEach(t),Ml=l(as,"."),as.forEach(t),xt=f(e),g(le.$$.fragment,e),Dt=f(e),oe=n(e,"P",{});var ts=i(oe);Yl=l(ts,"Add the "),Le=n(ts,"A",{href:!0,rel:!0});var pr=i(Le);Na=n(pr,"CODE",{});var mr=i(Na);Hl=l(mr,"ColorJitter"),mr.forEach(t),pr.forEach(t),Kl=l(ts," transform to change the color properties of the image randomly:"),ts.forEach(t),It=f(e),g(Fe.$$.fragment,e),qt=f(e),re=n(e,"P",{});var ss=i(re);Ql=l(ss,"Create a function to apply the "),Ja=n(ss,"CODE",{});var fr=i(Ja);Vl=l(fr,"ColorJitter"),fr.forEach(t),Wl=l(ss," transform to an image:"),ss.forEach(t),Pt=f(e),g(Oe.$$.fragment,e),Ct=f(e),ne=n(e,"P",{});var ls=i(ne);Xl=l(ls,"Then you can use the "),oa=n(ls,"A",{href:!0});var cr=i(oa);Zl=l(cr,"Dataset.set_transform()"),cr.forEach(t),eo=l(ls," function to apply the transform on-the-fly to consume less disk space. Use this function if you only need to access the examples once:"),ls.forEach(t),At=f(e),g(ze.$$.fragment,e),Tt=f(e),ie=n(e,"P",{});var os=i(ie);ao=l(os,"Now visualize the results of the "),Sa=n(os,"CODE",{});var dr=i(Sa);to=l(dr,"ColorJitter"),dr.forEach(t),so=l(os," transform:"),os.forEach(t),Lt=f(e),g(Be.$$.fragment,e),Ft=f(e),ra=n(e,"P",{});var hr=i(ra);na=n(hr,"IMG",{src:!0,alt:!0}),hr.forEach(t),Ot=f(e),g(pe.$$.fragment,e),this.h()},h(){c(d,"name","hf:doc:metadata"),c(d,"content",JSON.stringify(kr)),c(j,"id","process-image-data"),c(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j,"href","#process-image-data"),c(h,"class","relative group"),c(Se,"href","/docs/datasets/pr_4024/en/package_reference/main_classes#datasets.Image"),c(Re,"href","/docs/datasets/pr_4024/en/package_reference/main_classes#datasets.Dataset.map"),c(Ue,"href","/docs/datasets/pr_4024/en/package_reference/main_classes#datasets.Dataset.set_transform"),c(G,"id","image-datasets"),c(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G,"href","#image-datasets"),c(B,"class","relative group"),c(_e,"href","https://huggingface.co/datasets/food101"),c(_e,"rel","nofollow"),c(Me,"href","/docs/datasets/pr_4024/en/package_reference/main_classes#datasets.Image"),ur(He.src,po="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/image_process_beignet.png")||c(He,"src",po),c(He,"alt","image_process_beignet"),c(Ke,"href","/docs/datasets/pr_4024/en/package_reference/main_classes#datasets.Dataset.cast_column"),c(Qe,"href","/docs/datasets/pr_4024/en/package_reference/main_classes#datasets.Image"),c(H,"id","imagefolder"),c(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H,"href","#imagefolder"),c(N,"class","relative group"),c(W,"id","map"),c(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W,"href","#map"),c(S,"class","relative group"),c(Ve,"href","/docs/datasets/pr_4024/en/package_reference/main_classes#datasets.Dataset.map"),c(Ie,"href","https://pytorch.org/vision/stable/generated/torchvision.transforms.Resize.html"),c(Ie,"rel","nofollow"),c(We,"href","/docs/datasets/pr_4024/en/package_reference/main_classes#datasets.Dataset.map"),c(Xe,"href","/docs/datasets/pr_4024/en/package_reference/main_classes#datasets.Dataset.map"),c(Ze,"href","/docs/datasets/pr_4024/en/package_reference/main_classes#datasets.Dataset.map"),c(aa,"href","./package_reference/main_classes#datasets.DatasetDict.map.batch_size"),c(sa,"href","./package_reference/main_classes#datasets.DatasetDict.map.writer_batch_size"),c(la,"href","/docs/datasets/pr_4024/en/package_reference/main_classes#datasets.Dataset.map"),c(te,"id","data-augmentation"),c(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(te,"href","#data-augmentation"),c(R,"class","relative group"),c(Te,"href","https://pytorch.org/vision/stable/transforms.html"),c(Te,"rel","nofollow"),c(Le,"href","https://pytorch.org/vision/stable/transforms.html#torchvision.transforms.ColorJitter"),c(Le,"rel","nofollow"),c(oa,"href","/docs/datasets/pr_4024/en/package_reference/main_classes#datasets.Dataset.set_transform"),ur(na.src,mo="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/image_process_jitter.png")||c(na,"src",mo),c(na,"alt","image_process_jitter")},m(e,o){a(document.head,d),p(e,E,o),p(e,h,o),a(h,j),a(j,x),_(y,x,null),a(h,b),a(h,q),a(q,z),p(e,D,o),p(e,A,o),a(A,Je),a(A,Se),a(Se,rs),a(A,ns),p(e,Ya,o),p(e,P,o),a(P,fa),a(fa,is),a(P,ps),a(P,ce),a(ce,ms),a(ce,ca),a(ca,fs),a(ce,cs),a(P,ds),a(P,de),a(de,hs),a(de,Re),a(Re,us),a(de,gs),a(P,_s),a(P,he),a(he,vs),a(he,Ue),a(Ue,$s),a(he,ws),p(e,Ha,o),p(e,B,o),a(B,G),a(G,da),_(ue,da,null),a(B,ys),a(B,ha),a(ha,Es),p(e,Ka,o),p(e,Ge,o),a(Ge,js),p(e,Qa,o),p(e,M,o),a(M,ge),a(ge,bs),a(ge,ua),a(ua,ks),a(ge,xs),a(M,Ds),a(M,ga),a(ga,Is),p(e,Va,o),p(e,Y,o),a(Y,qs),a(Y,_e),a(_e,Ps),a(Y,Cs),p(e,Wa,o),_(ve,e,o),p(e,Xa,o),p(e,C,o),a(C,As),a(C,Me),a(Me,Ts),a(C,Ls),a(C,_a),a(_a,Fs),a(C,Os),a(C,va),a(va,zs),a(C,Bs),p(e,Za,o),_($e,e,o),p(e,et,o),p(e,Ye,o),a(Ye,He),p(e,at,o),p(e,T,o),a(T,Ns),a(T,Ke),a(Ke,Js),a(T,Ss),a(T,Qe),a(Qe,Rs),a(T,Us),p(e,tt,o),_(we,e,o),p(e,st,o),p(e,L,o),a(L,Gs),a(L,$a),a($a,Ms),a(L,Ys),a(L,wa),a(wa,Hs),a(L,Ks),p(e,lt,o),_(ye,e,o),p(e,ot,o),p(e,N,o),a(N,H),a(H,ya),_(Ee,ya,null),a(N,Qs),a(N,Ea),a(Ea,Vs),p(e,rt,o),p(e,K,o),a(K,Ws),a(K,ja),a(ja,Xs),a(K,Zs),p(e,nt,o),_(je,e,o),p(e,it,o),p(e,F,o),a(F,el),a(F,ba),a(ba,al),a(F,tl),a(F,ka),a(ka,sl),a(F,ll),p(e,pt,o),_(be,e,o),p(e,mt,o),p(e,Q,o),a(Q,ol),a(Q,xa),a(xa,rl),a(Q,nl),p(e,ft,o),_(ke,e,o),p(e,ct,o),p(e,J,o),a(J,Da),a(Da,il),a(J,pl),a(J,Ia),a(Ia,ml),a(J,fl),p(e,dt,o),_(V,e,o),p(e,ht,o),p(e,S,o),a(S,W),a(W,qa),_(xe,qa,null),a(S,cl),a(S,Pa),a(Pa,dl),p(e,ut,o),p(e,De,o),a(De,Ve),a(Ve,hl),a(De,ul),p(e,gt,o),p(e,X,o),a(X,gl),a(X,Ie),a(Ie,Ca),a(Ca,_l),a(X,vl),p(e,_t,o),_(qe,e,o),p(e,vt,o),p(e,k,o),a(k,$l),a(k,We),a(We,wl),a(k,yl),a(k,Aa),a(Aa,El),a(k,jl),a(k,Ta),a(Ta,bl),a(k,kl),a(k,La),a(La,xl),a(k,Dl),p(e,$t,o),_(Pe,e,o),p(e,wt,o),p(e,Z,o),a(Z,Il),a(Z,Xe),a(Xe,ql),a(Z,Pl),p(e,yt,o),p(e,Ce,o),a(Ce,Ze),a(Ze,Cl),a(Ce,Al),p(e,Et,o),p(e,ee,o),a(ee,ea),a(ea,aa),a(aa,Fa),a(Fa,Tl),a(ea,Ll),a(ee,Fl),a(ee,ta),a(ta,sa),a(sa,Oa),a(Oa,Ol),a(ta,zl),p(e,jt,o),p(e,ae,o),a(ae,Bl),a(ae,la),a(la,Nl),a(ae,Jl),p(e,bt,o),p(e,R,o),a(R,te),a(te,za),_(Ae,za,null),a(R,Sl),a(R,Ba),a(Ba,Rl),p(e,kt,o),p(e,se,o),a(se,Ul),a(se,Te),a(Te,Gl),a(se,Ml),p(e,xt,o),_(le,e,o),p(e,Dt,o),p(e,oe,o),a(oe,Yl),a(oe,Le),a(Le,Na),a(Na,Hl),a(oe,Kl),p(e,It,o),_(Fe,e,o),p(e,qt,o),p(e,re,o),a(re,Ql),a(re,Ja),a(Ja,Vl),a(re,Wl),p(e,Pt,o),_(Oe,e,o),p(e,Ct,o),p(e,ne,o),a(ne,Xl),a(ne,oa),a(oa,Zl),a(ne,eo),p(e,At,o),_(ze,e,o),p(e,Tt,o),p(e,ie,o),a(ie,ao),a(ie,Sa),a(Sa,to),a(ie,so),p(e,Lt,o),_(Be,e,o),p(e,Ft,o),p(e,ra,o),a(ra,na),p(e,Ot,o),_(pe,e,o),zt=!0},p(e,[o]){const Ne={};o&2&&(Ne.$$scope={dirty:o,ctx:e}),V.$set(Ne);const Ra={};o&2&&(Ra.$$scope={dirty:o,ctx:e}),le.$set(Ra);const Ua={};o&2&&(Ua.$$scope={dirty:o,ctx:e}),pe.$set(Ua)},i(e){zt||(v(y.$$.fragment,e),v(ue.$$.fragment,e),v(ve.$$.fragment,e),v($e.$$.fragment,e),v(we.$$.fragment,e),v(ye.$$.fragment,e),v(Ee.$$.fragment,e),v(je.$$.fragment,e),v(be.$$.fragment,e),v(ke.$$.fragment,e),v(V.$$.fragment,e),v(xe.$$.fragment,e),v(qe.$$.fragment,e),v(Pe.$$.fragment,e),v(Ae.$$.fragment,e),v(le.$$.fragment,e),v(Fe.$$.fragment,e),v(Oe.$$.fragment,e),v(ze.$$.fragment,e),v(Be.$$.fragment,e),v(pe.$$.fragment,e),zt=!0)},o(e){$(y.$$.fragment,e),$(ue.$$.fragment,e),$(ve.$$.fragment,e),$($e.$$.fragment,e),$(we.$$.fragment,e),$(ye.$$.fragment,e),$(Ee.$$.fragment,e),$(je.$$.fragment,e),$(be.$$.fragment,e),$(ke.$$.fragment,e),$(V.$$.fragment,e),$(xe.$$.fragment,e),$(qe.$$.fragment,e),$(Pe.$$.fragment,e),$(Ae.$$.fragment,e),$(le.$$.fragment,e),$(Fe.$$.fragment,e),$(Oe.$$.fragment,e),$(ze.$$.fragment,e),$(Be.$$.fragment,e),$(pe.$$.fragment,e),zt=!1},d(e){t(d),e&&t(E),e&&t(h),w(y),e&&t(D),e&&t(A),e&&t(Ya),e&&t(P),e&&t(Ha),e&&t(B),w(ue),e&&t(Ka),e&&t(Ge),e&&t(Qa),e&&t(M),e&&t(Va),e&&t(Y),e&&t(Wa),w(ve,e),e&&t(Xa),e&&t(C),e&&t(Za),w($e,e),e&&t(et),e&&t(Ye),e&&t(at),e&&t(T),e&&t(tt),w(we,e),e&&t(st),e&&t(L),e&&t(lt),w(ye,e),e&&t(ot),e&&t(N),w(Ee),e&&t(rt),e&&t(K),e&&t(nt),w(je,e),e&&t(it),e&&t(F),e&&t(pt),w(be,e),e&&t(mt),e&&t(Q),e&&t(ft),w(ke,e),e&&t(ct),e&&t(J),e&&t(dt),w(V,e),e&&t(ht),e&&t(S),w(xe),e&&t(ut),e&&t(De),e&&t(gt),e&&t(X),e&&t(_t),w(qe,e),e&&t(vt),e&&t(k),e&&t($t),w(Pe,e),e&&t(wt),e&&t(Z),e&&t(yt),e&&t(Ce),e&&t(Et),e&&t(ee),e&&t(jt),e&&t(ae),e&&t(bt),e&&t(R),w(Ae),e&&t(kt),e&&t(se),e&&t(xt),w(le,e),e&&t(Dt),e&&t(oe),e&&t(It),w(Fe,e),e&&t(qt),e&&t(re),e&&t(Pt),w(Oe,e),e&&t(Ct),e&&t(ne),e&&t(At),w(ze,e),e&&t(Tt),e&&t(ie),e&&t(Lt),w(Be,e),e&&t(Ft),e&&t(ra),e&&t(Ot),w(pe,e)}}}const kr={local:"process-image-data",sections:[{local:"image-datasets",title:"Image datasets"},{local:"imagefolder",title:"ImageFolder"},{local:"map",title:"Map"},{local:"data-augmentation",title:"Data augmentation"}],title:"Process image data"};function xr(U){return wr(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Cr extends gr{constructor(d){super();_r(this,d,xr,br,vr,{})}}export{Cr as default,kr as metadata};
