import{S as Xp,i as Zp,s as ef,e as s,k as p,w as b,t as o,M as tf,c as a,d as t,m as f,a as n,x as u,h as g,b as d,F as r,g as i,y as h,q as v,o as m,B as c,v as rf}from"../../chunks/vendor-8138ceec.js";import{T as sf}from"../../chunks/Tip-12722dfc.js";import{D as j}from"../../chunks/Docstring-6fa3bd37.js";import{C as M}from"../../chunks/CodeBlock-fc89709f.js";import{I as H}from"../../chunks/IconCopyLink-2dd3a6ac.js";function af(Hs){let E,me,w,_,N,P,Xe,Y,J,ce,D,K,B,Ze,et,L,x,tt,Q,X,rt,_e,R,W,$,st,G,Z,at;return{c(){E=s("p"),me=o("HuggingFace datasets library has following logging levels:"),w=p(),_=s("ul"),N=s("li"),P=s("em"),Xe=o("datasets.logging.CRITICAL"),Y=o(", "),J=s("em"),ce=o("datasets.logging.FATAL"),D=p(),K=s("li"),B=s("em"),Ze=o("datasets.logging.ERROR"),et=p(),L=s("li"),x=s("em"),tt=o("datasets.logging.WARNING"),Q=o(", "),X=s("em"),rt=o("datasets.logging.WARN"),_e=p(),R=s("li"),W=s("em"),$=o("datasets.logging.INFO"),st=p(),G=s("li"),Z=s("em"),at=o("datasets.logging.DEBUG")},l(y){E=a(y,"P",{});var q=n(E);me=g(q,"HuggingFace datasets library has following logging levels:"),q.forEach(t),w=f(y),_=a(y,"UL",{});var I=n(_);N=a(I,"LI",{});var U=n(N);P=a(U,"EM",{});var kt=n(P);Xe=g(kt,"datasets.logging.CRITICAL"),kt.forEach(t),Y=g(U,", "),J=a(U,"EM",{});var jt=n(J);ce=g(jt,"datasets.logging.FATAL"),jt.forEach(t),U.forEach(t),D=f(I),K=a(I,"LI",{});var $e=n(K);B=a($e,"EM",{});var Bt=n(B);Ze=g(Bt,"datasets.logging.ERROR"),Bt.forEach(t),$e.forEach(t),et=f(I),L=a(I,"LI",{});var ye=n(L);x=a(ye,"EM",{});var Ee=n(x);tt=g(Ee,"datasets.logging.WARNING"),Ee.forEach(t),Q=g(ye,", "),X=a(ye,"EM",{});var Gt=n(X);rt=g(Gt,"datasets.logging.WARN"),Gt.forEach(t),ye.forEach(t),_e=f(I),R=a(I,"LI",{});var Vt=n(R);W=a(Vt,"EM",{});var we=n(W);$=g(we,"datasets.logging.INFO"),we.forEach(t),Vt.forEach(t),st=f(I),G=a(I,"LI",{});var Ht=n(G);Z=a(Ht,"EM",{});var Wt=n(Z);at=g(Wt,"datasets.logging.DEBUG"),Wt.forEach(t),Ht.forEach(t),I.forEach(t)},m(y,q){i(y,E,q),r(E,me),i(y,w,q),i(y,_,q),r(_,N),r(N,P),r(P,Xe),r(N,Y),r(N,J),r(J,ce),r(_,D),r(_,K),r(K,B),r(B,Ze),r(_,et),r(_,L),r(L,x),r(x,tt),r(L,Q),r(L,X),r(X,rt),r(_,_e),r(_,R),r(R,W),r(W,$),r(_,st),r(_,G),r(G,Z),r(Z,at)},d(y){y&&t(E),y&&t(w),y&&t(_)}}}function nf(Hs){let E,me,w,_,N,P,Xe,Y,J,ce,D,K,B,Ze,et,L,x,tt,Q,X,rt,_e,R,W,$,st,G,Z,at,y,q,I,U,kt,jt,$e,Bt,ye,Ee,Gt,Vt,we,Ht,Wt,Ws,nt,qs,qt,Hn,Us,xe,Ut,zt,Wn,qn,Un,Mt,Yt,zn,Mn,zs,Ie,Yn,kr,Jn,Kn,Ms,A,Ae,jr,Qn,Xn,Br,Zn,el,tl,Jt,Gr,rl,sl,al,Te,Vr,nl,ll,Hr,il,ol,gl,Kt,Wr,pl,fl,dl,Qt,qr,bl,ul,Ys,k,hl,Ur,vl,ml,Xt,cl,_l,Zt,$l,yl,Js,ee,Ne,zr,lt,El,Mr,wl,Ks,V,it,xl,Yr,Il,Al,Pe,Qs,te,ot,Tl,Jr,Nl,Xs,O,gt,Pl,Kr,Rl,Ol,Qr,Sl,Fl,er,Cl,Xr,Dl,Zs,S,pt,Ll,Zr,kl,jl,es,Bl,Gl,tr,Vl,ts,Hl,ea,F,ft,Wl,rs,ql,Ul,ss,zl,Ml,rr,Yl,as,Jl,ta,C,dt,Kl,ns,Ql,Xl,ls,Zl,ei,sr,ti,is,ri,ra,re,bt,si,os,ai,sa,se,ut,ni,gs,li,aa,ae,ht,ii,ps,oi,na,ne,vt,gi,fs,pi,la,le,mt,fi,ds,di,ia,ie,ct,bi,bs,ui,oa,oe,Re,us,_t,hi,hs,vi,ga,ge,Oe,vs,$t,mi,ms,ci,pa,ar,_i,fa,nr,$i,da,lr,yi,ba,Se,Ei,cs,wi,xi,ua,ir,Ii,ha,yt,va,pe,Fe,_s,Et,Ai,$s,Ti,ma,or,Ni,ca,gr,Pi,_a,pr,Ri,$a,Ce,Oi,ys,Si,Fi,ya,fr,Ci,Ea,wt,wa,fe,De,Es,xt,Di,ws,Li,xa,dr,ki,Ia,br,ji,Aa,ur,Bi,Ta,Le,Gi,xs,Vi,Hi,Na,hr,Wi,Pa,It,Ra,de,ke,Is,At,qi,As,Ui,Oa,vr,zi,Sa,mr,Mi,Fa,cr,Yi,Ca,je,Ji,Ts,Ki,Qi,Da,_r,Xi,La,Tt,ka,be,Be,Ns,Nt,Zi,Ps,eo,ja,$r,to,Ba,yr,ro,Ga,Er,so,Va,Ge,ao,Rs,no,lo,Ha,wr,io,Wa,Pt,qa,ue,Ve,Os,Rt,oo,Ss,go,Ua,xr,po,za,Ir,fo,Ma,Ar,bo,Ya,He,uo,Fs,ho,vo,Ja,Tr,mo,Ka,Ot,Qa,he,We,Cs,St,co,Ds,_o,Xa,Nr,$o,Za,Pr,yo,en,Rr,Eo,tn,qe,wo,Ls,xo,Io,rn,Or,Ao,sn,Ft,an,ve,Ue,ks,Ct,To,js,No,nn,Sr,Po,ln,Fr,Ro,on,Cr,Oo,gn,ze,So,Bs,Fo,Co,pn,Dr,Do,fn,Dt,dn;return P=new H({}),R=new M({props:{code:`import datasets
datasets.logging.set_verbosity_info()`,highlighted:`<span class="hljs-keyword">import</span> datasets
datasets.logging.set_verbosity_info()`}}),nt=new M({props:{code:"DATASETS_VERBOSITY=error ./myprogram.py",highlighted:"DATASETS_VERBOSITY=error ./myprogram.py"}}),lt=new H({}),it=new j({props:{name:"datasets.utils.logging.get_verbosity",anchor:"datasets.utils.logging.get_verbosity",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4202/src/datasets/utils/logging.py#L87",returnDescription:`
<p>Logging level, e.g., <code>datasets.logging.DEBUG</code> and <code>datasets.logging.INFO</code>.</p>
`}}),Pe=new sf({props:{$$slots:{default:[af]},$$scope:{ctx:Hs}}}),ot=new j({props:{name:"datasets.utils.logging.set_verbosity",anchor:"datasets.utils.logging.set_verbosity",parameters:[{name:"verbosity",val:": int"}],source:"https://github.com/huggingface/datasets/blob/pr_4202/src/datasets/utils/logging.py#L106"}}),gt=new j({props:{name:"datasets.utils.logging.set_verbosity_info",anchor:"datasets.utils.logging.set_verbosity_info",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4202/src/datasets/utils/logging.py#L115"}}),pt=new j({props:{name:"datasets.utils.logging.set_verbosity_warning",anchor:"datasets.utils.logging.set_verbosity_warning",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4202/src/datasets/utils/logging.py#L125"}}),ft=new j({props:{name:"datasets.utils.logging.set_verbosity_debug",anchor:"datasets.utils.logging.set_verbosity_debug",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4202/src/datasets/utils/logging.py#L135"}}),dt=new j({props:{name:"datasets.utils.logging.set_verbosity_error",anchor:"datasets.utils.logging.set_verbosity_error",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4202/src/datasets/utils/logging.py#L145"}}),bt=new j({props:{name:"datasets.utils.logging.disable_propagation",anchor:"datasets.utils.logging.disable_propagation",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4202/src/datasets/utils/logging.py#L155"}}),ut=new j({props:{name:"datasets.utils.logging.enable_propagation",anchor:"datasets.utils.logging.enable_propagation",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4202/src/datasets/utils/logging.py#L162"}}),ht=new j({props:{name:"datasets.utils.logging.get_logger",anchor:"datasets.utils.logging.get_logger",parameters:[{name:"name",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4202/src/datasets/utils/logging.py#L78"}}),vt=new j({props:{name:"datasets.enable_progress_bar",anchor:"datasets.enable_progress_bar",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4202/src/datasets/utils/logging.py#L227"}}),mt=new j({props:{name:"datasets.disable_progress_bar",anchor:"datasets.disable_progress_bar",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4202/src/datasets/utils/logging.py#L233"}}),ct=new j({props:{name:"datasets.is_progress_bar_enabled",anchor:"datasets.is_progress_bar_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4202/src/datasets/utils/logging.py#L221"}}),_t=new H({}),$t=new H({}),yt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),Et=new H({}),wt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),xt=new H({}),It=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),At=new H({}),Tt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),Nt=new H({}),Pt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),Rt=new H({}),Ot=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),St=new H({}),Ft=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),Ct=new H({}),Dt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),{c(){E=s("meta"),me=p(),w=s("h1"),_=s("a"),N=s("span"),b(P.$$.fragment),Xe=p(),Y=s("span"),J=o("Logging methods"),ce=p(),D=s("p"),K=o("\u{1F917} Datasets strives to be transparent and explicit about how it works, but this can be quite verbose at times. We have included a series of logging methods which allow you to easily adjust the level of verbosity of the entire library. Currently the default verbosity of the library is set to "),B=s("code"),Ze=o("WARNING"),et=o("."),L=p(),x=s("p"),tt=o("To change the level of verbosity, use one of the direct setters. For instance, here is how to change the verbosity to the "),Q=s("code"),X=o("INFO"),rt=o(" level:"),_e=p(),b(R.$$.fragment),W=p(),$=s("p"),st=o("You can also use the environment variable "),G=s("code"),Z=o("DATASETS_VERBOSITY"),at=o(" to override the default verbosity, and set it to one of the following: "),y=s("code"),q=o("debug"),I=o(", "),U=s("code"),kt=o("info"),jt=o(", "),$e=s("code"),Bt=o("warning"),ye=o(", "),Ee=s("code"),Gt=o("error"),Vt=o(", "),we=s("code"),Ht=o("critical"),Wt=o(":"),Ws=p(),b(nt.$$.fragment),qs=p(),qt=s("p"),Hn=o("All the methods of this logging module are documented below. The main ones are:"),Us=p(),xe=s("ul"),Ut=s("li"),zt=s("a"),Wn=o("logging.get_verbosity()"),qn=o(" to get the current level of verbosity in the logger"),Un=p(),Mt=s("li"),Yt=s("a"),zn=o("logging.set_verbosity()"),Mn=o(" to set the verbosity to the level of your choice"),zs=p(),Ie=s("p"),Yn=o("In order from the least to the most verbose (with their corresponding "),kr=s("code"),Jn=o("int"),Kn=o(" values):"),Ms=p(),A=s("ol"),Ae=s("li"),jr=s("code"),Qn=o("logging.CRITICAL"),Xn=o(" or "),Br=s("code"),Zn=o("logging.FATAL"),el=o(" (int value, 50): only report the most critical errors."),tl=p(),Jt=s("li"),Gr=s("code"),rl=o("logging.ERROR"),sl=o(" (int value, 40): only report errors."),al=p(),Te=s("li"),Vr=s("code"),nl=o("logging.WARNING"),ll=o(" or "),Hr=s("code"),il=o("logging.WARN"),ol=o(" (int value, 30): only reports error and warnings. This the default level used by the library."),gl=p(),Kt=s("li"),Wr=s("code"),pl=o("logging.INFO"),fl=o(" (int value, 20): reports error, warnings and basic information."),dl=p(),Qt=s("li"),qr=s("code"),bl=o("logging.DEBUG"),ul=o(" (int value, 10): report all information."),Ys=p(),k=s("p"),hl=o("By default, "),Ur=s("code"),vl=o("tqdm"),ml=o(" progress bars will be displayed during dataset download and preprocessing. "),Xt=s("a"),cl=o("logging.disable_progress_bar()"),_l=o(" and "),Zt=s("a"),$l=o("logging.enable_progress_bar()"),yl=o(" can be used to suppress or unsuppress this behavior."),Js=p(),ee=s("h2"),Ne=s("a"),zr=s("span"),b(lt.$$.fragment),El=p(),Mr=s("span"),wl=o("Functions"),Ks=p(),V=s("div"),b(it.$$.fragment),xl=p(),Yr=s("p"),Il=o("Return the current level for the HuggingFace datasets library\u2019s root logger."),Al=p(),b(Pe.$$.fragment),Qs=p(),te=s("div"),b(ot.$$.fragment),Tl=p(),Jr=s("p"),Nl=o("Set the level for the HuggingFace datasets library\u2019s root logger."),Xs=p(),O=s("div"),b(gt.$$.fragment),Pl=p(),Kr=s("p"),Rl=o("Set the level for the HuggingFace datasets library\u2019s root logger to INFO."),Ol=p(),Qr=s("p"),Sl=o("This will display most of the logging information and tqdm bars."),Fl=p(),er=s("p"),Cl=o("Shortcut to "),Xr=s("code"),Dl=o("datasets.logging.set_verbosity(datasets.logging.INFO)"),Zs=p(),S=s("div"),b(pt.$$.fragment),Ll=p(),Zr=s("p"),kl=o("Set the level for the HuggingFace datasets library\u2019s root logger to WARNING."),jl=p(),es=s("p"),Bl=o("This will display only the warning and errors logging information and tqdm bars."),Gl=p(),tr=s("p"),Vl=o("Shortcut to "),ts=s("code"),Hl=o("datasets.logging.set_verbosity(datasets.logging.WARNING)"),ea=p(),F=s("div"),b(ft.$$.fragment),Wl=p(),rs=s("p"),ql=o("Set the level for the HuggingFace datasets library\u2019s root logger to DEBUG."),Ul=p(),ss=s("p"),zl=o("This will display all the logging information and tqdm bars."),Ml=p(),rr=s("p"),Yl=o("Shortcut to "),as=s("code"),Jl=o("datasets.logging.set_verbosity(datasets.logging.DEBUG)"),ta=p(),C=s("div"),b(dt.$$.fragment),Kl=p(),ns=s("p"),Ql=o("Set the level for the HuggingFace datasets library\u2019s root logger to ERROR."),Xl=p(),ls=s("p"),Zl=o("This will display only the errors logging information and tqdm bars."),ei=p(),sr=s("p"),ti=o("Shortcut to "),is=s("code"),ri=o("datasets.logging.set_verbosity(datasets.logging.ERROR)"),ra=p(),re=s("div"),b(bt.$$.fragment),si=p(),os=s("p"),ai=o(`Disable propagation of the library log outputs.
Note that log propagation is disabled by default.`),sa=p(),se=s("div"),b(ut.$$.fragment),ni=p(),gs=s("p"),li=o(`Enable propagation of the library log outputs.
Please disable the HuggingFace datasets library\u2019s default handler to prevent double logging if the root logger has
been configured.`),aa=p(),ae=s("div"),b(ht.$$.fragment),ii=p(),ps=s("p"),oi=o(`Return a logger with the specified name.
This function can be used in dataset and metrics scripts.`),na=p(),ne=s("div"),b(vt.$$.fragment),gi=p(),fs=s("p"),pi=o("Enable tqdm progress bar."),la=p(),le=s("div"),b(mt.$$.fragment),fi=p(),ds=s("p"),di=o("Enable tqdm progress bar."),ia=p(),ie=s("div"),b(ct.$$.fragment),bi=p(),bs=s("p"),ui=o("Return a boolean indicating whether tqdm progress bars are enabled."),oa=p(),oe=s("h2"),Re=s("a"),us=s("span"),b(_t.$$.fragment),hi=p(),hs=s("span"),vi=o("Levels"),ga=p(),ge=s("h3"),Oe=s("a"),vs=s("span"),b($t.$$.fragment),mi=p(),ms=s("span"),ci=o("datasets.logging.CRITICAL"),pa=p(),ar=s("p"),_i=o("datasets.logging.CRITICAL = 50"),fa=p(),nr=s("p"),$i=o("int([x]) -> integer"),da=p(),lr=s("p"),yi=o("int(x, base=10) -> integer"),ba=p(),Se=s("p"),Ei=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),cs=s("strong"),wi=o("int"),xi=o(`().  For floating point
numbers, this truncates towards zero.`),ua=p(),ir=s("p"),Ii=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),ha=p(),b(yt.$$.fragment),va=p(),pe=s("h3"),Fe=s("a"),_s=s("span"),b(Et.$$.fragment),Ai=p(),$s=s("span"),Ti=o("datasets.logging.DEBUG"),ma=p(),or=s("p"),Ni=o("datasets.logging.DEBUG = 10"),ca=p(),gr=s("p"),Pi=o("int([x]) -> integer"),_a=p(),pr=s("p"),Ri=o("int(x, base=10) -> integer"),$a=p(),Ce=s("p"),Oi=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),ys=s("strong"),Si=o("int"),Fi=o(`().  For floating point
numbers, this truncates towards zero.`),ya=p(),fr=s("p"),Ci=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Ea=p(),b(wt.$$.fragment),wa=p(),fe=s("h3"),De=s("a"),Es=s("span"),b(xt.$$.fragment),Di=p(),ws=s("span"),Li=o("datasets.logging.ERROR"),xa=p(),dr=s("p"),ki=o("datasets.logging.ERROR = 40"),Ia=p(),br=s("p"),ji=o("int([x]) -> integer"),Aa=p(),ur=s("p"),Bi=o("int(x, base=10) -> integer"),Ta=p(),Le=s("p"),Gi=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),xs=s("strong"),Vi=o("int"),Hi=o(`().  For floating point
numbers, this truncates towards zero.`),Na=p(),hr=s("p"),Wi=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Pa=p(),b(It.$$.fragment),Ra=p(),de=s("h3"),ke=s("a"),Is=s("span"),b(At.$$.fragment),qi=p(),As=s("span"),Ui=o("datasets.logging.FATAL"),Oa=p(),vr=s("p"),zi=o("datasets.logging.FATAL = 50"),Sa=p(),mr=s("p"),Mi=o("int([x]) -> integer"),Fa=p(),cr=s("p"),Yi=o("int(x, base=10) -> integer"),Ca=p(),je=s("p"),Ji=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Ts=s("strong"),Ki=o("int"),Qi=o(`().  For floating point
numbers, this truncates towards zero.`),Da=p(),_r=s("p"),Xi=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),La=p(),b(Tt.$$.fragment),ka=p(),be=s("h3"),Be=s("a"),Ns=s("span"),b(Nt.$$.fragment),Zi=p(),Ps=s("span"),eo=o("datasets.logging.INFO"),ja=p(),$r=s("p"),to=o("datasets.logging.INFO = 20"),Ba=p(),yr=s("p"),ro=o("int([x]) -> integer"),Ga=p(),Er=s("p"),so=o("int(x, base=10) -> integer"),Va=p(),Ge=s("p"),ao=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Rs=s("strong"),no=o("int"),lo=o(`().  For floating point
numbers, this truncates towards zero.`),Ha=p(),wr=s("p"),io=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Wa=p(),b(Pt.$$.fragment),qa=p(),ue=s("h3"),Ve=s("a"),Os=s("span"),b(Rt.$$.fragment),oo=p(),Ss=s("span"),go=o("datasets.logging.NOTSET"),Ua=p(),xr=s("p"),po=o("datasets.logging.NOTSET = 0"),za=p(),Ir=s("p"),fo=o("int([x]) -> integer"),Ma=p(),Ar=s("p"),bo=o("int(x, base=10) -> integer"),Ya=p(),He=s("p"),uo=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Fs=s("strong"),ho=o("int"),vo=o(`().  For floating point
numbers, this truncates towards zero.`),Ja=p(),Tr=s("p"),mo=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Ka=p(),b(Ot.$$.fragment),Qa=p(),he=s("h3"),We=s("a"),Cs=s("span"),b(St.$$.fragment),co=p(),Ds=s("span"),_o=o("datasets.logging.WARN"),Xa=p(),Nr=s("p"),$o=o("datasets.logging.WARN = 30"),Za=p(),Pr=s("p"),yo=o("int([x]) -> integer"),en=p(),Rr=s("p"),Eo=o("int(x, base=10) -> integer"),tn=p(),qe=s("p"),wo=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Ls=s("strong"),xo=o("int"),Io=o(`().  For floating point
numbers, this truncates towards zero.`),rn=p(),Or=s("p"),Ao=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),sn=p(),b(Ft.$$.fragment),an=p(),ve=s("h3"),Ue=s("a"),ks=s("span"),b(Ct.$$.fragment),To=p(),js=s("span"),No=o("datasets.logging.WARNING"),nn=p(),Sr=s("p"),Po=o("datasets.logging.WARNING = 30"),ln=p(),Fr=s("p"),Ro=o("int([x]) -> integer"),on=p(),Cr=s("p"),Oo=o("int(x, base=10) -> integer"),gn=p(),ze=s("p"),So=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Bs=s("strong"),Fo=o("int"),Co=o(`().  For floating point
numbers, this truncates towards zero.`),pn=p(),Dr=s("p"),Do=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),fn=p(),b(Dt.$$.fragment),this.h()},l(e){const l=tf('[data-svelte="svelte-1phssyn"]',document.head);E=a(l,"META",{name:!0,content:!0}),l.forEach(t),me=f(e),w=a(e,"H1",{class:!0});var Lt=n(w);_=a(Lt,"A",{id:!0,class:!0,href:!0});var Uo=n(_);N=a(Uo,"SPAN",{});var zo=n(N);u(P.$$.fragment,zo),zo.forEach(t),Uo.forEach(t),Xe=f(Lt),Y=a(Lt,"SPAN",{});var Mo=n(Y);J=g(Mo,"Logging methods"),Mo.forEach(t),Lt.forEach(t),ce=f(e),D=a(e,"P",{});var bn=n(D);K=g(bn,"\u{1F917} Datasets strives to be transparent and explicit about how it works, but this can be quite verbose at times. We have included a series of logging methods which allow you to easily adjust the level of verbosity of the entire library. Currently the default verbosity of the library is set to "),B=a(bn,"CODE",{});var Yo=n(B);Ze=g(Yo,"WARNING"),Yo.forEach(t),et=g(bn,"."),bn.forEach(t),L=f(e),x=a(e,"P",{});var un=n(x);tt=g(un,"To change the level of verbosity, use one of the direct setters. For instance, here is how to change the verbosity to the "),Q=a(un,"CODE",{});var Jo=n(Q);X=g(Jo,"INFO"),Jo.forEach(t),rt=g(un," level:"),un.forEach(t),_e=f(e),u(R.$$.fragment,e),W=f(e),$=a(e,"P",{});var T=n($);st=g(T,"You can also use the environment variable "),G=a(T,"CODE",{});var Ko=n(G);Z=g(Ko,"DATASETS_VERBOSITY"),Ko.forEach(t),at=g(T," to override the default verbosity, and set it to one of the following: "),y=a(T,"CODE",{});var Qo=n(y);q=g(Qo,"debug"),Qo.forEach(t),I=g(T,", "),U=a(T,"CODE",{});var Xo=n(U);kt=g(Xo,"info"),Xo.forEach(t),jt=g(T,", "),$e=a(T,"CODE",{});var Zo=n($e);Bt=g(Zo,"warning"),Zo.forEach(t),ye=g(T,", "),Ee=a(T,"CODE",{});var eg=n(Ee);Gt=g(eg,"error"),eg.forEach(t),Vt=g(T,", "),we=a(T,"CODE",{});var tg=n(we);Ht=g(tg,"critical"),tg.forEach(t),Wt=g(T,":"),T.forEach(t),Ws=f(e),u(nt.$$.fragment,e),qs=f(e),qt=a(e,"P",{});var rg=n(qt);Hn=g(rg,"All the methods of this logging module are documented below. The main ones are:"),rg.forEach(t),Us=f(e),xe=a(e,"UL",{});var hn=n(xe);Ut=a(hn,"LI",{});var Lo=n(Ut);zt=a(Lo,"A",{href:!0});var sg=n(zt);Wn=g(sg,"logging.get_verbosity()"),sg.forEach(t),qn=g(Lo," to get the current level of verbosity in the logger"),Lo.forEach(t),Un=f(hn),Mt=a(hn,"LI",{});var ko=n(Mt);Yt=a(ko,"A",{href:!0});var ag=n(Yt);zn=g(ag,"logging.set_verbosity()"),ag.forEach(t),Mn=g(ko," to set the verbosity to the level of your choice"),ko.forEach(t),hn.forEach(t),zs=f(e),Ie=a(e,"P",{});var vn=n(Ie);Yn=g(vn,"In order from the least to the most verbose (with their corresponding "),kr=a(vn,"CODE",{});var ng=n(kr);Jn=g(ng,"int"),ng.forEach(t),Kn=g(vn," values):"),vn.forEach(t),Ms=f(e),A=a(e,"OL",{});var z=n(A);Ae=a(z,"LI",{});var Gs=n(Ae);jr=a(Gs,"CODE",{});var lg=n(jr);Qn=g(lg,"logging.CRITICAL"),lg.forEach(t),Xn=g(Gs," or "),Br=a(Gs,"CODE",{});var ig=n(Br);Zn=g(ig,"logging.FATAL"),ig.forEach(t),el=g(Gs," (int value, 50): only report the most critical errors."),Gs.forEach(t),tl=f(z),Jt=a(z,"LI",{});var jo=n(Jt);Gr=a(jo,"CODE",{});var og=n(Gr);rl=g(og,"logging.ERROR"),og.forEach(t),sl=g(jo," (int value, 40): only report errors."),jo.forEach(t),al=f(z),Te=a(z,"LI",{});var Vs=n(Te);Vr=a(Vs,"CODE",{});var gg=n(Vr);nl=g(gg,"logging.WARNING"),gg.forEach(t),ll=g(Vs," or "),Hr=a(Vs,"CODE",{});var pg=n(Hr);il=g(pg,"logging.WARN"),pg.forEach(t),ol=g(Vs," (int value, 30): only reports error and warnings. This the default level used by the library."),Vs.forEach(t),gl=f(z),Kt=a(z,"LI",{});var Bo=n(Kt);Wr=a(Bo,"CODE",{});var fg=n(Wr);pl=g(fg,"logging.INFO"),fg.forEach(t),fl=g(Bo," (int value, 20): reports error, warnings and basic information."),Bo.forEach(t),dl=f(z),Qt=a(z,"LI",{});var Go=n(Qt);qr=a(Go,"CODE",{});var dg=n(qr);bl=g(dg,"logging.DEBUG"),dg.forEach(t),ul=g(Go," (int value, 10): report all information."),Go.forEach(t),z.forEach(t),Ys=f(e),k=a(e,"P",{});var Me=n(k);hl=g(Me,"By default, "),Ur=a(Me,"CODE",{});var bg=n(Ur);vl=g(bg,"tqdm"),bg.forEach(t),ml=g(Me," progress bars will be displayed during dataset download and preprocessing. "),Xt=a(Me,"A",{href:!0});var ug=n(Xt);cl=g(ug,"logging.disable_progress_bar()"),ug.forEach(t),_l=g(Me," and "),Zt=a(Me,"A",{href:!0});var hg=n(Zt);$l=g(hg,"logging.enable_progress_bar()"),hg.forEach(t),yl=g(Me," can be used to suppress or unsuppress this behavior."),Me.forEach(t),Js=f(e),ee=a(e,"H2",{class:!0});var mn=n(ee);Ne=a(mn,"A",{id:!0,class:!0,href:!0});var vg=n(Ne);zr=a(vg,"SPAN",{});var mg=n(zr);u(lt.$$.fragment,mg),mg.forEach(t),vg.forEach(t),El=f(mn),Mr=a(mn,"SPAN",{});var cg=n(Mr);wl=g(cg,"Functions"),cg.forEach(t),mn.forEach(t),Ks=f(e),V=a(e,"DIV",{class:!0});var Lr=n(V);u(it.$$.fragment,Lr),xl=f(Lr),Yr=a(Lr,"P",{});var _g=n(Yr);Il=g(_g,"Return the current level for the HuggingFace datasets library\u2019s root logger."),_g.forEach(t),Al=f(Lr),u(Pe.$$.fragment,Lr),Lr.forEach(t),Qs=f(e),te=a(e,"DIV",{class:!0});var cn=n(te);u(ot.$$.fragment,cn),Tl=f(cn),Jr=a(cn,"P",{});var $g=n(Jr);Nl=g($g,"Set the level for the HuggingFace datasets library\u2019s root logger."),$g.forEach(t),cn.forEach(t),Xs=f(e),O=a(e,"DIV",{class:!0});var Ye=n(O);u(gt.$$.fragment,Ye),Pl=f(Ye),Kr=a(Ye,"P",{});var yg=n(Kr);Rl=g(yg,"Set the level for the HuggingFace datasets library\u2019s root logger to INFO."),yg.forEach(t),Ol=f(Ye),Qr=a(Ye,"P",{});var Eg=n(Qr);Sl=g(Eg,"This will display most of the logging information and tqdm bars."),Eg.forEach(t),Fl=f(Ye),er=a(Ye,"P",{});var Vo=n(er);Cl=g(Vo,"Shortcut to "),Xr=a(Vo,"CODE",{});var wg=n(Xr);Dl=g(wg,"datasets.logging.set_verbosity(datasets.logging.INFO)"),wg.forEach(t),Vo.forEach(t),Ye.forEach(t),Zs=f(e),S=a(e,"DIV",{class:!0});var Je=n(S);u(pt.$$.fragment,Je),Ll=f(Je),Zr=a(Je,"P",{});var xg=n(Zr);kl=g(xg,"Set the level for the HuggingFace datasets library\u2019s root logger to WARNING."),xg.forEach(t),jl=f(Je),es=a(Je,"P",{});var Ig=n(es);Bl=g(Ig,"This will display only the warning and errors logging information and tqdm bars."),Ig.forEach(t),Gl=f(Je),tr=a(Je,"P",{});var Ho=n(tr);Vl=g(Ho,"Shortcut to "),ts=a(Ho,"CODE",{});var Ag=n(ts);Hl=g(Ag,"datasets.logging.set_verbosity(datasets.logging.WARNING)"),Ag.forEach(t),Ho.forEach(t),Je.forEach(t),ea=f(e),F=a(e,"DIV",{class:!0});var Ke=n(F);u(ft.$$.fragment,Ke),Wl=f(Ke),rs=a(Ke,"P",{});var Tg=n(rs);ql=g(Tg,"Set the level for the HuggingFace datasets library\u2019s root logger to DEBUG."),Tg.forEach(t),Ul=f(Ke),ss=a(Ke,"P",{});var Ng=n(ss);zl=g(Ng,"This will display all the logging information and tqdm bars."),Ng.forEach(t),Ml=f(Ke),rr=a(Ke,"P",{});var Wo=n(rr);Yl=g(Wo,"Shortcut to "),as=a(Wo,"CODE",{});var Pg=n(as);Jl=g(Pg,"datasets.logging.set_verbosity(datasets.logging.DEBUG)"),Pg.forEach(t),Wo.forEach(t),Ke.forEach(t),ta=f(e),C=a(e,"DIV",{class:!0});var Qe=n(C);u(dt.$$.fragment,Qe),Kl=f(Qe),ns=a(Qe,"P",{});var Rg=n(ns);Ql=g(Rg,"Set the level for the HuggingFace datasets library\u2019s root logger to ERROR."),Rg.forEach(t),Xl=f(Qe),ls=a(Qe,"P",{});var Og=n(ls);Zl=g(Og,"This will display only the errors logging information and tqdm bars."),Og.forEach(t),ei=f(Qe),sr=a(Qe,"P",{});var qo=n(sr);ti=g(qo,"Shortcut to "),is=a(qo,"CODE",{});var Sg=n(is);ri=g(Sg,"datasets.logging.set_verbosity(datasets.logging.ERROR)"),Sg.forEach(t),qo.forEach(t),Qe.forEach(t),ra=f(e),re=a(e,"DIV",{class:!0});var _n=n(re);u(bt.$$.fragment,_n),si=f(_n),os=a(_n,"P",{});var Fg=n(os);ai=g(Fg,`Disable propagation of the library log outputs.
Note that log propagation is disabled by default.`),Fg.forEach(t),_n.forEach(t),sa=f(e),se=a(e,"DIV",{class:!0});var $n=n(se);u(ut.$$.fragment,$n),ni=f($n),gs=a($n,"P",{});var Cg=n(gs);li=g(Cg,`Enable propagation of the library log outputs.
Please disable the HuggingFace datasets library\u2019s default handler to prevent double logging if the root logger has
been configured.`),Cg.forEach(t),$n.forEach(t),aa=f(e),ae=a(e,"DIV",{class:!0});var yn=n(ae);u(ht.$$.fragment,yn),ii=f(yn),ps=a(yn,"P",{});var Dg=n(ps);oi=g(Dg,`Return a logger with the specified name.
This function can be used in dataset and metrics scripts.`),Dg.forEach(t),yn.forEach(t),na=f(e),ne=a(e,"DIV",{class:!0});var En=n(ne);u(vt.$$.fragment,En),gi=f(En),fs=a(En,"P",{});var Lg=n(fs);pi=g(Lg,"Enable tqdm progress bar."),Lg.forEach(t),En.forEach(t),la=f(e),le=a(e,"DIV",{class:!0});var wn=n(le);u(mt.$$.fragment,wn),fi=f(wn),ds=a(wn,"P",{});var kg=n(ds);di=g(kg,"Enable tqdm progress bar."),kg.forEach(t),wn.forEach(t),ia=f(e),ie=a(e,"DIV",{class:!0});var xn=n(ie);u(ct.$$.fragment,xn),bi=f(xn),bs=a(xn,"P",{});var jg=n(bs);ui=g(jg,"Return a boolean indicating whether tqdm progress bars are enabled."),jg.forEach(t),xn.forEach(t),oa=f(e),oe=a(e,"H2",{class:!0});var In=n(oe);Re=a(In,"A",{id:!0,class:!0,href:!0});var Bg=n(Re);us=a(Bg,"SPAN",{});var Gg=n(us);u(_t.$$.fragment,Gg),Gg.forEach(t),Bg.forEach(t),hi=f(In),hs=a(In,"SPAN",{});var Vg=n(hs);vi=g(Vg,"Levels"),Vg.forEach(t),In.forEach(t),ga=f(e),ge=a(e,"H3",{class:!0});var An=n(ge);Oe=a(An,"A",{id:!0,class:!0,href:!0});var Hg=n(Oe);vs=a(Hg,"SPAN",{});var Wg=n(vs);u($t.$$.fragment,Wg),Wg.forEach(t),Hg.forEach(t),mi=f(An),ms=a(An,"SPAN",{});var qg=n(ms);ci=g(qg,"datasets.logging.CRITICAL"),qg.forEach(t),An.forEach(t),pa=f(e),ar=a(e,"P",{});var Ug=n(ar);_i=g(Ug,"datasets.logging.CRITICAL = 50"),Ug.forEach(t),fa=f(e),nr=a(e,"P",{});var zg=n(nr);$i=g(zg,"int([x]) -> integer"),zg.forEach(t),da=f(e),lr=a(e,"P",{});var Mg=n(lr);yi=g(Mg,"int(x, base=10) -> integer"),Mg.forEach(t),ba=f(e),Se=a(e,"P",{});var Tn=n(Se);Ei=g(Tn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),cs=a(Tn,"STRONG",{});var Yg=n(cs);wi=g(Yg,"int"),Yg.forEach(t),xi=g(Tn,`().  For floating point
numbers, this truncates towards zero.`),Tn.forEach(t),ua=f(e),ir=a(e,"P",{});var Jg=n(ir);Ii=g(Jg,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Jg.forEach(t),ha=f(e),u(yt.$$.fragment,e),va=f(e),pe=a(e,"H3",{class:!0});var Nn=n(pe);Fe=a(Nn,"A",{id:!0,class:!0,href:!0});var Kg=n(Fe);_s=a(Kg,"SPAN",{});var Qg=n(_s);u(Et.$$.fragment,Qg),Qg.forEach(t),Kg.forEach(t),Ai=f(Nn),$s=a(Nn,"SPAN",{});var Xg=n($s);Ti=g(Xg,"datasets.logging.DEBUG"),Xg.forEach(t),Nn.forEach(t),ma=f(e),or=a(e,"P",{});var Zg=n(or);Ni=g(Zg,"datasets.logging.DEBUG = 10"),Zg.forEach(t),ca=f(e),gr=a(e,"P",{});var ep=n(gr);Pi=g(ep,"int([x]) -> integer"),ep.forEach(t),_a=f(e),pr=a(e,"P",{});var tp=n(pr);Ri=g(tp,"int(x, base=10) -> integer"),tp.forEach(t),$a=f(e),Ce=a(e,"P",{});var Pn=n(Ce);Oi=g(Pn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),ys=a(Pn,"STRONG",{});var rp=n(ys);Si=g(rp,"int"),rp.forEach(t),Fi=g(Pn,`().  For floating point
numbers, this truncates towards zero.`),Pn.forEach(t),ya=f(e),fr=a(e,"P",{});var sp=n(fr);Ci=g(sp,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),sp.forEach(t),Ea=f(e),u(wt.$$.fragment,e),wa=f(e),fe=a(e,"H3",{class:!0});var Rn=n(fe);De=a(Rn,"A",{id:!0,class:!0,href:!0});var ap=n(De);Es=a(ap,"SPAN",{});var np=n(Es);u(xt.$$.fragment,np),np.forEach(t),ap.forEach(t),Di=f(Rn),ws=a(Rn,"SPAN",{});var lp=n(ws);Li=g(lp,"datasets.logging.ERROR"),lp.forEach(t),Rn.forEach(t),xa=f(e),dr=a(e,"P",{});var ip=n(dr);ki=g(ip,"datasets.logging.ERROR = 40"),ip.forEach(t),Ia=f(e),br=a(e,"P",{});var op=n(br);ji=g(op,"int([x]) -> integer"),op.forEach(t),Aa=f(e),ur=a(e,"P",{});var gp=n(ur);Bi=g(gp,"int(x, base=10) -> integer"),gp.forEach(t),Ta=f(e),Le=a(e,"P",{});var On=n(Le);Gi=g(On,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),xs=a(On,"STRONG",{});var pp=n(xs);Vi=g(pp,"int"),pp.forEach(t),Hi=g(On,`().  For floating point
numbers, this truncates towards zero.`),On.forEach(t),Na=f(e),hr=a(e,"P",{});var fp=n(hr);Wi=g(fp,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),fp.forEach(t),Pa=f(e),u(It.$$.fragment,e),Ra=f(e),de=a(e,"H3",{class:!0});var Sn=n(de);ke=a(Sn,"A",{id:!0,class:!0,href:!0});var dp=n(ke);Is=a(dp,"SPAN",{});var bp=n(Is);u(At.$$.fragment,bp),bp.forEach(t),dp.forEach(t),qi=f(Sn),As=a(Sn,"SPAN",{});var up=n(As);Ui=g(up,"datasets.logging.FATAL"),up.forEach(t),Sn.forEach(t),Oa=f(e),vr=a(e,"P",{});var hp=n(vr);zi=g(hp,"datasets.logging.FATAL = 50"),hp.forEach(t),Sa=f(e),mr=a(e,"P",{});var vp=n(mr);Mi=g(vp,"int([x]) -> integer"),vp.forEach(t),Fa=f(e),cr=a(e,"P",{});var mp=n(cr);Yi=g(mp,"int(x, base=10) -> integer"),mp.forEach(t),Ca=f(e),je=a(e,"P",{});var Fn=n(je);Ji=g(Fn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Ts=a(Fn,"STRONG",{});var cp=n(Ts);Ki=g(cp,"int"),cp.forEach(t),Qi=g(Fn,`().  For floating point
numbers, this truncates towards zero.`),Fn.forEach(t),Da=f(e),_r=a(e,"P",{});var _p=n(_r);Xi=g(_p,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),_p.forEach(t),La=f(e),u(Tt.$$.fragment,e),ka=f(e),be=a(e,"H3",{class:!0});var Cn=n(be);Be=a(Cn,"A",{id:!0,class:!0,href:!0});var $p=n(Be);Ns=a($p,"SPAN",{});var yp=n(Ns);u(Nt.$$.fragment,yp),yp.forEach(t),$p.forEach(t),Zi=f(Cn),Ps=a(Cn,"SPAN",{});var Ep=n(Ps);eo=g(Ep,"datasets.logging.INFO"),Ep.forEach(t),Cn.forEach(t),ja=f(e),$r=a(e,"P",{});var wp=n($r);to=g(wp,"datasets.logging.INFO = 20"),wp.forEach(t),Ba=f(e),yr=a(e,"P",{});var xp=n(yr);ro=g(xp,"int([x]) -> integer"),xp.forEach(t),Ga=f(e),Er=a(e,"P",{});var Ip=n(Er);so=g(Ip,"int(x, base=10) -> integer"),Ip.forEach(t),Va=f(e),Ge=a(e,"P",{});var Dn=n(Ge);ao=g(Dn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Rs=a(Dn,"STRONG",{});var Ap=n(Rs);no=g(Ap,"int"),Ap.forEach(t),lo=g(Dn,`().  For floating point
numbers, this truncates towards zero.`),Dn.forEach(t),Ha=f(e),wr=a(e,"P",{});var Tp=n(wr);io=g(Tp,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Tp.forEach(t),Wa=f(e),u(Pt.$$.fragment,e),qa=f(e),ue=a(e,"H3",{class:!0});var Ln=n(ue);Ve=a(Ln,"A",{id:!0,class:!0,href:!0});var Np=n(Ve);Os=a(Np,"SPAN",{});var Pp=n(Os);u(Rt.$$.fragment,Pp),Pp.forEach(t),Np.forEach(t),oo=f(Ln),Ss=a(Ln,"SPAN",{});var Rp=n(Ss);go=g(Rp,"datasets.logging.NOTSET"),Rp.forEach(t),Ln.forEach(t),Ua=f(e),xr=a(e,"P",{});var Op=n(xr);po=g(Op,"datasets.logging.NOTSET = 0"),Op.forEach(t),za=f(e),Ir=a(e,"P",{});var Sp=n(Ir);fo=g(Sp,"int([x]) -> integer"),Sp.forEach(t),Ma=f(e),Ar=a(e,"P",{});var Fp=n(Ar);bo=g(Fp,"int(x, base=10) -> integer"),Fp.forEach(t),Ya=f(e),He=a(e,"P",{});var kn=n(He);uo=g(kn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Fs=a(kn,"STRONG",{});var Cp=n(Fs);ho=g(Cp,"int"),Cp.forEach(t),vo=g(kn,`().  For floating point
numbers, this truncates towards zero.`),kn.forEach(t),Ja=f(e),Tr=a(e,"P",{});var Dp=n(Tr);mo=g(Dp,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Dp.forEach(t),Ka=f(e),u(Ot.$$.fragment,e),Qa=f(e),he=a(e,"H3",{class:!0});var jn=n(he);We=a(jn,"A",{id:!0,class:!0,href:!0});var Lp=n(We);Cs=a(Lp,"SPAN",{});var kp=n(Cs);u(St.$$.fragment,kp),kp.forEach(t),Lp.forEach(t),co=f(jn),Ds=a(jn,"SPAN",{});var jp=n(Ds);_o=g(jp,"datasets.logging.WARN"),jp.forEach(t),jn.forEach(t),Xa=f(e),Nr=a(e,"P",{});var Bp=n(Nr);$o=g(Bp,"datasets.logging.WARN = 30"),Bp.forEach(t),Za=f(e),Pr=a(e,"P",{});var Gp=n(Pr);yo=g(Gp,"int([x]) -> integer"),Gp.forEach(t),en=f(e),Rr=a(e,"P",{});var Vp=n(Rr);Eo=g(Vp,"int(x, base=10) -> integer"),Vp.forEach(t),tn=f(e),qe=a(e,"P",{});var Bn=n(qe);wo=g(Bn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Ls=a(Bn,"STRONG",{});var Hp=n(Ls);xo=g(Hp,"int"),Hp.forEach(t),Io=g(Bn,`().  For floating point
numbers, this truncates towards zero.`),Bn.forEach(t),rn=f(e),Or=a(e,"P",{});var Wp=n(Or);Ao=g(Wp,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Wp.forEach(t),sn=f(e),u(Ft.$$.fragment,e),an=f(e),ve=a(e,"H3",{class:!0});var Gn=n(ve);Ue=a(Gn,"A",{id:!0,class:!0,href:!0});var qp=n(Ue);ks=a(qp,"SPAN",{});var Up=n(ks);u(Ct.$$.fragment,Up),Up.forEach(t),qp.forEach(t),To=f(Gn),js=a(Gn,"SPAN",{});var zp=n(js);No=g(zp,"datasets.logging.WARNING"),zp.forEach(t),Gn.forEach(t),nn=f(e),Sr=a(e,"P",{});var Mp=n(Sr);Po=g(Mp,"datasets.logging.WARNING = 30"),Mp.forEach(t),ln=f(e),Fr=a(e,"P",{});var Yp=n(Fr);Ro=g(Yp,"int([x]) -> integer"),Yp.forEach(t),on=f(e),Cr=a(e,"P",{});var Jp=n(Cr);Oo=g(Jp,"int(x, base=10) -> integer"),Jp.forEach(t),gn=f(e),ze=a(e,"P",{});var Vn=n(ze);So=g(Vn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Bs=a(Vn,"STRONG",{});var Kp=n(Bs);Fo=g(Kp,"int"),Kp.forEach(t),Co=g(Vn,`().  For floating point
numbers, this truncates towards zero.`),Vn.forEach(t),pn=f(e),Dr=a(e,"P",{});var Qp=n(Dr);Do=g(Qp,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Qp.forEach(t),fn=f(e),u(Dt.$$.fragment,e),this.h()},h(){d(E,"name","hf:doc:metadata"),d(E,"content",JSON.stringify(lf)),d(_,"id","logging-methods"),d(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_,"href","#logging-methods"),d(w,"class","relative group"),d(zt,"href","/docs/datasets/pr_4202/en/package_reference/logging_methods#datasets.utils.logging.get_verbosity"),d(Yt,"href","/docs/datasets/pr_4202/en/package_reference/logging_methods#datasets.utils.logging.set_verbosity"),d(Xt,"href","/docs/datasets/pr_4202/en/package_reference/logging_methods#datasets.disable_progress_bar"),d(Zt,"href","/docs/datasets/pr_4202/en/package_reference/logging_methods#datasets.enable_progress_bar"),d(Ne,"id","datasets.utils.logging.get_verbosity"),d(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ne,"href","#datasets.utils.logging.get_verbosity"),d(ee,"class","relative group"),d(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Re,"id","levels"),d(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Re,"href","#levels"),d(oe,"class","relative group"),d(Oe,"id","datasetsloggingcritical"),d(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oe,"href","#datasetsloggingcritical"),d(ge,"class","relative group"),d(Fe,"id","datasetsloggingdebug"),d(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Fe,"href","#datasetsloggingdebug"),d(pe,"class","relative group"),d(De,"id","datasetsloggingerror"),d(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(De,"href","#datasetsloggingerror"),d(fe,"class","relative group"),d(ke,"id","datasetsloggingfatal"),d(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ke,"href","#datasetsloggingfatal"),d(de,"class","relative group"),d(Be,"id","datasetslogginginfo"),d(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Be,"href","#datasetslogginginfo"),d(be,"class","relative group"),d(Ve,"id","datasetsloggingnotset"),d(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ve,"href","#datasetsloggingnotset"),d(ue,"class","relative group"),d(We,"id","datasetsloggingwarn"),d(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(We,"href","#datasetsloggingwarn"),d(he,"class","relative group"),d(Ue,"id","datasetsloggingwarning"),d(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ue,"href","#datasetsloggingwarning"),d(ve,"class","relative group")},m(e,l){r(document.head,E),i(e,me,l),i(e,w,l),r(w,_),r(_,N),h(P,N,null),r(w,Xe),r(w,Y),r(Y,J),i(e,ce,l),i(e,D,l),r(D,K),r(D,B),r(B,Ze),r(D,et),i(e,L,l),i(e,x,l),r(x,tt),r(x,Q),r(Q,X),r(x,rt),i(e,_e,l),h(R,e,l),i(e,W,l),i(e,$,l),r($,st),r($,G),r(G,Z),r($,at),r($,y),r(y,q),r($,I),r($,U),r(U,kt),r($,jt),r($,$e),r($e,Bt),r($,ye),r($,Ee),r(Ee,Gt),r($,Vt),r($,we),r(we,Ht),r($,Wt),i(e,Ws,l),h(nt,e,l),i(e,qs,l),i(e,qt,l),r(qt,Hn),i(e,Us,l),i(e,xe,l),r(xe,Ut),r(Ut,zt),r(zt,Wn),r(Ut,qn),r(xe,Un),r(xe,Mt),r(Mt,Yt),r(Yt,zn),r(Mt,Mn),i(e,zs,l),i(e,Ie,l),r(Ie,Yn),r(Ie,kr),r(kr,Jn),r(Ie,Kn),i(e,Ms,l),i(e,A,l),r(A,Ae),r(Ae,jr),r(jr,Qn),r(Ae,Xn),r(Ae,Br),r(Br,Zn),r(Ae,el),r(A,tl),r(A,Jt),r(Jt,Gr),r(Gr,rl),r(Jt,sl),r(A,al),r(A,Te),r(Te,Vr),r(Vr,nl),r(Te,ll),r(Te,Hr),r(Hr,il),r(Te,ol),r(A,gl),r(A,Kt),r(Kt,Wr),r(Wr,pl),r(Kt,fl),r(A,dl),r(A,Qt),r(Qt,qr),r(qr,bl),r(Qt,ul),i(e,Ys,l),i(e,k,l),r(k,hl),r(k,Ur),r(Ur,vl),r(k,ml),r(k,Xt),r(Xt,cl),r(k,_l),r(k,Zt),r(Zt,$l),r(k,yl),i(e,Js,l),i(e,ee,l),r(ee,Ne),r(Ne,zr),h(lt,zr,null),r(ee,El),r(ee,Mr),r(Mr,wl),i(e,Ks,l),i(e,V,l),h(it,V,null),r(V,xl),r(V,Yr),r(Yr,Il),r(V,Al),h(Pe,V,null),i(e,Qs,l),i(e,te,l),h(ot,te,null),r(te,Tl),r(te,Jr),r(Jr,Nl),i(e,Xs,l),i(e,O,l),h(gt,O,null),r(O,Pl),r(O,Kr),r(Kr,Rl),r(O,Ol),r(O,Qr),r(Qr,Sl),r(O,Fl),r(O,er),r(er,Cl),r(er,Xr),r(Xr,Dl),i(e,Zs,l),i(e,S,l),h(pt,S,null),r(S,Ll),r(S,Zr),r(Zr,kl),r(S,jl),r(S,es),r(es,Bl),r(S,Gl),r(S,tr),r(tr,Vl),r(tr,ts),r(ts,Hl),i(e,ea,l),i(e,F,l),h(ft,F,null),r(F,Wl),r(F,rs),r(rs,ql),r(F,Ul),r(F,ss),r(ss,zl),r(F,Ml),r(F,rr),r(rr,Yl),r(rr,as),r(as,Jl),i(e,ta,l),i(e,C,l),h(dt,C,null),r(C,Kl),r(C,ns),r(ns,Ql),r(C,Xl),r(C,ls),r(ls,Zl),r(C,ei),r(C,sr),r(sr,ti),r(sr,is),r(is,ri),i(e,ra,l),i(e,re,l),h(bt,re,null),r(re,si),r(re,os),r(os,ai),i(e,sa,l),i(e,se,l),h(ut,se,null),r(se,ni),r(se,gs),r(gs,li),i(e,aa,l),i(e,ae,l),h(ht,ae,null),r(ae,ii),r(ae,ps),r(ps,oi),i(e,na,l),i(e,ne,l),h(vt,ne,null),r(ne,gi),r(ne,fs),r(fs,pi),i(e,la,l),i(e,le,l),h(mt,le,null),r(le,fi),r(le,ds),r(ds,di),i(e,ia,l),i(e,ie,l),h(ct,ie,null),r(ie,bi),r(ie,bs),r(bs,ui),i(e,oa,l),i(e,oe,l),r(oe,Re),r(Re,us),h(_t,us,null),r(oe,hi),r(oe,hs),r(hs,vi),i(e,ga,l),i(e,ge,l),r(ge,Oe),r(Oe,vs),h($t,vs,null),r(ge,mi),r(ge,ms),r(ms,ci),i(e,pa,l),i(e,ar,l),r(ar,_i),i(e,fa,l),i(e,nr,l),r(nr,$i),i(e,da,l),i(e,lr,l),r(lr,yi),i(e,ba,l),i(e,Se,l),r(Se,Ei),r(Se,cs),r(cs,wi),r(Se,xi),i(e,ua,l),i(e,ir,l),r(ir,Ii),i(e,ha,l),h(yt,e,l),i(e,va,l),i(e,pe,l),r(pe,Fe),r(Fe,_s),h(Et,_s,null),r(pe,Ai),r(pe,$s),r($s,Ti),i(e,ma,l),i(e,or,l),r(or,Ni),i(e,ca,l),i(e,gr,l),r(gr,Pi),i(e,_a,l),i(e,pr,l),r(pr,Ri),i(e,$a,l),i(e,Ce,l),r(Ce,Oi),r(Ce,ys),r(ys,Si),r(Ce,Fi),i(e,ya,l),i(e,fr,l),r(fr,Ci),i(e,Ea,l),h(wt,e,l),i(e,wa,l),i(e,fe,l),r(fe,De),r(De,Es),h(xt,Es,null),r(fe,Di),r(fe,ws),r(ws,Li),i(e,xa,l),i(e,dr,l),r(dr,ki),i(e,Ia,l),i(e,br,l),r(br,ji),i(e,Aa,l),i(e,ur,l),r(ur,Bi),i(e,Ta,l),i(e,Le,l),r(Le,Gi),r(Le,xs),r(xs,Vi),r(Le,Hi),i(e,Na,l),i(e,hr,l),r(hr,Wi),i(e,Pa,l),h(It,e,l),i(e,Ra,l),i(e,de,l),r(de,ke),r(ke,Is),h(At,Is,null),r(de,qi),r(de,As),r(As,Ui),i(e,Oa,l),i(e,vr,l),r(vr,zi),i(e,Sa,l),i(e,mr,l),r(mr,Mi),i(e,Fa,l),i(e,cr,l),r(cr,Yi),i(e,Ca,l),i(e,je,l),r(je,Ji),r(je,Ts),r(Ts,Ki),r(je,Qi),i(e,Da,l),i(e,_r,l),r(_r,Xi),i(e,La,l),h(Tt,e,l),i(e,ka,l),i(e,be,l),r(be,Be),r(Be,Ns),h(Nt,Ns,null),r(be,Zi),r(be,Ps),r(Ps,eo),i(e,ja,l),i(e,$r,l),r($r,to),i(e,Ba,l),i(e,yr,l),r(yr,ro),i(e,Ga,l),i(e,Er,l),r(Er,so),i(e,Va,l),i(e,Ge,l),r(Ge,ao),r(Ge,Rs),r(Rs,no),r(Ge,lo),i(e,Ha,l),i(e,wr,l),r(wr,io),i(e,Wa,l),h(Pt,e,l),i(e,qa,l),i(e,ue,l),r(ue,Ve),r(Ve,Os),h(Rt,Os,null),r(ue,oo),r(ue,Ss),r(Ss,go),i(e,Ua,l),i(e,xr,l),r(xr,po),i(e,za,l),i(e,Ir,l),r(Ir,fo),i(e,Ma,l),i(e,Ar,l),r(Ar,bo),i(e,Ya,l),i(e,He,l),r(He,uo),r(He,Fs),r(Fs,ho),r(He,vo),i(e,Ja,l),i(e,Tr,l),r(Tr,mo),i(e,Ka,l),h(Ot,e,l),i(e,Qa,l),i(e,he,l),r(he,We),r(We,Cs),h(St,Cs,null),r(he,co),r(he,Ds),r(Ds,_o),i(e,Xa,l),i(e,Nr,l),r(Nr,$o),i(e,Za,l),i(e,Pr,l),r(Pr,yo),i(e,en,l),i(e,Rr,l),r(Rr,Eo),i(e,tn,l),i(e,qe,l),r(qe,wo),r(qe,Ls),r(Ls,xo),r(qe,Io),i(e,rn,l),i(e,Or,l),r(Or,Ao),i(e,sn,l),h(Ft,e,l),i(e,an,l),i(e,ve,l),r(ve,Ue),r(Ue,ks),h(Ct,ks,null),r(ve,To),r(ve,js),r(js,No),i(e,nn,l),i(e,Sr,l),r(Sr,Po),i(e,ln,l),i(e,Fr,l),r(Fr,Ro),i(e,on,l),i(e,Cr,l),r(Cr,Oo),i(e,gn,l),i(e,ze,l),r(ze,So),r(ze,Bs),r(Bs,Fo),r(ze,Co),i(e,pn,l),i(e,Dr,l),r(Dr,Do),i(e,fn,l),h(Dt,e,l),dn=!0},p(e,[l]){const Lt={};l&2&&(Lt.$$scope={dirty:l,ctx:e}),Pe.$set(Lt)},i(e){dn||(v(P.$$.fragment,e),v(R.$$.fragment,e),v(nt.$$.fragment,e),v(lt.$$.fragment,e),v(it.$$.fragment,e),v(Pe.$$.fragment,e),v(ot.$$.fragment,e),v(gt.$$.fragment,e),v(pt.$$.fragment,e),v(ft.$$.fragment,e),v(dt.$$.fragment,e),v(bt.$$.fragment,e),v(ut.$$.fragment,e),v(ht.$$.fragment,e),v(vt.$$.fragment,e),v(mt.$$.fragment,e),v(ct.$$.fragment,e),v(_t.$$.fragment,e),v($t.$$.fragment,e),v(yt.$$.fragment,e),v(Et.$$.fragment,e),v(wt.$$.fragment,e),v(xt.$$.fragment,e),v(It.$$.fragment,e),v(At.$$.fragment,e),v(Tt.$$.fragment,e),v(Nt.$$.fragment,e),v(Pt.$$.fragment,e),v(Rt.$$.fragment,e),v(Ot.$$.fragment,e),v(St.$$.fragment,e),v(Ft.$$.fragment,e),v(Ct.$$.fragment,e),v(Dt.$$.fragment,e),dn=!0)},o(e){m(P.$$.fragment,e),m(R.$$.fragment,e),m(nt.$$.fragment,e),m(lt.$$.fragment,e),m(it.$$.fragment,e),m(Pe.$$.fragment,e),m(ot.$$.fragment,e),m(gt.$$.fragment,e),m(pt.$$.fragment,e),m(ft.$$.fragment,e),m(dt.$$.fragment,e),m(bt.$$.fragment,e),m(ut.$$.fragment,e),m(ht.$$.fragment,e),m(vt.$$.fragment,e),m(mt.$$.fragment,e),m(ct.$$.fragment,e),m(_t.$$.fragment,e),m($t.$$.fragment,e),m(yt.$$.fragment,e),m(Et.$$.fragment,e),m(wt.$$.fragment,e),m(xt.$$.fragment,e),m(It.$$.fragment,e),m(At.$$.fragment,e),m(Tt.$$.fragment,e),m(Nt.$$.fragment,e),m(Pt.$$.fragment,e),m(Rt.$$.fragment,e),m(Ot.$$.fragment,e),m(St.$$.fragment,e),m(Ft.$$.fragment,e),m(Ct.$$.fragment,e),m(Dt.$$.fragment,e),dn=!1},d(e){t(E),e&&t(me),e&&t(w),c(P),e&&t(ce),e&&t(D),e&&t(L),e&&t(x),e&&t(_e),c(R,e),e&&t(W),e&&t($),e&&t(Ws),c(nt,e),e&&t(qs),e&&t(qt),e&&t(Us),e&&t(xe),e&&t(zs),e&&t(Ie),e&&t(Ms),e&&t(A),e&&t(Ys),e&&t(k),e&&t(Js),e&&t(ee),c(lt),e&&t(Ks),e&&t(V),c(it),c(Pe),e&&t(Qs),e&&t(te),c(ot),e&&t(Xs),e&&t(O),c(gt),e&&t(Zs),e&&t(S),c(pt),e&&t(ea),e&&t(F),c(ft),e&&t(ta),e&&t(C),c(dt),e&&t(ra),e&&t(re),c(bt),e&&t(sa),e&&t(se),c(ut),e&&t(aa),e&&t(ae),c(ht),e&&t(na),e&&t(ne),c(vt),e&&t(la),e&&t(le),c(mt),e&&t(ia),e&&t(ie),c(ct),e&&t(oa),e&&t(oe),c(_t),e&&t(ga),e&&t(ge),c($t),e&&t(pa),e&&t(ar),e&&t(fa),e&&t(nr),e&&t(da),e&&t(lr),e&&t(ba),e&&t(Se),e&&t(ua),e&&t(ir),e&&t(ha),c(yt,e),e&&t(va),e&&t(pe),c(Et),e&&t(ma),e&&t(or),e&&t(ca),e&&t(gr),e&&t(_a),e&&t(pr),e&&t($a),e&&t(Ce),e&&t(ya),e&&t(fr),e&&t(Ea),c(wt,e),e&&t(wa),e&&t(fe),c(xt),e&&t(xa),e&&t(dr),e&&t(Ia),e&&t(br),e&&t(Aa),e&&t(ur),e&&t(Ta),e&&t(Le),e&&t(Na),e&&t(hr),e&&t(Pa),c(It,e),e&&t(Ra),e&&t(de),c(At),e&&t(Oa),e&&t(vr),e&&t(Sa),e&&t(mr),e&&t(Fa),e&&t(cr),e&&t(Ca),e&&t(je),e&&t(Da),e&&t(_r),e&&t(La),c(Tt,e),e&&t(ka),e&&t(be),c(Nt),e&&t(ja),e&&t($r),e&&t(Ba),e&&t(yr),e&&t(Ga),e&&t(Er),e&&t(Va),e&&t(Ge),e&&t(Ha),e&&t(wr),e&&t(Wa),c(Pt,e),e&&t(qa),e&&t(ue),c(Rt),e&&t(Ua),e&&t(xr),e&&t(za),e&&t(Ir),e&&t(Ma),e&&t(Ar),e&&t(Ya),e&&t(He),e&&t(Ja),e&&t(Tr),e&&t(Ka),c(Ot,e),e&&t(Qa),e&&t(he),c(St),e&&t(Xa),e&&t(Nr),e&&t(Za),e&&t(Pr),e&&t(en),e&&t(Rr),e&&t(tn),e&&t(qe),e&&t(rn),e&&t(Or),e&&t(sn),c(Ft,e),e&&t(an),e&&t(ve),c(Ct),e&&t(nn),e&&t(Sr),e&&t(ln),e&&t(Fr),e&&t(on),e&&t(Cr),e&&t(gn),e&&t(ze),e&&t(pn),e&&t(Dr),e&&t(fn),c(Dt,e)}}}const lf={local:"logging-methods",sections:[{local:"datasets.utils.logging.get_verbosity",title:"Functions"},{local:"levels",sections:[{local:"datasetsloggingcritical",title:"datasets.logging.CRITICAL"},{local:"datasetsloggingdebug",title:"datasets.logging.DEBUG"},{local:"datasetsloggingerror",title:"datasets.logging.ERROR"},{local:"datasetsloggingfatal",title:"datasets.logging.FATAL"},{local:"datasetslogginginfo",title:"datasets.logging.INFO"},{local:"datasetsloggingnotset",title:"datasets.logging.NOTSET"},{local:"datasetsloggingwarn",title:"datasets.logging.WARN"},{local:"datasetsloggingwarning",title:"datasets.logging.WARNING"}],title:"Levels"}],title:"Logging methods"};function of(Hs){return rf(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class uf extends Xp{constructor(E){super();Zp(this,E,of,nf,ef,{})}}export{uf as default,lf as metadata};
