import{S as UK,i as RK,s as BK,e as a,k as l,w as p,t as r,M as GK,c as s,d as t,m as d,a as n,x as m,h as o,b as c,F as e,g as $,y as h,q as f,o as u,B as g}from"../../chunks/vendor-e67aec41.js";import{T as HK}from"../../chunks/Tip-76459d1c.js";import{D as _}from"../../chunks/Docstring-fac5775a.js";import{C as H}from"../../chunks/CodeBlock-e2bcf023.js";import{I as Je}from"../../chunks/IconCopyLink-ffd7f84e.js";function WK(af){let A,ht,S,Q,sa,he,Vr,na,ft,ss,fe;return{c(){A=a("p"),ht=r("A "),S=a("a"),Q=r("datasets.Sequence"),sa=r(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),he=a("code"),Vr=r("list"),na=r(` instead of the
`),ft=a("a"),ss=r("datasets.Sequence"),fe=r("."),this.h()},l(ne){A=s(ne,"P",{});var W=n(A);ht=o(W,"A "),S=s(W,"A",{href:!0});var ut=n(S);Q=o(ut,"datasets.Sequence"),ut.forEach(t),sa=o(W,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),he=s(W,"CODE",{});var Qc=n(he);Vr=o(Qc,"list"),Qc.forEach(t),na=o(W,` instead of the
`),ft=s(W,"A",{href:!0});var ns=n(ft);ss=o(ns,"datasets.Sequence"),ns.forEach(t),fe=o(W,"."),W.forEach(t),this.h()},h(){c(S,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Sequence"),c(ft,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Sequence")},m(ne,W){$(ne,A,W),e(A,ht),e(A,S),e(S,Q),e(A,sa),e(A,he),e(he,Vr),e(A,na),e(A,ft),e(ft,ss),e(A,fe)},d(ne){ne&&t(A)}}}function KK(af){let A,ht,S,Q,sa,he,Vr,na,ft,ss,fe,ne,W,ut,Qc,ns,bD,Ey,U,Mr,yD,sf,$D,wD,ep,nf,DD,xD,ED,rf,kD,ID,xe,Ur,TD,Rr,ND,of,PD,FD,LD,lf,AD,OD,df,SD,jD,gt,Br,CD,ra,qD,cf,zD,VD,pf,MD,UD,RD,mf,BD,ky,oa,rs,hf,Gr,GD,ff,HD,Iy,os,WD,tp,KD,YD,Ty,v,Hr,JD,uf,XD,ZD,_t,Wr,QD,gf,ex,tx,_f,vf,ax,sx,vt,Kr,nx,bf,rx,ox,yf,$f,ix,lx,is,Yr,dx,wf,cx,px,ls,Jr,mx,Df,hx,fx,Ee,Xr,ux,Xe,gx,xf,_x,vx,Ef,bx,yx,ap,$x,wx,Dx,Zr,xx,kf,Ex,kx,Ix,Qr,Tx,If,Nx,Px,Fx,ds,eo,Lx,Ze,Ax,Tf,Ox,Sx,Nf,jx,Cx,sp,qx,zx,Vx,cs,to,Mx,Pf,Ux,Rx,ps,ao,Bx,Ff,Gx,Hx,ms,so,Wx,Lf,Kx,Yx,hs,no,Jx,ro,Xx,fs,Zx,Af,Qx,e3,t3,a3,us,oo,s3,Of,n3,r3,gs,io,o3,Sf,i3,l3,bt,lo,d3,jf,c3,p3,Cf,m3,h3,_s,co,f3,qf,u3,g3,vs,po,_3,zf,v3,b3,bs,mo,y3,Vf,$3,w3,yt,ho,D3,Mf,x3,E3,ia,k3,np,I3,T3,Uf,N3,P3,F3,ys,fo,L3,Rf,A3,O3,$s,uo,S3,go,j3,Bf,C3,q3,z3,ws,_o,V3,Gf,M3,U3,$t,vo,R3,Hf,B3,G3,bo,H3,rp,W3,K3,Y3,Ds,yo,J3,la,X3,Wf,Z3,Q3,Kf,e0,t0,a0,ke,$o,s0,ue,n0,Yf,r0,o0,Jf,i0,l0,Xf,d0,c0,op,p0,m0,h0,ge,f0,Zf,u0,g0,Qf,_0,v0,eu,b0,y0,tu,$0,w0,D0,au,x0,E0,xs,wo,k0,Ie,I0,su,T0,N0,nu,P0,F0,ip,L0,A0,lp,O0,S0,wt,Do,j0,xo,C0,ru,q0,z0,V0,dp,M0,ou,U0,R0,Te,Eo,B0,Qe,G0,iu,H0,W0,lu,K0,Y0,du,J0,X0,Z0,ko,Q0,cp,e7,t7,a7,da,s7,pp,n7,r7,cu,o7,i7,l7,Ne,Io,d7,ca,c7,pu,p7,m7,mu,h7,f7,u7,pa,g7,mp,_7,v7,hp,b7,y7,$7,ma,w7,fp,D7,x7,hu,E7,k7,I7,Es,To,T7,fu,N7,P7,Dt,No,F7,uu,L7,A7,gu,O7,S7,Pe,Po,j7,_u,C7,q7,Fo,z7,vu,V7,M7,U7,ha,bu,R7,B7,yu,G7,H7,ee,W7,$u,K7,Y7,wu,J7,X7,Du,Z7,Q7,xu,e4,t4,Eu,a4,s4,n4,ks,Lo,r4,ku,o4,i4,Is,Ao,l4,Iu,d4,c4,xt,Oo,p4,Tu,m4,h4,Nu,f4,u4,Et,So,g4,Pu,_4,v4,Fu,b4,y4,kt,jo,$4,j,w4,Lu,D4,x4,Au,E4,k4,Ou,I4,T4,Su,N4,P4,ju,F4,L4,Cu,A4,O4,qu,S4,j4,C4,Co,q4,zu,z4,V4,M4,re,qo,U4,fa,R4,Vu,B4,G4,Mu,H4,W4,K4,Uu,Y4,J4,zo,X4,Ru,Z4,Q4,eE,Bu,tE,aE,Ts,Vo,sE,Gu,nE,rE,Fe,Mo,oE,Hu,iE,lE,Wu,dE,cE,Uo,pE,Ns,Ro,mE,ua,hE,up,fE,uE,Ku,gE,_E,vE,Ps,Bo,bE,et,yE,Yu,$E,wE,gp,DE,xE,Ju,EE,kE,IE,Fs,Go,TE,Xu,NE,PE,Ls,Ho,FE,Zu,LE,AE,As,Wo,OE,Ko,SE,Qu,jE,CE,qE,Os,Yo,zE,eg,VE,ME,Ss,Jo,UE,tg,RE,BE,js,Xo,GE,ag,HE,WE,oe,Zo,KE,ga,YE,sg,JE,XE,ng,ZE,QE,ek,rg,_p,tk,Qo,ak,sk,og,nk,rk,ei,ok,It,ti,ik,tt,lk,ig,dk,ck,lg,pk,mk,dg,hk,fk,uk,cg,vp,gk,ai,_k,vk,Cs,si,bk,pg,yk,$k,Tt,ni,wk,mg,Dk,xk,ri,Ek,hg,kk,Ik,Tk,K,oi,Nk,fg,Pk,Fk,ug,Lk,Ak,ii,Ok,gg,Sk,jk,li,Ck,Le,di,qk,_g,zk,Vk,vg,Mk,Uk,ci,Rk,qs,pi,Bk,bg,Gk,Hk,zs,mi,Wk,yg,Kk,Yk,Vs,hi,Jk,$g,Xk,Zk,Ms,fi,Qk,wg,eI,tI,Us,ui,aI,Dg,sI,nI,Rs,gi,rI,xg,oI,iI,Bs,_i,lI,Eg,dI,cI,Gs,vi,pI,bp,yp,mI,hI,fI,Hs,bi,uI,$p,wp,gI,_I,vI,Dp,yi,bI,xp,$i,yI,Ep,wi,$I,kp,Di,wI,Ip,xi,DI,Tp,Ei,xI,Np,ki,EI,Pp,Ii,kI,Fp,Ti,II,Lp,Ni,TI,Ap,Pi,NI,Op,Fi,PI,Sp,Li,FI,Ws,Ai,LI,kg,AI,OI,Ks,Oi,SI,Ig,jI,CI,Ys,Si,qI,Tg,zI,VI,Js,ji,MI,Ng,UI,RI,Nt,Ci,BI,_a,GI,jp,HI,WI,Cp,KI,YI,JI,va,XI,Pg,ZI,QI,Fg,e5,t5,a5,Ae,qi,s5,zi,n5,Lg,r5,o5,i5,Ag,l5,d5,Vi,Ny,ba,Mi,c5,ya,p5,qp,m5,h5,zp,f5,u5,Py,C,Ui,g5,Og,_5,v5,$a,b5,Vp,y5,$5,Mp,w5,D5,x5,_e,E5,Sg,k5,I5,jg,T5,N5,Cg,P5,F5,qg,L5,A5,O5,zg,S5,j5,Vg,C5,q5,Ri,Fy,te,Bi,z5,Mg,V5,M5,Ug,U5,R5,Rg,B5,G5,ve,Bg,H5,W5,Gg,K5,Y5,Hg,J5,X5,Gi,Z5,Up,Q5,e6,t6,at,a6,Rp,s6,n6,Wg,r6,o6,Bp,i6,l6,Ly,ae,Hi,d6,Kg,c6,p6,Yg,m6,h6,Jg,f6,u6,be,Xg,g6,_6,Zg,v6,b6,Qg,y6,$6,Wi,w6,Gp,D6,x6,E6,st,k6,Hp,I6,T6,e_,N6,P6,Wp,F6,L6,Ay,wa,Ki,A6,t_,O6,Oy,Da,Yi,S6,a_,j6,Sy,xa,Xs,s_,Ji,C6,n_,q6,jy,Zs,z6,r_,V6,M6,Cy,w,Xi,U6,o_,R6,B6,Qs,Zi,G6,i_,H6,W6,en,Qi,K6,l_,Y6,J6,tn,el,X6,d_,Z6,Q6,an,tl,e8,al,t8,sn,a8,c_,s8,n8,r8,o8,nn,sl,i8,p_,l8,d8,rn,nl,c8,m_,p8,m8,Pt,rl,h8,h_,f8,u8,f_,g8,_8,on,ol,v8,u_,b8,y8,ln,il,$8,g_,w8,D8,dn,ll,x8,__,E8,k8,Ft,dl,I8,v_,T8,N8,b_,P8,F8,Oe,cl,L8,y_,A8,O8,$_,S8,j8,w_,C8,q8,Se,pl,z8,ml,V8,D_,M8,U8,R8,ye,B8,x_,G8,H8,E_,W8,K8,k_,Y8,J8,I_,X8,Z8,Q8,T_,e9,t9,Lt,hl,a9,fl,s9,N_,n9,r9,o9,Kp,i9,P_,l9,d9,cn,ul,c9,Ea,p9,F_,m9,h9,L_,f9,u9,g9,je,gl,_9,nt,v9,A_,b9,y9,O_,$9,w9,S_,D9,x9,E9,_l,k9,Yp,I9,T9,N9,ka,P9,Jp,F9,L9,j_,A9,O9,S9,Ce,vl,j9,Ia,C9,C_,q9,z9,q_,V9,M9,U9,Ta,R9,Xp,B9,G9,Zp,H9,W9,K9,Na,Y9,z_,J9,X9,V_,Z9,Q9,eT,pn,bl,tT,M_,aT,sT,At,yl,nT,U_,rT,oT,rt,iT,Qp,lT,dT,R_,cT,pT,B_,mT,hT,fT,mn,$l,uT,G_,gT,_T,qe,wl,vT,H_,bT,yT,W_,$T,wT,Pa,DT,em,xT,ET,K_,kT,IT,TT,ze,Dl,NT,Y_,PT,FT,Fa,LT,tm,AT,OT,J_,ST,jT,CT,xl,X_,qT,zT,Z_,VT,MT,hn,El,UT,kl,RT,Q_,BT,GT,HT,ie,Il,WT,La,KT,ev,YT,JT,tv,XT,ZT,QT,av,eN,tN,sv,aN,sN,Tl,nN,fn,Nl,rN,Aa,oN,am,iN,lN,nv,dN,cN,pN,un,Pl,mN,ot,hN,rv,fN,uN,sm,gN,_N,ov,vN,bN,yN,gn,Fl,$N,iv,wN,DN,_n,Ll,xN,lv,EN,kN,vn,Al,IN,dv,TN,NN,bn,Ol,PN,cv,FN,LN,Ot,Sl,AN,Oa,ON,nm,SN,jN,rm,CN,qN,zN,Sa,VN,pv,MN,UN,mv,RN,BN,qy,om,zy,ja,yn,hv,jl,GN,fv,HN,Vy,$n,WN,im,KN,YN,My,x,Cl,JN,uv,XN,ZN,wn,ql,QN,gv,eP,tP,Dn,zl,aP,_v,sP,nP,lm,Vl,rP,Ve,Ml,oP,vv,iP,lP,Ul,dP,bv,cP,pP,mP,Ca,yv,hP,fP,$v,uP,gP,se,_P,wv,vP,bP,Dv,yP,$P,xv,wP,DP,Ev,xP,EP,kv,kP,IP,TP,le,Rl,NP,Iv,PP,FP,Tv,LP,AP,Bl,OP,Nv,SP,jP,CP,qa,qP,dm,zP,VP,cm,MP,UP,RP,xn,Gl,BP,Hl,GP,Pv,HP,WP,KP,En,Wl,YP,Kl,JP,Fv,XP,ZP,QP,kn,Yl,eF,pm,mm,tF,aF,sF,In,Jl,nF,hm,fm,rF,oF,iF,um,Xl,lF,gm,Zl,dF,_m,Ql,cF,vm,ed,pF,bm,td,mF,ym,ad,hF,$m,sd,fF,wm,nd,uF,Dm,rd,gF,xm,od,_F,Em,id,vF,km,ld,bF,Im,dd,Uy,za,Tn,Lv,cd,yF,Av,$F,Ry,Nn,wF,Ov,DF,xF,By,pd,md,Gy,Va,Pn,Sv,hd,EF,jv,kF,Hy,T,fd,IF,Cv,TF,NF,ud,PF,qv,FF,LF,AF,Tm,zv,OF,SF,jF,q,Vv,St,CF,Nm,qF,zF,Mv,VF,MF,Uv,UF,RF,Rv,gd,BF,Pm,GF,HF,WF,Bv,_d,KF,Gv,YF,JF,XF,vd,$e,ZF,Hv,QF,eL,Fm,tL,aL,Wv,sL,nL,Lm,rL,oL,iL,Fn,lL,Kv,we,dL,Am,cL,pL,Om,mL,hL,Sm,fL,uL,jm,gL,_L,vL,Yv,bd,bL,Cm,yL,$L,wL,Jv,it,DL,qm,xL,EL,Xv,kL,IL,Zv,TL,NL,PL,Qv,Ln,zm,FL,LL,Vm,AL,OL,SL,An,yd,jL,e1,CL,qL,On,$d,zL,t1,VL,ML,Sn,wd,UL,a1,RL,BL,jn,Dd,GL,s1,HL,WL,Cn,xd,KL,n1,YL,JL,qn,Ed,XL,r1,ZL,QL,jt,kd,eA,o1,tA,aA,i1,sA,nA,zn,Id,rA,l1,oA,iA,Y,Td,lA,d1,dA,cA,c1,pA,mA,lt,hA,Mm,fA,uA,Um,gA,_A,Rm,vA,bA,yA,p1,$A,wA,Nd,DA,de,Pd,xA,m1,EA,kA,h1,IA,TA,f1,NA,PA,Fd,Wy,Ma,Ld,FA,u1,LA,Ky,R,Ad,AA,g1,OA,SA,Od,jA,_1,CA,qA,zA,Ua,Bm,v1,VA,MA,UA,Gm,b1,RA,BA,GA,Hm,y1,HA,WA,KA,Vn,Sd,YA,$1,JA,XA,Mn,jd,ZA,w1,QA,Yy,dt,Cd,eO,D1,tO,aO,x1,sO,Jy,z,qd,nO,Wm,E1,rO,oO,iO,k1,lO,dO,zd,cO,I1,pO,mO,hO,T1,fO,uO,Vd,gO,Un,Md,_O,N1,vO,Xy,V,Ud,bO,Km,P1,yO,$O,wO,F1,DO,xO,L1,EO,kO,A1,IO,TO,Rd,NO,Rn,Bd,PO,O1,FO,Zy,Gd,Hd,Qy,Wd,Kd,e2,Yd,Jd,t2,Xd,Zd,a2,P,Qd,LO,S1,AO,OO,j1,SO,jO,ec,C1,tc,CO,q1,qO,zO,VO,ac,sc,MO,z1,UO,RO,BO,nc,V1,GO,HO,M1,WO,KO,U1,YO,JO,R1,rc,oc,XO,B1,ZO,QO,eS,Ra,G1,tS,aS,H1,sS,nS,W1,rS,oS,K1,iS,lS,Ct,ic,dS,Y1,cS,pS,ct,J1,mS,hS,X1,fS,uS,Z1,gS,_S,Q1,vS,bS,Bn,lc,yS,eb,$S,wS,Gn,dc,DS,tb,xS,ES,Hn,cc,kS,ab,IS,TS,Wn,pc,NS,sb,PS,s2,F,mc,FS,nb,LS,AS,rb,OS,SS,hc,ob,fc,jS,ib,CS,qS,zS,uc,gc,VS,lb,MS,US,RS,_c,db,BS,GS,cb,HS,WS,pb,KS,YS,vc,bc,JS,mb,XS,ZS,QS,yc,ej,hb,tj,aj,sj,qt,$c,nj,fb,rj,oj,De,ub,ij,lj,gb,dj,cj,_b,pj,mj,vb,hj,fj,bb,uj,gj,Kn,wc,_j,yb,vj,bj,Yn,Dc,yj,$b,$j,wj,Jn,xc,Dj,wb,xj,Ej,Xn,Ec,kj,Db,Ij,n2,Ba,Zn,xb,kc,Tj,Eb,Nj,r2,B,Ic,Pj,kb,Fj,Lj,Ym,Ib,Aj,Oj,Sj,Tb,jj,Cj,Qn,Tc,qj,Nc,zj,Nb,Vj,Mj,Uj,er,Pc,Rj,Ga,Bj,Pb,Gj,Hj,Fb,Wj,Kj,o2,Ha,tr,Lb,Fc,Yj,Ab,Jj,i2,zt,Xj,Ob,Zj,Qj,Jm,eC,tC,l2,G,Lc,aC,Sb,sC,nC,ar,Ac,rC,jb,oC,iC,sr,Oc,lC,Cb,dC,cC,Vt,Sc,pC,qb,mC,hC,zb,fC,uC,nr,jc,gC,Vb,_C,d2,Wa,rr,Mb,Cc,vC,Ub,bC,c2,k,qc,yC,Rb,$C,wC,Bb,DC,xC,pt,EC,Gb,kC,IC,Hb,TC,NC,Wb,PC,FC,LC,Kb,AC,OC,Yb,SC,jC,Jb,CC,qC,Me,Xb,zC,VC,zc,MC,UC,Zb,RC,BC,Vc,GC,HC,WC,Qb,KC,YC,ey,JC,XC,Mc,ZC,Ka,QC,ty,eq,tq,ay,aq,sq,nq,Uc,rq,mt,oq,sy,iq,lq,ny,dq,cq,ry,pq,mq,hq,Rc,fq,Ya,uq,oy,gq,_q,iy,vq,bq,yq,Bc,$q,ly,wq,Dq,Gc,xq,or,ir,dy,Hc,Eq,cy,kq,Iq,M,Tq,py,Nq,Pq,my,Fq,Lq,hy,Aq,Oq,fy,Sq,jq,uy,Cq,qq,gy,zq,Vq,_y,Mq,Uq,p2,Ja,Wc,Rq,Xa,Bq,vy,Gq,Hq,by,Wq,Kq,m2,Za,Kc,Yq,yy,Jq,h2,Qa,lr,$y,Yc,Xq,wy,Zq,f2,es,Jc,Qq,Dy,ez,u2;return he=new Je({}),ut=new Je({}),Mr=new _({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/info.py#L87",parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:`<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.
**config_kwargs &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"task_templates"}]}}),Ur=new _({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/info.py#L231",parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"}]}}),Br=new _({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/info.py#L182"}}),Gr=new Je({}),Hr=new _({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L625"}}),Wr=new _({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3573",parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Kr=new _({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3790",parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Yr=new _({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L691",parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Jr=new _({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L726",parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Xr=new _({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L754",parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),eo=new _({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L800",parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),to=new _({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1141"}}),ao=new _({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1146"}}),so=new _({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1154"}}),no=new _({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1159"}}),oo=new _({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1166"}}),io=new _({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1171"}}),lo=new _({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1178",parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>).',name:"column"}],returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),co=new _({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:""},{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1257",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),po=new _({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 10000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 10000"},{name:"num_proc",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1278",parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),mo=new _({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1337",parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ho=new _({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1360",parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),fo=new _({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1396",parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),uo=new _({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1199",parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}]}}),_o=new _({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1498"}}),vo=new _({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1514"}}),yo=new _({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1534",parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),$o=new _({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1562",parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),wo=new _({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1626",parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}]}}),Do=new _({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1619"}}),Eo=new _({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1647",parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),Io=new _({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1674",parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}]}}),To=new _({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1774"}}),No=new _({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1780",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Po=new _({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1818",parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Union[Dict, Any]) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Union[Dict, Any], </em>extra_args) -&gt; Union[Dict, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Union[Dict[List], List[Any]]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]], </em>extra_args) -&gt; Union[Dict, Any]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}]}}),Lo=new _({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L2397",parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}]}}),Ao=new _({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L2559",parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:"<strong>indices</strong> (sequence, iterable, ndarray or Series) &#x2014; List or 1D-array of integer indices for indexing.",name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),Oo=new _({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L2648",parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),So=new _({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L2730",parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),jo=new _({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L2808",parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}]}}),qo=new _({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3008",parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}]}}),Vo=new _({props:{name:"to_tf_dataset",anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset",parameters:[{name:"columns",val:": typing.Union[str, typing.List[str]]"},{name:"batch_size",val:": int"},{name:"shuffle",val:": bool"},{name:"collate_fn",val:": typing.Callable"},{name:"drop_remainder",val:": bool = None"},{name:"collate_fn_args",val:": typing.Dict[str, typing.Any] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str]] = None"},{name:"dummy_labels",val:": bool = False"},{name:"prefetch",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L315",parametersDescription:[{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>) &#x2014; Dataset column(s) to load in the tf.data.Dataset. In general,
only columns that the model can use as input should be included here (numeric data only).`,name:"columns"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.
shuffle(<code>bool</code>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"batch_size"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>None</code>) &#x2014; Drop the last incomplete batch when loading. If not provided,
defaults to the same setting as shuffle.
collate_fn(<code>Callable</code>) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"drop_remainder(bool,"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case it is
not necessary to actually pass the labels here, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.dummy_labels",description:`<strong>dummy_labels</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If no <em>label_cols</em> are set, output an array of &#x201C;dummy&#x201D; labels
with each batch. This can avoid problems with <em>fit()</em> or <em>train_on_batch()</em> that expect labels to be
a Tensor or np.ndarray, but should (hopefully) not be necessary with our standard train_step().`,name:"dummy_labels"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),Mo=new _({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"shard_size",val:": typing.Optional[int] = 524288000"},{name:"embed_external_files",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3497",parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
The size of the dataset shards to be uploaded to the hub. The dataset will be pushed in files
of the size specified here, in bytes. Defaults to a shard size of 500MB.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}]}}),Uo=new H({props:{code:`.. code-block:: python

>>> dataset.push_to_hub("<organization>/<dataset_id>", split="evaluation")`,highlighted:`.. code-block:: python

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;evaluation&quot;</span>)`}}),Ro=new _({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L986",parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}]}}),Bo=new _({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1080",parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],returnDescription:`
<p>the dataset requested.
a <code>datasets.DatasetDict</code> with each split.</p>
`,returnType:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset dict directory</li>
</ul>
`}}),Go=new _({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L2490",parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),Ho=new _({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3147",parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.
to_csv_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>`,name:"num_proc"}],returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Wo=new _({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3242",parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),Yo=new _({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3174",parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),Jo=new _({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3203",parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code>
**to_json_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.</li>
</ul>`,name:"lines"}],returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),Xo=new _({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3273",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Zo=new _({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3598",parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <code>datasets.Dataset.get_nearest_examples()</code>or <code>datasets.Dataset.search()</code>
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}]}}),ei=new H({props:{code:`.. code-block:: python

ds = datasets.load_dataset('crime_and_punish', split='train')
ds_with_embeddings = ds.map(lambda example: {'embeddings': embed(example['line']}))
ds_with_embeddings.add_faiss_index(column='embeddings')
# query
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples('embeddings', embed('my new query'), k=10)
# save index
ds_with_embeddings.save_faiss_index('embeddings', 'my_index.faiss')

ds = datasets.load_dataset('crime_and_punish', split='train')
# load index
ds.load_faiss_index('embeddings', 'my_index.faiss')
# query
scores, retrieved_examples = ds.get_nearest_examples('embeddings', embed('my new query'), k=10)`,highlighted:`.. code-block:: python

ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-comment"># query</span>
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-comment"># save index</span>
ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-comment"># load index</span>
ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-comment"># query</span>
scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`}}),ti=new _({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3670",parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <code>datasets.Dataset.get_nearest_examples()</code>or <code>datasets.Dataset.search()</code>`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}]}}),si=new _({props:{name:"save_faiss_index",anchor:"datasets.search.IndexableMixin.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/search.py#L505",parametersDescription:[{anchor:"datasets.search.IndexableMixin.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}]}}),ni=new _({props:{name:"load_faiss_index",anchor:"datasets.search.IndexableMixin.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, typing.List[int], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/search.py#L518",parametersDescription:[{anchor:"datasets.search.IndexableMixin.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.search.IndexableMixin.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.search.IndexableMixin.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"}]}}),oi=new _({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3722",parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <code>Dataset.get_nearest_examples()</code>or <code>Dataset.search()</code>
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}]}}),ii=new H({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),li=new H({props:{code:`.. code-block:: python

    es_client = elasticsearch.Elasticsearch()
    ds = datasets.load_dataset('crime_and_punish', split='train')
    ds.add_elasticsearch_index(column='line', es_client=es_client, es_index_name="my_es_index")
    scores, retrieved_examples = ds.get_nearest_examples('line', 'my new query', k=10)`,highlighted:`.. code-block:: python

    es_client = elasticsearch.Elasticsearch()
    ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
    ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
    scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`}}),di=new _({props:{name:"load_elasticsearch_index",anchor:"datasets.search.IndexableMixin.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/search.py#L596",parametersDescription:[{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}]}}),ci=new H({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),pi=new _({props:{name:"list_indexes",anchor:"datasets.search.IndexableMixin.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/search.py#L418"}}),mi=new _({props:{name:"get_index",anchor:"datasets.search.IndexableMixin.get_index",parameters:[{name:"index_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/search.py#L422",parametersDescription:[{anchor:"datasets.search.IndexableMixin.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],returnType:`
<p><code>BaseIndex</code></p>
`}}),hi=new _({props:{name:"drop_index",anchor:"datasets.search.IndexableMixin.drop_index",parameters:[{name:"index_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/search.py#L640",parametersDescription:[{anchor:"datasets.search.IndexableMixin.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}]}}),fi=new _({props:{name:"search",anchor:"datasets.search.IndexableMixin.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/search.py#L648",parametersDescription:[{anchor:"datasets.search.IndexableMixin.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.search.IndexableMixin.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples.
The indices of the retrieved examples.</p>
`,returnType:`
<p>indices (<code>List[List[int]]</code>)</p>
`}}),ui=new _({props:{name:"search_batch",anchor:"datasets.search.IndexableMixin.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/search.py#L663",parametersDescription:[{anchor:"datasets.search.IndexableMixin.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.search.IndexableMixin.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_indices (<code>List[List[int]]</code>)</p>
`}}),gi=new _({props:{name:"get_nearest_examples",anchor:"datasets.search.IndexableMixin.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/search.py#L678",parametersDescription:[{anchor:"datasets.search.IndexableMixin.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.search.IndexableMixin.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples.
The retrieved examples.</p>
`,returnType:`
<p>examples (<code>dict</code>)</p>
`}}),_i=new _({props:{name:"get_nearest_examples_batch",anchor:"datasets.search.IndexableMixin.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/search.py#L696",parametersDescription:[{anchor:"datasets.search.IndexableMixin.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.search.IndexableMixin.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
The retrieved examples per query.</p>
`,returnType:`
<p>total_examples (<em>List[dict]</em>)</p>
`}}),vi=new _({props:{name:"info",anchor:"datasets.arrow_dataset.DatasetInfoMixin.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L154"}}),bi=new _({props:{name:"split",anchor:"datasets.arrow_dataset.DatasetInfoMixin.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L159"}}),yi=new _({props:{name:"builder_name",anchor:"datasets.arrow_dataset.DatasetInfoMixin.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L164"}}),$i=new _({props:{name:"citation",anchor:"datasets.arrow_dataset.DatasetInfoMixin.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L168"}}),wi=new _({props:{name:"config_name",anchor:"datasets.arrow_dataset.DatasetInfoMixin.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L172"}}),Di=new _({props:{name:"dataset_size",anchor:"datasets.arrow_dataset.DatasetInfoMixin.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L176"}}),xi=new _({props:{name:"description",anchor:"datasets.arrow_dataset.DatasetInfoMixin.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L180"}}),Ei=new _({props:{name:"download_checksums",anchor:"datasets.arrow_dataset.DatasetInfoMixin.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L184"}}),ki=new _({props:{name:"download_size",anchor:"datasets.arrow_dataset.DatasetInfoMixin.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L188"}}),Ii=new _({props:{name:"features",anchor:"datasets.arrow_dataset.DatasetInfoMixin.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L192"}}),Ti=new _({props:{name:"homepage",anchor:"datasets.arrow_dataset.DatasetInfoMixin.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L196"}}),Ni=new _({props:{name:"license",anchor:"datasets.arrow_dataset.DatasetInfoMixin.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L200"}}),Pi=new _({props:{name:"size_in_bytes",anchor:"datasets.arrow_dataset.DatasetInfoMixin.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L204"}}),Fi=new _({props:{name:"supervised_keys",anchor:"datasets.arrow_dataset.DatasetInfoMixin.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L208"}}),Li=new _({props:{name:"version",anchor:"datasets.arrow_dataset.DatasetInfoMixin.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L216"}}),Ai=new _({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L839",parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Oi=new _({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L868",parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:`<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"field"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Si=new _({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L905",parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ji=new _({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L944",parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ci=new _({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L1700",parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code> must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}]}}),qi=new _({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3830",parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}]}}),Vi=new H({props:{code:`.. code-block:: python

# dataset with mapping {'entailment': 0, 'neutral': 1, 'contradiction': 2}
ds = load_dataset("glue", "mnli", split="train")
# mapping to align with
label2id = {'CONTRADICTION': 0, 'NEUTRAL': 1, 'ENTAILMENT': 2}
ds_aligned = ds.align_labels_with_mapping(label2id, "label")`,highlighted:`.. code-block:: python

<span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
ds = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-comment"># mapping to align with</span>
label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),Mi=new _({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"},{name:"axis",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L3882",parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}]}}),Ui=new _({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/combine.py#L20",parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructued by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.
**kwargs &#x2014; For map-style datasets:
Keyword arguments to be passed to <a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.select">Dataset.select()</a> when selecting the indices used to interleave the datasets.`,name:"seed"}],returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`}}),Ri=new H({props:{code:`For regular datasets (map-style):

>>> from datasets import Dataset, interleave_datasets
>>> d1 = Dataset.from_dict({"a": [0, 1, 2]})
>>> d2 = Dataset.from_dict({"a": [10, 11, 12]})
>>> d3 = Dataset.from_dict({"a": [20, 21, 22]})
>>> dataset = interleave_datasets([d1, d2, d3])
>>> dataset["a"]
[0, 10, 20, 1, 11, 21, 2, 12, 22]
>>> dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
>>> dataset["a"]
[10, 0, 11, 1, 2, 20, 12]

For datasets in streaming mode (iterable):

>>> from datasets import load_dataset, interleave_datasets
>>> d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
>>> d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
>>> dataset = interleave_datasets([d1, d2])
>>> iterator = iter(dataset)
>>> next(iterator)
{'text': 'Mtendere Village was inspired by the vision...
>>> next(iterator)
{'text': "M\xE9dia de d\xE9bat d'id\xE9es, de culture...`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>]

For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),Bi=new _({props:{name:"datasets.set_caching_enabled",anchor:"datasets.set_caching_enabled",parameters:[{name:"boolean",val:": bool"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/fingerprint.py#L96"}}),Hi=new _({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/fingerprint.py#L117"}}),Ki=new _({props:{name:"datasets.set_progress_bar_enabled",anchor:"datasets.set_progress_bar_enabled",parameters:[{name:"boolean",val:": bool"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/utils/tqdm_utils.py#L70"}}),Yi=new _({props:{name:"datasets.is_progress_bar_enabled",anchor:"datasets.is_progress_bar_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/utils/tqdm_utils.py#L76"}}),Ji=new Je({}),Xi=new _({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L30"}}),Zi=new _({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L52"}}),Qi=new _({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L58"}}),el=new _({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L64"}}),tl=new _({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L70"}}),sl=new _({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L76"}}),nl=new _({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L82"}}),rl=new _({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L96",parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)`,name:"column"}],returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),ol=new _({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L112",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),il=new _({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L358",parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><em>function(example: Dict) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict, indices: int) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[List]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[List], indices: List[int]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}]}}),ll=new _({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"remove_columns",val:": typing.Optional[typing.List[str]] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L446",parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}]}}),dl=new _({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L515",parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}]}}),cl=new _({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L571",parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (the seed argument has priority over seeds if both arguments are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}]}}),pl=new _({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L242",parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),hl=new _({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L269"}}),ul=new _({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L209",parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),gl=new _({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L303",parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),vl=new _({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L331",parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}]}}),bl=new _({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L88"}}),yl=new _({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L127",parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}]}}),$l=new _({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L144",parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),wl=new _({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L157",parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}]}}),Dl=new _({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L173",parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}]}}),El=new _({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L194",parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}]}}),Il=new _({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"shard_size",val:": typing.Optional[int] = 524288000"},{name:"embed_external_files",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L832",parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
The size of the dataset shards to be uploaded to the hub. The dataset will be pushed in files
of the size specified here, in bytes.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}]}}),Tl=new H({props:{code:`.. code-block:: python

>>> dataset_dict.push_to_hub("<organization>/<dataset_id>")`,highlighted:`.. code-block:: python

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)`}}),Nl=new _({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L633",parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}]}}),Pl=new _({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L659",parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Fl=new _({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L700",parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Ll=new _({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L727",parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Al=new _({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L754",parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Ol=new _({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L790",parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Sl=new _({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L817",parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code> must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}]}}),jl=new Je({}),Cl=new _({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/iterable_dataset.py#L384"}}),ql=new _({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/iterable_dataset.py#L601",parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),zl=new _({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/iterable_dataset.py#L621",parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Vl=new _({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/iterable_dataset.py#L428"}}),Ml=new _({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Callable"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/iterable_dataset.py#L464",parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; if not None, this function is applied
on-the-fly on the examples when you iterate on the dataset.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}]}}),Rl=new _({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/iterable_dataset.py#L525",parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}]}}),Gl=new _({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/iterable_dataset.py#L569",parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}]}}),Wl=new _({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/iterable_dataset.py#L585",parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}]}}),Yl=new _({props:{name:"info",anchor:"datasets.arrow_dataset.DatasetInfoMixin.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L154"}}),Jl=new _({props:{name:"split",anchor:"datasets.arrow_dataset.DatasetInfoMixin.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L159"}}),Xl=new _({props:{name:"builder_name",anchor:"datasets.arrow_dataset.DatasetInfoMixin.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L164"}}),Zl=new _({props:{name:"citation",anchor:"datasets.arrow_dataset.DatasetInfoMixin.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L168"}}),Ql=new _({props:{name:"config_name",anchor:"datasets.arrow_dataset.DatasetInfoMixin.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L172"}}),ed=new _({props:{name:"dataset_size",anchor:"datasets.arrow_dataset.DatasetInfoMixin.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L176"}}),td=new _({props:{name:"description",anchor:"datasets.arrow_dataset.DatasetInfoMixin.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L180"}}),ad=new _({props:{name:"download_checksums",anchor:"datasets.arrow_dataset.DatasetInfoMixin.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L184"}}),sd=new _({props:{name:"download_size",anchor:"datasets.arrow_dataset.DatasetInfoMixin.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L188"}}),nd=new _({props:{name:"features",anchor:"datasets.arrow_dataset.DatasetInfoMixin.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L192"}}),rd=new _({props:{name:"homepage",anchor:"datasets.arrow_dataset.DatasetInfoMixin.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L196"}}),od=new _({props:{name:"license",anchor:"datasets.arrow_dataset.DatasetInfoMixin.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L200"}}),id=new _({props:{name:"size_in_bytes",anchor:"datasets.arrow_dataset.DatasetInfoMixin.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L204"}}),ld=new _({props:{name:"supervised_keys",anchor:"datasets.arrow_dataset.DatasetInfoMixin.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L208"}}),dd=new _({props:{name:"version",anchor:"datasets.arrow_dataset.DatasetInfoMixin.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/arrow_dataset.py#L216"}}),cd=new Je({}),md=new _({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/dataset_dict.py#L917"}}),hd=new Je({}),fd=new _({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L1170"}}),Fn=new HK({props:{$$slots:{default:[WK]},$$scope:{ctx:af}}}),yd=new _({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L1384",returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),$d=new _({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L1366",parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),wd=new _({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L1350",parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],returnDescription:`
<p><code>list[Any]</code></p>
`}}),Dd=new _({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L1331",parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"}],returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),xd=new _({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L1313",parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Ed=new _({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L1300",parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),kd=new _({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L1454",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),Id=new _({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L1249",parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Td=new _({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L1269",parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Nd=new H({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Pd=new _({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L1393",parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],returnType:`
<p><a
  href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Fd=new H({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),Ld=new _({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L876"}}),Ad=new _({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": int = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L746",parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}]}}),Sd=new _({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L831"}}),jd=new _({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L802"}}),Cd=new _({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L367"}}),qd=new _({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/translation.py#L12"}}),Vd=new H({props:{code:`# At construction time:

datasets.features.Translation(languages=['en', 'fr', 'de'])

# During data generation:

yield {
'en': 'the cat',
'fr': 'le chat',
'de': 'die katze'
}`,highlighted:`<span class="hljs-comment"># At construction time:</span>

datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])

<span class="hljs-comment"># During data generation:</span>

<span class="hljs-keyword">yield</span> {
<span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
}`}}),Md=new _({props:{name:"flatten",anchor:"datasets.Translation.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/translation.py#L47"}}),Ud=new _({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/translation.py#L55"}}),Rd=new H({props:{code:`# At construction time:

datasets.features.Translation(languages=['en', 'fr', 'de'])

# During data generation:

yield {
'en': 'the cat',
'fr': ['le chat', 'la chatte,']
'de': 'die katze'
}

# Tensor returned :

{
'language': ['en', 'de', 'fr', 'fr'],
'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-comment"># At construction time:</span>

datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])

<span class="hljs-comment"># During data generation:</span>

<span class="hljs-keyword">yield</span> {
<span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
}

<span class="hljs-comment"># Tensor returned :</span>

{
<span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
}`}}),Bd=new _({props:{name:"flatten",anchor:"datasets.TranslationVariableLanguages.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/translation.py#L127"}}),Hd=new _({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L443"}}),Kd=new _({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L452"}}),Jd=new _({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L461"}}),Zd=new _({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/features.py#L470"}}),Qd=new _({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/audio.py#L18",parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}]}}),ic=new _({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/audio.py#L127",parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),lc=new _({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/audio.py#L84",parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"}],returnDescription:`
<p>dict</p>
`}}),dc=new _({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/audio.py#L160",parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),cc=new _({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/audio.py#L58",parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],returnType:`
<p><code>dict</code></p>
`}}),pc=new _({props:{name:"flatten",anchor:"datasets.Audio.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/audio.py#L116"}}),mc=new _({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/image.py#L25",parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}]}}),$c=new _({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/image.py#L132",parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),wc=new _({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/image.py#L83",parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"}],returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),Dc=new _({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/image.py#L181",parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),xc=new _({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/image.py#L55",parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),Ec=new _({props:{name:"flatten",anchor:"datasets.Image.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/features/image.py#L119"}}),kc=new Je({}),Ic=new _({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/info.py#L296"}}),Tc=new _({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/info.py#L341"}}),Pc=new _({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/info.py#L331"}}),Fc=new Je({}),Lc=new _({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/metric.py#L138",parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}]}}),Ac=new _({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/metric.py#L490",parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}]}}),Oc=new _({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/metric.py#L451",parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}]}}),Sc=new _({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/metric.py#L388",parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),jc=new _({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.utils.download_manager.DownloadManager] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/metric.py#L565",parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}]}}),Cc=new Je({}),qc=new _({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/filesystems/s3filesystem.py#L6"}}),Mc=new H({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(anon=True)  # doctest: +SKIP
s3.ls('public-datasets/imdb/train')  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(anon=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;public-datasets/imdb/train&#x27;</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),Uc=new H({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
s3.ls('my-private-datasets/imdb/train')  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;my-private-datasets/imdb/train&#x27;</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),Rc=new H({props:{code:`import botocore
from datasets.filesystems import S3Filesystem
s3_session = botocore.session.Session(profile_name='my_profile_name')
s3 = S3FileSystem(session=s3_session)  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile_name=<span class="hljs-string">&#x27;my_profile_name&#x27;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(session=s3_session)  <span class="hljs-comment"># doctest: +SKIP</span>`}}),Bc=new H({props:{code:`from datasets import load_from_disk
from datasets.filesystems import S3Filesystem
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
dataset = load_from_disk('s3://my-private-datasets/imdb/train',fs=s3)  # doctest: +SKIP
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>,fs=s3)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),Gc=new H({props:{code:`from datasets import load_dataset
from datasets.filesystems import S3Filesystem
dataset = load_dataset("imdb")
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
dataset.save_to_disk('s3://my-private-datasets/imdb/train',fs=s3)  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.save_to_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>,fs=s3)  <span class="hljs-comment"># doctest: +SKIP</span>`}}),Hc=new Je({}),Wc=new _({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/filesystems.py#L28",parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}]}}),Kc=new _({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/filesystems.py#L40",parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}]}}),Yc=new Je({}),Jc=new _({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3723/src/datasets/fingerprint.py#L167"}}),{c(){A=a("meta"),ht=l(),S=a("h1"),Q=a("a"),sa=a("span"),p(he.$$.fragment),Vr=l(),na=a("span"),ft=r("Main classes"),ss=l(),fe=a("h2"),ne=a("a"),W=a("span"),p(ut.$$.fragment),Qc=l(),ns=a("span"),bD=r("DatasetInfo"),Ey=l(),U=a("div"),p(Mr.$$.fragment),yD=l(),sf=a("p"),$D=r("Information about a dataset."),wD=l(),ep=a("p"),nf=a("em"),DD=r("DatasetInfo"),xD=r(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),ED=l(),rf=a("p"),kD=r("Note: Not all fields are known on construction and may be updated later."),ID=l(),xe=a("div"),p(Ur.$$.fragment),TD=l(),Rr=a("p"),ND=r("Create DatasetInfo from the JSON file in "),of=a("code"),PD=r("dataset_info_dir"),FD=r("."),LD=l(),lf=a("p"),AD=r(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),OD=l(),df=a("p"),SD=r("This will overwrite all previous metadata."),jD=l(),gt=a("div"),p(Br.$$.fragment),CD=l(),ra=a("p"),qD=r("Write "),cf=a("code"),zD=r("DatasetInfo"),VD=r(" as JSON to "),pf=a("code"),MD=r("dataset_info_dir"),UD=r("."),RD=l(),mf=a("p"),BD=r("Also save the license separately in LICENCE."),ky=l(),oa=a("h2"),rs=a("a"),hf=a("span"),p(Gr.$$.fragment),GD=l(),ff=a("span"),HD=r("Dataset"),Iy=l(),os=a("p"),WD=r("The base class "),tp=a("a"),KD=r("datasets.Dataset"),YD=r(" implements a Dataset backed by an Apache Arrow table."),Ty=l(),v=a("div"),p(Hr.$$.fragment),JD=l(),uf=a("p"),XD=r("A Dataset backed by an Arrow table."),ZD=l(),_t=a("div"),p(Wr.$$.fragment),QD=l(),gf=a("p"),ex=r("Add column to Dataset."),tx=l(),_f=a("p"),vf=a("em"),ax=r("New in version 1.7."),sx=l(),vt=a("div"),p(Kr.$$.fragment),nx=l(),bf=a("p"),rx=r("Add item to Dataset."),ox=l(),yf=a("p"),$f=a("em"),ix=r("New in version 1.7."),lx=l(),is=a("div"),p(Yr.$$.fragment),dx=l(),wf=a("p"),cx=r("Instantiate a Dataset backed by an Arrow table at filename."),px=l(),ls=a("div"),p(Jr.$$.fragment),mx=l(),Df=a("p"),hx=r("Instantiate a Dataset backed by an Arrow buffer."),fx=l(),Ee=a("div"),p(Xr.$$.fragment),ux=l(),Xe=a("p"),gx=r("Convert "),xf=a("code"),_x=r("pandas.DataFrame"),vx=r(" to a "),Ef=a("code"),bx=r("pyarrow.Table"),yx=r(" to create a "),ap=a("a"),$x=r("Dataset"),wx=r("."),Dx=l(),Zr=a("p"),xx=r(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),kf=a("em"),Ex=r("object"),kx=r(", we need to guess the datatype by looking at the Python objects in this Series."),Ix=l(),Qr=a("p"),Tx=r("Be aware that Series of the "),If=a("em"),Nx=r("object"),Px=r(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),Fx=l(),ds=a("div"),p(eo.$$.fragment),Lx=l(),Ze=a("p"),Ax=r("Convert "),Tf=a("code"),Ox=r("dict"),Sx=r(" to a "),Nf=a("code"),jx=r("pyarrow.Table"),Cx=r(" to create a "),sp=a("a"),qx=r("Dataset"),zx=r("."),Vx=l(),cs=a("div"),p(to.$$.fragment),Mx=l(),Pf=a("p"),Ux=r("The Apache Arrow table backing the dataset."),Rx=l(),ps=a("div"),p(ao.$$.fragment),Bx=l(),Ff=a("p"),Gx=r("The cache files containing the Apache Arrow table backing the dataset."),Hx=l(),ms=a("div"),p(so.$$.fragment),Wx=l(),Lf=a("p"),Kx=r("Number of columns in the dataset."),Yx=l(),hs=a("div"),p(no.$$.fragment),Jx=l(),ro=a("p"),Xx=r("Number of rows in the dataset (same as "),fs=a("a"),Zx=r("Dataset."),Af=a("strong"),Qx=r("len"),e3=r("()"),t3=r(")."),a3=l(),us=a("div"),p(oo.$$.fragment),s3=l(),Of=a("p"),n3=r("Names of the columns in the dataset."),r3=l(),gs=a("div"),p(io.$$.fragment),o3=l(),Sf=a("p"),i3=r("Shape of the dataset (number of columns, number of rows)."),l3=l(),bt=a("div"),p(lo.$$.fragment),d3=l(),jf=a("p"),c3=r("Return a list of the unique elements in a column."),p3=l(),Cf=a("p"),m3=r("This is implemented in the low-level backend and as such, very fast."),h3=l(),_s=a("div"),p(co.$$.fragment),f3=l(),qf=a("p"),u3=r(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),g3=l(),vs=a("div"),p(po.$$.fragment),_3=l(),zf=a("p"),v3=r("Cast the dataset to a new set of features."),b3=l(),bs=a("div"),p(mo.$$.fragment),y3=l(),Vf=a("p"),$3=r("Cast column to feature for decoding."),w3=l(),yt=a("div"),p(ho.$$.fragment),D3=l(),Mf=a("p"),x3=r("Remove one or several column(s) in the dataset and the features associated to them."),E3=l(),ia=a("p"),k3=r("You can also remove a column using "),np=a("a"),I3=r("Dataset.map()"),T3=r(" with "),Uf=a("em"),N3=r("remove_columns"),P3=r(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),F3=l(),ys=a("div"),p(fo.$$.fragment),L3=l(),Rf=a("p"),A3=r(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),O3=l(),$s=a("div"),p(uo.$$.fragment),S3=l(),go=a("p"),j3=r("Casts the given column as :obj:"),Bf=a("code"),C3=r("datasets.features.ClassLabel"),q3=r(" and updates the table."),z3=l(),ws=a("div"),p(_o.$$.fragment),V3=l(),Gf=a("p"),M3=r("Number of rows in the dataset."),U3=l(),$t=a("div"),p(vo.$$.fragment),R3=l(),Hf=a("p"),B3=r("Iterate through the examples."),G3=l(),bo=a("p"),H3=r("If a formatting is set with "),rp=a("a"),W3=r("Dataset.set_format()"),K3=r(` rows will be returned with the
selected format.`),Y3=l(),Ds=a("div"),p(yo.$$.fragment),J3=l(),la=a("p"),X3=r("To be used in a "),Wf=a("code"),Z3=r("with"),Q3=r(" statement. Set "),Kf=a("code"),e0=r("__getitem__"),t0=r(" return format (type and columns)."),a0=l(),ke=a("div"),p($o.$$.fragment),s0=l(),ue=a("p"),n0=r("Set "),Yf=a("strong"),r0=r("getitem"),o0=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Jf=a("code"),i0=r("type"),l0=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),Xf=a("strong"),d0=r("getitem"),c0=r(`.
It\u2019s also possible to use custom transforms for formatting using `),op=a("a"),p0=r("datasets.Dataset.set_transform()"),m0=r("."),h0=l(),ge=a("p"),f0=r("It is possible to call "),Zf=a("code"),u0=r("map"),g0=r(" after calling "),Qf=a("code"),_0=r("set_format"),v0=r(". Since "),eu=a("code"),b0=r("map"),y0=r(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),tu=a("code"),$0=r("map"),w0=r(" on a dataset to add a new column, then this column will be formatted:"),D0=l(),au=a("p"),x0=r("new formatted columns = (all columns - previously unformatted columns)"),E0=l(),xs=a("div"),p(wo.$$.fragment),k0=l(),Ie=a("p"),I0=r("Set "),su=a("strong"),T0=r("getitem"),N0=r(" return format using this transform. The transform is applied on-the-fly on batches when "),nu=a("strong"),P0=r("getitem"),F0=r(` is called.
As `),ip=a("a"),L0=r("datasets.Dataset.set_format()"),A0=r(", this can be reset using "),lp=a("a"),O0=r("datasets.Dataset.reset_format()"),S0=l(),wt=a("div"),p(Do.$$.fragment),j0=l(),xo=a("p"),C0=r("Reset "),ru=a("strong"),q0=r("getitem"),z0=r(" return format to python objects and all columns."),V0=l(),dp=a("p"),M0=r("Same as "),ou=a("code"),U0=r("self.set_format()"),R0=l(),Te=a("div"),p(Eo.$$.fragment),B0=l(),Qe=a("p"),G0=r("Set "),iu=a("strong"),H0=r("getitem"),W0=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),lu=a("code"),K0=r("type"),Y0=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),du=a("strong"),J0=r("getitem"),X0=r("."),Z0=l(),ko=a("p"),Q0=r("It\u2019s also possible to use custom transforms for formatting using "),cp=a("a"),e7=r("datasets.Dataset.with_transform()"),t7=r("."),a7=l(),da=a("p"),s7=r("Contrary to "),pp=a("a"),n7=r("datasets.Dataset.set_format()"),r7=r(", "),cu=a("code"),o7=r("with_format"),i7=r(" returns a new Dataset object."),l7=l(),Ne=a("div"),p(Io.$$.fragment),d7=l(),ca=a("p"),c7=r("Set "),pu=a("strong"),p7=r("getitem"),m7=r(" return format using this transform. The transform is applied on-the-fly on batches when "),mu=a("strong"),h7=r("getitem"),f7=r(" is called."),u7=l(),pa=a("p"),g7=r("As "),mp=a("a"),_7=r("datasets.Dataset.set_format()"),v7=r(", this can be reset using "),hp=a("a"),b7=r("datasets.Dataset.reset_format()"),y7=r("."),$7=l(),ma=a("p"),w7=r("Contrary to "),fp=a("a"),D7=r("datasets.Dataset.set_transform()"),x7=r(", "),hu=a("code"),E7=r("with_transform"),k7=r(" returns a new Dataset object."),I7=l(),Es=a("div"),p(To.$$.fragment),T7=l(),fu=a("p"),N7=r("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),P7=l(),Dt=a("div"),p(No.$$.fragment),F7=l(),uu=a("p"),L7=r(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),A7=l(),gu=a("p"),O7=r("Be careful when running this command that no other process is currently using other cache files."),S7=l(),Pe=a("div"),p(Po.$$.fragment),j7=l(),_u=a("p"),C7=r(`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),q7=l(),Fo=a("p"),z7=r("You can specify whether the function should be batched or not with the "),vu=a("code"),V7=r("batched"),M7=r(" parameter:"),U7=l(),ha=a("ul"),bu=a("li"),R7=r(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),B7=l(),yu=a("li"),G7=r(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),H7=l(),ee=a("li"),W7=r("If batched is True and batch_size is "),$u=a("code"),K7=r("n"),Y7=r(" > 1, then the function takes a batch of "),wu=a("code"),J7=r("n"),X7=r(" examples as input and can return a batch with "),Du=a("code"),Z7=r("n"),Q7=r(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),xu=a("code"),e4=r("n"),t4=r(` examples.
A batch is a dictionary, e.g. a batch of `),Eu=a("code"),a4=r("n"),s4=r(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),n4=l(),ks=a("div"),p(Lo.$$.fragment),r4=l(),ku=a("p"),o4=r(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),i4=l(),Is=a("div"),p(Ao.$$.fragment),l4=l(),Iu=a("p"),d4=r("Create a new dataset with rows selected following the list/array of indices."),c4=l(),xt=a("div"),p(Oo.$$.fragment),p4=l(),Tu=a("p"),m4=r("Create a new dataset sorted according to a column."),h4=l(),Nu=a("p"),f4=r(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),u4=l(),Et=a("div"),p(So.$$.fragment),g4=l(),Pu=a("p"),_4=r("Create a new Dataset where the rows are shuffled."),v4=l(),Fu=a("p"),b4=r(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),y4=l(),kt=a("div"),p(jo.$$.fragment),$4=l(),j=a("p"),w4=r("Return a dictionary ("),Lu=a("code"),D4=r("datasets.DatsetDict"),x4=r(") with two random train and test subsets ("),Au=a("em"),E4=r("train"),k4=r(" and "),Ou=a("em"),I4=r("test"),T4=l(),Su=a("code"),N4=r("Dataset"),P4=r(` splits).
Splits are created from the dataset according to `),ju=a("em"),F4=r("test_size"),L4=r(", "),Cu=a("em"),A4=r("train_size"),O4=r(" and "),qu=a("em"),S4=r("shuffle"),j4=r("."),C4=l(),Co=a("p"),q4=r("This method is similar to scikit-learn "),zu=a("em"),z4=r("train_test_split"),V4=r(" with the omission of the stratified options."),M4=l(),re=a("div"),p(qo.$$.fragment),U4=l(),fa=a("p"),R4=r("Return the "),Vu=a("em"),B4=r("index"),G4=r("-nth shard from dataset split into "),Mu=a("em"),H4=r("num_shards"),W4=r(" pieces."),K4=l(),Uu=a("p"),Y4=r(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),J4=l(),zo=a("p"),X4=r(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),Ru=a("em"),Z4=r("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),Q4=r(` will return
a dataset with the same order as the original.`),eE=l(),Bu=a("p"),tE=r(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),aE=l(),Ts=a("div"),p(Vo.$$.fragment),sE=l(),Gu=a("p"),nE=r(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),rE=l(),Fe=a("div"),p(Mo.$$.fragment),oE=l(),Hu=a("p"),iE=r(`Pushes the dataset to the hub.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),lE=l(),Wu=a("p"),dE=r("Example:"),cE=l(),p(Uo.$$.fragment),pE=l(),Ns=a("div"),p(Ro.$$.fragment),mE=l(),ua=a("p"),hE=r("Saves a dataset to a dataset directory, or in a filesystem using either "),up=a("a"),fE=r("S3FileSystem"),uE=r(` or
any implementation of `),Ku=a("code"),gE=r("fsspec.spec.AbstractFileSystem"),_E=r("."),vE=l(),Ps=a("div"),p(Bo.$$.fragment),bE=l(),et=a("p"),yE=r("Loads a dataset that was previously saved using "),Yu=a("code"),$E=r("save_to_disk"),wE=r(` from a dataset directory, or from a
filesystem using either `),gp=a("a"),DE=r("S3FileSystem"),xE=r(` or any implementation of
`),Ju=a("code"),EE=r("fsspec.spec.AbstractFileSystem"),kE=r("."),IE=l(),Fs=a("div"),p(Go.$$.fragment),TE=l(),Xu=a("p"),NE=r("Create and cache a new Dataset by flattening the indices mapping."),PE=l(),Ls=a("div"),p(Ho.$$.fragment),FE=l(),Zu=a("p"),LE=r("Exports the dataset to csv"),AE=l(),As=a("div"),p(Wo.$$.fragment),OE=l(),Ko=a("p"),SE=r("Returns the dataset as a "),Qu=a("code"),jE=r("pandas.DataFrame"),CE=r(". Can also return a generator for large datasets."),qE=l(),Os=a("div"),p(Yo.$$.fragment),zE=l(),eg=a("p"),VE=r("Returns the dataset as a Python dict. Can also return a generator for large datasets."),ME=l(),Ss=a("div"),p(Jo.$$.fragment),UE=l(),tg=a("p"),RE=r("Export the dataset to JSON Lines or JSON."),BE=l(),js=a("div"),p(Xo.$$.fragment),GE=l(),ag=a("p"),HE=r("Exports the dataset to parquet"),WE=l(),oe=a("div"),p(Zo.$$.fragment),KE=l(),ga=a("p"),YE=r(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),sg=a("code"),JE=r("device"),XE=r(" if you want to run it on GPU ("),ng=a("code"),ZE=r("device"),QE=r(` must be the GPU index).
You can find more information about Faiss here:`),ek=l(),rg=a("ul"),_p=a("li"),tk=r("For "),Qo=a("a"),ak=r("string factory"),sk=l(),og=a("p"),nk=r("Example:"),rk=l(),p(ei.$$.fragment),ok=l(),It=a("div"),p(ti.$$.fragment),ik=l(),tt=a("p"),lk=r(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),ig=a("em"),dk=r("external_arrays"),ck=r(`.
You can specify `),lg=a("em"),pk=r("device"),mk=r(" if you want to run it on GPU ("),dg=a("em"),hk=r("device"),fk=r(` must be the GPU index).
You can find more information about Faiss here:`),uk=l(),cg=a("ul"),vp=a("li"),gk=r("For "),ai=a("a"),_k=r("string factory"),vk=l(),Cs=a("div"),p(si.$$.fragment),bk=l(),pg=a("p"),yk=r("Save a FaissIndex on disk."),$k=l(),Tt=a("div"),p(ni.$$.fragment),wk=l(),mg=a("p"),Dk=r("Load a FaissIndex from disk."),xk=l(),ri=a("p"),Ek=r(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),hg=a("em"),kk=r(".get_index(index_name).faiss_index"),Ik=r(" to make it fit your needs."),Tk=l(),K=a("div"),p(oi.$$.fragment),Nk=l(),fg=a("p"),Pk=r("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),Fk=l(),ug=a("p"),Lk=r("Default config is:"),Ak=l(),p(ii.$$.fragment),Ok=l(),gg=a("p"),Sk=r("Example:"),jk=l(),p(li.$$.fragment),Ck=l(),Le=a("div"),p(di.$$.fragment),qk=l(),_g=a("p"),zk=r("Load an existing text index using ElasticSearch for fast retrieval."),Vk=l(),vg=a("p"),Mk=r("Default config is:"),Uk=l(),p(ci.$$.fragment),Rk=l(),qs=a("div"),p(pi.$$.fragment),Bk=l(),bg=a("p"),Gk=r("List the colindex_nameumns/identifiers of all the attached indexes."),Hk=l(),zs=a("div"),p(mi.$$.fragment),Wk=l(),yg=a("p"),Kk=r("List the index_name/identifiers of all the attached indexes."),Yk=l(),Vs=a("div"),p(hi.$$.fragment),Jk=l(),$g=a("p"),Xk=r("Drop the index with the specified column."),Zk=l(),Ms=a("div"),p(fi.$$.fragment),Qk=l(),wg=a("p"),eI=r("Find the nearest examples indices in the dataset to the query."),tI=l(),Us=a("div"),p(ui.$$.fragment),aI=l(),Dg=a("p"),sI=r("Find the nearest examples indices in the dataset to the query."),nI=l(),Rs=a("div"),p(gi.$$.fragment),rI=l(),xg=a("p"),oI=r("Find the nearest examples in the dataset to the query."),iI=l(),Bs=a("div"),p(_i.$$.fragment),lI=l(),Eg=a("p"),dI=r("Find the nearest examples in the dataset to the query."),cI=l(),Gs=a("div"),p(vi.$$.fragment),pI=l(),bp=a("p"),yp=a("a"),mI=r("datasets.DatasetInfo"),hI=r(" object containing all the metadata in the dataset."),fI=l(),Hs=a("div"),p(bi.$$.fragment),uI=l(),$p=a("p"),wp=a("a"),gI=r("datasets.NamedSplit"),_I=r(" object corresponding to a named dataset split."),vI=l(),Dp=a("div"),p(yi.$$.fragment),bI=l(),xp=a("div"),p($i.$$.fragment),yI=l(),Ep=a("div"),p(wi.$$.fragment),$I=l(),kp=a("div"),p(Di.$$.fragment),wI=l(),Ip=a("div"),p(xi.$$.fragment),DI=l(),Tp=a("div"),p(Ei.$$.fragment),xI=l(),Np=a("div"),p(ki.$$.fragment),EI=l(),Pp=a("div"),p(Ii.$$.fragment),kI=l(),Fp=a("div"),p(Ti.$$.fragment),II=l(),Lp=a("div"),p(Ni.$$.fragment),TI=l(),Ap=a("div"),p(Pi.$$.fragment),NI=l(),Op=a("div"),p(Fi.$$.fragment),PI=l(),Sp=a("div"),p(Li.$$.fragment),FI=l(),Ws=a("div"),p(Ai.$$.fragment),LI=l(),kg=a("p"),AI=r("Create Dataset from CSV file(s)."),OI=l(),Ks=a("div"),p(Oi.$$.fragment),SI=l(),Ig=a("p"),jI=r("Create Dataset from JSON or JSON Lines file(s)."),CI=l(),Ys=a("div"),p(Si.$$.fragment),qI=l(),Tg=a("p"),zI=r("Create Dataset from Parquet file(s)."),VI=l(),Js=a("div"),p(ji.$$.fragment),MI=l(),Ng=a("p"),UI=r("Create Dataset from text file(s)."),RI=l(),Nt=a("div"),p(Ci.$$.fragment),BI=l(),_a=a("p"),GI=r("Prepare a dataset for the given task by casting the dataset\u2019s "),jp=a("a"),HI=r("Features"),WI=r(" to standardized column names and types as detailed in "),Cp=a("a"),KI=r("datasets.tasks"),YI=r("."),JI=l(),va=a("p"),XI=r("Casts "),Pg=a("code"),ZI=r("datasets.DatasetInfo.features"),QI=r(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Fg=a("code"),e5=r("datasets.DatasetInfo.task_templates"),t5=r(" after casting."),a5=l(),Ae=a("div"),p(qi.$$.fragment),s5=l(),zi=a("p"),n5=r("Align the dataset\u2019s label ID and label name mapping to match an input "),Lg=a("code"),r5=r("label2id"),o5=r(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),i5=l(),Ag=a("p"),l5=r("Example:"),d5=l(),p(Vi.$$.fragment),Ny=l(),ba=a("div"),p(Mi.$$.fragment),c5=l(),ya=a("p"),p5=r("Converts a list of "),qp=a("a"),m5=r("Dataset"),h5=r(" with the same schema into a single "),zp=a("a"),f5=r("Dataset"),u5=r("."),Py=l(),C=a("div"),p(Ui.$$.fragment),g5=l(),Og=a("p"),_5=r(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),v5=l(),$a=a("p"),b5=r("You can use this function on a list of "),Vp=a("a"),y5=r("Dataset"),$5=r(" objects, or on a list of "),Mp=a("a"),w5=r("IterableDataset"),D5=r(" objects."),x5=l(),_e=a("p"),E5=r("If "),Sg=a("code"),k5=r("probabilities"),I5=r(" is "),jg=a("code"),T5=r("None"),N5=r(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),Cg=a("code"),P5=r("probabilities"),F5=r(" is not "),qg=a("code"),L5=r("None"),A5=r(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),O5=l(),zg=a("p"),S5=r("The resulting dataset ends when one of the source datasets runs out of examples."),j5=l(),Vg=a("p"),C5=r("Example:"),q5=l(),p(Ri.$$.fragment),Fy=l(),te=a("div"),p(Bi.$$.fragment),z5=l(),Mg=a("p"),V5=r(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),M5=l(),Ug=a("p"),U5=r(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),R5=l(),Rg=a("p"),B5=r(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),G5=l(),ve=a("ul"),Bg=a("li"),H5=r("cache files are always recreated"),W5=l(),Gg=a("li"),K5=r("cache files are written to a temporary directory that is deleted when session closes"),Y5=l(),Hg=a("li"),J5=r("cache files are named using a random hash instead of the dataset fingerprint"),X5=l(),Gi=a("li"),Z5=r("use "),Up=a("a"),Q5=r("datasets.Dataset.save_to_disk()"),e6=r(" to save a transformed dataset or it will be deleted when session closes"),t6=l(),at=a("li"),a6=r("caching doesn\u2019t affect "),Rp=a("a"),s6=r("datasets.load_dataset()"),n6=r(`. If you want to regenerate a dataset from scratch you should use
the `),Wg=a("code"),r6=r("download_mode"),o6=r(" parameter in "),Bp=a("a"),i6=r("datasets.load_dataset()"),l6=r("."),Ly=l(),ae=a("div"),p(Hi.$$.fragment),d6=l(),Kg=a("p"),c6=r(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),p6=l(),Yg=a("p"),m6=r(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),h6=l(),Jg=a("p"),f6=r(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),u6=l(),be=a("ul"),Xg=a("li"),g6=r("cache files are always recreated"),_6=l(),Zg=a("li"),v6=r("cache files are written to a temporary directory that is deleted when session closes"),b6=l(),Qg=a("li"),y6=r("cache files are named using a random hash instead of the dataset fingerprint"),$6=l(),Wi=a("li"),w6=r("use "),Gp=a("a"),D6=r("datasets.Dataset.save_to_disk()"),x6=r(" to save a transformed dataset or it will be deleted when session closes"),E6=l(),st=a("li"),k6=r("caching doesn\u2019t affect "),Hp=a("a"),I6=r("datasets.load_dataset()"),T6=r(`. If you want to regenerate a dataset from scratch you should use
the `),e_=a("code"),N6=r("download_mode"),P6=r(" parameter in "),Wp=a("a"),F6=r("datasets.load_dataset()"),L6=r("."),Ay=l(),wa=a("div"),p(Ki.$$.fragment),A6=l(),t_=a("p"),O6=r("Enable/disable tqdm progress bars."),Oy=l(),Da=a("div"),p(Yi.$$.fragment),S6=l(),a_=a("p"),j6=r("Return a boolean indicating whether tqdm progress bars are enabled."),Sy=l(),xa=a("h2"),Xs=a("a"),s_=a("span"),p(Ji.$$.fragment),C6=l(),n_=a("span"),q6=r("DatasetDict"),jy=l(),Zs=a("p"),z6=r("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),r_=a("code"),V6=r("datasets.Dataset"),M6=r(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),Cy=l(),w=a("div"),p(Xi.$$.fragment),U6=l(),o_=a("p"),R6=r("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),B6=l(),Qs=a("div"),p(Zi.$$.fragment),G6=l(),i_=a("p"),H6=r("The Apache Arrow tables backing each split."),W6=l(),en=a("div"),p(Qi.$$.fragment),K6=l(),l_=a("p"),Y6=r("The cache files containing the Apache Arrow table backing each split."),J6=l(),tn=a("div"),p(el.$$.fragment),X6=l(),d_=a("p"),Z6=r("Number of columns in each split of the dataset."),Q6=l(),an=a("div"),p(tl.$$.fragment),e8=l(),al=a("p"),t8=r("Number of rows in each split of the dataset (same as "),sn=a("a"),a8=r("datasets.Dataset."),c_=a("strong"),s8=r("len"),n8=r("()"),r8=r(")."),o8=l(),nn=a("div"),p(sl.$$.fragment),i8=l(),p_=a("p"),l8=r("Names of the columns in each split of the dataset."),d8=l(),rn=a("div"),p(nl.$$.fragment),c8=l(),m_=a("p"),p8=r("Shape of each split of the dataset (number of columns, number of rows)."),m8=l(),Pt=a("div"),p(rl.$$.fragment),h8=l(),h_=a("p"),f8=r("Return a list of the unique elements in a column for each split."),u8=l(),f_=a("p"),g8=r("This is implemented in the low-level backend and as such, very fast."),_8=l(),on=a("div"),p(ol.$$.fragment),v8=l(),u_=a("p"),b8=r(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be carefull when running this command that no other process is currently using other cache files.`),y8=l(),ln=a("div"),p(il.$$.fragment),$8=l(),g_=a("p"),w8=r(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),D8=l(),dn=a("div"),p(ll.$$.fragment),x8=l(),__=a("p"),E8=r(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),k8=l(),Ft=a("div"),p(dl.$$.fragment),I8=l(),v_=a("p"),T8=r(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),N8=l(),b_=a("p"),P8=r(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),F8=l(),Oe=a("div"),p(cl.$$.fragment),L8=l(),y_=a("p"),A8=r("Create a new Dataset where the rows are shuffled."),O8=l(),$_=a("p"),S8=r("The transformation is applied to all the datasets of the dataset dictionary."),j8=l(),w_=a("p"),C8=r(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),q8=l(),Se=a("div"),p(pl.$$.fragment),z8=l(),ml=a("p"),V8=r("Set "),D_=a("code"),M8=r("__getitem__"),U8=r(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),R8=l(),ye=a("p"),B8=r("It is possible to call "),x_=a("code"),G8=r("map"),H8=r(" after calling "),E_=a("code"),W8=r("set_format"),K8=r(". Since "),k_=a("code"),Y8=r("map"),J8=r(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),I_=a("code"),X8=r("map"),Z8=r(" on a dataset to add a new column, then this column will be formatted:"),Q8=l(),T_=a("p"),e9=r("new formatted columns = (all columns - previously unformatted columns)"),t9=l(),Lt=a("div"),p(hl.$$.fragment),a9=l(),fl=a("p"),s9=r("Reset "),N_=a("code"),n9=r("__getitem__"),r9=r(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),o9=l(),Kp=a("p"),i9=r("Same as "),P_=a("code"),l9=r("self.set_format()"),d9=l(),cn=a("div"),p(ul.$$.fragment),c9=l(),Ea=a("p"),p9=r("To be used in a "),F_=a("em"),m9=r("with"),h9=r(" statement. Set "),L_=a("code"),f9=r("__getitem__"),u9=r(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),g9=l(),je=a("div"),p(gl.$$.fragment),_9=l(),nt=a("p"),v9=r("Set "),A_=a("code"),b9=r("__getitem__"),y9=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),O_=a("code"),$9=r("type"),w9=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),S_=a("code"),D9=r("__getitem__"),x9=r(`.
The format is set for every dataset in the dataset dictionary`),E9=l(),_l=a("p"),k9=r("It\u2019s also possible to use custom transforms for formatting using "),Yp=a("a"),I9=r("datasets.Dataset.with_transform()"),T9=r("."),N9=l(),ka=a("p"),P9=r("Contrary to "),Jp=a("a"),F9=r("datasets.DatasetDict.set_format()"),L9=r(", "),j_=a("code"),A9=r("with_format"),O9=r(" returns a new DatasetDict object with new Dataset objects."),S9=l(),Ce=a("div"),p(vl.$$.fragment),j9=l(),Ia=a("p"),C9=r("Set "),C_=a("code"),q9=r("__getitem__"),z9=r(" return format using this transform. The transform is applied on-the-fly on batches when "),q_=a("code"),V9=r("__getitem__"),M9=r(` is called.
The transform is set for every dataset in the dataset dictionary`),U9=l(),Ta=a("p"),R9=r("As "),Xp=a("a"),B9=r("datasets.Dataset.set_format()"),G9=r(", this can be reset using "),Zp=a("a"),H9=r("datasets.Dataset.reset_format()"),W9=r("."),K9=l(),Na=a("p"),Y9=r("Contrary to "),z_=a("code"),J9=r("datasets.DatasetDict.set_transform()"),X9=l(),V_=a("code"),Z9=r("with_transform"),Q9=r(" returns a new DatasetDict object with new Dataset objects."),eT=l(),pn=a("div"),p(bl.$$.fragment),tT=l(),M_=a("p"),aT=r(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),sT=l(),At=a("div"),p(yl.$$.fragment),nT=l(),U_=a("p"),rT=r(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),oT=l(),rt=a("p"),iT=r("You can also remove a column using "),Qp=a("a"),lT=r("Dataset.map()"),dT=r(" with "),R_=a("em"),cT=r("feature"),pT=r(" but "),B_=a("code"),mT=r("cast_"),hT=r(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),fT=l(),mn=a("div"),p($l.$$.fragment),uT=l(),G_=a("p"),gT=r("Cast column to feature for decoding."),_T=l(),qe=a("div"),p(wl.$$.fragment),vT=l(),H_=a("p"),bT=r(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),yT=l(),W_=a("p"),$T=r("The transformation is applied to all the splits of the dataset dictionary."),wT=l(),Pa=a("p"),DT=r("You can also remove a column using "),em=a("a"),xT=r("Dataset.map()"),ET=r(" with "),K_=a("em"),kT=r("remove_columns"),IT=r(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),TT=l(),ze=a("div"),p(Dl.$$.fragment),NT=l(),Y_=a("p"),PT=r(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),FT=l(),Fa=a("p"),LT=r("You can also rename a column using "),tm=a("a"),AT=r("Dataset.map()"),OT=r(" with "),J_=a("em"),ST=r("remove_columns"),jT=r(" but the present method:"),CT=l(),xl=a("ul"),X_=a("li"),qT=r("takes care of moving the original features under the new column name."),zT=l(),Z_=a("li"),VT=r("doesn\u2019t copy the data to a new dataset and is thus much faster."),MT=l(),hn=a("div"),p(El.$$.fragment),UT=l(),kl=a("p"),RT=r("Casts the given column as :obj:"),Q_=a("code"),BT=r("datasets.features.ClassLabel"),GT=r(" and updates the tables."),HT=l(),ie=a("div"),p(Il.$$.fragment),WT=l(),La=a("p"),KT=r("Pushes the "),ev=a("code"),YT=r("DatasetDict"),JT=r(` to the hub.
The `),tv=a("code"),XT=r("DatasetDict"),ZT=r(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),QT=l(),av=a("p"),eN=r("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),tN=l(),sv=a("p"),aN=r("Example:"),sN=l(),p(Tl.$$.fragment),nN=l(),fn=a("div"),p(Nl.$$.fragment),rN=l(),Aa=a("p"),oN=r("Saves a dataset dict to a filesystem using either "),am=a("a"),iN=r("S3FileSystem"),lN=r(` or
`),nv=a("code"),dN=r("fsspec.spec.AbstractFileSystem"),cN=r("."),pN=l(),un=a("div"),p(Pl.$$.fragment),mN=l(),ot=a("p"),hN=r("Load a dataset that was previously saved using "),rv=a("code"),fN=r("save_to_disk"),uN=r(` from a filesystem using either
`),sm=a("a"),gN=r("S3FileSystem"),_N=r(" or "),ov=a("code"),vN=r("fsspec.spec.AbstractFileSystem"),bN=r("."),yN=l(),gn=a("div"),p(Fl.$$.fragment),$N=l(),iv=a("p"),wN=r("Create DatasetDict from CSV file(s)."),DN=l(),_n=a("div"),p(Ll.$$.fragment),xN=l(),lv=a("p"),EN=r("Create DatasetDict from JSON Lines file(s)."),kN=l(),vn=a("div"),p(Al.$$.fragment),IN=l(),dv=a("p"),TN=r("Create DatasetDict from Parquet file(s)."),NN=l(),bn=a("div"),p(Ol.$$.fragment),PN=l(),cv=a("p"),FN=r("Create DatasetDict from text file(s)."),LN=l(),Ot=a("div"),p(Sl.$$.fragment),AN=l(),Oa=a("p"),ON=r("Prepare a dataset for the given task by casting the dataset\u2019s "),nm=a("a"),SN=r("Features"),jN=r(" to standardized column names and types as detailed in "),rm=a("a"),CN=r("datasets.tasks"),qN=r("."),zN=l(),Sa=a("p"),VN=r("Casts "),pv=a("code"),MN=r("datasets.DatasetInfo.features"),UN=r(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),mv=a("code"),RN=r("datasets.DatasetInfo.task_templates"),BN=r(" after casting."),qy=l(),om=a("a"),zy=l(),ja=a("h2"),yn=a("a"),hv=a("span"),p(jl.$$.fragment),GN=l(),fv=a("span"),HN=r("IterableDataset"),Vy=l(),$n=a("p"),WN=r("The base class "),im=a("a"),KN=r("datasets.IterableDataset"),YN=r(" implements an iterable Dataset backed by python generators."),My=l(),x=a("div"),p(Cl.$$.fragment),JN=l(),uv=a("p"),XN=r("A Dataset backed by an iterable."),ZN=l(),wn=a("div"),p(ql.$$.fragment),QN=l(),gv=a("p"),eP=r(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),tP=l(),Dn=a("div"),p(zl.$$.fragment),aP=l(),_v=a("p"),sP=r("Cast column to feature for decoding."),nP=l(),lm=a("div"),p(Vl.$$.fragment),rP=l(),Ve=a("div"),p(Ml.$$.fragment),oP=l(),vv=a("p"),iP=r(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),lP=l(),Ul=a("p"),dP=r("You can specify whether the function should be batched or not with the "),bv=a("code"),cP=r("batched"),pP=r(" parameter:"),mP=l(),Ca=a("ul"),yv=a("li"),hP=r(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),fP=l(),$v=a("li"),uP=r(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),gP=l(),se=a("li"),_P=r("If batched is True and batch_size is "),wv=a("code"),vP=r("n"),bP=r(" > 1, then the function takes a batch of "),Dv=a("code"),yP=r("n"),$P=r(" examples as input and can return a batch with "),xv=a("code"),wP=r("n"),DP=r(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Ev=a("code"),xP=r("n"),EP=r(` examples.
A batch is a dictionary, e.g. a batch of `),kv=a("code"),kP=r("n"),IP=r(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),TP=l(),le=a("div"),p(Rl.$$.fragment),NP=l(),Iv=a("p"),PP=r("Randomly shuffles the elements of this dataset."),FP=l(),Tv=a("p"),LP=r(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),AP=l(),Bl=a("p"),OP=r("For instance, if your dataset contains 10,000 elements but "),Nv=a("code"),SP=r("buffer_size"),jP=r(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),CP=l(),qa=a("p"),qP=r(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),dm=a("a"),zP=r("datasets.IterableDataset.skip()"),VP=r(" or "),cm=a("a"),MP=r("datasets.IterableDataset.take()"),UP=r(`
then the order of the shards is kept unchanged.`),RP=l(),xn=a("div"),p(Gl.$$.fragment),BP=l(),Hl=a("p"),GP=r("Create a new IterableDataset that skips the first "),Pv=a("code"),HP=r("n"),WP=r(" elements."),KP=l(),En=a("div"),p(Wl.$$.fragment),YP=l(),Kl=a("p"),JP=r("Create a new IterableDataset with only the first "),Fv=a("code"),XP=r("n"),ZP=r(" elements."),QP=l(),kn=a("div"),p(Yl.$$.fragment),eF=l(),pm=a("p"),mm=a("a"),tF=r("datasets.DatasetInfo"),aF=r(" object containing all the metadata in the dataset."),sF=l(),In=a("div"),p(Jl.$$.fragment),nF=l(),hm=a("p"),fm=a("a"),rF=r("datasets.NamedSplit"),oF=r(" object corresponding to a named dataset split."),iF=l(),um=a("div"),p(Xl.$$.fragment),lF=l(),gm=a("div"),p(Zl.$$.fragment),dF=l(),_m=a("div"),p(Ql.$$.fragment),cF=l(),vm=a("div"),p(ed.$$.fragment),pF=l(),bm=a("div"),p(td.$$.fragment),mF=l(),ym=a("div"),p(ad.$$.fragment),hF=l(),$m=a("div"),p(sd.$$.fragment),fF=l(),wm=a("div"),p(nd.$$.fragment),uF=l(),Dm=a("div"),p(rd.$$.fragment),gF=l(),xm=a("div"),p(od.$$.fragment),_F=l(),Em=a("div"),p(id.$$.fragment),vF=l(),km=a("div"),p(ld.$$.fragment),bF=l(),Im=a("div"),p(dd.$$.fragment),Uy=l(),za=a("h2"),Tn=a("a"),Lv=a("span"),p(cd.$$.fragment),yF=l(),Av=a("span"),$F=r("IterableDatasetDict"),Ry=l(),Nn=a("p"),wF=r("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Ov=a("code"),DF=r("datasets.IterableDataset"),xF=r(" objects as values."),By=l(),pd=a("div"),p(md.$$.fragment),Gy=l(),Va=a("h2"),Pn=a("a"),Sv=a("span"),p(hd.$$.fragment),EF=l(),jv=a("span"),kF=r("Features"),Hy=l(),T=a("div"),p(fd.$$.fragment),IF=l(),Cv=a("p"),TF=r("A special dictionary that defines the internal structure of a dataset."),NF=l(),ud=a("p"),PF=r("Instantiated with a dictionary of type "),qv=a("code"),FF=r("dict[str, FieldType]"),LF=r(`, where keys are the desired column names,
and values are the type of that column.`),AF=l(),Tm=a("p"),zv=a("code"),OF=r("FieldType"),SF=r(" can be one of the following:"),jF=l(),q=a("ul"),Vv=a("li"),St=a("p"),CF=r("a "),Nm=a("a"),qF=r("datasets.Value"),zF=r(" feature specifies a single typed value, e.g. "),Mv=a("code"),VF=r("int64"),MF=r(" or "),Uv=a("code"),UF=r("string"),RF=l(),Rv=a("li"),gd=a("p"),BF=r("a "),Pm=a("a"),GF=r("datasets.ClassLabel"),HF=r(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),WF=l(),Bv=a("li"),_d=a("p"),KF=r("a python "),Gv=a("code"),YF=r("dict"),JF=r(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),XF=l(),vd=a("li"),$e=a("p"),ZF=r("a python "),Hv=a("code"),QF=r("list"),eL=r(" or a "),Fm=a("a"),tL=r("datasets.Sequence"),aL=r(` specifies that the field contains a list of objects. The python
`),Wv=a("code"),sL=r("list"),nL=r(" or "),Lm=a("a"),rL=r("datasets.Sequence"),oL=r(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),iL=l(),p(Fn.$$.fragment),lL=l(),Kv=a("li"),we=a("p"),dL=r("a "),Am=a("a"),cL=r("Array2D"),pL=r(", "),Om=a("a"),mL=r("Array3D"),hL=r(", "),Sm=a("a"),fL=r("Array4D"),uL=r(" or "),jm=a("a"),gL=r("Array5D"),_L=r(" feature for multidimensional arrays"),vL=l(),Yv=a("li"),bd=a("p"),bL=r("an "),Cm=a("a"),yL=r("Audio"),$L=r(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),wL=l(),Jv=a("li"),it=a("p"),DL=r("an "),qm=a("a"),xL=r("Image"),EL=r(" feature to store the absolute path to an image file, an "),Xv=a("code"),kL=r("np.ndarray"),IL=r(" object, a "),Zv=a("code"),TL=r("PIL.Image.Image"),NL=r(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),PL=l(),Qv=a("li"),Ln=a("p"),zm=a("a"),FL=r("datasets.Translation"),LL=r(" and "),Vm=a("a"),AL=r("datasets.TranslationVariableLanguages"),OL=r(", the two features specific to Machine Translation"),SL=l(),An=a("div"),p(yd.$$.fragment),jL=l(),e1=a("p"),CL=r("Make a deep copy of Features."),qL=l(),On=a("div"),p($d.$$.fragment),zL=l(),t1=a("p"),VL=r("Decode batch with custom feature decoding."),ML=l(),Sn=a("div"),p(wd.$$.fragment),UL=l(),a1=a("p"),RL=r("Decode column with custom feature decoding."),BL=l(),jn=a("div"),p(Dd.$$.fragment),GL=l(),s1=a("p"),HL=r("Decode example with custom feature decoding."),WL=l(),Cn=a("div"),p(xd.$$.fragment),KL=l(),n1=a("p"),YL=r("Encode batch into a format for Arrow."),JL=l(),qn=a("div"),p(Ed.$$.fragment),XL=l(),r1=a("p"),ZL=r("Encode example into a format for Arrow."),QL=l(),jt=a("div"),p(kd.$$.fragment),eA=l(),o1=a("p"),tA=r(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),aA=l(),i1=a("p"),sA=r(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),nA=l(),zn=a("div"),p(Id.$$.fragment),rA=l(),l1=a("p"),oA=r(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),iA=l(),Y=a("div"),p(Td.$$.fragment),lA=l(),d1=a("p"),dA=r("Construct Features from dict."),cA=l(),c1=a("p"),pA=r(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),mA=l(),lt=a("p"),hA=r(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),Mm=a("a"),fA=r("DatasetInfo"),uA=r(` that was dumped to a JSON object. This acts as an analogue to
`),Um=a("a"),gA=r("Features.from_arrow_schema()"),_A=r(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),Rm=a("a"),vA=r("Value"),bA=r(" automatically performs."),yA=l(),p1=a("p"),$A=r("Example:"),wA=l(),p(Nd.$$.fragment),DA=l(),de=a("div"),p(Pd.$$.fragment),xA=l(),m1=a("p"),EA=r("Reorder Features fields to match the field order of other Features."),kA=l(),h1=a("p"),IA=r(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),TA=l(),f1=a("p"),NA=r("Example:"),PA=l(),p(Fd.$$.fragment),Wy=l(),Ma=a("div"),p(Ld.$$.fragment),FA=l(),u1=a("p"),LA=r(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),Ky=l(),R=a("div"),p(Ad.$$.fragment),AA=l(),g1=a("p"),OA=r("Feature type for integer class labels."),SA=l(),Od=a("p"),jA=r("There are 3 ways to define a "),_1=a("em"),CA=r("ClassLabel"),qA=r(", which correspond to the 3 arguments:"),zA=l(),Ua=a("ul"),Bm=a("li"),v1=a("em"),VA=r("num_classes"),MA=r(": Create 0 to (num_classes-1) labels."),UA=l(),Gm=a("li"),b1=a("em"),RA=r("names"),BA=r(": List of label strings."),GA=l(),Hm=a("li"),y1=a("em"),HA=r("names_file"),WA=r(": File containing the list of labels."),KA=l(),Vn=a("div"),p(Sd.$$.fragment),YA=l(),$1=a("p"),JA=r("Conversion integer => class name string."),XA=l(),Mn=a("div"),p(jd.$$.fragment),ZA=l(),w1=a("p"),QA=r("Conversion class name string => integer."),Yy=l(),dt=a("div"),p(Cd.$$.fragment),eO=l(),D1=a("p"),tO=r("The Value dtypes are as follows:"),aO=l(),x1=a("p"),sO=r(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),Jy=l(),z=a("div"),p(qd.$$.fragment),nO=l(),Wm=a("p"),E1=a("em"),rO=r("FeatureConnector"),oO=r(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),iO=l(),k1=a("p"),lO=r(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),dO=l(),zd=a("p"),cO=r("Output: A dictionary mapping string language codes to translations as "),I1=a("em"),pO=r("Text"),mO=r(`
features.`),hO=l(),T1=a("p"),fO=r("Example:"),uO=l(),p(Vd.$$.fragment),gO=l(),Un=a("div"),p(Md.$$.fragment),_O=l(),N1=a("p"),vO=r("Flatten the Translation feature into a dictionary."),Xy=l(),V=a("div"),p(Ud.$$.fragment),bO=l(),Km=a("p"),P1=a("em"),yO=r("FeatureConnector"),$O=r(` for translations with variable languages per example.
Here for compatiblity with tfds.`),wO=l(),F1=a("p"),DO=r(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),xO=l(),L1=a("p"),EO=r(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),kO=l(),A1=a("p"),IO=r("Example:"),TO=l(),p(Rd.$$.fragment),NO=l(),Rn=a("div"),p(Bd.$$.fragment),PO=l(),O1=a("p"),FO=r("Flatten the TranslationVariableLanguages feature into a dictionary."),Zy=l(),Gd=a("div"),p(Hd.$$.fragment),Qy=l(),Wd=a("div"),p(Kd.$$.fragment),e2=l(),Yd=a("div"),p(Jd.$$.fragment),t2=l(),Xd=a("div"),p(Zd.$$.fragment),a2=l(),P=a("div"),p(Qd.$$.fragment),LO=l(),S1=a("p"),AO=r("Audio Feature to extract audio data from an audio file."),OO=l(),j1=a("p"),SO=r("Input: The Audio feature accepts as input:"),jO=l(),ec=a("ul"),C1=a("li"),tc=a("p"),CO=r("A "),q1=a("code"),qO=r("str"),zO=r(": Absolute path to the audio file (i.e. random access is allowed)."),VO=l(),ac=a("li"),sc=a("p"),MO=r("A "),z1=a("code"),UO=r("dict"),RO=r(" with the keys:"),BO=l(),nc=a("ul"),V1=a("li"),GO=r("path: String with relative path of the audio file to the archive file."),HO=l(),M1=a("li"),WO=r("bytes: Bytes content of the audio file."),KO=l(),U1=a("p"),YO=r("This is useful for archived files with sequential access."),JO=l(),R1=a("ul"),rc=a("li"),oc=a("p"),XO=r("A "),B1=a("code"),ZO=r("dict"),QO=r(" with the keys:"),eS=l(),Ra=a("ul"),G1=a("li"),tS=r("path: String with relative path of the audio file to the archive file."),aS=l(),H1=a("li"),sS=r("array: Array containing the audio sample"),nS=l(),W1=a("li"),rS=r("sampling_rate: Integer corresponding to the samping rate of the audio sample."),oS=l(),K1=a("p"),iS=r("This is useful for archived files with sequential access."),lS=l(),Ct=a("div"),p(ic.$$.fragment),dS=l(),Y1=a("p"),cS=r(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),pS=l(),ct=a("ul"),J1=a("li"),mS=r("pa.string() - it must contain the \u201Cpath\u201D data"),hS=l(),X1=a("li"),fS=r("pa.struct({\u201Cbytes\u201D: pa.binary()})"),uS=l(),Z1=a("li"),gS=r("pa.struct({\u201Cpath\u201D: pa.string()})"),_S=l(),Q1=a("li"),vS=r("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),bS=l(),Bn=a("div"),p(lc.$$.fragment),yS=l(),eb=a("p"),$S=r("Decode example audio file into audio data."),wS=l(),Gn=a("div"),p(dc.$$.fragment),DS=l(),tb=a("p"),xS=r("Embed audio files into the Arrow array."),ES=l(),Hn=a("div"),p(cc.$$.fragment),kS=l(),ab=a("p"),IS=r("Encode example into a format for Arrow."),TS=l(),Wn=a("div"),p(pc.$$.fragment),NS=l(),sb=a("p"),PS=r("If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),s2=l(),F=a("div"),p(mc.$$.fragment),FS=l(),nb=a("p"),LS=r("Image feature to read image data from an image file."),AS=l(),rb=a("p"),OS=r("Input: The Image feature accepts as input:"),SS=l(),hc=a("ul"),ob=a("li"),fc=a("p"),jS=r("A "),ib=a("code"),CS=r("str"),qS=r(": Absolute path to the image file (i.e. random access is allowed)."),zS=l(),uc=a("li"),gc=a("p"),VS=r("A "),lb=a("code"),MS=r("dict"),US=r(" with the keys:"),RS=l(),_c=a("ul"),db=a("li"),BS=r("path: String with relative path of the image file to the archive file."),GS=l(),cb=a("li"),HS=r("bytes: Bytes of the image file."),WS=l(),pb=a("p"),KS=r("This is useful for archived files with sequential access."),YS=l(),vc=a("ul"),bc=a("li"),JS=r("An "),mb=a("code"),XS=r("np.ndarray"),ZS=r(": NumPy array representing an image."),QS=l(),yc=a("li"),ej=r("A "),hb=a("code"),tj=r("PIL.Image.Image"),aj=r(": PIL image object."),sj=l(),qt=a("div"),p($c.$$.fragment),nj=l(),fb=a("p"),rj=r(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),oj=l(),De=a("ul"),ub=a("li"),ij=r("pa.string() - it must contain the \u201Cpath\u201D data"),lj=l(),gb=a("li"),dj=r("pa.struct({\u201Cbytes\u201D: pa.binary()})"),cj=l(),_b=a("li"),pj=r("pa.struct({\u201Cpath\u201D: pa.string()})"),mj=l(),vb=a("li"),hj=r("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),fj=l(),bb=a("li"),uj=r("pa.list(*) - it must contain the image array data"),gj=l(),Kn=a("div"),p(wc.$$.fragment),_j=l(),yb=a("p"),vj=r("Decode example image file into image data."),bj=l(),Yn=a("div"),p(Dc.$$.fragment),yj=l(),$b=a("p"),$j=r("Embed image files into the Arrow array."),wj=l(),Jn=a("div"),p(xc.$$.fragment),Dj=l(),wb=a("p"),xj=r("Encode example into a format for Arrow."),Ej=l(),Xn=a("div"),p(Ec.$$.fragment),kj=l(),Db=a("p"),Ij=r("If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),n2=l(),Ba=a("h2"),Zn=a("a"),xb=a("span"),p(kc.$$.fragment),Tj=l(),Eb=a("span"),Nj=r("MetricInfo"),r2=l(),B=a("div"),p(Ic.$$.fragment),Pj=l(),kb=a("p"),Fj=r("Information about a metric."),Lj=l(),Ym=a("p"),Ib=a("code"),Aj=r("MetricInfo"),Oj=r(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Sj=l(),Tb=a("p"),jj=r("Note: Not all fields are known on construction and may be updated later."),Cj=l(),Qn=a("div"),p(Tc.$$.fragment),qj=l(),Nc=a("p"),zj=r("Create MetricInfo from the JSON file in "),Nb=a("code"),Vj=r("metric_info_dir"),Mj=r("."),Uj=l(),er=a("div"),p(Pc.$$.fragment),Rj=l(),Ga=a("p"),Bj=r("Write "),Pb=a("code"),Gj=r("MetricInfo"),Hj=r(" as JSON to "),Fb=a("code"),Wj=r("metric_info_dir"),Kj=r(`.
Also save the license separately in LICENCE.`),o2=l(),Ha=a("h2"),tr=a("a"),Lb=a("span"),p(Fc.$$.fragment),Yj=l(),Ab=a("span"),Jj=r("Metric"),i2=l(),zt=a("p"),Xj=r("The base class "),Ob=a("code"),Zj=r("Metric"),Qj=r(" implements a Metric backed by one or several "),Jm=a("a"),eC=r("datasets.Dataset"),tC=r("."),l2=l(),G=a("div"),p(Lc.$$.fragment),aC=l(),Sb=a("p"),sC=r("A Metric is the base class and common API for all metrics."),nC=l(),ar=a("div"),p(Ac.$$.fragment),rC=l(),jb=a("p"),oC=r("Add one prediction and reference for the metric\u2019s stack."),iC=l(),sr=a("div"),p(Oc.$$.fragment),lC=l(),Cb=a("p"),dC=r("Add a batch of predictions and references for the metric\u2019s stack."),cC=l(),Vt=a("div"),p(Sc.$$.fragment),pC=l(),qb=a("p"),mC=r("Compute the metrics."),hC=l(),zb=a("p"),fC=r("Usage of positional arguments is not allowed to prevent mistakes."),uC=l(),nr=a("div"),p(jc.$$.fragment),gC=l(),Vb=a("p"),_C=r("Downloads and prepares dataset for reading."),d2=l(),Wa=a("h2"),rr=a("a"),Mb=a("span"),p(Cc.$$.fragment),vC=l(),Ub=a("span"),bC=r("Filesystems"),c2=l(),k=a("div"),p(qc.$$.fragment),yC=l(),Rb=a("p"),$C=r("Access S3 as if it were a file system."),wC=l(),Bb=a("p"),DC=r(`This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3
storage.`),xC=l(),pt=a("p"),EC=r("Provide credentials either explicitly ("),Gb=a("code"),kC=r("key="),IC=r(", "),Hb=a("code"),TC=r("secret="),NC=r(`) or depend
on boto\u2019s credential methods. See botocore documentation for more
information. If no credentials are available, use `),Wb=a("code"),PC=r("anon=True"),FC=r("."),LC=l(),Kb=a("p"),AC=r("The following parameters are passed on to fsspec:"),OC=l(),Yb=a("p"),SC=r(`skip_instance_cache: to control reuse of instances
use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings`),jC=l(),Jb=a("p"),CC=r("."),qC=l(),Me=a("p"),Xb=a("code"),zC=r("datasets.filesystems.S3FileSystem"),VC=r(" is a subclass of s3fs.S3FileSystem]("),zc=a("a"),MC=r("https://s3fs.readthedocs.io/en/latest/api.html"),UC=r(`), which is a known
implementation of `),Zb=a("code"),RC=r("fsspec"),BC=r(". Filesystem Spec "),Vc=a("a"),GC=r("FSSPEC"),HC=r(` is a project to
unify various projects and classes to work with remote filesystems
and file-system-like abstractions using a standard pythonic interface.`),WC=l(),Qb=a("p"),KC=r("Examples:"),YC=l(),ey=a("p"),JC=r("Listing files from public s3 bucket."),XC=l(),p(Mc.$$.fragment),ZC=l(),Ka=a("p"),QC=r("Listing files from private s3 bucket using "),ty=a("code"),eq=r("aws_access_key_id"),tq=r(" and "),ay=a("code"),aq=r("aws_secret_access_key"),sq=r("."),nq=l(),p(Uc.$$.fragment),rq=l(),mt=a("p"),oq=r("Using "),sy=a("code"),iq=r("S3Filesystem"),lq=r(" with "),ny=a("code"),dq=r("botocore.session.Session"),cq=r(" and custom "),ry=a("code"),pq=r("aws_profile"),mq=r("."),hq=l(),p(Rc.$$.fragment),fq=l(),Ya=a("p"),uq=r("Loading dataset from s3 using "),oy=a("code"),gq=r("S3Filesystem"),_q=r(" and "),iy=a("code"),vq=r("load_from_disk()"),bq=r("."),yq=l(),p(Bc.$$.fragment),$q=l(),ly=a("p"),wq=r("Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>."),Dq=l(),p(Gc.$$.fragment),xq=l(),or=a("h2"),ir=a("a"),dy=a("span"),p(Hc.$$.fragment),Eq=l(),cy=a("span"),kq=r("Parameters"),Iq=l(),M=a("p"),Tq=r(`anon : bool (False)
Whether to use anonymous connection (public buckets only). If False,
uses the key/secret given, or boto\u2019s credential resolver (client_kwargs,
environment, variables, config files, EC2 IAM server, in that order)
key : string (None)
If not anonymous, use this access key ID, if specified
secret : string (None)
If not anonymous, use this secret access key, if specified
token : string (None)
If not anonymous, use this security token, if specified
use_ssl : bool (True)
Whether to use SSL in connections to S3; may be faster without, but
insecure. If `),py=a("code"),Nq=r("use_ssl"),Pq=r(" is also set in "),my=a("code"),Fq=r("client_kwargs"),Lq=r(`,
the value set in `),hy=a("code"),Aq=r("client_kwargs"),Oq=r(` will take priority.
s3_additional_kwargs : dict of parameters that are used when calling s3 api
methods. Typically used for things like \u201CServerSideEncryption\u201D.
client_kwargs : dict of parameters for the botocore client
requester_pays : bool (False)
If RequesterPays buckets are supported.
default_block_size: int (None)
If given, the default block size value used for `),fy=a("code"),Sq=r("open()"),jq=r(`, if no
specific value is given at all time. The built-in default is 5MB.
default_fill_cache : Bool (True)
Whether to use cache filling with open by default. Refer to
`),uy=a("code"),Cq=r("S3File.open"),qq=r(`.
default_cache_type : string (\u2018bytes\u2019)
If given, the default cache_type value used for `),gy=a("code"),zq=r("open()"),Vq=r(`. Set to \u201Cnone\u201D
if no caching is desired. See fsspec\u2019s documentation for other available
cache_type values. Default cache_type is \u2018bytes\u2019.
version_aware : bool (False)
Whether to support bucket versioning.  If enable this will require the
user to have the necessary IAM permissions for dealing with versioned
objects.
cache_regions : bool (False)
Whether to cache bucket regions or not. Whenever a new bucket is used,
it will first find out which region it belongs and then use the client
for that region.
config_kwargs : dict of parameters passed to `),_y=a("code"),Mq=r("botocore.client.Config"),Uq=r(`
kwargs : other parameters for core session
session : aiobotocore AioSession object to be used for all connections.
This session will be used inplace of creating a new session inside S3FileSystem.
For example: aiobotocore.session.AioSession(profile=\u2018test_user\u2019)`),p2=l(),Ja=a("div"),p(Wc.$$.fragment),Rq=l(),Xa=a("p"),Bq=r("preprocesses "),vy=a("em"),Gq=r("dataset_path"),Hq=r(" and removes remote filesystem (e.g. removing "),by=a("code"),Wq=r("s3://"),Kq=r(")"),m2=l(),Za=a("div"),p(Kc.$$.fragment),Yq=l(),yy=a("p"),Jq=r("Validates if filesystem has remote protocol."),h2=l(),Qa=a("h2"),lr=a("a"),$y=a("span"),p(Yc.$$.fragment),Xq=l(),wy=a("span"),Zq=r("Fingerprint"),f2=l(),es=a("div"),p(Jc.$$.fragment),Qq=l(),Dy=a("p"),ez=r("Hasher that accepts python objects as inputs."),this.h()},l(i){const y=GK('[data-svelte="svelte-1phssyn"]',document.head);A=s(y,"META",{name:!0,content:!0}),y.forEach(t),ht=d(i),S=s(i,"H1",{class:!0});var Xc=n(S);Q=s(Xc,"A",{id:!0,class:!0,href:!0});var _z=n(Q);sa=s(_z,"SPAN",{});var vz=n(sa);m(he.$$.fragment,vz),vz.forEach(t),_z.forEach(t),Vr=d(Xc),na=s(Xc,"SPAN",{});var bz=n(na);ft=o(bz,"Main classes"),bz.forEach(t),Xc.forEach(t),ss=d(i),fe=s(i,"H2",{class:!0});var g2=n(fe);ne=s(g2,"A",{id:!0,class:!0,href:!0});var yz=n(ne);W=s(yz,"SPAN",{});var $z=n(W);m(ut.$$.fragment,$z),$z.forEach(t),yz.forEach(t),Qc=d(g2),ns=s(g2,"SPAN",{});var wz=n(ns);bD=o(wz,"DatasetInfo"),wz.forEach(t),g2.forEach(t),Ey=d(i),U=s(i,"DIV",{class:!0});var Ue=n(U);m(Mr.$$.fragment,Ue),yD=d(Ue),sf=s(Ue,"P",{});var Dz=n(sf);$D=o(Dz,"Information about a dataset."),Dz.forEach(t),wD=d(Ue),ep=s(Ue,"P",{});var tz=n(ep);nf=s(tz,"EM",{});var xz=n(nf);DD=o(xz,"DatasetInfo"),xz.forEach(t),xD=o(tz,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),tz.forEach(t),ED=d(Ue),rf=s(Ue,"P",{});var Ez=n(rf);kD=o(Ez,"Note: Not all fields are known on construction and may be updated later."),Ez.forEach(t),ID=d(Ue),xe=s(Ue,"DIV",{class:!0});var dr=n(xe);m(Ur.$$.fragment,dr),TD=d(dr),Rr=s(dr,"P",{});var _2=n(Rr);ND=o(_2,"Create DatasetInfo from the JSON file in "),of=s(_2,"CODE",{});var kz=n(of);PD=o(kz,"dataset_info_dir"),kz.forEach(t),FD=o(_2,"."),_2.forEach(t),LD=d(dr),lf=s(dr,"P",{});var Iz=n(lf);AD=o(Iz,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),Iz.forEach(t),OD=d(dr),df=s(dr,"P",{});var Tz=n(df);SD=o(Tz,"This will overwrite all previous metadata."),Tz.forEach(t),dr.forEach(t),jD=d(Ue),gt=s(Ue,"DIV",{class:!0});var Xm=n(gt);m(Br.$$.fragment,Xm),CD=d(Xm),ra=s(Xm,"P",{});var Zm=n(ra);qD=o(Zm,"Write "),cf=s(Zm,"CODE",{});var Nz=n(cf);zD=o(Nz,"DatasetInfo"),Nz.forEach(t),VD=o(Zm," as JSON to "),pf=s(Zm,"CODE",{});var Pz=n(pf);MD=o(Pz,"dataset_info_dir"),Pz.forEach(t),UD=o(Zm,"."),Zm.forEach(t),RD=d(Xm),mf=s(Xm,"P",{});var Fz=n(mf);BD=o(Fz,"Also save the license separately in LICENCE."),Fz.forEach(t),Xm.forEach(t),Ue.forEach(t),ky=d(i),oa=s(i,"H2",{class:!0});var v2=n(oa);rs=s(v2,"A",{id:!0,class:!0,href:!0});var Lz=n(rs);hf=s(Lz,"SPAN",{});var Az=n(hf);m(Gr.$$.fragment,Az),Az.forEach(t),Lz.forEach(t),GD=d(v2),ff=s(v2,"SPAN",{});var Oz=n(ff);HD=o(Oz,"Dataset"),Oz.forEach(t),v2.forEach(t),Iy=d(i),os=s(i,"P",{});var b2=n(os);WD=o(b2,"The base class "),tp=s(b2,"A",{href:!0});var Sz=n(tp);KD=o(Sz,"datasets.Dataset"),Sz.forEach(t),YD=o(b2," implements a Dataset backed by an Apache Arrow table."),b2.forEach(t),Ty=d(i),v=s(i,"DIV",{class:!0});var b=n(v);m(Hr.$$.fragment,b),JD=d(b),uf=s(b,"P",{});var jz=n(uf);XD=o(jz,"A Dataset backed by an Arrow table."),jz.forEach(t),ZD=d(b),_t=s(b,"DIV",{class:!0});var Qm=n(_t);m(Wr.$$.fragment,Qm),QD=d(Qm),gf=s(Qm,"P",{});var Cz=n(gf);ex=o(Cz,"Add column to Dataset."),Cz.forEach(t),tx=d(Qm),_f=s(Qm,"P",{});var qz=n(_f);vf=s(qz,"EM",{});var zz=n(vf);ax=o(zz,"New in version 1.7."),zz.forEach(t),qz.forEach(t),Qm.forEach(t),sx=d(b),vt=s(b,"DIV",{class:!0});var eh=n(vt);m(Kr.$$.fragment,eh),nx=d(eh),bf=s(eh,"P",{});var Vz=n(bf);rx=o(Vz,"Add item to Dataset."),Vz.forEach(t),ox=d(eh),yf=s(eh,"P",{});var Mz=n(yf);$f=s(Mz,"EM",{});var Uz=n($f);ix=o(Uz,"New in version 1.7."),Uz.forEach(t),Mz.forEach(t),eh.forEach(t),lx=d(b),is=s(b,"DIV",{class:!0});var y2=n(is);m(Yr.$$.fragment,y2),dx=d(y2),wf=s(y2,"P",{});var Rz=n(wf);cx=o(Rz,"Instantiate a Dataset backed by an Arrow table at filename."),Rz.forEach(t),y2.forEach(t),px=d(b),ls=s(b,"DIV",{class:!0});var $2=n(ls);m(Jr.$$.fragment,$2),mx=d($2),Df=s($2,"P",{});var Bz=n(Df);hx=o(Bz,"Instantiate a Dataset backed by an Arrow buffer."),Bz.forEach(t),$2.forEach(t),fx=d(b),Ee=s(b,"DIV",{class:!0});var cr=n(Ee);m(Xr.$$.fragment,cr),ux=d(cr),Xe=s(cr,"P",{});var pr=n(Xe);gx=o(pr,"Convert "),xf=s(pr,"CODE",{});var Gz=n(xf);_x=o(Gz,"pandas.DataFrame"),Gz.forEach(t),vx=o(pr," to a "),Ef=s(pr,"CODE",{});var Hz=n(Ef);bx=o(Hz,"pyarrow.Table"),Hz.forEach(t),yx=o(pr," to create a "),ap=s(pr,"A",{href:!0});var Wz=n(ap);$x=o(Wz,"Dataset"),Wz.forEach(t),wx=o(pr,"."),pr.forEach(t),Dx=d(cr),Zr=s(cr,"P",{});var w2=n(Zr);xx=o(w2,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),kf=s(w2,"EM",{});var Kz=n(kf);Ex=o(Kz,"object"),Kz.forEach(t),kx=o(w2,", we need to guess the datatype by looking at the Python objects in this Series."),w2.forEach(t),Ix=d(cr),Qr=s(cr,"P",{});var D2=n(Qr);Tx=o(D2,"Be aware that Series of the "),If=s(D2,"EM",{});var Yz=n(If);Nx=o(Yz,"object"),Yz.forEach(t),Px=o(D2,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),D2.forEach(t),cr.forEach(t),Fx=d(b),ds=s(b,"DIV",{class:!0});var x2=n(ds);m(eo.$$.fragment,x2),Lx=d(x2),Ze=s(x2,"P",{});var mr=n(Ze);Ax=o(mr,"Convert "),Tf=s(mr,"CODE",{});var Jz=n(Tf);Ox=o(Jz,"dict"),Jz.forEach(t),Sx=o(mr," to a "),Nf=s(mr,"CODE",{});var Xz=n(Nf);jx=o(Xz,"pyarrow.Table"),Xz.forEach(t),Cx=o(mr," to create a "),sp=s(mr,"A",{href:!0});var Zz=n(sp);qx=o(Zz,"Dataset"),Zz.forEach(t),zx=o(mr,"."),mr.forEach(t),x2.forEach(t),Vx=d(b),cs=s(b,"DIV",{class:!0});var E2=n(cs);m(to.$$.fragment,E2),Mx=d(E2),Pf=s(E2,"P",{});var Qz=n(Pf);Ux=o(Qz,"The Apache Arrow table backing the dataset."),Qz.forEach(t),E2.forEach(t),Rx=d(b),ps=s(b,"DIV",{class:!0});var k2=n(ps);m(ao.$$.fragment,k2),Bx=d(k2),Ff=s(k2,"P",{});var eV=n(Ff);Gx=o(eV,"The cache files containing the Apache Arrow table backing the dataset."),eV.forEach(t),k2.forEach(t),Hx=d(b),ms=s(b,"DIV",{class:!0});var I2=n(ms);m(so.$$.fragment,I2),Wx=d(I2),Lf=s(I2,"P",{});var tV=n(Lf);Kx=o(tV,"Number of columns in the dataset."),tV.forEach(t),I2.forEach(t),Yx=d(b),hs=s(b,"DIV",{class:!0});var T2=n(hs);m(no.$$.fragment,T2),Jx=d(T2),ro=s(T2,"P",{});var N2=n(ro);Xx=o(N2,"Number of rows in the dataset (same as "),fs=s(N2,"A",{href:!0});var P2=n(fs);Zx=o(P2,"Dataset."),Af=s(P2,"STRONG",{});var aV=n(Af);Qx=o(aV,"len"),aV.forEach(t),e3=o(P2,"()"),P2.forEach(t),t3=o(N2,")."),N2.forEach(t),T2.forEach(t),a3=d(b),us=s(b,"DIV",{class:!0});var F2=n(us);m(oo.$$.fragment,F2),s3=d(F2),Of=s(F2,"P",{});var sV=n(Of);n3=o(sV,"Names of the columns in the dataset."),sV.forEach(t),F2.forEach(t),r3=d(b),gs=s(b,"DIV",{class:!0});var L2=n(gs);m(io.$$.fragment,L2),o3=d(L2),Sf=s(L2,"P",{});var nV=n(Sf);i3=o(nV,"Shape of the dataset (number of columns, number of rows)."),nV.forEach(t),L2.forEach(t),l3=d(b),bt=s(b,"DIV",{class:!0});var th=n(bt);m(lo.$$.fragment,th),d3=d(th),jf=s(th,"P",{});var rV=n(jf);c3=o(rV,"Return a list of the unique elements in a column."),rV.forEach(t),p3=d(th),Cf=s(th,"P",{});var oV=n(Cf);m3=o(oV,"This is implemented in the low-level backend and as such, very fast."),oV.forEach(t),th.forEach(t),h3=d(b),_s=s(b,"DIV",{class:!0});var A2=n(_s);m(co.$$.fragment,A2),f3=d(A2),qf=s(A2,"P",{});var iV=n(qf);u3=o(iV,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),iV.forEach(t),A2.forEach(t),g3=d(b),vs=s(b,"DIV",{class:!0});var O2=n(vs);m(po.$$.fragment,O2),_3=d(O2),zf=s(O2,"P",{});var lV=n(zf);v3=o(lV,"Cast the dataset to a new set of features."),lV.forEach(t),O2.forEach(t),b3=d(b),bs=s(b,"DIV",{class:!0});var S2=n(bs);m(mo.$$.fragment,S2),y3=d(S2),Vf=s(S2,"P",{});var dV=n(Vf);$3=o(dV,"Cast column to feature for decoding."),dV.forEach(t),S2.forEach(t),w3=d(b),yt=s(b,"DIV",{class:!0});var ah=n(yt);m(ho.$$.fragment,ah),D3=d(ah),Mf=s(ah,"P",{});var cV=n(Mf);x3=o(cV,"Remove one or several column(s) in the dataset and the features associated to them."),cV.forEach(t),E3=d(ah),ia=s(ah,"P",{});var sh=n(ia);k3=o(sh,"You can also remove a column using "),np=s(sh,"A",{href:!0});var pV=n(np);I3=o(pV,"Dataset.map()"),pV.forEach(t),T3=o(sh," with "),Uf=s(sh,"EM",{});var mV=n(Uf);N3=o(mV,"remove_columns"),mV.forEach(t),P3=o(sh,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),sh.forEach(t),ah.forEach(t),F3=d(b),ys=s(b,"DIV",{class:!0});var j2=n(ys);m(fo.$$.fragment,j2),L3=d(j2),Rf=s(j2,"P",{});var hV=n(Rf);A3=o(hV,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),hV.forEach(t),j2.forEach(t),O3=d(b),$s=s(b,"DIV",{class:!0});var C2=n($s);m(uo.$$.fragment,C2),S3=d(C2),go=s(C2,"P",{});var q2=n(go);j3=o(q2,"Casts the given column as :obj:"),Bf=s(q2,"CODE",{});var fV=n(Bf);C3=o(fV,"datasets.features.ClassLabel"),fV.forEach(t),q3=o(q2," and updates the table."),q2.forEach(t),C2.forEach(t),z3=d(b),ws=s(b,"DIV",{class:!0});var z2=n(ws);m(_o.$$.fragment,z2),V3=d(z2),Gf=s(z2,"P",{});var uV=n(Gf);M3=o(uV,"Number of rows in the dataset."),uV.forEach(t),z2.forEach(t),U3=d(b),$t=s(b,"DIV",{class:!0});var nh=n($t);m(vo.$$.fragment,nh),R3=d(nh),Hf=s(nh,"P",{});var gV=n(Hf);B3=o(gV,"Iterate through the examples."),gV.forEach(t),G3=d(nh),bo=s(nh,"P",{});var V2=n(bo);H3=o(V2,"If a formatting is set with "),rp=s(V2,"A",{href:!0});var _V=n(rp);W3=o(_V,"Dataset.set_format()"),_V.forEach(t),K3=o(V2,` rows will be returned with the
selected format.`),V2.forEach(t),nh.forEach(t),Y3=d(b),Ds=s(b,"DIV",{class:!0});var M2=n(Ds);m(yo.$$.fragment,M2),J3=d(M2),la=s(M2,"P",{});var rh=n(la);X3=o(rh,"To be used in a "),Wf=s(rh,"CODE",{});var vV=n(Wf);Z3=o(vV,"with"),vV.forEach(t),Q3=o(rh," statement. Set "),Kf=s(rh,"CODE",{});var bV=n(Kf);e0=o(bV,"__getitem__"),bV.forEach(t),t0=o(rh," return format (type and columns)."),rh.forEach(t),M2.forEach(t),a0=d(b),ke=s(b,"DIV",{class:!0});var hr=n(ke);m($o.$$.fragment,hr),s0=d(hr),ue=s(hr,"P",{});var Mt=n(ue);n0=o(Mt,"Set "),Yf=s(Mt,"STRONG",{});var yV=n(Yf);r0=o(yV,"getitem"),yV.forEach(t),o0=o(Mt,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Jf=s(Mt,"CODE",{});var $V=n(Jf);i0=o($V,"type"),$V.forEach(t),l0=o(Mt," (for example \u201Cnumpy\u201D) is used to format batches when using "),Xf=s(Mt,"STRONG",{});var wV=n(Xf);d0=o(wV,"getitem"),wV.forEach(t),c0=o(Mt,`.
It\u2019s also possible to use custom transforms for formatting using `),op=s(Mt,"A",{href:!0});var DV=n(op);p0=o(DV,"datasets.Dataset.set_transform()"),DV.forEach(t),m0=o(Mt,"."),Mt.forEach(t),h0=d(hr),ge=s(hr,"P",{});var Ut=n(ge);f0=o(Ut,"It is possible to call "),Zf=s(Ut,"CODE",{});var xV=n(Zf);u0=o(xV,"map"),xV.forEach(t),g0=o(Ut," after calling "),Qf=s(Ut,"CODE",{});var EV=n(Qf);_0=o(EV,"set_format"),EV.forEach(t),v0=o(Ut,". Since "),eu=s(Ut,"CODE",{});var kV=n(eu);b0=o(kV,"map"),kV.forEach(t),y0=o(Ut,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),tu=s(Ut,"CODE",{});var IV=n(tu);$0=o(IV,"map"),IV.forEach(t),w0=o(Ut," on a dataset to add a new column, then this column will be formatted:"),Ut.forEach(t),D0=d(hr),au=s(hr,"P",{});var TV=n(au);x0=o(TV,"new formatted columns = (all columns - previously unformatted columns)"),TV.forEach(t),hr.forEach(t),E0=d(b),xs=s(b,"DIV",{class:!0});var U2=n(xs);m(wo.$$.fragment,U2),k0=d(U2),Ie=s(U2,"P",{});var ts=n(Ie);I0=o(ts,"Set "),su=s(ts,"STRONG",{});var NV=n(su);T0=o(NV,"getitem"),NV.forEach(t),N0=o(ts," return format using this transform. The transform is applied on-the-fly on batches when "),nu=s(ts,"STRONG",{});var PV=n(nu);P0=o(PV,"getitem"),PV.forEach(t),F0=o(ts,` is called.
As `),ip=s(ts,"A",{href:!0});var FV=n(ip);L0=o(FV,"datasets.Dataset.set_format()"),FV.forEach(t),A0=o(ts,", this can be reset using "),lp=s(ts,"A",{href:!0});var LV=n(lp);O0=o(LV,"datasets.Dataset.reset_format()"),LV.forEach(t),ts.forEach(t),U2.forEach(t),S0=d(b),wt=s(b,"DIV",{class:!0});var oh=n(wt);m(Do.$$.fragment,oh),j0=d(oh),xo=s(oh,"P",{});var R2=n(xo);C0=o(R2,"Reset "),ru=s(R2,"STRONG",{});var AV=n(ru);q0=o(AV,"getitem"),AV.forEach(t),z0=o(R2," return format to python objects and all columns."),R2.forEach(t),V0=d(oh),dp=s(oh,"P",{});var az=n(dp);M0=o(az,"Same as "),ou=s(az,"CODE",{});var OV=n(ou);U0=o(OV,"self.set_format()"),OV.forEach(t),az.forEach(t),oh.forEach(t),R0=d(b),Te=s(b,"DIV",{class:!0});var fr=n(Te);m(Eo.$$.fragment,fr),B0=d(fr),Qe=s(fr,"P",{});var ur=n(Qe);G0=o(ur,"Set "),iu=s(ur,"STRONG",{});var SV=n(iu);H0=o(SV,"getitem"),SV.forEach(t),W0=o(ur,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),lu=s(ur,"CODE",{});var jV=n(lu);K0=o(jV,"type"),jV.forEach(t),Y0=o(ur," (for example \u201Cnumpy\u201D) is used to format batches when using "),du=s(ur,"STRONG",{});var CV=n(du);J0=o(CV,"getitem"),CV.forEach(t),X0=o(ur,"."),ur.forEach(t),Z0=d(fr),ko=s(fr,"P",{});var B2=n(ko);Q0=o(B2,"It\u2019s also possible to use custom transforms for formatting using "),cp=s(B2,"A",{href:!0});var qV=n(cp);e7=o(qV,"datasets.Dataset.with_transform()"),qV.forEach(t),t7=o(B2,"."),B2.forEach(t),a7=d(fr),da=s(fr,"P",{});var ih=n(da);s7=o(ih,"Contrary to "),pp=s(ih,"A",{href:!0});var zV=n(pp);n7=o(zV,"datasets.Dataset.set_format()"),zV.forEach(t),r7=o(ih,", "),cu=s(ih,"CODE",{});var VV=n(cu);o7=o(VV,"with_format"),VV.forEach(t),i7=o(ih," returns a new Dataset object."),ih.forEach(t),fr.forEach(t),l7=d(b),Ne=s(b,"DIV",{class:!0});var gr=n(Ne);m(Io.$$.fragment,gr),d7=d(gr),ca=s(gr,"P",{});var lh=n(ca);c7=o(lh,"Set "),pu=s(lh,"STRONG",{});var MV=n(pu);p7=o(MV,"getitem"),MV.forEach(t),m7=o(lh," return format using this transform. The transform is applied on-the-fly on batches when "),mu=s(lh,"STRONG",{});var UV=n(mu);h7=o(UV,"getitem"),UV.forEach(t),f7=o(lh," is called."),lh.forEach(t),u7=d(gr),pa=s(gr,"P",{});var dh=n(pa);g7=o(dh,"As "),mp=s(dh,"A",{href:!0});var RV=n(mp);_7=o(RV,"datasets.Dataset.set_format()"),RV.forEach(t),v7=o(dh,", this can be reset using "),hp=s(dh,"A",{href:!0});var BV=n(hp);b7=o(BV,"datasets.Dataset.reset_format()"),BV.forEach(t),y7=o(dh,"."),dh.forEach(t),$7=d(gr),ma=s(gr,"P",{});var ch=n(ma);w7=o(ch,"Contrary to "),fp=s(ch,"A",{href:!0});var GV=n(fp);D7=o(GV,"datasets.Dataset.set_transform()"),GV.forEach(t),x7=o(ch,", "),hu=s(ch,"CODE",{});var HV=n(hu);E7=o(HV,"with_transform"),HV.forEach(t),k7=o(ch," returns a new Dataset object."),ch.forEach(t),gr.forEach(t),I7=d(b),Es=s(b,"DIV",{class:!0});var G2=n(Es);m(To.$$.fragment,G2),T7=d(G2),fu=s(G2,"P",{});var WV=n(fu);N7=o(WV,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),WV.forEach(t),G2.forEach(t),P7=d(b),Dt=s(b,"DIV",{class:!0});var ph=n(Dt);m(No.$$.fragment,ph),F7=d(ph),uu=s(ph,"P",{});var KV=n(uu);L7=o(KV,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),KV.forEach(t),A7=d(ph),gu=s(ph,"P",{});var YV=n(gu);O7=o(YV,"Be careful when running this command that no other process is currently using other cache files."),YV.forEach(t),ph.forEach(t),S7=d(b),Pe=s(b,"DIV",{class:!0});var _r=n(Pe);m(Po.$$.fragment,_r),j7=d(_r),_u=s(_r,"P",{});var JV=n(_u);C7=o(JV,`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),JV.forEach(t),q7=d(_r),Fo=s(_r,"P",{});var H2=n(Fo);z7=o(H2,"You can specify whether the function should be batched or not with the "),vu=s(H2,"CODE",{});var XV=n(vu);V7=o(XV,"batched"),XV.forEach(t),M7=o(H2," parameter:"),H2.forEach(t),U7=d(_r),ha=s(_r,"UL",{});var mh=n(ha);bu=s(mh,"LI",{});var ZV=n(bu);R7=o(ZV,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),ZV.forEach(t),B7=d(mh),yu=s(mh,"LI",{});var QV=n(yu);G7=o(QV,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),QV.forEach(t),H7=d(mh),ee=s(mh,"LI",{});var Re=n(ee);W7=o(Re,"If batched is True and batch_size is "),$u=s(Re,"CODE",{});var eM=n($u);K7=o(eM,"n"),eM.forEach(t),Y7=o(Re," > 1, then the function takes a batch of "),wu=s(Re,"CODE",{});var tM=n(wu);J7=o(tM,"n"),tM.forEach(t),X7=o(Re," examples as input and can return a batch with "),Du=s(Re,"CODE",{});var aM=n(Du);Z7=o(aM,"n"),aM.forEach(t),Q7=o(Re,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),xu=s(Re,"CODE",{});var sM=n(xu);e4=o(sM,"n"),sM.forEach(t),t4=o(Re,` examples.
A batch is a dictionary, e.g. a batch of `),Eu=s(Re,"CODE",{});var nM=n(Eu);a4=o(nM,"n"),nM.forEach(t),s4=o(Re," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Re.forEach(t),mh.forEach(t),_r.forEach(t),n4=d(b),ks=s(b,"DIV",{class:!0});var W2=n(ks);m(Lo.$$.fragment,W2),r4=d(W2),ku=s(W2,"P",{});var rM=n(ku);o4=o(rM,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),rM.forEach(t),W2.forEach(t),i4=d(b),Is=s(b,"DIV",{class:!0});var K2=n(Is);m(Ao.$$.fragment,K2),l4=d(K2),Iu=s(K2,"P",{});var oM=n(Iu);d4=o(oM,"Create a new dataset with rows selected following the list/array of indices."),oM.forEach(t),K2.forEach(t),c4=d(b),xt=s(b,"DIV",{class:!0});var hh=n(xt);m(Oo.$$.fragment,hh),p4=d(hh),Tu=s(hh,"P",{});var iM=n(Tu);m4=o(iM,"Create a new dataset sorted according to a column."),iM.forEach(t),h4=d(hh),Nu=s(hh,"P",{});var lM=n(Nu);f4=o(lM,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),lM.forEach(t),hh.forEach(t),u4=d(b),Et=s(b,"DIV",{class:!0});var fh=n(Et);m(So.$$.fragment,fh),g4=d(fh),Pu=s(fh,"P",{});var dM=n(Pu);_4=o(dM,"Create a new Dataset where the rows are shuffled."),dM.forEach(t),v4=d(fh),Fu=s(fh,"P",{});var cM=n(Fu);b4=o(cM,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),cM.forEach(t),fh.forEach(t),y4=d(b),kt=s(b,"DIV",{class:!0});var uh=n(kt);m(jo.$$.fragment,uh),$4=d(uh),j=s(uh,"P",{});var J=n(j);w4=o(J,"Return a dictionary ("),Lu=s(J,"CODE",{});var pM=n(Lu);D4=o(pM,"datasets.DatsetDict"),pM.forEach(t),x4=o(J,") with two random train and test subsets ("),Au=s(J,"EM",{});var mM=n(Au);E4=o(mM,"train"),mM.forEach(t),k4=o(J," and "),Ou=s(J,"EM",{});var hM=n(Ou);I4=o(hM,"test"),hM.forEach(t),T4=d(J),Su=s(J,"CODE",{});var fM=n(Su);N4=o(fM,"Dataset"),fM.forEach(t),P4=o(J,` splits).
Splits are created from the dataset according to `),ju=s(J,"EM",{});var uM=n(ju);F4=o(uM,"test_size"),uM.forEach(t),L4=o(J,", "),Cu=s(J,"EM",{});var gM=n(Cu);A4=o(gM,"train_size"),gM.forEach(t),O4=o(J," and "),qu=s(J,"EM",{});var _M=n(qu);S4=o(_M,"shuffle"),_M.forEach(t),j4=o(J,"."),J.forEach(t),C4=d(uh),Co=s(uh,"P",{});var Y2=n(Co);q4=o(Y2,"This method is similar to scikit-learn "),zu=s(Y2,"EM",{});var vM=n(zu);z4=o(vM,"train_test_split"),vM.forEach(t),V4=o(Y2," with the omission of the stratified options."),Y2.forEach(t),uh.forEach(t),M4=d(b),re=s(b,"DIV",{class:!0});var Rt=n(re);m(qo.$$.fragment,Rt),U4=d(Rt),fa=s(Rt,"P",{});var gh=n(fa);R4=o(gh,"Return the "),Vu=s(gh,"EM",{});var bM=n(Vu);B4=o(bM,"index"),bM.forEach(t),G4=o(gh,"-nth shard from dataset split into "),Mu=s(gh,"EM",{});var yM=n(Mu);H4=o(yM,"num_shards"),yM.forEach(t),W4=o(gh," pieces."),gh.forEach(t),K4=d(Rt),Uu=s(Rt,"P",{});var $M=n(Uu);Y4=o($M,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),$M.forEach(t),J4=d(Rt),zo=s(Rt,"P",{});var J2=n(zo);X4=o(J2,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),Ru=s(J2,"EM",{});var wM=n(Ru);Z4=o(wM,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),wM.forEach(t),Q4=o(J2,` will return
a dataset with the same order as the original.`),J2.forEach(t),eE=d(Rt),Bu=s(Rt,"P",{});var DM=n(Bu);tE=o(DM,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),DM.forEach(t),Rt.forEach(t),aE=d(b),Ts=s(b,"DIV",{class:!0});var X2=n(Ts);m(Vo.$$.fragment,X2),sE=d(X2),Gu=s(X2,"P",{});var xM=n(Gu);nE=o(xM,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),xM.forEach(t),X2.forEach(t),rE=d(b),Fe=s(b,"DIV",{class:!0});var vr=n(Fe);m(Mo.$$.fragment,vr),oE=d(vr),Hu=s(vr,"P",{});var EM=n(Hu);iE=o(EM,`Pushes the dataset to the hub.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),EM.forEach(t),lE=d(vr),Wu=s(vr,"P",{});var kM=n(Wu);dE=o(kM,"Example:"),kM.forEach(t),cE=d(vr),m(Uo.$$.fragment,vr),vr.forEach(t),pE=d(b),Ns=s(b,"DIV",{class:!0});var Z2=n(Ns);m(Ro.$$.fragment,Z2),mE=d(Z2),ua=s(Z2,"P",{});var _h=n(ua);hE=o(_h,"Saves a dataset to a dataset directory, or in a filesystem using either "),up=s(_h,"A",{href:!0});var IM=n(up);fE=o(IM,"S3FileSystem"),IM.forEach(t),uE=o(_h,` or
any implementation of `),Ku=s(_h,"CODE",{});var TM=n(Ku);gE=o(TM,"fsspec.spec.AbstractFileSystem"),TM.forEach(t),_E=o(_h,"."),_h.forEach(t),Z2.forEach(t),vE=d(b),Ps=s(b,"DIV",{class:!0});var Q2=n(Ps);m(Bo.$$.fragment,Q2),bE=d(Q2),et=s(Q2,"P",{});var br=n(et);yE=o(br,"Loads a dataset that was previously saved using "),Yu=s(br,"CODE",{});var NM=n(Yu);$E=o(NM,"save_to_disk"),NM.forEach(t),wE=o(br,` from a dataset directory, or from a
filesystem using either `),gp=s(br,"A",{href:!0});var PM=n(gp);DE=o(PM,"S3FileSystem"),PM.forEach(t),xE=o(br,` or any implementation of
`),Ju=s(br,"CODE",{});var FM=n(Ju);EE=o(FM,"fsspec.spec.AbstractFileSystem"),FM.forEach(t),kE=o(br,"."),br.forEach(t),Q2.forEach(t),IE=d(b),Fs=s(b,"DIV",{class:!0});var e$=n(Fs);m(Go.$$.fragment,e$),TE=d(e$),Xu=s(e$,"P",{});var LM=n(Xu);NE=o(LM,"Create and cache a new Dataset by flattening the indices mapping."),LM.forEach(t),e$.forEach(t),PE=d(b),Ls=s(b,"DIV",{class:!0});var t$=n(Ls);m(Ho.$$.fragment,t$),FE=d(t$),Zu=s(t$,"P",{});var AM=n(Zu);LE=o(AM,"Exports the dataset to csv"),AM.forEach(t),t$.forEach(t),AE=d(b),As=s(b,"DIV",{class:!0});var a$=n(As);m(Wo.$$.fragment,a$),OE=d(a$),Ko=s(a$,"P",{});var s$=n(Ko);SE=o(s$,"Returns the dataset as a "),Qu=s(s$,"CODE",{});var OM=n(Qu);jE=o(OM,"pandas.DataFrame"),OM.forEach(t),CE=o(s$,". Can also return a generator for large datasets."),s$.forEach(t),a$.forEach(t),qE=d(b),Os=s(b,"DIV",{class:!0});var n$=n(Os);m(Yo.$$.fragment,n$),zE=d(n$),eg=s(n$,"P",{});var SM=n(eg);VE=o(SM,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),SM.forEach(t),n$.forEach(t),ME=d(b),Ss=s(b,"DIV",{class:!0});var r$=n(Ss);m(Jo.$$.fragment,r$),UE=d(r$),tg=s(r$,"P",{});var jM=n(tg);RE=o(jM,"Export the dataset to JSON Lines or JSON."),jM.forEach(t),r$.forEach(t),BE=d(b),js=s(b,"DIV",{class:!0});var o$=n(js);m(Xo.$$.fragment,o$),GE=d(o$),ag=s(o$,"P",{});var CM=n(ag);HE=o(CM,"Exports the dataset to parquet"),CM.forEach(t),o$.forEach(t),WE=d(b),oe=s(b,"DIV",{class:!0});var Bt=n(oe);m(Zo.$$.fragment,Bt),KE=d(Bt),ga=s(Bt,"P",{});var vh=n(ga);YE=o(vh,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),sg=s(vh,"CODE",{});var qM=n(sg);JE=o(qM,"device"),qM.forEach(t),XE=o(vh," if you want to run it on GPU ("),ng=s(vh,"CODE",{});var zM=n(ng);ZE=o(zM,"device"),zM.forEach(t),QE=o(vh,` must be the GPU index).
You can find more information about Faiss here:`),vh.forEach(t),ek=d(Bt),rg=s(Bt,"UL",{});var VM=n(rg);_p=s(VM,"LI",{});var sz=n(_p);tk=o(sz,"For "),Qo=s(sz,"A",{href:!0,rel:!0});var MM=n(Qo);ak=o(MM,"string factory"),MM.forEach(t),sz.forEach(t),VM.forEach(t),sk=d(Bt),og=s(Bt,"P",{});var UM=n(og);nk=o(UM,"Example:"),UM.forEach(t),rk=d(Bt),m(ei.$$.fragment,Bt),Bt.forEach(t),ok=d(b),It=s(b,"DIV",{class:!0});var bh=n(It);m(ti.$$.fragment,bh),ik=d(bh),tt=s(bh,"P",{});var yr=n(tt);lk=o(yr,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),ig=s(yr,"EM",{});var RM=n(ig);dk=o(RM,"external_arrays"),RM.forEach(t),ck=o(yr,`.
You can specify `),lg=s(yr,"EM",{});var BM=n(lg);pk=o(BM,"device"),BM.forEach(t),mk=o(yr," if you want to run it on GPU ("),dg=s(yr,"EM",{});var GM=n(dg);hk=o(GM,"device"),GM.forEach(t),fk=o(yr,` must be the GPU index).
You can find more information about Faiss here:`),yr.forEach(t),uk=d(bh),cg=s(bh,"UL",{});var HM=n(cg);vp=s(HM,"LI",{});var nz=n(vp);gk=o(nz,"For "),ai=s(nz,"A",{href:!0,rel:!0});var WM=n(ai);_k=o(WM,"string factory"),WM.forEach(t),nz.forEach(t),HM.forEach(t),bh.forEach(t),vk=d(b),Cs=s(b,"DIV",{class:!0});var i$=n(Cs);m(si.$$.fragment,i$),bk=d(i$),pg=s(i$,"P",{});var KM=n(pg);yk=o(KM,"Save a FaissIndex on disk."),KM.forEach(t),i$.forEach(t),$k=d(b),Tt=s(b,"DIV",{class:!0});var yh=n(Tt);m(ni.$$.fragment,yh),wk=d(yh),mg=s(yh,"P",{});var YM=n(mg);Dk=o(YM,"Load a FaissIndex from disk."),YM.forEach(t),xk=d(yh),ri=s(yh,"P",{});var l$=n(ri);Ek=o(l$,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),hg=s(l$,"EM",{});var JM=n(hg);kk=o(JM,".get_index(index_name).faiss_index"),JM.forEach(t),Ik=o(l$," to make it fit your needs."),l$.forEach(t),yh.forEach(t),Tk=d(b),K=s(b,"DIV",{class:!0});var Be=n(K);m(oi.$$.fragment,Be),Nk=d(Be),fg=s(Be,"P",{});var XM=n(fg);Pk=o(XM,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),XM.forEach(t),Fk=d(Be),ug=s(Be,"P",{});var ZM=n(ug);Lk=o(ZM,"Default config is:"),ZM.forEach(t),Ak=d(Be),m(ii.$$.fragment,Be),Ok=d(Be),gg=s(Be,"P",{});var QM=n(gg);Sk=o(QM,"Example:"),QM.forEach(t),jk=d(Be),m(li.$$.fragment,Be),Be.forEach(t),Ck=d(b),Le=s(b,"DIV",{class:!0});var $r=n(Le);m(di.$$.fragment,$r),qk=d($r),_g=s($r,"P",{});var eU=n(_g);zk=o(eU,"Load an existing text index using ElasticSearch for fast retrieval."),eU.forEach(t),Vk=d($r),vg=s($r,"P",{});var tU=n(vg);Mk=o(tU,"Default config is:"),tU.forEach(t),Uk=d($r),m(ci.$$.fragment,$r),$r.forEach(t),Rk=d(b),qs=s(b,"DIV",{class:!0});var d$=n(qs);m(pi.$$.fragment,d$),Bk=d(d$),bg=s(d$,"P",{});var aU=n(bg);Gk=o(aU,"List the colindex_nameumns/identifiers of all the attached indexes."),aU.forEach(t),d$.forEach(t),Hk=d(b),zs=s(b,"DIV",{class:!0});var c$=n(zs);m(mi.$$.fragment,c$),Wk=d(c$),yg=s(c$,"P",{});var sU=n(yg);Kk=o(sU,"List the index_name/identifiers of all the attached indexes."),sU.forEach(t),c$.forEach(t),Yk=d(b),Vs=s(b,"DIV",{class:!0});var p$=n(Vs);m(hi.$$.fragment,p$),Jk=d(p$),$g=s(p$,"P",{});var nU=n($g);Xk=o(nU,"Drop the index with the specified column."),nU.forEach(t),p$.forEach(t),Zk=d(b),Ms=s(b,"DIV",{class:!0});var m$=n(Ms);m(fi.$$.fragment,m$),Qk=d(m$),wg=s(m$,"P",{});var rU=n(wg);eI=o(rU,"Find the nearest examples indices in the dataset to the query."),rU.forEach(t),m$.forEach(t),tI=d(b),Us=s(b,"DIV",{class:!0});var h$=n(Us);m(ui.$$.fragment,h$),aI=d(h$),Dg=s(h$,"P",{});var oU=n(Dg);sI=o(oU,"Find the nearest examples indices in the dataset to the query."),oU.forEach(t),h$.forEach(t),nI=d(b),Rs=s(b,"DIV",{class:!0});var f$=n(Rs);m(gi.$$.fragment,f$),rI=d(f$),xg=s(f$,"P",{});var iU=n(xg);oI=o(iU,"Find the nearest examples in the dataset to the query."),iU.forEach(t),f$.forEach(t),iI=d(b),Bs=s(b,"DIV",{class:!0});var u$=n(Bs);m(_i.$$.fragment,u$),lI=d(u$),Eg=s(u$,"P",{});var lU=n(Eg);dI=o(lU,"Find the nearest examples in the dataset to the query."),lU.forEach(t),u$.forEach(t),cI=d(b),Gs=s(b,"DIV",{class:!0});var g$=n(Gs);m(vi.$$.fragment,g$),pI=d(g$),bp=s(g$,"P",{});var rz=n(bp);yp=s(rz,"A",{href:!0});var dU=n(yp);mI=o(dU,"datasets.DatasetInfo"),dU.forEach(t),hI=o(rz," object containing all the metadata in the dataset."),rz.forEach(t),g$.forEach(t),fI=d(b),Hs=s(b,"DIV",{class:!0});var _$=n(Hs);m(bi.$$.fragment,_$),uI=d(_$),$p=s(_$,"P",{});var oz=n($p);wp=s(oz,"A",{href:!0});var cU=n(wp);gI=o(cU,"datasets.NamedSplit"),cU.forEach(t),_I=o(oz," object corresponding to a named dataset split."),oz.forEach(t),_$.forEach(t),vI=d(b),Dp=s(b,"DIV",{class:!0});var pU=n(Dp);m(yi.$$.fragment,pU),pU.forEach(t),bI=d(b),xp=s(b,"DIV",{class:!0});var mU=n(xp);m($i.$$.fragment,mU),mU.forEach(t),yI=d(b),Ep=s(b,"DIV",{class:!0});var hU=n(Ep);m(wi.$$.fragment,hU),hU.forEach(t),$I=d(b),kp=s(b,"DIV",{class:!0});var fU=n(kp);m(Di.$$.fragment,fU),fU.forEach(t),wI=d(b),Ip=s(b,"DIV",{class:!0});var uU=n(Ip);m(xi.$$.fragment,uU),uU.forEach(t),DI=d(b),Tp=s(b,"DIV",{class:!0});var gU=n(Tp);m(Ei.$$.fragment,gU),gU.forEach(t),xI=d(b),Np=s(b,"DIV",{class:!0});var _U=n(Np);m(ki.$$.fragment,_U),_U.forEach(t),EI=d(b),Pp=s(b,"DIV",{class:!0});var vU=n(Pp);m(Ii.$$.fragment,vU),vU.forEach(t),kI=d(b),Fp=s(b,"DIV",{class:!0});var bU=n(Fp);m(Ti.$$.fragment,bU),bU.forEach(t),II=d(b),Lp=s(b,"DIV",{class:!0});var yU=n(Lp);m(Ni.$$.fragment,yU),yU.forEach(t),TI=d(b),Ap=s(b,"DIV",{class:!0});var $U=n(Ap);m(Pi.$$.fragment,$U),$U.forEach(t),NI=d(b),Op=s(b,"DIV",{class:!0});var wU=n(Op);m(Fi.$$.fragment,wU),wU.forEach(t),PI=d(b),Sp=s(b,"DIV",{class:!0});var DU=n(Sp);m(Li.$$.fragment,DU),DU.forEach(t),FI=d(b),Ws=s(b,"DIV",{class:!0});var v$=n(Ws);m(Ai.$$.fragment,v$),LI=d(v$),kg=s(v$,"P",{});var xU=n(kg);AI=o(xU,"Create Dataset from CSV file(s)."),xU.forEach(t),v$.forEach(t),OI=d(b),Ks=s(b,"DIV",{class:!0});var b$=n(Ks);m(Oi.$$.fragment,b$),SI=d(b$),Ig=s(b$,"P",{});var EU=n(Ig);jI=o(EU,"Create Dataset from JSON or JSON Lines file(s)."),EU.forEach(t),b$.forEach(t),CI=d(b),Ys=s(b,"DIV",{class:!0});var y$=n(Ys);m(Si.$$.fragment,y$),qI=d(y$),Tg=s(y$,"P",{});var kU=n(Tg);zI=o(kU,"Create Dataset from Parquet file(s)."),kU.forEach(t),y$.forEach(t),VI=d(b),Js=s(b,"DIV",{class:!0});var $$=n(Js);m(ji.$$.fragment,$$),MI=d($$),Ng=s($$,"P",{});var IU=n(Ng);UI=o(IU,"Create Dataset from text file(s)."),IU.forEach(t),$$.forEach(t),RI=d(b),Nt=s(b,"DIV",{class:!0});var $h=n(Nt);m(Ci.$$.fragment,$h),BI=d($h),_a=s($h,"P",{});var wh=n(_a);GI=o(wh,"Prepare a dataset for the given task by casting the dataset\u2019s "),jp=s(wh,"A",{href:!0});var TU=n(jp);HI=o(TU,"Features"),TU.forEach(t),WI=o(wh," to standardized column names and types as detailed in "),Cp=s(wh,"A",{href:!0});var NU=n(Cp);KI=o(NU,"datasets.tasks"),NU.forEach(t),YI=o(wh,"."),wh.forEach(t),JI=d($h),va=s($h,"P",{});var Dh=n(va);XI=o(Dh,"Casts "),Pg=s(Dh,"CODE",{});var PU=n(Pg);ZI=o(PU,"datasets.DatasetInfo.features"),PU.forEach(t),QI=o(Dh," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Fg=s(Dh,"CODE",{});var FU=n(Fg);e5=o(FU,"datasets.DatasetInfo.task_templates"),FU.forEach(t),t5=o(Dh," after casting."),Dh.forEach(t),$h.forEach(t),a5=d(b),Ae=s(b,"DIV",{class:!0});var wr=n(Ae);m(qi.$$.fragment,wr),s5=d(wr),zi=s(wr,"P",{});var w$=n(zi);n5=o(w$,"Align the dataset\u2019s label ID and label name mapping to match an input "),Lg=s(w$,"CODE",{});var LU=n(Lg);r5=o(LU,"label2id"),LU.forEach(t),o5=o(w$,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),w$.forEach(t),i5=d(wr),Ag=s(wr,"P",{});var AU=n(Ag);l5=o(AU,"Example:"),AU.forEach(t),d5=d(wr),m(Vi.$$.fragment,wr),wr.forEach(t),b.forEach(t),Ny=d(i),ba=s(i,"DIV",{class:!0});var D$=n(ba);m(Mi.$$.fragment,D$),c5=d(D$),ya=s(D$,"P",{});var xh=n(ya);p5=o(xh,"Converts a list of "),qp=s(xh,"A",{href:!0});var OU=n(qp);m5=o(OU,"Dataset"),OU.forEach(t),h5=o(xh," with the same schema into a single "),zp=s(xh,"A",{href:!0});var SU=n(zp);f5=o(SU,"Dataset"),SU.forEach(t),u5=o(xh,"."),xh.forEach(t),D$.forEach(t),Py=d(i),C=s(i,"DIV",{class:!0});var ce=n(C);m(Ui.$$.fragment,ce),g5=d(ce),Og=s(ce,"P",{});var jU=n(Og);_5=o(jU,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),jU.forEach(t),v5=d(ce),$a=s(ce,"P",{});var Eh=n($a);b5=o(Eh,"You can use this function on a list of "),Vp=s(Eh,"A",{href:!0});var CU=n(Vp);y5=o(CU,"Dataset"),CU.forEach(t),$5=o(Eh," objects, or on a list of "),Mp=s(Eh,"A",{href:!0});var qU=n(Mp);w5=o(qU,"IterableDataset"),qU.forEach(t),D5=o(Eh," objects."),Eh.forEach(t),x5=d(ce),_e=s(ce,"P",{});var Gt=n(_e);E5=o(Gt,"If "),Sg=s(Gt,"CODE",{});var zU=n(Sg);k5=o(zU,"probabilities"),zU.forEach(t),I5=o(Gt," is "),jg=s(Gt,"CODE",{});var VU=n(jg);T5=o(VU,"None"),VU.forEach(t),N5=o(Gt,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),Cg=s(Gt,"CODE",{});var MU=n(Cg);P5=o(MU,"probabilities"),MU.forEach(t),F5=o(Gt," is not "),qg=s(Gt,"CODE",{});var UU=n(qg);L5=o(UU,"None"),UU.forEach(t),A5=o(Gt,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),Gt.forEach(t),O5=d(ce),zg=s(ce,"P",{});var RU=n(zg);S5=o(RU,"The resulting dataset ends when one of the source datasets runs out of examples."),RU.forEach(t),j5=d(ce),Vg=s(ce,"P",{});var BU=n(Vg);C5=o(BU,"Example:"),BU.forEach(t),q5=d(ce),m(Ri.$$.fragment,ce),ce.forEach(t),Fy=d(i),te=s(i,"DIV",{class:!0});var Ht=n(te);m(Bi.$$.fragment,Ht),z5=d(Ht),Mg=s(Ht,"P",{});var GU=n(Mg);V5=o(GU,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),GU.forEach(t),M5=d(Ht),Ug=s(Ht,"P",{});var HU=n(Ug);U5=o(HU,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),HU.forEach(t),R5=d(Ht),Rg=s(Ht,"P",{});var WU=n(Rg);B5=o(WU,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),WU.forEach(t),G5=d(Ht),ve=s(Ht,"UL",{});var Wt=n(ve);Bg=s(Wt,"LI",{});var KU=n(Bg);H5=o(KU,"cache files are always recreated"),KU.forEach(t),W5=d(Wt),Gg=s(Wt,"LI",{});var YU=n(Gg);K5=o(YU,"cache files are written to a temporary directory that is deleted when session closes"),YU.forEach(t),Y5=d(Wt),Hg=s(Wt,"LI",{});var JU=n(Hg);J5=o(JU,"cache files are named using a random hash instead of the dataset fingerprint"),JU.forEach(t),X5=d(Wt),Gi=s(Wt,"LI",{});var x$=n(Gi);Z5=o(x$,"use "),Up=s(x$,"A",{href:!0});var XU=n(Up);Q5=o(XU,"datasets.Dataset.save_to_disk()"),XU.forEach(t),e6=o(x$," to save a transformed dataset or it will be deleted when session closes"),x$.forEach(t),t6=d(Wt),at=s(Wt,"LI",{});var Dr=n(at);a6=o(Dr,"caching doesn\u2019t affect "),Rp=s(Dr,"A",{href:!0});var ZU=n(Rp);s6=o(ZU,"datasets.load_dataset()"),ZU.forEach(t),n6=o(Dr,`. If you want to regenerate a dataset from scratch you should use
the `),Wg=s(Dr,"CODE",{});var QU=n(Wg);r6=o(QU,"download_mode"),QU.forEach(t),o6=o(Dr," parameter in "),Bp=s(Dr,"A",{href:!0});var eR=n(Bp);i6=o(eR,"datasets.load_dataset()"),eR.forEach(t),l6=o(Dr,"."),Dr.forEach(t),Wt.forEach(t),Ht.forEach(t),Ly=d(i),ae=s(i,"DIV",{class:!0});var Kt=n(ae);m(Hi.$$.fragment,Kt),d6=d(Kt),Kg=s(Kt,"P",{});var tR=n(Kg);c6=o(tR,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),tR.forEach(t),p6=d(Kt),Yg=s(Kt,"P",{});var aR=n(Yg);m6=o(aR,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),aR.forEach(t),h6=d(Kt),Jg=s(Kt,"P",{});var sR=n(Jg);f6=o(sR,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),sR.forEach(t),u6=d(Kt),be=s(Kt,"UL",{});var Yt=n(be);Xg=s(Yt,"LI",{});var nR=n(Xg);g6=o(nR,"cache files are always recreated"),nR.forEach(t),_6=d(Yt),Zg=s(Yt,"LI",{});var rR=n(Zg);v6=o(rR,"cache files are written to a temporary directory that is deleted when session closes"),rR.forEach(t),b6=d(Yt),Qg=s(Yt,"LI",{});var oR=n(Qg);y6=o(oR,"cache files are named using a random hash instead of the dataset fingerprint"),oR.forEach(t),$6=d(Yt),Wi=s(Yt,"LI",{});var E$=n(Wi);w6=o(E$,"use "),Gp=s(E$,"A",{href:!0});var iR=n(Gp);D6=o(iR,"datasets.Dataset.save_to_disk()"),iR.forEach(t),x6=o(E$," to save a transformed dataset or it will be deleted when session closes"),E$.forEach(t),E6=d(Yt),st=s(Yt,"LI",{});var xr=n(st);k6=o(xr,"caching doesn\u2019t affect "),Hp=s(xr,"A",{href:!0});var lR=n(Hp);I6=o(lR,"datasets.load_dataset()"),lR.forEach(t),T6=o(xr,`. If you want to regenerate a dataset from scratch you should use
the `),e_=s(xr,"CODE",{});var dR=n(e_);N6=o(dR,"download_mode"),dR.forEach(t),P6=o(xr," parameter in "),Wp=s(xr,"A",{href:!0});var cR=n(Wp);F6=o(cR,"datasets.load_dataset()"),cR.forEach(t),L6=o(xr,"."),xr.forEach(t),Yt.forEach(t),Kt.forEach(t),Ay=d(i),wa=s(i,"DIV",{class:!0});var k$=n(wa);m(Ki.$$.fragment,k$),A6=d(k$),t_=s(k$,"P",{});var pR=n(t_);O6=o(pR,"Enable/disable tqdm progress bars."),pR.forEach(t),k$.forEach(t),Oy=d(i),Da=s(i,"DIV",{class:!0});var I$=n(Da);m(Yi.$$.fragment,I$),S6=d(I$),a_=s(I$,"P",{});var mR=n(a_);j6=o(mR,"Return a boolean indicating whether tqdm progress bars are enabled."),mR.forEach(t),I$.forEach(t),Sy=d(i),xa=s(i,"H2",{class:!0});var T$=n(xa);Xs=s(T$,"A",{id:!0,class:!0,href:!0});var hR=n(Xs);s_=s(hR,"SPAN",{});var fR=n(s_);m(Ji.$$.fragment,fR),fR.forEach(t),hR.forEach(t),C6=d(T$),n_=s(T$,"SPAN",{});var uR=n(n_);q6=o(uR,"DatasetDict"),uR.forEach(t),T$.forEach(t),jy=d(i),Zs=s(i,"P",{});var N$=n(Zs);z6=o(N$,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),r_=s(N$,"CODE",{});var gR=n(r_);V6=o(gR,"datasets.Dataset"),gR.forEach(t),M6=o(N$,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),N$.forEach(t),Cy=d(i),w=s(i,"DIV",{class:!0});var D=n(w);m(Xi.$$.fragment,D),U6=d(D),o_=s(D,"P",{});var _R=n(o_);R6=o(_R,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),_R.forEach(t),B6=d(D),Qs=s(D,"DIV",{class:!0});var P$=n(Qs);m(Zi.$$.fragment,P$),G6=d(P$),i_=s(P$,"P",{});var vR=n(i_);H6=o(vR,"The Apache Arrow tables backing each split."),vR.forEach(t),P$.forEach(t),W6=d(D),en=s(D,"DIV",{class:!0});var F$=n(en);m(Qi.$$.fragment,F$),K6=d(F$),l_=s(F$,"P",{});var bR=n(l_);Y6=o(bR,"The cache files containing the Apache Arrow table backing each split."),bR.forEach(t),F$.forEach(t),J6=d(D),tn=s(D,"DIV",{class:!0});var L$=n(tn);m(el.$$.fragment,L$),X6=d(L$),d_=s(L$,"P",{});var yR=n(d_);Z6=o(yR,"Number of columns in each split of the dataset."),yR.forEach(t),L$.forEach(t),Q6=d(D),an=s(D,"DIV",{class:!0});var A$=n(an);m(tl.$$.fragment,A$),e8=d(A$),al=s(A$,"P",{});var O$=n(al);t8=o(O$,"Number of rows in each split of the dataset (same as "),sn=s(O$,"A",{href:!0});var S$=n(sn);a8=o(S$,"datasets.Dataset."),c_=s(S$,"STRONG",{});var $R=n(c_);s8=o($R,"len"),$R.forEach(t),n8=o(S$,"()"),S$.forEach(t),r8=o(O$,")."),O$.forEach(t),A$.forEach(t),o8=d(D),nn=s(D,"DIV",{class:!0});var j$=n(nn);m(sl.$$.fragment,j$),i8=d(j$),p_=s(j$,"P",{});var wR=n(p_);l8=o(wR,"Names of the columns in each split of the dataset."),wR.forEach(t),j$.forEach(t),d8=d(D),rn=s(D,"DIV",{class:!0});var C$=n(rn);m(nl.$$.fragment,C$),c8=d(C$),m_=s(C$,"P",{});var DR=n(m_);p8=o(DR,"Shape of each split of the dataset (number of columns, number of rows)."),DR.forEach(t),C$.forEach(t),m8=d(D),Pt=s(D,"DIV",{class:!0});var kh=n(Pt);m(rl.$$.fragment,kh),h8=d(kh),h_=s(kh,"P",{});var xR=n(h_);f8=o(xR,"Return a list of the unique elements in a column for each split."),xR.forEach(t),u8=d(kh),f_=s(kh,"P",{});var ER=n(f_);g8=o(ER,"This is implemented in the low-level backend and as such, very fast."),ER.forEach(t),kh.forEach(t),_8=d(D),on=s(D,"DIV",{class:!0});var q$=n(on);m(ol.$$.fragment,q$),v8=d(q$),u_=s(q$,"P",{});var kR=n(u_);b8=o(kR,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be carefull when running this command that no other process is currently using other cache files.`),kR.forEach(t),q$.forEach(t),y8=d(D),ln=s(D,"DIV",{class:!0});var z$=n(ln);m(il.$$.fragment,z$),$8=d(z$),g_=s(z$,"P",{});var IR=n(g_);w8=o(IR,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),IR.forEach(t),z$.forEach(t),D8=d(D),dn=s(D,"DIV",{class:!0});var V$=n(dn);m(ll.$$.fragment,V$),x8=d(V$),__=s(V$,"P",{});var TR=n(__);E8=o(TR,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),TR.forEach(t),V$.forEach(t),k8=d(D),Ft=s(D,"DIV",{class:!0});var Ih=n(Ft);m(dl.$$.fragment,Ih),I8=d(Ih),v_=s(Ih,"P",{});var NR=n(v_);T8=o(NR,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),NR.forEach(t),N8=d(Ih),b_=s(Ih,"P",{});var PR=n(b_);P8=o(PR,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),PR.forEach(t),Ih.forEach(t),F8=d(D),Oe=s(D,"DIV",{class:!0});var Er=n(Oe);m(cl.$$.fragment,Er),L8=d(Er),y_=s(Er,"P",{});var FR=n(y_);A8=o(FR,"Create a new Dataset where the rows are shuffled."),FR.forEach(t),O8=d(Er),$_=s(Er,"P",{});var LR=n($_);S8=o(LR,"The transformation is applied to all the datasets of the dataset dictionary."),LR.forEach(t),j8=d(Er),w_=s(Er,"P",{});var AR=n(w_);C8=o(AR,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),AR.forEach(t),Er.forEach(t),q8=d(D),Se=s(D,"DIV",{class:!0});var kr=n(Se);m(pl.$$.fragment,kr),z8=d(kr),ml=s(kr,"P",{});var M$=n(ml);V8=o(M$,"Set "),D_=s(M$,"CODE",{});var OR=n(D_);M8=o(OR,"__getitem__"),OR.forEach(t),U8=o(M$,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),M$.forEach(t),R8=d(kr),ye=s(kr,"P",{});var Jt=n(ye);B8=o(Jt,"It is possible to call "),x_=s(Jt,"CODE",{});var SR=n(x_);G8=o(SR,"map"),SR.forEach(t),H8=o(Jt," after calling "),E_=s(Jt,"CODE",{});var jR=n(E_);W8=o(jR,"set_format"),jR.forEach(t),K8=o(Jt,". Since "),k_=s(Jt,"CODE",{});var CR=n(k_);Y8=o(CR,"map"),CR.forEach(t),J8=o(Jt,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),I_=s(Jt,"CODE",{});var qR=n(I_);X8=o(qR,"map"),qR.forEach(t),Z8=o(Jt," on a dataset to add a new column, then this column will be formatted:"),Jt.forEach(t),Q8=d(kr),T_=s(kr,"P",{});var zR=n(T_);e9=o(zR,"new formatted columns = (all columns - previously unformatted columns)"),zR.forEach(t),kr.forEach(t),t9=d(D),Lt=s(D,"DIV",{class:!0});var Th=n(Lt);m(hl.$$.fragment,Th),a9=d(Th),fl=s(Th,"P",{});var U$=n(fl);s9=o(U$,"Reset "),N_=s(U$,"CODE",{});var VR=n(N_);n9=o(VR,"__getitem__"),VR.forEach(t),r9=o(U$,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),U$.forEach(t),o9=d(Th),Kp=s(Th,"P",{});var iz=n(Kp);i9=o(iz,"Same as "),P_=s(iz,"CODE",{});var MR=n(P_);l9=o(MR,"self.set_format()"),MR.forEach(t),iz.forEach(t),Th.forEach(t),d9=d(D),cn=s(D,"DIV",{class:!0});var R$=n(cn);m(ul.$$.fragment,R$),c9=d(R$),Ea=s(R$,"P",{});var Nh=n(Ea);p9=o(Nh,"To be used in a "),F_=s(Nh,"EM",{});var UR=n(F_);m9=o(UR,"with"),UR.forEach(t),h9=o(Nh," statement. Set "),L_=s(Nh,"CODE",{});var RR=n(L_);f9=o(RR,"__getitem__"),RR.forEach(t),u9=o(Nh,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),Nh.forEach(t),R$.forEach(t),g9=d(D),je=s(D,"DIV",{class:!0});var Ir=n(je);m(gl.$$.fragment,Ir),_9=d(Ir),nt=s(Ir,"P",{});var Tr=n(nt);v9=o(Tr,"Set "),A_=s(Tr,"CODE",{});var BR=n(A_);b9=o(BR,"__getitem__"),BR.forEach(t),y9=o(Tr,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),O_=s(Tr,"CODE",{});var GR=n(O_);$9=o(GR,"type"),GR.forEach(t),w9=o(Tr," (for example \u201Cnumpy\u201D) is used to format batches when using "),S_=s(Tr,"CODE",{});var HR=n(S_);D9=o(HR,"__getitem__"),HR.forEach(t),x9=o(Tr,`.
The format is set for every dataset in the dataset dictionary`),Tr.forEach(t),E9=d(Ir),_l=s(Ir,"P",{});var B$=n(_l);k9=o(B$,"It\u2019s also possible to use custom transforms for formatting using "),Yp=s(B$,"A",{href:!0});var WR=n(Yp);I9=o(WR,"datasets.Dataset.with_transform()"),WR.forEach(t),T9=o(B$,"."),B$.forEach(t),N9=d(Ir),ka=s(Ir,"P",{});var Ph=n(ka);P9=o(Ph,"Contrary to "),Jp=s(Ph,"A",{href:!0});var KR=n(Jp);F9=o(KR,"datasets.DatasetDict.set_format()"),KR.forEach(t),L9=o(Ph,", "),j_=s(Ph,"CODE",{});var YR=n(j_);A9=o(YR,"with_format"),YR.forEach(t),O9=o(Ph," returns a new DatasetDict object with new Dataset objects."),Ph.forEach(t),Ir.forEach(t),S9=d(D),Ce=s(D,"DIV",{class:!0});var Nr=n(Ce);m(vl.$$.fragment,Nr),j9=d(Nr),Ia=s(Nr,"P",{});var Fh=n(Ia);C9=o(Fh,"Set "),C_=s(Fh,"CODE",{});var JR=n(C_);q9=o(JR,"__getitem__"),JR.forEach(t),z9=o(Fh," return format using this transform. The transform is applied on-the-fly on batches when "),q_=s(Fh,"CODE",{});var XR=n(q_);V9=o(XR,"__getitem__"),XR.forEach(t),M9=o(Fh,` is called.
The transform is set for every dataset in the dataset dictionary`),Fh.forEach(t),U9=d(Nr),Ta=s(Nr,"P",{});var Lh=n(Ta);R9=o(Lh,"As "),Xp=s(Lh,"A",{href:!0});var ZR=n(Xp);B9=o(ZR,"datasets.Dataset.set_format()"),ZR.forEach(t),G9=o(Lh,", this can be reset using "),Zp=s(Lh,"A",{href:!0});var QR=n(Zp);H9=o(QR,"datasets.Dataset.reset_format()"),QR.forEach(t),W9=o(Lh,"."),Lh.forEach(t),K9=d(Nr),Na=s(Nr,"P",{});var Ah=n(Na);Y9=o(Ah,"Contrary to "),z_=s(Ah,"CODE",{});var eB=n(z_);J9=o(eB,"datasets.DatasetDict.set_transform()"),eB.forEach(t),X9=d(Ah),V_=s(Ah,"CODE",{});var tB=n(V_);Z9=o(tB,"with_transform"),tB.forEach(t),Q9=o(Ah," returns a new DatasetDict object with new Dataset objects."),Ah.forEach(t),Nr.forEach(t),eT=d(D),pn=s(D,"DIV",{class:!0});var G$=n(pn);m(bl.$$.fragment,G$),tT=d(G$),M_=s(G$,"P",{});var aB=n(M_);aT=o(aB,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),aB.forEach(t),G$.forEach(t),sT=d(D),At=s(D,"DIV",{class:!0});var Oh=n(At);m(yl.$$.fragment,Oh),nT=d(Oh),U_=s(Oh,"P",{});var sB=n(U_);rT=o(sB,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),sB.forEach(t),oT=d(Oh),rt=s(Oh,"P",{});var Pr=n(rt);iT=o(Pr,"You can also remove a column using "),Qp=s(Pr,"A",{href:!0});var nB=n(Qp);lT=o(nB,"Dataset.map()"),nB.forEach(t),dT=o(Pr," with "),R_=s(Pr,"EM",{});var rB=n(R_);cT=o(rB,"feature"),rB.forEach(t),pT=o(Pr," but "),B_=s(Pr,"CODE",{});var oB=n(B_);mT=o(oB,"cast_"),oB.forEach(t),hT=o(Pr,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Pr.forEach(t),Oh.forEach(t),fT=d(D),mn=s(D,"DIV",{class:!0});var H$=n(mn);m($l.$$.fragment,H$),uT=d(H$),G_=s(H$,"P",{});var iB=n(G_);gT=o(iB,"Cast column to feature for decoding."),iB.forEach(t),H$.forEach(t),_T=d(D),qe=s(D,"DIV",{class:!0});var Fr=n(qe);m(wl.$$.fragment,Fr),vT=d(Fr),H_=s(Fr,"P",{});var lB=n(H_);bT=o(lB,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),lB.forEach(t),yT=d(Fr),W_=s(Fr,"P",{});var dB=n(W_);$T=o(dB,"The transformation is applied to all the splits of the dataset dictionary."),dB.forEach(t),wT=d(Fr),Pa=s(Fr,"P",{});var Sh=n(Pa);DT=o(Sh,"You can also remove a column using "),em=s(Sh,"A",{href:!0});var cB=n(em);xT=o(cB,"Dataset.map()"),cB.forEach(t),ET=o(Sh," with "),K_=s(Sh,"EM",{});var pB=n(K_);kT=o(pB,"remove_columns"),pB.forEach(t),IT=o(Sh,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Sh.forEach(t),Fr.forEach(t),TT=d(D),ze=s(D,"DIV",{class:!0});var Lr=n(ze);m(Dl.$$.fragment,Lr),NT=d(Lr),Y_=s(Lr,"P",{});var mB=n(Y_);PT=o(mB,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),mB.forEach(t),FT=d(Lr),Fa=s(Lr,"P",{});var jh=n(Fa);LT=o(jh,"You can also rename a column using "),tm=s(jh,"A",{href:!0});var hB=n(tm);AT=o(hB,"Dataset.map()"),hB.forEach(t),OT=o(jh," with "),J_=s(jh,"EM",{});var fB=n(J_);ST=o(fB,"remove_columns"),fB.forEach(t),jT=o(jh," but the present method:"),jh.forEach(t),CT=d(Lr),xl=s(Lr,"UL",{});var W$=n(xl);X_=s(W$,"LI",{});var uB=n(X_);qT=o(uB,"takes care of moving the original features under the new column name."),uB.forEach(t),zT=d(W$),Z_=s(W$,"LI",{});var gB=n(Z_);VT=o(gB,"doesn\u2019t copy the data to a new dataset and is thus much faster."),gB.forEach(t),W$.forEach(t),Lr.forEach(t),MT=d(D),hn=s(D,"DIV",{class:!0});var K$=n(hn);m(El.$$.fragment,K$),UT=d(K$),kl=s(K$,"P",{});var Y$=n(kl);RT=o(Y$,"Casts the given column as :obj:"),Q_=s(Y$,"CODE",{});var _B=n(Q_);BT=o(_B,"datasets.features.ClassLabel"),_B.forEach(t),GT=o(Y$," and updates the tables."),Y$.forEach(t),K$.forEach(t),HT=d(D),ie=s(D,"DIV",{class:!0});var Xt=n(ie);m(Il.$$.fragment,Xt),WT=d(Xt),La=s(Xt,"P",{});var Ch=n(La);KT=o(Ch,"Pushes the "),ev=s(Ch,"CODE",{});var vB=n(ev);YT=o(vB,"DatasetDict"),vB.forEach(t),JT=o(Ch,` to the hub.
The `),tv=s(Ch,"CODE",{});var bB=n(tv);XT=o(bB,"DatasetDict"),bB.forEach(t),ZT=o(Ch," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),Ch.forEach(t),QT=d(Xt),av=s(Xt,"P",{});var yB=n(av);eN=o(yB,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),yB.forEach(t),tN=d(Xt),sv=s(Xt,"P",{});var $B=n(sv);aN=o($B,"Example:"),$B.forEach(t),sN=d(Xt),m(Tl.$$.fragment,Xt),Xt.forEach(t),nN=d(D),fn=s(D,"DIV",{class:!0});var J$=n(fn);m(Nl.$$.fragment,J$),rN=d(J$),Aa=s(J$,"P",{});var qh=n(Aa);oN=o(qh,"Saves a dataset dict to a filesystem using either "),am=s(qh,"A",{href:!0});var wB=n(am);iN=o(wB,"S3FileSystem"),wB.forEach(t),lN=o(qh,` or
`),nv=s(qh,"CODE",{});var DB=n(nv);dN=o(DB,"fsspec.spec.AbstractFileSystem"),DB.forEach(t),cN=o(qh,"."),qh.forEach(t),J$.forEach(t),pN=d(D),un=s(D,"DIV",{class:!0});var X$=n(un);m(Pl.$$.fragment,X$),mN=d(X$),ot=s(X$,"P",{});var Ar=n(ot);hN=o(Ar,"Load a dataset that was previously saved using "),rv=s(Ar,"CODE",{});var xB=n(rv);fN=o(xB,"save_to_disk"),xB.forEach(t),uN=o(Ar,` from a filesystem using either
`),sm=s(Ar,"A",{href:!0});var EB=n(sm);gN=o(EB,"S3FileSystem"),EB.forEach(t),_N=o(Ar," or "),ov=s(Ar,"CODE",{});var kB=n(ov);vN=o(kB,"fsspec.spec.AbstractFileSystem"),kB.forEach(t),bN=o(Ar,"."),Ar.forEach(t),X$.forEach(t),yN=d(D),gn=s(D,"DIV",{class:!0});var Z$=n(gn);m(Fl.$$.fragment,Z$),$N=d(Z$),iv=s(Z$,"P",{});var IB=n(iv);wN=o(IB,"Create DatasetDict from CSV file(s)."),IB.forEach(t),Z$.forEach(t),DN=d(D),_n=s(D,"DIV",{class:!0});var Q$=n(_n);m(Ll.$$.fragment,Q$),xN=d(Q$),lv=s(Q$,"P",{});var TB=n(lv);EN=o(TB,"Create DatasetDict from JSON Lines file(s)."),TB.forEach(t),Q$.forEach(t),kN=d(D),vn=s(D,"DIV",{class:!0});var ew=n(vn);m(Al.$$.fragment,ew),IN=d(ew),dv=s(ew,"P",{});var NB=n(dv);TN=o(NB,"Create DatasetDict from Parquet file(s)."),NB.forEach(t),ew.forEach(t),NN=d(D),bn=s(D,"DIV",{class:!0});var tw=n(bn);m(Ol.$$.fragment,tw),PN=d(tw),cv=s(tw,"P",{});var PB=n(cv);FN=o(PB,"Create DatasetDict from text file(s)."),PB.forEach(t),tw.forEach(t),LN=d(D),Ot=s(D,"DIV",{class:!0});var zh=n(Ot);m(Sl.$$.fragment,zh),AN=d(zh),Oa=s(zh,"P",{});var Vh=n(Oa);ON=o(Vh,"Prepare a dataset for the given task by casting the dataset\u2019s "),nm=s(Vh,"A",{href:!0});var FB=n(nm);SN=o(FB,"Features"),FB.forEach(t),jN=o(Vh," to standardized column names and types as detailed in "),rm=s(Vh,"A",{href:!0});var LB=n(rm);CN=o(LB,"datasets.tasks"),LB.forEach(t),qN=o(Vh,"."),Vh.forEach(t),zN=d(zh),Sa=s(zh,"P",{});var Mh=n(Sa);VN=o(Mh,"Casts "),pv=s(Mh,"CODE",{});var AB=n(pv);MN=o(AB,"datasets.DatasetInfo.features"),AB.forEach(t),UN=o(Mh," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),mv=s(Mh,"CODE",{});var OB=n(mv);RN=o(OB,"datasets.DatasetInfo.task_templates"),OB.forEach(t),BN=o(Mh," after casting."),Mh.forEach(t),zh.forEach(t),D.forEach(t),qy=d(i),om=s(i,"A",{id:!0}),n(om).forEach(t),zy=d(i),ja=s(i,"H2",{class:!0});var aw=n(ja);yn=s(aw,"A",{id:!0,class:!0,href:!0});var SB=n(yn);hv=s(SB,"SPAN",{});var jB=n(hv);m(jl.$$.fragment,jB),jB.forEach(t),SB.forEach(t),GN=d(aw),fv=s(aw,"SPAN",{});var CB=n(fv);HN=o(CB,"IterableDataset"),CB.forEach(t),aw.forEach(t),Vy=d(i),$n=s(i,"P",{});var sw=n($n);WN=o(sw,"The base class "),im=s(sw,"A",{href:!0});var qB=n(im);KN=o(qB,"datasets.IterableDataset"),qB.forEach(t),YN=o(sw," implements an iterable Dataset backed by python generators."),sw.forEach(t),My=d(i),x=s(i,"DIV",{class:!0});var E=n(x);m(Cl.$$.fragment,E),JN=d(E),uv=s(E,"P",{});var zB=n(uv);XN=o(zB,"A Dataset backed by an iterable."),zB.forEach(t),ZN=d(E),wn=s(E,"DIV",{class:!0});var nw=n(wn);m(ql.$$.fragment,nw),QN=d(nw),gv=s(nw,"P",{});var VB=n(gv);eP=o(VB,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),VB.forEach(t),nw.forEach(t),tP=d(E),Dn=s(E,"DIV",{class:!0});var rw=n(Dn);m(zl.$$.fragment,rw),aP=d(rw),_v=s(rw,"P",{});var MB=n(_v);sP=o(MB,"Cast column to feature for decoding."),MB.forEach(t),rw.forEach(t),nP=d(E),lm=s(E,"DIV",{class:!0});var UB=n(lm);m(Vl.$$.fragment,UB),UB.forEach(t),rP=d(E),Ve=s(E,"DIV",{class:!0});var Or=n(Ve);m(Ml.$$.fragment,Or),oP=d(Or),vv=s(Or,"P",{});var RB=n(vv);iP=o(RB,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),RB.forEach(t),lP=d(Or),Ul=s(Or,"P",{});var ow=n(Ul);dP=o(ow,"You can specify whether the function should be batched or not with the "),bv=s(ow,"CODE",{});var BB=n(bv);cP=o(BB,"batched"),BB.forEach(t),pP=o(ow," parameter:"),ow.forEach(t),mP=d(Or),Ca=s(Or,"UL",{});var Uh=n(Ca);yv=s(Uh,"LI",{});var GB=n(yv);hP=o(GB,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),GB.forEach(t),fP=d(Uh),$v=s(Uh,"LI",{});var HB=n($v);uP=o(HB,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),HB.forEach(t),gP=d(Uh),se=s(Uh,"LI",{});var Ge=n(se);_P=o(Ge,"If batched is True and batch_size is "),wv=s(Ge,"CODE",{});var WB=n(wv);vP=o(WB,"n"),WB.forEach(t),bP=o(Ge," > 1, then the function takes a batch of "),Dv=s(Ge,"CODE",{});var KB=n(Dv);yP=o(KB,"n"),KB.forEach(t),$P=o(Ge," examples as input and can return a batch with "),xv=s(Ge,"CODE",{});var YB=n(xv);wP=o(YB,"n"),YB.forEach(t),DP=o(Ge,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Ev=s(Ge,"CODE",{});var JB=n(Ev);xP=o(JB,"n"),JB.forEach(t),EP=o(Ge,` examples.
A batch is a dictionary, e.g. a batch of `),kv=s(Ge,"CODE",{});var XB=n(kv);kP=o(XB,"n"),XB.forEach(t),IP=o(Ge," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Ge.forEach(t),Uh.forEach(t),Or.forEach(t),TP=d(E),le=s(E,"DIV",{class:!0});var Zt=n(le);m(Rl.$$.fragment,Zt),NP=d(Zt),Iv=s(Zt,"P",{});var ZB=n(Iv);PP=o(ZB,"Randomly shuffles the elements of this dataset."),ZB.forEach(t),FP=d(Zt),Tv=s(Zt,"P",{});var QB=n(Tv);LP=o(QB,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),QB.forEach(t),AP=d(Zt),Bl=s(Zt,"P",{});var iw=n(Bl);OP=o(iw,"For instance, if your dataset contains 10,000 elements but "),Nv=s(iw,"CODE",{});var eG=n(Nv);SP=o(eG,"buffer_size"),eG.forEach(t),jP=o(iw,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),iw.forEach(t),CP=d(Zt),qa=s(Zt,"P",{});var Rh=n(qa);qP=o(Rh,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),dm=s(Rh,"A",{href:!0});var tG=n(dm);zP=o(tG,"datasets.IterableDataset.skip()"),tG.forEach(t),VP=o(Rh," or "),cm=s(Rh,"A",{href:!0});var aG=n(cm);MP=o(aG,"datasets.IterableDataset.take()"),aG.forEach(t),UP=o(Rh,`
then the order of the shards is kept unchanged.`),Rh.forEach(t),Zt.forEach(t),RP=d(E),xn=s(E,"DIV",{class:!0});var lw=n(xn);m(Gl.$$.fragment,lw),BP=d(lw),Hl=s(lw,"P",{});var dw=n(Hl);GP=o(dw,"Create a new IterableDataset that skips the first "),Pv=s(dw,"CODE",{});var sG=n(Pv);HP=o(sG,"n"),sG.forEach(t),WP=o(dw," elements."),dw.forEach(t),lw.forEach(t),KP=d(E),En=s(E,"DIV",{class:!0});var cw=n(En);m(Wl.$$.fragment,cw),YP=d(cw),Kl=s(cw,"P",{});var pw=n(Kl);JP=o(pw,"Create a new IterableDataset with only the first "),Fv=s(pw,"CODE",{});var nG=n(Fv);XP=o(nG,"n"),nG.forEach(t),ZP=o(pw," elements."),pw.forEach(t),cw.forEach(t),QP=d(E),kn=s(E,"DIV",{class:!0});var mw=n(kn);m(Yl.$$.fragment,mw),eF=d(mw),pm=s(mw,"P",{});var lz=n(pm);mm=s(lz,"A",{href:!0});var rG=n(mm);tF=o(rG,"datasets.DatasetInfo"),rG.forEach(t),aF=o(lz," object containing all the metadata in the dataset."),lz.forEach(t),mw.forEach(t),sF=d(E),In=s(E,"DIV",{class:!0});var hw=n(In);m(Jl.$$.fragment,hw),nF=d(hw),hm=s(hw,"P",{});var dz=n(hm);fm=s(dz,"A",{href:!0});var oG=n(fm);rF=o(oG,"datasets.NamedSplit"),oG.forEach(t),oF=o(dz," object corresponding to a named dataset split."),dz.forEach(t),hw.forEach(t),iF=d(E),um=s(E,"DIV",{class:!0});var iG=n(um);m(Xl.$$.fragment,iG),iG.forEach(t),lF=d(E),gm=s(E,"DIV",{class:!0});var lG=n(gm);m(Zl.$$.fragment,lG),lG.forEach(t),dF=d(E),_m=s(E,"DIV",{class:!0});var dG=n(_m);m(Ql.$$.fragment,dG),dG.forEach(t),cF=d(E),vm=s(E,"DIV",{class:!0});var cG=n(vm);m(ed.$$.fragment,cG),cG.forEach(t),pF=d(E),bm=s(E,"DIV",{class:!0});var pG=n(bm);m(td.$$.fragment,pG),pG.forEach(t),mF=d(E),ym=s(E,"DIV",{class:!0});var mG=n(ym);m(ad.$$.fragment,mG),mG.forEach(t),hF=d(E),$m=s(E,"DIV",{class:!0});var hG=n($m);m(sd.$$.fragment,hG),hG.forEach(t),fF=d(E),wm=s(E,"DIV",{class:!0});var fG=n(wm);m(nd.$$.fragment,fG),fG.forEach(t),uF=d(E),Dm=s(E,"DIV",{class:!0});var uG=n(Dm);m(rd.$$.fragment,uG),uG.forEach(t),gF=d(E),xm=s(E,"DIV",{class:!0});var gG=n(xm);m(od.$$.fragment,gG),gG.forEach(t),_F=d(E),Em=s(E,"DIV",{class:!0});var _G=n(Em);m(id.$$.fragment,_G),_G.forEach(t),vF=d(E),km=s(E,"DIV",{class:!0});var vG=n(km);m(ld.$$.fragment,vG),vG.forEach(t),bF=d(E),Im=s(E,"DIV",{class:!0});var bG=n(Im);m(dd.$$.fragment,bG),bG.forEach(t),E.forEach(t),Uy=d(i),za=s(i,"H2",{class:!0});var fw=n(za);Tn=s(fw,"A",{id:!0,class:!0,href:!0});var yG=n(Tn);Lv=s(yG,"SPAN",{});var $G=n(Lv);m(cd.$$.fragment,$G),$G.forEach(t),yG.forEach(t),yF=d(fw),Av=s(fw,"SPAN",{});var wG=n(Av);$F=o(wG,"IterableDatasetDict"),wG.forEach(t),fw.forEach(t),Ry=d(i),Nn=s(i,"P",{});var uw=n(Nn);wF=o(uw,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Ov=s(uw,"CODE",{});var DG=n(Ov);DF=o(DG,"datasets.IterableDataset"),DG.forEach(t),xF=o(uw," objects as values."),uw.forEach(t),By=d(i),pd=s(i,"DIV",{class:!0});var xG=n(pd);m(md.$$.fragment,xG),xG.forEach(t),Gy=d(i),Va=s(i,"H2",{class:!0});var gw=n(Va);Pn=s(gw,"A",{id:!0,class:!0,href:!0});var EG=n(Pn);Sv=s(EG,"SPAN",{});var kG=n(Sv);m(hd.$$.fragment,kG),kG.forEach(t),EG.forEach(t),EF=d(gw),jv=s(gw,"SPAN",{});var IG=n(jv);kF=o(IG,"Features"),IG.forEach(t),gw.forEach(t),Hy=d(i),T=s(i,"DIV",{class:!0});var N=n(T);m(fd.$$.fragment,N),IF=d(N),Cv=s(N,"P",{});var TG=n(Cv);TF=o(TG,"A special dictionary that defines the internal structure of a dataset."),TG.forEach(t),NF=d(N),ud=s(N,"P",{});var _w=n(ud);PF=o(_w,"Instantiated with a dictionary of type "),qv=s(_w,"CODE",{});var NG=n(qv);FF=o(NG,"dict[str, FieldType]"),NG.forEach(t),LF=o(_w,`, where keys are the desired column names,
and values are the type of that column.`),_w.forEach(t),AF=d(N),Tm=s(N,"P",{});var cz=n(Tm);zv=s(cz,"CODE",{});var PG=n(zv);OF=o(PG,"FieldType"),PG.forEach(t),SF=o(cz," can be one of the following:"),cz.forEach(t),jF=d(N),q=s(N,"UL",{});var X=n(q);Vv=s(X,"LI",{});var FG=n(Vv);St=s(FG,"P",{});var Zc=n(St);CF=o(Zc,"a "),Nm=s(Zc,"A",{href:!0});var LG=n(Nm);qF=o(LG,"datasets.Value"),LG.forEach(t),zF=o(Zc," feature specifies a single typed value, e.g. "),Mv=s(Zc,"CODE",{});var AG=n(Mv);VF=o(AG,"int64"),AG.forEach(t),MF=o(Zc," or "),Uv=s(Zc,"CODE",{});var OG=n(Uv);UF=o(OG,"string"),OG.forEach(t),Zc.forEach(t),FG.forEach(t),RF=d(X),Rv=s(X,"LI",{});var SG=n(Rv);gd=s(SG,"P",{});var vw=n(gd);BF=o(vw,"a "),Pm=s(vw,"A",{href:!0});var jG=n(Pm);GF=o(jG,"datasets.ClassLabel"),jG.forEach(t),HF=o(vw,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),vw.forEach(t),SG.forEach(t),WF=d(X),Bv=s(X,"LI",{});var CG=n(Bv);_d=s(CG,"P",{});var bw=n(_d);KF=o(bw,"a python "),Gv=s(bw,"CODE",{});var qG=n(Gv);YF=o(qG,"dict"),qG.forEach(t),JF=o(bw,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),bw.forEach(t),CG.forEach(t),XF=d(X),vd=s(X,"LI",{});var yw=n(vd);$e=s(yw,"P",{});var Qt=n($e);ZF=o(Qt,"a python "),Hv=s(Qt,"CODE",{});var zG=n(Hv);QF=o(zG,"list"),zG.forEach(t),eL=o(Qt," or a "),Fm=s(Qt,"A",{href:!0});var VG=n(Fm);tL=o(VG,"datasets.Sequence"),VG.forEach(t),aL=o(Qt,` specifies that the field contains a list of objects. The python
`),Wv=s(Qt,"CODE",{});var MG=n(Wv);sL=o(MG,"list"),MG.forEach(t),nL=o(Qt," or "),Lm=s(Qt,"A",{href:!0});var UG=n(Lm);rL=o(UG,"datasets.Sequence"),UG.forEach(t),oL=o(Qt,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),Qt.forEach(t),iL=d(yw),m(Fn.$$.fragment,yw),yw.forEach(t),lL=d(X),Kv=s(X,"LI",{});var RG=n(Kv);we=s(RG,"P",{});var ea=n(we);dL=o(ea,"a "),Am=s(ea,"A",{href:!0});var BG=n(Am);cL=o(BG,"Array2D"),BG.forEach(t),pL=o(ea,", "),Om=s(ea,"A",{href:!0});var GG=n(Om);mL=o(GG,"Array3D"),GG.forEach(t),hL=o(ea,", "),Sm=s(ea,"A",{href:!0});var HG=n(Sm);fL=o(HG,"Array4D"),HG.forEach(t),uL=o(ea," or "),jm=s(ea,"A",{href:!0});var WG=n(jm);gL=o(WG,"Array5D"),WG.forEach(t),_L=o(ea," feature for multidimensional arrays"),ea.forEach(t),RG.forEach(t),vL=d(X),Yv=s(X,"LI",{});var KG=n(Yv);bd=s(KG,"P",{});var $w=n(bd);bL=o($w,"an "),Cm=s($w,"A",{href:!0});var YG=n(Cm);yL=o(YG,"Audio"),YG.forEach(t),$L=o($w,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),$w.forEach(t),KG.forEach(t),wL=d(X),Jv=s(X,"LI",{});var JG=n(Jv);it=s(JG,"P",{});var Sr=n(it);DL=o(Sr,"an "),qm=s(Sr,"A",{href:!0});var XG=n(qm);xL=o(XG,"Image"),XG.forEach(t),EL=o(Sr," feature to store the absolute path to an image file, an "),Xv=s(Sr,"CODE",{});var ZG=n(Xv);kL=o(ZG,"np.ndarray"),ZG.forEach(t),IL=o(Sr," object, a "),Zv=s(Sr,"CODE",{});var QG=n(Zv);TL=o(QG,"PIL.Image.Image"),QG.forEach(t),NL=o(Sr,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),Sr.forEach(t),JG.forEach(t),PL=d(X),Qv=s(X,"LI",{});var eH=n(Qv);Ln=s(eH,"P",{});var xy=n(Ln);zm=s(xy,"A",{href:!0});var tH=n(zm);FL=o(tH,"datasets.Translation"),tH.forEach(t),LL=o(xy," and "),Vm=s(xy,"A",{href:!0});var aH=n(Vm);AL=o(aH,"datasets.TranslationVariableLanguages"),aH.forEach(t),OL=o(xy,", the two features specific to Machine Translation"),xy.forEach(t),eH.forEach(t),X.forEach(t),SL=d(N),An=s(N,"DIV",{class:!0});var ww=n(An);m(yd.$$.fragment,ww),jL=d(ww),e1=s(ww,"P",{});var sH=n(e1);CL=o(sH,"Make a deep copy of Features."),sH.forEach(t),ww.forEach(t),qL=d(N),On=s(N,"DIV",{class:!0});var Dw=n(On);m($d.$$.fragment,Dw),zL=d(Dw),t1=s(Dw,"P",{});var nH=n(t1);VL=o(nH,"Decode batch with custom feature decoding."),nH.forEach(t),Dw.forEach(t),ML=d(N),Sn=s(N,"DIV",{class:!0});var xw=n(Sn);m(wd.$$.fragment,xw),UL=d(xw),a1=s(xw,"P",{});var rH=n(a1);RL=o(rH,"Decode column with custom feature decoding."),rH.forEach(t),xw.forEach(t),BL=d(N),jn=s(N,"DIV",{class:!0});var Ew=n(jn);m(Dd.$$.fragment,Ew),GL=d(Ew),s1=s(Ew,"P",{});var oH=n(s1);HL=o(oH,"Decode example with custom feature decoding."),oH.forEach(t),Ew.forEach(t),WL=d(N),Cn=s(N,"DIV",{class:!0});var kw=n(Cn);m(xd.$$.fragment,kw),KL=d(kw),n1=s(kw,"P",{});var iH=n(n1);YL=o(iH,"Encode batch into a format for Arrow."),iH.forEach(t),kw.forEach(t),JL=d(N),qn=s(N,"DIV",{class:!0});var Iw=n(qn);m(Ed.$$.fragment,Iw),XL=d(Iw),r1=s(Iw,"P",{});var lH=n(r1);ZL=o(lH,"Encode example into a format for Arrow."),lH.forEach(t),Iw.forEach(t),QL=d(N),jt=s(N,"DIV",{class:!0});var Bh=n(jt);m(kd.$$.fragment,Bh),eA=d(Bh),o1=s(Bh,"P",{});var dH=n(o1);tA=o(dH,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),dH.forEach(t),aA=d(Bh),i1=s(Bh,"P",{});var cH=n(i1);sA=o(cH,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),cH.forEach(t),Bh.forEach(t),nA=d(N),zn=s(N,"DIV",{class:!0});var Tw=n(zn);m(Id.$$.fragment,Tw),rA=d(Tw),l1=s(Tw,"P",{});var pH=n(l1);oA=o(pH,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),pH.forEach(t),Tw.forEach(t),iA=d(N),Y=s(N,"DIV",{class:!0});var He=n(Y);m(Td.$$.fragment,He),lA=d(He),d1=s(He,"P",{});var mH=n(d1);dA=o(mH,"Construct Features from dict."),mH.forEach(t),cA=d(He),c1=s(He,"P",{});var hH=n(c1);pA=o(hH,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),hH.forEach(t),mA=d(He),lt=s(He,"P",{});var jr=n(lt);hA=o(jr,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),Mm=s(jr,"A",{href:!0});var fH=n(Mm);fA=o(fH,"DatasetInfo"),fH.forEach(t),uA=o(jr,` that was dumped to a JSON object. This acts as an analogue to
`),Um=s(jr,"A",{href:!0});var uH=n(Um);gA=o(uH,"Features.from_arrow_schema()"),uH.forEach(t),_A=o(jr,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),Rm=s(jr,"A",{href:!0});var gH=n(Rm);vA=o(gH,"Value"),gH.forEach(t),bA=o(jr," automatically performs."),jr.forEach(t),yA=d(He),p1=s(He,"P",{});var _H=n(p1);$A=o(_H,"Example:"),_H.forEach(t),wA=d(He),m(Nd.$$.fragment,He),He.forEach(t),DA=d(N),de=s(N,"DIV",{class:!0});var ta=n(de);m(Pd.$$.fragment,ta),xA=d(ta),m1=s(ta,"P",{});var vH=n(m1);EA=o(vH,"Reorder Features fields to match the field order of other Features."),vH.forEach(t),kA=d(ta),h1=s(ta,"P",{});var bH=n(h1);IA=o(bH,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),bH.forEach(t),TA=d(ta),f1=s(ta,"P",{});var yH=n(f1);NA=o(yH,"Example:"),yH.forEach(t),PA=d(ta),m(Fd.$$.fragment,ta),ta.forEach(t),N.forEach(t),Wy=d(i),Ma=s(i,"DIV",{class:!0});var Nw=n(Ma);m(Ld.$$.fragment,Nw),FA=d(Nw),u1=s(Nw,"P",{});var $H=n(u1);LA=o($H,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),$H.forEach(t),Nw.forEach(t),Ky=d(i),R=s(i,"DIV",{class:!0});var We=n(R);m(Ad.$$.fragment,We),AA=d(We),g1=s(We,"P",{});var wH=n(g1);OA=o(wH,"Feature type for integer class labels."),wH.forEach(t),SA=d(We),Od=s(We,"P",{});var Pw=n(Od);jA=o(Pw,"There are 3 ways to define a "),_1=s(Pw,"EM",{});var DH=n(_1);CA=o(DH,"ClassLabel"),DH.forEach(t),qA=o(Pw,", which correspond to the 3 arguments:"),Pw.forEach(t),zA=d(We),Ua=s(We,"UL",{});var Gh=n(Ua);Bm=s(Gh,"LI",{});var pz=n(Bm);v1=s(pz,"EM",{});var xH=n(v1);VA=o(xH,"num_classes"),xH.forEach(t),MA=o(pz,": Create 0 to (num_classes-1) labels."),pz.forEach(t),UA=d(Gh),Gm=s(Gh,"LI",{});var mz=n(Gm);b1=s(mz,"EM",{});var EH=n(b1);RA=o(EH,"names"),EH.forEach(t),BA=o(mz,": List of label strings."),mz.forEach(t),GA=d(Gh),Hm=s(Gh,"LI",{});var hz=n(Hm);y1=s(hz,"EM",{});var kH=n(y1);HA=o(kH,"names_file"),kH.forEach(t),WA=o(hz,": File containing the list of labels."),hz.forEach(t),Gh.forEach(t),KA=d(We),Vn=s(We,"DIV",{class:!0});var Fw=n(Vn);m(Sd.$$.fragment,Fw),YA=d(Fw),$1=s(Fw,"P",{});var IH=n($1);JA=o(IH,"Conversion integer => class name string."),IH.forEach(t),Fw.forEach(t),XA=d(We),Mn=s(We,"DIV",{class:!0});var Lw=n(Mn);m(jd.$$.fragment,Lw),ZA=d(Lw),w1=s(Lw,"P",{});var TH=n(w1);QA=o(TH,"Conversion class name string => integer."),TH.forEach(t),Lw.forEach(t),We.forEach(t),Yy=d(i),dt=s(i,"DIV",{class:!0});var Hh=n(dt);m(Cd.$$.fragment,Hh),eO=d(Hh),D1=s(Hh,"P",{});var NH=n(D1);tO=o(NH,"The Value dtypes are as follows:"),NH.forEach(t),aO=d(Hh),x1=s(Hh,"P",{});var PH=n(x1);sO=o(PH,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),PH.forEach(t),Hh.forEach(t),Jy=d(i),z=s(i,"DIV",{class:!0});var pe=n(z);m(qd.$$.fragment,pe),nO=d(pe),Wm=s(pe,"P",{});var fz=n(Wm);E1=s(fz,"EM",{});var FH=n(E1);rO=o(FH,"FeatureConnector"),FH.forEach(t),oO=o(fz,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),fz.forEach(t),iO=d(pe),k1=s(pe,"P",{});var LH=n(k1);lO=o(LH,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),LH.forEach(t),dO=d(pe),zd=s(pe,"P",{});var Aw=n(zd);cO=o(Aw,"Output: A dictionary mapping string language codes to translations as "),I1=s(Aw,"EM",{});var AH=n(I1);pO=o(AH,"Text"),AH.forEach(t),mO=o(Aw,`
features.`),Aw.forEach(t),hO=d(pe),T1=s(pe,"P",{});var OH=n(T1);fO=o(OH,"Example:"),OH.forEach(t),uO=d(pe),m(Vd.$$.fragment,pe),gO=d(pe),Un=s(pe,"DIV",{class:!0});var Ow=n(Un);m(Md.$$.fragment,Ow),_O=d(Ow),N1=s(Ow,"P",{});var SH=n(N1);vO=o(SH,"Flatten the Translation feature into a dictionary."),SH.forEach(t),Ow.forEach(t),pe.forEach(t),Xy=d(i),V=s(i,"DIV",{class:!0});var me=n(V);m(Ud.$$.fragment,me),bO=d(me),Km=s(me,"P",{});var uz=n(Km);P1=s(uz,"EM",{});var jH=n(P1);yO=o(jH,"FeatureConnector"),jH.forEach(t),$O=o(uz,` for translations with variable languages per example.
Here for compatiblity with tfds.`),uz.forEach(t),wO=d(me),F1=s(me,"P",{});var CH=n(F1);DO=o(CH,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),CH.forEach(t),xO=d(me),L1=s(me,"P",{});var qH=n(L1);EO=o(qH,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),qH.forEach(t),kO=d(me),A1=s(me,"P",{});var zH=n(A1);IO=o(zH,"Example:"),zH.forEach(t),TO=d(me),m(Rd.$$.fragment,me),NO=d(me),Rn=s(me,"DIV",{class:!0});var Sw=n(Rn);m(Bd.$$.fragment,Sw),PO=d(Sw),O1=s(Sw,"P",{});var VH=n(O1);FO=o(VH,"Flatten the TranslationVariableLanguages feature into a dictionary."),VH.forEach(t),Sw.forEach(t),me.forEach(t),Zy=d(i),Gd=s(i,"DIV",{class:!0});var MH=n(Gd);m(Hd.$$.fragment,MH),MH.forEach(t),Qy=d(i),Wd=s(i,"DIV",{class:!0});var UH=n(Wd);m(Kd.$$.fragment,UH),UH.forEach(t),e2=d(i),Yd=s(i,"DIV",{class:!0});var RH=n(Yd);m(Jd.$$.fragment,RH),RH.forEach(t),t2=d(i),Xd=s(i,"DIV",{class:!0});var BH=n(Xd);m(Zd.$$.fragment,BH),BH.forEach(t),a2=d(i),P=s(i,"DIV",{class:!0});var L=n(P);m(Qd.$$.fragment,L),LO=d(L),S1=s(L,"P",{});var GH=n(S1);AO=o(GH,"Audio Feature to extract audio data from an audio file."),GH.forEach(t),OO=d(L),j1=s(L,"P",{});var HH=n(j1);SO=o(HH,"Input: The Audio feature accepts as input:"),HH.forEach(t),jO=d(L),ec=s(L,"UL",{});var jw=n(ec);C1=s(jw,"LI",{});var WH=n(C1);tc=s(WH,"P",{});var Cw=n(tc);CO=o(Cw,"A "),q1=s(Cw,"CODE",{});var KH=n(q1);qO=o(KH,"str"),KH.forEach(t),zO=o(Cw,": Absolute path to the audio file (i.e. random access is allowed)."),Cw.forEach(t),WH.forEach(t),VO=d(jw),ac=s(jw,"LI",{});var qw=n(ac);sc=s(qw,"P",{});var zw=n(sc);MO=o(zw,"A "),z1=s(zw,"CODE",{});var YH=n(z1);UO=o(YH,"dict"),YH.forEach(t),RO=o(zw," with the keys:"),zw.forEach(t),BO=d(qw),nc=s(qw,"UL",{});var Vw=n(nc);V1=s(Vw,"LI",{});var JH=n(V1);GO=o(JH,"path: String with relative path of the audio file to the archive file."),JH.forEach(t),HO=d(Vw),M1=s(Vw,"LI",{});var XH=n(M1);WO=o(XH,"bytes: Bytes content of the audio file."),XH.forEach(t),Vw.forEach(t),qw.forEach(t),jw.forEach(t),KO=d(L),U1=s(L,"P",{});var ZH=n(U1);YO=o(ZH,"This is useful for archived files with sequential access."),ZH.forEach(t),JO=d(L),R1=s(L,"UL",{});var QH=n(R1);rc=s(QH,"LI",{});var Mw=n(rc);oc=s(Mw,"P",{});var Uw=n(oc);XO=o(Uw,"A "),B1=s(Uw,"CODE",{});var eW=n(B1);ZO=o(eW,"dict"),eW.forEach(t),QO=o(Uw," with the keys:"),Uw.forEach(t),eS=d(Mw),Ra=s(Mw,"UL",{});var Wh=n(Ra);G1=s(Wh,"LI",{});var tW=n(G1);tS=o(tW,"path: String with relative path of the audio file to the archive file."),tW.forEach(t),aS=d(Wh),H1=s(Wh,"LI",{});var aW=n(H1);sS=o(aW,"array: Array containing the audio sample"),aW.forEach(t),nS=d(Wh),W1=s(Wh,"LI",{});var sW=n(W1);rS=o(sW,"sampling_rate: Integer corresponding to the samping rate of the audio sample."),sW.forEach(t),Wh.forEach(t),Mw.forEach(t),QH.forEach(t),oS=d(L),K1=s(L,"P",{});var nW=n(K1);iS=o(nW,"This is useful for archived files with sequential access."),nW.forEach(t),lS=d(L),Ct=s(L,"DIV",{class:!0});var Kh=n(Ct);m(ic.$$.fragment,Kh),dS=d(Kh),Y1=s(Kh,"P",{});var rW=n(Y1);cS=o(rW,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),rW.forEach(t),pS=d(Kh),ct=s(Kh,"UL",{});var Cr=n(ct);J1=s(Cr,"LI",{});var oW=n(J1);mS=o(oW,"pa.string() - it must contain the \u201Cpath\u201D data"),oW.forEach(t),hS=d(Cr),X1=s(Cr,"LI",{});var iW=n(X1);fS=o(iW,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),iW.forEach(t),uS=d(Cr),Z1=s(Cr,"LI",{});var lW=n(Z1);gS=o(lW,"pa.struct({\u201Cpath\u201D: pa.string()})"),lW.forEach(t),_S=d(Cr),Q1=s(Cr,"LI",{});var dW=n(Q1);vS=o(dW,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),dW.forEach(t),Cr.forEach(t),Kh.forEach(t),bS=d(L),Bn=s(L,"DIV",{class:!0});var Rw=n(Bn);m(lc.$$.fragment,Rw),yS=d(Rw),eb=s(Rw,"P",{});var cW=n(eb);$S=o(cW,"Decode example audio file into audio data."),cW.forEach(t),Rw.forEach(t),wS=d(L),Gn=s(L,"DIV",{class:!0});var Bw=n(Gn);m(dc.$$.fragment,Bw),DS=d(Bw),tb=s(Bw,"P",{});var pW=n(tb);xS=o(pW,"Embed audio files into the Arrow array."),pW.forEach(t),Bw.forEach(t),ES=d(L),Hn=s(L,"DIV",{class:!0});var Gw=n(Hn);m(cc.$$.fragment,Gw),kS=d(Gw),ab=s(Gw,"P",{});var mW=n(ab);IS=o(mW,"Encode example into a format for Arrow."),mW.forEach(t),Gw.forEach(t),TS=d(L),Wn=s(L,"DIV",{class:!0});var Hw=n(Wn);m(pc.$$.fragment,Hw),NS=d(Hw),sb=s(Hw,"P",{});var hW=n(sb);PS=o(hW,"If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),hW.forEach(t),Hw.forEach(t),L.forEach(t),s2=d(i),F=s(i,"DIV",{class:!0});var O=n(F);m(mc.$$.fragment,O),FS=d(O),nb=s(O,"P",{});var fW=n(nb);LS=o(fW,"Image feature to read image data from an image file."),fW.forEach(t),AS=d(O),rb=s(O,"P",{});var uW=n(rb);OS=o(uW,"Input: The Image feature accepts as input:"),uW.forEach(t),SS=d(O),hc=s(O,"UL",{});var Ww=n(hc);ob=s(Ww,"LI",{});var gW=n(ob);fc=s(gW,"P",{});var Kw=n(fc);jS=o(Kw,"A "),ib=s(Kw,"CODE",{});var _W=n(ib);CS=o(_W,"str"),_W.forEach(t),qS=o(Kw,": Absolute path to the image file (i.e. random access is allowed)."),Kw.forEach(t),gW.forEach(t),zS=d(Ww),uc=s(Ww,"LI",{});var Yw=n(uc);gc=s(Yw,"P",{});var Jw=n(gc);VS=o(Jw,"A "),lb=s(Jw,"CODE",{});var vW=n(lb);MS=o(vW,"dict"),vW.forEach(t),US=o(Jw," with the keys:"),Jw.forEach(t),RS=d(Yw),_c=s(Yw,"UL",{});var Xw=n(_c);db=s(Xw,"LI",{});var bW=n(db);BS=o(bW,"path: String with relative path of the image file to the archive file."),bW.forEach(t),GS=d(Xw),cb=s(Xw,"LI",{});var yW=n(cb);HS=o(yW,"bytes: Bytes of the image file."),yW.forEach(t),Xw.forEach(t),Yw.forEach(t),Ww.forEach(t),WS=d(O),pb=s(O,"P",{});var $W=n(pb);KS=o($W,"This is useful for archived files with sequential access."),$W.forEach(t),YS=d(O),vc=s(O,"UL",{});var Zw=n(vc);bc=s(Zw,"LI",{});var Qw=n(bc);JS=o(Qw,"An "),mb=s(Qw,"CODE",{});var wW=n(mb);XS=o(wW,"np.ndarray"),wW.forEach(t),ZS=o(Qw,": NumPy array representing an image."),Qw.forEach(t),QS=d(Zw),yc=s(Zw,"LI",{});var eD=n(yc);ej=o(eD,"A "),hb=s(eD,"CODE",{});var DW=n(hb);tj=o(DW,"PIL.Image.Image"),DW.forEach(t),aj=o(eD,": PIL image object."),eD.forEach(t),Zw.forEach(t),sj=d(O),qt=s(O,"DIV",{class:!0});var Yh=n(qt);m($c.$$.fragment,Yh),nj=d(Yh),fb=s(Yh,"P",{});var xW=n(fb);rj=o(xW,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),xW.forEach(t),oj=d(Yh),De=s(Yh,"UL",{});var aa=n(De);ub=s(aa,"LI",{});var EW=n(ub);ij=o(EW,"pa.string() - it must contain the \u201Cpath\u201D data"),EW.forEach(t),lj=d(aa),gb=s(aa,"LI",{});var kW=n(gb);dj=o(kW,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),kW.forEach(t),cj=d(aa),_b=s(aa,"LI",{});var IW=n(_b);pj=o(IW,"pa.struct({\u201Cpath\u201D: pa.string()})"),IW.forEach(t),mj=d(aa),vb=s(aa,"LI",{});var TW=n(vb);hj=o(TW,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),TW.forEach(t),fj=d(aa),bb=s(aa,"LI",{});var NW=n(bb);uj=o(NW,"pa.list(*) - it must contain the image array data"),NW.forEach(t),aa.forEach(t),Yh.forEach(t),gj=d(O),Kn=s(O,"DIV",{class:!0});var tD=n(Kn);m(wc.$$.fragment,tD),_j=d(tD),yb=s(tD,"P",{});var PW=n(yb);vj=o(PW,"Decode example image file into image data."),PW.forEach(t),tD.forEach(t),bj=d(O),Yn=s(O,"DIV",{class:!0});var aD=n(Yn);m(Dc.$$.fragment,aD),yj=d(aD),$b=s(aD,"P",{});var FW=n($b);$j=o(FW,"Embed image files into the Arrow array."),FW.forEach(t),aD.forEach(t),wj=d(O),Jn=s(O,"DIV",{class:!0});var sD=n(Jn);m(xc.$$.fragment,sD),Dj=d(sD),wb=s(sD,"P",{});var LW=n(wb);xj=o(LW,"Encode example into a format for Arrow."),LW.forEach(t),sD.forEach(t),Ej=d(O),Xn=s(O,"DIV",{class:!0});var nD=n(Xn);m(Ec.$$.fragment,nD),kj=d(nD),Db=s(nD,"P",{});var AW=n(Db);Ij=o(AW,"If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),AW.forEach(t),nD.forEach(t),O.forEach(t),n2=d(i),Ba=s(i,"H2",{class:!0});var rD=n(Ba);Zn=s(rD,"A",{id:!0,class:!0,href:!0});var OW=n(Zn);xb=s(OW,"SPAN",{});var SW=n(xb);m(kc.$$.fragment,SW),SW.forEach(t),OW.forEach(t),Tj=d(rD),Eb=s(rD,"SPAN",{});var jW=n(Eb);Nj=o(jW,"MetricInfo"),jW.forEach(t),rD.forEach(t),r2=d(i),B=s(i,"DIV",{class:!0});var Ke=n(B);m(Ic.$$.fragment,Ke),Pj=d(Ke),kb=s(Ke,"P",{});var CW=n(kb);Fj=o(CW,"Information about a metric."),CW.forEach(t),Lj=d(Ke),Ym=s(Ke,"P",{});var gz=n(Ym);Ib=s(gz,"CODE",{});var qW=n(Ib);Aj=o(qW,"MetricInfo"),qW.forEach(t),Oj=o(gz,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),gz.forEach(t),Sj=d(Ke),Tb=s(Ke,"P",{});var zW=n(Tb);jj=o(zW,"Note: Not all fields are known on construction and may be updated later."),zW.forEach(t),Cj=d(Ke),Qn=s(Ke,"DIV",{class:!0});var oD=n(Qn);m(Tc.$$.fragment,oD),qj=d(oD),Nc=s(oD,"P",{});var iD=n(Nc);zj=o(iD,"Create MetricInfo from the JSON file in "),Nb=s(iD,"CODE",{});var VW=n(Nb);Vj=o(VW,"metric_info_dir"),VW.forEach(t),Mj=o(iD,"."),iD.forEach(t),oD.forEach(t),Uj=d(Ke),er=s(Ke,"DIV",{class:!0});var lD=n(er);m(Pc.$$.fragment,lD),Rj=d(lD),Ga=s(lD,"P",{});var Jh=n(Ga);Bj=o(Jh,"Write "),Pb=s(Jh,"CODE",{});var MW=n(Pb);Gj=o(MW,"MetricInfo"),MW.forEach(t),Hj=o(Jh," as JSON to "),Fb=s(Jh,"CODE",{});var UW=n(Fb);Wj=o(UW,"metric_info_dir"),UW.forEach(t),Kj=o(Jh,`.
Also save the license separately in LICENCE.`),Jh.forEach(t),lD.forEach(t),Ke.forEach(t),o2=d(i),Ha=s(i,"H2",{class:!0});var dD=n(Ha);tr=s(dD,"A",{id:!0,class:!0,href:!0});var RW=n(tr);Lb=s(RW,"SPAN",{});var BW=n(Lb);m(Fc.$$.fragment,BW),BW.forEach(t),RW.forEach(t),Yj=d(dD),Ab=s(dD,"SPAN",{});var GW=n(Ab);Jj=o(GW,"Metric"),GW.forEach(t),dD.forEach(t),i2=d(i),zt=s(i,"P",{});var Xh=n(zt);Xj=o(Xh,"The base class "),Ob=s(Xh,"CODE",{});var HW=n(Ob);Zj=o(HW,"Metric"),HW.forEach(t),Qj=o(Xh," implements a Metric backed by one or several "),Jm=s(Xh,"A",{href:!0});var WW=n(Jm);eC=o(WW,"datasets.Dataset"),WW.forEach(t),tC=o(Xh,"."),Xh.forEach(t),l2=d(i),G=s(i,"DIV",{class:!0});var Ye=n(G);m(Lc.$$.fragment,Ye),aC=d(Ye),Sb=s(Ye,"P",{});var KW=n(Sb);sC=o(KW,"A Metric is the base class and common API for all metrics."),KW.forEach(t),nC=d(Ye),ar=s(Ye,"DIV",{class:!0});var cD=n(ar);m(Ac.$$.fragment,cD),rC=d(cD),jb=s(cD,"P",{});var YW=n(jb);oC=o(YW,"Add one prediction and reference for the metric\u2019s stack."),YW.forEach(t),cD.forEach(t),iC=d(Ye),sr=s(Ye,"DIV",{class:!0});var pD=n(sr);m(Oc.$$.fragment,pD),lC=d(pD),Cb=s(pD,"P",{});var JW=n(Cb);dC=o(JW,"Add a batch of predictions and references for the metric\u2019s stack."),JW.forEach(t),pD.forEach(t),cC=d(Ye),Vt=s(Ye,"DIV",{class:!0});var Zh=n(Vt);m(Sc.$$.fragment,Zh),pC=d(Zh),qb=s(Zh,"P",{});var XW=n(qb);mC=o(XW,"Compute the metrics."),XW.forEach(t),hC=d(Zh),zb=s(Zh,"P",{});var ZW=n(zb);fC=o(ZW,"Usage of positional arguments is not allowed to prevent mistakes."),ZW.forEach(t),Zh.forEach(t),uC=d(Ye),nr=s(Ye,"DIV",{class:!0});var mD=n(nr);m(jc.$$.fragment,mD),gC=d(mD),Vb=s(mD,"P",{});var QW=n(Vb);_C=o(QW,"Downloads and prepares dataset for reading."),QW.forEach(t),mD.forEach(t),Ye.forEach(t),d2=d(i),Wa=s(i,"H2",{class:!0});var hD=n(Wa);rr=s(hD,"A",{id:!0,class:!0,href:!0});var eK=n(rr);Mb=s(eK,"SPAN",{});var tK=n(Mb);m(Cc.$$.fragment,tK),tK.forEach(t),eK.forEach(t),vC=d(hD),Ub=s(hD,"SPAN",{});var aK=n(Ub);bC=o(aK,"Filesystems"),aK.forEach(t),hD.forEach(t),c2=d(i),k=s(i,"DIV",{class:!0});var I=n(k);m(qc.$$.fragment,I),yC=d(I),Rb=s(I,"P",{});var sK=n(Rb);$C=o(sK,"Access S3 as if it were a file system."),sK.forEach(t),wC=d(I),Bb=s(I,"P",{});var nK=n(Bb);DC=o(nK,`This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3
storage.`),nK.forEach(t),xC=d(I),pt=s(I,"P",{});var qr=n(pt);EC=o(qr,"Provide credentials either explicitly ("),Gb=s(qr,"CODE",{});var rK=n(Gb);kC=o(rK,"key="),rK.forEach(t),IC=o(qr,", "),Hb=s(qr,"CODE",{});var oK=n(Hb);TC=o(oK,"secret="),oK.forEach(t),NC=o(qr,`) or depend
on boto\u2019s credential methods. See botocore documentation for more
information. If no credentials are available, use `),Wb=s(qr,"CODE",{});var iK=n(Wb);PC=o(iK,"anon=True"),iK.forEach(t),FC=o(qr,"."),qr.forEach(t),LC=d(I),Kb=s(I,"P",{});var lK=n(Kb);AC=o(lK,"The following parameters are passed on to fsspec:"),lK.forEach(t),OC=d(I),Yb=s(I,"P",{});var dK=n(Yb);SC=o(dK,`skip_instance_cache: to control reuse of instances
use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings`),dK.forEach(t),jC=d(I),Jb=s(I,"P",{});var cK=n(Jb);CC=o(cK,"."),cK.forEach(t),qC=d(I),Me=s(I,"P",{});var as=n(Me);Xb=s(as,"CODE",{});var pK=n(Xb);zC=o(pK,"datasets.filesystems.S3FileSystem"),pK.forEach(t),VC=o(as," is a subclass of s3fs.S3FileSystem]("),zc=s(as,"A",{href:!0,rel:!0});var mK=n(zc);MC=o(mK,"https://s3fs.readthedocs.io/en/latest/api.html"),mK.forEach(t),UC=o(as,`), which is a known
implementation of `),Zb=s(as,"CODE",{});var hK=n(Zb);RC=o(hK,"fsspec"),hK.forEach(t),BC=o(as,". Filesystem Spec "),Vc=s(as,"A",{href:!0,rel:!0});var fK=n(Vc);GC=o(fK,"FSSPEC"),fK.forEach(t),HC=o(as,` is a project to
unify various projects and classes to work with remote filesystems
and file-system-like abstractions using a standard pythonic interface.`),as.forEach(t),WC=d(I),Qb=s(I,"P",{});var uK=n(Qb);KC=o(uK,"Examples:"),uK.forEach(t),YC=d(I),ey=s(I,"P",{});var gK=n(ey);JC=o(gK,"Listing files from public s3 bucket."),gK.forEach(t),XC=d(I),m(Mc.$$.fragment,I),ZC=d(I),Ka=s(I,"P",{});var Qh=n(Ka);QC=o(Qh,"Listing files from private s3 bucket using "),ty=s(Qh,"CODE",{});var _K=n(ty);eq=o(_K,"aws_access_key_id"),_K.forEach(t),tq=o(Qh," and "),ay=s(Qh,"CODE",{});var vK=n(ay);aq=o(vK,"aws_secret_access_key"),vK.forEach(t),sq=o(Qh,"."),Qh.forEach(t),nq=d(I),m(Uc.$$.fragment,I),rq=d(I),mt=s(I,"P",{});var zr=n(mt);oq=o(zr,"Using "),sy=s(zr,"CODE",{});var bK=n(sy);iq=o(bK,"S3Filesystem"),bK.forEach(t),lq=o(zr," with "),ny=s(zr,"CODE",{});var yK=n(ny);dq=o(yK,"botocore.session.Session"),yK.forEach(t),cq=o(zr," and custom "),ry=s(zr,"CODE",{});var $K=n(ry);pq=o($K,"aws_profile"),$K.forEach(t),mq=o(zr,"."),zr.forEach(t),hq=d(I),m(Rc.$$.fragment,I),fq=d(I),Ya=s(I,"P",{});var ef=n(Ya);uq=o(ef,"Loading dataset from s3 using "),oy=s(ef,"CODE",{});var wK=n(oy);gq=o(wK,"S3Filesystem"),wK.forEach(t),_q=o(ef," and "),iy=s(ef,"CODE",{});var DK=n(iy);vq=o(DK,"load_from_disk()"),DK.forEach(t),bq=o(ef,"."),ef.forEach(t),yq=d(I),m(Bc.$$.fragment,I),$q=d(I),ly=s(I,"P",{});var xK=n(ly);wq=o(xK,"Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>."),xK.forEach(t),Dq=d(I),m(Gc.$$.fragment,I),xq=d(I),or=s(I,"H2",{class:!0});var fD=n(or);ir=s(fD,"A",{id:!0,class:!0,href:!0});var EK=n(ir);dy=s(EK,"SPAN",{});var kK=n(dy);m(Hc.$$.fragment,kK),kK.forEach(t),EK.forEach(t),Eq=d(fD),cy=s(fD,"SPAN",{});var IK=n(cy);kq=o(IK,"Parameters"),IK.forEach(t),fD.forEach(t),Iq=d(I),M=s(I,"P",{});var Z=n(M);Tq=o(Z,`anon : bool (False)
Whether to use anonymous connection (public buckets only). If False,
uses the key/secret given, or boto\u2019s credential resolver (client_kwargs,
environment, variables, config files, EC2 IAM server, in that order)
key : string (None)
If not anonymous, use this access key ID, if specified
secret : string (None)
If not anonymous, use this secret access key, if specified
token : string (None)
If not anonymous, use this security token, if specified
use_ssl : bool (True)
Whether to use SSL in connections to S3; may be faster without, but
insecure. If `),py=s(Z,"CODE",{});var TK=n(py);Nq=o(TK,"use_ssl"),TK.forEach(t),Pq=o(Z," is also set in "),my=s(Z,"CODE",{});var NK=n(my);Fq=o(NK,"client_kwargs"),NK.forEach(t),Lq=o(Z,`,
the value set in `),hy=s(Z,"CODE",{});var PK=n(hy);Aq=o(PK,"client_kwargs"),PK.forEach(t),Oq=o(Z,` will take priority.
s3_additional_kwargs : dict of parameters that are used when calling s3 api
methods. Typically used for things like \u201CServerSideEncryption\u201D.
client_kwargs : dict of parameters for the botocore client
requester_pays : bool (False)
If RequesterPays buckets are supported.
default_block_size: int (None)
If given, the default block size value used for `),fy=s(Z,"CODE",{});var FK=n(fy);Sq=o(FK,"open()"),FK.forEach(t),jq=o(Z,`, if no
specific value is given at all time. The built-in default is 5MB.
default_fill_cache : Bool (True)
Whether to use cache filling with open by default. Refer to
`),uy=s(Z,"CODE",{});var LK=n(uy);Cq=o(LK,"S3File.open"),LK.forEach(t),qq=o(Z,`.
default_cache_type : string (\u2018bytes\u2019)
If given, the default cache_type value used for `),gy=s(Z,"CODE",{});var AK=n(gy);zq=o(AK,"open()"),AK.forEach(t),Vq=o(Z,`. Set to \u201Cnone\u201D
if no caching is desired. See fsspec\u2019s documentation for other available
cache_type values. Default cache_type is \u2018bytes\u2019.
version_aware : bool (False)
Whether to support bucket versioning.  If enable this will require the
user to have the necessary IAM permissions for dealing with versioned
objects.
cache_regions : bool (False)
Whether to cache bucket regions or not. Whenever a new bucket is used,
it will first find out which region it belongs and then use the client
for that region.
config_kwargs : dict of parameters passed to `),_y=s(Z,"CODE",{});var OK=n(_y);Mq=o(OK,"botocore.client.Config"),OK.forEach(t),Uq=o(Z,`
kwargs : other parameters for core session
session : aiobotocore AioSession object to be used for all connections.
This session will be used inplace of creating a new session inside S3FileSystem.
For example: aiobotocore.session.AioSession(profile=\u2018test_user\u2019)`),Z.forEach(t),I.forEach(t),p2=d(i),Ja=s(i,"DIV",{class:!0});var uD=n(Ja);m(Wc.$$.fragment,uD),Rq=d(uD),Xa=s(uD,"P",{});var tf=n(Xa);Bq=o(tf,"preprocesses "),vy=s(tf,"EM",{});var SK=n(vy);Gq=o(SK,"dataset_path"),SK.forEach(t),Hq=o(tf," and removes remote filesystem (e.g. removing "),by=s(tf,"CODE",{});var jK=n(by);Wq=o(jK,"s3://"),jK.forEach(t),Kq=o(tf,")"),tf.forEach(t),uD.forEach(t),m2=d(i),Za=s(i,"DIV",{class:!0});var gD=n(Za);m(Kc.$$.fragment,gD),Yq=d(gD),yy=s(gD,"P",{});var CK=n(yy);Jq=o(CK,"Validates if filesystem has remote protocol."),CK.forEach(t),gD.forEach(t),h2=d(i),Qa=s(i,"H2",{class:!0});var _D=n(Qa);lr=s(_D,"A",{id:!0,class:!0,href:!0});var qK=n(lr);$y=s(qK,"SPAN",{});var zK=n($y);m(Yc.$$.fragment,zK),zK.forEach(t),qK.forEach(t),Xq=d(_D),wy=s(_D,"SPAN",{});var VK=n(wy);Zq=o(VK,"Fingerprint"),VK.forEach(t),_D.forEach(t),f2=d(i),es=s(i,"DIV",{class:!0});var vD=n(es);m(Jc.$$.fragment,vD),Qq=d(vD),Dy=s(vD,"P",{});var MK=n(Dy);ez=o(MK,"Hasher that accepts python objects as inputs."),MK.forEach(t),vD.forEach(t),this.h()},h(){c(A,"name","hf:doc:metadata"),c(A,"content",JSON.stringify(YK)),c(Q,"id","main-classes"),c(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q,"href","#main-classes"),c(S,"class","relative group"),c(ne,"id","datasets.DatasetInfo"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#datasets.DatasetInfo"),c(fe,"class","relative group"),c(xe,"class","docstring"),c(gt,"class","docstring"),c(U,"class","docstring"),c(rs,"id","datasets.Dataset"),c(rs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rs,"href","#datasets.Dataset"),c(oa,"class","relative group"),c(tp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"),c(_t,"class","docstring"),c(vt,"class","docstring"),c(is,"class","docstring"),c(ls,"class","docstring"),c(ap,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"),c(Ee,"class","docstring"),c(sp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"),c(ds,"class","docstring"),c(cs,"class","docstring"),c(ps,"class","docstring"),c(ms,"class","docstring"),c(fs,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.__len__"),c(hs,"class","docstring"),c(us,"class","docstring"),c(gs,"class","docstring"),c(bt,"class","docstring"),c(_s,"class","docstring"),c(vs,"class","docstring"),c(bs,"class","docstring"),c(np,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.map"),c(yt,"class","docstring"),c(ys,"class","docstring"),c($s,"class","docstring"),c(ws,"class","docstring"),c(rp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.set_format"),c($t,"class","docstring"),c(Ds,"class","docstring"),c(op,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.set_transform"),c(ke,"class","docstring"),c(ip,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.set_format"),c(lp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.reset_format"),c(xs,"class","docstring"),c(wt,"class","docstring"),c(cp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.with_transform"),c(pp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.set_format"),c(Te,"class","docstring"),c(mp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.set_format"),c(hp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.reset_format"),c(fp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.set_transform"),c(Ne,"class","docstring"),c(Es,"class","docstring"),c(Dt,"class","docstring"),c(Pe,"class","docstring"),c(ks,"class","docstring"),c(Is,"class","docstring"),c(xt,"class","docstring"),c(Et,"class","docstring"),c(kt,"class","docstring"),c(re,"class","docstring"),c(Ts,"class","docstring"),c(Fe,"class","docstring"),c(up,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(Ns,"class","docstring"),c(gp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(Ps,"class","docstring"),c(Fs,"class","docstring"),c(Ls,"class","docstring"),c(As,"class","docstring"),c(Os,"class","docstring"),c(Ss,"class","docstring"),c(js,"class","docstring"),c(Qo,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),c(Qo,"rel","nofollow"),c(oe,"class","docstring"),c(ai,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),c(ai,"rel","nofollow"),c(It,"class","docstring"),c(Cs,"class","docstring"),c(Tt,"class","docstring"),c(K,"class","docstring"),c(Le,"class","docstring"),c(qs,"class","docstring"),c(zs,"class","docstring"),c(Vs,"class","docstring"),c(Ms,"class","docstring"),c(Us,"class","docstring"),c(Rs,"class","docstring"),c(Bs,"class","docstring"),c(yp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetInfo"),c(Gs,"class","docstring"),c(wp,"href","/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.NamedSplit"),c(Hs,"class","docstring"),c(Dp,"class","docstring"),c(xp,"class","docstring"),c(Ep,"class","docstring"),c(kp,"class","docstring"),c(Ip,"class","docstring"),c(Tp,"class","docstring"),c(Np,"class","docstring"),c(Pp,"class","docstring"),c(Fp,"class","docstring"),c(Lp,"class","docstring"),c(Ap,"class","docstring"),c(Op,"class","docstring"),c(Sp,"class","docstring"),c(Ws,"class","docstring"),c(Ks,"class","docstring"),c(Ys,"class","docstring"),c(Js,"class","docstring"),c(jp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features"),c(Cp,"href","/docs/datasets/package_reference/task_templates"),c(Nt,"class","docstring"),c(Ae,"class","docstring"),c(v,"class","docstring"),c(qp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"),c(zp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"),c(ba,"class","docstring"),c(Vp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"),c(Mp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.IterableDataset"),c(C,"class","docstring"),c(Up,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),c(Rp,"href","/docs/datasets/pr_3723/en/package_reference/loading_methods#datasets.load_dataset"),c(Bp,"href","/docs/datasets/pr_3723/en/package_reference/loading_methods#datasets.load_dataset"),c(te,"class","docstring"),c(Gp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),c(Hp,"href","/docs/datasets/pr_3723/en/package_reference/loading_methods#datasets.load_dataset"),c(Wp,"href","/docs/datasets/pr_3723/en/package_reference/loading_methods#datasets.load_dataset"),c(ae,"class","docstring"),c(wa,"class","docstring"),c(Da,"class","docstring"),c(Xs,"id","datasets.DatasetDict"),c(Xs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xs,"href","#datasets.DatasetDict"),c(xa,"class","relative group"),c(Qs,"class","docstring"),c(en,"class","docstring"),c(tn,"class","docstring"),c(sn,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.__len__"),c(an,"class","docstring"),c(nn,"class","docstring"),c(rn,"class","docstring"),c(Pt,"class","docstring"),c(on,"class","docstring"),c(ln,"class","docstring"),c(dn,"class","docstring"),c(Ft,"class","docstring"),c(Oe,"class","docstring"),c(Se,"class","docstring"),c(Lt,"class","docstring"),c(cn,"class","docstring"),c(Yp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.with_transform"),c(Jp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetDict.set_format"),c(je,"class","docstring"),c(Xp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.set_format"),c(Zp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.reset_format"),c(Ce,"class","docstring"),c(pn,"class","docstring"),c(Qp,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.map"),c(At,"class","docstring"),c(mn,"class","docstring"),c(em,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.map"),c(qe,"class","docstring"),c(tm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset.map"),c(ze,"class","docstring"),c(hn,"class","docstring"),c(ie,"class","docstring"),c(am,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(fn,"class","docstring"),c(sm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(un,"class","docstring"),c(gn,"class","docstring"),c(_n,"class","docstring"),c(vn,"class","docstring"),c(bn,"class","docstring"),c(nm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features"),c(rm,"href","/docs/datasets/package_reference/task_templates"),c(Ot,"class","docstring"),c(w,"class","docstring"),c(om,"id","package_reference_features"),c(yn,"id","datasets.IterableDataset"),c(yn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yn,"href","#datasets.IterableDataset"),c(ja,"class","relative group"),c(im,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.IterableDataset"),c(wn,"class","docstring"),c(Dn,"class","docstring"),c(lm,"class","docstring"),c(Ve,"class","docstring"),c(dm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.IterableDataset.skip"),c(cm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.IterableDataset.take"),c(le,"class","docstring"),c(xn,"class","docstring"),c(En,"class","docstring"),c(mm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetInfo"),c(kn,"class","docstring"),c(fm,"href","/docs/datasets/pr_3723/en/package_reference/builder_classes#datasets.NamedSplit"),c(In,"class","docstring"),c(um,"class","docstring"),c(gm,"class","docstring"),c(_m,"class","docstring"),c(vm,"class","docstring"),c(bm,"class","docstring"),c(ym,"class","docstring"),c($m,"class","docstring"),c(wm,"class","docstring"),c(Dm,"class","docstring"),c(xm,"class","docstring"),c(Em,"class","docstring"),c(km,"class","docstring"),c(Im,"class","docstring"),c(x,"class","docstring"),c(Tn,"id","datasets.IterableDatasetDict"),c(Tn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tn,"href","#datasets.IterableDatasetDict"),c(za,"class","relative group"),c(pd,"class","docstring"),c(Pn,"id","datasets.Features"),c(Pn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pn,"href","#datasets.Features"),c(Va,"class","relative group"),c(Nm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Value"),c(Pm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.ClassLabel"),c(Fm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Sequence"),c(Lm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Sequence"),c(Am,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Array2D"),c(Om,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Array3D"),c(Sm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Array4D"),c(jm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Array5D"),c(Cm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Audio"),c(qm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Image"),c(zm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Translation"),c(Vm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),c(An,"class","docstring"),c(On,"class","docstring"),c(Sn,"class","docstring"),c(jn,"class","docstring"),c(Cn,"class","docstring"),c(qn,"class","docstring"),c(jt,"class","docstring"),c(zn,"class","docstring"),c(Mm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.DatasetInfo"),c(Um,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),c(Rm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Value"),c(Y,"class","docstring"),c(de,"class","docstring"),c(T,"class","docstring"),c(Ma,"class","docstring"),c(Vn,"class","docstring"),c(Mn,"class","docstring"),c(R,"class","docstring"),c(dt,"class","docstring"),c(Un,"class","docstring"),c(z,"class","docstring"),c(Rn,"class","docstring"),c(V,"class","docstring"),c(Gd,"class","docstring"),c(Wd,"class","docstring"),c(Yd,"class","docstring"),c(Xd,"class","docstring"),c(Ct,"class","docstring"),c(Bn,"class","docstring"),c(Gn,"class","docstring"),c(Hn,"class","docstring"),c(Wn,"class","docstring"),c(P,"class","docstring"),c(qt,"class","docstring"),c(Kn,"class","docstring"),c(Yn,"class","docstring"),c(Jn,"class","docstring"),c(Xn,"class","docstring"),c(F,"class","docstring"),c(Zn,"id","datasets.MetricInfo"),c(Zn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zn,"href","#datasets.MetricInfo"),c(Ba,"class","relative group"),c(Qn,"class","docstring"),c(er,"class","docstring"),c(B,"class","docstring"),c(tr,"id","datasets.Metric"),c(tr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tr,"href","#datasets.Metric"),c(Ha,"class","relative group"),c(Jm,"href","/docs/datasets/pr_3723/en/package_reference/main_classes#datasets.Dataset"),c(ar,"class","docstring"),c(sr,"class","docstring"),c(Vt,"class","docstring"),c(nr,"class","docstring"),c(G,"class","docstring"),c(rr,"id","datasets.filesystems.S3FileSystem"),c(rr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rr,"href","#datasets.filesystems.S3FileSystem"),c(Wa,"class","relative group"),c(zc,"href","https://s3fs.readthedocs.io/en/latest/api.html"),c(zc,"rel","nofollow"),c(Vc,"href","https://filesystem-spec.readthedocs.io/en/latest/?badge=latest"),c(Vc,"rel","nofollow"),c(ir,"id","parameters"),c(ir,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ir,"href","#parameters"),c(or,"class","relative group"),c(k,"class","docstring"),c(Ja,"class","docstring"),c(Za,"class","docstring"),c(lr,"id","datasets.fingerprint.Hasher"),c(lr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lr,"href","#datasets.fingerprint.Hasher"),c(Qa,"class","relative group"),c(es,"class","docstring")},m(i,y){e(document.head,A),$(i,ht,y),$(i,S,y),e(S,Q),e(Q,sa),h(he,sa,null),e(S,Vr),e(S,na),e(na,ft),$(i,ss,y),$(i,fe,y),e(fe,ne),e(ne,W),h(ut,W,null),e(fe,Qc),e(fe,ns),e(ns,bD),$(i,Ey,y),$(i,U,y),h(Mr,U,null),e(U,yD),e(U,sf),e(sf,$D),e(U,wD),e(U,ep),e(ep,nf),e(nf,DD),e(ep,xD),e(U,ED),e(U,rf),e(rf,kD),e(U,ID),e(U,xe),h(Ur,xe,null),e(xe,TD),e(xe,Rr),e(Rr,ND),e(Rr,of),e(of,PD),e(Rr,FD),e(xe,LD),e(xe,lf),e(lf,AD),e(xe,OD),e(xe,df),e(df,SD),e(U,jD),e(U,gt),h(Br,gt,null),e(gt,CD),e(gt,ra),e(ra,qD),e(ra,cf),e(cf,zD),e(ra,VD),e(ra,pf),e(pf,MD),e(ra,UD),e(gt,RD),e(gt,mf),e(mf,BD),$(i,ky,y),$(i,oa,y),e(oa,rs),e(rs,hf),h(Gr,hf,null),e(oa,GD),e(oa,ff),e(ff,HD),$(i,Iy,y),$(i,os,y),e(os,WD),e(os,tp),e(tp,KD),e(os,YD),$(i,Ty,y),$(i,v,y),h(Hr,v,null),e(v,JD),e(v,uf),e(uf,XD),e(v,ZD),e(v,_t),h(Wr,_t,null),e(_t,QD),e(_t,gf),e(gf,ex),e(_t,tx),e(_t,_f),e(_f,vf),e(vf,ax),e(v,sx),e(v,vt),h(Kr,vt,null),e(vt,nx),e(vt,bf),e(bf,rx),e(vt,ox),e(vt,yf),e(yf,$f),e($f,ix),e(v,lx),e(v,is),h(Yr,is,null),e(is,dx),e(is,wf),e(wf,cx),e(v,px),e(v,ls),h(Jr,ls,null),e(ls,mx),e(ls,Df),e(Df,hx),e(v,fx),e(v,Ee),h(Xr,Ee,null),e(Ee,ux),e(Ee,Xe),e(Xe,gx),e(Xe,xf),e(xf,_x),e(Xe,vx),e(Xe,Ef),e(Ef,bx),e(Xe,yx),e(Xe,ap),e(ap,$x),e(Xe,wx),e(Ee,Dx),e(Ee,Zr),e(Zr,xx),e(Zr,kf),e(kf,Ex),e(Zr,kx),e(Ee,Ix),e(Ee,Qr),e(Qr,Tx),e(Qr,If),e(If,Nx),e(Qr,Px),e(v,Fx),e(v,ds),h(eo,ds,null),e(ds,Lx),e(ds,Ze),e(Ze,Ax),e(Ze,Tf),e(Tf,Ox),e(Ze,Sx),e(Ze,Nf),e(Nf,jx),e(Ze,Cx),e(Ze,sp),e(sp,qx),e(Ze,zx),e(v,Vx),e(v,cs),h(to,cs,null),e(cs,Mx),e(cs,Pf),e(Pf,Ux),e(v,Rx),e(v,ps),h(ao,ps,null),e(ps,Bx),e(ps,Ff),e(Ff,Gx),e(v,Hx),e(v,ms),h(so,ms,null),e(ms,Wx),e(ms,Lf),e(Lf,Kx),e(v,Yx),e(v,hs),h(no,hs,null),e(hs,Jx),e(hs,ro),e(ro,Xx),e(ro,fs),e(fs,Zx),e(fs,Af),e(Af,Qx),e(fs,e3),e(ro,t3),e(v,a3),e(v,us),h(oo,us,null),e(us,s3),e(us,Of),e(Of,n3),e(v,r3),e(v,gs),h(io,gs,null),e(gs,o3),e(gs,Sf),e(Sf,i3),e(v,l3),e(v,bt),h(lo,bt,null),e(bt,d3),e(bt,jf),e(jf,c3),e(bt,p3),e(bt,Cf),e(Cf,m3),e(v,h3),e(v,_s),h(co,_s,null),e(_s,f3),e(_s,qf),e(qf,u3),e(v,g3),e(v,vs),h(po,vs,null),e(vs,_3),e(vs,zf),e(zf,v3),e(v,b3),e(v,bs),h(mo,bs,null),e(bs,y3),e(bs,Vf),e(Vf,$3),e(v,w3),e(v,yt),h(ho,yt,null),e(yt,D3),e(yt,Mf),e(Mf,x3),e(yt,E3),e(yt,ia),e(ia,k3),e(ia,np),e(np,I3),e(ia,T3),e(ia,Uf),e(Uf,N3),e(ia,P3),e(v,F3),e(v,ys),h(fo,ys,null),e(ys,L3),e(ys,Rf),e(Rf,A3),e(v,O3),e(v,$s),h(uo,$s,null),e($s,S3),e($s,go),e(go,j3),e(go,Bf),e(Bf,C3),e(go,q3),e(v,z3),e(v,ws),h(_o,ws,null),e(ws,V3),e(ws,Gf),e(Gf,M3),e(v,U3),e(v,$t),h(vo,$t,null),e($t,R3),e($t,Hf),e(Hf,B3),e($t,G3),e($t,bo),e(bo,H3),e(bo,rp),e(rp,W3),e(bo,K3),e(v,Y3),e(v,Ds),h(yo,Ds,null),e(Ds,J3),e(Ds,la),e(la,X3),e(la,Wf),e(Wf,Z3),e(la,Q3),e(la,Kf),e(Kf,e0),e(la,t0),e(v,a0),e(v,ke),h($o,ke,null),e(ke,s0),e(ke,ue),e(ue,n0),e(ue,Yf),e(Yf,r0),e(ue,o0),e(ue,Jf),e(Jf,i0),e(ue,l0),e(ue,Xf),e(Xf,d0),e(ue,c0),e(ue,op),e(op,p0),e(ue,m0),e(ke,h0),e(ke,ge),e(ge,f0),e(ge,Zf),e(Zf,u0),e(ge,g0),e(ge,Qf),e(Qf,_0),e(ge,v0),e(ge,eu),e(eu,b0),e(ge,y0),e(ge,tu),e(tu,$0),e(ge,w0),e(ke,D0),e(ke,au),e(au,x0),e(v,E0),e(v,xs),h(wo,xs,null),e(xs,k0),e(xs,Ie),e(Ie,I0),e(Ie,su),e(su,T0),e(Ie,N0),e(Ie,nu),e(nu,P0),e(Ie,F0),e(Ie,ip),e(ip,L0),e(Ie,A0),e(Ie,lp),e(lp,O0),e(v,S0),e(v,wt),h(Do,wt,null),e(wt,j0),e(wt,xo),e(xo,C0),e(xo,ru),e(ru,q0),e(xo,z0),e(wt,V0),e(wt,dp),e(dp,M0),e(dp,ou),e(ou,U0),e(v,R0),e(v,Te),h(Eo,Te,null),e(Te,B0),e(Te,Qe),e(Qe,G0),e(Qe,iu),e(iu,H0),e(Qe,W0),e(Qe,lu),e(lu,K0),e(Qe,Y0),e(Qe,du),e(du,J0),e(Qe,X0),e(Te,Z0),e(Te,ko),e(ko,Q0),e(ko,cp),e(cp,e7),e(ko,t7),e(Te,a7),e(Te,da),e(da,s7),e(da,pp),e(pp,n7),e(da,r7),e(da,cu),e(cu,o7),e(da,i7),e(v,l7),e(v,Ne),h(Io,Ne,null),e(Ne,d7),e(Ne,ca),e(ca,c7),e(ca,pu),e(pu,p7),e(ca,m7),e(ca,mu),e(mu,h7),e(ca,f7),e(Ne,u7),e(Ne,pa),e(pa,g7),e(pa,mp),e(mp,_7),e(pa,v7),e(pa,hp),e(hp,b7),e(pa,y7),e(Ne,$7),e(Ne,ma),e(ma,w7),e(ma,fp),e(fp,D7),e(ma,x7),e(ma,hu),e(hu,E7),e(ma,k7),e(v,I7),e(v,Es),h(To,Es,null),e(Es,T7),e(Es,fu),e(fu,N7),e(v,P7),e(v,Dt),h(No,Dt,null),e(Dt,F7),e(Dt,uu),e(uu,L7),e(Dt,A7),e(Dt,gu),e(gu,O7),e(v,S7),e(v,Pe),h(Po,Pe,null),e(Pe,j7),e(Pe,_u),e(_u,C7),e(Pe,q7),e(Pe,Fo),e(Fo,z7),e(Fo,vu),e(vu,V7),e(Fo,M7),e(Pe,U7),e(Pe,ha),e(ha,bu),e(bu,R7),e(ha,B7),e(ha,yu),e(yu,G7),e(ha,H7),e(ha,ee),e(ee,W7),e(ee,$u),e($u,K7),e(ee,Y7),e(ee,wu),e(wu,J7),e(ee,X7),e(ee,Du),e(Du,Z7),e(ee,Q7),e(ee,xu),e(xu,e4),e(ee,t4),e(ee,Eu),e(Eu,a4),e(ee,s4),e(v,n4),e(v,ks),h(Lo,ks,null),e(ks,r4),e(ks,ku),e(ku,o4),e(v,i4),e(v,Is),h(Ao,Is,null),e(Is,l4),e(Is,Iu),e(Iu,d4),e(v,c4),e(v,xt),h(Oo,xt,null),e(xt,p4),e(xt,Tu),e(Tu,m4),e(xt,h4),e(xt,Nu),e(Nu,f4),e(v,u4),e(v,Et),h(So,Et,null),e(Et,g4),e(Et,Pu),e(Pu,_4),e(Et,v4),e(Et,Fu),e(Fu,b4),e(v,y4),e(v,kt),h(jo,kt,null),e(kt,$4),e(kt,j),e(j,w4),e(j,Lu),e(Lu,D4),e(j,x4),e(j,Au),e(Au,E4),e(j,k4),e(j,Ou),e(Ou,I4),e(j,T4),e(j,Su),e(Su,N4),e(j,P4),e(j,ju),e(ju,F4),e(j,L4),e(j,Cu),e(Cu,A4),e(j,O4),e(j,qu),e(qu,S4),e(j,j4),e(kt,C4),e(kt,Co),e(Co,q4),e(Co,zu),e(zu,z4),e(Co,V4),e(v,M4),e(v,re),h(qo,re,null),e(re,U4),e(re,fa),e(fa,R4),e(fa,Vu),e(Vu,B4),e(fa,G4),e(fa,Mu),e(Mu,H4),e(fa,W4),e(re,K4),e(re,Uu),e(Uu,Y4),e(re,J4),e(re,zo),e(zo,X4),e(zo,Ru),e(Ru,Z4),e(zo,Q4),e(re,eE),e(re,Bu),e(Bu,tE),e(v,aE),e(v,Ts),h(Vo,Ts,null),e(Ts,sE),e(Ts,Gu),e(Gu,nE),e(v,rE),e(v,Fe),h(Mo,Fe,null),e(Fe,oE),e(Fe,Hu),e(Hu,iE),e(Fe,lE),e(Fe,Wu),e(Wu,dE),e(Fe,cE),h(Uo,Fe,null),e(v,pE),e(v,Ns),h(Ro,Ns,null),e(Ns,mE),e(Ns,ua),e(ua,hE),e(ua,up),e(up,fE),e(ua,uE),e(ua,Ku),e(Ku,gE),e(ua,_E),e(v,vE),e(v,Ps),h(Bo,Ps,null),e(Ps,bE),e(Ps,et),e(et,yE),e(et,Yu),e(Yu,$E),e(et,wE),e(et,gp),e(gp,DE),e(et,xE),e(et,Ju),e(Ju,EE),e(et,kE),e(v,IE),e(v,Fs),h(Go,Fs,null),e(Fs,TE),e(Fs,Xu),e(Xu,NE),e(v,PE),e(v,Ls),h(Ho,Ls,null),e(Ls,FE),e(Ls,Zu),e(Zu,LE),e(v,AE),e(v,As),h(Wo,As,null),e(As,OE),e(As,Ko),e(Ko,SE),e(Ko,Qu),e(Qu,jE),e(Ko,CE),e(v,qE),e(v,Os),h(Yo,Os,null),e(Os,zE),e(Os,eg),e(eg,VE),e(v,ME),e(v,Ss),h(Jo,Ss,null),e(Ss,UE),e(Ss,tg),e(tg,RE),e(v,BE),e(v,js),h(Xo,js,null),e(js,GE),e(js,ag),e(ag,HE),e(v,WE),e(v,oe),h(Zo,oe,null),e(oe,KE),e(oe,ga),e(ga,YE),e(ga,sg),e(sg,JE),e(ga,XE),e(ga,ng),e(ng,ZE),e(ga,QE),e(oe,ek),e(oe,rg),e(rg,_p),e(_p,tk),e(_p,Qo),e(Qo,ak),e(oe,sk),e(oe,og),e(og,nk),e(oe,rk),h(ei,oe,null),e(v,ok),e(v,It),h(ti,It,null),e(It,ik),e(It,tt),e(tt,lk),e(tt,ig),e(ig,dk),e(tt,ck),e(tt,lg),e(lg,pk),e(tt,mk),e(tt,dg),e(dg,hk),e(tt,fk),e(It,uk),e(It,cg),e(cg,vp),e(vp,gk),e(vp,ai),e(ai,_k),e(v,vk),e(v,Cs),h(si,Cs,null),e(Cs,bk),e(Cs,pg),e(pg,yk),e(v,$k),e(v,Tt),h(ni,Tt,null),e(Tt,wk),e(Tt,mg),e(mg,Dk),e(Tt,xk),e(Tt,ri),e(ri,Ek),e(ri,hg),e(hg,kk),e(ri,Ik),e(v,Tk),e(v,K),h(oi,K,null),e(K,Nk),e(K,fg),e(fg,Pk),e(K,Fk),e(K,ug),e(ug,Lk),e(K,Ak),h(ii,K,null),e(K,Ok),e(K,gg),e(gg,Sk),e(K,jk),h(li,K,null),e(v,Ck),e(v,Le),h(di,Le,null),e(Le,qk),e(Le,_g),e(_g,zk),e(Le,Vk),e(Le,vg),e(vg,Mk),e(Le,Uk),h(ci,Le,null),e(v,Rk),e(v,qs),h(pi,qs,null),e(qs,Bk),e(qs,bg),e(bg,Gk),e(v,Hk),e(v,zs),h(mi,zs,null),e(zs,Wk),e(zs,yg),e(yg,Kk),e(v,Yk),e(v,Vs),h(hi,Vs,null),e(Vs,Jk),e(Vs,$g),e($g,Xk),e(v,Zk),e(v,Ms),h(fi,Ms,null),e(Ms,Qk),e(Ms,wg),e(wg,eI),e(v,tI),e(v,Us),h(ui,Us,null),e(Us,aI),e(Us,Dg),e(Dg,sI),e(v,nI),e(v,Rs),h(gi,Rs,null),e(Rs,rI),e(Rs,xg),e(xg,oI),e(v,iI),e(v,Bs),h(_i,Bs,null),e(Bs,lI),e(Bs,Eg),e(Eg,dI),e(v,cI),e(v,Gs),h(vi,Gs,null),e(Gs,pI),e(Gs,bp),e(bp,yp),e(yp,mI),e(bp,hI),e(v,fI),e(v,Hs),h(bi,Hs,null),e(Hs,uI),e(Hs,$p),e($p,wp),e(wp,gI),e($p,_I),e(v,vI),e(v,Dp),h(yi,Dp,null),e(v,bI),e(v,xp),h($i,xp,null),e(v,yI),e(v,Ep),h(wi,Ep,null),e(v,$I),e(v,kp),h(Di,kp,null),e(v,wI),e(v,Ip),h(xi,Ip,null),e(v,DI),e(v,Tp),h(Ei,Tp,null),e(v,xI),e(v,Np),h(ki,Np,null),e(v,EI),e(v,Pp),h(Ii,Pp,null),e(v,kI),e(v,Fp),h(Ti,Fp,null),e(v,II),e(v,Lp),h(Ni,Lp,null),e(v,TI),e(v,Ap),h(Pi,Ap,null),e(v,NI),e(v,Op),h(Fi,Op,null),e(v,PI),e(v,Sp),h(Li,Sp,null),e(v,FI),e(v,Ws),h(Ai,Ws,null),e(Ws,LI),e(Ws,kg),e(kg,AI),e(v,OI),e(v,Ks),h(Oi,Ks,null),e(Ks,SI),e(Ks,Ig),e(Ig,jI),e(v,CI),e(v,Ys),h(Si,Ys,null),e(Ys,qI),e(Ys,Tg),e(Tg,zI),e(v,VI),e(v,Js),h(ji,Js,null),e(Js,MI),e(Js,Ng),e(Ng,UI),e(v,RI),e(v,Nt),h(Ci,Nt,null),e(Nt,BI),e(Nt,_a),e(_a,GI),e(_a,jp),e(jp,HI),e(_a,WI),e(_a,Cp),e(Cp,KI),e(_a,YI),e(Nt,JI),e(Nt,va),e(va,XI),e(va,Pg),e(Pg,ZI),e(va,QI),e(va,Fg),e(Fg,e5),e(va,t5),e(v,a5),e(v,Ae),h(qi,Ae,null),e(Ae,s5),e(Ae,zi),e(zi,n5),e(zi,Lg),e(Lg,r5),e(zi,o5),e(Ae,i5),e(Ae,Ag),e(Ag,l5),e(Ae,d5),h(Vi,Ae,null),$(i,Ny,y),$(i,ba,y),h(Mi,ba,null),e(ba,c5),e(ba,ya),e(ya,p5),e(ya,qp),e(qp,m5),e(ya,h5),e(ya,zp),e(zp,f5),e(ya,u5),$(i,Py,y),$(i,C,y),h(Ui,C,null),e(C,g5),e(C,Og),e(Og,_5),e(C,v5),e(C,$a),e($a,b5),e($a,Vp),e(Vp,y5),e($a,$5),e($a,Mp),e(Mp,w5),e($a,D5),e(C,x5),e(C,_e),e(_e,E5),e(_e,Sg),e(Sg,k5),e(_e,I5),e(_e,jg),e(jg,T5),e(_e,N5),e(_e,Cg),e(Cg,P5),e(_e,F5),e(_e,qg),e(qg,L5),e(_e,A5),e(C,O5),e(C,zg),e(zg,S5),e(C,j5),e(C,Vg),e(Vg,C5),e(C,q5),h(Ri,C,null),$(i,Fy,y),$(i,te,y),h(Bi,te,null),e(te,z5),e(te,Mg),e(Mg,V5),e(te,M5),e(te,Ug),e(Ug,U5),e(te,R5),e(te,Rg),e(Rg,B5),e(te,G5),e(te,ve),e(ve,Bg),e(Bg,H5),e(ve,W5),e(ve,Gg),e(Gg,K5),e(ve,Y5),e(ve,Hg),e(Hg,J5),e(ve,X5),e(ve,Gi),e(Gi,Z5),e(Gi,Up),e(Up,Q5),e(Gi,e6),e(ve,t6),e(ve,at),e(at,a6),e(at,Rp),e(Rp,s6),e(at,n6),e(at,Wg),e(Wg,r6),e(at,o6),e(at,Bp),e(Bp,i6),e(at,l6),$(i,Ly,y),$(i,ae,y),h(Hi,ae,null),e(ae,d6),e(ae,Kg),e(Kg,c6),e(ae,p6),e(ae,Yg),e(Yg,m6),e(ae,h6),e(ae,Jg),e(Jg,f6),e(ae,u6),e(ae,be),e(be,Xg),e(Xg,g6),e(be,_6),e(be,Zg),e(Zg,v6),e(be,b6),e(be,Qg),e(Qg,y6),e(be,$6),e(be,Wi),e(Wi,w6),e(Wi,Gp),e(Gp,D6),e(Wi,x6),e(be,E6),e(be,st),e(st,k6),e(st,Hp),e(Hp,I6),e(st,T6),e(st,e_),e(e_,N6),e(st,P6),e(st,Wp),e(Wp,F6),e(st,L6),$(i,Ay,y),$(i,wa,y),h(Ki,wa,null),e(wa,A6),e(wa,t_),e(t_,O6),$(i,Oy,y),$(i,Da,y),h(Yi,Da,null),e(Da,S6),e(Da,a_),e(a_,j6),$(i,Sy,y),$(i,xa,y),e(xa,Xs),e(Xs,s_),h(Ji,s_,null),e(xa,C6),e(xa,n_),e(n_,q6),$(i,jy,y),$(i,Zs,y),e(Zs,z6),e(Zs,r_),e(r_,V6),e(Zs,M6),$(i,Cy,y),$(i,w,y),h(Xi,w,null),e(w,U6),e(w,o_),e(o_,R6),e(w,B6),e(w,Qs),h(Zi,Qs,null),e(Qs,G6),e(Qs,i_),e(i_,H6),e(w,W6),e(w,en),h(Qi,en,null),e(en,K6),e(en,l_),e(l_,Y6),e(w,J6),e(w,tn),h(el,tn,null),e(tn,X6),e(tn,d_),e(d_,Z6),e(w,Q6),e(w,an),h(tl,an,null),e(an,e8),e(an,al),e(al,t8),e(al,sn),e(sn,a8),e(sn,c_),e(c_,s8),e(sn,n8),e(al,r8),e(w,o8),e(w,nn),h(sl,nn,null),e(nn,i8),e(nn,p_),e(p_,l8),e(w,d8),e(w,rn),h(nl,rn,null),e(rn,c8),e(rn,m_),e(m_,p8),e(w,m8),e(w,Pt),h(rl,Pt,null),e(Pt,h8),e(Pt,h_),e(h_,f8),e(Pt,u8),e(Pt,f_),e(f_,g8),e(w,_8),e(w,on),h(ol,on,null),e(on,v8),e(on,u_),e(u_,b8),e(w,y8),e(w,ln),h(il,ln,null),e(ln,$8),e(ln,g_),e(g_,w8),e(w,D8),e(w,dn),h(ll,dn,null),e(dn,x8),e(dn,__),e(__,E8),e(w,k8),e(w,Ft),h(dl,Ft,null),e(Ft,I8),e(Ft,v_),e(v_,T8),e(Ft,N8),e(Ft,b_),e(b_,P8),e(w,F8),e(w,Oe),h(cl,Oe,null),e(Oe,L8),e(Oe,y_),e(y_,A8),e(Oe,O8),e(Oe,$_),e($_,S8),e(Oe,j8),e(Oe,w_),e(w_,C8),e(w,q8),e(w,Se),h(pl,Se,null),e(Se,z8),e(Se,ml),e(ml,V8),e(ml,D_),e(D_,M8),e(ml,U8),e(Se,R8),e(Se,ye),e(ye,B8),e(ye,x_),e(x_,G8),e(ye,H8),e(ye,E_),e(E_,W8),e(ye,K8),e(ye,k_),e(k_,Y8),e(ye,J8),e(ye,I_),e(I_,X8),e(ye,Z8),e(Se,Q8),e(Se,T_),e(T_,e9),e(w,t9),e(w,Lt),h(hl,Lt,null),e(Lt,a9),e(Lt,fl),e(fl,s9),e(fl,N_),e(N_,n9),e(fl,r9),e(Lt,o9),e(Lt,Kp),e(Kp,i9),e(Kp,P_),e(P_,l9),e(w,d9),e(w,cn),h(ul,cn,null),e(cn,c9),e(cn,Ea),e(Ea,p9),e(Ea,F_),e(F_,m9),e(Ea,h9),e(Ea,L_),e(L_,f9),e(Ea,u9),e(w,g9),e(w,je),h(gl,je,null),e(je,_9),e(je,nt),e(nt,v9),e(nt,A_),e(A_,b9),e(nt,y9),e(nt,O_),e(O_,$9),e(nt,w9),e(nt,S_),e(S_,D9),e(nt,x9),e(je,E9),e(je,_l),e(_l,k9),e(_l,Yp),e(Yp,I9),e(_l,T9),e(je,N9),e(je,ka),e(ka,P9),e(ka,Jp),e(Jp,F9),e(ka,L9),e(ka,j_),e(j_,A9),e(ka,O9),e(w,S9),e(w,Ce),h(vl,Ce,null),e(Ce,j9),e(Ce,Ia),e(Ia,C9),e(Ia,C_),e(C_,q9),e(Ia,z9),e(Ia,q_),e(q_,V9),e(Ia,M9),e(Ce,U9),e(Ce,Ta),e(Ta,R9),e(Ta,Xp),e(Xp,B9),e(Ta,G9),e(Ta,Zp),e(Zp,H9),e(Ta,W9),e(Ce,K9),e(Ce,Na),e(Na,Y9),e(Na,z_),e(z_,J9),e(Na,X9),e(Na,V_),e(V_,Z9),e(Na,Q9),e(w,eT),e(w,pn),h(bl,pn,null),e(pn,tT),e(pn,M_),e(M_,aT),e(w,sT),e(w,At),h(yl,At,null),e(At,nT),e(At,U_),e(U_,rT),e(At,oT),e(At,rt),e(rt,iT),e(rt,Qp),e(Qp,lT),e(rt,dT),e(rt,R_),e(R_,cT),e(rt,pT),e(rt,B_),e(B_,mT),e(rt,hT),e(w,fT),e(w,mn),h($l,mn,null),e(mn,uT),e(mn,G_),e(G_,gT),e(w,_T),e(w,qe),h(wl,qe,null),e(qe,vT),e(qe,H_),e(H_,bT),e(qe,yT),e(qe,W_),e(W_,$T),e(qe,wT),e(qe,Pa),e(Pa,DT),e(Pa,em),e(em,xT),e(Pa,ET),e(Pa,K_),e(K_,kT),e(Pa,IT),e(w,TT),e(w,ze),h(Dl,ze,null),e(ze,NT),e(ze,Y_),e(Y_,PT),e(ze,FT),e(ze,Fa),e(Fa,LT),e(Fa,tm),e(tm,AT),e(Fa,OT),e(Fa,J_),e(J_,ST),e(Fa,jT),e(ze,CT),e(ze,xl),e(xl,X_),e(X_,qT),e(xl,zT),e(xl,Z_),e(Z_,VT),e(w,MT),e(w,hn),h(El,hn,null),e(hn,UT),e(hn,kl),e(kl,RT),e(kl,Q_),e(Q_,BT),e(kl,GT),e(w,HT),e(w,ie),h(Il,ie,null),e(ie,WT),e(ie,La),e(La,KT),e(La,ev),e(ev,YT),e(La,JT),e(La,tv),e(tv,XT),e(La,ZT),e(ie,QT),e(ie,av),e(av,eN),e(ie,tN),e(ie,sv),e(sv,aN),e(ie,sN),h(Tl,ie,null),e(w,nN),e(w,fn),h(Nl,fn,null),e(fn,rN),e(fn,Aa),e(Aa,oN),e(Aa,am),e(am,iN),e(Aa,lN),e(Aa,nv),e(nv,dN),e(Aa,cN),e(w,pN),e(w,un),h(Pl,un,null),e(un,mN),e(un,ot),e(ot,hN),e(ot,rv),e(rv,fN),e(ot,uN),e(ot,sm),e(sm,gN),e(ot,_N),e(ot,ov),e(ov,vN),e(ot,bN),e(w,yN),e(w,gn),h(Fl,gn,null),e(gn,$N),e(gn,iv),e(iv,wN),e(w,DN),e(w,_n),h(Ll,_n,null),e(_n,xN),e(_n,lv),e(lv,EN),e(w,kN),e(w,vn),h(Al,vn,null),e(vn,IN),e(vn,dv),e(dv,TN),e(w,NN),e(w,bn),h(Ol,bn,null),e(bn,PN),e(bn,cv),e(cv,FN),e(w,LN),e(w,Ot),h(Sl,Ot,null),e(Ot,AN),e(Ot,Oa),e(Oa,ON),e(Oa,nm),e(nm,SN),e(Oa,jN),e(Oa,rm),e(rm,CN),e(Oa,qN),e(Ot,zN),e(Ot,Sa),e(Sa,VN),e(Sa,pv),e(pv,MN),e(Sa,UN),e(Sa,mv),e(mv,RN),e(Sa,BN),$(i,qy,y),$(i,om,y),$(i,zy,y),$(i,ja,y),e(ja,yn),e(yn,hv),h(jl,hv,null),e(ja,GN),e(ja,fv),e(fv,HN),$(i,Vy,y),$(i,$n,y),e($n,WN),e($n,im),e(im,KN),e($n,YN),$(i,My,y),$(i,x,y),h(Cl,x,null),e(x,JN),e(x,uv),e(uv,XN),e(x,ZN),e(x,wn),h(ql,wn,null),e(wn,QN),e(wn,gv),e(gv,eP),e(x,tP),e(x,Dn),h(zl,Dn,null),e(Dn,aP),e(Dn,_v),e(_v,sP),e(x,nP),e(x,lm),h(Vl,lm,null),e(x,rP),e(x,Ve),h(Ml,Ve,null),e(Ve,oP),e(Ve,vv),e(vv,iP),e(Ve,lP),e(Ve,Ul),e(Ul,dP),e(Ul,bv),e(bv,cP),e(Ul,pP),e(Ve,mP),e(Ve,Ca),e(Ca,yv),e(yv,hP),e(Ca,fP),e(Ca,$v),e($v,uP),e(Ca,gP),e(Ca,se),e(se,_P),e(se,wv),e(wv,vP),e(se,bP),e(se,Dv),e(Dv,yP),e(se,$P),e(se,xv),e(xv,wP),e(se,DP),e(se,Ev),e(Ev,xP),e(se,EP),e(se,kv),e(kv,kP),e(se,IP),e(x,TP),e(x,le),h(Rl,le,null),e(le,NP),e(le,Iv),e(Iv,PP),e(le,FP),e(le,Tv),e(Tv,LP),e(le,AP),e(le,Bl),e(Bl,OP),e(Bl,Nv),e(Nv,SP),e(Bl,jP),e(le,CP),e(le,qa),e(qa,qP),e(qa,dm),e(dm,zP),e(qa,VP),e(qa,cm),e(cm,MP),e(qa,UP),e(x,RP),e(x,xn),h(Gl,xn,null),e(xn,BP),e(xn,Hl),e(Hl,GP),e(Hl,Pv),e(Pv,HP),e(Hl,WP),e(x,KP),e(x,En),h(Wl,En,null),e(En,YP),e(En,Kl),e(Kl,JP),e(Kl,Fv),e(Fv,XP),e(Kl,ZP),e(x,QP),e(x,kn),h(Yl,kn,null),e(kn,eF),e(kn,pm),e(pm,mm),e(mm,tF),e(pm,aF),e(x,sF),e(x,In),h(Jl,In,null),e(In,nF),e(In,hm),e(hm,fm),e(fm,rF),e(hm,oF),e(x,iF),e(x,um),h(Xl,um,null),e(x,lF),e(x,gm),h(Zl,gm,null),e(x,dF),e(x,_m),h(Ql,_m,null),e(x,cF),e(x,vm),h(ed,vm,null),e(x,pF),e(x,bm),h(td,bm,null),e(x,mF),e(x,ym),h(ad,ym,null),e(x,hF),e(x,$m),h(sd,$m,null),e(x,fF),e(x,wm),h(nd,wm,null),e(x,uF),e(x,Dm),h(rd,Dm,null),e(x,gF),e(x,xm),h(od,xm,null),e(x,_F),e(x,Em),h(id,Em,null),e(x,vF),e(x,km),h(ld,km,null),e(x,bF),e(x,Im),h(dd,Im,null),$(i,Uy,y),$(i,za,y),e(za,Tn),e(Tn,Lv),h(cd,Lv,null),e(za,yF),e(za,Av),e(Av,$F),$(i,Ry,y),$(i,Nn,y),e(Nn,wF),e(Nn,Ov),e(Ov,DF),e(Nn,xF),$(i,By,y),$(i,pd,y),h(md,pd,null),$(i,Gy,y),$(i,Va,y),e(Va,Pn),e(Pn,Sv),h(hd,Sv,null),e(Va,EF),e(Va,jv),e(jv,kF),$(i,Hy,y),$(i,T,y),h(fd,T,null),e(T,IF),e(T,Cv),e(Cv,TF),e(T,NF),e(T,ud),e(ud,PF),e(ud,qv),e(qv,FF),e(ud,LF),e(T,AF),e(T,Tm),e(Tm,zv),e(zv,OF),e(Tm,SF),e(T,jF),e(T,q),e(q,Vv),e(Vv,St),e(St,CF),e(St,Nm),e(Nm,qF),e(St,zF),e(St,Mv),e(Mv,VF),e(St,MF),e(St,Uv),e(Uv,UF),e(q,RF),e(q,Rv),e(Rv,gd),e(gd,BF),e(gd,Pm),e(Pm,GF),e(gd,HF),e(q,WF),e(q,Bv),e(Bv,_d),e(_d,KF),e(_d,Gv),e(Gv,YF),e(_d,JF),e(q,XF),e(q,vd),e(vd,$e),e($e,ZF),e($e,Hv),e(Hv,QF),e($e,eL),e($e,Fm),e(Fm,tL),e($e,aL),e($e,Wv),e(Wv,sL),e($e,nL),e($e,Lm),e(Lm,rL),e($e,oL),e(vd,iL),h(Fn,vd,null),e(q,lL),e(q,Kv),e(Kv,we),e(we,dL),e(we,Am),e(Am,cL),e(we,pL),e(we,Om),e(Om,mL),e(we,hL),e(we,Sm),e(Sm,fL),e(we,uL),e(we,jm),e(jm,gL),e(we,_L),e(q,vL),e(q,Yv),e(Yv,bd),e(bd,bL),e(bd,Cm),e(Cm,yL),e(bd,$L),e(q,wL),e(q,Jv),e(Jv,it),e(it,DL),e(it,qm),e(qm,xL),e(it,EL),e(it,Xv),e(Xv,kL),e(it,IL),e(it,Zv),e(Zv,TL),e(it,NL),e(q,PL),e(q,Qv),e(Qv,Ln),e(Ln,zm),e(zm,FL),e(Ln,LL),e(Ln,Vm),e(Vm,AL),e(Ln,OL),e(T,SL),e(T,An),h(yd,An,null),e(An,jL),e(An,e1),e(e1,CL),e(T,qL),e(T,On),h($d,On,null),e(On,zL),e(On,t1),e(t1,VL),e(T,ML),e(T,Sn),h(wd,Sn,null),e(Sn,UL),e(Sn,a1),e(a1,RL),e(T,BL),e(T,jn),h(Dd,jn,null),e(jn,GL),e(jn,s1),e(s1,HL),e(T,WL),e(T,Cn),h(xd,Cn,null),e(Cn,KL),e(Cn,n1),e(n1,YL),e(T,JL),e(T,qn),h(Ed,qn,null),e(qn,XL),e(qn,r1),e(r1,ZL),e(T,QL),e(T,jt),h(kd,jt,null),e(jt,eA),e(jt,o1),e(o1,tA),e(jt,aA),e(jt,i1),e(i1,sA),e(T,nA),e(T,zn),h(Id,zn,null),e(zn,rA),e(zn,l1),e(l1,oA),e(T,iA),e(T,Y),h(Td,Y,null),e(Y,lA),e(Y,d1),e(d1,dA),e(Y,cA),e(Y,c1),e(c1,pA),e(Y,mA),e(Y,lt),e(lt,hA),e(lt,Mm),e(Mm,fA),e(lt,uA),e(lt,Um),e(Um,gA),e(lt,_A),e(lt,Rm),e(Rm,vA),e(lt,bA),e(Y,yA),e(Y,p1),e(p1,$A),e(Y,wA),h(Nd,Y,null),e(T,DA),e(T,de),h(Pd,de,null),e(de,xA),e(de,m1),e(m1,EA),e(de,kA),e(de,h1),e(h1,IA),e(de,TA),e(de,f1),e(f1,NA),e(de,PA),h(Fd,de,null),$(i,Wy,y),$(i,Ma,y),h(Ld,Ma,null),e(Ma,FA),e(Ma,u1),e(u1,LA),$(i,Ky,y),$(i,R,y),h(Ad,R,null),e(R,AA),e(R,g1),e(g1,OA),e(R,SA),e(R,Od),e(Od,jA),e(Od,_1),e(_1,CA),e(Od,qA),e(R,zA),e(R,Ua),e(Ua,Bm),e(Bm,v1),e(v1,VA),e(Bm,MA),e(Ua,UA),e(Ua,Gm),e(Gm,b1),e(b1,RA),e(Gm,BA),e(Ua,GA),e(Ua,Hm),e(Hm,y1),e(y1,HA),e(Hm,WA),e(R,KA),e(R,Vn),h(Sd,Vn,null),e(Vn,YA),e(Vn,$1),e($1,JA),e(R,XA),e(R,Mn),h(jd,Mn,null),e(Mn,ZA),e(Mn,w1),e(w1,QA),$(i,Yy,y),$(i,dt,y),h(Cd,dt,null),e(dt,eO),e(dt,D1),e(D1,tO),e(dt,aO),e(dt,x1),e(x1,sO),$(i,Jy,y),$(i,z,y),h(qd,z,null),e(z,nO),e(z,Wm),e(Wm,E1),e(E1,rO),e(Wm,oO),e(z,iO),e(z,k1),e(k1,lO),e(z,dO),e(z,zd),e(zd,cO),e(zd,I1),e(I1,pO),e(zd,mO),e(z,hO),e(z,T1),e(T1,fO),e(z,uO),h(Vd,z,null),e(z,gO),e(z,Un),h(Md,Un,null),e(Un,_O),e(Un,N1),e(N1,vO),$(i,Xy,y),$(i,V,y),h(Ud,V,null),e(V,bO),e(V,Km),e(Km,P1),e(P1,yO),e(Km,$O),e(V,wO),e(V,F1),e(F1,DO),e(V,xO),e(V,L1),e(L1,EO),e(V,kO),e(V,A1),e(A1,IO),e(V,TO),h(Rd,V,null),e(V,NO),e(V,Rn),h(Bd,Rn,null),e(Rn,PO),e(Rn,O1),e(O1,FO),$(i,Zy,y),$(i,Gd,y),h(Hd,Gd,null),$(i,Qy,y),$(i,Wd,y),h(Kd,Wd,null),$(i,e2,y),$(i,Yd,y),h(Jd,Yd,null),$(i,t2,y),$(i,Xd,y),h(Zd,Xd,null),$(i,a2,y),$(i,P,y),h(Qd,P,null),e(P,LO),e(P,S1),e(S1,AO),e(P,OO),e(P,j1),e(j1,SO),e(P,jO),e(P,ec),e(ec,C1),e(C1,tc),e(tc,CO),e(tc,q1),e(q1,qO),e(tc,zO),e(ec,VO),e(ec,ac),e(ac,sc),e(sc,MO),e(sc,z1),e(z1,UO),e(sc,RO),e(ac,BO),e(ac,nc),e(nc,V1),e(V1,GO),e(nc,HO),e(nc,M1),e(M1,WO),e(P,KO),e(P,U1),e(U1,YO),e(P,JO),e(P,R1),e(R1,rc),e(rc,oc),e(oc,XO),e(oc,B1),e(B1,ZO),e(oc,QO),e(rc,eS),e(rc,Ra),e(Ra,G1),e(G1,tS),e(Ra,aS),e(Ra,H1),e(H1,sS),e(Ra,nS),e(Ra,W1),e(W1,rS),e(P,oS),e(P,K1),e(K1,iS),e(P,lS),e(P,Ct),h(ic,Ct,null),e(Ct,dS),e(Ct,Y1),e(Y1,cS),e(Ct,pS),e(Ct,ct),e(ct,J1),e(J1,mS),e(ct,hS),e(ct,X1),e(X1,fS),e(ct,uS),e(ct,Z1),e(Z1,gS),e(ct,_S),e(ct,Q1),e(Q1,vS),e(P,bS),e(P,Bn),h(lc,Bn,null),e(Bn,yS),e(Bn,eb),e(eb,$S),e(P,wS),e(P,Gn),h(dc,Gn,null),e(Gn,DS),e(Gn,tb),e(tb,xS),e(P,ES),e(P,Hn),h(cc,Hn,null),e(Hn,kS),e(Hn,ab),e(ab,IS),e(P,TS),e(P,Wn),h(pc,Wn,null),e(Wn,NS),e(Wn,sb),e(sb,PS),$(i,s2,y),$(i,F,y),h(mc,F,null),e(F,FS),e(F,nb),e(nb,LS),e(F,AS),e(F,rb),e(rb,OS),e(F,SS),e(F,hc),e(hc,ob),e(ob,fc),e(fc,jS),e(fc,ib),e(ib,CS),e(fc,qS),e(hc,zS),e(hc,uc),e(uc,gc),e(gc,VS),e(gc,lb),e(lb,MS),e(gc,US),e(uc,RS),e(uc,_c),e(_c,db),e(db,BS),e(_c,GS),e(_c,cb),e(cb,HS),e(F,WS),e(F,pb),e(pb,KS),e(F,YS),e(F,vc),e(vc,bc),e(bc,JS),e(bc,mb),e(mb,XS),e(bc,ZS),e(vc,QS),e(vc,yc),e(yc,ej),e(yc,hb),e(hb,tj),e(yc,aj),e(F,sj),e(F,qt),h($c,qt,null),e(qt,nj),e(qt,fb),e(fb,rj),e(qt,oj),e(qt,De),e(De,ub),e(ub,ij),e(De,lj),e(De,gb),e(gb,dj),e(De,cj),e(De,_b),e(_b,pj),e(De,mj),e(De,vb),e(vb,hj),e(De,fj),e(De,bb),e(bb,uj),e(F,gj),e(F,Kn),h(wc,Kn,null),e(Kn,_j),e(Kn,yb),e(yb,vj),e(F,bj),e(F,Yn),h(Dc,Yn,null),e(Yn,yj),e(Yn,$b),e($b,$j),e(F,wj),e(F,Jn),h(xc,Jn,null),e(Jn,Dj),e(Jn,wb),e(wb,xj),e(F,Ej),e(F,Xn),h(Ec,Xn,null),e(Xn,kj),e(Xn,Db),e(Db,Ij),$(i,n2,y),$(i,Ba,y),e(Ba,Zn),e(Zn,xb),h(kc,xb,null),e(Ba,Tj),e(Ba,Eb),e(Eb,Nj),$(i,r2,y),$(i,B,y),h(Ic,B,null),e(B,Pj),e(B,kb),e(kb,Fj),e(B,Lj),e(B,Ym),e(Ym,Ib),e(Ib,Aj),e(Ym,Oj),e(B,Sj),e(B,Tb),e(Tb,jj),e(B,Cj),e(B,Qn),h(Tc,Qn,null),e(Qn,qj),e(Qn,Nc),e(Nc,zj),e(Nc,Nb),e(Nb,Vj),e(Nc,Mj),e(B,Uj),e(B,er),h(Pc,er,null),e(er,Rj),e(er,Ga),e(Ga,Bj),e(Ga,Pb),e(Pb,Gj),e(Ga,Hj),e(Ga,Fb),e(Fb,Wj),e(Ga,Kj),$(i,o2,y),$(i,Ha,y),e(Ha,tr),e(tr,Lb),h(Fc,Lb,null),e(Ha,Yj),e(Ha,Ab),e(Ab,Jj),$(i,i2,y),$(i,zt,y),e(zt,Xj),e(zt,Ob),e(Ob,Zj),e(zt,Qj),e(zt,Jm),e(Jm,eC),e(zt,tC),$(i,l2,y),$(i,G,y),h(Lc,G,null),e(G,aC),e(G,Sb),e(Sb,sC),e(G,nC),e(G,ar),h(Ac,ar,null),e(ar,rC),e(ar,jb),e(jb,oC),e(G,iC),e(G,sr),h(Oc,sr,null),e(sr,lC),e(sr,Cb),e(Cb,dC),e(G,cC),e(G,Vt),h(Sc,Vt,null),e(Vt,pC),e(Vt,qb),e(qb,mC),e(Vt,hC),e(Vt,zb),e(zb,fC),e(G,uC),e(G,nr),h(jc,nr,null),e(nr,gC),e(nr,Vb),e(Vb,_C),$(i,d2,y),$(i,Wa,y),e(Wa,rr),e(rr,Mb),h(Cc,Mb,null),e(Wa,vC),e(Wa,Ub),e(Ub,bC),$(i,c2,y),$(i,k,y),h(qc,k,null),e(k,yC),e(k,Rb),e(Rb,$C),e(k,wC),e(k,Bb),e(Bb,DC),e(k,xC),e(k,pt),e(pt,EC),e(pt,Gb),e(Gb,kC),e(pt,IC),e(pt,Hb),e(Hb,TC),e(pt,NC),e(pt,Wb),e(Wb,PC),e(pt,FC),e(k,LC),e(k,Kb),e(Kb,AC),e(k,OC),e(k,Yb),e(Yb,SC),e(k,jC),e(k,Jb),e(Jb,CC),e(k,qC),e(k,Me),e(Me,Xb),e(Xb,zC),e(Me,VC),e(Me,zc),e(zc,MC),e(Me,UC),e(Me,Zb),e(Zb,RC),e(Me,BC),e(Me,Vc),e(Vc,GC),e(Me,HC),e(k,WC),e(k,Qb),e(Qb,KC),e(k,YC),e(k,ey),e(ey,JC),e(k,XC),h(Mc,k,null),e(k,ZC),e(k,Ka),e(Ka,QC),e(Ka,ty),e(ty,eq),e(Ka,tq),e(Ka,ay),e(ay,aq),e(Ka,sq),e(k,nq),h(Uc,k,null),e(k,rq),e(k,mt),e(mt,oq),e(mt,sy),e(sy,iq),e(mt,lq),e(mt,ny),e(ny,dq),e(mt,cq),e(mt,ry),e(ry,pq),e(mt,mq),e(k,hq),h(Rc,k,null),e(k,fq),e(k,Ya),e(Ya,uq),e(Ya,oy),e(oy,gq),e(Ya,_q),e(Ya,iy),e(iy,vq),e(Ya,bq),e(k,yq),h(Bc,k,null),e(k,$q),e(k,ly),e(ly,wq),e(k,Dq),h(Gc,k,null),e(k,xq),e(k,or),e(or,ir),e(ir,dy),h(Hc,dy,null),e(or,Eq),e(or,cy),e(cy,kq),e(k,Iq),e(k,M),e(M,Tq),e(M,py),e(py,Nq),e(M,Pq),e(M,my),e(my,Fq),e(M,Lq),e(M,hy),e(hy,Aq),e(M,Oq),e(M,fy),e(fy,Sq),e(M,jq),e(M,uy),e(uy,Cq),e(M,qq),e(M,gy),e(gy,zq),e(M,Vq),e(M,_y),e(_y,Mq),e(M,Uq),$(i,p2,y),$(i,Ja,y),h(Wc,Ja,null),e(Ja,Rq),e(Ja,Xa),e(Xa,Bq),e(Xa,vy),e(vy,Gq),e(Xa,Hq),e(Xa,by),e(by,Wq),e(Xa,Kq),$(i,m2,y),$(i,Za,y),h(Kc,Za,null),e(Za,Yq),e(Za,yy),e(yy,Jq),$(i,h2,y),$(i,Qa,y),e(Qa,lr),e(lr,$y),h(Yc,$y,null),e(Qa,Xq),e(Qa,wy),e(wy,Zq),$(i,f2,y),$(i,es,y),h(Jc,es,null),e(es,Qq),e(es,Dy),e(Dy,ez),u2=!0},p(i,[y]){const Xc={};y&2&&(Xc.$$scope={dirty:y,ctx:i}),Fn.$set(Xc)},i(i){u2||(f(he.$$.fragment,i),f(ut.$$.fragment,i),f(Mr.$$.fragment,i),f(Ur.$$.fragment,i),f(Br.$$.fragment,i),f(Gr.$$.fragment,i),f(Hr.$$.fragment,i),f(Wr.$$.fragment,i),f(Kr.$$.fragment,i),f(Yr.$$.fragment,i),f(Jr.$$.fragment,i),f(Xr.$$.fragment,i),f(eo.$$.fragment,i),f(to.$$.fragment,i),f(ao.$$.fragment,i),f(so.$$.fragment,i),f(no.$$.fragment,i),f(oo.$$.fragment,i),f(io.$$.fragment,i),f(lo.$$.fragment,i),f(co.$$.fragment,i),f(po.$$.fragment,i),f(mo.$$.fragment,i),f(ho.$$.fragment,i),f(fo.$$.fragment,i),f(uo.$$.fragment,i),f(_o.$$.fragment,i),f(vo.$$.fragment,i),f(yo.$$.fragment,i),f($o.$$.fragment,i),f(wo.$$.fragment,i),f(Do.$$.fragment,i),f(Eo.$$.fragment,i),f(Io.$$.fragment,i),f(To.$$.fragment,i),f(No.$$.fragment,i),f(Po.$$.fragment,i),f(Lo.$$.fragment,i),f(Ao.$$.fragment,i),f(Oo.$$.fragment,i),f(So.$$.fragment,i),f(jo.$$.fragment,i),f(qo.$$.fragment,i),f(Vo.$$.fragment,i),f(Mo.$$.fragment,i),f(Uo.$$.fragment,i),f(Ro.$$.fragment,i),f(Bo.$$.fragment,i),f(Go.$$.fragment,i),f(Ho.$$.fragment,i),f(Wo.$$.fragment,i),f(Yo.$$.fragment,i),f(Jo.$$.fragment,i),f(Xo.$$.fragment,i),f(Zo.$$.fragment,i),f(ei.$$.fragment,i),f(ti.$$.fragment,i),f(si.$$.fragment,i),f(ni.$$.fragment,i),f(oi.$$.fragment,i),f(ii.$$.fragment,i),f(li.$$.fragment,i),f(di.$$.fragment,i),f(ci.$$.fragment,i),f(pi.$$.fragment,i),f(mi.$$.fragment,i),f(hi.$$.fragment,i),f(fi.$$.fragment,i),f(ui.$$.fragment,i),f(gi.$$.fragment,i),f(_i.$$.fragment,i),f(vi.$$.fragment,i),f(bi.$$.fragment,i),f(yi.$$.fragment,i),f($i.$$.fragment,i),f(wi.$$.fragment,i),f(Di.$$.fragment,i),f(xi.$$.fragment,i),f(Ei.$$.fragment,i),f(ki.$$.fragment,i),f(Ii.$$.fragment,i),f(Ti.$$.fragment,i),f(Ni.$$.fragment,i),f(Pi.$$.fragment,i),f(Fi.$$.fragment,i),f(Li.$$.fragment,i),f(Ai.$$.fragment,i),f(Oi.$$.fragment,i),f(Si.$$.fragment,i),f(ji.$$.fragment,i),f(Ci.$$.fragment,i),f(qi.$$.fragment,i),f(Vi.$$.fragment,i),f(Mi.$$.fragment,i),f(Ui.$$.fragment,i),f(Ri.$$.fragment,i),f(Bi.$$.fragment,i),f(Hi.$$.fragment,i),f(Ki.$$.fragment,i),f(Yi.$$.fragment,i),f(Ji.$$.fragment,i),f(Xi.$$.fragment,i),f(Zi.$$.fragment,i),f(Qi.$$.fragment,i),f(el.$$.fragment,i),f(tl.$$.fragment,i),f(sl.$$.fragment,i),f(nl.$$.fragment,i),f(rl.$$.fragment,i),f(ol.$$.fragment,i),f(il.$$.fragment,i),f(ll.$$.fragment,i),f(dl.$$.fragment,i),f(cl.$$.fragment,i),f(pl.$$.fragment,i),f(hl.$$.fragment,i),f(ul.$$.fragment,i),f(gl.$$.fragment,i),f(vl.$$.fragment,i),f(bl.$$.fragment,i),f(yl.$$.fragment,i),f($l.$$.fragment,i),f(wl.$$.fragment,i),f(Dl.$$.fragment,i),f(El.$$.fragment,i),f(Il.$$.fragment,i),f(Tl.$$.fragment,i),f(Nl.$$.fragment,i),f(Pl.$$.fragment,i),f(Fl.$$.fragment,i),f(Ll.$$.fragment,i),f(Al.$$.fragment,i),f(Ol.$$.fragment,i),f(Sl.$$.fragment,i),f(jl.$$.fragment,i),f(Cl.$$.fragment,i),f(ql.$$.fragment,i),f(zl.$$.fragment,i),f(Vl.$$.fragment,i),f(Ml.$$.fragment,i),f(Rl.$$.fragment,i),f(Gl.$$.fragment,i),f(Wl.$$.fragment,i),f(Yl.$$.fragment,i),f(Jl.$$.fragment,i),f(Xl.$$.fragment,i),f(Zl.$$.fragment,i),f(Ql.$$.fragment,i),f(ed.$$.fragment,i),f(td.$$.fragment,i),f(ad.$$.fragment,i),f(sd.$$.fragment,i),f(nd.$$.fragment,i),f(rd.$$.fragment,i),f(od.$$.fragment,i),f(id.$$.fragment,i),f(ld.$$.fragment,i),f(dd.$$.fragment,i),f(cd.$$.fragment,i),f(md.$$.fragment,i),f(hd.$$.fragment,i),f(fd.$$.fragment,i),f(Fn.$$.fragment,i),f(yd.$$.fragment,i),f($d.$$.fragment,i),f(wd.$$.fragment,i),f(Dd.$$.fragment,i),f(xd.$$.fragment,i),f(Ed.$$.fragment,i),f(kd.$$.fragment,i),f(Id.$$.fragment,i),f(Td.$$.fragment,i),f(Nd.$$.fragment,i),f(Pd.$$.fragment,i),f(Fd.$$.fragment,i),f(Ld.$$.fragment,i),f(Ad.$$.fragment,i),f(Sd.$$.fragment,i),f(jd.$$.fragment,i),f(Cd.$$.fragment,i),f(qd.$$.fragment,i),f(Vd.$$.fragment,i),f(Md.$$.fragment,i),f(Ud.$$.fragment,i),f(Rd.$$.fragment,i),f(Bd.$$.fragment,i),f(Hd.$$.fragment,i),f(Kd.$$.fragment,i),f(Jd.$$.fragment,i),f(Zd.$$.fragment,i),f(Qd.$$.fragment,i),f(ic.$$.fragment,i),f(lc.$$.fragment,i),f(dc.$$.fragment,i),f(cc.$$.fragment,i),f(pc.$$.fragment,i),f(mc.$$.fragment,i),f($c.$$.fragment,i),f(wc.$$.fragment,i),f(Dc.$$.fragment,i),f(xc.$$.fragment,i),f(Ec.$$.fragment,i),f(kc.$$.fragment,i),f(Ic.$$.fragment,i),f(Tc.$$.fragment,i),f(Pc.$$.fragment,i),f(Fc.$$.fragment,i),f(Lc.$$.fragment,i),f(Ac.$$.fragment,i),f(Oc.$$.fragment,i),f(Sc.$$.fragment,i),f(jc.$$.fragment,i),f(Cc.$$.fragment,i),f(qc.$$.fragment,i),f(Mc.$$.fragment,i),f(Uc.$$.fragment,i),f(Rc.$$.fragment,i),f(Bc.$$.fragment,i),f(Gc.$$.fragment,i),f(Hc.$$.fragment,i),f(Wc.$$.fragment,i),f(Kc.$$.fragment,i),f(Yc.$$.fragment,i),f(Jc.$$.fragment,i),u2=!0)},o(i){u(he.$$.fragment,i),u(ut.$$.fragment,i),u(Mr.$$.fragment,i),u(Ur.$$.fragment,i),u(Br.$$.fragment,i),u(Gr.$$.fragment,i),u(Hr.$$.fragment,i),u(Wr.$$.fragment,i),u(Kr.$$.fragment,i),u(Yr.$$.fragment,i),u(Jr.$$.fragment,i),u(Xr.$$.fragment,i),u(eo.$$.fragment,i),u(to.$$.fragment,i),u(ao.$$.fragment,i),u(so.$$.fragment,i),u(no.$$.fragment,i),u(oo.$$.fragment,i),u(io.$$.fragment,i),u(lo.$$.fragment,i),u(co.$$.fragment,i),u(po.$$.fragment,i),u(mo.$$.fragment,i),u(ho.$$.fragment,i),u(fo.$$.fragment,i),u(uo.$$.fragment,i),u(_o.$$.fragment,i),u(vo.$$.fragment,i),u(yo.$$.fragment,i),u($o.$$.fragment,i),u(wo.$$.fragment,i),u(Do.$$.fragment,i),u(Eo.$$.fragment,i),u(Io.$$.fragment,i),u(To.$$.fragment,i),u(No.$$.fragment,i),u(Po.$$.fragment,i),u(Lo.$$.fragment,i),u(Ao.$$.fragment,i),u(Oo.$$.fragment,i),u(So.$$.fragment,i),u(jo.$$.fragment,i),u(qo.$$.fragment,i),u(Vo.$$.fragment,i),u(Mo.$$.fragment,i),u(Uo.$$.fragment,i),u(Ro.$$.fragment,i),u(Bo.$$.fragment,i),u(Go.$$.fragment,i),u(Ho.$$.fragment,i),u(Wo.$$.fragment,i),u(Yo.$$.fragment,i),u(Jo.$$.fragment,i),u(Xo.$$.fragment,i),u(Zo.$$.fragment,i),u(ei.$$.fragment,i),u(ti.$$.fragment,i),u(si.$$.fragment,i),u(ni.$$.fragment,i),u(oi.$$.fragment,i),u(ii.$$.fragment,i),u(li.$$.fragment,i),u(di.$$.fragment,i),u(ci.$$.fragment,i),u(pi.$$.fragment,i),u(mi.$$.fragment,i),u(hi.$$.fragment,i),u(fi.$$.fragment,i),u(ui.$$.fragment,i),u(gi.$$.fragment,i),u(_i.$$.fragment,i),u(vi.$$.fragment,i),u(bi.$$.fragment,i),u(yi.$$.fragment,i),u($i.$$.fragment,i),u(wi.$$.fragment,i),u(Di.$$.fragment,i),u(xi.$$.fragment,i),u(Ei.$$.fragment,i),u(ki.$$.fragment,i),u(Ii.$$.fragment,i),u(Ti.$$.fragment,i),u(Ni.$$.fragment,i),u(Pi.$$.fragment,i),u(Fi.$$.fragment,i),u(Li.$$.fragment,i),u(Ai.$$.fragment,i),u(Oi.$$.fragment,i),u(Si.$$.fragment,i),u(ji.$$.fragment,i),u(Ci.$$.fragment,i),u(qi.$$.fragment,i),u(Vi.$$.fragment,i),u(Mi.$$.fragment,i),u(Ui.$$.fragment,i),u(Ri.$$.fragment,i),u(Bi.$$.fragment,i),u(Hi.$$.fragment,i),u(Ki.$$.fragment,i),u(Yi.$$.fragment,i),u(Ji.$$.fragment,i),u(Xi.$$.fragment,i),u(Zi.$$.fragment,i),u(Qi.$$.fragment,i),u(el.$$.fragment,i),u(tl.$$.fragment,i),u(sl.$$.fragment,i),u(nl.$$.fragment,i),u(rl.$$.fragment,i),u(ol.$$.fragment,i),u(il.$$.fragment,i),u(ll.$$.fragment,i),u(dl.$$.fragment,i),u(cl.$$.fragment,i),u(pl.$$.fragment,i),u(hl.$$.fragment,i),u(ul.$$.fragment,i),u(gl.$$.fragment,i),u(vl.$$.fragment,i),u(bl.$$.fragment,i),u(yl.$$.fragment,i),u($l.$$.fragment,i),u(wl.$$.fragment,i),u(Dl.$$.fragment,i),u(El.$$.fragment,i),u(Il.$$.fragment,i),u(Tl.$$.fragment,i),u(Nl.$$.fragment,i),u(Pl.$$.fragment,i),u(Fl.$$.fragment,i),u(Ll.$$.fragment,i),u(Al.$$.fragment,i),u(Ol.$$.fragment,i),u(Sl.$$.fragment,i),u(jl.$$.fragment,i),u(Cl.$$.fragment,i),u(ql.$$.fragment,i),u(zl.$$.fragment,i),u(Vl.$$.fragment,i),u(Ml.$$.fragment,i),u(Rl.$$.fragment,i),u(Gl.$$.fragment,i),u(Wl.$$.fragment,i),u(Yl.$$.fragment,i),u(Jl.$$.fragment,i),u(Xl.$$.fragment,i),u(Zl.$$.fragment,i),u(Ql.$$.fragment,i),u(ed.$$.fragment,i),u(td.$$.fragment,i),u(ad.$$.fragment,i),u(sd.$$.fragment,i),u(nd.$$.fragment,i),u(rd.$$.fragment,i),u(od.$$.fragment,i),u(id.$$.fragment,i),u(ld.$$.fragment,i),u(dd.$$.fragment,i),u(cd.$$.fragment,i),u(md.$$.fragment,i),u(hd.$$.fragment,i),u(fd.$$.fragment,i),u(Fn.$$.fragment,i),u(yd.$$.fragment,i),u($d.$$.fragment,i),u(wd.$$.fragment,i),u(Dd.$$.fragment,i),u(xd.$$.fragment,i),u(Ed.$$.fragment,i),u(kd.$$.fragment,i),u(Id.$$.fragment,i),u(Td.$$.fragment,i),u(Nd.$$.fragment,i),u(Pd.$$.fragment,i),u(Fd.$$.fragment,i),u(Ld.$$.fragment,i),u(Ad.$$.fragment,i),u(Sd.$$.fragment,i),u(jd.$$.fragment,i),u(Cd.$$.fragment,i),u(qd.$$.fragment,i),u(Vd.$$.fragment,i),u(Md.$$.fragment,i),u(Ud.$$.fragment,i),u(Rd.$$.fragment,i),u(Bd.$$.fragment,i),u(Hd.$$.fragment,i),u(Kd.$$.fragment,i),u(Jd.$$.fragment,i),u(Zd.$$.fragment,i),u(Qd.$$.fragment,i),u(ic.$$.fragment,i),u(lc.$$.fragment,i),u(dc.$$.fragment,i),u(cc.$$.fragment,i),u(pc.$$.fragment,i),u(mc.$$.fragment,i),u($c.$$.fragment,i),u(wc.$$.fragment,i),u(Dc.$$.fragment,i),u(xc.$$.fragment,i),u(Ec.$$.fragment,i),u(kc.$$.fragment,i),u(Ic.$$.fragment,i),u(Tc.$$.fragment,i),u(Pc.$$.fragment,i),u(Fc.$$.fragment,i),u(Lc.$$.fragment,i),u(Ac.$$.fragment,i),u(Oc.$$.fragment,i),u(Sc.$$.fragment,i),u(jc.$$.fragment,i),u(Cc.$$.fragment,i),u(qc.$$.fragment,i),u(Mc.$$.fragment,i),u(Uc.$$.fragment,i),u(Rc.$$.fragment,i),u(Bc.$$.fragment,i),u(Gc.$$.fragment,i),u(Hc.$$.fragment,i),u(Wc.$$.fragment,i),u(Kc.$$.fragment,i),u(Yc.$$.fragment,i),u(Jc.$$.fragment,i),u2=!1},d(i){t(A),i&&t(ht),i&&t(S),g(he),i&&t(ss),i&&t(fe),g(ut),i&&t(Ey),i&&t(U),g(Mr),g(Ur),g(Br),i&&t(ky),i&&t(oa),g(Gr),i&&t(Iy),i&&t(os),i&&t(Ty),i&&t(v),g(Hr),g(Wr),g(Kr),g(Yr),g(Jr),g(Xr),g(eo),g(to),g(ao),g(so),g(no),g(oo),g(io),g(lo),g(co),g(po),g(mo),g(ho),g(fo),g(uo),g(_o),g(vo),g(yo),g($o),g(wo),g(Do),g(Eo),g(Io),g(To),g(No),g(Po),g(Lo),g(Ao),g(Oo),g(So),g(jo),g(qo),g(Vo),g(Mo),g(Uo),g(Ro),g(Bo),g(Go),g(Ho),g(Wo),g(Yo),g(Jo),g(Xo),g(Zo),g(ei),g(ti),g(si),g(ni),g(oi),g(ii),g(li),g(di),g(ci),g(pi),g(mi),g(hi),g(fi),g(ui),g(gi),g(_i),g(vi),g(bi),g(yi),g($i),g(wi),g(Di),g(xi),g(Ei),g(ki),g(Ii),g(Ti),g(Ni),g(Pi),g(Fi),g(Li),g(Ai),g(Oi),g(Si),g(ji),g(Ci),g(qi),g(Vi),i&&t(Ny),i&&t(ba),g(Mi),i&&t(Py),i&&t(C),g(Ui),g(Ri),i&&t(Fy),i&&t(te),g(Bi),i&&t(Ly),i&&t(ae),g(Hi),i&&t(Ay),i&&t(wa),g(Ki),i&&t(Oy),i&&t(Da),g(Yi),i&&t(Sy),i&&t(xa),g(Ji),i&&t(jy),i&&t(Zs),i&&t(Cy),i&&t(w),g(Xi),g(Zi),g(Qi),g(el),g(tl),g(sl),g(nl),g(rl),g(ol),g(il),g(ll),g(dl),g(cl),g(pl),g(hl),g(ul),g(gl),g(vl),g(bl),g(yl),g($l),g(wl),g(Dl),g(El),g(Il),g(Tl),g(Nl),g(Pl),g(Fl),g(Ll),g(Al),g(Ol),g(Sl),i&&t(qy),i&&t(om),i&&t(zy),i&&t(ja),g(jl),i&&t(Vy),i&&t($n),i&&t(My),i&&t(x),g(Cl),g(ql),g(zl),g(Vl),g(Ml),g(Rl),g(Gl),g(Wl),g(Yl),g(Jl),g(Xl),g(Zl),g(Ql),g(ed),g(td),g(ad),g(sd),g(nd),g(rd),g(od),g(id),g(ld),g(dd),i&&t(Uy),i&&t(za),g(cd),i&&t(Ry),i&&t(Nn),i&&t(By),i&&t(pd),g(md),i&&t(Gy),i&&t(Va),g(hd),i&&t(Hy),i&&t(T),g(fd),g(Fn),g(yd),g($d),g(wd),g(Dd),g(xd),g(Ed),g(kd),g(Id),g(Td),g(Nd),g(Pd),g(Fd),i&&t(Wy),i&&t(Ma),g(Ld),i&&t(Ky),i&&t(R),g(Ad),g(Sd),g(jd),i&&t(Yy),i&&t(dt),g(Cd),i&&t(Jy),i&&t(z),g(qd),g(Vd),g(Md),i&&t(Xy),i&&t(V),g(Ud),g(Rd),g(Bd),i&&t(Zy),i&&t(Gd),g(Hd),i&&t(Qy),i&&t(Wd),g(Kd),i&&t(e2),i&&t(Yd),g(Jd),i&&t(t2),i&&t(Xd),g(Zd),i&&t(a2),i&&t(P),g(Qd),g(ic),g(lc),g(dc),g(cc),g(pc),i&&t(s2),i&&t(F),g(mc),g($c),g(wc),g(Dc),g(xc),g(Ec),i&&t(n2),i&&t(Ba),g(kc),i&&t(r2),i&&t(B),g(Ic),g(Tc),g(Pc),i&&t(o2),i&&t(Ha),g(Fc),i&&t(i2),i&&t(zt),i&&t(l2),i&&t(G),g(Lc),g(Ac),g(Oc),g(Sc),g(jc),i&&t(d2),i&&t(Wa),g(Cc),i&&t(c2),i&&t(k),g(qc),g(Mc),g(Uc),g(Rc),g(Bc),g(Gc),g(Hc),i&&t(p2),i&&t(Ja),g(Wc),i&&t(m2),i&&t(Za),g(Kc),i&&t(h2),i&&t(Qa),g(Yc),i&&t(f2),i&&t(es),g(Jc)}}}const YK={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.IterableDatasetDict",title:"IterableDatasetDict"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function JK(af,A,ht){let{fw:S}=A;return af.$$set=Q=>{"fw"in Q&&ht(0,S=Q.fw)},[S]}class aY extends UK{constructor(A){super();RK(this,A,JK,KK,BK,{fw:0})}}export{aY as default,YK as metadata};
