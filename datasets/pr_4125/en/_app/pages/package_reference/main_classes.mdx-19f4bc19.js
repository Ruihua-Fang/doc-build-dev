import{S as Mae,i as Rae,s as Bae,e as n,k as d,w as _,t as l,M as Hae,c as r,d as a,m,a as o,x as b,h as i,b as j,F as e,g as D,y as $,q as x,o as v,B as y,v as Gae,L as N}from"../../chunks/vendor-8138ceec.js";import{T as Wae}from"../../chunks/Tip-12722dfc.js";import{D as E}from"../../chunks/Docstring-6fa3bd37.js";import{C as P}from"../../chunks/CodeBlock-fc89709f.js";import{I as Tt}from"../../chunks/IconCopyLink-2dd3a6ac.js";import{E as T}from"../../chunks/ExampleCodeBlock-25dbadc2.js";function Kae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import DatasetInfo
ds_info = DatasetInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_info = DatasetInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Yae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Jae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
more_text = ds["text"]
ds.add_column(name="text_2", column=more_text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>more_text = ds[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_column(name=<span class="hljs-string">&quot;text_2&quot;</span>, column=more_text)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;text_2&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Zae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
new_review = {'label': 0, 'text': 'this movie is the absolute worst thing I have ever seen'}
ds = ds.add_item(new_review)
ds[-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>new_review = {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.add_item(new_review)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[-<span class="hljs-number">1</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Xae(k){let c,g,f,p,u;return p=new P({props:{code:"ds = Dataset.from_pandas(df)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_pandas(df)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Qae(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data
MemoryMappedTable
text: string
label: int64
----
text: [[<span class="hljs-string">&quot;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&quot;</span>,<span class="hljs-string">&quot;the soundtrack alone is worth the price of admission .&quot;</span>,<span class="hljs-string">&quot;rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&quot;</span>,<span class="hljs-string">&quot;beneath the film&#x27;s obvious determination to shock at any cost lies considerable skill and determination , backed by sheer nerve .&quot;</span>,<span class="hljs-string">&quot;bielinsky is a filmmaker of impressive talent .&quot;</span>,<span class="hljs-string">&quot;so beautifully acted and directed , it&#x27;s clear that washington most certainly has a new career ahead of him if he so chooses .&quot;</span>,<span class="hljs-string">&quot;a visual spectacle full of stunning images and effects .&quot;</span>,<span class="hljs-string">&quot;a gentle and engrossing character study .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s enough to watch huppert scheming , with her small , intelligent eyes as steady as any noir villain , and to enjoy the perfectly pitched web of tension that chabrol spins .&quot;</span>,<span class="hljs-string">&quot;an engrossing portrait of uncompromising artists trying to create something original against the backdrop of a corporate music industry that only seems to care about the bottom line .&quot;</span>,...,<span class="hljs-string">&quot;ultimately , jane learns her place as a girl , softens up and loses some of the intensity that made her an interesting character to begin with .&quot;</span>,<span class="hljs-string">&quot;ah-nuld&#x27;s action hero days might be over .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s clear why deuces wild , which was shot two years ago , has been gathering dust on mgm&#x27;s shelf .&quot;</span>,<span class="hljs-string">&quot;feels like nothing quite so much as a middle-aged moviemaker&#x27;s attempt to surround himself with beautiful , half-naked women .&quot;</span>,<span class="hljs-string">&quot;when the precise nature of matthew&#x27;s predicament finally comes into sharp focus , the revelation fails to justify the build-up .&quot;</span>,<span class="hljs-string">&quot;this picture is murder by numbers , and as easy to be bored by as your abc&#x27;s , despite a few whopping shootouts .&quot;</span>,<span class="hljs-string">&quot;hilarious musical comedy though stymied by accents thick as mud .&quot;</span>,<span class="hljs-string">&quot;if you are into splatter movies , then you will probably have a reasonably good time with the salton sea .&quot;</span>,<span class="hljs-string">&quot;a dull , simple-minded and stereotypical tale of drugs , death and mind-numbing indifference on the inner-city streets .&quot;</span>,<span class="hljs-string">&quot;the feature-length stretch . . . strains the show&#x27;s concept .&quot;</span>]]
label: [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,...,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ese(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
[{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function tse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
<span class="hljs-number">2</span>`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ase(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
<span class="hljs-number">1066</span>`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function sse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function nse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
(<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function rse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.unique('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&#x27;label&#x27;</span>)
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ose(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
    num_rows: <span class="hljs-number">87599</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function lse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset, ClassLabel, Value
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
new_features = ds.features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ise(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function pse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.remove_columns('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&#x27;label&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function cse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_column('label', 'label_new')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function dse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
Dataset({
    features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function mse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq", split="validation")
ds.features
ds = ds.class_encode_column('answer')
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&#x27;answer&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function hse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.__len__`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.__len__
&lt;bound method Dataset.__len__ of Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})&gt;`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function fse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['text', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function use(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')
def encode(batch):
    return tokenizer(batch['text'], padding=True, truncation=True, return_tensors='pt')
ds.set_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&#x27;text&#x27;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">29353</span>,  <span class="hljs-number">2135</span>, <span class="hljs-number">15102</span>,  <span class="hljs-number">1996</span>,  <span class="hljs-number">9428</span>, <span class="hljs-number">20868</span>,  <span class="hljs-number">2890</span>,  <span class="hljs-number">8663</span>,  <span class="hljs-number">6895</span>,
         <span class="hljs-number">20470</span>,  <span class="hljs-number">2571</span>,  <span class="hljs-number">3663</span>,  <span class="hljs-number">2090</span>,  <span class="hljs-number">4603</span>,  <span class="hljs-number">3017</span>,  <span class="hljs-number">3008</span>,  <span class="hljs-number">1998</span>,  <span class="hljs-number">2037</span>, <span class="hljs-number">24211</span>,
         <span class="hljs-number">5637</span>,  <span class="hljs-number">1998</span>, <span class="hljs-number">11690</span>,  <span class="hljs-number">2336</span>,  <span class="hljs-number">1012</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function gse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format
ds.reset_format()
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function _se(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function bse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example["text"], padding=True, truncation=True, return_tensors='pt')
ds = ds.with_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
         <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
         <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function $se(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
<span class="hljs-number">10</span>`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function xse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds[0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the soundtrack alone is worth the price of admission .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function vse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function yse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.select(range(4))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.select(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">4</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function jse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]
sorted_ds = ds.sort('label')
sorted_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&#x27;label&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function wse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Dse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds = ds.train_test_split(test_size=0.2, shuffle=True)

ds = ds.train_test_split(test_size=0.2, seed=42)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, shuffle=<span class="hljs-literal">True</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">852</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">214</span>
    })
})

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, seed=<span class="hljs-number">42</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function kse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds
ds.shard(num_shards=2, index=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shard(num_shards=<span class="hljs-number">2</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ese(k){let c,g,f,p,u;return p=new P({props:{code:`ds_train = ds["train"].to_tf_dataset(
   columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'],
   shuffle=True,
   batch_size=16,
   collate_fn=data_collator,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds_train = ds[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>   columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
<span class="hljs-meta">... </span>   shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>   batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>   collate_fn=data_collator,
<span class="hljs-meta">... </span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ise(k){let c,g,f,p,u;return p=new P({props:{code:'dataset.push_to_hub("<organization>/<dataset_id>", split="evaluation")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;evaluation&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function qse(k){let c,g,f,p,u;return p=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=n("p"),g=l("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Tse(k){let c,g;return c=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Nse(k){let c,g,f,p,u;return p=new P({props:{code:'saved_ds = ds.save_to_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>saved_ds = ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Pse(k){let c,g,f,p,u;return p=new P({props:{code:'ds = load_from_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Lse(k){let c,g,f,p,u;return p=new P({props:{code:'ds.to_csv("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_csv(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ase(k){let c,g,f,p,u;return p=new P({props:{code:"ds.to_pandas()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_pandas()'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Fse(k){let c,g,f,p,u;return p=new P({props:{code:"ds.to_dict()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_dict()'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ose(k){let c,g,f,p,u;return p=new P({props:{code:'ds.to_json("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_json(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Sse(k){let c,g,f,p,u;return p=new P({props:{code:'ds.to_parquet("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_parquet(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Cse(k){let c,g,f,p,u;return p=new P({props:{code:`ds = datasets.load_dataset('crime_and_punish', split='train')
ds_with_embeddings = ds.map(lambda example: {'embeddings': embed(example['line']}))
ds_with_embeddings.add_faiss_index(column='embeddings')
# query
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples('embeddings', embed('my new query'), k=10)
# save index
ds_with_embeddings.save_faiss_index('embeddings', 'my_index.faiss')

ds = datasets.load_dataset('crime_and_punish', split='train')
# load index
ds.load_faiss_index('embeddings', 'my_index.faiss')
# query
scores, retrieved_examples = ds.get_nearest_examples('embeddings', embed('my new query'), k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># save index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function zse(k){let c,g,f,p,u;return p=new P({props:{code:`es_client = elasticsearch.Elasticsearch()
ds = datasets.load_dataset('crime_and_punish', split='train')
ds.add_elasticsearch_index(column='line', es_client=es_client, es_index_name="my_es_index")
scores, retrieved_examples = ds.get_nearest_examples('line', 'my new query', k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>es_client = elasticsearch.Elasticsearch()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Vse(k){let c,g,f,p,u;return p=new P({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),{c(){c=n("p"),g=l("Default config is:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Default config is:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Use(k){let c,g,f,p,u;return p=new P({props:{code:"ds = Dataset.from_csv('path/to/dataset.csv')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_csv(<span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Mse(k){let c,g,f,p,u;return p=new P({props:{code:"ds = Dataset.from_json('path/to/dataset.json')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_json(<span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Rse(k){let c,g,f,p,u;return p=new P({props:{code:"ds = Dataset.from_parquet('path/to/dataset.parquet')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_parquet(<span class="hljs-string">&#x27;path/to/dataset.parquet&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Bse(k){let c,g,f,p,u;return p=new P({props:{code:"ds = Dataset.from_text('path/to/dataset.txt')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_text(<span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Hse(k){let c,g,f,p,u;return p=new P({props:{code:`# dataset with mapping {'entailment': 0, 'neutral': 1, 'contradiction': 2}
ds = load_dataset("glue", "mnli", split="train")
# mapping to align with
label2id = {'CONTRADICTION': 0, 'NEUTRAL': 1, 'ENTAILMENT': 2}
ds_aligned = ds.align_labels_with_mapping(label2id, "label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mapping to align with</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Gse(k){let c,g,f,p,u;return p=new P({props:{code:"ds3 = concatenate_datasets([ds1, ds2])",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds3 = concatenate_datasets([ds1, ds2])'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Wse(k){let c,g,f,p,u;return p=new P({props:{code:`For regular datasets (map-style):

>>> from datasets import Dataset, interleave_datasets
>>> d1 = Dataset.from_dict({"a": [0, 1, 2]})
>>> d2 = Dataset.from_dict({"a": [10, 11, 12]})
>>> d3 = Dataset.from_dict({"a": [20, 21, 22]})
>>> dataset = interleave_datasets([d1, d2, d3])
>>> dataset["a"]
[0, 10, 20, 1, 11, 21, 2, 12, 22]
>>> dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
>>> dataset["a"]
[10, 0, 11, 1, 2, 20, 12]

For datasets in streaming mode (iterable):

>>> from datasets import load_dataset, interleave_datasets
>>> d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
>>> d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
>>> dataset = interleave_datasets([d1, d2])
>>> iterator = iter(dataset)
>>> next(iterator)
{'text': 'Mtendere Village was inspired by the vision...
>>> next(iterator)
{'text': "M\xE9dia de d\xE9bat d'id\xE9es, de culture...`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>]

For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Kse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Yse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
{<span class="hljs-string">&#x27;test&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-test.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;train&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-train.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Jse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">2</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Zse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">1066</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">8530</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">1066</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Xse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Qse(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
{<span class="hljs-string">&#x27;test&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;train&#x27;</span>: (<span class="hljs-number">8530</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;validation&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ene(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.unique("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&quot;label&quot;</span>)
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function tne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">0</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ane(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds["train"][0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function sne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">4265</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function nne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]
sorted_ds = ds.sort("label")
sorted_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function rne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function one(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function lne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format
ds.reset_format()
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ine(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds["train"].format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function pne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example['text'], truncation=True, padding=True, return_tensors="pt")
ds = ds.with_transform(encode)
ds["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">2067</span>,  <span class="hljs-number">1110</span>, <span class="hljs-number">17348</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1129</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">6880</span>,  <span class="hljs-number">1432</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1207</span>,   <span class="hljs-number">107</span>, <span class="hljs-number">14255</span>,  <span class="hljs-number">1389</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1105</span>,  <span class="hljs-number">1115</span>,  <span class="hljs-number">1119</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1280</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1294</span>,   <span class="hljs-number">170</span>, <span class="hljs-number">24194</span>,  <span class="hljs-number">1256</span>,  <span class="hljs-number">3407</span>,  <span class="hljs-number">1190</span>,
        <span class="hljs-number">170</span>, <span class="hljs-number">11791</span>,  <span class="hljs-number">5253</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1732</span>,  <span class="hljs-number">7200</span>, <span class="hljs-number">10947</span>, <span class="hljs-number">12606</span>,  <span class="hljs-number">2895</span>,   <span class="hljs-number">117</span>,
        <span class="hljs-number">179</span>,  <span class="hljs-number">7766</span>,   <span class="hljs-number">118</span>,   <span class="hljs-number">172</span>, <span class="hljs-number">15554</span>,  <span class="hljs-number">1181</span>,  <span class="hljs-number">3498</span>,  <span class="hljs-number">6961</span>,  <span class="hljs-number">3263</span>,  <span class="hljs-number">1137</span>,
        <span class="hljs-number">188</span>,  <span class="hljs-number">1566</span>,  <span class="hljs-number">7912</span>, <span class="hljs-number">14516</span>,  <span class="hljs-number">6997</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function cne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad")
ds["train"].features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">87599</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">10570</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function dne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function mne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function hne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.remove_columns("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function fne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_column("label", "label_new")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;label&quot;</span>, <span class="hljs-string">&quot;label_new&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function une(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function gne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq")
ds["train"].features
ds = ds.class_encode_column("answer")
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&quot;answer&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function _ne(k){let c,g,f,p,u;return p=new P({props:{code:'dataset_dict.push_to_hub("<organization>/<dataset_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function bne(k){let c,g,f,p,u;return p=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=n("p"),g=l("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function $ne(k){let c,g;return c=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function xne(k){let c,g,f,p,u;return p=new P({props:{code:"ds = load_from_disk('path/to/dataset/directory')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&#x27;path/to/dataset/directory&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function vne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_csv({'train': 'path/to/dataset.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_csv({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function yne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_json({'train': 'path/to/dataset.json'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_json({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function jne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_parquet({'train': 'path/to/dataset/parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_parquet({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset/parquet&#x27;</span>})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function wne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_text({'train': 'path/to/dataset.txt'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_text({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Dne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds = ds.remove_columns("label")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function kne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train", streaming=True)
ds.features
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">8000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ene(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds.features
new_features = ds.features.copy()
new_features["label"] = ClassLabel(names=["bad", "good"])
new_features["text"] = Value("large_string")
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&quot;bad&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;text&quot;</span>] = Value(<span class="hljs-string">&quot;large_string&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ine(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function qne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds.rename_column("text", "movie_review")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Tne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&quot;it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Nne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
shuffled_ds = ds.shuffle(seed=42)
list(shuffled_ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(shuffled_ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Pne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
ds = ds.skip(1)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.skip(<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;if you sometimes like to go to the movies to have fun , wasabi is a good place to start .&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Lne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
small_ds = ds.take(2)
list(small_ds)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>small_ds = ds.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(small_ds)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ane(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Fne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;Review: it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function One(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
list(ds["train"].take(3))
ds = ds.shuffle(seed=42)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Sne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
def encode(example):
    return tokenizer(examples["text"], truncation=True, padding="max_length")
ds = ds.map(encode, batched=True, remove_columns=["text"])
ds = ds.with_format("torch")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-string">&quot;max_length&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(encode, batched=<span class="hljs-literal">True</span>, remove_columns=[<span class="hljs-string">&quot;text&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Cne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function zne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Vne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.remove_columns("label")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Une(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_column("text", "movie_review")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Mne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_columns({"text": "movie_review", "label": "rating"})
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_columns({<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;movie_review&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;rating&quot;</span>})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;rating&#x27;</span>: <span class="hljs-number">1</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Rne(k){let c,g,f,p,u,t,h,Zs,ra,$r,Se;return{c(){c=n("p"),g=l("A "),f=n("a"),p=l("datasets.Sequence"),u=l(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=n("code"),h=l("list"),Zs=l(` instead of the
`),ra=n("a"),$r=l("datasets.Sequence"),Se=l("."),this.h()},l($e){c=r($e,"P",{});var ne=o(c);g=i(ne,"A "),f=r(ne,"A",{href:!0});var oa=o(f);p=i(oa,"datasets.Sequence"),oa.forEach(a),u=i(ne,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=r(ne,"CODE",{});var Tf=o(t);h=i(Tf,"list"),Tf.forEach(a),Zs=i(ne,` instead of the
`),ra=r(ne,"A",{href:!0});var xr=o(ra);$r=i(xr,"datasets.Sequence"),xr.forEach(a),Se=i(ne,"."),ne.forEach(a),this.h()},h(){j(f,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Sequence"),j(ra,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Sequence")},m($e,ne){D($e,c,ne),e(c,g),e(c,f),e(f,p),e(c,u),e(c,t),e(t,h),e(c,Zs),e(c,ra),e(ra,$r),e(c,Se)},d($e){$e&&a(c)}}}function Bne(k){let c,g,f,p,u;return p=new P({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Hne(k){let c,g,f,p,u;return p=new P({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Gne(k){let c,g,f,p,u;return p=new P({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': 'le chat',
        'de': 'die katze'
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Wne(k){let c,g,f,p,u;return p=new P({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': ['le chat', 'la chatte,']
        'de': 'die katze'
}
# Tensor returned :
{
        'language': ['en', 'de', 'fr', 'fr'],
        'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tensor returned :</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>{
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
<span class="hljs-meta">... </span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:N,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Kne(k){let c,g;return c=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(anon=True)  # doctest: +SKIP
s3.ls('public-datasets/imdb/train')  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(anon=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;public-datasets/imdb/train&#x27;</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Yne(k){let c,g;return c=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
s3.ls('my-private-datasets/imdb/train')  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;my-private-datasets/imdb/train&#x27;</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Jne(k){let c,g;return c=new P({props:{code:`import botocore
from datasets.filesystems import S3Filesystem
s3_session = botocore.session.Session(profile_name='my_profile_name')
s3 = S3FileSystem(session=s3_session)  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile_name=<span class="hljs-string">&#x27;my_profile_name&#x27;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(session=s3_session)  <span class="hljs-comment"># doctest: +SKIP</span>`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Zne(k){let c,g;return c=new P({props:{code:`from datasets import load_from_disk
from datasets.filesystems import S3Filesystem
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
dataset = load_from_disk('s3://my-private-datasets/imdb/train',fs=s3)  # doctest: +SKIP
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>,fs=s3)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Xne(k){let c,g;return c=new P({props:{code:`from datasets import load_dataset
from datasets.filesystems import S3Filesystem
dataset = load_dataset("imdb")
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
dataset.save_to_disk('s3://my-private-datasets/imdb/train',fs=s3)  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.save_to_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>,fs=s3)  <span class="hljs-comment"># doctest: +SKIP</span>`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Qne(k){let c,g,f,p,u,t,h,Zs,ra,$r,Se,$e,ne,oa,Tf,xr,hD,Lw,Z,cp,fD,Pb,uD,gD,Nf,Lb,_D,bD,$D,Ab,xD,vD,xe,dp,yD,mp,jD,Fb,wD,DD,kD,Ob,ED,ID,Sb,qD,TD,vr,ND,la,hp,PD,Xs,LD,Cb,AD,FD,zb,OD,SD,CD,yr,Aw,Qs,jr,Vb,fp,zD,Ub,VD,Fw,wr,UD,Pf,MD,RD,Ow,I,up,BD,Mb,HD,GD,Qe,gp,WD,Rb,KD,YD,Bb,Hb,JD,ZD,Dr,XD,et,_p,QD,Gb,ek,tk,Wb,Kb,ak,sk,kr,nk,Er,bp,rk,Yb,ok,lk,Ir,$p,ik,Jb,pk,ck,ve,xp,dk,Nt,mk,Zb,hk,fk,Xb,uk,gk,Lf,_k,bk,$k,vp,xk,Qb,vk,yk,jk,yp,wk,e2,Dk,kk,Ek,qr,Ik,Tr,jp,qk,Pt,Tk,t2,Nk,Pk,a2,Lk,Ak,Af,Fk,Ok,Sk,ia,wp,Ck,s2,zk,Vk,Nr,Uk,pa,Dp,Mk,n2,Rk,Bk,Pr,Hk,ca,kp,Gk,r2,Wk,Kk,Lr,Yk,da,Ep,Jk,Ip,Zk,Ar,Xk,o2,Qk,e5,t5,a5,Fr,s5,ma,qp,n5,l2,r5,o5,Or,l5,ha,Tp,i5,i2,p5,c5,Sr,d5,tt,Np,m5,p2,h5,f5,c2,u5,g5,Cr,_5,fa,Pp,b5,d2,$5,x5,zr,v5,ua,Lp,y5,m2,j5,w5,Vr,D5,ga,Ap,k5,h2,E5,I5,Ur,q5,at,Fp,T5,f2,N5,P5,en,L5,Ff,A5,F5,u2,O5,S5,C5,Mr,z5,_a,Op,V5,g2,U5,M5,Rr,R5,ba,Sp,B5,_2,H5,G5,Br,W5,$a,Cp,K5,zp,Y5,b2,J5,Z5,X5,Hr,Q5,xa,Vp,e3,$2,t3,a3,Gr,s3,va,Up,n3,x2,r3,o3,Mp,l3,Of,i3,p3,c3,Wr,Rp,d3,tn,m3,v2,h3,f3,y2,u3,g3,_3,ye,Bp,b3,Ce,$3,j2,x3,v3,w2,y3,j3,D2,w3,D3,Sf,k3,E3,I3,ze,q3,k2,T3,N3,E2,P3,L3,I2,A3,F3,q2,O3,S3,C3,T2,z3,V3,Kr,U3,ya,Hp,M3,st,R3,N2,B3,H3,P2,G3,W3,Cf,K3,Y3,zf,J3,Z3,Yr,X3,nt,Gp,Q3,Wp,eE,L2,tE,aE,sE,Vf,nE,A2,rE,oE,Jr,lE,je,Kp,iE,Lt,pE,F2,cE,dE,O2,mE,hE,S2,fE,uE,gE,Yp,_E,Uf,bE,$E,xE,an,vE,Mf,yE,jE,C2,wE,DE,kE,Zr,EE,we,Jp,IE,sn,qE,z2,TE,NE,V2,PE,LE,AE,nn,FE,Rf,OE,SE,Bf,CE,zE,VE,rn,UE,Hf,ME,RE,U2,BE,HE,GE,Xr,WE,Qr,Zp,KE,M2,YE,JE,rt,Xp,ZE,R2,XE,QE,B2,e6,t6,eo,a6,De,Qp,s6,H2,n6,r6,ec,o6,G2,l6,i6,p6,on,W2,c6,d6,K2,m6,h6,me,f6,Y2,u6,g6,J2,_6,b6,Z2,$6,x6,X2,v6,y6,Q2,j6,w6,D6,to,k6,ja,tc,E6,e1,I6,q6,ao,T6,wa,ac,N6,t1,P6,L6,so,A6,ot,sc,F6,a1,O6,S6,s1,C6,z6,no,V6,lt,nc,U6,n1,M6,R6,r1,B6,H6,ro,G6,it,rc,W6,H,K6,o1,Y6,J6,l1,Z6,X6,i1,Q6,e8,p1,t8,a8,c1,s8,n8,d1,r8,o8,m1,l8,i8,p8,oc,c8,h1,d8,m8,h8,oo,f8,re,lc,u8,ln,g8,f1,_8,b8,u1,$8,x8,v8,g1,y8,j8,ic,w8,_1,D8,k8,E8,b1,I8,q8,lo,T8,Da,pc,N8,$1,P8,L8,io,A8,pt,cc,F8,x1,O8,S8,At,C8,Gf,z8,V8,Wf,U8,M8,v1,R8,B8,H8,po,G8,K,dc,W8,pn,K8,Kf,Y8,J8,y1,Z8,X8,Q8,cn,eI,Yf,tI,aI,Jf,sI,nI,rI,mc,oI,j1,lI,iI,pI,co,cI,mo,dI,ho,mI,ka,hc,hI,Ft,fI,w1,uI,gI,Zf,_I,bI,D1,$I,xI,vI,fo,yI,uo,fc,jI,k1,wI,DI,Ea,uc,kI,E1,EI,II,go,qI,Ia,gc,TI,_c,NI,I1,PI,LI,AI,_o,FI,qa,bc,OI,q1,SI,CI,bo,zI,Ta,$c,VI,T1,UI,MI,$o,RI,Na,xc,BI,N1,HI,GI,xo,WI,ct,vc,KI,dn,YI,P1,JI,ZI,L1,XI,QI,e9,A1,Xf,t9,yc,a9,s9,vo,n9,Pa,jc,r9,Ot,o9,F1,l9,i9,O1,p9,c9,S1,d9,m9,h9,C1,Qf,f9,wc,u9,g9,yo,Dc,_9,z1,b9,$9,La,kc,x9,V1,v9,y9,Ec,j9,U1,w9,D9,k9,Aa,Ic,E9,M1,I9,q9,jo,T9,Fa,qc,N9,R1,P9,L9,wo,A9,Do,Tc,F9,B1,O9,S9,ko,Nc,C9,H1,z9,V9,Eo,Pc,U9,G1,M9,R9,Io,Lc,B9,W1,H9,G9,qo,Ac,W9,K1,K9,Y9,To,Fc,J9,Y1,Z9,X9,No,Oc,Q9,J1,eq,tq,Po,Sc,aq,eu,tu,sq,nq,rq,Lo,Cc,oq,au,su,lq,iq,pq,nu,zc,cq,ru,Vc,dq,ou,Uc,mq,lu,Mc,hq,iu,Rc,fq,pu,Bc,uq,cu,Hc,gq,du,Gc,_q,mu,Wc,bq,hu,Kc,$q,fu,Yc,xq,uu,Jc,vq,gu,Zc,yq,Oa,Xc,jq,Z1,wq,Dq,Ao,kq,Sa,Qc,Eq,X1,Iq,qq,Fo,Tq,Ca,ed,Nq,Q1,Pq,Lq,Oo,Aq,za,td,Fq,e$,Oq,Sq,So,Cq,Va,ad,zq,mn,Vq,_u,Uq,Mq,bu,Rq,Bq,Hq,hn,Gq,t$,Wq,Kq,a$,Yq,Jq,Zq,Ua,sd,Xq,nd,Qq,s$,eT,tT,aT,Co,Sw,St,rd,sT,fn,nT,$u,rT,oT,xu,lT,iT,pT,zo,Cw,X,od,cT,n$,dT,mT,un,hT,vu,fT,uT,yu,gT,_T,bT,Ve,$T,r$,xT,vT,o$,yT,jT,l$,wT,DT,i$,kT,ET,IT,p$,qT,TT,Vo,zw,he,ld,NT,c$,PT,LT,d$,AT,FT,m$,OT,ST,Ue,h$,CT,zT,f$,VT,UT,u$,MT,RT,id,BT,ju,HT,GT,WT,Ct,KT,wu,YT,JT,g$,ZT,XT,Du,QT,eN,Vw,fe,pd,tN,_$,aN,sN,b$,nN,rN,$$,oN,lN,Me,x$,iN,pN,v$,cN,dN,y$,mN,hN,cd,fN,ku,uN,gN,_N,zt,bN,Eu,$N,xN,j$,vN,yN,Iu,jN,wN,Uw,ue,dd,DN,w$,kN,EN,D$,IN,qN,k$,TN,NN,Re,E$,PN,LN,I$,AN,FN,q$,ON,SN,md,CN,qu,zN,VN,UN,Vt,MN,Tu,RN,BN,T$,HN,GN,Nu,WN,KN,Mw,gn,Uo,N$,hd,YN,P$,JN,Rw,Mo,ZN,L$,XN,QN,Bw,L,fd,eP,A$,tP,aP,Ma,ud,sP,F$,nP,rP,Ro,oP,Ra,gd,lP,O$,iP,pP,Bo,cP,Ba,_d,dP,S$,mP,hP,Ho,fP,Ha,bd,uP,$d,gP,Go,_P,C$,bP,$P,xP,vP,Wo,yP,Ga,xd,jP,z$,wP,DP,Ko,kP,Wa,vd,EP,V$,IP,qP,Yo,TP,dt,yd,NP,U$,PP,LP,M$,AP,FP,Jo,OP,Ka,jd,SP,R$,CP,zP,Zo,VP,Ya,wd,UP,B$,MP,RP,Xo,BP,Ja,Dd,HP,H$,GP,WP,Qo,KP,mt,kd,YP,G$,JP,ZP,W$,XP,QP,el,eL,ke,Ed,tL,K$,aL,sL,Y$,nL,rL,J$,oL,lL,tl,iL,Ee,Id,pL,qd,cL,Z$,dL,mL,hL,Be,fL,X$,uL,gL,Q$,_L,bL,ex,$L,xL,tx,vL,yL,jL,ax,wL,DL,al,kL,ht,Td,EL,Nd,IL,sx,qL,TL,NL,Pu,PL,nx,LL,AL,sl,FL,nl,Pd,OL,_n,SL,rx,CL,zL,ox,VL,UL,ML,Ie,Ld,RL,Ut,BL,lx,HL,GL,ix,WL,KL,px,YL,JL,ZL,Ad,XL,Lu,QL,eA,tA,bn,aA,Au,sA,nA,cx,rA,oA,lA,rl,iA,qe,Fd,pA,$n,cA,dx,dA,mA,mx,hA,fA,uA,xn,gA,Fu,_A,bA,Ou,$A,xA,vA,vn,yA,hx,jA,wA,fx,DA,kA,EA,ol,IA,Za,Od,qA,ux,TA,NA,ll,PA,ft,Sd,LA,gx,AA,FA,Mt,OA,Su,SA,CA,_x,zA,VA,bx,UA,MA,RA,il,BA,Xa,Cd,HA,$x,GA,WA,pl,KA,Te,zd,YA,xx,JA,ZA,vx,XA,QA,yn,eF,Cu,tF,aF,yx,sF,nF,rF,cl,oF,Ne,Vd,lF,jx,iF,pF,jn,cF,zu,dF,mF,wx,hF,fF,uF,Ud,Dx,gF,_F,kx,bF,$F,dl,xF,Qa,Md,vF,Ex,yF,jF,ml,wF,es,Rd,DF,Bd,kF,Ix,EF,IF,qF,hl,TF,Pe,Hd,NF,wn,PF,qx,LF,AF,Tx,FF,OF,SF,Nx,CF,zF,Rt,VF,Vu,UF,MF,Uu,RF,BF,Px,HF,GF,WF,fl,KF,oe,Gd,YF,Dn,JF,Mu,ZF,XF,Lx,QF,eO,tO,kn,aO,Ru,sO,nO,Bu,rO,oO,lO,Wd,iO,Ax,pO,cO,dO,ul,mO,gl,hO,ts,Kd,fO,Bt,uO,Fx,gO,_O,Hu,bO,$O,Ox,xO,vO,yO,_l,jO,as,Yd,wO,Sx,DO,kO,bl,EO,ss,Jd,IO,Cx,qO,TO,$l,NO,ns,Zd,PO,zx,LO,AO,xl,FO,rs,Xd,OO,Vx,SO,CO,vl,zO,os,Qd,VO,En,UO,Gu,MO,RO,Wu,BO,HO,GO,In,WO,Ux,KO,YO,Mx,JO,ZO,Hw,Ku,Gw,qn,yl,Rx,em,XO,Bx,QO,Ww,jl,eS,Yu,tS,aS,Kw,F,tm,sS,Hx,nS,rS,ls,am,oS,Gx,lS,iS,wl,pS,is,sm,cS,Wx,dS,mS,Dl,hS,ps,nm,fS,Kx,uS,gS,kl,_S,Ju,rm,bS,Le,om,$S,Yx,xS,vS,lm,yS,Jx,jS,wS,DS,Tn,Zx,kS,ES,Xx,IS,qS,ge,TS,Qx,NS,PS,ev,LS,AS,tv,FS,OS,av,SS,CS,sv,zS,VS,US,El,MS,cs,im,RS,nv,BS,HS,Il,GS,ds,pm,WS,rv,KS,YS,ql,JS,le,cm,ZS,ov,XS,QS,lv,eC,tC,dm,aC,iv,sC,nC,rC,Nn,oC,Zu,lC,iC,Xu,pC,cC,dC,Tl,mC,ms,mm,hC,hm,fC,pv,uC,gC,_C,Nl,bC,hs,fm,$C,um,xC,cv,vC,yC,jC,Pl,wC,Ll,gm,DC,Qu,eg,kC,EC,IC,Al,_m,qC,tg,ag,TC,NC,PC,sg,bm,LC,ng,$m,AC,rg,xm,FC,og,vm,OC,lg,ym,SC,ig,jm,CC,pg,wm,zC,cg,Dm,VC,dg,km,UC,mg,Em,MC,hg,Im,RC,fg,qm,BC,ug,Tm,Yw,Pn,Fl,dv,Nm,HC,mv,GC,Jw,Ol,WC,hv,KC,YC,Zw,U,Pm,JC,Ae,Lm,ZC,fv,XC,QC,Am,ez,uv,tz,az,sz,Ln,gv,nz,rz,_v,oz,lz,_e,iz,bv,pz,cz,$v,dz,mz,xv,hz,fz,vv,uz,gz,yv,_z,bz,$z,Sl,xz,fs,Fm,vz,jv,yz,jz,Cl,wz,ie,Om,Dz,wv,kz,Ez,Dv,Iz,qz,Sm,Tz,kv,Nz,Pz,Lz,An,Az,gg,Fz,Oz,_g,Sz,Cz,zz,zl,Vz,us,Cm,Uz,Ev,Mz,Rz,Vl,Bz,gs,zm,Hz,Iv,Gz,Wz,Ul,Kz,_s,Vm,Yz,qv,Jz,Zz,Ml,Xz,bs,Um,Qz,Tv,eV,tV,Rl,aV,$s,Mm,sV,Nv,nV,rV,Bl,oV,xs,Rm,lV,Pv,iV,pV,Hl,Xw,Fn,Gl,Lv,Bm,cV,Av,dV,Qw,z,Hm,mV,Fv,hV,fV,Gm,uV,Ov,gV,_V,bV,bg,Sv,$V,xV,vV,G,Cv,vs,yV,$g,jV,wV,zv,DV,kV,Vv,EV,IV,Uv,Wm,qV,xg,TV,NV,PV,Mv,Km,LV,Rv,AV,FV,OV,Ym,He,SV,Bv,CV,zV,vg,VV,UV,Hv,MV,RV,yg,BV,HV,GV,Wl,WV,Gv,Ge,KV,jg,YV,JV,wg,ZV,XV,Dg,QV,eU,kg,tU,aU,sU,Wv,Jm,nU,Eg,rU,oU,lU,Kv,Ht,iU,Ig,pU,cU,Yv,dU,mU,Jv,hU,fU,uU,Zv,Kl,qg,gU,_U,Tg,bU,$U,xU,Yl,Zm,vU,Xv,yU,jU,Jl,Xm,wU,Qv,DU,kU,Zl,Qm,EU,ey,IU,qU,Xl,eh,TU,ty,NU,PU,Ql,th,LU,ay,AU,FU,ei,ah,OU,sy,SU,CU,ys,sh,zU,ny,VU,UU,ry,MU,RU,ti,nh,BU,oy,HU,GU,Fe,rh,WU,ly,KU,YU,iy,JU,ZU,Gt,XU,Ng,QU,eM,Pg,tM,aM,Lg,sM,nM,rM,ai,oM,ut,oh,lM,py,iM,pM,cy,cM,dM,si,e7,On,lh,mM,dy,hM,t7,Q,ih,fM,my,uM,gM,ph,_M,hy,bM,$M,xM,Sn,Ag,fy,vM,yM,jM,Fg,uy,wM,DM,kM,Og,gy,EM,IM,qM,ni,ch,TM,_y,NM,PM,ri,dh,LM,by,AM,a7,Wt,mh,FM,$y,OM,SM,xy,CM,s7,ee,hh,zM,Sg,vy,VM,UM,MM,yy,RM,BM,fh,HM,jy,GM,WM,KM,oi,YM,li,uh,JM,wy,ZM,n7,te,gh,XM,Cg,Dy,QM,eR,tR,ky,aR,sR,Ey,nR,rR,ii,oR,pi,_h,lR,Iy,iR,r7,bh,$h,o7,xh,vh,l7,yh,jh,i7,wh,Dh,p7,M,kh,pR,qy,cR,dR,Ty,mR,hR,Cn,Ny,Eh,fR,Py,uR,gR,_R,zn,Ih,bR,Ly,$R,xR,vR,qh,Ay,yR,jR,Fy,wR,DR,Oy,kR,ER,Vn,Th,IR,Sy,qR,TR,NR,Un,Cy,PR,LR,zy,AR,FR,Vy,OR,SR,Uy,CR,zR,js,Nh,VR,My,UR,MR,Kt,Ry,RR,BR,By,HR,GR,Hy,WR,KR,Gy,YR,JR,ci,Ph,ZR,Wy,XR,QR,di,Lh,eB,Ky,tB,aB,mi,Ah,sB,Yy,nB,rB,hi,Fh,oB,Jy,lB,c7,R,Oh,iB,Zy,pB,cB,Xy,dB,mB,Yt,Qy,Sh,hB,ej,fB,uB,gB,Mn,Ch,_B,tj,bB,$B,xB,zh,aj,vB,yB,sj,jB,wB,nj,DB,kB,rj,Vh,EB,oj,IB,qB,TB,lj,Uh,NB,ij,PB,LB,AB,ws,Mh,FB,pj,OB,SB,We,cj,CB,zB,dj,VB,UB,mj,MB,RB,hj,BB,HB,fj,GB,WB,fi,Rh,KB,uj,YB,JB,ui,Bh,ZB,gj,XB,QB,gi,Hh,eH,_j,tH,aH,_i,Gh,sH,bj,nH,d7,Rn,bi,$j,Wh,rH,xj,oH,m7,ae,Kh,lH,vj,iH,pH,zg,yj,cH,dH,mH,jj,hH,fH,$i,Yh,uH,Jh,gH,wj,_H,bH,$H,xi,Zh,xH,Jt,vH,Dj,yH,jH,kj,wH,DH,Ej,kH,EH,h7,Bn,vi,Ij,Xh,IH,qj,qH,f7,Ds,TH,Tj,NH,PH,Vg,LH,AH,u7,se,Qh,FH,Nj,OH,SH,yi,ef,CH,Pj,zH,VH,ji,tf,UH,Lj,MH,RH,ks,af,BH,Aj,HH,GH,Fj,WH,KH,wi,sf,YH,Oj,JH,g7,Hn,Di,Sj,nf,ZH,Cj,XH,_7,S,rf,QH,zj,eG,tG,Vj,aG,sG,Zt,nG,Uj,rG,oG,Mj,lG,iG,Rj,pG,cG,dG,Bj,mG,hG,Hj,fG,uG,Gj,gG,_G,gt,Wj,bG,$G,of,xG,vG,Kj,yG,jG,lf,wG,DG,kG,Yj,EG,IG,Jj,qG,TG,ki,NG,Gn,PG,Zj,LG,AG,Xj,FG,OG,SG,Ei,CG,Xt,zG,Qj,VG,UG,e0,MG,RG,t0,BG,HG,GG,Ii,WG,Wn,KG,a0,YG,JG,s0,ZG,XG,QG,qi,eW,n0,tW,aW,Ti,sW,Ni,Pi,r0,pf,nW,o0,rW,oW,W,lW,l0,iW,pW,i0,cW,dW,p0,mW,hW,c0,fW,uW,d0,gW,_W,m0,bW,$W,h0,xW,vW,b7,Kn,cf,yW,Yn,jW,f0,wW,DW,u0,kW,EW,$7,Jn,df,IW,g0,qW,x7,Zn,Li,_0,mf,TW,b0,NW,v7,Xn,hf,PW,$0,LW,y7;return t=new Tt({}),oa=new Tt({}),cp=new E({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:`<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.
**config_kwargs &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"task_templates"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/info.py#L87"}}),dp=new E({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/info.py#L241"}}),vr=new T({props:{anchor:"datasets.DatasetInfo.from_directory.example",$$slots:{default:[Kae]},$$scope:{ctx:k}}}),hp=new E({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""},{name:"pretty_print",val:" = False"}],parametersDescription:[{anchor:"datasets.DatasetInfo.write_to_directory.dataset_info_dir",description:"<strong>dataset_info_dir</strong> (str) &#x2014; Destination directory.",name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.write_to_directory.pretty_print",description:"<strong>pretty_print</strong> (bool, default <code>False</code>) &#x2014; If True, the JSON will be pretty-printed with the indent level of 4.",name:"pretty_print"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/info.py#L182"}}),yr=new T({props:{anchor:"datasets.DatasetInfo.write_to_directory.example",$$slots:{default:[Yae]},$$scope:{ctx:k}}}),fp=new Tt({}),up=new E({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L625"}}),gp=new E({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L4099",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Dr=new T({props:{anchor:"datasets.Dataset.add_column.example",$$slots:{default:[Jae]},$$scope:{ctx:k}}}),_p=new E({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L4332",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),kr=new T({props:{anchor:"datasets.Dataset.add_item.example",$$slots:{default:[Zae]},$$scope:{ctx:k}}}),bp=new E({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L691",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),$p=new E({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L726",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),xp=new E({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L754",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),qr=new T({props:{anchor:"datasets.Dataset.from_pandas.example",$$slots:{default:[Xae]},$$scope:{ctx:k}}}),jp=new E({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L806",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),wp=new E({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1205"}}),Nr=new T({props:{anchor:"datasets.Dataset.data.example",$$slots:{default:[Qae]},$$scope:{ctx:k}}}),Dp=new E({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1225"}}),Pr=new T({props:{anchor:"datasets.Dataset.cache_files.example",$$slots:{default:[ese]},$$scope:{ctx:k}}}),kp=new E({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1243"}}),Lr=new T({props:{anchor:"datasets.Dataset.num_columns.example",$$slots:{default:[tse]},$$scope:{ctx:k}}}),Ep=new E({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1258"}}),Fr=new T({props:{anchor:"datasets.Dataset.num_rows.example",$$slots:{default:[ase]},$$scope:{ctx:k}}}),qp=new E({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1275"}}),Or=new T({props:{anchor:"datasets.Dataset.column_names.example",$$slots:{default:[sse]},$$scope:{ctx:k}}}),Tp=new E({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1290"}}),Sr=new T({props:{anchor:"datasets.Dataset.shape.example",$$slots:{default:[nse]},$$scope:{ctx:k}}}),Np=new E({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>).',name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1307",returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),Cr=new T({props:{anchor:"datasets.Dataset.unique.example",$$slots:{default:[rse]},$$scope:{ctx:k}}}),Pp=new E({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:""},{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1411",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),zr=new T({props:{anchor:"datasets.Dataset.flatten.example",$$slots:{default:[ose]},$$scope:{ctx:k}}}),Lp=new E({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 10000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 10000"},{name:"num_proc",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1450",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Vr=new T({props:{anchor:"datasets.Dataset.cast.example",$$slots:{default:[lse]},$$scope:{ctx:k}}}),Ap=new E({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1526",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ur=new T({props:{anchor:"datasets.Dataset.cast_column.example",$$slots:{default:[ise]},$$scope:{ctx:k}}}),Fp=new E({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1563",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Mr=new T({props:{anchor:"datasets.Dataset.remove_columns.example",$$slots:{default:[pse]},$$scope:{ctx:k}}}),Op=new E({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1611",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Rr=new T({props:{anchor:"datasets.Dataset.rename_column.example",$$slots:{default:[cse]},$$scope:{ctx:k}}}),Sp=new E({props:{name:"rename_columns",anchor:"datasets.Dataset.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1673",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Br=new T({props:{anchor:"datasets.Dataset.rename_columns.example",$$slots:{default:[dse]},$$scope:{ctx:k}}}),Cp=new E({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1337"}}),Hr=new T({props:{anchor:"datasets.Dataset.class_encode_column.example",$$slots:{default:[mse]},$$scope:{ctx:k}}}),Vp=new E({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1737"}}),Gr=new T({props:{anchor:"datasets.Dataset.__len__.example",$$slots:{default:[hse]},$$scope:{ctx:k}}}),Up=new E({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1766"}}),Rp=new E({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1786"}}),Bp=new E({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1814"}}),Kr=new T({props:{anchor:"datasets.Dataset.set_format.example",$$slots:{default:[fse]},$$scope:{ctx:k}}}),Hp=new E({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1915"}}),Yr=new T({props:{anchor:"datasets.Dataset.set_transform.example",$$slots:{default:[use]},$$scope:{ctx:k}}}),Gp=new E({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1886"}}),Jr=new T({props:{anchor:"datasets.Dataset.reset_format.example",$$slots:{default:[gse]},$$scope:{ctx:k}}}),Kp=new E({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1955"}}),Zr=new T({props:{anchor:"datasets.Dataset.with_format.example",$$slots:{default:[_se]},$$scope:{ctx:k}}}),Jp=new E({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L2003"}}),Xr=new T({props:{anchor:"datasets.Dataset.with_transform.example",$$slots:{default:[bse]},$$scope:{ctx:k}}}),Zp=new E({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L2122"}}),Xp=new E({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L2128",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),eo=new T({props:{anchor:"datasets.Dataset.cleanup_cache_files.example",$$slots:{default:[$se]},$$scope:{ctx:k}}}),Qp=new E({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Dict[str, Any], </em>extra_args) -&gt; Dict[str, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Dict[str, List], </em>extra_args) -&gt; Dict[str, List]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L2175"}}),to=new T({props:{anchor:"datasets.Dataset.map.example",$$slots:{default:[xse]},$$scope:{ctx:k}}}),tc=new E({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L2783"}}),ao=new T({props:{anchor:"datasets.Dataset.filter.example",$$slots:{default:[vse]},$$scope:{ctx:k}}}),ac=new E({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:"<strong>indices</strong> (sequence, iterable, ndarray or Series) &#x2014; List or 1D-array of integer indices for indexing.",name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L2957"}}),so=new T({props:{anchor:"datasets.Dataset.select.example",$$slots:{default:[yse]},$$scope:{ctx:k}}}),sc=new E({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L3059"}}),no=new T({props:{anchor:"datasets.Dataset.sort.example",$$slots:{default:[jse]},$$scope:{ctx:k}}}),nc=new E({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L3153"}}),ro=new T({props:{anchor:"datasets.Dataset.shuffle.example",$$slots:{default:[wse]},$$scope:{ctx:k}}}),rc=new E({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L3245"}}),oo=new T({props:{anchor:"datasets.Dataset.train_test_split.example",$$slots:{default:[Dse]},$$scope:{ctx:k}}}),lc=new E({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L3466"}}),lo=new T({props:{anchor:"datasets.Dataset.shard.example",$$slots:{default:[kse]},$$scope:{ctx:k}}}),pc=new E({props:{name:"to_tf_dataset",anchor:"datasets.Dataset.to_tf_dataset",parameters:[{name:"columns",val:": typing.Union[str, typing.List[str]]"},{name:"batch_size",val:": int"},{name:"shuffle",val:": bool"},{name:"collate_fn",val:": typing.Callable"},{name:"drop_remainder",val:": bool = None"},{name:"collate_fn_args",val:": typing.Dict[str, typing.Any] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str]] = None"},{name:"dummy_labels",val:": bool = False"},{name:"prefetch",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>) &#x2014; Dataset column(s) to load in the tf.data.Dataset. In general,
only columns that the model can use as input should be included here (numeric data only).`,name:"columns"},{anchor:"datasets.Dataset.to_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.
shuffle(<code>bool</code>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"batch_size"},{anchor:"datasets.Dataset.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>None</code>) &#x2014; Drop the last incomplete batch when loading. If not provided,
defaults to the same setting as shuffle.
collate_fn(<code>Callable</code>) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"drop_remainder(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.Dataset.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case it is
not necessary to actually pass the labels here, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.Dataset.to_tf_dataset.dummy_labels",description:`<strong>dummy_labels</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If no <em>label_cols</em> are set, output an array of &#x201C;dummy&#x201D; labels
with each batch. This can avoid problems with <em>fit()</em> or <em>train_on_batch()</em> that expect labels to be
a Tensor or np.ndarray, but should (hopefully) not be necessary with our standard train_step().`,name:"dummy_labels"},{anchor:"datasets.Dataset.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L306",returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),io=new T({props:{anchor:"datasets.Dataset.to_tf_dataset.example",$$slots:{default:[Ese]},$$scope:{ctx:k}}}),cc=new E({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '500MB'"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;5MB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L4008"}}),po=new T({props:{anchor:"datasets.Dataset.push_to_hub.example",$$slots:{default:[Ise]},$$scope:{ctx:k}}}),dc=new E({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1016"}}),co=new T({props:{anchor:"datasets.Dataset.save_to_disk.example",$$slots:{default:[qse]},$$scope:{ctx:k}}}),mo=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-2",$$slots:{default:[Tse]},$$scope:{ctx:k}}}),ho=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-3",$$slots:{default:[Nse]},$$scope:{ctx:k}}}),hc=new E({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L1138",returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),fo=new T({props:{anchor:"datasets.Dataset.load_from_disk.example",$$slots:{default:[Pse]},$$scope:{ctx:k}}}),fc=new E({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L2888"}}),uc=new E({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.
to_csv_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L3622",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),go=new T({props:{anchor:"datasets.Dataset.to_csv.example",$$slots:{default:[Lse]},$$scope:{ctx:k}}}),gc=new E({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L3735",returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),_o=new T({props:{anchor:"datasets.Dataset.to_pandas.example",$$slots:{default:[Ase]},$$scope:{ctx:k}}}),bc=new E({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L3655",returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),bo=new T({props:{anchor:"datasets.Dataset.to_dict.example",$$slots:{default:[Fse]},$$scope:{ctx:k}}}),$c=new E({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code>
**to_json_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.</li>
</ul>`,name:"lines"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L3690",returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),$o=new T({props:{anchor:"datasets.Dataset.to_json.example",$$slots:{default:[Ose]},$$scope:{ctx:k}}}),xc=new E({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_parquet.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_parquet.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.
parquet_writer_kwargs &#x2014; Parameters to pass to PyArrow&#x2019;s <code>pyarrow.parquet.ParquetWriter</code>`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L3772",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),xo=new T({props:{anchor:"datasets.Dataset.to_parquet.example",$$slots:{default:[Sse]},$$scope:{ctx:k}}}),vc=new E({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L4137"}}),vo=new T({props:{anchor:"datasets.Dataset.add_faiss_index.example",$$slots:{default:[Cse]},$$scope:{ctx:k}}}),jc=new E({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L4210"}}),Dc=new E({props:{name:"save_faiss_index",anchor:"datasets.Dataset.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],parametersDescription:[{anchor:"datasets.Dataset.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/search.py#L509"}}),kc=new E({props:{name:"load_faiss_index",anchor:"datasets.Dataset.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, typing.List[int], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.Dataset.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.Dataset.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/search.py#L522"}}),Ic=new E({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.search">Dataset.search()</a>.
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.
Default config is:`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L4262"}}),jo=new T({props:{anchor:"datasets.Dataset.add_elasticsearch_index.example",$$slots:{default:[zse]},$$scope:{ctx:k}}}),qc=new E({props:{name:"load_elasticsearch_index",anchor:"datasets.Dataset.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/search.py#L600"}}),wo=new T({props:{anchor:"datasets.Dataset.load_elasticsearch_index.example",$$slots:{default:[Vse]},$$scope:{ctx:k}}}),Tc=new E({props:{name:"list_indexes",anchor:"datasets.Dataset.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/search.py#L422"}}),Nc=new E({props:{name:"get_index",anchor:"datasets.Dataset.get_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/search.py#L426",returnType:`
<p><code>BaseIndex</code></p>
`}}),Pc=new E({props:{name:"drop_index",anchor:"datasets.Dataset.drop_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/search.py#L644"}}),Lc=new E({props:{name:"search",anchor:"datasets.Dataset.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/search.py#L652",returnDescription:`
<p>The retrieval scores of the retrieved examples.
indices (<code>List[List[int]]</code>): The indices of the retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[List[float]</code>)</p>
`}}),Ac=new E({props:{name:"search_batch",anchor:"datasets.Dataset.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/search.py#L667",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_indices (<code>List[List[int]]</code>): The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<code>List[List[float]</code>)</p>
`}}),Fc=new E({props:{name:"get_nearest_examples",anchor:"datasets.Dataset.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/search.py#L682",returnDescription:`
<p>The retrieval scores of the retrieved examples.
examples (<code>dict</code>): The retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[float]</code>)</p>
`}}),Oc=new E({props:{name:"get_nearest_examples_batch",anchor:"datasets.Dataset.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/search.py#L701",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_examples (<em>List[dict]</em>): The retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<em>List[List[float]</em>)</p>
`}}),Sc=new E({props:{name:"info",anchor:"datasets.Dataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L145"}}),Cc=new E({props:{name:"split",anchor:"datasets.Dataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L150"}}),zc=new E({props:{name:"builder_name",anchor:"datasets.Dataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L155"}}),Vc=new E({props:{name:"citation",anchor:"datasets.Dataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L159"}}),Uc=new E({props:{name:"config_name",anchor:"datasets.Dataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L163"}}),Mc=new E({props:{name:"dataset_size",anchor:"datasets.Dataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L167"}}),Rc=new E({props:{name:"description",anchor:"datasets.Dataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L171"}}),Bc=new E({props:{name:"download_checksums",anchor:"datasets.Dataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L175"}}),Hc=new E({props:{name:"download_size",anchor:"datasets.Dataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L179"}}),Gc=new E({props:{name:"features",anchor:"datasets.Dataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L183"}}),Wc=new E({props:{name:"homepage",anchor:"datasets.Dataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L187"}}),Kc=new E({props:{name:"license",anchor:"datasets.Dataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L191"}}),Yc=new E({props:{name:"size_in_bytes",anchor:"datasets.Dataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L195"}}),Jc=new E({props:{name:"supervised_keys",anchor:"datasets.Dataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L199"}}),Zc=new E({props:{name:"version",anchor:"datasets.Dataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L207"}}),Xc=new E({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L845",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ao=new T({props:{anchor:"datasets.Dataset.from_csv.example",$$slots:{default:[Use]},$$scope:{ctx:k}}}),Qc=new E({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:`<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"field"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L880",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Fo=new T({props:{anchor:"datasets.Dataset.from_json.example",$$slots:{default:[Mse]},$$scope:{ctx:k}}}),ed=new E({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L923",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Oo=new T({props:{anchor:"datasets.Dataset.from_parquet.example",$$slots:{default:[Rse]},$$scope:{ctx:k}}}),td=new E({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L968",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),So=new T({props:{anchor:"datasets.Dataset.from_text.example",$$slots:{default:[Bse]},$$scope:{ctx:k}}}),ad=new E({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L2048"}}),sd=new E({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L4383"}}),Co=new T({props:{anchor:"datasets.Dataset.align_labels_with_mapping.example",$$slots:{default:[Hse]},$$scope:{ctx:k}}}),rd=new E({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L4437"}}),zo=new T({props:{anchor:"datasets.concatenate_datasets.example",$$slots:{default:[Gse]},$$scope:{ctx:k}}}),od=new E({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructued by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.
**kwargs &#x2014; For map-style datasets:
Keyword arguments to be passed to <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.select">Dataset.select()</a> when selecting the indices used to interleave the datasets.`,name:"seed"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/combine.py#L20",returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Vo=new T({props:{anchor:"datasets.interleave_datasets.example",$$slots:{default:[Wse]},$$scope:{ctx:k}}}),ld=new E({props:{name:"datasets.enable_caching",anchor:"datasets.enable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/fingerprint.py#L96"}}),pd=new E({props:{name:"datasets.disable_caching",anchor:"datasets.disable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/fingerprint.py#L117"}}),dd=new E({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/fingerprint.py#L162"}}),hd=new Tt({}),fd=new E({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L32"}}),ud=new E({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L54"}}),Ro=new T({props:{anchor:"datasets.DatasetDict.data.example",$$slots:{default:[Kse]},$$scope:{ctx:k}}}),gd=new E({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L69"}}),Bo=new T({props:{anchor:"datasets.DatasetDict.cache_files.example",$$slots:{default:[Yse]},$$scope:{ctx:k}}}),_d=new E({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L87"}}),Ho=new T({props:{anchor:"datasets.DatasetDict.num_columns.example",$$slots:{default:[Jse]},$$scope:{ctx:k}}}),bd=new E({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L103"}}),Wo=new T({props:{anchor:"datasets.DatasetDict.num_rows.example",$$slots:{default:[Zse]},$$scope:{ctx:k}}}),xd=new E({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L119"}}),Ko=new T({props:{anchor:"datasets.DatasetDict.column_names.example",$$slots:{default:[Xse]},$$scope:{ctx:k}}}),vd=new E({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L137"}}),Yo=new T({props:{anchor:"datasets.DatasetDict.shape.example",$$slots:{default:[Qse]},$$scope:{ctx:k}}}),yd=new E({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L185",returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),Jo=new T({props:{anchor:"datasets.DatasetDict.unique.example",$$slots:{default:[ene]},$$scope:{ctx:k}}}),jd=new E({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L209",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),Zo=new T({props:{anchor:"datasets.DatasetDict.cleanup_cache_files.example",$$slots:{default:[tne]},$$scope:{ctx:k}}}),wd=new E({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], indices: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L674"}}),Xo=new T({props:{anchor:"datasets.DatasetDict.map.example",$$slots:{default:[ane]},$$scope:{ctx:k}}}),Dd=new E({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L786"}}),Qo=new T({props:{anchor:"datasets.DatasetDict.filter.example",$$slots:{default:[sne]},$$scope:{ctx:k}}}),kd=new E({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L876"}}),el=new T({props:{anchor:"datasets.DatasetDict.sort.example",$$slots:{default:[nne]},$$scope:{ctx:k}}}),Ed=new E({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (the seed argument has priority over seeds if both arguments are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L944"}}),tl=new T({props:{anchor:"datasets.DatasetDict.shuffle.example",$$slots:{default:[rne]},$$scope:{ctx:k}}}),Id=new E({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L476"}}),al=new T({props:{anchor:"datasets.DatasetDict.set_format.example",$$slots:{default:[one]},$$scope:{ctx:k}}}),Td=new E({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L518"}}),sl=new T({props:{anchor:"datasets.DatasetDict.reset_format.example",$$slots:{default:[lne]},$$scope:{ctx:k}}}),Pd=new E({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L443"}}),Ld=new E({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L574"}}),rl=new T({props:{anchor:"datasets.DatasetDict.with_format.example",$$slots:{default:[ine]},$$scope:{ctx:k}}}),Fd=new E({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L623"}}),ol=new T({props:{anchor:"datasets.DatasetDict.with_transform.example",$$slots:{default:[pne]},$$scope:{ctx:k}}}),Od=new E({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L153"}}),ll=new T({props:{anchor:"datasets.DatasetDict.flatten.example",$$slots:{default:[cne]},$$scope:{ctx:k}}}),Sd=new E({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L233"}}),il=new T({props:{anchor:"datasets.DatasetDict.cast.example",$$slots:{default:[dne]},$$scope:{ctx:k}}}),Cd=new E({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L267",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),pl=new T({props:{anchor:"datasets.DatasetDict.cast_column.example",$$slots:{default:[mne]},$$scope:{ctx:k}}}),zd=new E({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L294"}}),cl=new T({props:{anchor:"datasets.DatasetDict.remove_columns.example",$$slots:{default:[hne]},$$scope:{ctx:k}}}),Vd=new E({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L332"}}),dl=new T({props:{anchor:"datasets.DatasetDict.rename_column.example",$$slots:{default:[fne]},$$scope:{ctx:k}}}),Md=new E({props:{name:"rename_columns",anchor:"datasets.DatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L375",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),ml=new T({props:{anchor:"datasets.DatasetDict.rename_columns.example",$$slots:{default:[une]},$$scope:{ctx:k}}}),Rd=new E({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L412"}}),hl=new T({props:{anchor:"datasets.DatasetDict.class_encode_column.example",$$slots:{default:[gne]},$$scope:{ctx:k}}}),Hd=new E({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '500MB'"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <code>&lt;user&gt;/&lt;dataset_name&gt;</code> or
<code>&lt;org&gt;/&lt;dataset_name&gt;</code>. Also accepts <code>&lt;dataset_name&gt;</code>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;500MB&#x201D;</em> or <em>&#x201C;1GB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1275"}}),fl=new T({props:{anchor:"datasets.DatasetDict.push_to_hub.example",$$slots:{default:[_ne]},$$scope:{ctx:k}}}),Gd=new E({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1020"}}),ul=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example",$$slots:{default:[bne]},$$scope:{ctx:k}}}),gl=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example-2",$$slots:{default:[$ne]},$$scope:{ctx:k}}}),Kd=new E({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1068",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),_l=new T({props:{anchor:"datasets.DatasetDict.load_from_disk.example",$$slots:{default:[xne]},$$scope:{ctx:k}}}),Yd=new E({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1115",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),bl=new T({props:{anchor:"datasets.DatasetDict.from_csv.example",$$slots:{default:[vne]},$$scope:{ctx:k}}}),Jd=new E({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1149",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),$l=new T({props:{anchor:"datasets.DatasetDict.from_json.example",$$slots:{default:[yne]},$$scope:{ctx:k}}}),Zd=new E({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1183",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),xl=new T({props:{anchor:"datasets.DatasetDict.from_parquet.example",$$slots:{default:[jne]},$$scope:{ctx:k}}}),Xd=new E({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1226",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),vl=new T({props:{anchor:"datasets.DatasetDict.from_text.example",$$slots:{default:[wne]},$$scope:{ctx:k}}}),Qd=new E({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1260"}}),em=new Tt({}),tm=new E({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/iterable_dataset.py#L456"}}),am=new E({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/iterable_dataset.py#L922",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),wl=new T({props:{anchor:"datasets.IterableDataset.remove_columns.example",$$slots:{default:[Dne]},$$scope:{ctx:k}}}),sm=new E({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/iterable_dataset.py#L948",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Dl=new T({props:{anchor:"datasets.IterableDataset.cast_column.example",$$slots:{default:[kne]},$$scope:{ctx:k}}}),nm=new E({props:{name:"cast",anchor:"datasets.IterableDataset.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/iterable_dataset.py#L996",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),kl=new T({props:{anchor:"datasets.IterableDataset.cast.example",$$slots:{default:[Ene]},$$scope:{ctx:k}}}),rm=new E({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/iterable_dataset.py#L502"}}),om=new E({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/iterable_dataset.py#L542"}}),El=new T({props:{anchor:"datasets.IterableDataset.map.example",$$slots:{default:[Ine]},$$scope:{ctx:k}}}),im=new E({props:{name:"rename_column",anchor:"datasets.IterableDataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/iterable_dataset.py#L854",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Il=new T({props:{anchor:"datasets.IterableDataset.rename_column.example",$$slots:{default:[qne]},$$scope:{ctx:k}}}),pm=new E({props:{name:"filter",anchor:"datasets.IterableDataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDataset.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/iterable_dataset.py#L636"}}),ql=new T({props:{anchor:"datasets.IterableDataset.filter.example",$$slots:{default:[Tne]},$$scope:{ctx:k}}}),cm=new E({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/iterable_dataset.py#L703"}}),Tl=new T({props:{anchor:"datasets.IterableDataset.shuffle.example",$$slots:{default:[Nne]},$$scope:{ctx:k}}}),mm=new E({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/iterable_dataset.py#L769"}}),Nl=new T({props:{anchor:"datasets.IterableDataset.skip.example",$$slots:{default:[Pne]},$$scope:{ctx:k}}}),fm=new E({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/iterable_dataset.py#L806"}}),Pl=new T({props:{anchor:"datasets.IterableDataset.take.example",$$slots:{default:[Lne]},$$scope:{ctx:k}}}),gm=new E({props:{name:"info",anchor:"datasets.IterableDataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L145"}}),_m=new E({props:{name:"split",anchor:"datasets.IterableDataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L150"}}),bm=new E({props:{name:"builder_name",anchor:"datasets.IterableDataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L155"}}),$m=new E({props:{name:"citation",anchor:"datasets.IterableDataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L159"}}),xm=new E({props:{name:"config_name",anchor:"datasets.IterableDataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L163"}}),vm=new E({props:{name:"dataset_size",anchor:"datasets.IterableDataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L167"}}),ym=new E({props:{name:"description",anchor:"datasets.IterableDataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L171"}}),jm=new E({props:{name:"download_checksums",anchor:"datasets.IterableDataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L175"}}),wm=new E({props:{name:"download_size",anchor:"datasets.IterableDataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L179"}}),Dm=new E({props:{name:"features",anchor:"datasets.IterableDataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L183"}}),km=new E({props:{name:"homepage",anchor:"datasets.IterableDataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L187"}}),Em=new E({props:{name:"license",anchor:"datasets.IterableDataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L191"}}),Im=new E({props:{name:"size_in_bytes",anchor:"datasets.IterableDataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L195"}}),qm=new E({props:{name:"supervised_keys",anchor:"datasets.IterableDataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L199"}}),Tm=new E({props:{name:"version",anchor:"datasets.IterableDataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/arrow_dataset.py#L207"}}),Nm=new Tt({}),Pm=new E({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1375"}}),Lm=new E({props:{name:"map",anchor:"datasets.IterableDatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDatasetDict.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1405"}}),Sl=new T({props:{anchor:"datasets.IterableDatasetDict.map.example",$$slots:{default:[Ane]},$$scope:{ctx:k}}}),Fm=new E({props:{name:"filter",anchor:"datasets.IterableDatasetDict.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDatasetDict.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1483"}}),Cl=new T({props:{anchor:"datasets.IterableDatasetDict.filter.example",$$slots:{default:[Fne]},$$scope:{ctx:k}}}),Om=new E({props:{name:"shuffle",anchor:"datasets.IterableDatasetDict.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDatasetDict.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDatasetDict.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1537"}}),zl=new T({props:{anchor:"datasets.IterableDatasetDict.shuffle.example",$$slots:{default:[One]},$$scope:{ctx:k}}}),Cm=new E({props:{name:"with_format",anchor:"datasets.IterableDatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional, default None) &#x2014; if set to &#x201C;torch&#x201D;, the returned dataset
will be a subclass of torch.utils.data.IterableDataset to be used in a DataLoader`,name:"type"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1376"}}),Vl=new T({props:{anchor:"datasets.IterableDatasetDict.with_format.example",$$slots:{default:[Sne]},$$scope:{ctx:k}}}),zm=new E({props:{name:"cast",anchor:"datasets.IterableDatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1704",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Ul=new T({props:{anchor:"datasets.IterableDatasetDict.cast.example",$$slots:{default:[Cne]},$$scope:{ctx:k}}}),Vm=new E({props:{name:"cast_column",anchor:"datasets.IterableDatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1675",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Ml=new T({props:{anchor:"datasets.IterableDatasetDict.cast_column.example",$$slots:{default:[zne]},$$scope:{ctx:k}}}),Um=new E({props:{name:"remove_columns",anchor:"datasets.IterableDatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1650",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Rl=new T({props:{anchor:"datasets.IterableDatasetDict.remove_columns.example",$$slots:{default:[Vne]},$$scope:{ctx:k}}}),Mm=new E({props:{name:"rename_column",anchor:"datasets.IterableDatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1592",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Bl=new T({props:{anchor:"datasets.IterableDatasetDict.rename_column.example",$$slots:{default:[Une]},$$scope:{ctx:k}}}),Rm=new E({props:{name:"rename_columns",anchor:"datasets.IterableDatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/dataset_dict.py#L1623",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Hl=new T({props:{anchor:"datasets.IterableDatasetDict.rename_columns.example",$$slots:{default:[Mne]},$$scope:{ctx:k}}}),Bm=new Tt({}),Hm=new E({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L1241"}}),Wl=new Wae({props:{$$slots:{default:[Rne]},$$scope:{ctx:k}}}),Zm=new E({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L1450",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Xm=new E({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L1432",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Qm=new E({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L1416",returnDescription:`
<p><code>list[Any]</code></p>
`}}),eh=new E({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"},{anchor:"datasets.Features.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio or image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L1394",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),th=new E({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L1376",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),ah=new E({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L1363",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),sh=new E({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L1520",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),nh=new E({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L1312",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),rh=new E({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L1332",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),ai=new T({props:{anchor:"datasets.Features.from_dict.example",$$slots:{default:[Bne]},$$scope:{ctx:k}}}),oh=new E({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L1459",returnType:`
<p><a
  href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),si=new T({props:{anchor:"datasets.Features.reorder_fields_as.example",$$slots:{default:[Hne]},$$scope:{ctx:k}}}),lh=new E({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L911"}}),ih=new E({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": int = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L781"}}),ch=new E({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L866"}}),dh=new E({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L837"}}),mh=new E({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L402"}}),hh=new E({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/translation.py#L12"}}),oi=new T({props:{anchor:"datasets.Translation.example",$$slots:{default:[Gne]},$$scope:{ctx:k}}}),uh=new E({props:{name:"flatten",anchor:"datasets.Translation.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/translation.py#L46"}}),gh=new E({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/translation.py#L54"}}),ii=new T({props:{anchor:"datasets.TranslationVariableLanguages.example",$$slots:{default:[Wne]},$$scope:{ctx:k}}}),_h=new E({props:{name:"flatten",anchor:"datasets.TranslationVariableLanguages.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/translation.py#L123"}}),$h=new E({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L478"}}),vh=new E({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L487"}}),jh=new E({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L496"}}),Dh=new E({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/features.py#L505"}}),kh=new E({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/audio.py#L20"}}),Nh=new E({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/audio.py#L139",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Ph=new E({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"},{anchor:"datasets.Audio.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/audio.py#L91",returnDescription:`
<p>dict</p>
`}}),Lh=new E({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/audio.py#L172",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Ah=new E({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/audio.py#L60",returnType:`
<p><code>dict</code></p>
`}}),Fh=new E({props:{name:"flatten",anchor:"datasets.Audio.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/audio.py#L128"}}),Oh=new E({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/image.py#L26"}}),Mh=new E({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/image.py#L149",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Rh=new E({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"},{anchor:"datasets.Image.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/image.py#L90",returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),Bh=new E({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/image.py#L198",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Hh=new E({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/image.py#L56",returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),Gh=new E({props:{name:"flatten",anchor:"datasets.Image.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/features/image.py#L136"}}),Wh=new Tt({}),Kh=new E({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/info.py#L317"}}),Yh=new E({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/info.py#L364"}}),Zh=new E({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""},{name:"pretty_print",val:" = False"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/info.py#L352"}}),Xh=new Tt({}),Qh=new E({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/metric.py#L138"}}),ef=new E({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/metric.py#L490"}}),tf=new E({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/metric.py#L451"}}),af=new E({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/metric.py#L388",returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),sf=new E({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.utils.download_manager.DownloadManager] = None"}],parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/metric.py#L565"}}),nf=new Tt({}),rf=new E({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/filesystems/s3filesystem.py#L6"}}),ki=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example",$$slots:{default:[Kne]},$$scope:{ctx:k}}}),Ei=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-2",$$slots:{default:[Yne]},$$scope:{ctx:k}}}),Ii=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-3",$$slots:{default:[Jne]},$$scope:{ctx:k}}}),qi=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-4",$$slots:{default:[Zne]},$$scope:{ctx:k}}}),Ti=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-5",$$slots:{default:[Xne]},$$scope:{ctx:k}}}),pf=new Tt({}),cf=new E({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/filesystems/__init__.py#L28"}}),df=new E({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/filesystems/__init__.py#L40"}}),mf=new Tt({}),hf=new E({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4125/src/datasets/fingerprint.py#L212"}}),{c(){c=n("meta"),g=d(),f=n("h1"),p=n("a"),u=n("span"),_(t.$$.fragment),h=d(),Zs=n("span"),ra=l("Main classes"),$r=d(),Se=n("h2"),$e=n("a"),ne=n("span"),_(oa.$$.fragment),Tf=d(),xr=n("span"),hD=l("DatasetInfo"),Lw=d(),Z=n("div"),_(cp.$$.fragment),fD=d(),Pb=n("p"),uD=l("Information about a dataset."),gD=d(),Nf=n("p"),Lb=n("em"),_D=l("DatasetInfo"),bD=l(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),$D=d(),Ab=n("p"),xD=l("Note: Not all fields are known on construction and may be updated later."),vD=d(),xe=n("div"),_(dp.$$.fragment),yD=d(),mp=n("p"),jD=l("Create DatasetInfo from the JSON file in "),Fb=n("code"),wD=l("dataset_info_dir"),DD=l("."),kD=d(),Ob=n("p"),ED=l(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),ID=d(),Sb=n("p"),qD=l("This will overwrite all previous metadata."),TD=d(),_(vr.$$.fragment),ND=d(),la=n("div"),_(hp.$$.fragment),PD=d(),Xs=n("p"),LD=l("Write "),Cb=n("em"),AD=l("DatasetInfo"),FD=l(" and license (if present) as JSON files to "),zb=n("em"),OD=l("dataset_info_dir"),SD=l("."),CD=d(),_(yr.$$.fragment),Aw=d(),Qs=n("h2"),jr=n("a"),Vb=n("span"),_(fp.$$.fragment),zD=d(),Ub=n("span"),VD=l("Dataset"),Fw=d(),wr=n("p"),UD=l("The base class "),Pf=n("a"),MD=l("Dataset"),RD=l(" implements a Dataset backed by an Apache Arrow table."),Ow=d(),I=n("div"),_(up.$$.fragment),BD=d(),Mb=n("p"),HD=l("A Dataset backed by an Arrow table."),GD=d(),Qe=n("div"),_(gp.$$.fragment),WD=d(),Rb=n("p"),KD=l("Add column to Dataset."),YD=d(),Bb=n("p"),Hb=n("em"),JD=l("New in version 1.7."),ZD=d(),_(Dr.$$.fragment),XD=d(),et=n("div"),_(_p.$$.fragment),QD=d(),Gb=n("p"),ek=l("Add item to Dataset."),tk=d(),Wb=n("p"),Kb=n("em"),ak=l("New in version 1.7."),sk=d(),_(kr.$$.fragment),nk=d(),Er=n("div"),_(bp.$$.fragment),rk=d(),Yb=n("p"),ok=l("Instantiate a Dataset backed by an Arrow table at filename."),lk=d(),Ir=n("div"),_($p.$$.fragment),ik=d(),Jb=n("p"),pk=l("Instantiate a Dataset backed by an Arrow buffer."),ck=d(),ve=n("div"),_(xp.$$.fragment),dk=d(),Nt=n("p"),mk=l("Convert "),Zb=n("code"),hk=l("pandas.DataFrame"),fk=l(" to a "),Xb=n("code"),uk=l("pyarrow.Table"),gk=l(" to create a "),Lf=n("a"),_k=l("Dataset"),bk=l("."),$k=d(),vp=n("p"),xk=l(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Qb=n("em"),vk=l("object"),yk=l(", we need to guess the datatype by looking at the Python objects in this Series."),jk=d(),yp=n("p"),wk=l("Be aware that Series of the "),e2=n("em"),Dk=l("object"),kk=l(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),Ek=d(),_(qr.$$.fragment),Ik=d(),Tr=n("div"),_(jp.$$.fragment),qk=d(),Pt=n("p"),Tk=l("Convert "),t2=n("code"),Nk=l("dict"),Pk=l(" to a "),a2=n("code"),Lk=l("pyarrow.Table"),Ak=l(" to create a "),Af=n("a"),Fk=l("Dataset"),Ok=l("."),Sk=d(),ia=n("div"),_(wp.$$.fragment),Ck=d(),s2=n("p"),zk=l("The Apache Arrow table backing the dataset."),Vk=d(),_(Nr.$$.fragment),Uk=d(),pa=n("div"),_(Dp.$$.fragment),Mk=d(),n2=n("p"),Rk=l("The cache files containing the Apache Arrow table backing the dataset."),Bk=d(),_(Pr.$$.fragment),Hk=d(),ca=n("div"),_(kp.$$.fragment),Gk=d(),r2=n("p"),Wk=l("Number of columns in the dataset."),Kk=d(),_(Lr.$$.fragment),Yk=d(),da=n("div"),_(Ep.$$.fragment),Jk=d(),Ip=n("p"),Zk=l("Number of rows in the dataset (same as "),Ar=n("a"),Xk=l("Dataset."),o2=n("strong"),Qk=l("len"),e5=l("()"),t5=l(")."),a5=d(),_(Fr.$$.fragment),s5=d(),ma=n("div"),_(qp.$$.fragment),n5=d(),l2=n("p"),r5=l("Names of the columns in the dataset."),o5=d(),_(Or.$$.fragment),l5=d(),ha=n("div"),_(Tp.$$.fragment),i5=d(),i2=n("p"),p5=l("Shape of the dataset (number of columns, number of rows)."),c5=d(),_(Sr.$$.fragment),d5=d(),tt=n("div"),_(Np.$$.fragment),m5=d(),p2=n("p"),h5=l("Return a list of the unique elements in a column."),f5=d(),c2=n("p"),u5=l("This is implemented in the low-level backend and as such, very fast."),g5=d(),_(Cr.$$.fragment),_5=d(),fa=n("div"),_(Pp.$$.fragment),b5=d(),d2=n("p"),$5=l(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),x5=d(),_(zr.$$.fragment),v5=d(),ua=n("div"),_(Lp.$$.fragment),y5=d(),m2=n("p"),j5=l("Cast the dataset to a new set of features."),w5=d(),_(Vr.$$.fragment),D5=d(),ga=n("div"),_(Ap.$$.fragment),k5=d(),h2=n("p"),E5=l("Cast column to feature for decoding."),I5=d(),_(Ur.$$.fragment),q5=d(),at=n("div"),_(Fp.$$.fragment),T5=d(),f2=n("p"),N5=l("Remove one or several column(s) in the dataset and the features associated to them."),P5=d(),en=n("p"),L5=l("You can also remove a column using "),Ff=n("a"),A5=l("Dataset.map()"),F5=l(" with "),u2=n("em"),O5=l("remove_columns"),S5=l(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),C5=d(),_(Mr.$$.fragment),z5=d(),_a=n("div"),_(Op.$$.fragment),V5=d(),g2=n("p"),U5=l(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),M5=d(),_(Rr.$$.fragment),R5=d(),ba=n("div"),_(Sp.$$.fragment),B5=d(),_2=n("p"),H5=l(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),G5=d(),_(Br.$$.fragment),W5=d(),$a=n("div"),_(Cp.$$.fragment),K5=d(),zp=n("p"),Y5=l("Casts the given column as :obj:"),b2=n("code"),J5=l("datasets.features.ClassLabel"),Z5=l(" and updates the table."),X5=d(),_(Hr.$$.fragment),Q5=d(),xa=n("div"),_(Vp.$$.fragment),e3=d(),$2=n("p"),t3=l("Number of rows in the dataset."),a3=d(),_(Gr.$$.fragment),s3=d(),va=n("div"),_(Up.$$.fragment),n3=d(),x2=n("p"),r3=l("Iterate through the examples."),o3=d(),Mp=n("p"),l3=l("If a formatting is set with "),Of=n("a"),i3=l("Dataset.set_format()"),p3=l(` rows will be returned with the
selected format.`),c3=d(),Wr=n("div"),_(Rp.$$.fragment),d3=d(),tn=n("p"),m3=l("To be used in a "),v2=n("code"),h3=l("with"),f3=l(" statement. Set "),y2=n("code"),u3=l("__getitem__"),g3=l(" return format (type and columns)."),_3=d(),ye=n("div"),_(Bp.$$.fragment),b3=d(),Ce=n("p"),$3=l("Set "),j2=n("strong"),x3=l("getitem"),v3=l(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),w2=n("code"),y3=l("type"),j3=l(" (for example \u201Cnumpy\u201D) is used to format batches when using "),D2=n("strong"),w3=l("getitem"),D3=l(`.
It\u2019s also possible to use custom transforms for formatting using `),Sf=n("a"),k3=l("datasets.Dataset.set_transform()"),E3=l("."),I3=d(),ze=n("p"),q3=l("It is possible to call "),k2=n("code"),T3=l("map"),N3=l(" after calling "),E2=n("code"),P3=l("set_format"),L3=l(". Since "),I2=n("code"),A3=l("map"),F3=l(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),q2=n("code"),O3=l("map"),S3=l(" on a dataset to add a new column, then this column will be formatted:"),C3=d(),T2=n("p"),z3=l("new formatted columns = (all columns - previously unformatted columns)"),V3=d(),_(Kr.$$.fragment),U3=d(),ya=n("div"),_(Hp.$$.fragment),M3=d(),st=n("p"),R3=l("Set "),N2=n("strong"),B3=l("getitem"),H3=l(" return format using this transform. The transform is applied on-the-fly on batches when "),P2=n("strong"),G3=l("getitem"),W3=l(` is called.
As `),Cf=n("a"),K3=l("datasets.Dataset.set_format()"),Y3=l(", this can be reset using "),zf=n("a"),J3=l("datasets.Dataset.reset_format()"),Z3=d(),_(Yr.$$.fragment),X3=d(),nt=n("div"),_(Gp.$$.fragment),Q3=d(),Wp=n("p"),eE=l("Reset "),L2=n("strong"),tE=l("getitem"),aE=l(" return format to python objects and all columns."),sE=d(),Vf=n("p"),nE=l("Same as "),A2=n("code"),rE=l("self.set_format()"),oE=d(),_(Jr.$$.fragment),lE=d(),je=n("div"),_(Kp.$$.fragment),iE=d(),Lt=n("p"),pE=l("Set "),F2=n("strong"),cE=l("getitem"),dE=l(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),O2=n("code"),mE=l("type"),hE=l(" (for example \u201Cnumpy\u201D) is used to format batches when using "),S2=n("strong"),fE=l("getitem"),uE=l("."),gE=d(),Yp=n("p"),_E=l("It\u2019s also possible to use custom transforms for formatting using "),Uf=n("a"),bE=l("datasets.Dataset.with_transform()"),$E=l("."),xE=d(),an=n("p"),vE=l("Contrary to "),Mf=n("a"),yE=l("datasets.Dataset.set_format()"),jE=l(", "),C2=n("code"),wE=l("with_format"),DE=l(" returns a new Dataset object."),kE=d(),_(Zr.$$.fragment),EE=d(),we=n("div"),_(Jp.$$.fragment),IE=d(),sn=n("p"),qE=l("Set "),z2=n("strong"),TE=l("getitem"),NE=l(" return format using this transform. The transform is applied on-the-fly on batches when "),V2=n("strong"),PE=l("getitem"),LE=l(" is called."),AE=d(),nn=n("p"),FE=l("As "),Rf=n("a"),OE=l("datasets.Dataset.set_format()"),SE=l(", this can be reset using "),Bf=n("a"),CE=l("datasets.Dataset.reset_format()"),zE=l("."),VE=d(),rn=n("p"),UE=l("Contrary to "),Hf=n("a"),ME=l("datasets.Dataset.set_transform()"),RE=l(", "),U2=n("code"),BE=l("with_transform"),HE=l(" returns a new Dataset object."),GE=d(),_(Xr.$$.fragment),WE=d(),Qr=n("div"),_(Zp.$$.fragment),KE=d(),M2=n("p"),YE=l("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),JE=d(),rt=n("div"),_(Xp.$$.fragment),ZE=d(),R2=n("p"),XE=l(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),QE=d(),B2=n("p"),e6=l("Be careful when running this command that no other process is currently using other cache files."),t6=d(),_(eo.$$.fragment),a6=d(),De=n("div"),_(Qp.$$.fragment),s6=d(),H2=n("p"),n6=l(`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),r6=d(),ec=n("p"),o6=l("You can specify whether the function should be batched or not with the "),G2=n("code"),l6=l("batched"),i6=l(" parameter:"),p6=d(),on=n("ul"),W2=n("li"),c6=l(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),d6=d(),K2=n("li"),m6=l(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),h6=d(),me=n("li"),f6=l("If batched is True and batch_size is "),Y2=n("code"),u6=l("n"),g6=l(" > 1, then the function takes a batch of "),J2=n("code"),_6=l("n"),b6=l(" examples as input and can return a batch with "),Z2=n("code"),$6=l("n"),x6=l(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),X2=n("code"),v6=l("n"),y6=l(` examples.
A batch is a dictionary, e.g. a batch of `),Q2=n("code"),j6=l("n"),w6=l(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),D6=d(),_(to.$$.fragment),k6=d(),ja=n("div"),_(tc.$$.fragment),E6=d(),e1=n("p"),I6=l(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),q6=d(),_(ao.$$.fragment),T6=d(),wa=n("div"),_(ac.$$.fragment),N6=d(),t1=n("p"),P6=l("Create a new dataset with rows selected following the list/array of indices."),L6=d(),_(so.$$.fragment),A6=d(),ot=n("div"),_(sc.$$.fragment),F6=d(),a1=n("p"),O6=l("Create a new dataset sorted according to a column."),S6=d(),s1=n("p"),C6=l(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),z6=d(),_(no.$$.fragment),V6=d(),lt=n("div"),_(nc.$$.fragment),U6=d(),n1=n("p"),M6=l("Create a new Dataset where the rows are shuffled."),R6=d(),r1=n("p"),B6=l(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),H6=d(),_(ro.$$.fragment),G6=d(),it=n("div"),_(rc.$$.fragment),W6=d(),H=n("p"),K6=l("Return a dictionary ("),o1=n("code"),Y6=l("datasets.DatasetDict"),J6=l(") with two random train and test subsets ("),l1=n("em"),Z6=l("train"),X6=l(" and "),i1=n("em"),Q6=l("test"),e8=d(),p1=n("code"),t8=l("Dataset"),a8=l(` splits).
Splits are created from the dataset according to `),c1=n("em"),s8=l("test_size"),n8=l(", "),d1=n("em"),r8=l("train_size"),o8=l(" and "),m1=n("em"),l8=l("shuffle"),i8=l("."),p8=d(),oc=n("p"),c8=l("This method is similar to scikit-learn "),h1=n("em"),d8=l("train_test_split"),m8=l(" with the omission of the stratified options."),h8=d(),_(oo.$$.fragment),f8=d(),re=n("div"),_(lc.$$.fragment),u8=d(),ln=n("p"),g8=l("Return the "),f1=n("em"),_8=l("index"),b8=l("-nth shard from dataset split into "),u1=n("em"),$8=l("num_shards"),x8=l(" pieces."),v8=d(),g1=n("p"),y8=l(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),j8=d(),ic=n("p"),w8=l(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),_1=n("em"),D8=l("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),k8=l(` will return
a dataset with the same order as the original.`),E8=d(),b1=n("p"),I8=l(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),q8=d(),_(lo.$$.fragment),T8=d(),Da=n("div"),_(pc.$$.fragment),N8=d(),$1=n("p"),P8=l(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),L8=d(),_(io.$$.fragment),A8=d(),pt=n("div"),_(cc.$$.fragment),F8=d(),x1=n("p"),O8=l(`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),S8=d(),At=n("p"),C8=l("The resulting Parquet files are self-contained by default: if your dataset contains "),Gf=n("a"),z8=l("Image"),V8=l(" or "),Wf=n("a"),U8=l("Audio"),M8=l(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),v1=n("em"),R8=l("embed_external_files"),B8=l(" to False."),H8=d(),_(po.$$.fragment),G8=d(),K=n("div"),_(dc.$$.fragment),W8=d(),pn=n("p"),K8=l("Saves a dataset to a dataset directory, or in a filesystem using either "),Kf=n("a"),Y8=l("S3FileSystem"),J8=l(` or
any implementation of `),y1=n("code"),Z8=l("fsspec.spec.AbstractFileSystem"),X8=l("."),Q8=d(),cn=n("p"),eI=l("For "),Yf=n("a"),tI=l("Image"),aI=l(" and "),Jf=n("a"),sI=l("Audio"),nI=l(" data:"),rI=d(),mc=n("p"),oI=l(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),j1=n("em"),lI=l("read()"),iI=l(" those files first."),pI=d(),_(co.$$.fragment),cI=d(),_(mo.$$.fragment),dI=d(),_(ho.$$.fragment),mI=d(),ka=n("div"),_(hc.$$.fragment),hI=d(),Ft=n("p"),fI=l("Loads a dataset that was previously saved using "),w1=n("code"),uI=l("save_to_disk"),gI=l(` from a dataset directory, or from a
filesystem using either `),Zf=n("a"),_I=l("S3FileSystem"),bI=l(` or any implementation of
`),D1=n("code"),$I=l("fsspec.spec.AbstractFileSystem"),xI=l("."),vI=d(),_(fo.$$.fragment),yI=d(),uo=n("div"),_(fc.$$.fragment),jI=d(),k1=n("p"),wI=l("Create and cache a new Dataset by flattening the indices mapping."),DI=d(),Ea=n("div"),_(uc.$$.fragment),kI=d(),E1=n("p"),EI=l("Exports the dataset to csv"),II=d(),_(go.$$.fragment),qI=d(),Ia=n("div"),_(gc.$$.fragment),TI=d(),_c=n("p"),NI=l("Returns the dataset as a "),I1=n("code"),PI=l("pandas.DataFrame"),LI=l(". Can also return a generator for large datasets."),AI=d(),_(_o.$$.fragment),FI=d(),qa=n("div"),_(bc.$$.fragment),OI=d(),q1=n("p"),SI=l("Returns the dataset as a Python dict. Can also return a generator for large datasets."),CI=d(),_(bo.$$.fragment),zI=d(),Ta=n("div"),_($c.$$.fragment),VI=d(),T1=n("p"),UI=l("Export the dataset to JSON Lines or JSON."),MI=d(),_($o.$$.fragment),RI=d(),Na=n("div"),_(xc.$$.fragment),BI=d(),N1=n("p"),HI=l("Exports the dataset to parquet"),GI=d(),_(xo.$$.fragment),WI=d(),ct=n("div"),_(vc.$$.fragment),KI=d(),dn=n("p"),YI=l(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),P1=n("code"),JI=l("device"),ZI=l(" if you want to run it on GPU ("),L1=n("code"),XI=l("device"),QI=l(` must be the GPU index).
You can find more information about Faiss here:`),e9=d(),A1=n("ul"),Xf=n("li"),t9=l("For "),yc=n("a"),a9=l("string factory"),s9=d(),_(vo.$$.fragment),n9=d(),Pa=n("div"),_(jc.$$.fragment),r9=d(),Ot=n("p"),o9=l(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),F1=n("em"),l9=l("external_arrays"),i9=l(`.
You can specify `),O1=n("em"),p9=l("device"),c9=l(" if you want to run it on GPU ("),S1=n("em"),d9=l("device"),m9=l(` must be the GPU index).
You can find more information about Faiss here:`),h9=d(),C1=n("ul"),Qf=n("li"),f9=l("For "),wc=n("a"),u9=l("string factory"),g9=d(),yo=n("div"),_(Dc.$$.fragment),_9=d(),z1=n("p"),b9=l("Save a FaissIndex on disk."),$9=d(),La=n("div"),_(kc.$$.fragment),x9=d(),V1=n("p"),v9=l("Load a FaissIndex from disk."),y9=d(),Ec=n("p"),j9=l(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),U1=n("em"),w9=l(".get_index(index_name).faiss_index"),D9=l(" to make it fit your needs."),k9=d(),Aa=n("div"),_(Ic.$$.fragment),E9=d(),M1=n("p"),I9=l("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),q9=d(),_(jo.$$.fragment),T9=d(),Fa=n("div"),_(qc.$$.fragment),N9=d(),R1=n("p"),P9=l("Load an existing text index using ElasticSearch for fast retrieval."),L9=d(),_(wo.$$.fragment),A9=d(),Do=n("div"),_(Tc.$$.fragment),F9=d(),B1=n("p"),O9=l("List the colindex_nameumns/identifiers of all the attached indexes."),S9=d(),ko=n("div"),_(Nc.$$.fragment),C9=d(),H1=n("p"),z9=l("List the index_name/identifiers of all the attached indexes."),V9=d(),Eo=n("div"),_(Pc.$$.fragment),U9=d(),G1=n("p"),M9=l("Drop the index with the specified column."),R9=d(),Io=n("div"),_(Lc.$$.fragment),B9=d(),W1=n("p"),H9=l("Find the nearest examples indices in the dataset to the query."),G9=d(),qo=n("div"),_(Ac.$$.fragment),W9=d(),K1=n("p"),K9=l("Find the nearest examples indices in the dataset to the query."),Y9=d(),To=n("div"),_(Fc.$$.fragment),J9=d(),Y1=n("p"),Z9=l("Find the nearest examples in the dataset to the query."),X9=d(),No=n("div"),_(Oc.$$.fragment),Q9=d(),J1=n("p"),eq=l("Find the nearest examples in the dataset to the query."),tq=d(),Po=n("div"),_(Sc.$$.fragment),aq=d(),eu=n("p"),tu=n("a"),sq=l("datasets.DatasetInfo"),nq=l(" object containing all the metadata in the dataset."),rq=d(),Lo=n("div"),_(Cc.$$.fragment),oq=d(),au=n("p"),su=n("a"),lq=l("datasets.NamedSplit"),iq=l(" object corresponding to a named dataset split."),pq=d(),nu=n("div"),_(zc.$$.fragment),cq=d(),ru=n("div"),_(Vc.$$.fragment),dq=d(),ou=n("div"),_(Uc.$$.fragment),mq=d(),lu=n("div"),_(Mc.$$.fragment),hq=d(),iu=n("div"),_(Rc.$$.fragment),fq=d(),pu=n("div"),_(Bc.$$.fragment),uq=d(),cu=n("div"),_(Hc.$$.fragment),gq=d(),du=n("div"),_(Gc.$$.fragment),_q=d(),mu=n("div"),_(Wc.$$.fragment),bq=d(),hu=n("div"),_(Kc.$$.fragment),$q=d(),fu=n("div"),_(Yc.$$.fragment),xq=d(),uu=n("div"),_(Jc.$$.fragment),vq=d(),gu=n("div"),_(Zc.$$.fragment),yq=d(),Oa=n("div"),_(Xc.$$.fragment),jq=d(),Z1=n("p"),wq=l("Create Dataset from CSV file(s)."),Dq=d(),_(Ao.$$.fragment),kq=d(),Sa=n("div"),_(Qc.$$.fragment),Eq=d(),X1=n("p"),Iq=l("Create Dataset from JSON or JSON Lines file(s)."),qq=d(),_(Fo.$$.fragment),Tq=d(),Ca=n("div"),_(ed.$$.fragment),Nq=d(),Q1=n("p"),Pq=l("Create Dataset from Parquet file(s)."),Lq=d(),_(Oo.$$.fragment),Aq=d(),za=n("div"),_(td.$$.fragment),Fq=d(),e$=n("p"),Oq=l("Create Dataset from text file(s)."),Sq=d(),_(So.$$.fragment),Cq=d(),Va=n("div"),_(ad.$$.fragment),zq=d(),mn=n("p"),Vq=l("Prepare a dataset for the given task by casting the dataset\u2019s "),_u=n("a"),Uq=l("Features"),Mq=l(" to standardized column names and types as detailed in "),bu=n("a"),Rq=l("datasets.tasks"),Bq=l("."),Hq=d(),hn=n("p"),Gq=l("Casts "),t$=n("code"),Wq=l("datasets.DatasetInfo.features"),Kq=l(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),a$=n("code"),Yq=l("datasets.DatasetInfo.task_templates"),Jq=l(" after casting."),Zq=d(),Ua=n("div"),_(sd.$$.fragment),Xq=d(),nd=n("p"),Qq=l("Align the dataset\u2019s label ID and label name mapping to match an input "),s$=n("code"),eT=l("label2id"),tT=l(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),aT=d(),_(Co.$$.fragment),Sw=d(),St=n("div"),_(rd.$$.fragment),sT=d(),fn=n("p"),nT=l("Converts a list of "),$u=n("a"),rT=l("Dataset"),oT=l(" with the same schema into a single "),xu=n("a"),lT=l("Dataset"),iT=l("."),pT=d(),_(zo.$$.fragment),Cw=d(),X=n("div"),_(od.$$.fragment),cT=d(),n$=n("p"),dT=l(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),mT=d(),un=n("p"),hT=l("You can use this function on a list of "),vu=n("a"),fT=l("Dataset"),uT=l(" objects, or on a list of "),yu=n("a"),gT=l("IterableDataset"),_T=l(" objects."),bT=d(),Ve=n("p"),$T=l("If "),r$=n("code"),xT=l("probabilities"),vT=l(" is "),o$=n("code"),yT=l("None"),jT=l(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),l$=n("code"),wT=l("probabilities"),DT=l(" is not "),i$=n("code"),kT=l("None"),ET=l(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),IT=d(),p$=n("p"),qT=l("The resulting dataset ends when one of the source datasets runs out of examples."),TT=d(),_(Vo.$$.fragment),zw=d(),he=n("div"),_(ld.$$.fragment),NT=d(),c$=n("p"),PT=l(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),LT=d(),d$=n("p"),AT=l(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),FT=d(),m$=n("p"),OT=l(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),ST=d(),Ue=n("ul"),h$=n("li"),CT=l("cache files are always recreated"),zT=d(),f$=n("li"),VT=l("cache files are written to a temporary directory that is deleted when session closes"),UT=d(),u$=n("li"),MT=l("cache files are named using a random hash instead of the dataset fingerprint"),RT=d(),id=n("li"),BT=l("use "),ju=n("a"),HT=l("datasets.Dataset.save_to_disk()"),GT=l(" to save a transformed dataset or it will be deleted when session closes"),WT=d(),Ct=n("li"),KT=l("caching doesn\u2019t affect "),wu=n("a"),YT=l("datasets.load_dataset()"),JT=l(`. If you want to regenerate a dataset from scratch you should use
the `),g$=n("code"),ZT=l("download_mode"),XT=l(" parameter in "),Du=n("a"),QT=l("datasets.load_dataset()"),eN=l("."),Vw=d(),fe=n("div"),_(pd.$$.fragment),tN=d(),_$=n("p"),aN=l(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),sN=d(),b$=n("p"),nN=l(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),rN=d(),$$=n("p"),oN=l(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),lN=d(),Me=n("ul"),x$=n("li"),iN=l("cache files are always recreated"),pN=d(),v$=n("li"),cN=l("cache files are written to a temporary directory that is deleted when session closes"),dN=d(),y$=n("li"),mN=l("cache files are named using a random hash instead of the dataset fingerprint"),hN=d(),cd=n("li"),fN=l("use "),ku=n("a"),uN=l("datasets.Dataset.save_to_disk()"),gN=l(" to save a transformed dataset or it will be deleted when session closes"),_N=d(),zt=n("li"),bN=l("caching doesn\u2019t affect "),Eu=n("a"),$N=l("datasets.load_dataset()"),xN=l(`. If you want to regenerate a dataset from scratch you should use
the `),j$=n("code"),vN=l("download_mode"),yN=l(" parameter in "),Iu=n("a"),jN=l("datasets.load_dataset()"),wN=l("."),Uw=d(),ue=n("div"),_(dd.$$.fragment),DN=d(),w$=n("p"),kN=l(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),EN=d(),D$=n("p"),IN=l(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),qN=d(),k$=n("p"),TN=l(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),NN=d(),Re=n("ul"),E$=n("li"),PN=l("cache files are always recreated"),LN=d(),I$=n("li"),AN=l("cache files are written to a temporary directory that is deleted when session closes"),FN=d(),q$=n("li"),ON=l("cache files are named using a random hash instead of the dataset fingerprint"),SN=d(),md=n("li"),CN=l("use "),qu=n("a"),zN=l("datasets.Dataset.save_to_disk()"),VN=l(" to save a transformed dataset or it will be deleted when session closes"),UN=d(),Vt=n("li"),MN=l("caching doesn\u2019t affect "),Tu=n("a"),RN=l("datasets.load_dataset()"),BN=l(`. If you want to regenerate a dataset from scratch you should use
the `),T$=n("code"),HN=l("download_mode"),GN=l(" parameter in "),Nu=n("a"),WN=l("datasets.load_dataset()"),KN=l("."),Mw=d(),gn=n("h2"),Uo=n("a"),N$=n("span"),_(hd.$$.fragment),YN=d(),P$=n("span"),JN=l("DatasetDict"),Rw=d(),Mo=n("p"),ZN=l("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),L$=n("code"),XN=l("Dataset"),QN=l(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),Bw=d(),L=n("div"),_(fd.$$.fragment),eP=d(),A$=n("p"),tP=l("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),aP=d(),Ma=n("div"),_(ud.$$.fragment),sP=d(),F$=n("p"),nP=l("The Apache Arrow tables backing each split."),rP=d(),_(Ro.$$.fragment),oP=d(),Ra=n("div"),_(gd.$$.fragment),lP=d(),O$=n("p"),iP=l("The cache files containing the Apache Arrow table backing each split."),pP=d(),_(Bo.$$.fragment),cP=d(),Ba=n("div"),_(_d.$$.fragment),dP=d(),S$=n("p"),mP=l("Number of columns in each split of the dataset."),hP=d(),_(Ho.$$.fragment),fP=d(),Ha=n("div"),_(bd.$$.fragment),uP=d(),$d=n("p"),gP=l("Number of rows in each split of the dataset (same as "),Go=n("a"),_P=l("datasets.Dataset."),C$=n("strong"),bP=l("len"),$P=l("()"),xP=l(")."),vP=d(),_(Wo.$$.fragment),yP=d(),Ga=n("div"),_(xd.$$.fragment),jP=d(),z$=n("p"),wP=l("Names of the columns in each split of the dataset."),DP=d(),_(Ko.$$.fragment),kP=d(),Wa=n("div"),_(vd.$$.fragment),EP=d(),V$=n("p"),IP=l("Shape of each split of the dataset (number of columns, number of rows)."),qP=d(),_(Yo.$$.fragment),TP=d(),dt=n("div"),_(yd.$$.fragment),NP=d(),U$=n("p"),PP=l("Return a list of the unique elements in a column for each split."),LP=d(),M$=n("p"),AP=l("This is implemented in the low-level backend and as such, very fast."),FP=d(),_(Jo.$$.fragment),OP=d(),Ka=n("div"),_(jd.$$.fragment),SP=d(),R$=n("p"),CP=l(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),zP=d(),_(Zo.$$.fragment),VP=d(),Ya=n("div"),_(wd.$$.fragment),UP=d(),B$=n("p"),MP=l(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),RP=d(),_(Xo.$$.fragment),BP=d(),Ja=n("div"),_(Dd.$$.fragment),HP=d(),H$=n("p"),GP=l(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),WP=d(),_(Qo.$$.fragment),KP=d(),mt=n("div"),_(kd.$$.fragment),YP=d(),G$=n("p"),JP=l(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),ZP=d(),W$=n("p"),XP=l(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),QP=d(),_(el.$$.fragment),eL=d(),ke=n("div"),_(Ed.$$.fragment),tL=d(),K$=n("p"),aL=l("Create a new Dataset where the rows are shuffled."),sL=d(),Y$=n("p"),nL=l("The transformation is applied to all the datasets of the dataset dictionary."),rL=d(),J$=n("p"),oL=l(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),lL=d(),_(tl.$$.fragment),iL=d(),Ee=n("div"),_(Id.$$.fragment),pL=d(),qd=n("p"),cL=l("Set "),Z$=n("code"),dL=l("__getitem__"),mL=l(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),hL=d(),Be=n("p"),fL=l("It is possible to call "),X$=n("code"),uL=l("map"),gL=l(" after calling "),Q$=n("code"),_L=l("set_format"),bL=l(". Since "),ex=n("code"),$L=l("map"),xL=l(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),tx=n("code"),vL=l("map"),yL=l(" on a dataset to add a new column, then this column will be formatted:"),jL=d(),ax=n("p"),wL=l("new formatted columns = (all columns - previously unformatted columns)"),DL=d(),_(al.$$.fragment),kL=d(),ht=n("div"),_(Td.$$.fragment),EL=d(),Nd=n("p"),IL=l("Reset "),sx=n("code"),qL=l("__getitem__"),TL=l(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),NL=d(),Pu=n("p"),PL=l("Same as "),nx=n("code"),LL=l("self.set_format()"),AL=d(),_(sl.$$.fragment),FL=d(),nl=n("div"),_(Pd.$$.fragment),OL=d(),_n=n("p"),SL=l("To be used in a "),rx=n("em"),CL=l("with"),zL=l(" statement. Set "),ox=n("code"),VL=l("__getitem__"),UL=l(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),ML=d(),Ie=n("div"),_(Ld.$$.fragment),RL=d(),Ut=n("p"),BL=l("Set "),lx=n("code"),HL=l("__getitem__"),GL=l(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),ix=n("code"),WL=l("type"),KL=l(" (for example \u201Cnumpy\u201D) is used to format batches when using "),px=n("code"),YL=l("__getitem__"),JL=l(`.
The format is set for every dataset in the dataset dictionary`),ZL=d(),Ad=n("p"),XL=l("It\u2019s also possible to use custom transforms for formatting using "),Lu=n("a"),QL=l("datasets.Dataset.with_transform()"),eA=l("."),tA=d(),bn=n("p"),aA=l("Contrary to "),Au=n("a"),sA=l("datasets.DatasetDict.set_format()"),nA=l(", "),cx=n("code"),rA=l("with_format"),oA=l(" returns a new DatasetDict object with new Dataset objects."),lA=d(),_(rl.$$.fragment),iA=d(),qe=n("div"),_(Fd.$$.fragment),pA=d(),$n=n("p"),cA=l("Set "),dx=n("code"),dA=l("__getitem__"),mA=l(" return format using this transform. The transform is applied on-the-fly on batches when "),mx=n("code"),hA=l("__getitem__"),fA=l(` is called.
The transform is set for every dataset in the dataset dictionary`),uA=d(),xn=n("p"),gA=l("As "),Fu=n("a"),_A=l("datasets.Dataset.set_format()"),bA=l(", this can be reset using "),Ou=n("a"),$A=l("datasets.Dataset.reset_format()"),xA=l("."),vA=d(),vn=n("p"),yA=l("Contrary to "),hx=n("code"),jA=l("datasets.DatasetDict.set_transform()"),wA=l(", "),fx=n("code"),DA=l("with_transform"),kA=l(" returns a new DatasetDict object with new Dataset objects."),EA=d(),_(ol.$$.fragment),IA=d(),Za=n("div"),_(Od.$$.fragment),qA=d(),ux=n("p"),TA=l(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),NA=d(),_(ll.$$.fragment),PA=d(),ft=n("div"),_(Sd.$$.fragment),LA=d(),gx=n("p"),AA=l(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),FA=d(),Mt=n("p"),OA=l("You can also remove a column using "),Su=n("a"),SA=l("Dataset.map()"),CA=l(" with "),_x=n("em"),zA=l("feature"),VA=l(" but "),bx=n("code"),UA=l("cast_"),MA=l(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),RA=d(),_(il.$$.fragment),BA=d(),Xa=n("div"),_(Cd.$$.fragment),HA=d(),$x=n("p"),GA=l("Cast column to feature for decoding."),WA=d(),_(pl.$$.fragment),KA=d(),Te=n("div"),_(zd.$$.fragment),YA=d(),xx=n("p"),JA=l(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),ZA=d(),vx=n("p"),XA=l("The transformation is applied to all the splits of the dataset dictionary."),QA=d(),yn=n("p"),eF=l("You can also remove a column using "),Cu=n("a"),tF=l("Dataset.map()"),aF=l(" with "),yx=n("em"),sF=l("remove_columns"),nF=l(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),rF=d(),_(cl.$$.fragment),oF=d(),Ne=n("div"),_(Vd.$$.fragment),lF=d(),jx=n("p"),iF=l(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),pF=d(),jn=n("p"),cF=l("You can also rename a column using "),zu=n("a"),dF=l("Dataset.map()"),mF=l(" with "),wx=n("em"),hF=l("remove_columns"),fF=l(" but the present method:"),uF=d(),Ud=n("ul"),Dx=n("li"),gF=l("takes care of moving the original features under the new column name."),_F=d(),kx=n("li"),bF=l("doesn\u2019t copy the data to a new dataset and is thus much faster."),$F=d(),_(dl.$$.fragment),xF=d(),Qa=n("div"),_(Md.$$.fragment),vF=d(),Ex=n("p"),yF=l(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),jF=d(),_(ml.$$.fragment),wF=d(),es=n("div"),_(Rd.$$.fragment),DF=d(),Bd=n("p"),kF=l("Casts the given column as :obj:"),Ix=n("code"),EF=l("datasets.features.ClassLabel"),IF=l(" and updates the tables."),qF=d(),_(hl.$$.fragment),TF=d(),Pe=n("div"),_(Hd.$$.fragment),NF=d(),wn=n("p"),PF=l("Pushes the "),qx=n("code"),LF=l("DatasetDict"),AF=l(` to the hub as a Parquet dataset.
The `),Tx=n("code"),FF=l("DatasetDict"),OF=l(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),SF=d(),Nx=n("p"),CF=l("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),zF=d(),Rt=n("p"),VF=l("The resulting Parquet files are self-contained by default: if your dataset contains "),Vu=n("a"),UF=l("Image"),MF=l(" or "),Uu=n("a"),RF=l("Audio"),BF=l(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),Px=n("em"),HF=l("embed_external_files"),GF=l(" to False."),WF=d(),_(fl.$$.fragment),KF=d(),oe=n("div"),_(Gd.$$.fragment),YF=d(),Dn=n("p"),JF=l("Saves a dataset dict to a filesystem using either "),Mu=n("a"),ZF=l("S3FileSystem"),XF=l(` or
`),Lx=n("code"),QF=l("fsspec.spec.AbstractFileSystem"),eO=l("."),tO=d(),kn=n("p"),aO=l("For "),Ru=n("a"),sO=l("Image"),nO=l(" and "),Bu=n("a"),rO=l("Audio"),oO=l(" data:"),lO=d(),Wd=n("p"),iO=l(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),Ax=n("em"),pO=l("read()"),cO=l(" those files first."),dO=d(),_(ul.$$.fragment),mO=d(),_(gl.$$.fragment),hO=d(),ts=n("div"),_(Kd.$$.fragment),fO=d(),Bt=n("p"),uO=l("Load a dataset that was previously saved using "),Fx=n("code"),gO=l("save_to_disk"),_O=l(` from a filesystem using either
`),Hu=n("a"),bO=l("S3FileSystem"),$O=l(" or "),Ox=n("code"),xO=l("fsspec.spec.AbstractFileSystem"),vO=l("."),yO=d(),_(_l.$$.fragment),jO=d(),as=n("div"),_(Yd.$$.fragment),wO=d(),Sx=n("p"),DO=l("Create DatasetDict from CSV file(s)."),kO=d(),_(bl.$$.fragment),EO=d(),ss=n("div"),_(Jd.$$.fragment),IO=d(),Cx=n("p"),qO=l("Create DatasetDict from JSON Lines file(s)."),TO=d(),_($l.$$.fragment),NO=d(),ns=n("div"),_(Zd.$$.fragment),PO=d(),zx=n("p"),LO=l("Create DatasetDict from Parquet file(s)."),AO=d(),_(xl.$$.fragment),FO=d(),rs=n("div"),_(Xd.$$.fragment),OO=d(),Vx=n("p"),SO=l("Create DatasetDict from text file(s)."),CO=d(),_(vl.$$.fragment),zO=d(),os=n("div"),_(Qd.$$.fragment),VO=d(),En=n("p"),UO=l("Prepare a dataset for the given task by casting the dataset\u2019s "),Gu=n("a"),MO=l("Features"),RO=l(" to standardized column names and types as detailed in "),Wu=n("a"),BO=l("datasets.tasks"),HO=l("."),GO=d(),In=n("p"),WO=l("Casts "),Ux=n("code"),KO=l("datasets.DatasetInfo.features"),YO=l(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Mx=n("code"),JO=l("datasets.DatasetInfo.task_templates"),ZO=l(" after casting."),Hw=d(),Ku=n("a"),Gw=d(),qn=n("h2"),yl=n("a"),Rx=n("span"),_(em.$$.fragment),XO=d(),Bx=n("span"),QO=l("IterableDataset"),Ww=d(),jl=n("p"),eS=l("The base class "),Yu=n("a"),tS=l("IterableDataset"),aS=l(" implements an iterable Dataset backed by python generators."),Kw=d(),F=n("div"),_(tm.$$.fragment),sS=d(),Hx=n("p"),nS=l("A Dataset backed by an iterable."),rS=d(),ls=n("div"),_(am.$$.fragment),oS=d(),Gx=n("p"),lS=l(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),iS=d(),_(wl.$$.fragment),pS=d(),is=n("div"),_(sm.$$.fragment),cS=d(),Wx=n("p"),dS=l("Cast column to feature for decoding."),mS=d(),_(Dl.$$.fragment),hS=d(),ps=n("div"),_(nm.$$.fragment),fS=d(),Kx=n("p"),uS=l("Cast the dataset to a new set of features."),gS=d(),_(kl.$$.fragment),_S=d(),Ju=n("div"),_(rm.$$.fragment),bS=d(),Le=n("div"),_(om.$$.fragment),$S=d(),Yx=n("p"),xS=l(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),vS=d(),lm=n("p"),yS=l("You can specify whether the function should be batched or not with the "),Jx=n("code"),jS=l("batched"),wS=l(" parameter:"),DS=d(),Tn=n("ul"),Zx=n("li"),kS=l(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),ES=d(),Xx=n("li"),IS=l(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),qS=d(),ge=n("li"),TS=l("If batched is True and batch_size is "),Qx=n("code"),NS=l("n"),PS=l(" > 1, then the function takes a batch of "),ev=n("code"),LS=l("n"),AS=l(" examples as input and can return a batch with "),tv=n("code"),FS=l("n"),OS=l(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),av=n("code"),SS=l("n"),CS=l(` examples.
A batch is a dictionary, e.g. a batch of `),sv=n("code"),zS=l("n"),VS=l(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),US=d(),_(El.$$.fragment),MS=d(),cs=n("div"),_(im.$$.fragment),RS=d(),nv=n("p"),BS=l(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),HS=d(),_(Il.$$.fragment),GS=d(),ds=n("div"),_(pm.$$.fragment),WS=d(),rv=n("p"),KS=l(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),YS=d(),_(ql.$$.fragment),JS=d(),le=n("div"),_(cm.$$.fragment),ZS=d(),ov=n("p"),XS=l("Randomly shuffles the elements of this dataset."),QS=d(),lv=n("p"),eC=l(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),tC=d(),dm=n("p"),aC=l("For instance, if your dataset contains 10,000 elements but "),iv=n("code"),sC=l("buffer_size"),nC=l(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),rC=d(),Nn=n("p"),oC=l(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Zu=n("a"),lC=l("datasets.IterableDataset.skip()"),iC=l(" or "),Xu=n("a"),pC=l("datasets.IterableDataset.take()"),cC=l(`
then the order of the shards is kept unchanged.`),dC=d(),_(Tl.$$.fragment),mC=d(),ms=n("div"),_(mm.$$.fragment),hC=d(),hm=n("p"),fC=l("Create a new IterableDataset that skips the first "),pv=n("code"),uC=l("n"),gC=l(" elements."),_C=d(),_(Nl.$$.fragment),bC=d(),hs=n("div"),_(fm.$$.fragment),$C=d(),um=n("p"),xC=l("Create a new IterableDataset with only the first "),cv=n("code"),vC=l("n"),yC=l(" elements."),jC=d(),_(Pl.$$.fragment),wC=d(),Ll=n("div"),_(gm.$$.fragment),DC=d(),Qu=n("p"),eg=n("a"),kC=l("datasets.DatasetInfo"),EC=l(" object containing all the metadata in the dataset."),IC=d(),Al=n("div"),_(_m.$$.fragment),qC=d(),tg=n("p"),ag=n("a"),TC=l("datasets.NamedSplit"),NC=l(" object corresponding to a named dataset split."),PC=d(),sg=n("div"),_(bm.$$.fragment),LC=d(),ng=n("div"),_($m.$$.fragment),AC=d(),rg=n("div"),_(xm.$$.fragment),FC=d(),og=n("div"),_(vm.$$.fragment),OC=d(),lg=n("div"),_(ym.$$.fragment),SC=d(),ig=n("div"),_(jm.$$.fragment),CC=d(),pg=n("div"),_(wm.$$.fragment),zC=d(),cg=n("div"),_(Dm.$$.fragment),VC=d(),dg=n("div"),_(km.$$.fragment),UC=d(),mg=n("div"),_(Em.$$.fragment),MC=d(),hg=n("div"),_(Im.$$.fragment),RC=d(),fg=n("div"),_(qm.$$.fragment),BC=d(),ug=n("div"),_(Tm.$$.fragment),Yw=d(),Pn=n("h2"),Fl=n("a"),dv=n("span"),_(Nm.$$.fragment),HC=d(),mv=n("span"),GC=l("IterableDatasetDict"),Jw=d(),Ol=n("p"),WC=l("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),hv=n("code"),KC=l("IterableDataset"),YC=l(" objects as values."),Zw=d(),U=n("div"),_(Pm.$$.fragment),JC=d(),Ae=n("div"),_(Lm.$$.fragment),ZC=d(),fv=n("p"),XC=l(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),QC=d(),Am=n("p"),ez=l("You can specify whether the function should be batched or not with the "),uv=n("code"),tz=l("batched"),az=l(" parameter:"),sz=d(),Ln=n("ul"),gv=n("li"),nz=l(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),rz=d(),_v=n("li"),oz=l(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),lz=d(),_e=n("li"),iz=l("If batched is True and batch_size is "),bv=n("code"),pz=l("n"),cz=l(" > 1, then the function takes a batch of "),$v=n("code"),dz=l("n"),mz=l(" examples as input and can return a batch with "),xv=n("code"),hz=l("n"),fz=l(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),vv=n("code"),uz=l("n"),gz=l(` examples.
A batch is a dictionary, e.g. a batch of `),yv=n("code"),_z=l("n"),bz=l(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),$z=d(),_(Sl.$$.fragment),xz=d(),fs=n("div"),_(Fm.$$.fragment),vz=d(),jv=n("p"),yz=l(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),jz=d(),_(Cl.$$.fragment),wz=d(),ie=n("div"),_(Om.$$.fragment),Dz=d(),wv=n("p"),kz=l(`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),Ez=d(),Dv=n("p"),Iz=l(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),qz=d(),Sm=n("p"),Tz=l("For instance, if your dataset contains 10,000 elements but "),kv=n("code"),Nz=l("buffer_size"),Pz=l(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),Lz=d(),An=n("p"),Az=l(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),gg=n("a"),Fz=l("datasets.IterableDataset.skip()"),Oz=l(" or "),_g=n("a"),Sz=l("datasets.IterableDataset.take()"),Cz=l(`
then the order of the shards is kept unchanged.`),zz=d(),_(zl.$$.fragment),Vz=d(),us=n("div"),_(Cm.$$.fragment),Uz=d(),Ev=n("p"),Mz=l(`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),Rz=d(),_(Vl.$$.fragment),Bz=d(),gs=n("div"),_(zm.$$.fragment),Hz=d(),Iv=n("p"),Gz=l(`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),Wz=d(),_(Ul.$$.fragment),Kz=d(),_s=n("div"),_(Vm.$$.fragment),Yz=d(),qv=n("p"),Jz=l(`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),Zz=d(),_(Ml.$$.fragment),Xz=d(),bs=n("div"),_(Um.$$.fragment),Qz=d(),Tv=n("p"),eV=l(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),tV=d(),_(Rl.$$.fragment),aV=d(),$s=n("div"),_(Mm.$$.fragment),sV=d(),Nv=n("p"),nV=l(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),rV=d(),_(Bl.$$.fragment),oV=d(),xs=n("div"),_(Rm.$$.fragment),lV=d(),Pv=n("p"),iV=l(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),pV=d(),_(Hl.$$.fragment),Xw=d(),Fn=n("h2"),Gl=n("a"),Lv=n("span"),_(Bm.$$.fragment),cV=d(),Av=n("span"),dV=l("Features"),Qw=d(),z=n("div"),_(Hm.$$.fragment),mV=d(),Fv=n("p"),hV=l("A special dictionary that defines the internal structure of a dataset."),fV=d(),Gm=n("p"),uV=l("Instantiated with a dictionary of type "),Ov=n("code"),gV=l("dict[str, FieldType]"),_V=l(`, where keys are the desired column names,
and values are the type of that column.`),bV=d(),bg=n("p"),Sv=n("code"),$V=l("FieldType"),xV=l(" can be one of the following:"),vV=d(),G=n("ul"),Cv=n("li"),vs=n("p"),yV=l("a "),$g=n("a"),jV=l("datasets.Value"),wV=l(" feature specifies a single typed value, e.g. "),zv=n("code"),DV=l("int64"),kV=l(" or "),Vv=n("code"),EV=l("string"),IV=d(),Uv=n("li"),Wm=n("p"),qV=l("a "),xg=n("a"),TV=l("datasets.ClassLabel"),NV=l(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),PV=d(),Mv=n("li"),Km=n("p"),LV=l("a python "),Rv=n("code"),AV=l("dict"),FV=l(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),OV=d(),Ym=n("li"),He=n("p"),SV=l("a python "),Bv=n("code"),CV=l("list"),zV=l(" or a "),vg=n("a"),VV=l("datasets.Sequence"),UV=l(` specifies that the field contains a list of objects. The python
`),Hv=n("code"),MV=l("list"),RV=l(" or "),yg=n("a"),BV=l("datasets.Sequence"),HV=l(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),GV=d(),_(Wl.$$.fragment),WV=d(),Gv=n("li"),Ge=n("p"),KV=l("a "),jg=n("a"),YV=l("Array2D"),JV=l(", "),wg=n("a"),ZV=l("Array3D"),XV=l(", "),Dg=n("a"),QV=l("Array4D"),eU=l(" or "),kg=n("a"),tU=l("Array5D"),aU=l(" feature for multidimensional arrays"),sU=d(),Wv=n("li"),Jm=n("p"),nU=l("an "),Eg=n("a"),rU=l("Audio"),oU=l(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),lU=d(),Kv=n("li"),Ht=n("p"),iU=l("an "),Ig=n("a"),pU=l("Image"),cU=l(" feature to store the absolute path to an image file, an "),Yv=n("code"),dU=l("np.ndarray"),mU=l(" object, a "),Jv=n("code"),hU=l("PIL.Image.Image"),fU=l(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),uU=d(),Zv=n("li"),Kl=n("p"),qg=n("a"),gU=l("datasets.Translation"),_U=l(" and "),Tg=n("a"),bU=l("datasets.TranslationVariableLanguages"),$U=l(", the two features specific to Machine Translation"),xU=d(),Yl=n("div"),_(Zm.$$.fragment),vU=d(),Xv=n("p"),yU=l("Make a deep copy of Features."),jU=d(),Jl=n("div"),_(Xm.$$.fragment),wU=d(),Qv=n("p"),DU=l("Decode batch with custom feature decoding."),kU=d(),Zl=n("div"),_(Qm.$$.fragment),EU=d(),ey=n("p"),IU=l("Decode column with custom feature decoding."),qU=d(),Xl=n("div"),_(eh.$$.fragment),TU=d(),ty=n("p"),NU=l("Decode example with custom feature decoding."),PU=d(),Ql=n("div"),_(th.$$.fragment),LU=d(),ay=n("p"),AU=l("Encode batch into a format for Arrow."),FU=d(),ei=n("div"),_(ah.$$.fragment),OU=d(),sy=n("p"),SU=l("Encode example into a format for Arrow."),CU=d(),ys=n("div"),_(sh.$$.fragment),zU=d(),ny=n("p"),VU=l(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),UU=d(),ry=n("p"),MU=l(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),RU=d(),ti=n("div"),_(nh.$$.fragment),BU=d(),oy=n("p"),HU=l(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),GU=d(),Fe=n("div"),_(rh.$$.fragment),WU=d(),ly=n("p"),KU=l("Construct Features from dict."),YU=d(),iy=n("p"),JU=l(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),ZU=d(),Gt=n("p"),XU=l(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),Ng=n("a"),QU=l("DatasetInfo"),eM=l(` that was dumped to a JSON object. This acts as an analogue to
`),Pg=n("a"),tM=l("Features.from_arrow_schema()"),aM=l(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),Lg=n("a"),sM=l("Value"),nM=l(" automatically performs."),rM=d(),_(ai.$$.fragment),oM=d(),ut=n("div"),_(oh.$$.fragment),lM=d(),py=n("p"),iM=l("Reorder Features fields to match the field order of other Features."),pM=d(),cy=n("p"),cM=l(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),dM=d(),_(si.$$.fragment),e7=d(),On=n("div"),_(lh.$$.fragment),mM=d(),dy=n("p"),hM=l(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),t7=d(),Q=n("div"),_(ih.$$.fragment),fM=d(),my=n("p"),uM=l("Feature type for integer class labels."),gM=d(),ph=n("p"),_M=l("There are 3 ways to define a "),hy=n("em"),bM=l("ClassLabel"),$M=l(", which correspond to the 3 arguments:"),xM=d(),Sn=n("ul"),Ag=n("li"),fy=n("em"),vM=l("num_classes"),yM=l(": Create 0 to (num_classes-1) labels."),jM=d(),Fg=n("li"),uy=n("em"),wM=l("names"),DM=l(": List of label strings."),kM=d(),Og=n("li"),gy=n("em"),EM=l("names_file"),IM=l(": File containing the list of labels."),qM=d(),ni=n("div"),_(ch.$$.fragment),TM=d(),_y=n("p"),NM=l("Conversion integer => class name string."),PM=d(),ri=n("div"),_(dh.$$.fragment),LM=d(),by=n("p"),AM=l("Conversion class name string => integer."),a7=d(),Wt=n("div"),_(mh.$$.fragment),FM=d(),$y=n("p"),OM=l("The Value dtypes are as follows:"),SM=d(),xy=n("p"),CM=l(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),s7=d(),ee=n("div"),_(hh.$$.fragment),zM=d(),Sg=n("p"),vy=n("code"),VM=l("FeatureConnector"),UM=l(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),MM=d(),yy=n("p"),RM=l(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),BM=d(),fh=n("p"),HM=l("Output: A dictionary mapping string language codes to translations as "),jy=n("code"),GM=l("Text"),WM=l(`
features.`),KM=d(),_(oi.$$.fragment),YM=d(),li=n("div"),_(uh.$$.fragment),JM=d(),wy=n("p"),ZM=l("Flatten the Translation feature into a dictionary."),n7=d(),te=n("div"),_(gh.$$.fragment),XM=d(),Cg=n("p"),Dy=n("code"),QM=l("FeatureConnector"),eR=l(` for translations with variable languages per example.
Here for compatiblity with tfds.`),tR=d(),ky=n("p"),aR=l(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),sR=d(),Ey=n("p"),nR=l(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),rR=d(),_(ii.$$.fragment),oR=d(),pi=n("div"),_(_h.$$.fragment),lR=d(),Iy=n("p"),iR=l("Flatten the TranslationVariableLanguages feature into a dictionary."),r7=d(),bh=n("div"),_($h.$$.fragment),o7=d(),xh=n("div"),_(vh.$$.fragment),l7=d(),yh=n("div"),_(jh.$$.fragment),i7=d(),wh=n("div"),_(Dh.$$.fragment),p7=d(),M=n("div"),_(kh.$$.fragment),pR=d(),qy=n("p"),cR=l("Audio Feature to extract audio data from an audio file."),dR=d(),Ty=n("p"),mR=l("Input: The Audio feature accepts as input:"),hR=d(),Cn=n("ul"),Ny=n("li"),Eh=n("p"),fR=l("A "),Py=n("code"),uR=l("str"),gR=l(": Absolute path to the audio file (i.e. random access is allowed)."),_R=d(),zn=n("li"),Ih=n("p"),bR=l("A "),Ly=n("code"),$R=l("dict"),xR=l(" with the keys:"),vR=d(),qh=n("ul"),Ay=n("li"),yR=l("path: String with relative path of the audio file to the archive file."),jR=d(),Fy=n("li"),wR=l("bytes: Bytes content of the audio file."),DR=d(),Oy=n("p"),kR=l("This is useful for archived files with sequential access."),ER=d(),Vn=n("li"),Th=n("p"),IR=l("A "),Sy=n("code"),qR=l("dict"),TR=l(" with the keys:"),NR=d(),Un=n("ul"),Cy=n("li"),PR=l("path: String with relative path of the audio file to the archive file."),LR=d(),zy=n("li"),AR=l("array: Array containing the audio sample"),FR=d(),Vy=n("li"),OR=l("sampling_rate: Integer corresponding to the samping rate of the audio sample."),SR=d(),Uy=n("p"),CR=l("This is useful for archived files with sequential access."),zR=d(),js=n("div"),_(Nh.$$.fragment),VR=d(),My=n("p"),UR=l(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),MR=d(),Kt=n("ul"),Ry=n("li"),RR=l("pa.string() - it must contain the \u201Cpath\u201D data"),BR=d(),By=n("li"),HR=l("pa.struct({\u201Cbytes\u201D: pa.binary()})"),GR=d(),Hy=n("li"),WR=l("pa.struct({\u201Cpath\u201D: pa.string()})"),KR=d(),Gy=n("li"),YR=l("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),JR=d(),ci=n("div"),_(Ph.$$.fragment),ZR=d(),Wy=n("p"),XR=l("Decode example audio file into audio data."),QR=d(),di=n("div"),_(Lh.$$.fragment),eB=d(),Ky=n("p"),tB=l("Embed audio files into the Arrow array."),aB=d(),mi=n("div"),_(Ah.$$.fragment),sB=d(),Yy=n("p"),nB=l("Encode example into a format for Arrow."),rB=d(),hi=n("div"),_(Fh.$$.fragment),oB=d(),Jy=n("p"),lB=l("If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),c7=d(),R=n("div"),_(Oh.$$.fragment),iB=d(),Zy=n("p"),pB=l("Image feature to read image data from an image file."),cB=d(),Xy=n("p"),dB=l("Input: The Image feature accepts as input:"),mB=d(),Yt=n("ul"),Qy=n("li"),Sh=n("p"),hB=l("A "),ej=n("code"),fB=l("str"),uB=l(": Absolute path to the image file (i.e. random access is allowed)."),gB=d(),Mn=n("li"),Ch=n("p"),_B=l("A "),tj=n("code"),bB=l("dict"),$B=l(" with the keys:"),xB=d(),zh=n("ul"),aj=n("li"),vB=l("path: String with relative path of the image file to the archive file."),yB=d(),sj=n("li"),jB=l("bytes: Bytes of the image file."),wB=d(),nj=n("p"),DB=l("This is useful for archived files with sequential access."),kB=d(),rj=n("li"),Vh=n("p"),EB=l("An "),oj=n("code"),IB=l("np.ndarray"),qB=l(": NumPy array representing an image."),TB=d(),lj=n("li"),Uh=n("p"),NB=l("A "),ij=n("code"),PB=l("PIL.Image.Image"),LB=l(": PIL image object."),AB=d(),ws=n("div"),_(Mh.$$.fragment),FB=d(),pj=n("p"),OB=l(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),SB=d(),We=n("ul"),cj=n("li"),CB=l("pa.string() - it must contain the \u201Cpath\u201D data"),zB=d(),dj=n("li"),VB=l("pa.struct({\u201Cbytes\u201D: pa.binary()})"),UB=d(),mj=n("li"),MB=l("pa.struct({\u201Cpath\u201D: pa.string()})"),RB=d(),hj=n("li"),BB=l("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),HB=d(),fj=n("li"),GB=l("pa.list(*) - it must contain the image array data"),WB=d(),fi=n("div"),_(Rh.$$.fragment),KB=d(),uj=n("p"),YB=l("Decode example image file into image data."),JB=d(),ui=n("div"),_(Bh.$$.fragment),ZB=d(),gj=n("p"),XB=l("Embed image files into the Arrow array."),QB=d(),gi=n("div"),_(Hh.$$.fragment),eH=d(),_j=n("p"),tH=l("Encode example into a format for Arrow."),aH=d(),_i=n("div"),_(Gh.$$.fragment),sH=d(),bj=n("p"),nH=l("If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),d7=d(),Rn=n("h2"),bi=n("a"),$j=n("span"),_(Wh.$$.fragment),rH=d(),xj=n("span"),oH=l("MetricInfo"),m7=d(),ae=n("div"),_(Kh.$$.fragment),lH=d(),vj=n("p"),iH=l("Information about a metric."),pH=d(),zg=n("p"),yj=n("code"),cH=l("MetricInfo"),dH=l(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),mH=d(),jj=n("p"),hH=l("Note: Not all fields are known on construction and may be updated later."),fH=d(),$i=n("div"),_(Yh.$$.fragment),uH=d(),Jh=n("p"),gH=l("Create MetricInfo from the JSON file in "),wj=n("code"),_H=l("metric_info_dir"),bH=l("."),$H=d(),xi=n("div"),_(Zh.$$.fragment),xH=d(),Jt=n("p"),vH=l("Write "),Dj=n("code"),yH=l("MetricInfo"),jH=l(" as JSON to "),kj=n("code"),wH=l("metric_info_dir"),DH=l(`.
Also save the license separately in LICENCE.
If `),Ej=n("code"),kH=l("pretty_print"),EH=l(" is True, the JSON will be pretty-printed with the indent level of 4."),h7=d(),Bn=n("h2"),vi=n("a"),Ij=n("span"),_(Xh.$$.fragment),IH=d(),qj=n("span"),qH=l("Metric"),f7=d(),Ds=n("p"),TH=l("The base class "),Tj=n("code"),NH=l("Metric"),PH=l(" implements a Metric backed by one or several "),Vg=n("a"),LH=l("Dataset"),AH=l("."),u7=d(),se=n("div"),_(Qh.$$.fragment),FH=d(),Nj=n("p"),OH=l("A Metric is the base class and common API for all metrics."),SH=d(),yi=n("div"),_(ef.$$.fragment),CH=d(),Pj=n("p"),zH=l("Add one prediction and reference for the metric\u2019s stack."),VH=d(),ji=n("div"),_(tf.$$.fragment),UH=d(),Lj=n("p"),MH=l("Add a batch of predictions and references for the metric\u2019s stack."),RH=d(),ks=n("div"),_(af.$$.fragment),BH=d(),Aj=n("p"),HH=l("Compute the metrics."),GH=d(),Fj=n("p"),WH=l("Usage of positional arguments is not allowed to prevent mistakes."),KH=d(),wi=n("div"),_(sf.$$.fragment),YH=d(),Oj=n("p"),JH=l("Downloads and prepares dataset for reading."),g7=d(),Hn=n("h2"),Di=n("a"),Sj=n("span"),_(nf.$$.fragment),ZH=d(),Cj=n("span"),XH=l("Filesystems"),_7=d(),S=n("div"),_(rf.$$.fragment),QH=d(),zj=n("p"),eG=l("Access S3 as if it were a file system."),tG=d(),Vj=n("p"),aG=l(`This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3
storage.`),sG=d(),Zt=n("p"),nG=l("Provide credentials either explicitly ("),Uj=n("code"),rG=l("key="),oG=l(", "),Mj=n("code"),lG=l("secret="),iG=l(`) or depend
on boto\u2019s credential methods. See botocore documentation for more
information. If no credentials are available, use `),Rj=n("code"),pG=l("anon=True"),cG=l("."),dG=d(),Bj=n("p"),mG=l("The following parameters are passed on to fsspec:"),hG=d(),Hj=n("p"),fG=l(`skip_instance_cache: to control reuse of instances
use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings`),uG=d(),Gj=n("p"),gG=l("."),_G=d(),gt=n("p"),Wj=n("code"),bG=l("datasets.filesystems.S3FileSystem"),$G=l(" is a subclass of s3fs.S3FileSystem]("),of=n("a"),xG=l("https://s3fs.readthedocs.io/en/latest/api.html"),vG=l(`), which is a known
implementation of `),Kj=n("code"),yG=l("fsspec"),jG=l(". Filesystem Spec "),lf=n("a"),wG=l("FSSPEC"),DG=l(` is a project to
unify various projects and classes to work with remote filesystems
and file-system-like abstractions using a standard pythonic interface.`),kG=d(),Yj=n("p"),EG=l("Examples:"),IG=d(),Jj=n("p"),qG=l("Listing files from public s3 bucket."),TG=d(),_(ki.$$.fragment),NG=d(),Gn=n("p"),PG=l("Listing files from private s3 bucket using "),Zj=n("code"),LG=l("aws_access_key_id"),AG=l(" and "),Xj=n("code"),FG=l("aws_secret_access_key"),OG=l("."),SG=d(),_(Ei.$$.fragment),CG=d(),Xt=n("p"),zG=l("Using "),Qj=n("code"),VG=l("S3Filesystem"),UG=l(" with "),e0=n("code"),MG=l("botocore.session.Session"),RG=l(" and custom "),t0=n("code"),BG=l("aws_profile"),HG=l("."),GG=d(),_(Ii.$$.fragment),WG=d(),Wn=n("p"),KG=l("Loading dataset from s3 using "),a0=n("code"),YG=l("S3Filesystem"),JG=l(" and "),s0=n("code"),ZG=l("load_from_disk()"),XG=l("."),QG=d(),_(qi.$$.fragment),eW=d(),n0=n("p"),tW=l("Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>."),aW=d(),_(Ti.$$.fragment),sW=d(),Ni=n("h2"),Pi=n("a"),r0=n("span"),_(pf.$$.fragment),nW=d(),o0=n("span"),rW=l("Parameters"),oW=d(),W=n("p"),lW=l(`anon : bool (False)
Whether to use anonymous connection (public buckets only). If False,
uses the key/secret given, or boto\u2019s credential resolver (client_kwargs,
environment, variables, config files, EC2 IAM server, in that order)
key : string (None)
If not anonymous, use this access key ID, if specified
secret : string (None)
If not anonymous, use this secret access key, if specified
token : string (None)
If not anonymous, use this security token, if specified
use_ssl : bool (True)
Whether to use SSL in connections to S3; may be faster without, but
insecure. If `),l0=n("code"),iW=l("use_ssl"),pW=l(" is also set in "),i0=n("code"),cW=l("client_kwargs"),dW=l(`,
the value set in `),p0=n("code"),mW=l("client_kwargs"),hW=l(` will take priority.
s3_additional_kwargs : dict of parameters that are used when calling s3 api
methods. Typically used for things like \u201CServerSideEncryption\u201D.
client_kwargs : dict of parameters for the botocore client
requester_pays : bool (False)
If RequesterPays buckets are supported.
default_block_size: int (None)
If given, the default block size value used for `),c0=n("code"),fW=l("open()"),uW=l(`, if no
specific value is given at all time. The built-in default is 5MB.
default_fill_cache : Bool (True)
Whether to use cache filling with open by default. Refer to
`),d0=n("code"),gW=l("S3File.open"),_W=l(`.
default_cache_type : string (\u2018bytes\u2019)
If given, the default cache_type value used for `),m0=n("code"),bW=l("open()"),$W=l(`. Set to \u201Cnone\u201D
if no caching is desired. See fsspec\u2019s documentation for other available
cache_type values. Default cache_type is \u2018bytes\u2019.
version_aware : bool (False)
Whether to support bucket versioning.  If enable this will require the
user to have the necessary IAM permissions for dealing with versioned
objects.
cache_regions : bool (False)
Whether to cache bucket regions or not. Whenever a new bucket is used,
it will first find out which region it belongs and then use the client
for that region.
config_kwargs : dict of parameters passed to `),h0=n("code"),xW=l("botocore.client.Config"),vW=l(`
kwargs : other parameters for core session
session : aiobotocore AioSession object to be used for all connections.
This session will be used inplace of creating a new session inside S3FileSystem.
For example: aiobotocore.session.AioSession(profile=\u2018test_user\u2019)`),b7=d(),Kn=n("div"),_(cf.$$.fragment),yW=d(),Yn=n("p"),jW=l("preprocesses "),f0=n("em"),wW=l("dataset_path"),DW=l(" and removes remote filesystem (e.g. removing "),u0=n("code"),kW=l("s3://"),EW=l(")"),$7=d(),Jn=n("div"),_(df.$$.fragment),IW=d(),g0=n("p"),qW=l("Validates if filesystem has remote protocol."),x7=d(),Zn=n("h2"),Li=n("a"),_0=n("span"),_(mf.$$.fragment),TW=d(),b0=n("span"),NW=l("Fingerprint"),v7=d(),Xn=n("div"),_(hf.$$.fragment),PW=d(),$0=n("p"),LW=l("Hasher that accepts python objects as inputs."),this.h()},l(s){const w=Hae('[data-svelte="svelte-1phssyn"]',document.head);c=r(w,"META",{name:!0,content:!0}),w.forEach(a),g=m(s),f=r(s,"H1",{class:!0});var ff=o(f);p=r(ff,"A",{id:!0,class:!0,href:!0});var x0=o(p);u=r(x0,"SPAN",{});var v0=o(u);b(t.$$.fragment,v0),v0.forEach(a),x0.forEach(a),h=m(ff),Zs=r(ff,"SPAN",{});var y0=o(Zs);ra=i(y0,"Main classes"),y0.forEach(a),ff.forEach(a),$r=m(s),Se=r(s,"H2",{class:!0});var uf=o(Se);$e=r(uf,"A",{id:!0,class:!0,href:!0});var j0=o($e);ne=r(j0,"SPAN",{});var w0=o(ne);b(oa.$$.fragment,w0),w0.forEach(a),j0.forEach(a),Tf=m(uf),xr=r(uf,"SPAN",{});var D0=o(xr);hD=i(D0,"DatasetInfo"),D0.forEach(a),uf.forEach(a),Lw=m(s),Z=r(s,"DIV",{class:!0});var be=o(Z);b(cp.$$.fragment,be),fD=m(be),Pb=r(be,"P",{});var k0=o(Pb);uD=i(k0,"Information about a dataset."),k0.forEach(a),gD=m(be),Nf=r(be,"P",{});var Ug=o(Nf);Lb=r(Ug,"EM",{});var E0=o(Lb);_D=i(E0,"DatasetInfo"),E0.forEach(a),bD=i(Ug,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Ug.forEach(a),$D=m(be),Ab=r(be,"P",{});var I0=o(Ab);xD=i(I0,"Note: Not all fields are known on construction and may be updated later."),I0.forEach(a),vD=m(be),xe=r(be,"DIV",{class:!0});var Ke=o(xe);b(dp.$$.fragment,Ke),yD=m(Ke),mp=r(Ke,"P",{});var gf=o(mp);jD=i(gf,"Create DatasetInfo from the JSON file in "),Fb=r(gf,"CODE",{});var q0=o(Fb);wD=i(q0,"dataset_info_dir"),q0.forEach(a),DD=i(gf,"."),gf.forEach(a),kD=m(Ke),Ob=r(Ke,"P",{});var T0=o(Ob);ED=i(T0,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),T0.forEach(a),ID=m(Ke),Sb=r(Ke,"P",{});var N0=o(Sb);qD=i(N0,"This will overwrite all previous metadata."),N0.forEach(a),TD=m(Ke),b(vr.$$.fragment,Ke),Ke.forEach(a),ND=m(be),la=r(be,"DIV",{class:!0});var Qn=o(la);b(hp.$$.fragment,Qn),PD=m(Qn),Xs=r(Qn,"P",{});var er=o(Xs);LD=i(er,"Write "),Cb=r(er,"EM",{});var P0=o(Cb);AD=i(P0,"DatasetInfo"),P0.forEach(a),FD=i(er," and license (if present) as JSON files to "),zb=r(er,"EM",{});var L0=o(zb);OD=i(L0,"dataset_info_dir"),L0.forEach(a),SD=i(er,"."),er.forEach(a),CD=m(Qn),b(yr.$$.fragment,Qn),Qn.forEach(a),be.forEach(a),Aw=m(s),Qs=r(s,"H2",{class:!0});var _f=o(Qs);jr=r(_f,"A",{id:!0,class:!0,href:!0});var A0=o(jr);Vb=r(A0,"SPAN",{});var F0=o(Vb);b(fp.$$.fragment,F0),F0.forEach(a),A0.forEach(a),zD=m(_f),Ub=r(_f,"SPAN",{});var O0=o(Ub);VD=i(O0,"Dataset"),O0.forEach(a),_f.forEach(a),Fw=m(s),wr=r(s,"P",{});var bf=o(wr);UD=i(bf,"The base class "),Pf=r(bf,"A",{href:!0});var S0=o(Pf);MD=i(S0,"Dataset"),S0.forEach(a),RD=i(bf," implements a Dataset backed by an Apache Arrow table."),bf.forEach(a),Ow=m(s),I=r(s,"DIV",{class:!0});var q=o(I);b(up.$$.fragment,q),BD=m(q),Mb=r(q,"P",{});var C0=o(Mb);HD=i(C0,"A Dataset backed by an Arrow table."),C0.forEach(a),GD=m(q),Qe=r(q,"DIV",{class:!0});var Qt=o(Qe);b(gp.$$.fragment,Qt),WD=m(Qt),Rb=r(Qt,"P",{});var z0=o(Rb);KD=i(z0,"Add column to Dataset."),z0.forEach(a),YD=m(Qt),Bb=r(Qt,"P",{});var V0=o(Bb);Hb=r(V0,"EM",{});var U0=o(Hb);JD=i(U0,"New in version 1.7."),U0.forEach(a),V0.forEach(a),ZD=m(Qt),b(Dr.$$.fragment,Qt),Qt.forEach(a),XD=m(q),et=r(q,"DIV",{class:!0});var ea=o(et);b(_p.$$.fragment,ea),QD=m(ea),Gb=r(ea,"P",{});var M0=o(Gb);ek=i(M0,"Add item to Dataset."),M0.forEach(a),tk=m(ea),Wb=r(ea,"P",{});var R0=o(Wb);Kb=r(R0,"EM",{});var B0=o(Kb);ak=i(B0,"New in version 1.7."),B0.forEach(a),R0.forEach(a),sk=m(ea),b(kr.$$.fragment,ea),ea.forEach(a),nk=m(q),Er=r(q,"DIV",{class:!0});var $f=o(Er);b(bp.$$.fragment,$f),rk=m($f),Yb=r($f,"P",{});var H0=o(Yb);ok=i(H0,"Instantiate a Dataset backed by an Arrow table at filename."),H0.forEach(a),$f.forEach(a),lk=m(q),Ir=r(q,"DIV",{class:!0});var xf=o(Ir);b($p.$$.fragment,xf),ik=m(xf),Jb=r(xf,"P",{});var G0=o(Jb);pk=i(G0,"Instantiate a Dataset backed by an Arrow buffer."),G0.forEach(a),xf.forEach(a),ck=m(q),ve=r(q,"DIV",{class:!0});var Ye=o(ve);b(xp.$$.fragment,Ye),dk=m(Ye),Nt=r(Ye,"P",{});var ta=o(Nt);mk=i(ta,"Convert "),Zb=r(ta,"CODE",{});var W0=o(Zb);hk=i(W0,"pandas.DataFrame"),W0.forEach(a),fk=i(ta," to a "),Xb=r(ta,"CODE",{});var K0=o(Xb);uk=i(K0,"pyarrow.Table"),K0.forEach(a),gk=i(ta," to create a "),Lf=r(ta,"A",{href:!0});var Y0=o(Lf);_k=i(Y0,"Dataset"),Y0.forEach(a),bk=i(ta,"."),ta.forEach(a),$k=m(Ye),vp=r(Ye,"P",{});var vf=o(vp);xk=i(vf,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Qb=r(vf,"EM",{});var J0=o(Qb);vk=i(J0,"object"),J0.forEach(a),yk=i(vf,", we need to guess the datatype by looking at the Python objects in this Series."),vf.forEach(a),jk=m(Ye),yp=r(Ye,"P",{});var yf=o(yp);wk=i(yf,"Be aware that Series of the "),e2=r(yf,"EM",{});var Z0=o(e2);Dk=i(Z0,"object"),Z0.forEach(a),kk=i(yf,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),yf.forEach(a),Ek=m(Ye),b(qr.$$.fragment,Ye),Ye.forEach(a),Ik=m(q),Tr=r(q,"DIV",{class:!0});var jf=o(Tr);b(jp.$$.fragment,jf),qk=m(jf),Pt=r(jf,"P",{});var aa=o(Pt);Tk=i(aa,"Convert "),t2=r(aa,"CODE",{});var X0=o(t2);Nk=i(X0,"dict"),X0.forEach(a),Pk=i(aa," to a "),a2=r(aa,"CODE",{});var Q0=o(a2);Lk=i(Q0,"pyarrow.Table"),Q0.forEach(a),Ak=i(aa," to create a "),Af=r(aa,"A",{href:!0});var ew=o(Af);Fk=i(ew,"Dataset"),ew.forEach(a),Ok=i(aa,"."),aa.forEach(a),jf.forEach(a),Sk=m(q),ia=r(q,"DIV",{class:!0});var tr=o(ia);b(wp.$$.fragment,tr),Ck=m(tr),s2=r(tr,"P",{});var tw=o(s2);zk=i(tw,"The Apache Arrow table backing the dataset."),tw.forEach(a),Vk=m(tr),b(Nr.$$.fragment,tr),tr.forEach(a),Uk=m(q),pa=r(q,"DIV",{class:!0});var ar=o(pa);b(Dp.$$.fragment,ar),Mk=m(ar),n2=r(ar,"P",{});var aw=o(n2);Rk=i(aw,"The cache files containing the Apache Arrow table backing the dataset."),aw.forEach(a),Bk=m(ar),b(Pr.$$.fragment,ar),ar.forEach(a),Hk=m(q),ca=r(q,"DIV",{class:!0});var sr=o(ca);b(kp.$$.fragment,sr),Gk=m(sr),r2=r(sr,"P",{});var sw=o(r2);Wk=i(sw,"Number of columns in the dataset."),sw.forEach(a),Kk=m(sr),b(Lr.$$.fragment,sr),sr.forEach(a),Yk=m(q),da=r(q,"DIV",{class:!0});var nr=o(da);b(Ep.$$.fragment,nr),Jk=m(nr),Ip=r(nr,"P",{});var wf=o(Ip);Zk=i(wf,"Number of rows in the dataset (same as "),Ar=r(wf,"A",{href:!0});var Df=o(Ar);Xk=i(Df,"Dataset."),o2=r(Df,"STRONG",{});var nw=o(o2);Qk=i(nw,"len"),nw.forEach(a),e5=i(Df,"()"),Df.forEach(a),t5=i(wf,")."),wf.forEach(a),a5=m(nr),b(Fr.$$.fragment,nr),nr.forEach(a),s5=m(q),ma=r(q,"DIV",{class:!0});var rr=o(ma);b(qp.$$.fragment,rr),n5=m(rr),l2=r(rr,"P",{});var rw=o(l2);r5=i(rw,"Names of the columns in the dataset."),rw.forEach(a),o5=m(rr),b(Or.$$.fragment,rr),rr.forEach(a),l5=m(q),ha=r(q,"DIV",{class:!0});var or=o(ha);b(Tp.$$.fragment,or),i5=m(or),i2=r(or,"P",{});var ow=o(i2);p5=i(ow,"Shape of the dataset (number of columns, number of rows)."),ow.forEach(a),c5=m(or),b(Sr.$$.fragment,or),or.forEach(a),d5=m(q),tt=r(q,"DIV",{class:!0});var sa=o(tt);b(Np.$$.fragment,sa),m5=m(sa),p2=r(sa,"P",{});var lw=o(p2);h5=i(lw,"Return a list of the unique elements in a column."),lw.forEach(a),f5=m(sa),c2=r(sa,"P",{});var iw=o(c2);u5=i(iw,"This is implemented in the low-level backend and as such, very fast."),iw.forEach(a),g5=m(sa),b(Cr.$$.fragment,sa),sa.forEach(a),_5=m(q),fa=r(q,"DIV",{class:!0});var lr=o(fa);b(Pp.$$.fragment,lr),b5=m(lr),d2=r(lr,"P",{});var pw=o(d2);$5=i(pw,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),pw.forEach(a),x5=m(lr),b(zr.$$.fragment,lr),lr.forEach(a),v5=m(q),ua=r(q,"DIV",{class:!0});var ir=o(ua);b(Lp.$$.fragment,ir),y5=m(ir),m2=r(ir,"P",{});var cw=o(m2);j5=i(cw,"Cast the dataset to a new set of features."),cw.forEach(a),w5=m(ir),b(Vr.$$.fragment,ir),ir.forEach(a),D5=m(q),ga=r(q,"DIV",{class:!0});var pr=o(ga);b(Ap.$$.fragment,pr),k5=m(pr),h2=r(pr,"P",{});var dw=o(h2);E5=i(dw,"Cast column to feature for decoding."),dw.forEach(a),I5=m(pr),b(Ur.$$.fragment,pr),pr.forEach(a),q5=m(q),at=r(q,"DIV",{class:!0});var na=o(at);b(Fp.$$.fragment,na),T5=m(na),f2=r(na,"P",{});var mw=o(f2);N5=i(mw,"Remove one or several column(s) in the dataset and the features associated to them."),mw.forEach(a),P5=m(na),en=r(na,"P",{});var cr=o(en);L5=i(cr,"You can also remove a column using "),Ff=r(cr,"A",{href:!0});var hw=o(Ff);A5=i(hw,"Dataset.map()"),hw.forEach(a),F5=i(cr," with "),u2=r(cr,"EM",{});var fw=o(u2);O5=i(fw,"remove_columns"),fw.forEach(a),S5=i(cr,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),cr.forEach(a),C5=m(na),b(Mr.$$.fragment,na),na.forEach(a),z5=m(q),_a=r(q,"DIV",{class:!0});var dr=o(_a);b(Op.$$.fragment,dr),V5=m(dr),g2=r(dr,"P",{});var uw=o(g2);U5=i(uw,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),uw.forEach(a),M5=m(dr),b(Rr.$$.fragment,dr),dr.forEach(a),R5=m(q),ba=r(q,"DIV",{class:!0});var mr=o(ba);b(Sp.$$.fragment,mr),B5=m(mr),_2=r(mr,"P",{});var gw=o(_2);H5=i(gw,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),gw.forEach(a),G5=m(mr),b(Br.$$.fragment,mr),mr.forEach(a),W5=m(q),$a=r(q,"DIV",{class:!0});var hr=o($a);b(Cp.$$.fragment,hr),K5=m(hr),zp=r(hr,"P",{});var kf=o(zp);Y5=i(kf,"Casts the given column as :obj:"),b2=r(kf,"CODE",{});var _w=o(b2);J5=i(_w,"datasets.features.ClassLabel"),_w.forEach(a),Z5=i(kf," and updates the table."),kf.forEach(a),X5=m(hr),b(Hr.$$.fragment,hr),hr.forEach(a),Q5=m(q),xa=r(q,"DIV",{class:!0});var fr=o(xa);b(Vp.$$.fragment,fr),e3=m(fr),$2=r(fr,"P",{});var bw=o($2);t3=i(bw,"Number of rows in the dataset."),bw.forEach(a),a3=m(fr),b(Gr.$$.fragment,fr),fr.forEach(a),s3=m(q),va=r(q,"DIV",{class:!0});var ur=o(va);b(Up.$$.fragment,ur),n3=m(ur),x2=r(ur,"P",{});var $w=o(x2);r3=i($w,"Iterate through the examples."),$w.forEach(a),o3=m(ur),Mp=r(ur,"P",{});var Ef=o(Mp);l3=i(Ef,"If a formatting is set with "),Of=r(Ef,"A",{href:!0});var xw=o(Of);i3=i(xw,"Dataset.set_format()"),xw.forEach(a),p3=i(Ef,` rows will be returned with the
selected format.`),Ef.forEach(a),ur.forEach(a),c3=m(q),Wr=r(q,"DIV",{class:!0});var If=o(Wr);b(Rp.$$.fragment,If),d3=m(If),tn=r(If,"P",{});var gr=o(tn);m3=i(gr,"To be used in a "),v2=r(gr,"CODE",{});var vw=o(v2);h3=i(vw,"with"),vw.forEach(a),f3=i(gr," statement. Set "),y2=r(gr,"CODE",{});var yw=o(y2);u3=i(yw,"__getitem__"),yw.forEach(a),g3=i(gr," return format (type and columns)."),gr.forEach(a),If.forEach(a),_3=m(q),ye=r(q,"DIV",{class:!0});var Je=o(ye);b(Bp.$$.fragment,Je),b3=m(Je),Ce=r(Je,"P",{});var Ze=o(Ce);$3=i(Ze,"Set "),j2=r(Ze,"STRONG",{});var jw=o(j2);x3=i(jw,"getitem"),jw.forEach(a),v3=i(Ze,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),w2=r(Ze,"CODE",{});var ww=o(w2);y3=i(ww,"type"),ww.forEach(a),j3=i(Ze," (for example \u201Cnumpy\u201D) is used to format batches when using "),D2=r(Ze,"STRONG",{});var Dw=o(D2);w3=i(Dw,"getitem"),Dw.forEach(a),D3=i(Ze,`.
It\u2019s also possible to use custom transforms for formatting using `),Sf=r(Ze,"A",{href:!0});var kw=o(Sf);k3=i(kw,"datasets.Dataset.set_transform()"),kw.forEach(a),E3=i(Ze,"."),Ze.forEach(a),I3=m(Je),ze=r(Je,"P",{});var Xe=o(ze);q3=i(Xe,"It is possible to call "),k2=r(Xe,"CODE",{});var Ew=o(k2);T3=i(Ew,"map"),Ew.forEach(a),N3=i(Xe," after calling "),E2=r(Xe,"CODE",{});var Iw=o(E2);P3=i(Iw,"set_format"),Iw.forEach(a),L3=i(Xe,". Since "),I2=r(Xe,"CODE",{});var qw=o(I2);A3=i(qw,"map"),qw.forEach(a),F3=i(Xe,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),q2=r(Xe,"CODE",{});var Tw=o(q2);O3=i(Tw,"map"),Tw.forEach(a),S3=i(Xe," on a dataset to add a new column, then this column will be formatted:"),Xe.forEach(a),C3=m(Je),T2=r(Je,"P",{});var Nw=o(T2);z3=i(Nw,"new formatted columns = (all columns - previously unformatted columns)"),Nw.forEach(a),V3=m(Je),b(Kr.$$.fragment,Je),Je.forEach(a),U3=m(q),ya=r(q,"DIV",{class:!0});var Mg=o(ya);b(Hp.$$.fragment,Mg),M3=m(Mg),st=r(Mg,"P",{});var _r=o(st);R3=i(_r,"Set "),N2=r(_r,"STRONG",{});var YW=o(N2);B3=i(YW,"getitem"),YW.forEach(a),H3=i(_r," return format using this transform. The transform is applied on-the-fly on batches when "),P2=r(_r,"STRONG",{});var JW=o(P2);G3=i(JW,"getitem"),JW.forEach(a),W3=i(_r,` is called.
As `),Cf=r(_r,"A",{href:!0});var ZW=o(Cf);K3=i(ZW,"datasets.Dataset.set_format()"),ZW.forEach(a),Y3=i(_r,", this can be reset using "),zf=r(_r,"A",{href:!0});var XW=o(zf);J3=i(XW,"datasets.Dataset.reset_format()"),XW.forEach(a),_r.forEach(a),Z3=m(Mg),b(Yr.$$.fragment,Mg),Mg.forEach(a),X3=m(q),nt=r(q,"DIV",{class:!0});var Ai=o(nt);b(Gp.$$.fragment,Ai),Q3=m(Ai),Wp=r(Ai,"P",{});var j7=o(Wp);eE=i(j7,"Reset "),L2=r(j7,"STRONG",{});var QW=o(L2);tE=i(QW,"getitem"),QW.forEach(a),aE=i(j7," return format to python objects and all columns."),j7.forEach(a),sE=m(Ai),Vf=r(Ai,"P",{});var AW=o(Vf);nE=i(AW,"Same as "),A2=r(AW,"CODE",{});var eK=o(A2);rE=i(eK,"self.set_format()"),eK.forEach(a),AW.forEach(a),oE=m(Ai),b(Jr.$$.fragment,Ai),Ai.forEach(a),lE=m(q),je=r(q,"DIV",{class:!0});var Es=o(je);b(Kp.$$.fragment,Es),iE=m(Es),Lt=r(Es,"P",{});var Fi=o(Lt);pE=i(Fi,"Set "),F2=r(Fi,"STRONG",{});var tK=o(F2);cE=i(tK,"getitem"),tK.forEach(a),dE=i(Fi,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),O2=r(Fi,"CODE",{});var aK=o(O2);mE=i(aK,"type"),aK.forEach(a),hE=i(Fi," (for example \u201Cnumpy\u201D) is used to format batches when using "),S2=r(Fi,"STRONG",{});var sK=o(S2);fE=i(sK,"getitem"),sK.forEach(a),uE=i(Fi,"."),Fi.forEach(a),gE=m(Es),Yp=r(Es,"P",{});var w7=o(Yp);_E=i(w7,"It\u2019s also possible to use custom transforms for formatting using "),Uf=r(w7,"A",{href:!0});var nK=o(Uf);bE=i(nK,"datasets.Dataset.with_transform()"),nK.forEach(a),$E=i(w7,"."),w7.forEach(a),xE=m(Es),an=r(Es,"P",{});var Rg=o(an);vE=i(Rg,"Contrary to "),Mf=r(Rg,"A",{href:!0});var rK=o(Mf);yE=i(rK,"datasets.Dataset.set_format()"),rK.forEach(a),jE=i(Rg,", "),C2=r(Rg,"CODE",{});var oK=o(C2);wE=i(oK,"with_format"),oK.forEach(a),DE=i(Rg," returns a new Dataset object."),Rg.forEach(a),kE=m(Es),b(Zr.$$.fragment,Es),Es.forEach(a),EE=m(q),we=r(q,"DIV",{class:!0});var Is=o(we);b(Jp.$$.fragment,Is),IE=m(Is),sn=r(Is,"P",{});var Bg=o(sn);qE=i(Bg,"Set "),z2=r(Bg,"STRONG",{});var lK=o(z2);TE=i(lK,"getitem"),lK.forEach(a),NE=i(Bg," return format using this transform. The transform is applied on-the-fly on batches when "),V2=r(Bg,"STRONG",{});var iK=o(V2);PE=i(iK,"getitem"),iK.forEach(a),LE=i(Bg," is called."),Bg.forEach(a),AE=m(Is),nn=r(Is,"P",{});var Hg=o(nn);FE=i(Hg,"As "),Rf=r(Hg,"A",{href:!0});var pK=o(Rf);OE=i(pK,"datasets.Dataset.set_format()"),pK.forEach(a),SE=i(Hg,", this can be reset using "),Bf=r(Hg,"A",{href:!0});var cK=o(Bf);CE=i(cK,"datasets.Dataset.reset_format()"),cK.forEach(a),zE=i(Hg,"."),Hg.forEach(a),VE=m(Is),rn=r(Is,"P",{});var Gg=o(rn);UE=i(Gg,"Contrary to "),Hf=r(Gg,"A",{href:!0});var dK=o(Hf);ME=i(dK,"datasets.Dataset.set_transform()"),dK.forEach(a),RE=i(Gg,", "),U2=r(Gg,"CODE",{});var mK=o(U2);BE=i(mK,"with_transform"),mK.forEach(a),HE=i(Gg," returns a new Dataset object."),Gg.forEach(a),GE=m(Is),b(Xr.$$.fragment,Is),Is.forEach(a),WE=m(q),Qr=r(q,"DIV",{class:!0});var D7=o(Qr);b(Zp.$$.fragment,D7),KE=m(D7),M2=r(D7,"P",{});var hK=o(M2);YE=i(hK,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),hK.forEach(a),D7.forEach(a),JE=m(q),rt=r(q,"DIV",{class:!0});var Oi=o(rt);b(Xp.$$.fragment,Oi),ZE=m(Oi),R2=r(Oi,"P",{});var fK=o(R2);XE=i(fK,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),fK.forEach(a),QE=m(Oi),B2=r(Oi,"P",{});var uK=o(B2);e6=i(uK,"Be careful when running this command that no other process is currently using other cache files."),uK.forEach(a),t6=m(Oi),b(eo.$$.fragment,Oi),Oi.forEach(a),a6=m(q),De=r(q,"DIV",{class:!0});var qs=o(De);b(Qp.$$.fragment,qs),s6=m(qs),H2=r(qs,"P",{});var gK=o(H2);n6=i(gK,`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),gK.forEach(a),r6=m(qs),ec=r(qs,"P",{});var k7=o(ec);o6=i(k7,"You can specify whether the function should be batched or not with the "),G2=r(k7,"CODE",{});var _K=o(G2);l6=i(_K,"batched"),_K.forEach(a),i6=i(k7," parameter:"),k7.forEach(a),p6=m(qs),on=r(qs,"UL",{});var Wg=o(on);W2=r(Wg,"LI",{});var bK=o(W2);c6=i(bK,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),bK.forEach(a),d6=m(Wg),K2=r(Wg,"LI",{});var $K=o(K2);m6=i($K,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),$K.forEach(a),h6=m(Wg),me=r(Wg,"LI",{});var _t=o(me);f6=i(_t,"If batched is True and batch_size is "),Y2=r(_t,"CODE",{});var xK=o(Y2);u6=i(xK,"n"),xK.forEach(a),g6=i(_t," > 1, then the function takes a batch of "),J2=r(_t,"CODE",{});var vK=o(J2);_6=i(vK,"n"),vK.forEach(a),b6=i(_t," examples as input and can return a batch with "),Z2=r(_t,"CODE",{});var yK=o(Z2);$6=i(yK,"n"),yK.forEach(a),x6=i(_t,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),X2=r(_t,"CODE",{});var jK=o(X2);v6=i(jK,"n"),jK.forEach(a),y6=i(_t,` examples.
A batch is a dictionary, e.g. a batch of `),Q2=r(_t,"CODE",{});var wK=o(Q2);j6=i(wK,"n"),wK.forEach(a),w6=i(_t," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),_t.forEach(a),Wg.forEach(a),D6=m(qs),b(to.$$.fragment,qs),qs.forEach(a),k6=m(q),ja=r(q,"DIV",{class:!0});var Kg=o(ja);b(tc.$$.fragment,Kg),E6=m(Kg),e1=r(Kg,"P",{});var DK=o(e1);I6=i(DK,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),DK.forEach(a),q6=m(Kg),b(ao.$$.fragment,Kg),Kg.forEach(a),T6=m(q),wa=r(q,"DIV",{class:!0});var Yg=o(wa);b(ac.$$.fragment,Yg),N6=m(Yg),t1=r(Yg,"P",{});var kK=o(t1);P6=i(kK,"Create a new dataset with rows selected following the list/array of indices."),kK.forEach(a),L6=m(Yg),b(so.$$.fragment,Yg),Yg.forEach(a),A6=m(q),ot=r(q,"DIV",{class:!0});var Si=o(ot);b(sc.$$.fragment,Si),F6=m(Si),a1=r(Si,"P",{});var EK=o(a1);O6=i(EK,"Create a new dataset sorted according to a column."),EK.forEach(a),S6=m(Si),s1=r(Si,"P",{});var IK=o(s1);C6=i(IK,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),IK.forEach(a),z6=m(Si),b(no.$$.fragment,Si),Si.forEach(a),V6=m(q),lt=r(q,"DIV",{class:!0});var Ci=o(lt);b(nc.$$.fragment,Ci),U6=m(Ci),n1=r(Ci,"P",{});var qK=o(n1);M6=i(qK,"Create a new Dataset where the rows are shuffled."),qK.forEach(a),R6=m(Ci),r1=r(Ci,"P",{});var TK=o(r1);B6=i(TK,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),TK.forEach(a),H6=m(Ci),b(ro.$$.fragment,Ci),Ci.forEach(a),G6=m(q),it=r(q,"DIV",{class:!0});var zi=o(it);b(rc.$$.fragment,zi),W6=m(zi),H=r(zi,"P",{});var pe=o(H);K6=i(pe,"Return a dictionary ("),o1=r(pe,"CODE",{});var NK=o(o1);Y6=i(NK,"datasets.DatasetDict"),NK.forEach(a),J6=i(pe,") with two random train and test subsets ("),l1=r(pe,"EM",{});var PK=o(l1);Z6=i(PK,"train"),PK.forEach(a),X6=i(pe," and "),i1=r(pe,"EM",{});var LK=o(i1);Q6=i(LK,"test"),LK.forEach(a),e8=m(pe),p1=r(pe,"CODE",{});var AK=o(p1);t8=i(AK,"Dataset"),AK.forEach(a),a8=i(pe,` splits).
Splits are created from the dataset according to `),c1=r(pe,"EM",{});var FK=o(c1);s8=i(FK,"test_size"),FK.forEach(a),n8=i(pe,", "),d1=r(pe,"EM",{});var OK=o(d1);r8=i(OK,"train_size"),OK.forEach(a),o8=i(pe," and "),m1=r(pe,"EM",{});var SK=o(m1);l8=i(SK,"shuffle"),SK.forEach(a),i8=i(pe,"."),pe.forEach(a),p8=m(zi),oc=r(zi,"P",{});var E7=o(oc);c8=i(E7,"This method is similar to scikit-learn "),h1=r(E7,"EM",{});var CK=o(h1);d8=i(CK,"train_test_split"),CK.forEach(a),m8=i(E7," with the omission of the stratified options."),E7.forEach(a),h8=m(zi),b(oo.$$.fragment,zi),zi.forEach(a),f8=m(q),re=r(q,"DIV",{class:!0});var bt=o(re);b(lc.$$.fragment,bt),u8=m(bt),ln=r(bt,"P",{});var Jg=o(ln);g8=i(Jg,"Return the "),f1=r(Jg,"EM",{});var zK=o(f1);_8=i(zK,"index"),zK.forEach(a),b8=i(Jg,"-nth shard from dataset split into "),u1=r(Jg,"EM",{});var VK=o(u1);$8=i(VK,"num_shards"),VK.forEach(a),x8=i(Jg," pieces."),Jg.forEach(a),v8=m(bt),g1=r(bt,"P",{});var UK=o(g1);y8=i(UK,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),UK.forEach(a),j8=m(bt),ic=r(bt,"P",{});var I7=o(ic);w8=i(I7,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),_1=r(I7,"EM",{});var MK=o(_1);D8=i(MK,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),MK.forEach(a),k8=i(I7,` will return
a dataset with the same order as the original.`),I7.forEach(a),E8=m(bt),b1=r(bt,"P",{});var RK=o(b1);I8=i(RK,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),RK.forEach(a),q8=m(bt),b(lo.$$.fragment,bt),bt.forEach(a),T8=m(q),Da=r(q,"DIV",{class:!0});var Zg=o(Da);b(pc.$$.fragment,Zg),N8=m(Zg),$1=r(Zg,"P",{});var BK=o($1);P8=i(BK,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),BK.forEach(a),L8=m(Zg),b(io.$$.fragment,Zg),Zg.forEach(a),A8=m(q),pt=r(q,"DIV",{class:!0});var Vi=o(pt);b(cc.$$.fragment,Vi),F8=m(Vi),x1=r(Vi,"P",{});var HK=o(x1);O8=i(HK,`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),HK.forEach(a),S8=m(Vi),At=r(Vi,"P",{});var Ui=o(At);C8=i(Ui,"The resulting Parquet files are self-contained by default: if your dataset contains "),Gf=r(Ui,"A",{href:!0});var GK=o(Gf);z8=i(GK,"Image"),GK.forEach(a),V8=i(Ui," or "),Wf=r(Ui,"A",{href:!0});var WK=o(Wf);U8=i(WK,"Audio"),WK.forEach(a),M8=i(Ui,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),v1=r(Ui,"EM",{});var KK=o(v1);R8=i(KK,"embed_external_files"),KK.forEach(a),B8=i(Ui," to False."),Ui.forEach(a),H8=m(Vi),b(po.$$.fragment,Vi),Vi.forEach(a),G8=m(q),K=r(q,"DIV",{class:!0});var Oe=o(K);b(dc.$$.fragment,Oe),W8=m(Oe),pn=r(Oe,"P",{});var Xg=o(pn);K8=i(Xg,"Saves a dataset to a dataset directory, or in a filesystem using either "),Kf=r(Xg,"A",{href:!0});var YK=o(Kf);Y8=i(YK,"S3FileSystem"),YK.forEach(a),J8=i(Xg,` or
any implementation of `),y1=r(Xg,"CODE",{});var JK=o(y1);Z8=i(JK,"fsspec.spec.AbstractFileSystem"),JK.forEach(a),X8=i(Xg,"."),Xg.forEach(a),Q8=m(Oe),cn=r(Oe,"P",{});var Qg=o(cn);eI=i(Qg,"For "),Yf=r(Qg,"A",{href:!0});var ZK=o(Yf);tI=i(ZK,"Image"),ZK.forEach(a),aI=i(Qg," and "),Jf=r(Qg,"A",{href:!0});var XK=o(Jf);sI=i(XK,"Audio"),XK.forEach(a),nI=i(Qg," data:"),Qg.forEach(a),rI=m(Oe),mc=r(Oe,"P",{});var q7=o(mc);oI=i(q7,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),j1=r(q7,"EM",{});var QK=o(j1);lI=i(QK,"read()"),QK.forEach(a),iI=i(q7," those files first."),q7.forEach(a),pI=m(Oe),b(co.$$.fragment,Oe),cI=m(Oe),b(mo.$$.fragment,Oe),dI=m(Oe),b(ho.$$.fragment,Oe),Oe.forEach(a),mI=m(q),ka=r(q,"DIV",{class:!0});var e_=o(ka);b(hc.$$.fragment,e_),hI=m(e_),Ft=r(e_,"P",{});var Mi=o(Ft);fI=i(Mi,"Loads a dataset that was previously saved using "),w1=r(Mi,"CODE",{});var eY=o(w1);uI=i(eY,"save_to_disk"),eY.forEach(a),gI=i(Mi,` from a dataset directory, or from a
filesystem using either `),Zf=r(Mi,"A",{href:!0});var tY=o(Zf);_I=i(tY,"S3FileSystem"),tY.forEach(a),bI=i(Mi,` or any implementation of
`),D1=r(Mi,"CODE",{});var aY=o(D1);$I=i(aY,"fsspec.spec.AbstractFileSystem"),aY.forEach(a),xI=i(Mi,"."),Mi.forEach(a),vI=m(e_),b(fo.$$.fragment,e_),e_.forEach(a),yI=m(q),uo=r(q,"DIV",{class:!0});var T7=o(uo);b(fc.$$.fragment,T7),jI=m(T7),k1=r(T7,"P",{});var sY=o(k1);wI=i(sY,"Create and cache a new Dataset by flattening the indices mapping."),sY.forEach(a),T7.forEach(a),DI=m(q),Ea=r(q,"DIV",{class:!0});var t_=o(Ea);b(uc.$$.fragment,t_),kI=m(t_),E1=r(t_,"P",{});var nY=o(E1);EI=i(nY,"Exports the dataset to csv"),nY.forEach(a),II=m(t_),b(go.$$.fragment,t_),t_.forEach(a),qI=m(q),Ia=r(q,"DIV",{class:!0});var a_=o(Ia);b(gc.$$.fragment,a_),TI=m(a_),_c=r(a_,"P",{});var N7=o(_c);NI=i(N7,"Returns the dataset as a "),I1=r(N7,"CODE",{});var rY=o(I1);PI=i(rY,"pandas.DataFrame"),rY.forEach(a),LI=i(N7,". Can also return a generator for large datasets."),N7.forEach(a),AI=m(a_),b(_o.$$.fragment,a_),a_.forEach(a),FI=m(q),qa=r(q,"DIV",{class:!0});var s_=o(qa);b(bc.$$.fragment,s_),OI=m(s_),q1=r(s_,"P",{});var oY=o(q1);SI=i(oY,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),oY.forEach(a),CI=m(s_),b(bo.$$.fragment,s_),s_.forEach(a),zI=m(q),Ta=r(q,"DIV",{class:!0});var n_=o(Ta);b($c.$$.fragment,n_),VI=m(n_),T1=r(n_,"P",{});var lY=o(T1);UI=i(lY,"Export the dataset to JSON Lines or JSON."),lY.forEach(a),MI=m(n_),b($o.$$.fragment,n_),n_.forEach(a),RI=m(q),Na=r(q,"DIV",{class:!0});var r_=o(Na);b(xc.$$.fragment,r_),BI=m(r_),N1=r(r_,"P",{});var iY=o(N1);HI=i(iY,"Exports the dataset to parquet"),iY.forEach(a),GI=m(r_),b(xo.$$.fragment,r_),r_.forEach(a),WI=m(q),ct=r(q,"DIV",{class:!0});var Ri=o(ct);b(vc.$$.fragment,Ri),KI=m(Ri),dn=r(Ri,"P",{});var o_=o(dn);YI=i(o_,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),P1=r(o_,"CODE",{});var pY=o(P1);JI=i(pY,"device"),pY.forEach(a),ZI=i(o_," if you want to run it on GPU ("),L1=r(o_,"CODE",{});var cY=o(L1);XI=i(cY,"device"),cY.forEach(a),QI=i(o_,` must be the GPU index).
You can find more information about Faiss here:`),o_.forEach(a),e9=m(Ri),A1=r(Ri,"UL",{});var dY=o(A1);Xf=r(dY,"LI",{});var FW=o(Xf);t9=i(FW,"For "),yc=r(FW,"A",{href:!0,rel:!0});var mY=o(yc);a9=i(mY,"string factory"),mY.forEach(a),FW.forEach(a),dY.forEach(a),s9=m(Ri),b(vo.$$.fragment,Ri),Ri.forEach(a),n9=m(q),Pa=r(q,"DIV",{class:!0});var l_=o(Pa);b(jc.$$.fragment,l_),r9=m(l_),Ot=r(l_,"P",{});var Bi=o(Ot);o9=i(Bi,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),F1=r(Bi,"EM",{});var hY=o(F1);l9=i(hY,"external_arrays"),hY.forEach(a),i9=i(Bi,`.
You can specify `),O1=r(Bi,"EM",{});var fY=o(O1);p9=i(fY,"device"),fY.forEach(a),c9=i(Bi," if you want to run it on GPU ("),S1=r(Bi,"EM",{});var uY=o(S1);d9=i(uY,"device"),uY.forEach(a),m9=i(Bi,` must be the GPU index).
You can find more information about Faiss here:`),Bi.forEach(a),h9=m(l_),C1=r(l_,"UL",{});var gY=o(C1);Qf=r(gY,"LI",{});var OW=o(Qf);f9=i(OW,"For "),wc=r(OW,"A",{href:!0,rel:!0});var _Y=o(wc);u9=i(_Y,"string factory"),_Y.forEach(a),OW.forEach(a),gY.forEach(a),l_.forEach(a),g9=m(q),yo=r(q,"DIV",{class:!0});var P7=o(yo);b(Dc.$$.fragment,P7),_9=m(P7),z1=r(P7,"P",{});var bY=o(z1);b9=i(bY,"Save a FaissIndex on disk."),bY.forEach(a),P7.forEach(a),$9=m(q),La=r(q,"DIV",{class:!0});var i_=o(La);b(kc.$$.fragment,i_),x9=m(i_),V1=r(i_,"P",{});var $Y=o(V1);v9=i($Y,"Load a FaissIndex from disk."),$Y.forEach(a),y9=m(i_),Ec=r(i_,"P",{});var L7=o(Ec);j9=i(L7,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),U1=r(L7,"EM",{});var xY=o(U1);w9=i(xY,".get_index(index_name).faiss_index"),xY.forEach(a),D9=i(L7," to make it fit your needs."),L7.forEach(a),i_.forEach(a),k9=m(q),Aa=r(q,"DIV",{class:!0});var p_=o(Aa);b(Ic.$$.fragment,p_),E9=m(p_),M1=r(p_,"P",{});var vY=o(M1);I9=i(vY,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),vY.forEach(a),q9=m(p_),b(jo.$$.fragment,p_),p_.forEach(a),T9=m(q),Fa=r(q,"DIV",{class:!0});var c_=o(Fa);b(qc.$$.fragment,c_),N9=m(c_),R1=r(c_,"P",{});var yY=o(R1);P9=i(yY,"Load an existing text index using ElasticSearch for fast retrieval."),yY.forEach(a),L9=m(c_),b(wo.$$.fragment,c_),c_.forEach(a),A9=m(q),Do=r(q,"DIV",{class:!0});var A7=o(Do);b(Tc.$$.fragment,A7),F9=m(A7),B1=r(A7,"P",{});var jY=o(B1);O9=i(jY,"List the colindex_nameumns/identifiers of all the attached indexes."),jY.forEach(a),A7.forEach(a),S9=m(q),ko=r(q,"DIV",{class:!0});var F7=o(ko);b(Nc.$$.fragment,F7),C9=m(F7),H1=r(F7,"P",{});var wY=o(H1);z9=i(wY,"List the index_name/identifiers of all the attached indexes."),wY.forEach(a),F7.forEach(a),V9=m(q),Eo=r(q,"DIV",{class:!0});var O7=o(Eo);b(Pc.$$.fragment,O7),U9=m(O7),G1=r(O7,"P",{});var DY=o(G1);M9=i(DY,"Drop the index with the specified column."),DY.forEach(a),O7.forEach(a),R9=m(q),Io=r(q,"DIV",{class:!0});var S7=o(Io);b(Lc.$$.fragment,S7),B9=m(S7),W1=r(S7,"P",{});var kY=o(W1);H9=i(kY,"Find the nearest examples indices in the dataset to the query."),kY.forEach(a),S7.forEach(a),G9=m(q),qo=r(q,"DIV",{class:!0});var C7=o(qo);b(Ac.$$.fragment,C7),W9=m(C7),K1=r(C7,"P",{});var EY=o(K1);K9=i(EY,"Find the nearest examples indices in the dataset to the query."),EY.forEach(a),C7.forEach(a),Y9=m(q),To=r(q,"DIV",{class:!0});var z7=o(To);b(Fc.$$.fragment,z7),J9=m(z7),Y1=r(z7,"P",{});var IY=o(Y1);Z9=i(IY,"Find the nearest examples in the dataset to the query."),IY.forEach(a),z7.forEach(a),X9=m(q),No=r(q,"DIV",{class:!0});var V7=o(No);b(Oc.$$.fragment,V7),Q9=m(V7),J1=r(V7,"P",{});var qY=o(J1);eq=i(qY,"Find the nearest examples in the dataset to the query."),qY.forEach(a),V7.forEach(a),tq=m(q),Po=r(q,"DIV",{class:!0});var U7=o(Po);b(Sc.$$.fragment,U7),aq=m(U7),eu=r(U7,"P",{});var SW=o(eu);tu=r(SW,"A",{href:!0});var TY=o(tu);sq=i(TY,"datasets.DatasetInfo"),TY.forEach(a),nq=i(SW," object containing all the metadata in the dataset."),SW.forEach(a),U7.forEach(a),rq=m(q),Lo=r(q,"DIV",{class:!0});var M7=o(Lo);b(Cc.$$.fragment,M7),oq=m(M7),au=r(M7,"P",{});var CW=o(au);su=r(CW,"A",{href:!0});var NY=o(su);lq=i(NY,"datasets.NamedSplit"),NY.forEach(a),iq=i(CW," object corresponding to a named dataset split."),CW.forEach(a),M7.forEach(a),pq=m(q),nu=r(q,"DIV",{class:!0});var PY=o(nu);b(zc.$$.fragment,PY),PY.forEach(a),cq=m(q),ru=r(q,"DIV",{class:!0});var LY=o(ru);b(Vc.$$.fragment,LY),LY.forEach(a),dq=m(q),ou=r(q,"DIV",{class:!0});var AY=o(ou);b(Uc.$$.fragment,AY),AY.forEach(a),mq=m(q),lu=r(q,"DIV",{class:!0});var FY=o(lu);b(Mc.$$.fragment,FY),FY.forEach(a),hq=m(q),iu=r(q,"DIV",{class:!0});var OY=o(iu);b(Rc.$$.fragment,OY),OY.forEach(a),fq=m(q),pu=r(q,"DIV",{class:!0});var SY=o(pu);b(Bc.$$.fragment,SY),SY.forEach(a),uq=m(q),cu=r(q,"DIV",{class:!0});var CY=o(cu);b(Hc.$$.fragment,CY),CY.forEach(a),gq=m(q),du=r(q,"DIV",{class:!0});var zY=o(du);b(Gc.$$.fragment,zY),zY.forEach(a),_q=m(q),mu=r(q,"DIV",{class:!0});var VY=o(mu);b(Wc.$$.fragment,VY),VY.forEach(a),bq=m(q),hu=r(q,"DIV",{class:!0});var UY=o(hu);b(Kc.$$.fragment,UY),UY.forEach(a),$q=m(q),fu=r(q,"DIV",{class:!0});var MY=o(fu);b(Yc.$$.fragment,MY),MY.forEach(a),xq=m(q),uu=r(q,"DIV",{class:!0});var RY=o(uu);b(Jc.$$.fragment,RY),RY.forEach(a),vq=m(q),gu=r(q,"DIV",{class:!0});var BY=o(gu);b(Zc.$$.fragment,BY),BY.forEach(a),yq=m(q),Oa=r(q,"DIV",{class:!0});var d_=o(Oa);b(Xc.$$.fragment,d_),jq=m(d_),Z1=r(d_,"P",{});var HY=o(Z1);wq=i(HY,"Create Dataset from CSV file(s)."),HY.forEach(a),Dq=m(d_),b(Ao.$$.fragment,d_),d_.forEach(a),kq=m(q),Sa=r(q,"DIV",{class:!0});var m_=o(Sa);b(Qc.$$.fragment,m_),Eq=m(m_),X1=r(m_,"P",{});var GY=o(X1);Iq=i(GY,"Create Dataset from JSON or JSON Lines file(s)."),GY.forEach(a),qq=m(m_),b(Fo.$$.fragment,m_),m_.forEach(a),Tq=m(q),Ca=r(q,"DIV",{class:!0});var h_=o(Ca);b(ed.$$.fragment,h_),Nq=m(h_),Q1=r(h_,"P",{});var WY=o(Q1);Pq=i(WY,"Create Dataset from Parquet file(s)."),WY.forEach(a),Lq=m(h_),b(Oo.$$.fragment,h_),h_.forEach(a),Aq=m(q),za=r(q,"DIV",{class:!0});var f_=o(za);b(td.$$.fragment,f_),Fq=m(f_),e$=r(f_,"P",{});var KY=o(e$);Oq=i(KY,"Create Dataset from text file(s)."),KY.forEach(a),Sq=m(f_),b(So.$$.fragment,f_),f_.forEach(a),Cq=m(q),Va=r(q,"DIV",{class:!0});var u_=o(Va);b(ad.$$.fragment,u_),zq=m(u_),mn=r(u_,"P",{});var g_=o(mn);Vq=i(g_,"Prepare a dataset for the given task by casting the dataset\u2019s "),_u=r(g_,"A",{href:!0});var YY=o(_u);Uq=i(YY,"Features"),YY.forEach(a),Mq=i(g_," to standardized column names and types as detailed in "),bu=r(g_,"A",{href:!0});var JY=o(bu);Rq=i(JY,"datasets.tasks"),JY.forEach(a),Bq=i(g_,"."),g_.forEach(a),Hq=m(u_),hn=r(u_,"P",{});var __=o(hn);Gq=i(__,"Casts "),t$=r(__,"CODE",{});var ZY=o(t$);Wq=i(ZY,"datasets.DatasetInfo.features"),ZY.forEach(a),Kq=i(__," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),a$=r(__,"CODE",{});var XY=o(a$);Yq=i(XY,"datasets.DatasetInfo.task_templates"),XY.forEach(a),Jq=i(__," after casting."),__.forEach(a),u_.forEach(a),Zq=m(q),Ua=r(q,"DIV",{class:!0});var b_=o(Ua);b(sd.$$.fragment,b_),Xq=m(b_),nd=r(b_,"P",{});var R7=o(nd);Qq=i(R7,"Align the dataset\u2019s label ID and label name mapping to match an input "),s$=r(R7,"CODE",{});var QY=o(s$);eT=i(QY,"label2id"),QY.forEach(a),tT=i(R7,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),R7.forEach(a),aT=m(b_),b(Co.$$.fragment,b_),b_.forEach(a),q.forEach(a),Sw=m(s),St=r(s,"DIV",{class:!0});var $_=o(St);b(rd.$$.fragment,$_),sT=m($_),fn=r($_,"P",{});var x_=o(fn);nT=i(x_,"Converts a list of "),$u=r(x_,"A",{href:!0});var eJ=o($u);rT=i(eJ,"Dataset"),eJ.forEach(a),oT=i(x_," with the same schema into a single "),xu=r(x_,"A",{href:!0});var tJ=o(xu);lT=i(tJ,"Dataset"),tJ.forEach(a),iT=i(x_,"."),x_.forEach(a),pT=m($_),b(zo.$$.fragment,$_),$_.forEach(a),Cw=m(s),X=r(s,"DIV",{class:!0});var $t=o(X);b(od.$$.fragment,$t),cT=m($t),n$=r($t,"P",{});var aJ=o(n$);dT=i(aJ,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),aJ.forEach(a),mT=m($t),un=r($t,"P",{});var v_=o(un);hT=i(v_,"You can use this function on a list of "),vu=r(v_,"A",{href:!0});var sJ=o(vu);fT=i(sJ,"Dataset"),sJ.forEach(a),uT=i(v_," objects, or on a list of "),yu=r(v_,"A",{href:!0});var nJ=o(yu);gT=i(nJ,"IterableDataset"),nJ.forEach(a),_T=i(v_," objects."),v_.forEach(a),bT=m($t),Ve=r($t,"P",{});var Ts=o(Ve);$T=i(Ts,"If "),r$=r(Ts,"CODE",{});var rJ=o(r$);xT=i(rJ,"probabilities"),rJ.forEach(a),vT=i(Ts," is "),o$=r(Ts,"CODE",{});var oJ=o(o$);yT=i(oJ,"None"),oJ.forEach(a),jT=i(Ts,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),l$=r(Ts,"CODE",{});var lJ=o(l$);wT=i(lJ,"probabilities"),lJ.forEach(a),DT=i(Ts," is not "),i$=r(Ts,"CODE",{});var iJ=o(i$);kT=i(iJ,"None"),iJ.forEach(a),ET=i(Ts,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),Ts.forEach(a),IT=m($t),p$=r($t,"P",{});var pJ=o(p$);qT=i(pJ,"The resulting dataset ends when one of the source datasets runs out of examples."),pJ.forEach(a),TT=m($t),b(Vo.$$.fragment,$t),$t.forEach(a),zw=m(s),he=r(s,"DIV",{class:!0});var Ns=o(he);b(ld.$$.fragment,Ns),NT=m(Ns),c$=r(Ns,"P",{});var cJ=o(c$);PT=i(cJ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),cJ.forEach(a),LT=m(Ns),d$=r(Ns,"P",{});var dJ=o(d$);AT=i(dJ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),dJ.forEach(a),FT=m(Ns),m$=r(Ns,"P",{});var mJ=o(m$);OT=i(mJ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),mJ.forEach(a),ST=m(Ns),Ue=r(Ns,"UL",{});var Ps=o(Ue);h$=r(Ps,"LI",{});var hJ=o(h$);CT=i(hJ,"cache files are always recreated"),hJ.forEach(a),zT=m(Ps),f$=r(Ps,"LI",{});var fJ=o(f$);VT=i(fJ,"cache files are written to a temporary directory that is deleted when session closes"),fJ.forEach(a),UT=m(Ps),u$=r(Ps,"LI",{});var uJ=o(u$);MT=i(uJ,"cache files are named using a random hash instead of the dataset fingerprint"),uJ.forEach(a),RT=m(Ps),id=r(Ps,"LI",{});var B7=o(id);BT=i(B7,"use "),ju=r(B7,"A",{href:!0});var gJ=o(ju);HT=i(gJ,"datasets.Dataset.save_to_disk()"),gJ.forEach(a),GT=i(B7," to save a transformed dataset or it will be deleted when session closes"),B7.forEach(a),WT=m(Ps),Ct=r(Ps,"LI",{});var Hi=o(Ct);KT=i(Hi,"caching doesn\u2019t affect "),wu=r(Hi,"A",{href:!0});var _J=o(wu);YT=i(_J,"datasets.load_dataset()"),_J.forEach(a),JT=i(Hi,`. If you want to regenerate a dataset from scratch you should use
the `),g$=r(Hi,"CODE",{});var bJ=o(g$);ZT=i(bJ,"download_mode"),bJ.forEach(a),XT=i(Hi," parameter in "),Du=r(Hi,"A",{href:!0});var $J=o(Du);QT=i($J,"datasets.load_dataset()"),$J.forEach(a),eN=i(Hi,"."),Hi.forEach(a),Ps.forEach(a),Ns.forEach(a),Vw=m(s),fe=r(s,"DIV",{class:!0});var Ls=o(fe);b(pd.$$.fragment,Ls),tN=m(Ls),_$=r(Ls,"P",{});var xJ=o(_$);aN=i(xJ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),xJ.forEach(a),sN=m(Ls),b$=r(Ls,"P",{});var vJ=o(b$);nN=i(vJ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),vJ.forEach(a),rN=m(Ls),$$=r(Ls,"P",{});var yJ=o($$);oN=i(yJ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),yJ.forEach(a),lN=m(Ls),Me=r(Ls,"UL",{});var As=o(Me);x$=r(As,"LI",{});var jJ=o(x$);iN=i(jJ,"cache files are always recreated"),jJ.forEach(a),pN=m(As),v$=r(As,"LI",{});var wJ=o(v$);cN=i(wJ,"cache files are written to a temporary directory that is deleted when session closes"),wJ.forEach(a),dN=m(As),y$=r(As,"LI",{});var DJ=o(y$);mN=i(DJ,"cache files are named using a random hash instead of the dataset fingerprint"),DJ.forEach(a),hN=m(As),cd=r(As,"LI",{});var H7=o(cd);fN=i(H7,"use "),ku=r(H7,"A",{href:!0});var kJ=o(ku);uN=i(kJ,"datasets.Dataset.save_to_disk()"),kJ.forEach(a),gN=i(H7," to save a transformed dataset or it will be deleted when session closes"),H7.forEach(a),_N=m(As),zt=r(As,"LI",{});var Gi=o(zt);bN=i(Gi,"caching doesn\u2019t affect "),Eu=r(Gi,"A",{href:!0});var EJ=o(Eu);$N=i(EJ,"datasets.load_dataset()"),EJ.forEach(a),xN=i(Gi,`. If you want to regenerate a dataset from scratch you should use
the `),j$=r(Gi,"CODE",{});var IJ=o(j$);vN=i(IJ,"download_mode"),IJ.forEach(a),yN=i(Gi," parameter in "),Iu=r(Gi,"A",{href:!0});var qJ=o(Iu);jN=i(qJ,"datasets.load_dataset()"),qJ.forEach(a),wN=i(Gi,"."),Gi.forEach(a),As.forEach(a),Ls.forEach(a),Uw=m(s),ue=r(s,"DIV",{class:!0});var Fs=o(ue);b(dd.$$.fragment,Fs),DN=m(Fs),w$=r(Fs,"P",{});var TJ=o(w$);kN=i(TJ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),TJ.forEach(a),EN=m(Fs),D$=r(Fs,"P",{});var NJ=o(D$);IN=i(NJ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),NJ.forEach(a),qN=m(Fs),k$=r(Fs,"P",{});var PJ=o(k$);TN=i(PJ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),PJ.forEach(a),NN=m(Fs),Re=r(Fs,"UL",{});var Os=o(Re);E$=r(Os,"LI",{});var LJ=o(E$);PN=i(LJ,"cache files are always recreated"),LJ.forEach(a),LN=m(Os),I$=r(Os,"LI",{});var AJ=o(I$);AN=i(AJ,"cache files are written to a temporary directory that is deleted when session closes"),AJ.forEach(a),FN=m(Os),q$=r(Os,"LI",{});var FJ=o(q$);ON=i(FJ,"cache files are named using a random hash instead of the dataset fingerprint"),FJ.forEach(a),SN=m(Os),md=r(Os,"LI",{});var G7=o(md);CN=i(G7,"use "),qu=r(G7,"A",{href:!0});var OJ=o(qu);zN=i(OJ,"datasets.Dataset.save_to_disk()"),OJ.forEach(a),VN=i(G7," to save a transformed dataset or it will be deleted when session closes"),G7.forEach(a),UN=m(Os),Vt=r(Os,"LI",{});var Wi=o(Vt);MN=i(Wi,"caching doesn\u2019t affect "),Tu=r(Wi,"A",{href:!0});var SJ=o(Tu);RN=i(SJ,"datasets.load_dataset()"),SJ.forEach(a),BN=i(Wi,`. If you want to regenerate a dataset from scratch you should use
the `),T$=r(Wi,"CODE",{});var CJ=o(T$);HN=i(CJ,"download_mode"),CJ.forEach(a),GN=i(Wi," parameter in "),Nu=r(Wi,"A",{href:!0});var zJ=o(Nu);WN=i(zJ,"datasets.load_dataset()"),zJ.forEach(a),KN=i(Wi,"."),Wi.forEach(a),Os.forEach(a),Fs.forEach(a),Mw=m(s),gn=r(s,"H2",{class:!0});var W7=o(gn);Uo=r(W7,"A",{id:!0,class:!0,href:!0});var VJ=o(Uo);N$=r(VJ,"SPAN",{});var UJ=o(N$);b(hd.$$.fragment,UJ),UJ.forEach(a),VJ.forEach(a),YN=m(W7),P$=r(W7,"SPAN",{});var MJ=o(P$);JN=i(MJ,"DatasetDict"),MJ.forEach(a),W7.forEach(a),Rw=m(s),Mo=r(s,"P",{});var K7=o(Mo);ZN=i(K7,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),L$=r(K7,"CODE",{});var RJ=o(L$);XN=i(RJ,"Dataset"),RJ.forEach(a),QN=i(K7,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),K7.forEach(a),Bw=m(s),L=r(s,"DIV",{class:!0});var A=o(L);b(fd.$$.fragment,A),eP=m(A),A$=r(A,"P",{});var BJ=o(A$);tP=i(BJ,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),BJ.forEach(a),aP=m(A),Ma=r(A,"DIV",{class:!0});var y_=o(Ma);b(ud.$$.fragment,y_),sP=m(y_),F$=r(y_,"P",{});var HJ=o(F$);nP=i(HJ,"The Apache Arrow tables backing each split."),HJ.forEach(a),rP=m(y_),b(Ro.$$.fragment,y_),y_.forEach(a),oP=m(A),Ra=r(A,"DIV",{class:!0});var j_=o(Ra);b(gd.$$.fragment,j_),lP=m(j_),O$=r(j_,"P",{});var GJ=o(O$);iP=i(GJ,"The cache files containing the Apache Arrow table backing each split."),GJ.forEach(a),pP=m(j_),b(Bo.$$.fragment,j_),j_.forEach(a),cP=m(A),Ba=r(A,"DIV",{class:!0});var w_=o(Ba);b(_d.$$.fragment,w_),dP=m(w_),S$=r(w_,"P",{});var WJ=o(S$);mP=i(WJ,"Number of columns in each split of the dataset."),WJ.forEach(a),hP=m(w_),b(Ho.$$.fragment,w_),w_.forEach(a),fP=m(A),Ha=r(A,"DIV",{class:!0});var D_=o(Ha);b(bd.$$.fragment,D_),uP=m(D_),$d=r(D_,"P",{});var Y7=o($d);gP=i(Y7,"Number of rows in each split of the dataset (same as "),Go=r(Y7,"A",{href:!0});var J7=o(Go);_P=i(J7,"datasets.Dataset."),C$=r(J7,"STRONG",{});var KJ=o(C$);bP=i(KJ,"len"),KJ.forEach(a),$P=i(J7,"()"),J7.forEach(a),xP=i(Y7,")."),Y7.forEach(a),vP=m(D_),b(Wo.$$.fragment,D_),D_.forEach(a),yP=m(A),Ga=r(A,"DIV",{class:!0});var k_=o(Ga);b(xd.$$.fragment,k_),jP=m(k_),z$=r(k_,"P",{});var YJ=o(z$);wP=i(YJ,"Names of the columns in each split of the dataset."),YJ.forEach(a),DP=m(k_),b(Ko.$$.fragment,k_),k_.forEach(a),kP=m(A),Wa=r(A,"DIV",{class:!0});var E_=o(Wa);b(vd.$$.fragment,E_),EP=m(E_),V$=r(E_,"P",{});var JJ=o(V$);IP=i(JJ,"Shape of each split of the dataset (number of columns, number of rows)."),JJ.forEach(a),qP=m(E_),b(Yo.$$.fragment,E_),E_.forEach(a),TP=m(A),dt=r(A,"DIV",{class:!0});var Ki=o(dt);b(yd.$$.fragment,Ki),NP=m(Ki),U$=r(Ki,"P",{});var ZJ=o(U$);PP=i(ZJ,"Return a list of the unique elements in a column for each split."),ZJ.forEach(a),LP=m(Ki),M$=r(Ki,"P",{});var XJ=o(M$);AP=i(XJ,"This is implemented in the low-level backend and as such, very fast."),XJ.forEach(a),FP=m(Ki),b(Jo.$$.fragment,Ki),Ki.forEach(a),OP=m(A),Ka=r(A,"DIV",{class:!0});var I_=o(Ka);b(jd.$$.fragment,I_),SP=m(I_),R$=r(I_,"P",{});var QJ=o(R$);CP=i(QJ,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),QJ.forEach(a),zP=m(I_),b(Zo.$$.fragment,I_),I_.forEach(a),VP=m(A),Ya=r(A,"DIV",{class:!0});var q_=o(Ya);b(wd.$$.fragment,q_),UP=m(q_),B$=r(q_,"P",{});var eZ=o(B$);MP=i(eZ,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),eZ.forEach(a),RP=m(q_),b(Xo.$$.fragment,q_),q_.forEach(a),BP=m(A),Ja=r(A,"DIV",{class:!0});var T_=o(Ja);b(Dd.$$.fragment,T_),HP=m(T_),H$=r(T_,"P",{});var tZ=o(H$);GP=i(tZ,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),tZ.forEach(a),WP=m(T_),b(Qo.$$.fragment,T_),T_.forEach(a),KP=m(A),mt=r(A,"DIV",{class:!0});var Yi=o(mt);b(kd.$$.fragment,Yi),YP=m(Yi),G$=r(Yi,"P",{});var aZ=o(G$);JP=i(aZ,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),aZ.forEach(a),ZP=m(Yi),W$=r(Yi,"P",{});var sZ=o(W$);XP=i(sZ,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),sZ.forEach(a),QP=m(Yi),b(el.$$.fragment,Yi),Yi.forEach(a),eL=m(A),ke=r(A,"DIV",{class:!0});var Ss=o(ke);b(Ed.$$.fragment,Ss),tL=m(Ss),K$=r(Ss,"P",{});var nZ=o(K$);aL=i(nZ,"Create a new Dataset where the rows are shuffled."),nZ.forEach(a),sL=m(Ss),Y$=r(Ss,"P",{});var rZ=o(Y$);nL=i(rZ,"The transformation is applied to all the datasets of the dataset dictionary."),rZ.forEach(a),rL=m(Ss),J$=r(Ss,"P",{});var oZ=o(J$);oL=i(oZ,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),oZ.forEach(a),lL=m(Ss),b(tl.$$.fragment,Ss),Ss.forEach(a),iL=m(A),Ee=r(A,"DIV",{class:!0});var Cs=o(Ee);b(Id.$$.fragment,Cs),pL=m(Cs),qd=r(Cs,"P",{});var Z7=o(qd);cL=i(Z7,"Set "),Z$=r(Z7,"CODE",{});var lZ=o(Z$);dL=i(lZ,"__getitem__"),lZ.forEach(a),mL=i(Z7,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),Z7.forEach(a),hL=m(Cs),Be=r(Cs,"P",{});var zs=o(Be);fL=i(zs,"It is possible to call "),X$=r(zs,"CODE",{});var iZ=o(X$);uL=i(iZ,"map"),iZ.forEach(a),gL=i(zs," after calling "),Q$=r(zs,"CODE",{});var pZ=o(Q$);_L=i(pZ,"set_format"),pZ.forEach(a),bL=i(zs,". Since "),ex=r(zs,"CODE",{});var cZ=o(ex);$L=i(cZ,"map"),cZ.forEach(a),xL=i(zs,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),tx=r(zs,"CODE",{});var dZ=o(tx);vL=i(dZ,"map"),dZ.forEach(a),yL=i(zs," on a dataset to add a new column, then this column will be formatted:"),zs.forEach(a),jL=m(Cs),ax=r(Cs,"P",{});var mZ=o(ax);wL=i(mZ,"new formatted columns = (all columns - previously unformatted columns)"),mZ.forEach(a),DL=m(Cs),b(al.$$.fragment,Cs),Cs.forEach(a),kL=m(A),ht=r(A,"DIV",{class:!0});var Ji=o(ht);b(Td.$$.fragment,Ji),EL=m(Ji),Nd=r(Ji,"P",{});var X7=o(Nd);IL=i(X7,"Reset "),sx=r(X7,"CODE",{});var hZ=o(sx);qL=i(hZ,"__getitem__"),hZ.forEach(a),TL=i(X7,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),X7.forEach(a),NL=m(Ji),Pu=r(Ji,"P",{});var zW=o(Pu);PL=i(zW,"Same as "),nx=r(zW,"CODE",{});var fZ=o(nx);LL=i(fZ,"self.set_format()"),fZ.forEach(a),zW.forEach(a),AL=m(Ji),b(sl.$$.fragment,Ji),Ji.forEach(a),FL=m(A),nl=r(A,"DIV",{class:!0});var Q7=o(nl);b(Pd.$$.fragment,Q7),OL=m(Q7),_n=r(Q7,"P",{});var N_=o(_n);SL=i(N_,"To be used in a "),rx=r(N_,"EM",{});var uZ=o(rx);CL=i(uZ,"with"),uZ.forEach(a),zL=i(N_," statement. Set "),ox=r(N_,"CODE",{});var gZ=o(ox);VL=i(gZ,"__getitem__"),gZ.forEach(a),UL=i(N_,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),N_.forEach(a),Q7.forEach(a),ML=m(A),Ie=r(A,"DIV",{class:!0});var Vs=o(Ie);b(Ld.$$.fragment,Vs),RL=m(Vs),Ut=r(Vs,"P",{});var Zi=o(Ut);BL=i(Zi,"Set "),lx=r(Zi,"CODE",{});var _Z=o(lx);HL=i(_Z,"__getitem__"),_Z.forEach(a),GL=i(Zi,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),ix=r(Zi,"CODE",{});var bZ=o(ix);WL=i(bZ,"type"),bZ.forEach(a),KL=i(Zi," (for example \u201Cnumpy\u201D) is used to format batches when using "),px=r(Zi,"CODE",{});var $Z=o(px);YL=i($Z,"__getitem__"),$Z.forEach(a),JL=i(Zi,`.
The format is set for every dataset in the dataset dictionary`),Zi.forEach(a),ZL=m(Vs),Ad=r(Vs,"P",{});var e4=o(Ad);XL=i(e4,"It\u2019s also possible to use custom transforms for formatting using "),Lu=r(e4,"A",{href:!0});var xZ=o(Lu);QL=i(xZ,"datasets.Dataset.with_transform()"),xZ.forEach(a),eA=i(e4,"."),e4.forEach(a),tA=m(Vs),bn=r(Vs,"P",{});var P_=o(bn);aA=i(P_,"Contrary to "),Au=r(P_,"A",{href:!0});var vZ=o(Au);sA=i(vZ,"datasets.DatasetDict.set_format()"),vZ.forEach(a),nA=i(P_,", "),cx=r(P_,"CODE",{});var yZ=o(cx);rA=i(yZ,"with_format"),yZ.forEach(a),oA=i(P_," returns a new DatasetDict object with new Dataset objects."),P_.forEach(a),lA=m(Vs),b(rl.$$.fragment,Vs),Vs.forEach(a),iA=m(A),qe=r(A,"DIV",{class:!0});var Us=o(qe);b(Fd.$$.fragment,Us),pA=m(Us),$n=r(Us,"P",{});var L_=o($n);cA=i(L_,"Set "),dx=r(L_,"CODE",{});var jZ=o(dx);dA=i(jZ,"__getitem__"),jZ.forEach(a),mA=i(L_," return format using this transform. The transform is applied on-the-fly on batches when "),mx=r(L_,"CODE",{});var wZ=o(mx);hA=i(wZ,"__getitem__"),wZ.forEach(a),fA=i(L_,` is called.
The transform is set for every dataset in the dataset dictionary`),L_.forEach(a),uA=m(Us),xn=r(Us,"P",{});var A_=o(xn);gA=i(A_,"As "),Fu=r(A_,"A",{href:!0});var DZ=o(Fu);_A=i(DZ,"datasets.Dataset.set_format()"),DZ.forEach(a),bA=i(A_,", this can be reset using "),Ou=r(A_,"A",{href:!0});var kZ=o(Ou);$A=i(kZ,"datasets.Dataset.reset_format()"),kZ.forEach(a),xA=i(A_,"."),A_.forEach(a),vA=m(Us),vn=r(Us,"P",{});var F_=o(vn);yA=i(F_,"Contrary to "),hx=r(F_,"CODE",{});var EZ=o(hx);jA=i(EZ,"datasets.DatasetDict.set_transform()"),EZ.forEach(a),wA=i(F_,", "),fx=r(F_,"CODE",{});var IZ=o(fx);DA=i(IZ,"with_transform"),IZ.forEach(a),kA=i(F_," returns a new DatasetDict object with new Dataset objects."),F_.forEach(a),EA=m(Us),b(ol.$$.fragment,Us),Us.forEach(a),IA=m(A),Za=r(A,"DIV",{class:!0});var O_=o(Za);b(Od.$$.fragment,O_),qA=m(O_),ux=r(O_,"P",{});var qZ=o(ux);TA=i(qZ,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),qZ.forEach(a),NA=m(O_),b(ll.$$.fragment,O_),O_.forEach(a),PA=m(A),ft=r(A,"DIV",{class:!0});var Xi=o(ft);b(Sd.$$.fragment,Xi),LA=m(Xi),gx=r(Xi,"P",{});var TZ=o(gx);AA=i(TZ,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),TZ.forEach(a),FA=m(Xi),Mt=r(Xi,"P",{});var Qi=o(Mt);OA=i(Qi,"You can also remove a column using "),Su=r(Qi,"A",{href:!0});var NZ=o(Su);SA=i(NZ,"Dataset.map()"),NZ.forEach(a),CA=i(Qi," with "),_x=r(Qi,"EM",{});var PZ=o(_x);zA=i(PZ,"feature"),PZ.forEach(a),VA=i(Qi," but "),bx=r(Qi,"CODE",{});var LZ=o(bx);UA=i(LZ,"cast_"),LZ.forEach(a),MA=i(Qi,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Qi.forEach(a),RA=m(Xi),b(il.$$.fragment,Xi),Xi.forEach(a),BA=m(A),Xa=r(A,"DIV",{class:!0});var S_=o(Xa);b(Cd.$$.fragment,S_),HA=m(S_),$x=r(S_,"P",{});var AZ=o($x);GA=i(AZ,"Cast column to feature for decoding."),AZ.forEach(a),WA=m(S_),b(pl.$$.fragment,S_),S_.forEach(a),KA=m(A),Te=r(A,"DIV",{class:!0});var Ms=o(Te);b(zd.$$.fragment,Ms),YA=m(Ms),xx=r(Ms,"P",{});var FZ=o(xx);JA=i(FZ,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),FZ.forEach(a),ZA=m(Ms),vx=r(Ms,"P",{});var OZ=o(vx);XA=i(OZ,"The transformation is applied to all the splits of the dataset dictionary."),OZ.forEach(a),QA=m(Ms),yn=r(Ms,"P",{});var C_=o(yn);eF=i(C_,"You can also remove a column using "),Cu=r(C_,"A",{href:!0});var SZ=o(Cu);tF=i(SZ,"Dataset.map()"),SZ.forEach(a),aF=i(C_," with "),yx=r(C_,"EM",{});var CZ=o(yx);sF=i(CZ,"remove_columns"),CZ.forEach(a),nF=i(C_,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),C_.forEach(a),rF=m(Ms),b(cl.$$.fragment,Ms),Ms.forEach(a),oF=m(A),Ne=r(A,"DIV",{class:!0});var Rs=o(Ne);b(Vd.$$.fragment,Rs),lF=m(Rs),jx=r(Rs,"P",{});var zZ=o(jx);iF=i(zZ,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),zZ.forEach(a),pF=m(Rs),jn=r(Rs,"P",{});var z_=o(jn);cF=i(z_,"You can also rename a column using "),zu=r(z_,"A",{href:!0});var VZ=o(zu);dF=i(VZ,"Dataset.map()"),VZ.forEach(a),mF=i(z_," with "),wx=r(z_,"EM",{});var UZ=o(wx);hF=i(UZ,"remove_columns"),UZ.forEach(a),fF=i(z_," but the present method:"),z_.forEach(a),uF=m(Rs),Ud=r(Rs,"UL",{});var t4=o(Ud);Dx=r(t4,"LI",{});var MZ=o(Dx);gF=i(MZ,"takes care of moving the original features under the new column name."),MZ.forEach(a),_F=m(t4),kx=r(t4,"LI",{});var RZ=o(kx);bF=i(RZ,"doesn\u2019t copy the data to a new dataset and is thus much faster."),RZ.forEach(a),t4.forEach(a),$F=m(Rs),b(dl.$$.fragment,Rs),Rs.forEach(a),xF=m(A),Qa=r(A,"DIV",{class:!0});var V_=o(Qa);b(Md.$$.fragment,V_),vF=m(V_),Ex=r(V_,"P",{});var BZ=o(Ex);yF=i(BZ,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),BZ.forEach(a),jF=m(V_),b(ml.$$.fragment,V_),V_.forEach(a),wF=m(A),es=r(A,"DIV",{class:!0});var U_=o(es);b(Rd.$$.fragment,U_),DF=m(U_),Bd=r(U_,"P",{});var a4=o(Bd);kF=i(a4,"Casts the given column as :obj:"),Ix=r(a4,"CODE",{});var HZ=o(Ix);EF=i(HZ,"datasets.features.ClassLabel"),HZ.forEach(a),IF=i(a4," and updates the tables."),a4.forEach(a),qF=m(U_),b(hl.$$.fragment,U_),U_.forEach(a),TF=m(A),Pe=r(A,"DIV",{class:!0});var Bs=o(Pe);b(Hd.$$.fragment,Bs),NF=m(Bs),wn=r(Bs,"P",{});var M_=o(wn);PF=i(M_,"Pushes the "),qx=r(M_,"CODE",{});var GZ=o(qx);LF=i(GZ,"DatasetDict"),GZ.forEach(a),AF=i(M_,` to the hub as a Parquet dataset.
The `),Tx=r(M_,"CODE",{});var WZ=o(Tx);FF=i(WZ,"DatasetDict"),WZ.forEach(a),OF=i(M_," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),M_.forEach(a),SF=m(Bs),Nx=r(Bs,"P",{});var KZ=o(Nx);CF=i(KZ,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),KZ.forEach(a),zF=m(Bs),Rt=r(Bs,"P",{});var ep=o(Rt);VF=i(ep,"The resulting Parquet files are self-contained by default: if your dataset contains "),Vu=r(ep,"A",{href:!0});var YZ=o(Vu);UF=i(YZ,"Image"),YZ.forEach(a),MF=i(ep," or "),Uu=r(ep,"A",{href:!0});var JZ=o(Uu);RF=i(JZ,"Audio"),JZ.forEach(a),BF=i(ep,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),Px=r(ep,"EM",{});var ZZ=o(Px);HF=i(ZZ,"embed_external_files"),ZZ.forEach(a),GF=i(ep," to False."),ep.forEach(a),WF=m(Bs),b(fl.$$.fragment,Bs),Bs.forEach(a),KF=m(A),oe=r(A,"DIV",{class:!0});var xt=o(oe);b(Gd.$$.fragment,xt),YF=m(xt),Dn=r(xt,"P",{});var R_=o(Dn);JF=i(R_,"Saves a dataset dict to a filesystem using either "),Mu=r(R_,"A",{href:!0});var XZ=o(Mu);ZF=i(XZ,"S3FileSystem"),XZ.forEach(a),XF=i(R_,` or
`),Lx=r(R_,"CODE",{});var QZ=o(Lx);QF=i(QZ,"fsspec.spec.AbstractFileSystem"),QZ.forEach(a),eO=i(R_,"."),R_.forEach(a),tO=m(xt),kn=r(xt,"P",{});var B_=o(kn);aO=i(B_,"For "),Ru=r(B_,"A",{href:!0});var eX=o(Ru);sO=i(eX,"Image"),eX.forEach(a),nO=i(B_," and "),Bu=r(B_,"A",{href:!0});var tX=o(Bu);rO=i(tX,"Audio"),tX.forEach(a),oO=i(B_," data:"),B_.forEach(a),lO=m(xt),Wd=r(xt,"P",{});var s4=o(Wd);iO=i(s4,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),Ax=r(s4,"EM",{});var aX=o(Ax);pO=i(aX,"read()"),aX.forEach(a),cO=i(s4," those files first."),s4.forEach(a),dO=m(xt),b(ul.$$.fragment,xt),mO=m(xt),b(gl.$$.fragment,xt),xt.forEach(a),hO=m(A),ts=r(A,"DIV",{class:!0});var H_=o(ts);b(Kd.$$.fragment,H_),fO=m(H_),Bt=r(H_,"P",{});var tp=o(Bt);uO=i(tp,"Load a dataset that was previously saved using "),Fx=r(tp,"CODE",{});var sX=o(Fx);gO=i(sX,"save_to_disk"),sX.forEach(a),_O=i(tp,` from a filesystem using either
`),Hu=r(tp,"A",{href:!0});var nX=o(Hu);bO=i(nX,"S3FileSystem"),nX.forEach(a),$O=i(tp," or "),Ox=r(tp,"CODE",{});var rX=o(Ox);xO=i(rX,"fsspec.spec.AbstractFileSystem"),rX.forEach(a),vO=i(tp,"."),tp.forEach(a),yO=m(H_),b(_l.$$.fragment,H_),H_.forEach(a),jO=m(A),as=r(A,"DIV",{class:!0});var G_=o(as);b(Yd.$$.fragment,G_),wO=m(G_),Sx=r(G_,"P",{});var oX=o(Sx);DO=i(oX,"Create DatasetDict from CSV file(s)."),oX.forEach(a),kO=m(G_),b(bl.$$.fragment,G_),G_.forEach(a),EO=m(A),ss=r(A,"DIV",{class:!0});var W_=o(ss);b(Jd.$$.fragment,W_),IO=m(W_),Cx=r(W_,"P",{});var lX=o(Cx);qO=i(lX,"Create DatasetDict from JSON Lines file(s)."),lX.forEach(a),TO=m(W_),b($l.$$.fragment,W_),W_.forEach(a),NO=m(A),ns=r(A,"DIV",{class:!0});var K_=o(ns);b(Zd.$$.fragment,K_),PO=m(K_),zx=r(K_,"P",{});var iX=o(zx);LO=i(iX,"Create DatasetDict from Parquet file(s)."),iX.forEach(a),AO=m(K_),b(xl.$$.fragment,K_),K_.forEach(a),FO=m(A),rs=r(A,"DIV",{class:!0});var Y_=o(rs);b(Xd.$$.fragment,Y_),OO=m(Y_),Vx=r(Y_,"P",{});var pX=o(Vx);SO=i(pX,"Create DatasetDict from text file(s)."),pX.forEach(a),CO=m(Y_),b(vl.$$.fragment,Y_),Y_.forEach(a),zO=m(A),os=r(A,"DIV",{class:!0});var J_=o(os);b(Qd.$$.fragment,J_),VO=m(J_),En=r(J_,"P",{});var Z_=o(En);UO=i(Z_,"Prepare a dataset for the given task by casting the dataset\u2019s "),Gu=r(Z_,"A",{href:!0});var cX=o(Gu);MO=i(cX,"Features"),cX.forEach(a),RO=i(Z_," to standardized column names and types as detailed in "),Wu=r(Z_,"A",{href:!0});var dX=o(Wu);BO=i(dX,"datasets.tasks"),dX.forEach(a),HO=i(Z_,"."),Z_.forEach(a),GO=m(J_),In=r(J_,"P",{});var X_=o(In);WO=i(X_,"Casts "),Ux=r(X_,"CODE",{});var mX=o(Ux);KO=i(mX,"datasets.DatasetInfo.features"),mX.forEach(a),YO=i(X_," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Mx=r(X_,"CODE",{});var hX=o(Mx);JO=i(hX,"datasets.DatasetInfo.task_templates"),hX.forEach(a),ZO=i(X_," after casting."),X_.forEach(a),J_.forEach(a),A.forEach(a),Hw=m(s),Ku=r(s,"A",{id:!0}),o(Ku).forEach(a),Gw=m(s),qn=r(s,"H2",{class:!0});var n4=o(qn);yl=r(n4,"A",{id:!0,class:!0,href:!0});var fX=o(yl);Rx=r(fX,"SPAN",{});var uX=o(Rx);b(em.$$.fragment,uX),uX.forEach(a),fX.forEach(a),XO=m(n4),Bx=r(n4,"SPAN",{});var gX=o(Bx);QO=i(gX,"IterableDataset"),gX.forEach(a),n4.forEach(a),Ww=m(s),jl=r(s,"P",{});var r4=o(jl);eS=i(r4,"The base class "),Yu=r(r4,"A",{href:!0});var _X=o(Yu);tS=i(_X,"IterableDataset"),_X.forEach(a),aS=i(r4," implements an iterable Dataset backed by python generators."),r4.forEach(a),Kw=m(s),F=r(s,"DIV",{class:!0});var O=o(F);b(tm.$$.fragment,O),sS=m(O),Hx=r(O,"P",{});var bX=o(Hx);nS=i(bX,"A Dataset backed by an iterable."),bX.forEach(a),rS=m(O),ls=r(O,"DIV",{class:!0});var Q_=o(ls);b(am.$$.fragment,Q_),oS=m(Q_),Gx=r(Q_,"P",{});var $X=o(Gx);lS=i($X,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),$X.forEach(a),iS=m(Q_),b(wl.$$.fragment,Q_),Q_.forEach(a),pS=m(O),is=r(O,"DIV",{class:!0});var eb=o(is);b(sm.$$.fragment,eb),cS=m(eb),Wx=r(eb,"P",{});var xX=o(Wx);dS=i(xX,"Cast column to feature for decoding."),xX.forEach(a),mS=m(eb),b(Dl.$$.fragment,eb),eb.forEach(a),hS=m(O),ps=r(O,"DIV",{class:!0});var tb=o(ps);b(nm.$$.fragment,tb),fS=m(tb),Kx=r(tb,"P",{});var vX=o(Kx);uS=i(vX,"Cast the dataset to a new set of features."),vX.forEach(a),gS=m(tb),b(kl.$$.fragment,tb),tb.forEach(a),_S=m(O),Ju=r(O,"DIV",{class:!0});var yX=o(Ju);b(rm.$$.fragment,yX),yX.forEach(a),bS=m(O),Le=r(O,"DIV",{class:!0});var Hs=o(Le);b(om.$$.fragment,Hs),$S=m(Hs),Yx=r(Hs,"P",{});var jX=o(Yx);xS=i(jX,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),jX.forEach(a),vS=m(Hs),lm=r(Hs,"P",{});var o4=o(lm);yS=i(o4,"You can specify whether the function should be batched or not with the "),Jx=r(o4,"CODE",{});var wX=o(Jx);jS=i(wX,"batched"),wX.forEach(a),wS=i(o4," parameter:"),o4.forEach(a),DS=m(Hs),Tn=r(Hs,"UL",{});var ab=o(Tn);Zx=r(ab,"LI",{});var DX=o(Zx);kS=i(DX,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),DX.forEach(a),ES=m(ab),Xx=r(ab,"LI",{});var kX=o(Xx);IS=i(kX,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),kX.forEach(a),qS=m(ab),ge=r(ab,"LI",{});var vt=o(ge);TS=i(vt,"If batched is True and batch_size is "),Qx=r(vt,"CODE",{});var EX=o(Qx);NS=i(EX,"n"),EX.forEach(a),PS=i(vt," > 1, then the function takes a batch of "),ev=r(vt,"CODE",{});var IX=o(ev);LS=i(IX,"n"),IX.forEach(a),AS=i(vt," examples as input and can return a batch with "),tv=r(vt,"CODE",{});var qX=o(tv);FS=i(qX,"n"),qX.forEach(a),OS=i(vt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),av=r(vt,"CODE",{});var TX=o(av);SS=i(TX,"n"),TX.forEach(a),CS=i(vt,` examples.
A batch is a dictionary, e.g. a batch of `),sv=r(vt,"CODE",{});var NX=o(sv);zS=i(NX,"n"),NX.forEach(a),VS=i(vt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),vt.forEach(a),ab.forEach(a),US=m(Hs),b(El.$$.fragment,Hs),Hs.forEach(a),MS=m(O),cs=r(O,"DIV",{class:!0});var sb=o(cs);b(im.$$.fragment,sb),RS=m(sb),nv=r(sb,"P",{});var PX=o(nv);BS=i(PX,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),PX.forEach(a),HS=m(sb),b(Il.$$.fragment,sb),sb.forEach(a),GS=m(O),ds=r(O,"DIV",{class:!0});var nb=o(ds);b(pm.$$.fragment,nb),WS=m(nb),rv=r(nb,"P",{});var LX=o(rv);KS=i(LX,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),LX.forEach(a),YS=m(nb),b(ql.$$.fragment,nb),nb.forEach(a),JS=m(O),le=r(O,"DIV",{class:!0});var yt=o(le);b(cm.$$.fragment,yt),ZS=m(yt),ov=r(yt,"P",{});var AX=o(ov);XS=i(AX,"Randomly shuffles the elements of this dataset."),AX.forEach(a),QS=m(yt),lv=r(yt,"P",{});var FX=o(lv);eC=i(FX,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),FX.forEach(a),tC=m(yt),dm=r(yt,"P",{});var l4=o(dm);aC=i(l4,"For instance, if your dataset contains 10,000 elements but "),iv=r(l4,"CODE",{});var OX=o(iv);sC=i(OX,"buffer_size"),OX.forEach(a),nC=i(l4,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),l4.forEach(a),rC=m(yt),Nn=r(yt,"P",{});var rb=o(Nn);oC=i(rb,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Zu=r(rb,"A",{href:!0});var SX=o(Zu);lC=i(SX,"datasets.IterableDataset.skip()"),SX.forEach(a),iC=i(rb," or "),Xu=r(rb,"A",{href:!0});var CX=o(Xu);pC=i(CX,"datasets.IterableDataset.take()"),CX.forEach(a),cC=i(rb,`
then the order of the shards is kept unchanged.`),rb.forEach(a),dC=m(yt),b(Tl.$$.fragment,yt),yt.forEach(a),mC=m(O),ms=r(O,"DIV",{class:!0});var ob=o(ms);b(mm.$$.fragment,ob),hC=m(ob),hm=r(ob,"P",{});var i4=o(hm);fC=i(i4,"Create a new IterableDataset that skips the first "),pv=r(i4,"CODE",{});var zX=o(pv);uC=i(zX,"n"),zX.forEach(a),gC=i(i4," elements."),i4.forEach(a),_C=m(ob),b(Nl.$$.fragment,ob),ob.forEach(a),bC=m(O),hs=r(O,"DIV",{class:!0});var lb=o(hs);b(fm.$$.fragment,lb),$C=m(lb),um=r(lb,"P",{});var p4=o(um);xC=i(p4,"Create a new IterableDataset with only the first "),cv=r(p4,"CODE",{});var VX=o(cv);vC=i(VX,"n"),VX.forEach(a),yC=i(p4," elements."),p4.forEach(a),jC=m(lb),b(Pl.$$.fragment,lb),lb.forEach(a),wC=m(O),Ll=r(O,"DIV",{class:!0});var c4=o(Ll);b(gm.$$.fragment,c4),DC=m(c4),Qu=r(c4,"P",{});var VW=o(Qu);eg=r(VW,"A",{href:!0});var UX=o(eg);kC=i(UX,"datasets.DatasetInfo"),UX.forEach(a),EC=i(VW," object containing all the metadata in the dataset."),VW.forEach(a),c4.forEach(a),IC=m(O),Al=r(O,"DIV",{class:!0});var d4=o(Al);b(_m.$$.fragment,d4),qC=m(d4),tg=r(d4,"P",{});var UW=o(tg);ag=r(UW,"A",{href:!0});var MX=o(ag);TC=i(MX,"datasets.NamedSplit"),MX.forEach(a),NC=i(UW," object corresponding to a named dataset split."),UW.forEach(a),d4.forEach(a),PC=m(O),sg=r(O,"DIV",{class:!0});var RX=o(sg);b(bm.$$.fragment,RX),RX.forEach(a),LC=m(O),ng=r(O,"DIV",{class:!0});var BX=o(ng);b($m.$$.fragment,BX),BX.forEach(a),AC=m(O),rg=r(O,"DIV",{class:!0});var HX=o(rg);b(xm.$$.fragment,HX),HX.forEach(a),FC=m(O),og=r(O,"DIV",{class:!0});var GX=o(og);b(vm.$$.fragment,GX),GX.forEach(a),OC=m(O),lg=r(O,"DIV",{class:!0});var WX=o(lg);b(ym.$$.fragment,WX),WX.forEach(a),SC=m(O),ig=r(O,"DIV",{class:!0});var KX=o(ig);b(jm.$$.fragment,KX),KX.forEach(a),CC=m(O),pg=r(O,"DIV",{class:!0});var YX=o(pg);b(wm.$$.fragment,YX),YX.forEach(a),zC=m(O),cg=r(O,"DIV",{class:!0});var JX=o(cg);b(Dm.$$.fragment,JX),JX.forEach(a),VC=m(O),dg=r(O,"DIV",{class:!0});var ZX=o(dg);b(km.$$.fragment,ZX),ZX.forEach(a),UC=m(O),mg=r(O,"DIV",{class:!0});var XX=o(mg);b(Em.$$.fragment,XX),XX.forEach(a),MC=m(O),hg=r(O,"DIV",{class:!0});var QX=o(hg);b(Im.$$.fragment,QX),QX.forEach(a),RC=m(O),fg=r(O,"DIV",{class:!0});var eQ=o(fg);b(qm.$$.fragment,eQ),eQ.forEach(a),BC=m(O),ug=r(O,"DIV",{class:!0});var tQ=o(ug);b(Tm.$$.fragment,tQ),tQ.forEach(a),O.forEach(a),Yw=m(s),Pn=r(s,"H2",{class:!0});var m4=o(Pn);Fl=r(m4,"A",{id:!0,class:!0,href:!0});var aQ=o(Fl);dv=r(aQ,"SPAN",{});var sQ=o(dv);b(Nm.$$.fragment,sQ),sQ.forEach(a),aQ.forEach(a),HC=m(m4),mv=r(m4,"SPAN",{});var nQ=o(mv);GC=i(nQ,"IterableDatasetDict"),nQ.forEach(a),m4.forEach(a),Jw=m(s),Ol=r(s,"P",{});var h4=o(Ol);WC=i(h4,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),hv=r(h4,"CODE",{});var rQ=o(hv);KC=i(rQ,"IterableDataset"),rQ.forEach(a),YC=i(h4," objects as values."),h4.forEach(a),Zw=m(s),U=r(s,"DIV",{class:!0});var B=o(U);b(Pm.$$.fragment,B),JC=m(B),Ae=r(B,"DIV",{class:!0});var Gs=o(Ae);b(Lm.$$.fragment,Gs),ZC=m(Gs),fv=r(Gs,"P",{});var oQ=o(fv);XC=i(oQ,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),oQ.forEach(a),QC=m(Gs),Am=r(Gs,"P",{});var f4=o(Am);ez=i(f4,"You can specify whether the function should be batched or not with the "),uv=r(f4,"CODE",{});var lQ=o(uv);tz=i(lQ,"batched"),lQ.forEach(a),az=i(f4," parameter:"),f4.forEach(a),sz=m(Gs),Ln=r(Gs,"UL",{});var ib=o(Ln);gv=r(ib,"LI",{});var iQ=o(gv);nz=i(iQ,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),iQ.forEach(a),rz=m(ib),_v=r(ib,"LI",{});var pQ=o(_v);oz=i(pQ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),pQ.forEach(a),lz=m(ib),_e=r(ib,"LI",{});var jt=o(_e);iz=i(jt,"If batched is True and batch_size is "),bv=r(jt,"CODE",{});var cQ=o(bv);pz=i(cQ,"n"),cQ.forEach(a),cz=i(jt," > 1, then the function takes a batch of "),$v=r(jt,"CODE",{});var dQ=o($v);dz=i(dQ,"n"),dQ.forEach(a),mz=i(jt," examples as input and can return a batch with "),xv=r(jt,"CODE",{});var mQ=o(xv);hz=i(mQ,"n"),mQ.forEach(a),fz=i(jt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),vv=r(jt,"CODE",{});var hQ=o(vv);uz=i(hQ,"n"),hQ.forEach(a),gz=i(jt,` examples.
A batch is a dictionary, e.g. a batch of `),yv=r(jt,"CODE",{});var fQ=o(yv);_z=i(fQ,"n"),fQ.forEach(a),bz=i(jt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),jt.forEach(a),ib.forEach(a),$z=m(Gs),b(Sl.$$.fragment,Gs),Gs.forEach(a),xz=m(B),fs=r(B,"DIV",{class:!0});var pb=o(fs);b(Fm.$$.fragment,pb),vz=m(pb),jv=r(pb,"P",{});var uQ=o(jv);yz=i(uQ,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),uQ.forEach(a),jz=m(pb),b(Cl.$$.fragment,pb),pb.forEach(a),wz=m(B),ie=r(B,"DIV",{class:!0});var wt=o(ie);b(Om.$$.fragment,wt),Dz=m(wt),wv=r(wt,"P",{});var gQ=o(wv);kz=i(gQ,`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),gQ.forEach(a),Ez=m(wt),Dv=r(wt,"P",{});var _Q=o(Dv);Iz=i(_Q,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),_Q.forEach(a),qz=m(wt),Sm=r(wt,"P",{});var u4=o(Sm);Tz=i(u4,"For instance, if your dataset contains 10,000 elements but "),kv=r(u4,"CODE",{});var bQ=o(kv);Nz=i(bQ,"buffer_size"),bQ.forEach(a),Pz=i(u4,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),u4.forEach(a),Lz=m(wt),An=r(wt,"P",{});var cb=o(An);Az=i(cb,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),gg=r(cb,"A",{href:!0});var $Q=o(gg);Fz=i($Q,"datasets.IterableDataset.skip()"),$Q.forEach(a),Oz=i(cb," or "),_g=r(cb,"A",{href:!0});var xQ=o(_g);Sz=i(xQ,"datasets.IterableDataset.take()"),xQ.forEach(a),Cz=i(cb,`
then the order of the shards is kept unchanged.`),cb.forEach(a),zz=m(wt),b(zl.$$.fragment,wt),wt.forEach(a),Vz=m(B),us=r(B,"DIV",{class:!0});var db=o(us);b(Cm.$$.fragment,db),Uz=m(db),Ev=r(db,"P",{});var vQ=o(Ev);Mz=i(vQ,`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),vQ.forEach(a),Rz=m(db),b(Vl.$$.fragment,db),db.forEach(a),Bz=m(B),gs=r(B,"DIV",{class:!0});var mb=o(gs);b(zm.$$.fragment,mb),Hz=m(mb),Iv=r(mb,"P",{});var yQ=o(Iv);Gz=i(yQ,`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),yQ.forEach(a),Wz=m(mb),b(Ul.$$.fragment,mb),mb.forEach(a),Kz=m(B),_s=r(B,"DIV",{class:!0});var hb=o(_s);b(Vm.$$.fragment,hb),Yz=m(hb),qv=r(hb,"P",{});var jQ=o(qv);Jz=i(jQ,`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),jQ.forEach(a),Zz=m(hb),b(Ml.$$.fragment,hb),hb.forEach(a),Xz=m(B),bs=r(B,"DIV",{class:!0});var fb=o(bs);b(Um.$$.fragment,fb),Qz=m(fb),Tv=r(fb,"P",{});var wQ=o(Tv);eV=i(wQ,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),wQ.forEach(a),tV=m(fb),b(Rl.$$.fragment,fb),fb.forEach(a),aV=m(B),$s=r(B,"DIV",{class:!0});var ub=o($s);b(Mm.$$.fragment,ub),sV=m(ub),Nv=r(ub,"P",{});var DQ=o(Nv);nV=i(DQ,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),DQ.forEach(a),rV=m(ub),b(Bl.$$.fragment,ub),ub.forEach(a),oV=m(B),xs=r(B,"DIV",{class:!0});var gb=o(xs);b(Rm.$$.fragment,gb),lV=m(gb),Pv=r(gb,"P",{});var kQ=o(Pv);iV=i(kQ,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),kQ.forEach(a),pV=m(gb),b(Hl.$$.fragment,gb),gb.forEach(a),B.forEach(a),Xw=m(s),Fn=r(s,"H2",{class:!0});var g4=o(Fn);Gl=r(g4,"A",{id:!0,class:!0,href:!0});var EQ=o(Gl);Lv=r(EQ,"SPAN",{});var IQ=o(Lv);b(Bm.$$.fragment,IQ),IQ.forEach(a),EQ.forEach(a),cV=m(g4),Av=r(g4,"SPAN",{});var qQ=o(Av);dV=i(qQ,"Features"),qQ.forEach(a),g4.forEach(a),Qw=m(s),z=r(s,"DIV",{class:!0});var V=o(z);b(Hm.$$.fragment,V),mV=m(V),Fv=r(V,"P",{});var TQ=o(Fv);hV=i(TQ,"A special dictionary that defines the internal structure of a dataset."),TQ.forEach(a),fV=m(V),Gm=r(V,"P",{});var _4=o(Gm);uV=i(_4,"Instantiated with a dictionary of type "),Ov=r(_4,"CODE",{});var NQ=o(Ov);gV=i(NQ,"dict[str, FieldType]"),NQ.forEach(a),_V=i(_4,`, where keys are the desired column names,
and values are the type of that column.`),_4.forEach(a),bV=m(V),bg=r(V,"P",{});var MW=o(bg);Sv=r(MW,"CODE",{});var PQ=o(Sv);$V=i(PQ,"FieldType"),PQ.forEach(a),xV=i(MW," can be one of the following:"),MW.forEach(a),vV=m(V),G=r(V,"UL",{});var ce=o(G);Cv=r(ce,"LI",{});var LQ=o(Cv);vs=r(LQ,"P",{});var qf=o(vs);yV=i(qf,"a "),$g=r(qf,"A",{href:!0});var AQ=o($g);jV=i(AQ,"datasets.Value"),AQ.forEach(a),wV=i(qf," feature specifies a single typed value, e.g. "),zv=r(qf,"CODE",{});var FQ=o(zv);DV=i(FQ,"int64"),FQ.forEach(a),kV=i(qf," or "),Vv=r(qf,"CODE",{});var OQ=o(Vv);EV=i(OQ,"string"),OQ.forEach(a),qf.forEach(a),LQ.forEach(a),IV=m(ce),Uv=r(ce,"LI",{});var SQ=o(Uv);Wm=r(SQ,"P",{});var b4=o(Wm);qV=i(b4,"a "),xg=r(b4,"A",{href:!0});var CQ=o(xg);TV=i(CQ,"datasets.ClassLabel"),CQ.forEach(a),NV=i(b4,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),b4.forEach(a),SQ.forEach(a),PV=m(ce),Mv=r(ce,"LI",{});var zQ=o(Mv);Km=r(zQ,"P",{});var $4=o(Km);LV=i($4,"a python "),Rv=r($4,"CODE",{});var VQ=o(Rv);AV=i(VQ,"dict"),VQ.forEach(a),FV=i($4,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),$4.forEach(a),zQ.forEach(a),OV=m(ce),Ym=r(ce,"LI",{});var x4=o(Ym);He=r(x4,"P",{});var Ws=o(He);SV=i(Ws,"a python "),Bv=r(Ws,"CODE",{});var UQ=o(Bv);CV=i(UQ,"list"),UQ.forEach(a),zV=i(Ws," or a "),vg=r(Ws,"A",{href:!0});var MQ=o(vg);VV=i(MQ,"datasets.Sequence"),MQ.forEach(a),UV=i(Ws,` specifies that the field contains a list of objects. The python
`),Hv=r(Ws,"CODE",{});var RQ=o(Hv);MV=i(RQ,"list"),RQ.forEach(a),RV=i(Ws," or "),yg=r(Ws,"A",{href:!0});var BQ=o(yg);BV=i(BQ,"datasets.Sequence"),BQ.forEach(a),HV=i(Ws,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),Ws.forEach(a),GV=m(x4),b(Wl.$$.fragment,x4),x4.forEach(a),WV=m(ce),Gv=r(ce,"LI",{});var HQ=o(Gv);Ge=r(HQ,"P",{});var Ks=o(Ge);KV=i(Ks,"a "),jg=r(Ks,"A",{href:!0});var GQ=o(jg);YV=i(GQ,"Array2D"),GQ.forEach(a),JV=i(Ks,", "),wg=r(Ks,"A",{href:!0});var WQ=o(wg);ZV=i(WQ,"Array3D"),WQ.forEach(a),XV=i(Ks,", "),Dg=r(Ks,"A",{href:!0});var KQ=o(Dg);QV=i(KQ,"Array4D"),KQ.forEach(a),eU=i(Ks," or "),kg=r(Ks,"A",{href:!0});var YQ=o(kg);tU=i(YQ,"Array5D"),YQ.forEach(a),aU=i(Ks," feature for multidimensional arrays"),Ks.forEach(a),HQ.forEach(a),sU=m(ce),Wv=r(ce,"LI",{});var JQ=o(Wv);Jm=r(JQ,"P",{});var v4=o(Jm);nU=i(v4,"an "),Eg=r(v4,"A",{href:!0});var ZQ=o(Eg);rU=i(ZQ,"Audio"),ZQ.forEach(a),oU=i(v4,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),v4.forEach(a),JQ.forEach(a),lU=m(ce),Kv=r(ce,"LI",{});var XQ=o(Kv);Ht=r(XQ,"P",{});var ap=o(Ht);iU=i(ap,"an "),Ig=r(ap,"A",{href:!0});var QQ=o(Ig);pU=i(QQ,"Image"),QQ.forEach(a),cU=i(ap," feature to store the absolute path to an image file, an "),Yv=r(ap,"CODE",{});var eee=o(Yv);dU=i(eee,"np.ndarray"),eee.forEach(a),mU=i(ap," object, a "),Jv=r(ap,"CODE",{});var tee=o(Jv);hU=i(tee,"PIL.Image.Image"),tee.forEach(a),fU=i(ap,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),ap.forEach(a),XQ.forEach(a),uU=m(ce),Zv=r(ce,"LI",{});var aee=o(Zv);Kl=r(aee,"P",{});var Pw=o(Kl);qg=r(Pw,"A",{href:!0});var see=o(qg);gU=i(see,"datasets.Translation"),see.forEach(a),_U=i(Pw," and "),Tg=r(Pw,"A",{href:!0});var nee=o(Tg);bU=i(nee,"datasets.TranslationVariableLanguages"),nee.forEach(a),$U=i(Pw,", the two features specific to Machine Translation"),Pw.forEach(a),aee.forEach(a),ce.forEach(a),xU=m(V),Yl=r(V,"DIV",{class:!0});var y4=o(Yl);b(Zm.$$.fragment,y4),vU=m(y4),Xv=r(y4,"P",{});var ree=o(Xv);yU=i(ree,"Make a deep copy of Features."),ree.forEach(a),y4.forEach(a),jU=m(V),Jl=r(V,"DIV",{class:!0});var j4=o(Jl);b(Xm.$$.fragment,j4),wU=m(j4),Qv=r(j4,"P",{});var oee=o(Qv);DU=i(oee,"Decode batch with custom feature decoding."),oee.forEach(a),j4.forEach(a),kU=m(V),Zl=r(V,"DIV",{class:!0});var w4=o(Zl);b(Qm.$$.fragment,w4),EU=m(w4),ey=r(w4,"P",{});var lee=o(ey);IU=i(lee,"Decode column with custom feature decoding."),lee.forEach(a),w4.forEach(a),qU=m(V),Xl=r(V,"DIV",{class:!0});var D4=o(Xl);b(eh.$$.fragment,D4),TU=m(D4),ty=r(D4,"P",{});var iee=o(ty);NU=i(iee,"Decode example with custom feature decoding."),iee.forEach(a),D4.forEach(a),PU=m(V),Ql=r(V,"DIV",{class:!0});var k4=o(Ql);b(th.$$.fragment,k4),LU=m(k4),ay=r(k4,"P",{});var pee=o(ay);AU=i(pee,"Encode batch into a format for Arrow."),pee.forEach(a),k4.forEach(a),FU=m(V),ei=r(V,"DIV",{class:!0});var E4=o(ei);b(ah.$$.fragment,E4),OU=m(E4),sy=r(E4,"P",{});var cee=o(sy);SU=i(cee,"Encode example into a format for Arrow."),cee.forEach(a),E4.forEach(a),CU=m(V),ys=r(V,"DIV",{class:!0});var _b=o(ys);b(sh.$$.fragment,_b),zU=m(_b),ny=r(_b,"P",{});var dee=o(ny);VU=i(dee,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),dee.forEach(a),UU=m(_b),ry=r(_b,"P",{});var mee=o(ry);MU=i(mee,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),mee.forEach(a),_b.forEach(a),RU=m(V),ti=r(V,"DIV",{class:!0});var I4=o(ti);b(nh.$$.fragment,I4),BU=m(I4),oy=r(I4,"P",{});var hee=o(oy);HU=i(hee,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),hee.forEach(a),I4.forEach(a),GU=m(V),Fe=r(V,"DIV",{class:!0});var Ys=o(Fe);b(rh.$$.fragment,Ys),WU=m(Ys),ly=r(Ys,"P",{});var fee=o(ly);KU=i(fee,"Construct Features from dict."),fee.forEach(a),YU=m(Ys),iy=r(Ys,"P",{});var uee=o(iy);JU=i(uee,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),uee.forEach(a),ZU=m(Ys),Gt=r(Ys,"P",{});var sp=o(Gt);XU=i(sp,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),Ng=r(sp,"A",{href:!0});var gee=o(Ng);QU=i(gee,"DatasetInfo"),gee.forEach(a),eM=i(sp,` that was dumped to a JSON object. This acts as an analogue to
`),Pg=r(sp,"A",{href:!0});var _ee=o(Pg);tM=i(_ee,"Features.from_arrow_schema()"),_ee.forEach(a),aM=i(sp,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),Lg=r(sp,"A",{href:!0});var bee=o(Lg);sM=i(bee,"Value"),bee.forEach(a),nM=i(sp," automatically performs."),sp.forEach(a),rM=m(Ys),b(ai.$$.fragment,Ys),Ys.forEach(a),oM=m(V),ut=r(V,"DIV",{class:!0});var np=o(ut);b(oh.$$.fragment,np),lM=m(np),py=r(np,"P",{});var $ee=o(py);iM=i($ee,"Reorder Features fields to match the field order of other Features."),$ee.forEach(a),pM=m(np),cy=r(np,"P",{});var xee=o(cy);cM=i(xee,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),xee.forEach(a),dM=m(np),b(si.$$.fragment,np),np.forEach(a),V.forEach(a),e7=m(s),On=r(s,"DIV",{class:!0});var q4=o(On);b(lh.$$.fragment,q4),mM=m(q4),dy=r(q4,"P",{});var vee=o(dy);hM=i(vee,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),vee.forEach(a),q4.forEach(a),t7=m(s),Q=r(s,"DIV",{class:!0});var Dt=o(Q);b(ih.$$.fragment,Dt),fM=m(Dt),my=r(Dt,"P",{});var yee=o(my);uM=i(yee,"Feature type for integer class labels."),yee.forEach(a),gM=m(Dt),ph=r(Dt,"P",{});var T4=o(ph);_M=i(T4,"There are 3 ways to define a "),hy=r(T4,"EM",{});var jee=o(hy);bM=i(jee,"ClassLabel"),jee.forEach(a),$M=i(T4,", which correspond to the 3 arguments:"),T4.forEach(a),xM=m(Dt),Sn=r(Dt,"UL",{});var bb=o(Sn);Ag=r(bb,"LI",{});var RW=o(Ag);fy=r(RW,"EM",{});var wee=o(fy);vM=i(wee,"num_classes"),wee.forEach(a),yM=i(RW,": Create 0 to (num_classes-1) labels."),RW.forEach(a),jM=m(bb),Fg=r(bb,"LI",{});var BW=o(Fg);uy=r(BW,"EM",{});var Dee=o(uy);wM=i(Dee,"names"),Dee.forEach(a),DM=i(BW,": List of label strings."),BW.forEach(a),kM=m(bb),Og=r(bb,"LI",{});var HW=o(Og);gy=r(HW,"EM",{});var kee=o(gy);EM=i(kee,"names_file"),kee.forEach(a),IM=i(HW,": File containing the list of labels."),HW.forEach(a),bb.forEach(a),qM=m(Dt),ni=r(Dt,"DIV",{class:!0});var N4=o(ni);b(ch.$$.fragment,N4),TM=m(N4),_y=r(N4,"P",{});var Eee=o(_y);NM=i(Eee,"Conversion integer => class name string."),Eee.forEach(a),N4.forEach(a),PM=m(Dt),ri=r(Dt,"DIV",{class:!0});var P4=o(ri);b(dh.$$.fragment,P4),LM=m(P4),by=r(P4,"P",{});var Iee=o(by);AM=i(Iee,"Conversion class name string => integer."),Iee.forEach(a),P4.forEach(a),Dt.forEach(a),a7=m(s),Wt=r(s,"DIV",{class:!0});var $b=o(Wt);b(mh.$$.fragment,$b),FM=m($b),$y=r($b,"P",{});var qee=o($y);OM=i(qee,"The Value dtypes are as follows:"),qee.forEach(a),SM=m($b),xy=r($b,"P",{});var Tee=o(xy);CM=i(Tee,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),Tee.forEach(a),$b.forEach(a),s7=m(s),ee=r(s,"DIV",{class:!0});var kt=o(ee);b(hh.$$.fragment,kt),zM=m(kt),Sg=r(kt,"P",{});var GW=o(Sg);vy=r(GW,"CODE",{});var Nee=o(vy);VM=i(Nee,"FeatureConnector"),Nee.forEach(a),UM=i(GW,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),GW.forEach(a),MM=m(kt),yy=r(kt,"P",{});var Pee=o(yy);RM=i(Pee,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),Pee.forEach(a),BM=m(kt),fh=r(kt,"P",{});var L4=o(fh);HM=i(L4,"Output: A dictionary mapping string language codes to translations as "),jy=r(L4,"CODE",{});var Lee=o(jy);GM=i(Lee,"Text"),Lee.forEach(a),WM=i(L4,`
features.`),L4.forEach(a),KM=m(kt),b(oi.$$.fragment,kt),YM=m(kt),li=r(kt,"DIV",{class:!0});var A4=o(li);b(uh.$$.fragment,A4),JM=m(A4),wy=r(A4,"P",{});var Aee=o(wy);ZM=i(Aee,"Flatten the Translation feature into a dictionary."),Aee.forEach(a),A4.forEach(a),kt.forEach(a),n7=m(s),te=r(s,"DIV",{class:!0});var Et=o(te);b(gh.$$.fragment,Et),XM=m(Et),Cg=r(Et,"P",{});var WW=o(Cg);Dy=r(WW,"CODE",{});var Fee=o(Dy);QM=i(Fee,"FeatureConnector"),Fee.forEach(a),eR=i(WW,` for translations with variable languages per example.
Here for compatiblity with tfds.`),WW.forEach(a),tR=m(Et),ky=r(Et,"P",{});var Oee=o(ky);aR=i(Oee,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),Oee.forEach(a),sR=m(Et),Ey=r(Et,"P",{});var See=o(Ey);nR=i(See,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),See.forEach(a),rR=m(Et),b(ii.$$.fragment,Et),oR=m(Et),pi=r(Et,"DIV",{class:!0});var F4=o(pi);b(_h.$$.fragment,F4),lR=m(F4),Iy=r(F4,"P",{});var Cee=o(Iy);iR=i(Cee,"Flatten the TranslationVariableLanguages feature into a dictionary."),Cee.forEach(a),F4.forEach(a),Et.forEach(a),r7=m(s),bh=r(s,"DIV",{class:!0});var zee=o(bh);b($h.$$.fragment,zee),zee.forEach(a),o7=m(s),xh=r(s,"DIV",{class:!0});var Vee=o(xh);b(vh.$$.fragment,Vee),Vee.forEach(a),l7=m(s),yh=r(s,"DIV",{class:!0});var Uee=o(yh);b(jh.$$.fragment,Uee),Uee.forEach(a),i7=m(s),wh=r(s,"DIV",{class:!0});var Mee=o(wh);b(Dh.$$.fragment,Mee),Mee.forEach(a),p7=m(s),M=r(s,"DIV",{class:!0});var Y=o(M);b(kh.$$.fragment,Y),pR=m(Y),qy=r(Y,"P",{});var Ree=o(qy);cR=i(Ree,"Audio Feature to extract audio data from an audio file."),Ree.forEach(a),dR=m(Y),Ty=r(Y,"P",{});var Bee=o(Ty);mR=i(Bee,"Input: The Audio feature accepts as input:"),Bee.forEach(a),hR=m(Y),Cn=r(Y,"UL",{});var xb=o(Cn);Ny=r(xb,"LI",{});var Hee=o(Ny);Eh=r(Hee,"P",{});var O4=o(Eh);fR=i(O4,"A "),Py=r(O4,"CODE",{});var Gee=o(Py);uR=i(Gee,"str"),Gee.forEach(a),gR=i(O4,": Absolute path to the audio file (i.e. random access is allowed)."),O4.forEach(a),Hee.forEach(a),_R=m(xb),zn=r(xb,"LI",{});var vb=o(zn);Ih=r(vb,"P",{});var S4=o(Ih);bR=i(S4,"A "),Ly=r(S4,"CODE",{});var Wee=o(Ly);$R=i(Wee,"dict"),Wee.forEach(a),xR=i(S4," with the keys:"),S4.forEach(a),vR=m(vb),qh=r(vb,"UL",{});var C4=o(qh);Ay=r(C4,"LI",{});var Kee=o(Ay);yR=i(Kee,"path: String with relative path of the audio file to the archive file."),Kee.forEach(a),jR=m(C4),Fy=r(C4,"LI",{});var Yee=o(Fy);wR=i(Yee,"bytes: Bytes content of the audio file."),Yee.forEach(a),C4.forEach(a),DR=m(vb),Oy=r(vb,"P",{});var Jee=o(Oy);kR=i(Jee,"This is useful for archived files with sequential access."),Jee.forEach(a),vb.forEach(a),ER=m(xb),Vn=r(xb,"LI",{});var yb=o(Vn);Th=r(yb,"P",{});var z4=o(Th);IR=i(z4,"A "),Sy=r(z4,"CODE",{});var Zee=o(Sy);qR=i(Zee,"dict"),Zee.forEach(a),TR=i(z4," with the keys:"),z4.forEach(a),NR=m(yb),Un=r(yb,"UL",{});var jb=o(Un);Cy=r(jb,"LI",{});var Xee=o(Cy);PR=i(Xee,"path: String with relative path of the audio file to the archive file."),Xee.forEach(a),LR=m(jb),zy=r(jb,"LI",{});var Qee=o(zy);AR=i(Qee,"array: Array containing the audio sample"),Qee.forEach(a),FR=m(jb),Vy=r(jb,"LI",{});var ete=o(Vy);OR=i(ete,"sampling_rate: Integer corresponding to the samping rate of the audio sample."),ete.forEach(a),jb.forEach(a),SR=m(yb),Uy=r(yb,"P",{});var tte=o(Uy);CR=i(tte,"This is useful for archived files with sequential access."),tte.forEach(a),yb.forEach(a),xb.forEach(a),zR=m(Y),js=r(Y,"DIV",{class:!0});var wb=o(js);b(Nh.$$.fragment,wb),VR=m(wb),My=r(wb,"P",{});var ate=o(My);UR=i(ate,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),ate.forEach(a),MR=m(wb),Kt=r(wb,"UL",{});var rp=o(Kt);Ry=r(rp,"LI",{});var ste=o(Ry);RR=i(ste,"pa.string() - it must contain the \u201Cpath\u201D data"),ste.forEach(a),BR=m(rp),By=r(rp,"LI",{});var nte=o(By);HR=i(nte,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),nte.forEach(a),GR=m(rp),Hy=r(rp,"LI",{});var rte=o(Hy);WR=i(rte,"pa.struct({\u201Cpath\u201D: pa.string()})"),rte.forEach(a),KR=m(rp),Gy=r(rp,"LI",{});var ote=o(Gy);YR=i(ote,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),ote.forEach(a),rp.forEach(a),wb.forEach(a),JR=m(Y),ci=r(Y,"DIV",{class:!0});var V4=o(ci);b(Ph.$$.fragment,V4),ZR=m(V4),Wy=r(V4,"P",{});var lte=o(Wy);XR=i(lte,"Decode example audio file into audio data."),lte.forEach(a),V4.forEach(a),QR=m(Y),di=r(Y,"DIV",{class:!0});var U4=o(di);b(Lh.$$.fragment,U4),eB=m(U4),Ky=r(U4,"P",{});var ite=o(Ky);tB=i(ite,"Embed audio files into the Arrow array."),ite.forEach(a),U4.forEach(a),aB=m(Y),mi=r(Y,"DIV",{class:!0});var M4=o(mi);b(Ah.$$.fragment,M4),sB=m(M4),Yy=r(M4,"P",{});var pte=o(Yy);nB=i(pte,"Encode example into a format for Arrow."),pte.forEach(a),M4.forEach(a),rB=m(Y),hi=r(Y,"DIV",{class:!0});var R4=o(hi);b(Fh.$$.fragment,R4),oB=m(R4),Jy=r(R4,"P",{});var cte=o(Jy);lB=i(cte,"If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),cte.forEach(a),R4.forEach(a),Y.forEach(a),c7=m(s),R=r(s,"DIV",{class:!0});var J=o(R);b(Oh.$$.fragment,J),iB=m(J),Zy=r(J,"P",{});var dte=o(Zy);pB=i(dte,"Image feature to read image data from an image file."),dte.forEach(a),cB=m(J),Xy=r(J,"P",{});var mte=o(Xy);dB=i(mte,"Input: The Image feature accepts as input:"),mte.forEach(a),mB=m(J),Yt=r(J,"UL",{});var op=o(Yt);Qy=r(op,"LI",{});var hte=o(Qy);Sh=r(hte,"P",{});var B4=o(Sh);hB=i(B4,"A "),ej=r(B4,"CODE",{});var fte=o(ej);fB=i(fte,"str"),fte.forEach(a),uB=i(B4,": Absolute path to the image file (i.e. random access is allowed)."),B4.forEach(a),hte.forEach(a),gB=m(op),Mn=r(op,"LI",{});var Db=o(Mn);Ch=r(Db,"P",{});var H4=o(Ch);_B=i(H4,"A "),tj=r(H4,"CODE",{});var ute=o(tj);bB=i(ute,"dict"),ute.forEach(a),$B=i(H4," with the keys:"),H4.forEach(a),xB=m(Db),zh=r(Db,"UL",{});var G4=o(zh);aj=r(G4,"LI",{});var gte=o(aj);vB=i(gte,"path: String with relative path of the image file to the archive file."),gte.forEach(a),yB=m(G4),sj=r(G4,"LI",{});var _te=o(sj);jB=i(_te,"bytes: Bytes of the image file."),_te.forEach(a),G4.forEach(a),wB=m(Db),nj=r(Db,"P",{});var bte=o(nj);DB=i(bte,"This is useful for archived files with sequential access."),bte.forEach(a),Db.forEach(a),kB=m(op),rj=r(op,"LI",{});var $te=o(rj);Vh=r($te,"P",{});var W4=o(Vh);EB=i(W4,"An "),oj=r(W4,"CODE",{});var xte=o(oj);IB=i(xte,"np.ndarray"),xte.forEach(a),qB=i(W4,": NumPy array representing an image."),W4.forEach(a),$te.forEach(a),TB=m(op),lj=r(op,"LI",{});var vte=o(lj);Uh=r(vte,"P",{});var K4=o(Uh);NB=i(K4,"A "),ij=r(K4,"CODE",{});var yte=o(ij);PB=i(yte,"PIL.Image.Image"),yte.forEach(a),LB=i(K4,": PIL image object."),K4.forEach(a),vte.forEach(a),op.forEach(a),AB=m(J),ws=r(J,"DIV",{class:!0});var kb=o(ws);b(Mh.$$.fragment,kb),FB=m(kb),pj=r(kb,"P",{});var jte=o(pj);OB=i(jte,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),jte.forEach(a),SB=m(kb),We=r(kb,"UL",{});var Js=o(We);cj=r(Js,"LI",{});var wte=o(cj);CB=i(wte,"pa.string() - it must contain the \u201Cpath\u201D data"),wte.forEach(a),zB=m(Js),dj=r(Js,"LI",{});var Dte=o(dj);VB=i(Dte,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),Dte.forEach(a),UB=m(Js),mj=r(Js,"LI",{});var kte=o(mj);MB=i(kte,"pa.struct({\u201Cpath\u201D: pa.string()})"),kte.forEach(a),RB=m(Js),hj=r(Js,"LI",{});var Ete=o(hj);BB=i(Ete,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),Ete.forEach(a),HB=m(Js),fj=r(Js,"LI",{});var Ite=o(fj);GB=i(Ite,"pa.list(*) - it must contain the image array data"),Ite.forEach(a),Js.forEach(a),kb.forEach(a),WB=m(J),fi=r(J,"DIV",{class:!0});var Y4=o(fi);b(Rh.$$.fragment,Y4),KB=m(Y4),uj=r(Y4,"P",{});var qte=o(uj);YB=i(qte,"Decode example image file into image data."),qte.forEach(a),Y4.forEach(a),JB=m(J),ui=r(J,"DIV",{class:!0});var J4=o(ui);b(Bh.$$.fragment,J4),ZB=m(J4),gj=r(J4,"P",{});var Tte=o(gj);XB=i(Tte,"Embed image files into the Arrow array."),Tte.forEach(a),J4.forEach(a),QB=m(J),gi=r(J,"DIV",{class:!0});var Z4=o(gi);b(Hh.$$.fragment,Z4),eH=m(Z4),_j=r(Z4,"P",{});var Nte=o(_j);tH=i(Nte,"Encode example into a format for Arrow."),Nte.forEach(a),Z4.forEach(a),aH=m(J),_i=r(J,"DIV",{class:!0});var X4=o(_i);b(Gh.$$.fragment,X4),sH=m(X4),bj=r(X4,"P",{});var Pte=o(bj);nH=i(Pte,"If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),Pte.forEach(a),X4.forEach(a),J.forEach(a),d7=m(s),Rn=r(s,"H2",{class:!0});var Q4=o(Rn);bi=r(Q4,"A",{id:!0,class:!0,href:!0});var Lte=o(bi);$j=r(Lte,"SPAN",{});var Ate=o($j);b(Wh.$$.fragment,Ate),Ate.forEach(a),Lte.forEach(a),rH=m(Q4),xj=r(Q4,"SPAN",{});var Fte=o(xj);oH=i(Fte,"MetricInfo"),Fte.forEach(a),Q4.forEach(a),m7=m(s),ae=r(s,"DIV",{class:!0});var It=o(ae);b(Kh.$$.fragment,It),lH=m(It),vj=r(It,"P",{});var Ote=o(vj);iH=i(Ote,"Information about a metric."),Ote.forEach(a),pH=m(It),zg=r(It,"P",{});var KW=o(zg);yj=r(KW,"CODE",{});var Ste=o(yj);cH=i(Ste,"MetricInfo"),Ste.forEach(a),dH=i(KW,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),KW.forEach(a),mH=m(It),jj=r(It,"P",{});var Cte=o(jj);hH=i(Cte,"Note: Not all fields are known on construction and may be updated later."),Cte.forEach(a),fH=m(It),$i=r(It,"DIV",{class:!0});var eD=o($i);b(Yh.$$.fragment,eD),uH=m(eD),Jh=r(eD,"P",{});var tD=o(Jh);gH=i(tD,"Create MetricInfo from the JSON file in "),wj=r(tD,"CODE",{});var zte=o(wj);_H=i(zte,"metric_info_dir"),zte.forEach(a),bH=i(tD,"."),tD.forEach(a),eD.forEach(a),$H=m(It),xi=r(It,"DIV",{class:!0});var aD=o(xi);b(Zh.$$.fragment,aD),xH=m(aD),Jt=r(aD,"P",{});var lp=o(Jt);vH=i(lp,"Write "),Dj=r(lp,"CODE",{});var Vte=o(Dj);yH=i(Vte,"MetricInfo"),Vte.forEach(a),jH=i(lp," as JSON to "),kj=r(lp,"CODE",{});var Ute=o(kj);wH=i(Ute,"metric_info_dir"),Ute.forEach(a),DH=i(lp,`.
Also save the license separately in LICENCE.
If `),Ej=r(lp,"CODE",{});var Mte=o(Ej);kH=i(Mte,"pretty_print"),Mte.forEach(a),EH=i(lp," is True, the JSON will be pretty-printed with the indent level of 4."),lp.forEach(a),aD.forEach(a),It.forEach(a),h7=m(s),Bn=r(s,"H2",{class:!0});var sD=o(Bn);vi=r(sD,"A",{id:!0,class:!0,href:!0});var Rte=o(vi);Ij=r(Rte,"SPAN",{});var Bte=o(Ij);b(Xh.$$.fragment,Bte),Bte.forEach(a),Rte.forEach(a),IH=m(sD),qj=r(sD,"SPAN",{});var Hte=o(qj);qH=i(Hte,"Metric"),Hte.forEach(a),sD.forEach(a),f7=m(s),Ds=r(s,"P",{});var Eb=o(Ds);TH=i(Eb,"The base class "),Tj=r(Eb,"CODE",{});var Gte=o(Tj);NH=i(Gte,"Metric"),Gte.forEach(a),PH=i(Eb," implements a Metric backed by one or several "),Vg=r(Eb,"A",{href:!0});var Wte=o(Vg);LH=i(Wte,"Dataset"),Wte.forEach(a),AH=i(Eb,"."),Eb.forEach(a),u7=m(s),se=r(s,"DIV",{class:!0});var qt=o(se);b(Qh.$$.fragment,qt),FH=m(qt),Nj=r(qt,"P",{});var Kte=o(Nj);OH=i(Kte,"A Metric is the base class and common API for all metrics."),Kte.forEach(a),SH=m(qt),yi=r(qt,"DIV",{class:!0});var nD=o(yi);b(ef.$$.fragment,nD),CH=m(nD),Pj=r(nD,"P",{});var Yte=o(Pj);zH=i(Yte,"Add one prediction and reference for the metric\u2019s stack."),Yte.forEach(a),nD.forEach(a),VH=m(qt),ji=r(qt,"DIV",{class:!0});var rD=o(ji);b(tf.$$.fragment,rD),UH=m(rD),Lj=r(rD,"P",{});var Jte=o(Lj);MH=i(Jte,"Add a batch of predictions and references for the metric\u2019s stack."),Jte.forEach(a),rD.forEach(a),RH=m(qt),ks=r(qt,"DIV",{class:!0});var Ib=o(ks);b(af.$$.fragment,Ib),BH=m(Ib),Aj=r(Ib,"P",{});var Zte=o(Aj);HH=i(Zte,"Compute the metrics."),Zte.forEach(a),GH=m(Ib),Fj=r(Ib,"P",{});var Xte=o(Fj);WH=i(Xte,"Usage of positional arguments is not allowed to prevent mistakes."),Xte.forEach(a),Ib.forEach(a),KH=m(qt),wi=r(qt,"DIV",{class:!0});var oD=o(wi);b(sf.$$.fragment,oD),YH=m(oD),Oj=r(oD,"P",{});var Qte=o(Oj);JH=i(Qte,"Downloads and prepares dataset for reading."),Qte.forEach(a),oD.forEach(a),qt.forEach(a),g7=m(s),Hn=r(s,"H2",{class:!0});var lD=o(Hn);Di=r(lD,"A",{id:!0,class:!0,href:!0});var eae=o(Di);Sj=r(eae,"SPAN",{});var tae=o(Sj);b(nf.$$.fragment,tae),tae.forEach(a),eae.forEach(a),ZH=m(lD),Cj=r(lD,"SPAN",{});var aae=o(Cj);XH=i(aae,"Filesystems"),aae.forEach(a),lD.forEach(a),_7=m(s),S=r(s,"DIV",{class:!0});var C=o(S);b(rf.$$.fragment,C),QH=m(C),zj=r(C,"P",{});var sae=o(zj);eG=i(sae,"Access S3 as if it were a file system."),sae.forEach(a),tG=m(C),Vj=r(C,"P",{});var nae=o(Vj);aG=i(nae,`This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3
storage.`),nae.forEach(a),sG=m(C),Zt=r(C,"P",{});var ip=o(Zt);nG=i(ip,"Provide credentials either explicitly ("),Uj=r(ip,"CODE",{});var rae=o(Uj);rG=i(rae,"key="),rae.forEach(a),oG=i(ip,", "),Mj=r(ip,"CODE",{});var oae=o(Mj);lG=i(oae,"secret="),oae.forEach(a),iG=i(ip,`) or depend
on boto\u2019s credential methods. See botocore documentation for more
information. If no credentials are available, use `),Rj=r(ip,"CODE",{});var lae=o(Rj);pG=i(lae,"anon=True"),lae.forEach(a),cG=i(ip,"."),ip.forEach(a),dG=m(C),Bj=r(C,"P",{});var iae=o(Bj);mG=i(iae,"The following parameters are passed on to fsspec:"),iae.forEach(a),hG=m(C),Hj=r(C,"P",{});var pae=o(Hj);fG=i(pae,`skip_instance_cache: to control reuse of instances
use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings`),pae.forEach(a),uG=m(C),Gj=r(C,"P",{});var cae=o(Gj);gG=i(cae,"."),cae.forEach(a),_G=m(C),gt=r(C,"P",{});var br=o(gt);Wj=r(br,"CODE",{});var dae=o(Wj);bG=i(dae,"datasets.filesystems.S3FileSystem"),dae.forEach(a),$G=i(br," is a subclass of s3fs.S3FileSystem]("),of=r(br,"A",{href:!0,rel:!0});var mae=o(of);xG=i(mae,"https://s3fs.readthedocs.io/en/latest/api.html"),mae.forEach(a),vG=i(br,`), which is a known
implementation of `),Kj=r(br,"CODE",{});var hae=o(Kj);yG=i(hae,"fsspec"),hae.forEach(a),jG=i(br,". Filesystem Spec "),lf=r(br,"A",{href:!0,rel:!0});var fae=o(lf);wG=i(fae,"FSSPEC"),fae.forEach(a),DG=i(br,` is a project to
unify various projects and classes to work with remote filesystems
and file-system-like abstractions using a standard pythonic interface.`),br.forEach(a),kG=m(C),Yj=r(C,"P",{});var uae=o(Yj);EG=i(uae,"Examples:"),uae.forEach(a),IG=m(C),Jj=r(C,"P",{});var gae=o(Jj);qG=i(gae,"Listing files from public s3 bucket."),gae.forEach(a),TG=m(C),b(ki.$$.fragment,C),NG=m(C),Gn=r(C,"P",{});var qb=o(Gn);PG=i(qb,"Listing files from private s3 bucket using "),Zj=r(qb,"CODE",{});var _ae=o(Zj);LG=i(_ae,"aws_access_key_id"),_ae.forEach(a),AG=i(qb," and "),Xj=r(qb,"CODE",{});var bae=o(Xj);FG=i(bae,"aws_secret_access_key"),bae.forEach(a),OG=i(qb,"."),qb.forEach(a),SG=m(C),b(Ei.$$.fragment,C),CG=m(C),Xt=r(C,"P",{});var pp=o(Xt);zG=i(pp,"Using "),Qj=r(pp,"CODE",{});var $ae=o(Qj);VG=i($ae,"S3Filesystem"),$ae.forEach(a),UG=i(pp," with "),e0=r(pp,"CODE",{});var xae=o(e0);MG=i(xae,"botocore.session.Session"),xae.forEach(a),RG=i(pp," and custom "),t0=r(pp,"CODE",{});var vae=o(t0);BG=i(vae,"aws_profile"),vae.forEach(a),HG=i(pp,"."),pp.forEach(a),GG=m(C),b(Ii.$$.fragment,C),WG=m(C),Wn=r(C,"P",{});var Tb=o(Wn);KG=i(Tb,"Loading dataset from s3 using "),a0=r(Tb,"CODE",{});var yae=o(a0);YG=i(yae,"S3Filesystem"),yae.forEach(a),JG=i(Tb," and "),s0=r(Tb,"CODE",{});var jae=o(s0);ZG=i(jae,"load_from_disk()"),jae.forEach(a),XG=i(Tb,"."),Tb.forEach(a),QG=m(C),b(qi.$$.fragment,C),eW=m(C),n0=r(C,"P",{});var wae=o(n0);tW=i(wae,"Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>."),wae.forEach(a),aW=m(C),b(Ti.$$.fragment,C),sW=m(C),Ni=r(C,"H2",{class:!0});var iD=o(Ni);Pi=r(iD,"A",{id:!0,class:!0,href:!0});var Dae=o(Pi);r0=r(Dae,"SPAN",{});var kae=o(r0);b(pf.$$.fragment,kae),kae.forEach(a),Dae.forEach(a),nW=m(iD),o0=r(iD,"SPAN",{});var Eae=o(o0);rW=i(Eae,"Parameters"),Eae.forEach(a),iD.forEach(a),oW=m(C),W=r(C,"P",{});var de=o(W);lW=i(de,`anon : bool (False)
Whether to use anonymous connection (public buckets only). If False,
uses the key/secret given, or boto\u2019s credential resolver (client_kwargs,
environment, variables, config files, EC2 IAM server, in that order)
key : string (None)
If not anonymous, use this access key ID, if specified
secret : string (None)
If not anonymous, use this secret access key, if specified
token : string (None)
If not anonymous, use this security token, if specified
use_ssl : bool (True)
Whether to use SSL in connections to S3; may be faster without, but
insecure. If `),l0=r(de,"CODE",{});var Iae=o(l0);iW=i(Iae,"use_ssl"),Iae.forEach(a),pW=i(de," is also set in "),i0=r(de,"CODE",{});var qae=o(i0);cW=i(qae,"client_kwargs"),qae.forEach(a),dW=i(de,`,
the value set in `),p0=r(de,"CODE",{});var Tae=o(p0);mW=i(Tae,"client_kwargs"),Tae.forEach(a),hW=i(de,` will take priority.
s3_additional_kwargs : dict of parameters that are used when calling s3 api
methods. Typically used for things like \u201CServerSideEncryption\u201D.
client_kwargs : dict of parameters for the botocore client
requester_pays : bool (False)
If RequesterPays buckets are supported.
default_block_size: int (None)
If given, the default block size value used for `),c0=r(de,"CODE",{});var Nae=o(c0);fW=i(Nae,"open()"),Nae.forEach(a),uW=i(de,`, if no
specific value is given at all time. The built-in default is 5MB.
default_fill_cache : Bool (True)
Whether to use cache filling with open by default. Refer to
`),d0=r(de,"CODE",{});var Pae=o(d0);gW=i(Pae,"S3File.open"),Pae.forEach(a),_W=i(de,`.
default_cache_type : string (\u2018bytes\u2019)
If given, the default cache_type value used for `),m0=r(de,"CODE",{});var Lae=o(m0);bW=i(Lae,"open()"),Lae.forEach(a),$W=i(de,`. Set to \u201Cnone\u201D
if no caching is desired. See fsspec\u2019s documentation for other available
cache_type values. Default cache_type is \u2018bytes\u2019.
version_aware : bool (False)
Whether to support bucket versioning.  If enable this will require the
user to have the necessary IAM permissions for dealing with versioned
objects.
cache_regions : bool (False)
Whether to cache bucket regions or not. Whenever a new bucket is used,
it will first find out which region it belongs and then use the client
for that region.
config_kwargs : dict of parameters passed to `),h0=r(de,"CODE",{});var Aae=o(h0);xW=i(Aae,"botocore.client.Config"),Aae.forEach(a),vW=i(de,`
kwargs : other parameters for core session
session : aiobotocore AioSession object to be used for all connections.
This session will be used inplace of creating a new session inside S3FileSystem.
For example: aiobotocore.session.AioSession(profile=\u2018test_user\u2019)`),de.forEach(a),C.forEach(a),b7=m(s),Kn=r(s,"DIV",{class:!0});var pD=o(Kn);b(cf.$$.fragment,pD),yW=m(pD),Yn=r(pD,"P",{});var Nb=o(Yn);jW=i(Nb,"preprocesses "),f0=r(Nb,"EM",{});var Fae=o(f0);wW=i(Fae,"dataset_path"),Fae.forEach(a),DW=i(Nb," and removes remote filesystem (e.g. removing "),u0=r(Nb,"CODE",{});var Oae=o(u0);kW=i(Oae,"s3://"),Oae.forEach(a),EW=i(Nb,")"),Nb.forEach(a),pD.forEach(a),$7=m(s),Jn=r(s,"DIV",{class:!0});var cD=o(Jn);b(df.$$.fragment,cD),IW=m(cD),g0=r(cD,"P",{});var Sae=o(g0);qW=i(Sae,"Validates if filesystem has remote protocol."),Sae.forEach(a),cD.forEach(a),x7=m(s),Zn=r(s,"H2",{class:!0});var dD=o(Zn);Li=r(dD,"A",{id:!0,class:!0,href:!0});var Cae=o(Li);_0=r(Cae,"SPAN",{});var zae=o(_0);b(mf.$$.fragment,zae),zae.forEach(a),Cae.forEach(a),TW=m(dD),b0=r(dD,"SPAN",{});var Vae=o(b0);NW=i(Vae,"Fingerprint"),Vae.forEach(a),dD.forEach(a),v7=m(s),Xn=r(s,"DIV",{class:!0});var mD=o(Xn);b(hf.$$.fragment,mD),PW=m(mD),$0=r(mD,"P",{});var Uae=o($0);LW=i(Uae,"Hasher that accepts python objects as inputs."),Uae.forEach(a),mD.forEach(a),this.h()},h(){j(c,"name","hf:doc:metadata"),j(c,"content",JSON.stringify(ere)),j(p,"id","main-classes"),j(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(p,"href","#main-classes"),j(f,"class","relative group"),j($e,"id","datasets.DatasetInfo"),j($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j($e,"href","#datasets.DatasetInfo"),j(Se,"class","relative group"),j(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(jr,"id","datasets.Dataset"),j(jr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(jr,"href","#datasets.Dataset"),j(Qs,"class","relative group"),j(Pf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"),j(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Lf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"),j(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Af,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"),j(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ar,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.__len__"),j(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ff,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.map"),j(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Of,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.set_format"),j(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Sf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.set_transform"),j(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Cf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.set_format"),j(zf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.reset_format"),j(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Uf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.with_transform"),j(Mf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.set_format"),j(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Rf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.set_format"),j(Bf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.reset_format"),j(Hf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.set_transform"),j(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Gf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Image"),j(Wf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Audio"),j(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Kf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),j(Yf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Image"),j(Jf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Audio"),j(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Zf,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),j(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(yc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),j(yc,"rel","nofollow"),j(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(wc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),j(wc,"rel","nofollow"),j(Pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(La,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(tu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetInfo"),j(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(su,"href","/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.NamedSplit"),j(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(nu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ru,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ou,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(lu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(iu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(cu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(du,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(mu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(hu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(uu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(gu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_u,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features"),j(bu,"href","/docs/datasets/package_reference/task_templates"),j(Va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j($u,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"),j(xu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"),j(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(vu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"),j(yu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDataset"),j(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ju,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),j(wu,"href","/docs/datasets/pr_4125/en/package_reference/loading_methods#datasets.load_dataset"),j(Du,"href","/docs/datasets/pr_4125/en/package_reference/loading_methods#datasets.load_dataset"),j(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ku,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),j(Eu,"href","/docs/datasets/pr_4125/en/package_reference/loading_methods#datasets.load_dataset"),j(Iu,"href","/docs/datasets/pr_4125/en/package_reference/loading_methods#datasets.load_dataset"),j(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(qu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),j(Tu,"href","/docs/datasets/pr_4125/en/package_reference/loading_methods#datasets.load_dataset"),j(Nu,"href","/docs/datasets/pr_4125/en/package_reference/loading_methods#datasets.load_dataset"),j(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Uo,"id","datasets.DatasetDict"),j(Uo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Uo,"href","#datasets.DatasetDict"),j(gn,"class","relative group"),j(Ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Go,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.__len__"),j(Ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(nl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Lu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.with_transform"),j(Au,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetDict.set_format"),j(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Fu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.set_format"),j(Ou,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.reset_format"),j(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Su,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.map"),j(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Cu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.map"),j(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(zu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset.map"),j(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Vu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Image"),j(Uu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Audio"),j(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Mu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),j(Ru,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Image"),j(Bu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Audio"),j(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Hu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),j(ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(as,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ns,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(rs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Gu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features"),j(Wu,"href","/docs/datasets/package_reference/task_templates"),j(os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ku,"id","package_reference_features"),j(yl,"id","datasets.IterableDataset"),j(yl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(yl,"href","#datasets.IterableDataset"),j(qn,"class","relative group"),j(Yu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDataset"),j(ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ps,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ju,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Zu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDataset.skip"),j(Xu,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDataset.take"),j(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(eg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetInfo"),j(Ll,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ag,"href","/docs/datasets/pr_4125/en/package_reference/builder_classes#datasets.NamedSplit"),j(Al,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(sg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(rg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(lg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(mg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(hg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Fl,"id","datasets.IterableDatasetDict"),j(Fl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Fl,"href","#datasets.IterableDatasetDict"),j(Pn,"class","relative group"),j(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(gg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDataset.skip"),j(_g,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.IterableDataset.take"),j(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Gl,"id","datasets.Features"),j(Gl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Gl,"href","#datasets.Features"),j(Fn,"class","relative group"),j($g,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Value"),j(xg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.ClassLabel"),j(vg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Sequence"),j(yg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Sequence"),j(jg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Array2D"),j(wg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Array3D"),j(Dg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Array4D"),j(kg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Array5D"),j(Eg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Audio"),j(Ig,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Image"),j(qg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Translation"),j(Tg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),j(Yl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Jl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Zl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Xl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ql,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ei,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ti,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ng,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.DatasetInfo"),j(Pg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),j(Lg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Value"),j(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(On,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ni,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ri,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(li,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(wh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(di,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(mi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(hi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ui,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(gi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_i,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(bi,"id","datasets.MetricInfo"),j(bi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(bi,"href","#datasets.MetricInfo"),j(Rn,"class","relative group"),j($i,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(vi,"id","datasets.Metric"),j(vi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(vi,"href","#datasets.Metric"),j(Bn,"class","relative group"),j(Vg,"href","/docs/datasets/pr_4125/en/package_reference/main_classes#datasets.Dataset"),j(yi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ji,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(wi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Di,"id","datasets.filesystems.S3FileSystem"),j(Di,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Di,"href","#datasets.filesystems.S3FileSystem"),j(Hn,"class","relative group"),j(of,"href","https://s3fs.readthedocs.io/en/latest/api.html"),j(of,"rel","nofollow"),j(lf,"href","https://filesystem-spec.readthedocs.io/en/latest/?badge=latest"),j(lf,"rel","nofollow"),j(Pi,"id","parameters"),j(Pi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Pi,"href","#parameters"),j(Ni,"class","relative group"),j(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Kn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Jn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Li,"id","datasets.fingerprint.Hasher"),j(Li,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Li,"href","#datasets.fingerprint.Hasher"),j(Zn,"class","relative group"),j(Xn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(s,w){e(document.head,c),D(s,g,w),D(s,f,w),e(f,p),e(p,u),$(t,u,null),e(f,h),e(f,Zs),e(Zs,ra),D(s,$r,w),D(s,Se,w),e(Se,$e),e($e,ne),$(oa,ne,null),e(Se,Tf),e(Se,xr),e(xr,hD),D(s,Lw,w),D(s,Z,w),$(cp,Z,null),e(Z,fD),e(Z,Pb),e(Pb,uD),e(Z,gD),e(Z,Nf),e(Nf,Lb),e(Lb,_D),e(Nf,bD),e(Z,$D),e(Z,Ab),e(Ab,xD),e(Z,vD),e(Z,xe),$(dp,xe,null),e(xe,yD),e(xe,mp),e(mp,jD),e(mp,Fb),e(Fb,wD),e(mp,DD),e(xe,kD),e(xe,Ob),e(Ob,ED),e(xe,ID),e(xe,Sb),e(Sb,qD),e(xe,TD),$(vr,xe,null),e(Z,ND),e(Z,la),$(hp,la,null),e(la,PD),e(la,Xs),e(Xs,LD),e(Xs,Cb),e(Cb,AD),e(Xs,FD),e(Xs,zb),e(zb,OD),e(Xs,SD),e(la,CD),$(yr,la,null),D(s,Aw,w),D(s,Qs,w),e(Qs,jr),e(jr,Vb),$(fp,Vb,null),e(Qs,zD),e(Qs,Ub),e(Ub,VD),D(s,Fw,w),D(s,wr,w),e(wr,UD),e(wr,Pf),e(Pf,MD),e(wr,RD),D(s,Ow,w),D(s,I,w),$(up,I,null),e(I,BD),e(I,Mb),e(Mb,HD),e(I,GD),e(I,Qe),$(gp,Qe,null),e(Qe,WD),e(Qe,Rb),e(Rb,KD),e(Qe,YD),e(Qe,Bb),e(Bb,Hb),e(Hb,JD),e(Qe,ZD),$(Dr,Qe,null),e(I,XD),e(I,et),$(_p,et,null),e(et,QD),e(et,Gb),e(Gb,ek),e(et,tk),e(et,Wb),e(Wb,Kb),e(Kb,ak),e(et,sk),$(kr,et,null),e(I,nk),e(I,Er),$(bp,Er,null),e(Er,rk),e(Er,Yb),e(Yb,ok),e(I,lk),e(I,Ir),$($p,Ir,null),e(Ir,ik),e(Ir,Jb),e(Jb,pk),e(I,ck),e(I,ve),$(xp,ve,null),e(ve,dk),e(ve,Nt),e(Nt,mk),e(Nt,Zb),e(Zb,hk),e(Nt,fk),e(Nt,Xb),e(Xb,uk),e(Nt,gk),e(Nt,Lf),e(Lf,_k),e(Nt,bk),e(ve,$k),e(ve,vp),e(vp,xk),e(vp,Qb),e(Qb,vk),e(vp,yk),e(ve,jk),e(ve,yp),e(yp,wk),e(yp,e2),e(e2,Dk),e(yp,kk),e(ve,Ek),$(qr,ve,null),e(I,Ik),e(I,Tr),$(jp,Tr,null),e(Tr,qk),e(Tr,Pt),e(Pt,Tk),e(Pt,t2),e(t2,Nk),e(Pt,Pk),e(Pt,a2),e(a2,Lk),e(Pt,Ak),e(Pt,Af),e(Af,Fk),e(Pt,Ok),e(I,Sk),e(I,ia),$(wp,ia,null),e(ia,Ck),e(ia,s2),e(s2,zk),e(ia,Vk),$(Nr,ia,null),e(I,Uk),e(I,pa),$(Dp,pa,null),e(pa,Mk),e(pa,n2),e(n2,Rk),e(pa,Bk),$(Pr,pa,null),e(I,Hk),e(I,ca),$(kp,ca,null),e(ca,Gk),e(ca,r2),e(r2,Wk),e(ca,Kk),$(Lr,ca,null),e(I,Yk),e(I,da),$(Ep,da,null),e(da,Jk),e(da,Ip),e(Ip,Zk),e(Ip,Ar),e(Ar,Xk),e(Ar,o2),e(o2,Qk),e(Ar,e5),e(Ip,t5),e(da,a5),$(Fr,da,null),e(I,s5),e(I,ma),$(qp,ma,null),e(ma,n5),e(ma,l2),e(l2,r5),e(ma,o5),$(Or,ma,null),e(I,l5),e(I,ha),$(Tp,ha,null),e(ha,i5),e(ha,i2),e(i2,p5),e(ha,c5),$(Sr,ha,null),e(I,d5),e(I,tt),$(Np,tt,null),e(tt,m5),e(tt,p2),e(p2,h5),e(tt,f5),e(tt,c2),e(c2,u5),e(tt,g5),$(Cr,tt,null),e(I,_5),e(I,fa),$(Pp,fa,null),e(fa,b5),e(fa,d2),e(d2,$5),e(fa,x5),$(zr,fa,null),e(I,v5),e(I,ua),$(Lp,ua,null),e(ua,y5),e(ua,m2),e(m2,j5),e(ua,w5),$(Vr,ua,null),e(I,D5),e(I,ga),$(Ap,ga,null),e(ga,k5),e(ga,h2),e(h2,E5),e(ga,I5),$(Ur,ga,null),e(I,q5),e(I,at),$(Fp,at,null),e(at,T5),e(at,f2),e(f2,N5),e(at,P5),e(at,en),e(en,L5),e(en,Ff),e(Ff,A5),e(en,F5),e(en,u2),e(u2,O5),e(en,S5),e(at,C5),$(Mr,at,null),e(I,z5),e(I,_a),$(Op,_a,null),e(_a,V5),e(_a,g2),e(g2,U5),e(_a,M5),$(Rr,_a,null),e(I,R5),e(I,ba),$(Sp,ba,null),e(ba,B5),e(ba,_2),e(_2,H5),e(ba,G5),$(Br,ba,null),e(I,W5),e(I,$a),$(Cp,$a,null),e($a,K5),e($a,zp),e(zp,Y5),e(zp,b2),e(b2,J5),e(zp,Z5),e($a,X5),$(Hr,$a,null),e(I,Q5),e(I,xa),$(Vp,xa,null),e(xa,e3),e(xa,$2),e($2,t3),e(xa,a3),$(Gr,xa,null),e(I,s3),e(I,va),$(Up,va,null),e(va,n3),e(va,x2),e(x2,r3),e(va,o3),e(va,Mp),e(Mp,l3),e(Mp,Of),e(Of,i3),e(Mp,p3),e(I,c3),e(I,Wr),$(Rp,Wr,null),e(Wr,d3),e(Wr,tn),e(tn,m3),e(tn,v2),e(v2,h3),e(tn,f3),e(tn,y2),e(y2,u3),e(tn,g3),e(I,_3),e(I,ye),$(Bp,ye,null),e(ye,b3),e(ye,Ce),e(Ce,$3),e(Ce,j2),e(j2,x3),e(Ce,v3),e(Ce,w2),e(w2,y3),e(Ce,j3),e(Ce,D2),e(D2,w3),e(Ce,D3),e(Ce,Sf),e(Sf,k3),e(Ce,E3),e(ye,I3),e(ye,ze),e(ze,q3),e(ze,k2),e(k2,T3),e(ze,N3),e(ze,E2),e(E2,P3),e(ze,L3),e(ze,I2),e(I2,A3),e(ze,F3),e(ze,q2),e(q2,O3),e(ze,S3),e(ye,C3),e(ye,T2),e(T2,z3),e(ye,V3),$(Kr,ye,null),e(I,U3),e(I,ya),$(Hp,ya,null),e(ya,M3),e(ya,st),e(st,R3),e(st,N2),e(N2,B3),e(st,H3),e(st,P2),e(P2,G3),e(st,W3),e(st,Cf),e(Cf,K3),e(st,Y3),e(st,zf),e(zf,J3),e(ya,Z3),$(Yr,ya,null),e(I,X3),e(I,nt),$(Gp,nt,null),e(nt,Q3),e(nt,Wp),e(Wp,eE),e(Wp,L2),e(L2,tE),e(Wp,aE),e(nt,sE),e(nt,Vf),e(Vf,nE),e(Vf,A2),e(A2,rE),e(nt,oE),$(Jr,nt,null),e(I,lE),e(I,je),$(Kp,je,null),e(je,iE),e(je,Lt),e(Lt,pE),e(Lt,F2),e(F2,cE),e(Lt,dE),e(Lt,O2),e(O2,mE),e(Lt,hE),e(Lt,S2),e(S2,fE),e(Lt,uE),e(je,gE),e(je,Yp),e(Yp,_E),e(Yp,Uf),e(Uf,bE),e(Yp,$E),e(je,xE),e(je,an),e(an,vE),e(an,Mf),e(Mf,yE),e(an,jE),e(an,C2),e(C2,wE),e(an,DE),e(je,kE),$(Zr,je,null),e(I,EE),e(I,we),$(Jp,we,null),e(we,IE),e(we,sn),e(sn,qE),e(sn,z2),e(z2,TE),e(sn,NE),e(sn,V2),e(V2,PE),e(sn,LE),e(we,AE),e(we,nn),e(nn,FE),e(nn,Rf),e(Rf,OE),e(nn,SE),e(nn,Bf),e(Bf,CE),e(nn,zE),e(we,VE),e(we,rn),e(rn,UE),e(rn,Hf),e(Hf,ME),e(rn,RE),e(rn,U2),e(U2,BE),e(rn,HE),e(we,GE),$(Xr,we,null),e(I,WE),e(I,Qr),$(Zp,Qr,null),e(Qr,KE),e(Qr,M2),e(M2,YE),e(I,JE),e(I,rt),$(Xp,rt,null),e(rt,ZE),e(rt,R2),e(R2,XE),e(rt,QE),e(rt,B2),e(B2,e6),e(rt,t6),$(eo,rt,null),e(I,a6),e(I,De),$(Qp,De,null),e(De,s6),e(De,H2),e(H2,n6),e(De,r6),e(De,ec),e(ec,o6),e(ec,G2),e(G2,l6),e(ec,i6),e(De,p6),e(De,on),e(on,W2),e(W2,c6),e(on,d6),e(on,K2),e(K2,m6),e(on,h6),e(on,me),e(me,f6),e(me,Y2),e(Y2,u6),e(me,g6),e(me,J2),e(J2,_6),e(me,b6),e(me,Z2),e(Z2,$6),e(me,x6),e(me,X2),e(X2,v6),e(me,y6),e(me,Q2),e(Q2,j6),e(me,w6),e(De,D6),$(to,De,null),e(I,k6),e(I,ja),$(tc,ja,null),e(ja,E6),e(ja,e1),e(e1,I6),e(ja,q6),$(ao,ja,null),e(I,T6),e(I,wa),$(ac,wa,null),e(wa,N6),e(wa,t1),e(t1,P6),e(wa,L6),$(so,wa,null),e(I,A6),e(I,ot),$(sc,ot,null),e(ot,F6),e(ot,a1),e(a1,O6),e(ot,S6),e(ot,s1),e(s1,C6),e(ot,z6),$(no,ot,null),e(I,V6),e(I,lt),$(nc,lt,null),e(lt,U6),e(lt,n1),e(n1,M6),e(lt,R6),e(lt,r1),e(r1,B6),e(lt,H6),$(ro,lt,null),e(I,G6),e(I,it),$(rc,it,null),e(it,W6),e(it,H),e(H,K6),e(H,o1),e(o1,Y6),e(H,J6),e(H,l1),e(l1,Z6),e(H,X6),e(H,i1),e(i1,Q6),e(H,e8),e(H,p1),e(p1,t8),e(H,a8),e(H,c1),e(c1,s8),e(H,n8),e(H,d1),e(d1,r8),e(H,o8),e(H,m1),e(m1,l8),e(H,i8),e(it,p8),e(it,oc),e(oc,c8),e(oc,h1),e(h1,d8),e(oc,m8),e(it,h8),$(oo,it,null),e(I,f8),e(I,re),$(lc,re,null),e(re,u8),e(re,ln),e(ln,g8),e(ln,f1),e(f1,_8),e(ln,b8),e(ln,u1),e(u1,$8),e(ln,x8),e(re,v8),e(re,g1),e(g1,y8),e(re,j8),e(re,ic),e(ic,w8),e(ic,_1),e(_1,D8),e(ic,k8),e(re,E8),e(re,b1),e(b1,I8),e(re,q8),$(lo,re,null),e(I,T8),e(I,Da),$(pc,Da,null),e(Da,N8),e(Da,$1),e($1,P8),e(Da,L8),$(io,Da,null),e(I,A8),e(I,pt),$(cc,pt,null),e(pt,F8),e(pt,x1),e(x1,O8),e(pt,S8),e(pt,At),e(At,C8),e(At,Gf),e(Gf,z8),e(At,V8),e(At,Wf),e(Wf,U8),e(At,M8),e(At,v1),e(v1,R8),e(At,B8),e(pt,H8),$(po,pt,null),e(I,G8),e(I,K),$(dc,K,null),e(K,W8),e(K,pn),e(pn,K8),e(pn,Kf),e(Kf,Y8),e(pn,J8),e(pn,y1),e(y1,Z8),e(pn,X8),e(K,Q8),e(K,cn),e(cn,eI),e(cn,Yf),e(Yf,tI),e(cn,aI),e(cn,Jf),e(Jf,sI),e(cn,nI),e(K,rI),e(K,mc),e(mc,oI),e(mc,j1),e(j1,lI),e(mc,iI),e(K,pI),$(co,K,null),e(K,cI),$(mo,K,null),e(K,dI),$(ho,K,null),e(I,mI),e(I,ka),$(hc,ka,null),e(ka,hI),e(ka,Ft),e(Ft,fI),e(Ft,w1),e(w1,uI),e(Ft,gI),e(Ft,Zf),e(Zf,_I),e(Ft,bI),e(Ft,D1),e(D1,$I),e(Ft,xI),e(ka,vI),$(fo,ka,null),e(I,yI),e(I,uo),$(fc,uo,null),e(uo,jI),e(uo,k1),e(k1,wI),e(I,DI),e(I,Ea),$(uc,Ea,null),e(Ea,kI),e(Ea,E1),e(E1,EI),e(Ea,II),$(go,Ea,null),e(I,qI),e(I,Ia),$(gc,Ia,null),e(Ia,TI),e(Ia,_c),e(_c,NI),e(_c,I1),e(I1,PI),e(_c,LI),e(Ia,AI),$(_o,Ia,null),e(I,FI),e(I,qa),$(bc,qa,null),e(qa,OI),e(qa,q1),e(q1,SI),e(qa,CI),$(bo,qa,null),e(I,zI),e(I,Ta),$($c,Ta,null),e(Ta,VI),e(Ta,T1),e(T1,UI),e(Ta,MI),$($o,Ta,null),e(I,RI),e(I,Na),$(xc,Na,null),e(Na,BI),e(Na,N1),e(N1,HI),e(Na,GI),$(xo,Na,null),e(I,WI),e(I,ct),$(vc,ct,null),e(ct,KI),e(ct,dn),e(dn,YI),e(dn,P1),e(P1,JI),e(dn,ZI),e(dn,L1),e(L1,XI),e(dn,QI),e(ct,e9),e(ct,A1),e(A1,Xf),e(Xf,t9),e(Xf,yc),e(yc,a9),e(ct,s9),$(vo,ct,null),e(I,n9),e(I,Pa),$(jc,Pa,null),e(Pa,r9),e(Pa,Ot),e(Ot,o9),e(Ot,F1),e(F1,l9),e(Ot,i9),e(Ot,O1),e(O1,p9),e(Ot,c9),e(Ot,S1),e(S1,d9),e(Ot,m9),e(Pa,h9),e(Pa,C1),e(C1,Qf),e(Qf,f9),e(Qf,wc),e(wc,u9),e(I,g9),e(I,yo),$(Dc,yo,null),e(yo,_9),e(yo,z1),e(z1,b9),e(I,$9),e(I,La),$(kc,La,null),e(La,x9),e(La,V1),e(V1,v9),e(La,y9),e(La,Ec),e(Ec,j9),e(Ec,U1),e(U1,w9),e(Ec,D9),e(I,k9),e(I,Aa),$(Ic,Aa,null),e(Aa,E9),e(Aa,M1),e(M1,I9),e(Aa,q9),$(jo,Aa,null),e(I,T9),e(I,Fa),$(qc,Fa,null),e(Fa,N9),e(Fa,R1),e(R1,P9),e(Fa,L9),$(wo,Fa,null),e(I,A9),e(I,Do),$(Tc,Do,null),e(Do,F9),e(Do,B1),e(B1,O9),e(I,S9),e(I,ko),$(Nc,ko,null),e(ko,C9),e(ko,H1),e(H1,z9),e(I,V9),e(I,Eo),$(Pc,Eo,null),e(Eo,U9),e(Eo,G1),e(G1,M9),e(I,R9),e(I,Io),$(Lc,Io,null),e(Io,B9),e(Io,W1),e(W1,H9),e(I,G9),e(I,qo),$(Ac,qo,null),e(qo,W9),e(qo,K1),e(K1,K9),e(I,Y9),e(I,To),$(Fc,To,null),e(To,J9),e(To,Y1),e(Y1,Z9),e(I,X9),e(I,No),$(Oc,No,null),e(No,Q9),e(No,J1),e(J1,eq),e(I,tq),e(I,Po),$(Sc,Po,null),e(Po,aq),e(Po,eu),e(eu,tu),e(tu,sq),e(eu,nq),e(I,rq),e(I,Lo),$(Cc,Lo,null),e(Lo,oq),e(Lo,au),e(au,su),e(su,lq),e(au,iq),e(I,pq),e(I,nu),$(zc,nu,null),e(I,cq),e(I,ru),$(Vc,ru,null),e(I,dq),e(I,ou),$(Uc,ou,null),e(I,mq),e(I,lu),$(Mc,lu,null),e(I,hq),e(I,iu),$(Rc,iu,null),e(I,fq),e(I,pu),$(Bc,pu,null),e(I,uq),e(I,cu),$(Hc,cu,null),e(I,gq),e(I,du),$(Gc,du,null),e(I,_q),e(I,mu),$(Wc,mu,null),e(I,bq),e(I,hu),$(Kc,hu,null),e(I,$q),e(I,fu),$(Yc,fu,null),e(I,xq),e(I,uu),$(Jc,uu,null),e(I,vq),e(I,gu),$(Zc,gu,null),e(I,yq),e(I,Oa),$(Xc,Oa,null),e(Oa,jq),e(Oa,Z1),e(Z1,wq),e(Oa,Dq),$(Ao,Oa,null),e(I,kq),e(I,Sa),$(Qc,Sa,null),e(Sa,Eq),e(Sa,X1),e(X1,Iq),e(Sa,qq),$(Fo,Sa,null),e(I,Tq),e(I,Ca),$(ed,Ca,null),e(Ca,Nq),e(Ca,Q1),e(Q1,Pq),e(Ca,Lq),$(Oo,Ca,null),e(I,Aq),e(I,za),$(td,za,null),e(za,Fq),e(za,e$),e(e$,Oq),e(za,Sq),$(So,za,null),e(I,Cq),e(I,Va),$(ad,Va,null),e(Va,zq),e(Va,mn),e(mn,Vq),e(mn,_u),e(_u,Uq),e(mn,Mq),e(mn,bu),e(bu,Rq),e(mn,Bq),e(Va,Hq),e(Va,hn),e(hn,Gq),e(hn,t$),e(t$,Wq),e(hn,Kq),e(hn,a$),e(a$,Yq),e(hn,Jq),e(I,Zq),e(I,Ua),$(sd,Ua,null),e(Ua,Xq),e(Ua,nd),e(nd,Qq),e(nd,s$),e(s$,eT),e(nd,tT),e(Ua,aT),$(Co,Ua,null),D(s,Sw,w),D(s,St,w),$(rd,St,null),e(St,sT),e(St,fn),e(fn,nT),e(fn,$u),e($u,rT),e(fn,oT),e(fn,xu),e(xu,lT),e(fn,iT),e(St,pT),$(zo,St,null),D(s,Cw,w),D(s,X,w),$(od,X,null),e(X,cT),e(X,n$),e(n$,dT),e(X,mT),e(X,un),e(un,hT),e(un,vu),e(vu,fT),e(un,uT),e(un,yu),e(yu,gT),e(un,_T),e(X,bT),e(X,Ve),e(Ve,$T),e(Ve,r$),e(r$,xT),e(Ve,vT),e(Ve,o$),e(o$,yT),e(Ve,jT),e(Ve,l$),e(l$,wT),e(Ve,DT),e(Ve,i$),e(i$,kT),e(Ve,ET),e(X,IT),e(X,p$),e(p$,qT),e(X,TT),$(Vo,X,null),D(s,zw,w),D(s,he,w),$(ld,he,null),e(he,NT),e(he,c$),e(c$,PT),e(he,LT),e(he,d$),e(d$,AT),e(he,FT),e(he,m$),e(m$,OT),e(he,ST),e(he,Ue),e(Ue,h$),e(h$,CT),e(Ue,zT),e(Ue,f$),e(f$,VT),e(Ue,UT),e(Ue,u$),e(u$,MT),e(Ue,RT),e(Ue,id),e(id,BT),e(id,ju),e(ju,HT),e(id,GT),e(Ue,WT),e(Ue,Ct),e(Ct,KT),e(Ct,wu),e(wu,YT),e(Ct,JT),e(Ct,g$),e(g$,ZT),e(Ct,XT),e(Ct,Du),e(Du,QT),e(Ct,eN),D(s,Vw,w),D(s,fe,w),$(pd,fe,null),e(fe,tN),e(fe,_$),e(_$,aN),e(fe,sN),e(fe,b$),e(b$,nN),e(fe,rN),e(fe,$$),e($$,oN),e(fe,lN),e(fe,Me),e(Me,x$),e(x$,iN),e(Me,pN),e(Me,v$),e(v$,cN),e(Me,dN),e(Me,y$),e(y$,mN),e(Me,hN),e(Me,cd),e(cd,fN),e(cd,ku),e(ku,uN),e(cd,gN),e(Me,_N),e(Me,zt),e(zt,bN),e(zt,Eu),e(Eu,$N),e(zt,xN),e(zt,j$),e(j$,vN),e(zt,yN),e(zt,Iu),e(Iu,jN),e(zt,wN),D(s,Uw,w),D(s,ue,w),$(dd,ue,null),e(ue,DN),e(ue,w$),e(w$,kN),e(ue,EN),e(ue,D$),e(D$,IN),e(ue,qN),e(ue,k$),e(k$,TN),e(ue,NN),e(ue,Re),e(Re,E$),e(E$,PN),e(Re,LN),e(Re,I$),e(I$,AN),e(Re,FN),e(Re,q$),e(q$,ON),e(Re,SN),e(Re,md),e(md,CN),e(md,qu),e(qu,zN),e(md,VN),e(Re,UN),e(Re,Vt),e(Vt,MN),e(Vt,Tu),e(Tu,RN),e(Vt,BN),e(Vt,T$),e(T$,HN),e(Vt,GN),e(Vt,Nu),e(Nu,WN),e(Vt,KN),D(s,Mw,w),D(s,gn,w),e(gn,Uo),e(Uo,N$),$(hd,N$,null),e(gn,YN),e(gn,P$),e(P$,JN),D(s,Rw,w),D(s,Mo,w),e(Mo,ZN),e(Mo,L$),e(L$,XN),e(Mo,QN),D(s,Bw,w),D(s,L,w),$(fd,L,null),e(L,eP),e(L,A$),e(A$,tP),e(L,aP),e(L,Ma),$(ud,Ma,null),e(Ma,sP),e(Ma,F$),e(F$,nP),e(Ma,rP),$(Ro,Ma,null),e(L,oP),e(L,Ra),$(gd,Ra,null),e(Ra,lP),e(Ra,O$),e(O$,iP),e(Ra,pP),$(Bo,Ra,null),e(L,cP),e(L,Ba),$(_d,Ba,null),e(Ba,dP),e(Ba,S$),e(S$,mP),e(Ba,hP),$(Ho,Ba,null),e(L,fP),e(L,Ha),$(bd,Ha,null),e(Ha,uP),e(Ha,$d),e($d,gP),e($d,Go),e(Go,_P),e(Go,C$),e(C$,bP),e(Go,$P),e($d,xP),e(Ha,vP),$(Wo,Ha,null),e(L,yP),e(L,Ga),$(xd,Ga,null),e(Ga,jP),e(Ga,z$),e(z$,wP),e(Ga,DP),$(Ko,Ga,null),e(L,kP),e(L,Wa),$(vd,Wa,null),e(Wa,EP),e(Wa,V$),e(V$,IP),e(Wa,qP),$(Yo,Wa,null),e(L,TP),e(L,dt),$(yd,dt,null),e(dt,NP),e(dt,U$),e(U$,PP),e(dt,LP),e(dt,M$),e(M$,AP),e(dt,FP),$(Jo,dt,null),e(L,OP),e(L,Ka),$(jd,Ka,null),e(Ka,SP),e(Ka,R$),e(R$,CP),e(Ka,zP),$(Zo,Ka,null),e(L,VP),e(L,Ya),$(wd,Ya,null),e(Ya,UP),e(Ya,B$),e(B$,MP),e(Ya,RP),$(Xo,Ya,null),e(L,BP),e(L,Ja),$(Dd,Ja,null),e(Ja,HP),e(Ja,H$),e(H$,GP),e(Ja,WP),$(Qo,Ja,null),e(L,KP),e(L,mt),$(kd,mt,null),e(mt,YP),e(mt,G$),e(G$,JP),e(mt,ZP),e(mt,W$),e(W$,XP),e(mt,QP),$(el,mt,null),e(L,eL),e(L,ke),$(Ed,ke,null),e(ke,tL),e(ke,K$),e(K$,aL),e(ke,sL),e(ke,Y$),e(Y$,nL),e(ke,rL),e(ke,J$),e(J$,oL),e(ke,lL),$(tl,ke,null),e(L,iL),e(L,Ee),$(Id,Ee,null),e(Ee,pL),e(Ee,qd),e(qd,cL),e(qd,Z$),e(Z$,dL),e(qd,mL),e(Ee,hL),e(Ee,Be),e(Be,fL),e(Be,X$),e(X$,uL),e(Be,gL),e(Be,Q$),e(Q$,_L),e(Be,bL),e(Be,ex),e(ex,$L),e(Be,xL),e(Be,tx),e(tx,vL),e(Be,yL),e(Ee,jL),e(Ee,ax),e(ax,wL),e(Ee,DL),$(al,Ee,null),e(L,kL),e(L,ht),$(Td,ht,null),e(ht,EL),e(ht,Nd),e(Nd,IL),e(Nd,sx),e(sx,qL),e(Nd,TL),e(ht,NL),e(ht,Pu),e(Pu,PL),e(Pu,nx),e(nx,LL),e(ht,AL),$(sl,ht,null),e(L,FL),e(L,nl),$(Pd,nl,null),e(nl,OL),e(nl,_n),e(_n,SL),e(_n,rx),e(rx,CL),e(_n,zL),e(_n,ox),e(ox,VL),e(_n,UL),e(L,ML),e(L,Ie),$(Ld,Ie,null),e(Ie,RL),e(Ie,Ut),e(Ut,BL),e(Ut,lx),e(lx,HL),e(Ut,GL),e(Ut,ix),e(ix,WL),e(Ut,KL),e(Ut,px),e(px,YL),e(Ut,JL),e(Ie,ZL),e(Ie,Ad),e(Ad,XL),e(Ad,Lu),e(Lu,QL),e(Ad,eA),e(Ie,tA),e(Ie,bn),e(bn,aA),e(bn,Au),e(Au,sA),e(bn,nA),e(bn,cx),e(cx,rA),e(bn,oA),e(Ie,lA),$(rl,Ie,null),e(L,iA),e(L,qe),$(Fd,qe,null),e(qe,pA),e(qe,$n),e($n,cA),e($n,dx),e(dx,dA),e($n,mA),e($n,mx),e(mx,hA),e($n,fA),e(qe,uA),e(qe,xn),e(xn,gA),e(xn,Fu),e(Fu,_A),e(xn,bA),e(xn,Ou),e(Ou,$A),e(xn,xA),e(qe,vA),e(qe,vn),e(vn,yA),e(vn,hx),e(hx,jA),e(vn,wA),e(vn,fx),e(fx,DA),e(vn,kA),e(qe,EA),$(ol,qe,null),e(L,IA),e(L,Za),$(Od,Za,null),e(Za,qA),e(Za,ux),e(ux,TA),e(Za,NA),$(ll,Za,null),e(L,PA),e(L,ft),$(Sd,ft,null),e(ft,LA),e(ft,gx),e(gx,AA),e(ft,FA),e(ft,Mt),e(Mt,OA),e(Mt,Su),e(Su,SA),e(Mt,CA),e(Mt,_x),e(_x,zA),e(Mt,VA),e(Mt,bx),e(bx,UA),e(Mt,MA),e(ft,RA),$(il,ft,null),e(L,BA),e(L,Xa),$(Cd,Xa,null),e(Xa,HA),e(Xa,$x),e($x,GA),e(Xa,WA),$(pl,Xa,null),e(L,KA),e(L,Te),$(zd,Te,null),e(Te,YA),e(Te,xx),e(xx,JA),e(Te,ZA),e(Te,vx),e(vx,XA),e(Te,QA),e(Te,yn),e(yn,eF),e(yn,Cu),e(Cu,tF),e(yn,aF),e(yn,yx),e(yx,sF),e(yn,nF),e(Te,rF),$(cl,Te,null),e(L,oF),e(L,Ne),$(Vd,Ne,null),e(Ne,lF),e(Ne,jx),e(jx,iF),e(Ne,pF),e(Ne,jn),e(jn,cF),e(jn,zu),e(zu,dF),e(jn,mF),e(jn,wx),e(wx,hF),e(jn,fF),e(Ne,uF),e(Ne,Ud),e(Ud,Dx),e(Dx,gF),e(Ud,_F),e(Ud,kx),e(kx,bF),e(Ne,$F),$(dl,Ne,null),e(L,xF),e(L,Qa),$(Md,Qa,null),e(Qa,vF),e(Qa,Ex),e(Ex,yF),e(Qa,jF),$(ml,Qa,null),e(L,wF),e(L,es),$(Rd,es,null),e(es,DF),e(es,Bd),e(Bd,kF),e(Bd,Ix),e(Ix,EF),e(Bd,IF),e(es,qF),$(hl,es,null),e(L,TF),e(L,Pe),$(Hd,Pe,null),e(Pe,NF),e(Pe,wn),e(wn,PF),e(wn,qx),e(qx,LF),e(wn,AF),e(wn,Tx),e(Tx,FF),e(wn,OF),e(Pe,SF),e(Pe,Nx),e(Nx,CF),e(Pe,zF),e(Pe,Rt),e(Rt,VF),e(Rt,Vu),e(Vu,UF),e(Rt,MF),e(Rt,Uu),e(Uu,RF),e(Rt,BF),e(Rt,Px),e(Px,HF),e(Rt,GF),e(Pe,WF),$(fl,Pe,null),e(L,KF),e(L,oe),$(Gd,oe,null),e(oe,YF),e(oe,Dn),e(Dn,JF),e(Dn,Mu),e(Mu,ZF),e(Dn,XF),e(Dn,Lx),e(Lx,QF),e(Dn,eO),e(oe,tO),e(oe,kn),e(kn,aO),e(kn,Ru),e(Ru,sO),e(kn,nO),e(kn,Bu),e(Bu,rO),e(kn,oO),e(oe,lO),e(oe,Wd),e(Wd,iO),e(Wd,Ax),e(Ax,pO),e(Wd,cO),e(oe,dO),$(ul,oe,null),e(oe,mO),$(gl,oe,null),e(L,hO),e(L,ts),$(Kd,ts,null),e(ts,fO),e(ts,Bt),e(Bt,uO),e(Bt,Fx),e(Fx,gO),e(Bt,_O),e(Bt,Hu),e(Hu,bO),e(Bt,$O),e(Bt,Ox),e(Ox,xO),e(Bt,vO),e(ts,yO),$(_l,ts,null),e(L,jO),e(L,as),$(Yd,as,null),e(as,wO),e(as,Sx),e(Sx,DO),e(as,kO),$(bl,as,null),e(L,EO),e(L,ss),$(Jd,ss,null),e(ss,IO),e(ss,Cx),e(Cx,qO),e(ss,TO),$($l,ss,null),e(L,NO),e(L,ns),$(Zd,ns,null),e(ns,PO),e(ns,zx),e(zx,LO),e(ns,AO),$(xl,ns,null),e(L,FO),e(L,rs),$(Xd,rs,null),e(rs,OO),e(rs,Vx),e(Vx,SO),e(rs,CO),$(vl,rs,null),e(L,zO),e(L,os),$(Qd,os,null),e(os,VO),e(os,En),e(En,UO),e(En,Gu),e(Gu,MO),e(En,RO),e(En,Wu),e(Wu,BO),e(En,HO),e(os,GO),e(os,In),e(In,WO),e(In,Ux),e(Ux,KO),e(In,YO),e(In,Mx),e(Mx,JO),e(In,ZO),D(s,Hw,w),D(s,Ku,w),D(s,Gw,w),D(s,qn,w),e(qn,yl),e(yl,Rx),$(em,Rx,null),e(qn,XO),e(qn,Bx),e(Bx,QO),D(s,Ww,w),D(s,jl,w),e(jl,eS),e(jl,Yu),e(Yu,tS),e(jl,aS),D(s,Kw,w),D(s,F,w),$(tm,F,null),e(F,sS),e(F,Hx),e(Hx,nS),e(F,rS),e(F,ls),$(am,ls,null),e(ls,oS),e(ls,Gx),e(Gx,lS),e(ls,iS),$(wl,ls,null),e(F,pS),e(F,is),$(sm,is,null),e(is,cS),e(is,Wx),e(Wx,dS),e(is,mS),$(Dl,is,null),e(F,hS),e(F,ps),$(nm,ps,null),e(ps,fS),e(ps,Kx),e(Kx,uS),e(ps,gS),$(kl,ps,null),e(F,_S),e(F,Ju),$(rm,Ju,null),e(F,bS),e(F,Le),$(om,Le,null),e(Le,$S),e(Le,Yx),e(Yx,xS),e(Le,vS),e(Le,lm),e(lm,yS),e(lm,Jx),e(Jx,jS),e(lm,wS),e(Le,DS),e(Le,Tn),e(Tn,Zx),e(Zx,kS),e(Tn,ES),e(Tn,Xx),e(Xx,IS),e(Tn,qS),e(Tn,ge),e(ge,TS),e(ge,Qx),e(Qx,NS),e(ge,PS),e(ge,ev),e(ev,LS),e(ge,AS),e(ge,tv),e(tv,FS),e(ge,OS),e(ge,av),e(av,SS),e(ge,CS),e(ge,sv),e(sv,zS),e(ge,VS),e(Le,US),$(El,Le,null),e(F,MS),e(F,cs),$(im,cs,null),e(cs,RS),e(cs,nv),e(nv,BS),e(cs,HS),$(Il,cs,null),e(F,GS),e(F,ds),$(pm,ds,null),e(ds,WS),e(ds,rv),e(rv,KS),e(ds,YS),$(ql,ds,null),e(F,JS),e(F,le),$(cm,le,null),e(le,ZS),e(le,ov),e(ov,XS),e(le,QS),e(le,lv),e(lv,eC),e(le,tC),e(le,dm),e(dm,aC),e(dm,iv),e(iv,sC),e(dm,nC),e(le,rC),e(le,Nn),e(Nn,oC),e(Nn,Zu),e(Zu,lC),e(Nn,iC),e(Nn,Xu),e(Xu,pC),e(Nn,cC),e(le,dC),$(Tl,le,null),e(F,mC),e(F,ms),$(mm,ms,null),e(ms,hC),e(ms,hm),e(hm,fC),e(hm,pv),e(pv,uC),e(hm,gC),e(ms,_C),$(Nl,ms,null),e(F,bC),e(F,hs),$(fm,hs,null),e(hs,$C),e(hs,um),e(um,xC),e(um,cv),e(cv,vC),e(um,yC),e(hs,jC),$(Pl,hs,null),e(F,wC),e(F,Ll),$(gm,Ll,null),e(Ll,DC),e(Ll,Qu),e(Qu,eg),e(eg,kC),e(Qu,EC),e(F,IC),e(F,Al),$(_m,Al,null),e(Al,qC),e(Al,tg),e(tg,ag),e(ag,TC),e(tg,NC),e(F,PC),e(F,sg),$(bm,sg,null),e(F,LC),e(F,ng),$($m,ng,null),e(F,AC),e(F,rg),$(xm,rg,null),e(F,FC),e(F,og),$(vm,og,null),e(F,OC),e(F,lg),$(ym,lg,null),e(F,SC),e(F,ig),$(jm,ig,null),e(F,CC),e(F,pg),$(wm,pg,null),e(F,zC),e(F,cg),$(Dm,cg,null),e(F,VC),e(F,dg),$(km,dg,null),e(F,UC),e(F,mg),$(Em,mg,null),e(F,MC),e(F,hg),$(Im,hg,null),e(F,RC),e(F,fg),$(qm,fg,null),e(F,BC),e(F,ug),$(Tm,ug,null),D(s,Yw,w),D(s,Pn,w),e(Pn,Fl),e(Fl,dv),$(Nm,dv,null),e(Pn,HC),e(Pn,mv),e(mv,GC),D(s,Jw,w),D(s,Ol,w),e(Ol,WC),e(Ol,hv),e(hv,KC),e(Ol,YC),D(s,Zw,w),D(s,U,w),$(Pm,U,null),e(U,JC),e(U,Ae),$(Lm,Ae,null),e(Ae,ZC),e(Ae,fv),e(fv,XC),e(Ae,QC),e(Ae,Am),e(Am,ez),e(Am,uv),e(uv,tz),e(Am,az),e(Ae,sz),e(Ae,Ln),e(Ln,gv),e(gv,nz),e(Ln,rz),e(Ln,_v),e(_v,oz),e(Ln,lz),e(Ln,_e),e(_e,iz),e(_e,bv),e(bv,pz),e(_e,cz),e(_e,$v),e($v,dz),e(_e,mz),e(_e,xv),e(xv,hz),e(_e,fz),e(_e,vv),e(vv,uz),e(_e,gz),e(_e,yv),e(yv,_z),e(_e,bz),e(Ae,$z),$(Sl,Ae,null),e(U,xz),e(U,fs),$(Fm,fs,null),e(fs,vz),e(fs,jv),e(jv,yz),e(fs,jz),$(Cl,fs,null),e(U,wz),e(U,ie),$(Om,ie,null),e(ie,Dz),e(ie,wv),e(wv,kz),e(ie,Ez),e(ie,Dv),e(Dv,Iz),e(ie,qz),e(ie,Sm),e(Sm,Tz),e(Sm,kv),e(kv,Nz),e(Sm,Pz),e(ie,Lz),e(ie,An),e(An,Az),e(An,gg),e(gg,Fz),e(An,Oz),e(An,_g),e(_g,Sz),e(An,Cz),e(ie,zz),$(zl,ie,null),e(U,Vz),e(U,us),$(Cm,us,null),e(us,Uz),e(us,Ev),e(Ev,Mz),e(us,Rz),$(Vl,us,null),e(U,Bz),e(U,gs),$(zm,gs,null),e(gs,Hz),e(gs,Iv),e(Iv,Gz),e(gs,Wz),$(Ul,gs,null),e(U,Kz),e(U,_s),$(Vm,_s,null),e(_s,Yz),e(_s,qv),e(qv,Jz),e(_s,Zz),$(Ml,_s,null),e(U,Xz),e(U,bs),$(Um,bs,null),e(bs,Qz),e(bs,Tv),e(Tv,eV),e(bs,tV),$(Rl,bs,null),e(U,aV),e(U,$s),$(Mm,$s,null),e($s,sV),e($s,Nv),e(Nv,nV),e($s,rV),$(Bl,$s,null),e(U,oV),e(U,xs),$(Rm,xs,null),e(xs,lV),e(xs,Pv),e(Pv,iV),e(xs,pV),$(Hl,xs,null),D(s,Xw,w),D(s,Fn,w),e(Fn,Gl),e(Gl,Lv),$(Bm,Lv,null),e(Fn,cV),e(Fn,Av),e(Av,dV),D(s,Qw,w),D(s,z,w),$(Hm,z,null),e(z,mV),e(z,Fv),e(Fv,hV),e(z,fV),e(z,Gm),e(Gm,uV),e(Gm,Ov),e(Ov,gV),e(Gm,_V),e(z,bV),e(z,bg),e(bg,Sv),e(Sv,$V),e(bg,xV),e(z,vV),e(z,G),e(G,Cv),e(Cv,vs),e(vs,yV),e(vs,$g),e($g,jV),e(vs,wV),e(vs,zv),e(zv,DV),e(vs,kV),e(vs,Vv),e(Vv,EV),e(G,IV),e(G,Uv),e(Uv,Wm),e(Wm,qV),e(Wm,xg),e(xg,TV),e(Wm,NV),e(G,PV),e(G,Mv),e(Mv,Km),e(Km,LV),e(Km,Rv),e(Rv,AV),e(Km,FV),e(G,OV),e(G,Ym),e(Ym,He),e(He,SV),e(He,Bv),e(Bv,CV),e(He,zV),e(He,vg),e(vg,VV),e(He,UV),e(He,Hv),e(Hv,MV),e(He,RV),e(He,yg),e(yg,BV),e(He,HV),e(Ym,GV),$(Wl,Ym,null),e(G,WV),e(G,Gv),e(Gv,Ge),e(Ge,KV),e(Ge,jg),e(jg,YV),e(Ge,JV),e(Ge,wg),e(wg,ZV),e(Ge,XV),e(Ge,Dg),e(Dg,QV),e(Ge,eU),e(Ge,kg),e(kg,tU),e(Ge,aU),e(G,sU),e(G,Wv),e(Wv,Jm),e(Jm,nU),e(Jm,Eg),e(Eg,rU),e(Jm,oU),e(G,lU),e(G,Kv),e(Kv,Ht),e(Ht,iU),e(Ht,Ig),e(Ig,pU),e(Ht,cU),e(Ht,Yv),e(Yv,dU),e(Ht,mU),e(Ht,Jv),e(Jv,hU),e(Ht,fU),e(G,uU),e(G,Zv),e(Zv,Kl),e(Kl,qg),e(qg,gU),e(Kl,_U),e(Kl,Tg),e(Tg,bU),e(Kl,$U),e(z,xU),e(z,Yl),$(Zm,Yl,null),e(Yl,vU),e(Yl,Xv),e(Xv,yU),e(z,jU),e(z,Jl),$(Xm,Jl,null),e(Jl,wU),e(Jl,Qv),e(Qv,DU),e(z,kU),e(z,Zl),$(Qm,Zl,null),e(Zl,EU),e(Zl,ey),e(ey,IU),e(z,qU),e(z,Xl),$(eh,Xl,null),e(Xl,TU),e(Xl,ty),e(ty,NU),e(z,PU),e(z,Ql),$(th,Ql,null),e(Ql,LU),e(Ql,ay),e(ay,AU),e(z,FU),e(z,ei),$(ah,ei,null),e(ei,OU),e(ei,sy),e(sy,SU),e(z,CU),e(z,ys),$(sh,ys,null),e(ys,zU),e(ys,ny),e(ny,VU),e(ys,UU),e(ys,ry),e(ry,MU),e(z,RU),e(z,ti),$(nh,ti,null),e(ti,BU),e(ti,oy),e(oy,HU),e(z,GU),e(z,Fe),$(rh,Fe,null),e(Fe,WU),e(Fe,ly),e(ly,KU),e(Fe,YU),e(Fe,iy),e(iy,JU),e(Fe,ZU),e(Fe,Gt),e(Gt,XU),e(Gt,Ng),e(Ng,QU),e(Gt,eM),e(Gt,Pg),e(Pg,tM),e(Gt,aM),e(Gt,Lg),e(Lg,sM),e(Gt,nM),e(Fe,rM),$(ai,Fe,null),e(z,oM),e(z,ut),$(oh,ut,null),e(ut,lM),e(ut,py),e(py,iM),e(ut,pM),e(ut,cy),e(cy,cM),e(ut,dM),$(si,ut,null),D(s,e7,w),D(s,On,w),$(lh,On,null),e(On,mM),e(On,dy),e(dy,hM),D(s,t7,w),D(s,Q,w),$(ih,Q,null),e(Q,fM),e(Q,my),e(my,uM),e(Q,gM),e(Q,ph),e(ph,_M),e(ph,hy),e(hy,bM),e(ph,$M),e(Q,xM),e(Q,Sn),e(Sn,Ag),e(Ag,fy),e(fy,vM),e(Ag,yM),e(Sn,jM),e(Sn,Fg),e(Fg,uy),e(uy,wM),e(Fg,DM),e(Sn,kM),e(Sn,Og),e(Og,gy),e(gy,EM),e(Og,IM),e(Q,qM),e(Q,ni),$(ch,ni,null),e(ni,TM),e(ni,_y),e(_y,NM),e(Q,PM),e(Q,ri),$(dh,ri,null),e(ri,LM),e(ri,by),e(by,AM),D(s,a7,w),D(s,Wt,w),$(mh,Wt,null),e(Wt,FM),e(Wt,$y),e($y,OM),e(Wt,SM),e(Wt,xy),e(xy,CM),D(s,s7,w),D(s,ee,w),$(hh,ee,null),e(ee,zM),e(ee,Sg),e(Sg,vy),e(vy,VM),e(Sg,UM),e(ee,MM),e(ee,yy),e(yy,RM),e(ee,BM),e(ee,fh),e(fh,HM),e(fh,jy),e(jy,GM),e(fh,WM),e(ee,KM),$(oi,ee,null),e(ee,YM),e(ee,li),$(uh,li,null),e(li,JM),e(li,wy),e(wy,ZM),D(s,n7,w),D(s,te,w),$(gh,te,null),e(te,XM),e(te,Cg),e(Cg,Dy),e(Dy,QM),e(Cg,eR),e(te,tR),e(te,ky),e(ky,aR),e(te,sR),e(te,Ey),e(Ey,nR),e(te,rR),$(ii,te,null),e(te,oR),e(te,pi),$(_h,pi,null),e(pi,lR),e(pi,Iy),e(Iy,iR),D(s,r7,w),D(s,bh,w),$($h,bh,null),D(s,o7,w),D(s,xh,w),$(vh,xh,null),D(s,l7,w),D(s,yh,w),$(jh,yh,null),D(s,i7,w),D(s,wh,w),$(Dh,wh,null),D(s,p7,w),D(s,M,w),$(kh,M,null),e(M,pR),e(M,qy),e(qy,cR),e(M,dR),e(M,Ty),e(Ty,mR),e(M,hR),e(M,Cn),e(Cn,Ny),e(Ny,Eh),e(Eh,fR),e(Eh,Py),e(Py,uR),e(Eh,gR),e(Cn,_R),e(Cn,zn),e(zn,Ih),e(Ih,bR),e(Ih,Ly),e(Ly,$R),e(Ih,xR),e(zn,vR),e(zn,qh),e(qh,Ay),e(Ay,yR),e(qh,jR),e(qh,Fy),e(Fy,wR),e(zn,DR),e(zn,Oy),e(Oy,kR),e(Cn,ER),e(Cn,Vn),e(Vn,Th),e(Th,IR),e(Th,Sy),e(Sy,qR),e(Th,TR),e(Vn,NR),e(Vn,Un),e(Un,Cy),e(Cy,PR),e(Un,LR),e(Un,zy),e(zy,AR),e(Un,FR),e(Un,Vy),e(Vy,OR),e(Vn,SR),e(Vn,Uy),e(Uy,CR),e(M,zR),e(M,js),$(Nh,js,null),e(js,VR),e(js,My),e(My,UR),e(js,MR),e(js,Kt),e(Kt,Ry),e(Ry,RR),e(Kt,BR),e(Kt,By),e(By,HR),e(Kt,GR),e(Kt,Hy),e(Hy,WR),e(Kt,KR),e(Kt,Gy),e(Gy,YR),e(M,JR),e(M,ci),$(Ph,ci,null),e(ci,ZR),e(ci,Wy),e(Wy,XR),e(M,QR),e(M,di),$(Lh,di,null),e(di,eB),e(di,Ky),e(Ky,tB),e(M,aB),e(M,mi),$(Ah,mi,null),e(mi,sB),e(mi,Yy),e(Yy,nB),e(M,rB),e(M,hi),$(Fh,hi,null),e(hi,oB),e(hi,Jy),e(Jy,lB),D(s,c7,w),D(s,R,w),$(Oh,R,null),e(R,iB),e(R,Zy),e(Zy,pB),e(R,cB),e(R,Xy),e(Xy,dB),e(R,mB),e(R,Yt),e(Yt,Qy),e(Qy,Sh),e(Sh,hB),e(Sh,ej),e(ej,fB),e(Sh,uB),e(Yt,gB),e(Yt,Mn),e(Mn,Ch),e(Ch,_B),e(Ch,tj),e(tj,bB),e(Ch,$B),e(Mn,xB),e(Mn,zh),e(zh,aj),e(aj,vB),e(zh,yB),e(zh,sj),e(sj,jB),e(Mn,wB),e(Mn,nj),e(nj,DB),e(Yt,kB),e(Yt,rj),e(rj,Vh),e(Vh,EB),e(Vh,oj),e(oj,IB),e(Vh,qB),e(Yt,TB),e(Yt,lj),e(lj,Uh),e(Uh,NB),e(Uh,ij),e(ij,PB),e(Uh,LB),e(R,AB),e(R,ws),$(Mh,ws,null),e(ws,FB),e(ws,pj),e(pj,OB),e(ws,SB),e(ws,We),e(We,cj),e(cj,CB),e(We,zB),e(We,dj),e(dj,VB),e(We,UB),e(We,mj),e(mj,MB),e(We,RB),e(We,hj),e(hj,BB),e(We,HB),e(We,fj),e(fj,GB),e(R,WB),e(R,fi),$(Rh,fi,null),e(fi,KB),e(fi,uj),e(uj,YB),e(R,JB),e(R,ui),$(Bh,ui,null),e(ui,ZB),e(ui,gj),e(gj,XB),e(R,QB),e(R,gi),$(Hh,gi,null),e(gi,eH),e(gi,_j),e(_j,tH),e(R,aH),e(R,_i),$(Gh,_i,null),e(_i,sH),e(_i,bj),e(bj,nH),D(s,d7,w),D(s,Rn,w),e(Rn,bi),e(bi,$j),$(Wh,$j,null),e(Rn,rH),e(Rn,xj),e(xj,oH),D(s,m7,w),D(s,ae,w),$(Kh,ae,null),e(ae,lH),e(ae,vj),e(vj,iH),e(ae,pH),e(ae,zg),e(zg,yj),e(yj,cH),e(zg,dH),e(ae,mH),e(ae,jj),e(jj,hH),e(ae,fH),e(ae,$i),$(Yh,$i,null),e($i,uH),e($i,Jh),e(Jh,gH),e(Jh,wj),e(wj,_H),e(Jh,bH),e(ae,$H),e(ae,xi),$(Zh,xi,null),e(xi,xH),e(xi,Jt),e(Jt,vH),e(Jt,Dj),e(Dj,yH),e(Jt,jH),e(Jt,kj),e(kj,wH),e(Jt,DH),e(Jt,Ej),e(Ej,kH),e(Jt,EH),D(s,h7,w),D(s,Bn,w),e(Bn,vi),e(vi,Ij),$(Xh,Ij,null),e(Bn,IH),e(Bn,qj),e(qj,qH),D(s,f7,w),D(s,Ds,w),e(Ds,TH),e(Ds,Tj),e(Tj,NH),e(Ds,PH),e(Ds,Vg),e(Vg,LH),e(Ds,AH),D(s,u7,w),D(s,se,w),$(Qh,se,null),e(se,FH),e(se,Nj),e(Nj,OH),e(se,SH),e(se,yi),$(ef,yi,null),e(yi,CH),e(yi,Pj),e(Pj,zH),e(se,VH),e(se,ji),$(tf,ji,null),e(ji,UH),e(ji,Lj),e(Lj,MH),e(se,RH),e(se,ks),$(af,ks,null),e(ks,BH),e(ks,Aj),e(Aj,HH),e(ks,GH),e(ks,Fj),e(Fj,WH),e(se,KH),e(se,wi),$(sf,wi,null),e(wi,YH),e(wi,Oj),e(Oj,JH),D(s,g7,w),D(s,Hn,w),e(Hn,Di),e(Di,Sj),$(nf,Sj,null),e(Hn,ZH),e(Hn,Cj),e(Cj,XH),D(s,_7,w),D(s,S,w),$(rf,S,null),e(S,QH),e(S,zj),e(zj,eG),e(S,tG),e(S,Vj),e(Vj,aG),e(S,sG),e(S,Zt),e(Zt,nG),e(Zt,Uj),e(Uj,rG),e(Zt,oG),e(Zt,Mj),e(Mj,lG),e(Zt,iG),e(Zt,Rj),e(Rj,pG),e(Zt,cG),e(S,dG),e(S,Bj),e(Bj,mG),e(S,hG),e(S,Hj),e(Hj,fG),e(S,uG),e(S,Gj),e(Gj,gG),e(S,_G),e(S,gt),e(gt,Wj),e(Wj,bG),e(gt,$G),e(gt,of),e(of,xG),e(gt,vG),e(gt,Kj),e(Kj,yG),e(gt,jG),e(gt,lf),e(lf,wG),e(gt,DG),e(S,kG),e(S,Yj),e(Yj,EG),e(S,IG),e(S,Jj),e(Jj,qG),e(S,TG),$(ki,S,null),e(S,NG),e(S,Gn),e(Gn,PG),e(Gn,Zj),e(Zj,LG),e(Gn,AG),e(Gn,Xj),e(Xj,FG),e(Gn,OG),e(S,SG),$(Ei,S,null),e(S,CG),e(S,Xt),e(Xt,zG),e(Xt,Qj),e(Qj,VG),e(Xt,UG),e(Xt,e0),e(e0,MG),e(Xt,RG),e(Xt,t0),e(t0,BG),e(Xt,HG),e(S,GG),$(Ii,S,null),e(S,WG),e(S,Wn),e(Wn,KG),e(Wn,a0),e(a0,YG),e(Wn,JG),e(Wn,s0),e(s0,ZG),e(Wn,XG),e(S,QG),$(qi,S,null),e(S,eW),e(S,n0),e(n0,tW),e(S,aW),$(Ti,S,null),e(S,sW),e(S,Ni),e(Ni,Pi),e(Pi,r0),$(pf,r0,null),e(Ni,nW),e(Ni,o0),e(o0,rW),e(S,oW),e(S,W),e(W,lW),e(W,l0),e(l0,iW),e(W,pW),e(W,i0),e(i0,cW),e(W,dW),e(W,p0),e(p0,mW),e(W,hW),e(W,c0),e(c0,fW),e(W,uW),e(W,d0),e(d0,gW),e(W,_W),e(W,m0),e(m0,bW),e(W,$W),e(W,h0),e(h0,xW),e(W,vW),D(s,b7,w),D(s,Kn,w),$(cf,Kn,null),e(Kn,yW),e(Kn,Yn),e(Yn,jW),e(Yn,f0),e(f0,wW),e(Yn,DW),e(Yn,u0),e(u0,kW),e(Yn,EW),D(s,$7,w),D(s,Jn,w),$(df,Jn,null),e(Jn,IW),e(Jn,g0),e(g0,qW),D(s,x7,w),D(s,Zn,w),e(Zn,Li),e(Li,_0),$(mf,_0,null),e(Zn,TW),e(Zn,b0),e(b0,NW),D(s,v7,w),D(s,Xn,w),$(hf,Xn,null),e(Xn,PW),e(Xn,$0),e($0,LW),y7=!0},p(s,[w]){const ff={};w&2&&(ff.$$scope={dirty:w,ctx:s}),vr.$set(ff);const x0={};w&2&&(x0.$$scope={dirty:w,ctx:s}),yr.$set(x0);const v0={};w&2&&(v0.$$scope={dirty:w,ctx:s}),Dr.$set(v0);const y0={};w&2&&(y0.$$scope={dirty:w,ctx:s}),kr.$set(y0);const uf={};w&2&&(uf.$$scope={dirty:w,ctx:s}),qr.$set(uf);const j0={};w&2&&(j0.$$scope={dirty:w,ctx:s}),Nr.$set(j0);const w0={};w&2&&(w0.$$scope={dirty:w,ctx:s}),Pr.$set(w0);const D0={};w&2&&(D0.$$scope={dirty:w,ctx:s}),Lr.$set(D0);const be={};w&2&&(be.$$scope={dirty:w,ctx:s}),Fr.$set(be);const k0={};w&2&&(k0.$$scope={dirty:w,ctx:s}),Or.$set(k0);const Ug={};w&2&&(Ug.$$scope={dirty:w,ctx:s}),Sr.$set(Ug);const E0={};w&2&&(E0.$$scope={dirty:w,ctx:s}),Cr.$set(E0);const I0={};w&2&&(I0.$$scope={dirty:w,ctx:s}),zr.$set(I0);const Ke={};w&2&&(Ke.$$scope={dirty:w,ctx:s}),Vr.$set(Ke);const gf={};w&2&&(gf.$$scope={dirty:w,ctx:s}),Ur.$set(gf);const q0={};w&2&&(q0.$$scope={dirty:w,ctx:s}),Mr.$set(q0);const T0={};w&2&&(T0.$$scope={dirty:w,ctx:s}),Rr.$set(T0);const N0={};w&2&&(N0.$$scope={dirty:w,ctx:s}),Br.$set(N0);const Qn={};w&2&&(Qn.$$scope={dirty:w,ctx:s}),Hr.$set(Qn);const er={};w&2&&(er.$$scope={dirty:w,ctx:s}),Gr.$set(er);const P0={};w&2&&(P0.$$scope={dirty:w,ctx:s}),Kr.$set(P0);const L0={};w&2&&(L0.$$scope={dirty:w,ctx:s}),Yr.$set(L0);const _f={};w&2&&(_f.$$scope={dirty:w,ctx:s}),Jr.$set(_f);const A0={};w&2&&(A0.$$scope={dirty:w,ctx:s}),Zr.$set(A0);const F0={};w&2&&(F0.$$scope={dirty:w,ctx:s}),Xr.$set(F0);const O0={};w&2&&(O0.$$scope={dirty:w,ctx:s}),eo.$set(O0);const bf={};w&2&&(bf.$$scope={dirty:w,ctx:s}),to.$set(bf);const S0={};w&2&&(S0.$$scope={dirty:w,ctx:s}),ao.$set(S0);const q={};w&2&&(q.$$scope={dirty:w,ctx:s}),so.$set(q);const C0={};w&2&&(C0.$$scope={dirty:w,ctx:s}),no.$set(C0);const Qt={};w&2&&(Qt.$$scope={dirty:w,ctx:s}),ro.$set(Qt);const z0={};w&2&&(z0.$$scope={dirty:w,ctx:s}),oo.$set(z0);const V0={};w&2&&(V0.$$scope={dirty:w,ctx:s}),lo.$set(V0);const U0={};w&2&&(U0.$$scope={dirty:w,ctx:s}),io.$set(U0);const ea={};w&2&&(ea.$$scope={dirty:w,ctx:s}),po.$set(ea);const M0={};w&2&&(M0.$$scope={dirty:w,ctx:s}),co.$set(M0);const R0={};w&2&&(R0.$$scope={dirty:w,ctx:s}),mo.$set(R0);const B0={};w&2&&(B0.$$scope={dirty:w,ctx:s}),ho.$set(B0);const $f={};w&2&&($f.$$scope={dirty:w,ctx:s}),fo.$set($f);const H0={};w&2&&(H0.$$scope={dirty:w,ctx:s}),go.$set(H0);const xf={};w&2&&(xf.$$scope={dirty:w,ctx:s}),_o.$set(xf);const G0={};w&2&&(G0.$$scope={dirty:w,ctx:s}),bo.$set(G0);const Ye={};w&2&&(Ye.$$scope={dirty:w,ctx:s}),$o.$set(Ye);const ta={};w&2&&(ta.$$scope={dirty:w,ctx:s}),xo.$set(ta);const W0={};w&2&&(W0.$$scope={dirty:w,ctx:s}),vo.$set(W0);const K0={};w&2&&(K0.$$scope={dirty:w,ctx:s}),jo.$set(K0);const Y0={};w&2&&(Y0.$$scope={dirty:w,ctx:s}),wo.$set(Y0);const vf={};w&2&&(vf.$$scope={dirty:w,ctx:s}),Ao.$set(vf);const J0={};w&2&&(J0.$$scope={dirty:w,ctx:s}),Fo.$set(J0);const yf={};w&2&&(yf.$$scope={dirty:w,ctx:s}),Oo.$set(yf);const Z0={};w&2&&(Z0.$$scope={dirty:w,ctx:s}),So.$set(Z0);const jf={};w&2&&(jf.$$scope={dirty:w,ctx:s}),Co.$set(jf);const aa={};w&2&&(aa.$$scope={dirty:w,ctx:s}),zo.$set(aa);const X0={};w&2&&(X0.$$scope={dirty:w,ctx:s}),Vo.$set(X0);const Q0={};w&2&&(Q0.$$scope={dirty:w,ctx:s}),Ro.$set(Q0);const ew={};w&2&&(ew.$$scope={dirty:w,ctx:s}),Bo.$set(ew);const tr={};w&2&&(tr.$$scope={dirty:w,ctx:s}),Ho.$set(tr);const tw={};w&2&&(tw.$$scope={dirty:w,ctx:s}),Wo.$set(tw);const ar={};w&2&&(ar.$$scope={dirty:w,ctx:s}),Ko.$set(ar);const aw={};w&2&&(aw.$$scope={dirty:w,ctx:s}),Yo.$set(aw);const sr={};w&2&&(sr.$$scope={dirty:w,ctx:s}),Jo.$set(sr);const sw={};w&2&&(sw.$$scope={dirty:w,ctx:s}),Zo.$set(sw);const nr={};w&2&&(nr.$$scope={dirty:w,ctx:s}),Xo.$set(nr);const wf={};w&2&&(wf.$$scope={dirty:w,ctx:s}),Qo.$set(wf);const Df={};w&2&&(Df.$$scope={dirty:w,ctx:s}),el.$set(Df);const nw={};w&2&&(nw.$$scope={dirty:w,ctx:s}),tl.$set(nw);const rr={};w&2&&(rr.$$scope={dirty:w,ctx:s}),al.$set(rr);const rw={};w&2&&(rw.$$scope={dirty:w,ctx:s}),sl.$set(rw);const or={};w&2&&(or.$$scope={dirty:w,ctx:s}),rl.$set(or);const ow={};w&2&&(ow.$$scope={dirty:w,ctx:s}),ol.$set(ow);const sa={};w&2&&(sa.$$scope={dirty:w,ctx:s}),ll.$set(sa);const lw={};w&2&&(lw.$$scope={dirty:w,ctx:s}),il.$set(lw);const iw={};w&2&&(iw.$$scope={dirty:w,ctx:s}),pl.$set(iw);const lr={};w&2&&(lr.$$scope={dirty:w,ctx:s}),cl.$set(lr);const pw={};w&2&&(pw.$$scope={dirty:w,ctx:s}),dl.$set(pw);const ir={};w&2&&(ir.$$scope={dirty:w,ctx:s}),ml.$set(ir);const cw={};w&2&&(cw.$$scope={dirty:w,ctx:s}),hl.$set(cw);const pr={};w&2&&(pr.$$scope={dirty:w,ctx:s}),fl.$set(pr);const dw={};w&2&&(dw.$$scope={dirty:w,ctx:s}),ul.$set(dw);const na={};w&2&&(na.$$scope={dirty:w,ctx:s}),gl.$set(na);const mw={};w&2&&(mw.$$scope={dirty:w,ctx:s}),_l.$set(mw);const cr={};w&2&&(cr.$$scope={dirty:w,ctx:s}),bl.$set(cr);const hw={};w&2&&(hw.$$scope={dirty:w,ctx:s}),$l.$set(hw);const fw={};w&2&&(fw.$$scope={dirty:w,ctx:s}),xl.$set(fw);const dr={};w&2&&(dr.$$scope={dirty:w,ctx:s}),vl.$set(dr);const uw={};w&2&&(uw.$$scope={dirty:w,ctx:s}),wl.$set(uw);const mr={};w&2&&(mr.$$scope={dirty:w,ctx:s}),Dl.$set(mr);const gw={};w&2&&(gw.$$scope={dirty:w,ctx:s}),kl.$set(gw);const hr={};w&2&&(hr.$$scope={dirty:w,ctx:s}),El.$set(hr);const kf={};w&2&&(kf.$$scope={dirty:w,ctx:s}),Il.$set(kf);const _w={};w&2&&(_w.$$scope={dirty:w,ctx:s}),ql.$set(_w);const fr={};w&2&&(fr.$$scope={dirty:w,ctx:s}),Tl.$set(fr);const bw={};w&2&&(bw.$$scope={dirty:w,ctx:s}),Nl.$set(bw);const ur={};w&2&&(ur.$$scope={dirty:w,ctx:s}),Pl.$set(ur);const $w={};w&2&&($w.$$scope={dirty:w,ctx:s}),Sl.$set($w);const Ef={};w&2&&(Ef.$$scope={dirty:w,ctx:s}),Cl.$set(Ef);const xw={};w&2&&(xw.$$scope={dirty:w,ctx:s}),zl.$set(xw);const If={};w&2&&(If.$$scope={dirty:w,ctx:s}),Vl.$set(If);const gr={};w&2&&(gr.$$scope={dirty:w,ctx:s}),Ul.$set(gr);const vw={};w&2&&(vw.$$scope={dirty:w,ctx:s}),Ml.$set(vw);const yw={};w&2&&(yw.$$scope={dirty:w,ctx:s}),Rl.$set(yw);const Je={};w&2&&(Je.$$scope={dirty:w,ctx:s}),Bl.$set(Je);const Ze={};w&2&&(Ze.$$scope={dirty:w,ctx:s}),Hl.$set(Ze);const jw={};w&2&&(jw.$$scope={dirty:w,ctx:s}),Wl.$set(jw);const ww={};w&2&&(ww.$$scope={dirty:w,ctx:s}),ai.$set(ww);const Dw={};w&2&&(Dw.$$scope={dirty:w,ctx:s}),si.$set(Dw);const kw={};w&2&&(kw.$$scope={dirty:w,ctx:s}),oi.$set(kw);const Xe={};w&2&&(Xe.$$scope={dirty:w,ctx:s}),ii.$set(Xe);const Ew={};w&2&&(Ew.$$scope={dirty:w,ctx:s}),ki.$set(Ew);const Iw={};w&2&&(Iw.$$scope={dirty:w,ctx:s}),Ei.$set(Iw);const qw={};w&2&&(qw.$$scope={dirty:w,ctx:s}),Ii.$set(qw);const Tw={};w&2&&(Tw.$$scope={dirty:w,ctx:s}),qi.$set(Tw);const Nw={};w&2&&(Nw.$$scope={dirty:w,ctx:s}),Ti.$set(Nw)},i(s){y7||(x(t.$$.fragment,s),x(oa.$$.fragment,s),x(cp.$$.fragment,s),x(dp.$$.fragment,s),x(vr.$$.fragment,s),x(hp.$$.fragment,s),x(yr.$$.fragment,s),x(fp.$$.fragment,s),x(up.$$.fragment,s),x(gp.$$.fragment,s),x(Dr.$$.fragment,s),x(_p.$$.fragment,s),x(kr.$$.fragment,s),x(bp.$$.fragment,s),x($p.$$.fragment,s),x(xp.$$.fragment,s),x(qr.$$.fragment,s),x(jp.$$.fragment,s),x(wp.$$.fragment,s),x(Nr.$$.fragment,s),x(Dp.$$.fragment,s),x(Pr.$$.fragment,s),x(kp.$$.fragment,s),x(Lr.$$.fragment,s),x(Ep.$$.fragment,s),x(Fr.$$.fragment,s),x(qp.$$.fragment,s),x(Or.$$.fragment,s),x(Tp.$$.fragment,s),x(Sr.$$.fragment,s),x(Np.$$.fragment,s),x(Cr.$$.fragment,s),x(Pp.$$.fragment,s),x(zr.$$.fragment,s),x(Lp.$$.fragment,s),x(Vr.$$.fragment,s),x(Ap.$$.fragment,s),x(Ur.$$.fragment,s),x(Fp.$$.fragment,s),x(Mr.$$.fragment,s),x(Op.$$.fragment,s),x(Rr.$$.fragment,s),x(Sp.$$.fragment,s),x(Br.$$.fragment,s),x(Cp.$$.fragment,s),x(Hr.$$.fragment,s),x(Vp.$$.fragment,s),x(Gr.$$.fragment,s),x(Up.$$.fragment,s),x(Rp.$$.fragment,s),x(Bp.$$.fragment,s),x(Kr.$$.fragment,s),x(Hp.$$.fragment,s),x(Yr.$$.fragment,s),x(Gp.$$.fragment,s),x(Jr.$$.fragment,s),x(Kp.$$.fragment,s),x(Zr.$$.fragment,s),x(Jp.$$.fragment,s),x(Xr.$$.fragment,s),x(Zp.$$.fragment,s),x(Xp.$$.fragment,s),x(eo.$$.fragment,s),x(Qp.$$.fragment,s),x(to.$$.fragment,s),x(tc.$$.fragment,s),x(ao.$$.fragment,s),x(ac.$$.fragment,s),x(so.$$.fragment,s),x(sc.$$.fragment,s),x(no.$$.fragment,s),x(nc.$$.fragment,s),x(ro.$$.fragment,s),x(rc.$$.fragment,s),x(oo.$$.fragment,s),x(lc.$$.fragment,s),x(lo.$$.fragment,s),x(pc.$$.fragment,s),x(io.$$.fragment,s),x(cc.$$.fragment,s),x(po.$$.fragment,s),x(dc.$$.fragment,s),x(co.$$.fragment,s),x(mo.$$.fragment,s),x(ho.$$.fragment,s),x(hc.$$.fragment,s),x(fo.$$.fragment,s),x(fc.$$.fragment,s),x(uc.$$.fragment,s),x(go.$$.fragment,s),x(gc.$$.fragment,s),x(_o.$$.fragment,s),x(bc.$$.fragment,s),x(bo.$$.fragment,s),x($c.$$.fragment,s),x($o.$$.fragment,s),x(xc.$$.fragment,s),x(xo.$$.fragment,s),x(vc.$$.fragment,s),x(vo.$$.fragment,s),x(jc.$$.fragment,s),x(Dc.$$.fragment,s),x(kc.$$.fragment,s),x(Ic.$$.fragment,s),x(jo.$$.fragment,s),x(qc.$$.fragment,s),x(wo.$$.fragment,s),x(Tc.$$.fragment,s),x(Nc.$$.fragment,s),x(Pc.$$.fragment,s),x(Lc.$$.fragment,s),x(Ac.$$.fragment,s),x(Fc.$$.fragment,s),x(Oc.$$.fragment,s),x(Sc.$$.fragment,s),x(Cc.$$.fragment,s),x(zc.$$.fragment,s),x(Vc.$$.fragment,s),x(Uc.$$.fragment,s),x(Mc.$$.fragment,s),x(Rc.$$.fragment,s),x(Bc.$$.fragment,s),x(Hc.$$.fragment,s),x(Gc.$$.fragment,s),x(Wc.$$.fragment,s),x(Kc.$$.fragment,s),x(Yc.$$.fragment,s),x(Jc.$$.fragment,s),x(Zc.$$.fragment,s),x(Xc.$$.fragment,s),x(Ao.$$.fragment,s),x(Qc.$$.fragment,s),x(Fo.$$.fragment,s),x(ed.$$.fragment,s),x(Oo.$$.fragment,s),x(td.$$.fragment,s),x(So.$$.fragment,s),x(ad.$$.fragment,s),x(sd.$$.fragment,s),x(Co.$$.fragment,s),x(rd.$$.fragment,s),x(zo.$$.fragment,s),x(od.$$.fragment,s),x(Vo.$$.fragment,s),x(ld.$$.fragment,s),x(pd.$$.fragment,s),x(dd.$$.fragment,s),x(hd.$$.fragment,s),x(fd.$$.fragment,s),x(ud.$$.fragment,s),x(Ro.$$.fragment,s),x(gd.$$.fragment,s),x(Bo.$$.fragment,s),x(_d.$$.fragment,s),x(Ho.$$.fragment,s),x(bd.$$.fragment,s),x(Wo.$$.fragment,s),x(xd.$$.fragment,s),x(Ko.$$.fragment,s),x(vd.$$.fragment,s),x(Yo.$$.fragment,s),x(yd.$$.fragment,s),x(Jo.$$.fragment,s),x(jd.$$.fragment,s),x(Zo.$$.fragment,s),x(wd.$$.fragment,s),x(Xo.$$.fragment,s),x(Dd.$$.fragment,s),x(Qo.$$.fragment,s),x(kd.$$.fragment,s),x(el.$$.fragment,s),x(Ed.$$.fragment,s),x(tl.$$.fragment,s),x(Id.$$.fragment,s),x(al.$$.fragment,s),x(Td.$$.fragment,s),x(sl.$$.fragment,s),x(Pd.$$.fragment,s),x(Ld.$$.fragment,s),x(rl.$$.fragment,s),x(Fd.$$.fragment,s),x(ol.$$.fragment,s),x(Od.$$.fragment,s),x(ll.$$.fragment,s),x(Sd.$$.fragment,s),x(il.$$.fragment,s),x(Cd.$$.fragment,s),x(pl.$$.fragment,s),x(zd.$$.fragment,s),x(cl.$$.fragment,s),x(Vd.$$.fragment,s),x(dl.$$.fragment,s),x(Md.$$.fragment,s),x(ml.$$.fragment,s),x(Rd.$$.fragment,s),x(hl.$$.fragment,s),x(Hd.$$.fragment,s),x(fl.$$.fragment,s),x(Gd.$$.fragment,s),x(ul.$$.fragment,s),x(gl.$$.fragment,s),x(Kd.$$.fragment,s),x(_l.$$.fragment,s),x(Yd.$$.fragment,s),x(bl.$$.fragment,s),x(Jd.$$.fragment,s),x($l.$$.fragment,s),x(Zd.$$.fragment,s),x(xl.$$.fragment,s),x(Xd.$$.fragment,s),x(vl.$$.fragment,s),x(Qd.$$.fragment,s),x(em.$$.fragment,s),x(tm.$$.fragment,s),x(am.$$.fragment,s),x(wl.$$.fragment,s),x(sm.$$.fragment,s),x(Dl.$$.fragment,s),x(nm.$$.fragment,s),x(kl.$$.fragment,s),x(rm.$$.fragment,s),x(om.$$.fragment,s),x(El.$$.fragment,s),x(im.$$.fragment,s),x(Il.$$.fragment,s),x(pm.$$.fragment,s),x(ql.$$.fragment,s),x(cm.$$.fragment,s),x(Tl.$$.fragment,s),x(mm.$$.fragment,s),x(Nl.$$.fragment,s),x(fm.$$.fragment,s),x(Pl.$$.fragment,s),x(gm.$$.fragment,s),x(_m.$$.fragment,s),x(bm.$$.fragment,s),x($m.$$.fragment,s),x(xm.$$.fragment,s),x(vm.$$.fragment,s),x(ym.$$.fragment,s),x(jm.$$.fragment,s),x(wm.$$.fragment,s),x(Dm.$$.fragment,s),x(km.$$.fragment,s),x(Em.$$.fragment,s),x(Im.$$.fragment,s),x(qm.$$.fragment,s),x(Tm.$$.fragment,s),x(Nm.$$.fragment,s),x(Pm.$$.fragment,s),x(Lm.$$.fragment,s),x(Sl.$$.fragment,s),x(Fm.$$.fragment,s),x(Cl.$$.fragment,s),x(Om.$$.fragment,s),x(zl.$$.fragment,s),x(Cm.$$.fragment,s),x(Vl.$$.fragment,s),x(zm.$$.fragment,s),x(Ul.$$.fragment,s),x(Vm.$$.fragment,s),x(Ml.$$.fragment,s),x(Um.$$.fragment,s),x(Rl.$$.fragment,s),x(Mm.$$.fragment,s),x(Bl.$$.fragment,s),x(Rm.$$.fragment,s),x(Hl.$$.fragment,s),x(Bm.$$.fragment,s),x(Hm.$$.fragment,s),x(Wl.$$.fragment,s),x(Zm.$$.fragment,s),x(Xm.$$.fragment,s),x(Qm.$$.fragment,s),x(eh.$$.fragment,s),x(th.$$.fragment,s),x(ah.$$.fragment,s),x(sh.$$.fragment,s),x(nh.$$.fragment,s),x(rh.$$.fragment,s),x(ai.$$.fragment,s),x(oh.$$.fragment,s),x(si.$$.fragment,s),x(lh.$$.fragment,s),x(ih.$$.fragment,s),x(ch.$$.fragment,s),x(dh.$$.fragment,s),x(mh.$$.fragment,s),x(hh.$$.fragment,s),x(oi.$$.fragment,s),x(uh.$$.fragment,s),x(gh.$$.fragment,s),x(ii.$$.fragment,s),x(_h.$$.fragment,s),x($h.$$.fragment,s),x(vh.$$.fragment,s),x(jh.$$.fragment,s),x(Dh.$$.fragment,s),x(kh.$$.fragment,s),x(Nh.$$.fragment,s),x(Ph.$$.fragment,s),x(Lh.$$.fragment,s),x(Ah.$$.fragment,s),x(Fh.$$.fragment,s),x(Oh.$$.fragment,s),x(Mh.$$.fragment,s),x(Rh.$$.fragment,s),x(Bh.$$.fragment,s),x(Hh.$$.fragment,s),x(Gh.$$.fragment,s),x(Wh.$$.fragment,s),x(Kh.$$.fragment,s),x(Yh.$$.fragment,s),x(Zh.$$.fragment,s),x(Xh.$$.fragment,s),x(Qh.$$.fragment,s),x(ef.$$.fragment,s),x(tf.$$.fragment,s),x(af.$$.fragment,s),x(sf.$$.fragment,s),x(nf.$$.fragment,s),x(rf.$$.fragment,s),x(ki.$$.fragment,s),x(Ei.$$.fragment,s),x(Ii.$$.fragment,s),x(qi.$$.fragment,s),x(Ti.$$.fragment,s),x(pf.$$.fragment,s),x(cf.$$.fragment,s),x(df.$$.fragment,s),x(mf.$$.fragment,s),x(hf.$$.fragment,s),y7=!0)},o(s){v(t.$$.fragment,s),v(oa.$$.fragment,s),v(cp.$$.fragment,s),v(dp.$$.fragment,s),v(vr.$$.fragment,s),v(hp.$$.fragment,s),v(yr.$$.fragment,s),v(fp.$$.fragment,s),v(up.$$.fragment,s),v(gp.$$.fragment,s),v(Dr.$$.fragment,s),v(_p.$$.fragment,s),v(kr.$$.fragment,s),v(bp.$$.fragment,s),v($p.$$.fragment,s),v(xp.$$.fragment,s),v(qr.$$.fragment,s),v(jp.$$.fragment,s),v(wp.$$.fragment,s),v(Nr.$$.fragment,s),v(Dp.$$.fragment,s),v(Pr.$$.fragment,s),v(kp.$$.fragment,s),v(Lr.$$.fragment,s),v(Ep.$$.fragment,s),v(Fr.$$.fragment,s),v(qp.$$.fragment,s),v(Or.$$.fragment,s),v(Tp.$$.fragment,s),v(Sr.$$.fragment,s),v(Np.$$.fragment,s),v(Cr.$$.fragment,s),v(Pp.$$.fragment,s),v(zr.$$.fragment,s),v(Lp.$$.fragment,s),v(Vr.$$.fragment,s),v(Ap.$$.fragment,s),v(Ur.$$.fragment,s),v(Fp.$$.fragment,s),v(Mr.$$.fragment,s),v(Op.$$.fragment,s),v(Rr.$$.fragment,s),v(Sp.$$.fragment,s),v(Br.$$.fragment,s),v(Cp.$$.fragment,s),v(Hr.$$.fragment,s),v(Vp.$$.fragment,s),v(Gr.$$.fragment,s),v(Up.$$.fragment,s),v(Rp.$$.fragment,s),v(Bp.$$.fragment,s),v(Kr.$$.fragment,s),v(Hp.$$.fragment,s),v(Yr.$$.fragment,s),v(Gp.$$.fragment,s),v(Jr.$$.fragment,s),v(Kp.$$.fragment,s),v(Zr.$$.fragment,s),v(Jp.$$.fragment,s),v(Xr.$$.fragment,s),v(Zp.$$.fragment,s),v(Xp.$$.fragment,s),v(eo.$$.fragment,s),v(Qp.$$.fragment,s),v(to.$$.fragment,s),v(tc.$$.fragment,s),v(ao.$$.fragment,s),v(ac.$$.fragment,s),v(so.$$.fragment,s),v(sc.$$.fragment,s),v(no.$$.fragment,s),v(nc.$$.fragment,s),v(ro.$$.fragment,s),v(rc.$$.fragment,s),v(oo.$$.fragment,s),v(lc.$$.fragment,s),v(lo.$$.fragment,s),v(pc.$$.fragment,s),v(io.$$.fragment,s),v(cc.$$.fragment,s),v(po.$$.fragment,s),v(dc.$$.fragment,s),v(co.$$.fragment,s),v(mo.$$.fragment,s),v(ho.$$.fragment,s),v(hc.$$.fragment,s),v(fo.$$.fragment,s),v(fc.$$.fragment,s),v(uc.$$.fragment,s),v(go.$$.fragment,s),v(gc.$$.fragment,s),v(_o.$$.fragment,s),v(bc.$$.fragment,s),v(bo.$$.fragment,s),v($c.$$.fragment,s),v($o.$$.fragment,s),v(xc.$$.fragment,s),v(xo.$$.fragment,s),v(vc.$$.fragment,s),v(vo.$$.fragment,s),v(jc.$$.fragment,s),v(Dc.$$.fragment,s),v(kc.$$.fragment,s),v(Ic.$$.fragment,s),v(jo.$$.fragment,s),v(qc.$$.fragment,s),v(wo.$$.fragment,s),v(Tc.$$.fragment,s),v(Nc.$$.fragment,s),v(Pc.$$.fragment,s),v(Lc.$$.fragment,s),v(Ac.$$.fragment,s),v(Fc.$$.fragment,s),v(Oc.$$.fragment,s),v(Sc.$$.fragment,s),v(Cc.$$.fragment,s),v(zc.$$.fragment,s),v(Vc.$$.fragment,s),v(Uc.$$.fragment,s),v(Mc.$$.fragment,s),v(Rc.$$.fragment,s),v(Bc.$$.fragment,s),v(Hc.$$.fragment,s),v(Gc.$$.fragment,s),v(Wc.$$.fragment,s),v(Kc.$$.fragment,s),v(Yc.$$.fragment,s),v(Jc.$$.fragment,s),v(Zc.$$.fragment,s),v(Xc.$$.fragment,s),v(Ao.$$.fragment,s),v(Qc.$$.fragment,s),v(Fo.$$.fragment,s),v(ed.$$.fragment,s),v(Oo.$$.fragment,s),v(td.$$.fragment,s),v(So.$$.fragment,s),v(ad.$$.fragment,s),v(sd.$$.fragment,s),v(Co.$$.fragment,s),v(rd.$$.fragment,s),v(zo.$$.fragment,s),v(od.$$.fragment,s),v(Vo.$$.fragment,s),v(ld.$$.fragment,s),v(pd.$$.fragment,s),v(dd.$$.fragment,s),v(hd.$$.fragment,s),v(fd.$$.fragment,s),v(ud.$$.fragment,s),v(Ro.$$.fragment,s),v(gd.$$.fragment,s),v(Bo.$$.fragment,s),v(_d.$$.fragment,s),v(Ho.$$.fragment,s),v(bd.$$.fragment,s),v(Wo.$$.fragment,s),v(xd.$$.fragment,s),v(Ko.$$.fragment,s),v(vd.$$.fragment,s),v(Yo.$$.fragment,s),v(yd.$$.fragment,s),v(Jo.$$.fragment,s),v(jd.$$.fragment,s),v(Zo.$$.fragment,s),v(wd.$$.fragment,s),v(Xo.$$.fragment,s),v(Dd.$$.fragment,s),v(Qo.$$.fragment,s),v(kd.$$.fragment,s),v(el.$$.fragment,s),v(Ed.$$.fragment,s),v(tl.$$.fragment,s),v(Id.$$.fragment,s),v(al.$$.fragment,s),v(Td.$$.fragment,s),v(sl.$$.fragment,s),v(Pd.$$.fragment,s),v(Ld.$$.fragment,s),v(rl.$$.fragment,s),v(Fd.$$.fragment,s),v(ol.$$.fragment,s),v(Od.$$.fragment,s),v(ll.$$.fragment,s),v(Sd.$$.fragment,s),v(il.$$.fragment,s),v(Cd.$$.fragment,s),v(pl.$$.fragment,s),v(zd.$$.fragment,s),v(cl.$$.fragment,s),v(Vd.$$.fragment,s),v(dl.$$.fragment,s),v(Md.$$.fragment,s),v(ml.$$.fragment,s),v(Rd.$$.fragment,s),v(hl.$$.fragment,s),v(Hd.$$.fragment,s),v(fl.$$.fragment,s),v(Gd.$$.fragment,s),v(ul.$$.fragment,s),v(gl.$$.fragment,s),v(Kd.$$.fragment,s),v(_l.$$.fragment,s),v(Yd.$$.fragment,s),v(bl.$$.fragment,s),v(Jd.$$.fragment,s),v($l.$$.fragment,s),v(Zd.$$.fragment,s),v(xl.$$.fragment,s),v(Xd.$$.fragment,s),v(vl.$$.fragment,s),v(Qd.$$.fragment,s),v(em.$$.fragment,s),v(tm.$$.fragment,s),v(am.$$.fragment,s),v(wl.$$.fragment,s),v(sm.$$.fragment,s),v(Dl.$$.fragment,s),v(nm.$$.fragment,s),v(kl.$$.fragment,s),v(rm.$$.fragment,s),v(om.$$.fragment,s),v(El.$$.fragment,s),v(im.$$.fragment,s),v(Il.$$.fragment,s),v(pm.$$.fragment,s),v(ql.$$.fragment,s),v(cm.$$.fragment,s),v(Tl.$$.fragment,s),v(mm.$$.fragment,s),v(Nl.$$.fragment,s),v(fm.$$.fragment,s),v(Pl.$$.fragment,s),v(gm.$$.fragment,s),v(_m.$$.fragment,s),v(bm.$$.fragment,s),v($m.$$.fragment,s),v(xm.$$.fragment,s),v(vm.$$.fragment,s),v(ym.$$.fragment,s),v(jm.$$.fragment,s),v(wm.$$.fragment,s),v(Dm.$$.fragment,s),v(km.$$.fragment,s),v(Em.$$.fragment,s),v(Im.$$.fragment,s),v(qm.$$.fragment,s),v(Tm.$$.fragment,s),v(Nm.$$.fragment,s),v(Pm.$$.fragment,s),v(Lm.$$.fragment,s),v(Sl.$$.fragment,s),v(Fm.$$.fragment,s),v(Cl.$$.fragment,s),v(Om.$$.fragment,s),v(zl.$$.fragment,s),v(Cm.$$.fragment,s),v(Vl.$$.fragment,s),v(zm.$$.fragment,s),v(Ul.$$.fragment,s),v(Vm.$$.fragment,s),v(Ml.$$.fragment,s),v(Um.$$.fragment,s),v(Rl.$$.fragment,s),v(Mm.$$.fragment,s),v(Bl.$$.fragment,s),v(Rm.$$.fragment,s),v(Hl.$$.fragment,s),v(Bm.$$.fragment,s),v(Hm.$$.fragment,s),v(Wl.$$.fragment,s),v(Zm.$$.fragment,s),v(Xm.$$.fragment,s),v(Qm.$$.fragment,s),v(eh.$$.fragment,s),v(th.$$.fragment,s),v(ah.$$.fragment,s),v(sh.$$.fragment,s),v(nh.$$.fragment,s),v(rh.$$.fragment,s),v(ai.$$.fragment,s),v(oh.$$.fragment,s),v(si.$$.fragment,s),v(lh.$$.fragment,s),v(ih.$$.fragment,s),v(ch.$$.fragment,s),v(dh.$$.fragment,s),v(mh.$$.fragment,s),v(hh.$$.fragment,s),v(oi.$$.fragment,s),v(uh.$$.fragment,s),v(gh.$$.fragment,s),v(ii.$$.fragment,s),v(_h.$$.fragment,s),v($h.$$.fragment,s),v(vh.$$.fragment,s),v(jh.$$.fragment,s),v(Dh.$$.fragment,s),v(kh.$$.fragment,s),v(Nh.$$.fragment,s),v(Ph.$$.fragment,s),v(Lh.$$.fragment,s),v(Ah.$$.fragment,s),v(Fh.$$.fragment,s),v(Oh.$$.fragment,s),v(Mh.$$.fragment,s),v(Rh.$$.fragment,s),v(Bh.$$.fragment,s),v(Hh.$$.fragment,s),v(Gh.$$.fragment,s),v(Wh.$$.fragment,s),v(Kh.$$.fragment,s),v(Yh.$$.fragment,s),v(Zh.$$.fragment,s),v(Xh.$$.fragment,s),v(Qh.$$.fragment,s),v(ef.$$.fragment,s),v(tf.$$.fragment,s),v(af.$$.fragment,s),v(sf.$$.fragment,s),v(nf.$$.fragment,s),v(rf.$$.fragment,s),v(ki.$$.fragment,s),v(Ei.$$.fragment,s),v(Ii.$$.fragment,s),v(qi.$$.fragment,s),v(Ti.$$.fragment,s),v(pf.$$.fragment,s),v(cf.$$.fragment,s),v(df.$$.fragment,s),v(mf.$$.fragment,s),v(hf.$$.fragment,s),y7=!1},d(s){a(c),s&&a(g),s&&a(f),y(t),s&&a($r),s&&a(Se),y(oa),s&&a(Lw),s&&a(Z),y(cp),y(dp),y(vr),y(hp),y(yr),s&&a(Aw),s&&a(Qs),y(fp),s&&a(Fw),s&&a(wr),s&&a(Ow),s&&a(I),y(up),y(gp),y(Dr),y(_p),y(kr),y(bp),y($p),y(xp),y(qr),y(jp),y(wp),y(Nr),y(Dp),y(Pr),y(kp),y(Lr),y(Ep),y(Fr),y(qp),y(Or),y(Tp),y(Sr),y(Np),y(Cr),y(Pp),y(zr),y(Lp),y(Vr),y(Ap),y(Ur),y(Fp),y(Mr),y(Op),y(Rr),y(Sp),y(Br),y(Cp),y(Hr),y(Vp),y(Gr),y(Up),y(Rp),y(Bp),y(Kr),y(Hp),y(Yr),y(Gp),y(Jr),y(Kp),y(Zr),y(Jp),y(Xr),y(Zp),y(Xp),y(eo),y(Qp),y(to),y(tc),y(ao),y(ac),y(so),y(sc),y(no),y(nc),y(ro),y(rc),y(oo),y(lc),y(lo),y(pc),y(io),y(cc),y(po),y(dc),y(co),y(mo),y(ho),y(hc),y(fo),y(fc),y(uc),y(go),y(gc),y(_o),y(bc),y(bo),y($c),y($o),y(xc),y(xo),y(vc),y(vo),y(jc),y(Dc),y(kc),y(Ic),y(jo),y(qc),y(wo),y(Tc),y(Nc),y(Pc),y(Lc),y(Ac),y(Fc),y(Oc),y(Sc),y(Cc),y(zc),y(Vc),y(Uc),y(Mc),y(Rc),y(Bc),y(Hc),y(Gc),y(Wc),y(Kc),y(Yc),y(Jc),y(Zc),y(Xc),y(Ao),y(Qc),y(Fo),y(ed),y(Oo),y(td),y(So),y(ad),y(sd),y(Co),s&&a(Sw),s&&a(St),y(rd),y(zo),s&&a(Cw),s&&a(X),y(od),y(Vo),s&&a(zw),s&&a(he),y(ld),s&&a(Vw),s&&a(fe),y(pd),s&&a(Uw),s&&a(ue),y(dd),s&&a(Mw),s&&a(gn),y(hd),s&&a(Rw),s&&a(Mo),s&&a(Bw),s&&a(L),y(fd),y(ud),y(Ro),y(gd),y(Bo),y(_d),y(Ho),y(bd),y(Wo),y(xd),y(Ko),y(vd),y(Yo),y(yd),y(Jo),y(jd),y(Zo),y(wd),y(Xo),y(Dd),y(Qo),y(kd),y(el),y(Ed),y(tl),y(Id),y(al),y(Td),y(sl),y(Pd),y(Ld),y(rl),y(Fd),y(ol),y(Od),y(ll),y(Sd),y(il),y(Cd),y(pl),y(zd),y(cl),y(Vd),y(dl),y(Md),y(ml),y(Rd),y(hl),y(Hd),y(fl),y(Gd),y(ul),y(gl),y(Kd),y(_l),y(Yd),y(bl),y(Jd),y($l),y(Zd),y(xl),y(Xd),y(vl),y(Qd),s&&a(Hw),s&&a(Ku),s&&a(Gw),s&&a(qn),y(em),s&&a(Ww),s&&a(jl),s&&a(Kw),s&&a(F),y(tm),y(am),y(wl),y(sm),y(Dl),y(nm),y(kl),y(rm),y(om),y(El),y(im),y(Il),y(pm),y(ql),y(cm),y(Tl),y(mm),y(Nl),y(fm),y(Pl),y(gm),y(_m),y(bm),y($m),y(xm),y(vm),y(ym),y(jm),y(wm),y(Dm),y(km),y(Em),y(Im),y(qm),y(Tm),s&&a(Yw),s&&a(Pn),y(Nm),s&&a(Jw),s&&a(Ol),s&&a(Zw),s&&a(U),y(Pm),y(Lm),y(Sl),y(Fm),y(Cl),y(Om),y(zl),y(Cm),y(Vl),y(zm),y(Ul),y(Vm),y(Ml),y(Um),y(Rl),y(Mm),y(Bl),y(Rm),y(Hl),s&&a(Xw),s&&a(Fn),y(Bm),s&&a(Qw),s&&a(z),y(Hm),y(Wl),y(Zm),y(Xm),y(Qm),y(eh),y(th),y(ah),y(sh),y(nh),y(rh),y(ai),y(oh),y(si),s&&a(e7),s&&a(On),y(lh),s&&a(t7),s&&a(Q),y(ih),y(ch),y(dh),s&&a(a7),s&&a(Wt),y(mh),s&&a(s7),s&&a(ee),y(hh),y(oi),y(uh),s&&a(n7),s&&a(te),y(gh),y(ii),y(_h),s&&a(r7),s&&a(bh),y($h),s&&a(o7),s&&a(xh),y(vh),s&&a(l7),s&&a(yh),y(jh),s&&a(i7),s&&a(wh),y(Dh),s&&a(p7),s&&a(M),y(kh),y(Nh),y(Ph),y(Lh),y(Ah),y(Fh),s&&a(c7),s&&a(R),y(Oh),y(Mh),y(Rh),y(Bh),y(Hh),y(Gh),s&&a(d7),s&&a(Rn),y(Wh),s&&a(m7),s&&a(ae),y(Kh),y(Yh),y(Zh),s&&a(h7),s&&a(Bn),y(Xh),s&&a(f7),s&&a(Ds),s&&a(u7),s&&a(se),y(Qh),y(ef),y(tf),y(af),y(sf),s&&a(g7),s&&a(Hn),y(nf),s&&a(_7),s&&a(S),y(rf),y(ki),y(Ei),y(Ii),y(qi),y(Ti),y(pf),s&&a(b7),s&&a(Kn),y(cf),s&&a($7),s&&a(Jn),y(df),s&&a(x7),s&&a(Zn),y(mf),s&&a(v7),s&&a(Xn),y(hf)}}}const ere={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.IterableDatasetDict",title:"IterableDatasetDict"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function tre(k){return Gae(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ire extends Mae{constructor(c){super();Rae(this,c,tre,Qne,Bae,{})}}export{ire as default,ere as metadata};
