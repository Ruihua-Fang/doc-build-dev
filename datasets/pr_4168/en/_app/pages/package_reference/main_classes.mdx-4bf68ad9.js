import{S as Nse,i as Pse,s as Ase,e as a,k as l,w as p,t as r,M as Lse,c as s,d as t,m as d,a as n,x as m,h as o,b as c,F as e,g as x,y as h,q as f,o as u,B as g,v as Fse}from"../../chunks/vendor-8138ceec.js";import{T as qse}from"../../chunks/Tip-12722dfc.js";import{D as _}from"../../chunks/Docstring-fd69b455.js";import{C as D}from"../../chunks/CodeBlock-fc89709f.js";import{I as Wt}from"../../chunks/IconCopyLink-2dd3a6ac.js";function Ose(nw){let F,rn,Y,Be,ss,Pe,ni,ns,ha,on,Ae;return{c(){F=a("p"),rn=r("A "),Y=a("a"),Be=r("datasets.Sequence"),ss=r(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),Pe=a("code"),ni=r("list"),ns=r(` instead of the
`),ha=a("a"),on=r("datasets.Sequence"),Ae=r("."),this.h()},l(me){F=s(me,"P",{});var J=n(F);rn=o(J,"A "),Y=s(J,"A",{href:!0});var fa=n(Y);Be=o(fa,"datasets.Sequence"),fa.forEach(t),ss=o(J,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),Pe=s(J,"CODE",{});var fh=n(Pe);ni=o(fh,"list"),fh.forEach(t),ns=o(J,` instead of the
`),ha=s(J,"A",{href:!0});var ln=n(ha);on=o(ln,"datasets.Sequence"),ln.forEach(t),Ae=o(J,"."),J.forEach(t),this.h()},h(){c(Y,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Sequence"),c(ha,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Sequence")},m(me,J){x(me,F,J),e(F,rn),e(F,Y),e(Y,Be),e(F,ss),e(F,Pe),e(Pe,ni),e(F,ns),e(F,ha),e(ha,on),e(F,Ae)},d(me){me&&t(F)}}}function Sse(nw){let F,rn,Y,Be,ss,Pe,ni,ns,ha,on,Ae,me,J,fa,fh,ln,P4,rw,H,ri,A4,bg,L4,F4,uh,vg,q4,O4,S4,yg,C4,z4,He,oi,V4,ii,U4,xg,M4,R4,B4,$g,H4,G4,wg,W4,K4,dn,li,Y4,rs,J4,Dg,X4,Z4,Eg,Q4,e7,ow,os,cn,jg,di,t7,kg,a7,iw,pn,s7,gh,n7,r7,lw,b,ci,o7,Ig,i7,l7,he,pi,d7,Tg,c7,p7,Ng,Pg,m7,h7,Ag,f7,u7,mi,g7,fe,hi,_7,Lg,b7,v7,Fg,qg,y7,x7,Og,$7,w7,fi,D7,mn,ui,E7,Sg,j7,k7,hn,gi,I7,Cg,T7,N7,X,_i,P7,Kt,A7,zg,L7,F7,Vg,q7,O7,_h,S7,C7,z7,bi,V7,Ug,U7,M7,R7,vi,B7,Mg,H7,G7,W7,Rg,K7,Y7,yi,J7,fn,xi,X7,Yt,Z7,Bg,Q7,e6,Hg,t6,a6,bh,s6,n6,r6,Ge,$i,o6,Gg,i6,l6,Wg,d6,c6,wi,p6,We,Di,m6,Kg,h6,f6,Yg,u6,g6,Ei,_6,Ke,ji,b6,Jg,v6,y6,Xg,x6,$6,ki,w6,Ye,Ii,D6,Ti,E6,un,j6,Zg,k6,I6,T6,N6,Qg,P6,A6,Ni,L6,Je,Pi,F6,e_,q6,O6,t_,S6,C6,Ai,z6,Xe,Li,V6,a_,U6,M6,s_,R6,B6,Fi,H6,ue,qi,G6,n_,W6,K6,r_,Y6,J6,o_,X6,Z6,Oi,Q6,Ze,Si,e8,i_,t8,a8,l_,s8,n8,Ci,r8,Qe,zi,o8,d_,i8,l8,c_,d8,c8,Vi,p8,et,Ui,m8,p_,h8,f8,m_,u8,g8,Mi,_8,ge,Ri,b8,h_,v8,y8,is,x8,vh,$8,w8,f_,D8,E8,j8,u_,k8,I8,Bi,T8,tt,Hi,N8,g_,P8,A8,__,L8,F8,Gi,q8,at,Wi,O8,b_,S8,C8,v_,z8,V8,Ki,U8,st,Yi,M8,Ji,R8,y_,B8,H8,G8,x_,W8,K8,Xi,Y8,nt,Zi,J8,$_,X8,Z8,w_,Q8,eE,Qi,tE,ua,el,aE,D_,sE,nE,tl,rE,yh,oE,iE,lE,gn,al,dE,ls,cE,E_,pE,mE,j_,hE,fE,uE,Z,sl,gE,Le,_E,k_,bE,vE,I_,yE,xE,T_,$E,wE,xh,DE,EE,jE,Fe,kE,N_,IE,TE,P_,NE,PE,A_,AE,LE,L_,FE,qE,OE,F_,SE,CE,q_,zE,VE,nl,UE,rt,rl,ME,ot,RE,O_,BE,HE,S_,GE,WE,$h,KE,YE,wh,JE,XE,C_,ZE,QE,ol,ej,_e,il,tj,ll,aj,z_,sj,nj,rj,Dh,oj,V_,ij,lj,U_,dj,cj,dl,pj,Q,cl,mj,Jt,hj,M_,fj,uj,R_,gj,_j,B_,bj,vj,yj,pl,xj,Eh,$j,wj,Dj,ds,Ej,jh,jj,kj,H_,Ij,Tj,Nj,G_,Pj,Aj,ml,Lj,ee,hl,Fj,cs,qj,W_,Oj,Sj,K_,Cj,zj,Vj,ps,Uj,kh,Mj,Rj,Ih,Bj,Hj,Gj,ms,Wj,Th,Kj,Yj,Y_,Jj,Xj,Zj,J_,Qj,e3,fl,t3,_n,ul,a3,X_,s3,n3,be,gl,r3,Z_,o3,i3,Q_,l3,d3,e1,c3,p3,_l,m3,te,bl,h3,t1,f3,u3,vl,g3,a1,_3,b3,v3,hs,s1,y3,x3,n1,$3,w3,oe,D3,r1,E3,j3,o1,k3,I3,i1,T3,N3,l1,P3,A3,d1,L3,F3,q3,c1,O3,S3,yl,C3,it,xl,z3,p1,V3,U3,m1,M3,R3,$l,B3,lt,wl,H3,h1,G3,W3,f1,K3,Y3,Dl,J3,ve,El,X3,u1,Z3,Q3,g1,ek,tk,_1,ak,sk,jl,nk,ye,kl,rk,b1,ok,ik,v1,lk,dk,y1,ck,pk,Il,mk,xe,Tl,hk,O,fk,x1,uk,gk,$1,_k,bk,w1,vk,yk,D1,xk,$k,E1,wk,Dk,j1,Ek,jk,k1,kk,Ik,Tk,Nl,Nk,I1,Pk,Ak,Lk,T1,Fk,qk,Pl,Ok,M,Al,Sk,fs,Ck,N1,zk,Vk,P1,Uk,Mk,Rk,A1,Bk,Hk,Ll,Gk,L1,Wk,Kk,Yk,F1,Jk,Xk,q1,Zk,Qk,Fl,e5,dt,ql,t5,O1,a5,s5,S1,n5,r5,Ol,o5,ct,Sl,i5,C1,l5,d5,z1,c5,p5,Cl,m5,pt,zl,h5,us,f5,Nh,u5,g5,V1,_5,b5,v5,U1,y5,x5,Vl,$5,mt,Ul,w5,Xt,D5,M1,E5,j5,Ph,k5,I5,R1,T5,N5,P5,B1,A5,L5,Ml,F5,bn,Rl,q5,H1,O5,S5,ht,Bl,C5,G1,z5,V5,W1,U5,M5,Hl,R5,ft,Gl,B5,Wl,H5,K1,G5,W5,K5,Y1,Y5,J5,Kl,X5,ut,Yl,Z5,J1,Q5,eI,X1,tI,aI,Jl,sI,gt,Xl,nI,Z1,rI,oI,Q1,iI,lI,Zl,dI,_t,Ql,cI,eb,pI,mI,tb,hI,fI,ed,uI,$e,td,gI,gs,_I,ab,bI,vI,sb,yI,xI,$I,nb,Ah,wI,ad,DI,EI,rb,jI,kI,sd,II,ga,nd,TI,Zt,NI,ob,PI,AI,ib,LI,FI,lb,qI,OI,SI,db,Lh,CI,rd,zI,VI,vn,od,UI,cb,MI,RI,_a,id,BI,pb,HI,GI,ld,WI,mb,KI,YI,JI,bt,dd,XI,hb,ZI,QI,fb,e9,t9,cd,a9,vt,pd,s9,ub,n9,r9,gb,o9,i9,md,l9,yn,hd,d9,_b,c9,p9,xn,fd,m9,bb,h9,f9,$n,ud,u9,vb,g9,_9,wn,gd,b9,yb,v9,y9,Dn,_d,x9,xb,$9,w9,En,bd,D9,$b,E9,j9,jn,vd,k9,wb,I9,T9,kn,yd,N9,Fh,qh,P9,A9,L9,In,xd,F9,Oh,Sh,q9,O9,S9,Ch,$d,C9,zh,wd,z9,Vh,Dd,V9,Uh,Ed,U9,Mh,jd,M9,Rh,kd,R9,Bh,Id,B9,Hh,Td,H9,Gh,Nd,G9,Wh,Pd,W9,Kh,Ad,K9,Yh,Ld,Y9,Jh,Fd,J9,yt,qd,X9,Db,Z9,Q9,Eb,eT,tT,Od,aT,xt,Sd,sT,jb,nT,rT,kb,oT,iT,Cd,lT,$t,zd,dT,Ib,cT,pT,Tb,mT,hT,Vd,fT,wt,Ud,uT,Nb,gT,_T,Pb,bT,vT,Md,yT,ba,Rd,xT,_s,$T,Xh,wT,DT,Zh,ET,jT,kT,bs,IT,Ab,TT,NT,Lb,PT,AT,LT,Dt,Bd,FT,Hd,qT,Fb,OT,ST,CT,qb,zT,VT,Gd,dw,qe,Wd,UT,vs,MT,Qh,RT,BT,ef,HT,GT,WT,Ob,KT,YT,Kd,cw,S,Yd,JT,Sb,XT,ZT,ys,QT,tf,eN,tN,af,aN,sN,nN,Oe,rN,Cb,oN,iN,zb,lN,dN,Vb,cN,pN,Ub,mN,hN,fN,Mb,uN,gN,Rb,_N,bN,Jd,pw,ie,Xd,vN,Bb,yN,xN,Hb,$N,wN,Gb,DN,EN,Se,Wb,jN,kN,Kb,IN,TN,Yb,NN,PN,Zd,AN,sf,LN,FN,qN,Qt,ON,nf,SN,CN,Jb,zN,VN,rf,UN,MN,mw,le,Qd,RN,Xb,BN,HN,Zb,GN,WN,Qb,KN,YN,Ce,ev,JN,XN,tv,ZN,QN,av,eP,tP,ec,aP,of,sP,nP,rP,ea,oP,lf,iP,lP,sv,dP,cP,df,pP,mP,hw,de,tc,hP,nv,fP,uP,rv,gP,_P,ov,bP,vP,ze,iv,yP,xP,lv,$P,wP,dv,DP,EP,ac,jP,cf,kP,IP,TP,ta,NP,pf,PP,AP,cv,LP,FP,mf,qP,OP,fw,xs,Tn,pv,sc,SP,mv,CP,uw,Nn,zP,hv,VP,UP,gw,$,nc,MP,fv,RP,BP,Pn,rc,HP,uv,GP,WP,An,oc,KP,gv,YP,JP,Ln,ic,XP,_v,ZP,QP,Fn,lc,eA,dc,tA,qn,aA,bv,sA,nA,rA,oA,On,cc,iA,vv,lA,dA,Sn,pc,cA,yv,pA,mA,va,mc,hA,xv,fA,uA,$v,gA,_A,Cn,hc,bA,wv,vA,yA,zn,fc,xA,Dv,$A,wA,Vn,uc,DA,Ev,EA,jA,ya,gc,kA,jv,IA,TA,kv,NA,PA,Et,_c,AA,Iv,LA,FA,Tv,qA,OA,Nv,SA,CA,jt,bc,zA,vc,VA,Pv,UA,MA,RA,Ve,BA,Av,HA,GA,Lv,WA,KA,Fv,YA,JA,qv,XA,ZA,QA,Ov,eL,tL,xa,yc,aL,xc,sL,Sv,nL,rL,oL,hf,iL,Cv,lL,dL,Un,$c,cL,$s,pL,zv,mL,hL,Vv,fL,uL,gL,kt,wc,_L,aa,bL,Uv,vL,yL,Mv,xL,$L,Rv,wL,DL,EL,Dc,jL,ff,kL,IL,TL,ws,NL,uf,PL,AL,Bv,LL,FL,qL,It,Ec,OL,Ds,SL,Hv,CL,zL,Gv,VL,UL,ML,Es,RL,gf,BL,HL,_f,GL,WL,KL,js,YL,Wv,JL,XL,Kv,ZL,QL,eF,Mn,jc,tF,Yv,aF,sF,$a,kc,nF,Jv,rF,oF,sa,iF,bf,lF,dF,Xv,cF,pF,Zv,mF,hF,fF,Rn,Ic,uF,Qv,gF,_F,Tt,Tc,bF,ey,vF,yF,ty,xF,$F,ks,wF,vf,DF,EF,ay,jF,kF,IF,Nt,Nc,TF,sy,NF,PF,Is,AF,yf,LF,FF,ny,qF,OF,SF,Pc,ry,CF,zF,oy,VF,UF,Bn,Ac,MF,iy,RF,BF,Hn,Lc,HF,Fc,GF,ly,WF,KF,YF,we,qc,JF,Ts,XF,dy,ZF,QF,cy,eq,tq,aq,py,sq,nq,my,rq,oq,Oc,iq,Gn,Sc,lq,Ns,dq,xf,cq,pq,hy,mq,hq,fq,Wn,Cc,uq,na,gq,fy,_q,bq,$f,vq,yq,uy,xq,$q,wq,Kn,zc,Dq,gy,Eq,jq,Yn,Vc,kq,_y,Iq,Tq,Jn,Uc,Nq,by,Pq,Aq,Xn,Mc,Lq,vy,Fq,qq,wa,Rc,Oq,Ps,Sq,wf,Cq,zq,Df,Vq,Uq,Mq,As,Rq,yy,Bq,Hq,xy,Gq,Wq,_w,Ef,bw,Ls,Zn,$y,Bc,Kq,wy,Yq,vw,Qn,Jq,jf,Xq,Zq,yw,E,Hc,Qq,Dy,eO,tO,er,Gc,aO,Ey,sO,nO,tr,Wc,rO,jy,oO,iO,ar,Kc,lO,ky,dO,cO,kf,Yc,pO,Pt,Jc,mO,Iy,hO,fO,Xc,uO,Ty,gO,_O,bO,Fs,Ny,vO,yO,Py,xO,$O,ce,wO,Ay,DO,EO,Ly,jO,kO,Fy,IO,TO,qy,NO,PO,Oy,AO,LO,FO,sr,Zc,qO,Sy,OO,SO,nr,Qc,CO,Cy,zO,VO,De,ep,UO,zy,MO,RO,Vy,BO,HO,tp,GO,Uy,WO,KO,YO,qs,JO,If,XO,ZO,Tf,QO,eS,tS,rr,ap,aS,sp,sS,My,nS,rS,oS,or,np,iS,rp,lS,Ry,dS,cS,pS,ir,op,mS,Nf,Pf,hS,fS,uS,lr,ip,gS,Af,Lf,_S,bS,vS,Ff,lp,yS,qf,dp,xS,Of,cp,$S,Sf,pp,wS,Cf,mp,DS,zf,hp,ES,Vf,fp,jS,Uf,up,kS,Mf,gp,IS,Rf,_p,TS,Bf,bp,NS,Hf,vp,PS,Gf,yp,xw,Os,dr,By,xp,AS,Hy,LS,$w,cr,FS,Gy,qS,OS,ww,P,$p,SS,At,wp,CS,Wy,zS,VS,Dp,US,Ky,MS,RS,BS,Ss,Yy,HS,GS,Jy,WS,KS,pe,YS,Xy,JS,XS,Zy,ZS,QS,Qy,eC,tC,e2,aC,sC,t2,nC,rC,oC,pr,Ep,iC,a2,lC,dC,Ee,jp,cC,s2,pC,mC,n2,hC,fC,kp,uC,r2,gC,_C,bC,Cs,vC,Wf,yC,xC,Kf,$C,wC,DC,mr,Ip,EC,o2,jC,kC,hr,Tp,IC,i2,TC,NC,fr,Np,PC,l2,AC,LC,ur,Pp,FC,d2,qC,OC,gr,Ap,SC,c2,CC,zC,_r,Lp,VC,p2,UC,Dw,zs,br,m2,Fp,MC,h2,RC,Ew,T,qp,BC,f2,HC,GC,Op,WC,u2,KC,YC,JC,Yf,g2,XC,ZC,QC,C,_2,Da,ez,Jf,tz,az,b2,sz,nz,v2,rz,oz,y2,Sp,iz,Xf,lz,dz,cz,x2,Cp,pz,$2,mz,hz,fz,zp,Ue,uz,w2,gz,_z,Zf,bz,vz,D2,yz,xz,Qf,$z,wz,Dz,vr,Ez,E2,Me,jz,eu,kz,Iz,tu,Tz,Nz,au,Pz,Az,su,Lz,Fz,qz,j2,Vp,Oz,nu,Sz,Cz,zz,k2,ra,Vz,ru,Uz,Mz,I2,Rz,Bz,T2,Hz,Gz,Wz,N2,yr,ou,Kz,Yz,iu,Jz,Xz,Zz,xr,Up,Qz,P2,eV,tV,$r,Mp,aV,A2,sV,nV,wr,Rp,rV,L2,oV,iV,Dr,Bp,lV,F2,dV,cV,Er,Hp,pV,q2,mV,hV,jr,Gp,fV,O2,uV,gV,Ea,Wp,_V,S2,bV,vV,C2,yV,xV,kr,Kp,$V,z2,wV,DV,ae,Yp,EV,V2,jV,kV,U2,IV,TV,oa,NV,lu,PV,AV,du,LV,FV,cu,qV,OV,SV,M2,CV,zV,Jp,VV,je,Xp,UV,R2,MV,RV,B2,BV,HV,H2,GV,WV,Zp,jw,Vs,Qp,KV,G2,YV,kw,G,em,JV,W2,XV,ZV,tm,QV,K2,eU,tU,aU,Us,pu,Y2,sU,nU,rU,mu,J2,oU,iU,lU,hu,X2,dU,cU,pU,Ir,am,mU,Z2,hU,fU,Tr,sm,uU,Q2,gU,Iw,ia,nm,_U,ex,bU,vU,tx,yU,Tw,z,rm,xU,fu,ax,$U,wU,DU,sx,EU,jU,om,kU,nx,IU,TU,NU,rx,PU,AU,im,LU,Nr,lm,FU,ox,qU,Nw,V,dm,OU,uu,ix,SU,CU,zU,lx,VU,UU,dx,MU,RU,cx,BU,HU,cm,GU,Pr,pm,WU,px,KU,Pw,mm,hm,Aw,fm,um,Lw,gm,_m,Fw,bm,vm,qw,A,ym,YU,mx,JU,XU,hx,ZU,QU,Ms,fx,xm,eM,ux,tM,aM,sM,Rs,$m,nM,gx,rM,oM,iM,wm,_x,lM,dM,bx,cM,pM,vx,mM,hM,Bs,Dm,fM,yx,uM,gM,_M,Hs,xx,bM,vM,$x,yM,xM,wx,$M,wM,Dx,DM,EM,ja,Em,jM,Ex,kM,IM,la,jx,TM,NM,kx,PM,AM,Ix,LM,FM,Tx,qM,OM,Ar,jm,SM,Nx,CM,zM,Lr,km,VM,Px,UM,MM,Fr,Im,RM,Ax,BM,HM,qr,Tm,GM,Lx,WM,Ow,L,Nm,KM,Fx,YM,JM,qx,XM,ZM,da,Ox,Pm,QM,Sx,eR,tR,aR,Gs,Am,sR,Cx,nR,rR,oR,Lm,zx,iR,lR,Vx,dR,cR,Ux,pR,mR,Mx,Fm,hR,Rx,fR,uR,gR,Bx,qm,_R,Hx,bR,vR,yR,ka,Om,xR,Gx,$R,wR,Re,Wx,DR,ER,Kx,jR,kR,Yx,IR,TR,Jx,NR,PR,Xx,AR,LR,Or,Sm,FR,Zx,qR,OR,Sr,Cm,SR,Qx,CR,zR,Cr,zm,VR,e$,UR,MR,zr,Vm,RR,t$,BR,Sw,Ws,Vr,a$,Um,HR,s$,GR,Cw,W,Mm,WR,n$,KR,YR,gu,r$,JR,XR,ZR,o$,QR,eB,Ur,Rm,tB,Bm,aB,i$,sB,nB,rB,Mr,Hm,oB,ca,iB,l$,lB,dB,d$,cB,pB,c$,mB,hB,zw,Ks,Rr,p$,Gm,fB,m$,uB,Vw,Ia,gB,h$,_B,bB,_u,vB,yB,Uw,K,Wm,xB,f$,$B,wB,Br,Km,DB,u$,EB,jB,Hr,Ym,kB,g$,IB,TB,Ta,Jm,NB,_$,PB,AB,b$,LB,FB,Gr,Xm,qB,v$,OB,Mw,Ys,Wr,y$,Zm,SB,x$,CB,Rw,k,Qm,zB,$$,VB,UB,w$,MB,RB,pa,BB,D$,HB,GB,E$,WB,KB,j$,YB,JB,XB,k$,ZB,QB,I$,eH,tH,T$,aH,sH,Lt,N$,nH,rH,eh,oH,iH,P$,lH,dH,th,cH,pH,mH,A$,hH,fH,L$,uH,gH,ah,_H,Js,bH,F$,vH,yH,q$,xH,$H,wH,sh,DH,ma,EH,O$,jH,kH,S$,IH,TH,C$,NH,PH,AH,nh,LH,Xs,FH,z$,qH,OH,V$,SH,CH,zH,rh,VH,U$,UH,MH,oh,RH,Kr,Yr,M$,ih,BH,R$,HH,GH,U,WH,B$,KH,YH,H$,JH,XH,G$,ZH,QH,W$,eG,tG,K$,aG,sG,Y$,nG,rG,J$,oG,iG,Bw,Zs,lh,lG,Qs,dG,X$,cG,pG,Z$,mG,hG,Hw,en,dh,fG,Q$,uG,Gw,tn,Jr,ew,ch,gG,tw,_G,Ww,an,ph,bG,aw,vG,Kw;return Pe=new Wt({}),fa=new Wt({}),ri=new _({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:`<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.
**config_kwargs &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"task_templates"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/info.py#L87"}}),oi=new _({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/info.py#L233"}}),li=new _({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""},{name:"pretty_print",val:" = False"}],parametersDescription:[{anchor:"datasets.DatasetInfo.write_to_directory.dataset_info_dir",description:"<strong>dataset_info_dir</strong> (str) &#x2014; Destination directory.",name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.write_to_directory.pretty_print",description:"<strong>pretty_print</strong> (bool, default <code>False</code>) &#x2014; If True, the JSON will be pretty-printed with the indent level of 4.",name:"pretty_print"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/info.py#L182"}}),di=new Wt({}),ci=new _({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L624"}}),pi=new _({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L4045",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),mi=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes), split="validation")
more_text = ds["text"]
ds.add_column(name="text_2", column=more_text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes), split=&quot;</span>validation<span class="hljs-string">&quot;)
&gt;&gt;&gt; more_text = ds[&quot;</span>text<span class="hljs-string">&quot;]
&gt;&gt;&gt; ds.add_column(name=&quot;</span>text_2<span class="hljs-string">&quot;, column=more_text)
Dataset({
    features: [&#x27;text&#x27;, &#x27;label&#x27;, &#x27;text_2&#x27;],
    num_rows: 1066
})</span>`}}),hi=new _({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L4278",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),fi=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
new_review = {'label': 0, 'text': 'this movie is the absolute worst thing I have ever seen'}
ds = ds.add_item(new_review)
ds[-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>new_review = {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.add_item(new_review)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[-<span class="hljs-number">1</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}`}}),ui=new _({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L690",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),gi=new _({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L725",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),_i=new _({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L753",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),yi=new D({props:{code:"ds = Dataset.from_pandas(df)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_pandas(df)'}}),xi=new _({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L805",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),$i=new _({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1182"}}),wi=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data
MemoryMappedTable
text: string
label: int64
----
text: [[<span class="hljs-string">&quot;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&quot;</span>,<span class="hljs-string">&quot;the soundtrack alone is worth the price of admission .&quot;</span>,<span class="hljs-string">&quot;rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&quot;</span>,<span class="hljs-string">&quot;beneath the film&#x27;s obvious determination to shock at any cost lies considerable skill and determination , backed by sheer nerve .&quot;</span>,<span class="hljs-string">&quot;bielinsky is a filmmaker of impressive talent .&quot;</span>,<span class="hljs-string">&quot;so beautifully acted and directed , it&#x27;s clear that washington most certainly has a new career ahead of him if he so chooses .&quot;</span>,<span class="hljs-string">&quot;a visual spectacle full of stunning images and effects .&quot;</span>,<span class="hljs-string">&quot;a gentle and engrossing character study .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s enough to watch huppert scheming , with her small , intelligent eyes as steady as any noir villain , and to enjoy the perfectly pitched web of tension that chabrol spins .&quot;</span>,<span class="hljs-string">&quot;an engrossing portrait of uncompromising artists trying to create something original against the backdrop of a corporate music industry that only seems to care about the bottom line .&quot;</span>,...,<span class="hljs-string">&quot;ultimately , jane learns her place as a girl , softens up and loses some of the intensity that made her an interesting character to begin with .&quot;</span>,<span class="hljs-string">&quot;ah-nuld&#x27;s action hero days might be over .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s clear why deuces wild , which was shot two years ago , has been gathering dust on mgm&#x27;s shelf .&quot;</span>,<span class="hljs-string">&quot;feels like nothing quite so much as a middle-aged moviemaker&#x27;s attempt to surround himself with beautiful , half-naked women .&quot;</span>,<span class="hljs-string">&quot;when the precise nature of matthew&#x27;s predicament finally comes into sharp focus , the revelation fails to justify the build-up .&quot;</span>,<span class="hljs-string">&quot;this picture is murder by numbers , and as easy to be bored by as your abc&#x27;s , despite a few whopping shootouts .&quot;</span>,<span class="hljs-string">&quot;hilarious musical comedy though stymied by accents thick as mud .&quot;</span>,<span class="hljs-string">&quot;if you are into splatter movies , then you will probably have a reasonably good time with the salton sea .&quot;</span>,<span class="hljs-string">&quot;a dull , simple-minded and stereotypical tale of drugs , death and mind-numbing indifference on the inner-city streets .&quot;</span>,<span class="hljs-string">&quot;the feature-length stretch . . . strains the show&#x27;s concept .&quot;</span>]]
label: [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,...,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]`}}),Di=new _({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1202"}}),Ei=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
[{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]`}}),ji=new _({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1220"}}),ki=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
<span class="hljs-number">2</span>`}}),Ii=new _({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1235"}}),Ni=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
<span class="hljs-number">1066</span>`}}),Pi=new _({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1252"}}),Ai=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]`}}),Li=new _({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1267"}}),Fi=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
(<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)`}}),qi=new _({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>).',name:"column"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1284",returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),Oi=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.unique('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&#x27;label&#x27;</span>)
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),Si=new _({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:""},{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1388",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ci=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
    num_rows: <span class="hljs-number">87599</span>
})`}}),zi=new _({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 10000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 10000"},{name:"num_proc",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1427",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Vi=new D({props:{code:`from datasets import load_dataset, ClassLabel, Value
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
new_features = ds.features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Ui=new _({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1503",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Mi=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Ri=new _({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1540",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Bi=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.remove_columns('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&#x27;label&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),Hi=new _({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1588",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Gi=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_column('label', 'label_new')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),Wi=new _({props:{name:"rename_columns",anchor:"datasets.Dataset.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1650",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ki=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
Dataset({
    features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),Yi=new _({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1314"}}),Xi=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq", split="validation")
ds.features
ds = ds.class_encode_column('answer')
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&#x27;answer&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Zi=new _({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1714"}}),Qi=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.__len__`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.__len__
&lt;bound method Dataset.__len__ of Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})&gt;`}}),el=new _({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1743"}}),al=new _({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1763"}}),sl=new _({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1791"}}),nl=new D({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['text', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),rl=new _({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1892"}}),ol=new D({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')
def encode(batch):
    return tokenizer(batch['text'], padding=True, truncation=True, return_tensors='pt')
ds.set_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&#x27;text&#x27;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">29353</span>,  <span class="hljs-number">2135</span>, <span class="hljs-number">15102</span>,  <span class="hljs-number">1996</span>,  <span class="hljs-number">9428</span>, <span class="hljs-number">20868</span>,  <span class="hljs-number">2890</span>,  <span class="hljs-number">8663</span>,  <span class="hljs-number">6895</span>,
         <span class="hljs-number">20470</span>,  <span class="hljs-number">2571</span>,  <span class="hljs-number">3663</span>,  <span class="hljs-number">2090</span>,  <span class="hljs-number">4603</span>,  <span class="hljs-number">3017</span>,  <span class="hljs-number">3008</span>,  <span class="hljs-number">1998</span>,  <span class="hljs-number">2037</span>, <span class="hljs-number">24211</span>,
         <span class="hljs-number">5637</span>,  <span class="hljs-number">1998</span>, <span class="hljs-number">11690</span>,  <span class="hljs-number">2336</span>,  <span class="hljs-number">1012</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),il=new _({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1863"}}),dl=new D({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['text', 'label'])
ds.format
ds.reset_format()
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),cl=new _({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1932"}}),ml=new D({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['text', 'label'])
ds.format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),hl=new _({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1981"}}),fl=new D({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example["text"], padding=True, truncation=True, return_tensors='pt')
ds = ds.with_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
         <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
         <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),ul=new _({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L2100"}}),gl=new _({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L2106",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),_l=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
<span class="hljs-number">10</span>`}}),bl=new _({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Union[Dict, Any]) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Union[Dict, Any], </em>extra_args) -&gt; Union[Dict, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Union[Dict[List], List[Any]]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]], </em>extra_args) -&gt; Union[Dict, Any]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L2153"}}),yl=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds[0:3]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the soundtrack alone is worth the price of admission .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&#x27;</span>]`}}),xl=new _({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L2750"}}),$l=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),wl=new _({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:"<strong>indices</strong> (sequence, iterable, ndarray or Series) &#x2014; List or 1D-array of integer indices for indexing.",name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L2924"}}),Dl=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.select(range(4))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.select(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">4</span>
})`}}),El=new _({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L3026"}}),jl=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation)
ds['label'][:10]
sorted_ds = ds.sort('label')
sorted_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation)
&gt;&gt;&gt; ds[&#x27;label&#x27;][:10]
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
&gt;&gt;&gt; sorted_ds = ds.sort(&#x27;label&#x27;)
&gt;&gt;&gt; sorted_ds[&#x27;label&#x27;][:10]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span>`}}),kl=new _({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L3120"}}),Il=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation)
ds['label'][:10]
shuffled_ds = ds.shuffle(seed=42)
shuffled_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation)
&gt;&gt;&gt; ds[&#x27;label&#x27;][:10]
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
&gt;&gt;&gt; shuffled_ds = ds.shuffle(seed=42)
&gt;&gt;&gt; shuffled_ds[&#x27;label&#x27;][:10]
[1, 0, 1, 1, 0, 0, 0, 0, 0, 0]</span>`}}),Tl=new _({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L3210"}}),Pl=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds = ds.train_test_split(test_size=0.2, shuffle=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, shuffle=<span class="hljs-literal">True</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">852</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">214</span>
    })
})`}}),Al=new _({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L3428"}}),Fl=new D({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds
ds.shard(num_shards=2, index=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shard(num_shards=<span class="hljs-number">2</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),ql=new _({props:{name:"to_tf_dataset",anchor:"datasets.Dataset.to_tf_dataset",parameters:[{name:"columns",val:": typing.Union[str, typing.List[str]]"},{name:"batch_size",val:": int"},{name:"shuffle",val:": bool"},{name:"collate_fn",val:": typing.Callable"},{name:"drop_remainder",val:": bool = None"},{name:"collate_fn_args",val:": typing.Dict[str, typing.Any] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str]] = None"},{name:"dummy_labels",val:": bool = False"},{name:"prefetch",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>) &#x2014; Dataset column(s) to load in the tf.data.Dataset. In general,
only columns that the model can use as input should be included here (numeric data only).`,name:"columns"},{anchor:"datasets.Dataset.to_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.
shuffle(<code>bool</code>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"batch_size"},{anchor:"datasets.Dataset.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>None</code>) &#x2014; Drop the last incomplete batch when loading. If not provided,
defaults to the same setting as shuffle.
collate_fn(<code>Callable</code>) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"drop_remainder(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.Dataset.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case it is
not necessary to actually pass the labels here, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.Dataset.to_tf_dataset.dummy_labels",description:`<strong>dummy_labels</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If no <em>label_cols</em> are set, output an array of &#x201C;dummy&#x201D; labels
with each batch. This can avoid problems with <em>fit()</em> or <em>train_on_batch()</em> that expect labels to be
a Tensor or np.ndarray, but should (hopefully) not be necessary with our standard train_step().`,name:"dummy_labels"},{anchor:"datasets.Dataset.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L305",returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),Ol=new D({props:{code:`ds_train = ds["train"].to_tf_dataset(
   columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'],
   shuffle=True,
   batch_size=16,
   collate_fn=data_collator,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds_train = ds[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>   columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
<span class="hljs-meta">... </span>   shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>   batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>   collate_fn=data_collator,
<span class="hljs-meta">... </span>)`}}),Sl=new _({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"shard_size",val:": typing.Optional[int] = 524288000"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
The size of the dataset shards to be uploaded to the hub. The dataset will be pushed in files
of the size specified here, in bytes. Defaults to a shard size of 500MB.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L3968"}}),Cl=new D({props:{code:'dataset.push_to_hub("<organization>/<dataset_id>", split="evaluation")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;evaluation&quot;</span>)'}}),zl=new _({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1015"}}),Vl=new D({props:{code:'saved_ds = ds.save_to_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>saved_ds = ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),Ul=new _({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L1115",returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Ml=new D({props:{code:'ds = load_from_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),Rl=new _({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L2855"}}),Bl=new _({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.
to_csv_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L3584",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Hl=new D({props:{code:'ds.to_csv("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_csv(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),Gl=new _({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L3697",returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),Kl=new D({props:{code:"ds.to_pandas()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_pandas()'}}),Yl=new _({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L3617",returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),Jl=new D({props:{code:"ds.to_dict()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_dict()'}}),Xl=new _({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code>
**to_json_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.</li>
</ul>`,name:"lines"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L3652",returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),Zl=new D({props:{code:'ds.to_json("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_json(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),Ql=new _({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_parquet.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_parquet.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.
parquet_writer_kwargs &#x2014; Parameters to pass to PyArrow&#x2019;s <code>pyarrow.parquet.ParquetWriter</code>`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L3734",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),ed=new D({props:{code:'ds.to_parquet("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_parquet(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),td=new _({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L4083"}}),sd=new D({props:{code:`ds = datasets.load_dataset('crime_and_punish', split='train')
ds_with_embeddings = ds.map(lambda example: {'embeddings': embed(example['line']}))
ds_with_embeddings.add_faiss_index(column='embeddings')
# query
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples('embeddings', embed('my new query'), k=10)
# save index
ds_with_embeddings.save_faiss_index('embeddings', 'my_index.faiss')

ds = datasets.load_dataset('crime_and_punish', split='train')
# load index
ds.load_faiss_index('embeddings', 'my_index.faiss')
# query
scores, retrieved_examples = ds.get_nearest_examples('embeddings', embed('my new query'), k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># save index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`}}),nd=new _({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L4156"}}),od=new _({props:{name:"save_faiss_index",anchor:"datasets.Dataset.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],parametersDescription:[{anchor:"datasets.Dataset.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/search.py#L509"}}),id=new _({props:{name:"load_faiss_index",anchor:"datasets.Dataset.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, typing.List[int], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.Dataset.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.Dataset.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/search.py#L522"}}),dd=new _({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.search">Dataset.search()</a>.
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.
Default config is:`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L4208"}}),cd=new D({props:{code:`es_client = elasticsearch.Elasticsearch()
ds = datasets.load_dataset('crime_and_punish', split='train')
ds.add_elasticsearch_index(column='line', es_client=es_client, es_index_name="my_es_index")
scores, retrieved_examples = ds.get_nearest_examples('line', 'my new query', k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>es_client = elasticsearch.Elasticsearch()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`}}),pd=new _({props:{name:"load_elasticsearch_index",anchor:"datasets.Dataset.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/search.py#L600"}}),md=new D({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),hd=new _({props:{name:"list_indexes",anchor:"datasets.Dataset.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/search.py#L422"}}),fd=new _({props:{name:"get_index",anchor:"datasets.Dataset.get_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/search.py#L426",returnType:`
<p><code>BaseIndex</code></p>
`}}),ud=new _({props:{name:"drop_index",anchor:"datasets.Dataset.drop_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/search.py#L644"}}),gd=new _({props:{name:"search",anchor:"datasets.Dataset.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/search.py#L652",returnDescription:`
<p>The retrieval scores of the retrieved examples.
indices (<code>List[List[int]]</code>): The indices of the retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[List[float]</code>)</p>
`}}),_d=new _({props:{name:"search_batch",anchor:"datasets.Dataset.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/search.py#L667",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_indices (<code>List[List[int]]</code>): The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<code>List[List[float]</code>)</p>
`}}),bd=new _({props:{name:"get_nearest_examples",anchor:"datasets.Dataset.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/search.py#L682",returnDescription:`
<p>The retrieval scores of the retrieved examples.
examples (<code>dict</code>): The retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[float]</code>)</p>
`}}),vd=new _({props:{name:"get_nearest_examples_batch",anchor:"datasets.Dataset.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/search.py#L701",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_examples (<em>List[dict]</em>): The retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<em>List[List[float]</em>)</p>
`}}),yd=new _({props:{name:"info",anchor:"datasets.Dataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L144"}}),xd=new _({props:{name:"split",anchor:"datasets.Dataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L149"}}),$d=new _({props:{name:"builder_name",anchor:"datasets.Dataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L154"}}),wd=new _({props:{name:"citation",anchor:"datasets.Dataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L158"}}),Dd=new _({props:{name:"config_name",anchor:"datasets.Dataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L162"}}),Ed=new _({props:{name:"dataset_size",anchor:"datasets.Dataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L166"}}),jd=new _({props:{name:"description",anchor:"datasets.Dataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L170"}}),kd=new _({props:{name:"download_checksums",anchor:"datasets.Dataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L174"}}),Id=new _({props:{name:"download_size",anchor:"datasets.Dataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L178"}}),Td=new _({props:{name:"features",anchor:"datasets.Dataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L182"}}),Nd=new _({props:{name:"homepage",anchor:"datasets.Dataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L186"}}),Pd=new _({props:{name:"license",anchor:"datasets.Dataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L190"}}),Ad=new _({props:{name:"size_in_bytes",anchor:"datasets.Dataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L194"}}),Ld=new _({props:{name:"supervised_keys",anchor:"datasets.Dataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L198"}}),Fd=new _({props:{name:"version",anchor:"datasets.Dataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L206"}}),qd=new _({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L844",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Od=new D({props:{code:"ds = Dataset.from_csv('path/to/dataset.csv')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_csv(<span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>)'}}),Sd=new _({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:`<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"field"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L879",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Cd=new D({props:{code:"ds = Dataset.from_json('path/to/dataset.json')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_json(<span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>)'}}),zd=new _({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L922",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Vd=new D({props:{code:"ds = Dataset.from_parquet('path/to/dataset.parquet')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_parquet(<span class="hljs-string">&#x27;path/to/dataset.parquet&#x27;</span>)'}}),Ud=new _({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L967",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Md=new D({props:{code:"ds = Dataset.from_text('path/to/dataset.txt')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_text(<span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>)'}}),Rd=new _({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L2026"}}),Bd=new _({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L4329"}}),Gd=new D({props:{code:`# dataset with mapping {'entailment': 0, 'neutral': 1, 'contradiction': 2}
ds = load_dataset("glue", "mnli", split="train")
# mapping to align with
label2id = {'CONTRADICTION': 0, 'NEUTRAL': 1, 'ENTAILMENT': 2}
ds_aligned = ds.align_labels_with_mapping(label2id, "label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mapping to align with</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),Wd=new _({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L4383"}}),Kd=new D({props:{code:"ds3 = concatenate_datasets([ds1, ds2])",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds3 = concatenate_datasets([ds1, ds2])'}}),Yd=new _({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructued by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.
**kwargs &#x2014; For map-style datasets:
Keyword arguments to be passed to <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.select">Dataset.select()</a> when selecting the indices used to interleave the datasets.`,name:"seed"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/combine.py#L20",returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Jd=new D({props:{code:`For regular datasets (map-style):

>>> from datasets import Dataset, interleave_datasets
>>> d1 = Dataset.from_dict({"a": [0, 1, 2]})
>>> d2 = Dataset.from_dict({"a": [10, 11, 12]})
>>> d3 = Dataset.from_dict({"a": [20, 21, 22]})
>>> dataset = interleave_datasets([d1, d2, d3])
>>> dataset["a"]
[0, 10, 20, 1, 11, 21, 2, 12, 22]
>>> dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
>>> dataset["a"]
[10, 0, 11, 1, 2, 20, 12]

For datasets in streaming mode (iterable):

>>> from datasets import load_dataset, interleave_datasets
>>> d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
>>> d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
>>> dataset = interleave_datasets([d1, d2])
>>> iterator = iter(dataset)
>>> next(iterator)
{'text': 'Mtendere Village was inspired by the vision...
>>> next(iterator)
{'text': "M\xE9dia de d\xE9bat d'id\xE9es, de culture...`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>]

For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),Xd=new _({props:{name:"datasets.enable_caching",anchor:"datasets.enable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/fingerprint.py#L96"}}),Qd=new _({props:{name:"datasets.disable_caching",anchor:"datasets.disable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/fingerprint.py#L117"}}),tc=new _({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/fingerprint.py#L162"}}),sc=new Wt({}),nc=new _({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L31"}}),rc=new _({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L53"}}),oc=new _({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L59"}}),ic=new _({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L65"}}),lc=new _({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L71"}}),cc=new _({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L77"}}),pc=new _({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L83"}}),mc=new _({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L97",returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),hc=new _({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L113",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),fc=new _({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><em>function(example: Dict) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict, indices: int) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[List]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[List], indices: List[int]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L374"}}),uc=new _({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L462"}}),gc=new _({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L530"}}),_c=new _({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (the seed argument has priority over seeds if both arguments are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L586"}}),bc=new _({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L258"}}),yc=new _({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L285"}}),$c=new _({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L225"}}),wc=new _({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L319"}}),Ec=new _({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L347"}}),jc=new _({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L89"}}),kc=new _({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L128"}}),Ic=new _({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L145",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Tc=new _({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L158"}}),Nc=new _({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L174"}}),Ac=new _({props:{name:"rename_columns",anchor:"datasets.DatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L195",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Lc=new _({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L210"}}),qc=new _({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"shard_size",val:": typing.Optional[int] = 524288000"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <code>&lt;user&gt;/&lt;dataset_name&gt;</code> or
<code>&lt;org&gt;/&lt;dataset_name&gt;</code>. Also accepts <code>&lt;dataset_name&gt;</code>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
The size of the dataset shards to be uploaded to the hub. The dataset will be pushed in files
of the size specified here, in bytes.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L847"}}),Oc=new D({props:{code:'dataset_dict.push_to_hub("<organization>/<dataset_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)'}}),Sc=new _({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L648"}}),Cc=new _({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L674",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),zc=new _({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L715",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Vc=new _({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L742",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Uc=new _({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L769",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Mc=new _({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L805",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Rc=new _({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L832"}}),Bc=new Wt({}),Hc=new _({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/iterable_dataset.py#L452"}}),Gc=new _({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/iterable_dataset.py#L802",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Wc=new _({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/iterable_dataset.py#L816",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Kc=new _({props:{name:"cast",anchor:"datasets.IterableDataset.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/iterable_dataset.py#L841",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Yc=new _({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/iterable_dataset.py#L496"}}),Jc=new _({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Union[Dict, Any]) -&gt; dict</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Union[Dict, Any], idx: int) -&gt; dict</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]]) -&gt; dict</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]], indices: List[int]) -&gt; dict</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/iterable_dataset.py#L532"}}),Zc=new _({props:{name:"rename_column",anchor:"datasets.IterableDataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/iterable_dataset.py#L748",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Qc=new _({props:{name:"filter",anchor:"datasets.IterableDataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDataset.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/iterable_dataset.py#L602"}}),ep=new _({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/iterable_dataset.py#L654"}}),ap=new _({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/iterable_dataset.py#L698"}}),np=new _({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/iterable_dataset.py#L714"}}),op=new _({props:{name:"info",anchor:"datasets.IterableDataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L144"}}),ip=new _({props:{name:"split",anchor:"datasets.IterableDataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L149"}}),lp=new _({props:{name:"builder_name",anchor:"datasets.IterableDataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L154"}}),dp=new _({props:{name:"citation",anchor:"datasets.IterableDataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L158"}}),cp=new _({props:{name:"config_name",anchor:"datasets.IterableDataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L162"}}),pp=new _({props:{name:"dataset_size",anchor:"datasets.IterableDataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L166"}}),mp=new _({props:{name:"description",anchor:"datasets.IterableDataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L170"}}),hp=new _({props:{name:"download_checksums",anchor:"datasets.IterableDataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L174"}}),fp=new _({props:{name:"download_size",anchor:"datasets.IterableDataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L178"}}),up=new _({props:{name:"features",anchor:"datasets.IterableDataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L182"}}),gp=new _({props:{name:"homepage",anchor:"datasets.IterableDataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L186"}}),_p=new _({props:{name:"license",anchor:"datasets.IterableDataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L190"}}),bp=new _({props:{name:"size_in_bytes",anchor:"datasets.IterableDataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L194"}}),vp=new _({props:{name:"supervised_keys",anchor:"datasets.IterableDataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L198"}}),yp=new _({props:{name:"version",anchor:"datasets.IterableDataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/arrow_dataset.py#L206"}}),xp=new Wt({}),$p=new _({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L933"}}),wp=new _({props:{name:"map",anchor:"datasets.IterableDatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Union[Dict, Any]) -&gt; dict</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Union[Dict, Any], idx: int) -&gt; dict</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]]) -&gt; dict</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]], indices: List[int]) -&gt; dict</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDatasetDict.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L950"}}),Ep=new _({props:{name:"filter",anchor:"datasets.IterableDatasetDict.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDatasetDict.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L1008"}}),jp=new _({props:{name:"shuffle",anchor:"datasets.IterableDatasetDict.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDatasetDict.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDatasetDict.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L1048"}}),Ip=new _({props:{name:"with_format",anchor:"datasets.IterableDatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional, default None) &#x2014; if set to &#x201C;torch&#x201D;, the returned dataset
will be a subclass of torch.utils.data.IterableDataset to be used in a DataLoader`,name:"type"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L934"}}),Tp=new _({props:{name:"cast",anchor:"datasets.IterableDatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L1148",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Np=new _({props:{name:"cast_column",anchor:"datasets.IterableDatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L1133",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Pp=new _({props:{name:"remove_columns",anchor:"datasets.IterableDatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L1118",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Ap=new _({props:{name:"rename_column",anchor:"datasets.IterableDatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L1082",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Lp=new _({props:{name:"rename_columns",anchor:"datasets.IterableDatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/dataset_dict.py#L1102",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Fp=new Wt({}),qp=new _({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L1223"}}),vr=new qse({props:{$$slots:{default:[Ose]},$$scope:{ctx:nw}}}),Up=new _({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L1429",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Mp=new _({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L1411",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Rp=new _({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L1395",returnDescription:`
<p><code>list[Any]</code></p>
`}}),Bp=new _({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"}],parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L1376",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Hp=new _({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L1358",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Gp=new _({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L1345",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Wp=new _({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L1499",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),Kp=new _({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L1294",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Yp=new _({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L1314",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Jp=new D({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Xp=new _({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L1438",returnType:`
<p><a
  href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Zp=new D({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),Qp=new _({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L911"}}),em=new _({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": int = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L781"}}),am=new _({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L866"}}),sm=new _({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L837"}}),nm=new _({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L402"}}),rm=new _({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/translation.py#L12"}}),im=new D({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': 'le chat',
        'de': 'die katze'
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}`}}),lm=new _({props:{name:"flatten",anchor:"datasets.Translation.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/translation.py#L46"}}),dm=new _({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/translation.py#L54"}}),cm=new D({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': ['le chat', 'la chatte,']
        'de': 'die katze'
}
# Tensor returned :
{
        'language': ['en', 'de', 'fr', 'fr'],
        'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tensor returned :</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>{
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
<span class="hljs-meta">... </span>}`}}),pm=new _({props:{name:"flatten",anchor:"datasets.TranslationVariableLanguages.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/translation.py#L123"}}),hm=new _({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L478"}}),um=new _({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L487"}}),_m=new _({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L496"}}),vm=new _({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/features.py#L505"}}),ym=new _({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/audio.py#L18"}}),Em=new _({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/audio.py#L127",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),jm=new _({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"}],parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/audio.py#L84",returnDescription:`
<p>dict</p>
`}}),km=new _({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/audio.py#L160",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Im=new _({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/audio.py#L58",returnType:`
<p><code>dict</code></p>
`}}),Tm=new _({props:{name:"flatten",anchor:"datasets.Audio.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/audio.py#L116"}}),Nm=new _({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/image.py#L25"}}),Om=new _({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/image.py#L133",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Sm=new _({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"}],parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/image.py#L83",returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),Cm=new _({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/image.py#L182",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),zm=new _({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/image.py#L55",returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),Vm=new _({props:{name:"flatten",anchor:"datasets.Image.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/features/image.py#L120"}}),Um=new Wt({}),Mm=new _({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/info.py#L302"}}),Rm=new _({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/info.py#L349"}}),Hm=new _({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""},{name:"pretty_print",val:" = False"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/info.py#L337"}}),Gm=new Wt({}),Wm=new _({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/metric.py#L138"}}),Km=new _({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/metric.py#L490"}}),Ym=new _({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/metric.py#L451"}}),Jm=new _({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/metric.py#L388",returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),Xm=new _({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.utils.download_manager.DownloadManager] = None"}],parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/metric.py#L565"}}),Zm=new Wt({}),Qm=new _({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/filesystems/s3filesystem.py#L6"}}),ah=new D({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(anon=True)  # doctest: +SKIP
s3.ls('public-datasets/imdb/train')  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(anon=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;public-datasets/imdb/train&#x27;</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),sh=new D({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
s3.ls('my-private-datasets/imdb/train')  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;my-private-datasets/imdb/train&#x27;</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),nh=new D({props:{code:`import botocore
from datasets.filesystems import S3Filesystem
s3_session = botocore.session.Session(profile_name='my_profile_name')
s3 = S3FileSystem(session=s3_session)  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile_name=<span class="hljs-string">&#x27;my_profile_name&#x27;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(session=s3_session)  <span class="hljs-comment"># doctest: +SKIP</span>`}}),rh=new D({props:{code:`from datasets import load_from_disk
from datasets.filesystems import S3Filesystem
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
dataset = load_from_disk('s3://my-private-datasets/imdb/train',fs=s3)  # doctest: +SKIP
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>,fs=s3)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),oh=new D({props:{code:`from datasets import load_dataset
from datasets.filesystems import S3Filesystem
dataset = load_dataset("imdb")
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
dataset.save_to_disk('s3://my-private-datasets/imdb/train',fs=s3)  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.save_to_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>,fs=s3)  <span class="hljs-comment"># doctest: +SKIP</span>`}}),ih=new Wt({}),lh=new _({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/filesystems.py#L28"}}),dh=new _({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/filesystems.py#L40"}}),ch=new Wt({}),ph=new _({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4168/src/datasets/fingerprint.py#L212"}}),{c(){F=a("meta"),rn=l(),Y=a("h1"),Be=a("a"),ss=a("span"),p(Pe.$$.fragment),ni=l(),ns=a("span"),ha=r("Main classes"),on=l(),Ae=a("h2"),me=a("a"),J=a("span"),p(fa.$$.fragment),fh=l(),ln=a("span"),P4=r("DatasetInfo"),rw=l(),H=a("div"),p(ri.$$.fragment),A4=l(),bg=a("p"),L4=r("Information about a dataset."),F4=l(),uh=a("p"),vg=a("em"),q4=r("DatasetInfo"),O4=r(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),S4=l(),yg=a("p"),C4=r("Note: Not all fields are known on construction and may be updated later."),z4=l(),He=a("div"),p(oi.$$.fragment),V4=l(),ii=a("p"),U4=r("Create DatasetInfo from the JSON file in "),xg=a("code"),M4=r("dataset_info_dir"),R4=r("."),B4=l(),$g=a("p"),H4=r(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),G4=l(),wg=a("p"),W4=r("This will overwrite all previous metadata."),K4=l(),dn=a("div"),p(li.$$.fragment),Y4=l(),rs=a("p"),J4=r("Write "),Dg=a("em"),X4=r("DatasetInfo"),Z4=r(" and license (if present) as JSON files to "),Eg=a("em"),Q4=r("dataset_info_dir"),e7=r("."),ow=l(),os=a("h2"),cn=a("a"),jg=a("span"),p(di.$$.fragment),t7=l(),kg=a("span"),a7=r("Dataset"),iw=l(),pn=a("p"),s7=r("The base class "),gh=a("a"),n7=r("Dataset"),r7=r(" implements a Dataset backed by an Apache Arrow table."),lw=l(),b=a("div"),p(ci.$$.fragment),o7=l(),Ig=a("p"),i7=r("A Dataset backed by an Arrow table."),l7=l(),he=a("div"),p(pi.$$.fragment),d7=l(),Tg=a("p"),c7=r("Add column to Dataset."),p7=l(),Ng=a("p"),Pg=a("em"),m7=r("New in version 1.7."),h7=l(),Ag=a("p"),f7=r("Example:"),u7=l(),p(mi.$$.fragment),g7=l(),fe=a("div"),p(hi.$$.fragment),_7=l(),Lg=a("p"),b7=r("Add item to Dataset."),v7=l(),Fg=a("p"),qg=a("em"),y7=r("New in version 1.7."),x7=l(),Og=a("p"),$7=r("Example:"),w7=l(),p(fi.$$.fragment),D7=l(),mn=a("div"),p(ui.$$.fragment),E7=l(),Sg=a("p"),j7=r("Instantiate a Dataset backed by an Arrow table at filename."),k7=l(),hn=a("div"),p(gi.$$.fragment),I7=l(),Cg=a("p"),T7=r("Instantiate a Dataset backed by an Arrow buffer."),N7=l(),X=a("div"),p(_i.$$.fragment),P7=l(),Kt=a("p"),A7=r("Convert "),zg=a("code"),L7=r("pandas.DataFrame"),F7=r(" to a "),Vg=a("code"),q7=r("pyarrow.Table"),O7=r(" to create a "),_h=a("a"),S7=r("Dataset"),C7=r("."),z7=l(),bi=a("p"),V7=r(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Ug=a("em"),U7=r("object"),M7=r(", we need to guess the datatype by looking at the Python objects in this Series."),R7=l(),vi=a("p"),B7=r("Be aware that Series of the "),Mg=a("em"),H7=r("object"),G7=r(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),W7=l(),Rg=a("p"),K7=r("Example:"),Y7=l(),p(yi.$$.fragment),J7=l(),fn=a("div"),p(xi.$$.fragment),X7=l(),Yt=a("p"),Z7=r("Convert "),Bg=a("code"),Q7=r("dict"),e6=r(" to a "),Hg=a("code"),t6=r("pyarrow.Table"),a6=r(" to create a "),bh=a("a"),s6=r("Dataset"),n6=r("."),r6=l(),Ge=a("div"),p($i.$$.fragment),o6=l(),Gg=a("p"),i6=r("The Apache Arrow table backing the dataset."),l6=l(),Wg=a("p"),d6=r("Example:"),c6=l(),p(wi.$$.fragment),p6=l(),We=a("div"),p(Di.$$.fragment),m6=l(),Kg=a("p"),h6=r("The cache files containing the Apache Arrow table backing the dataset."),f6=l(),Yg=a("p"),u6=r("Example:"),g6=l(),p(Ei.$$.fragment),_6=l(),Ke=a("div"),p(ji.$$.fragment),b6=l(),Jg=a("p"),v6=r("Number of columns in the dataset."),y6=l(),Xg=a("p"),x6=r("Example:"),$6=l(),p(ki.$$.fragment),w6=l(),Ye=a("div"),p(Ii.$$.fragment),D6=l(),Ti=a("p"),E6=r("Number of rows in the dataset (same as "),un=a("a"),j6=r("Dataset."),Zg=a("strong"),k6=r("len"),I6=r("()"),T6=r(")."),N6=l(),Qg=a("p"),P6=r("Example:"),A6=l(),p(Ni.$$.fragment),L6=l(),Je=a("div"),p(Pi.$$.fragment),F6=l(),e_=a("p"),q6=r("Names of the columns in the dataset."),O6=l(),t_=a("p"),S6=r("Example:"),C6=l(),p(Ai.$$.fragment),z6=l(),Xe=a("div"),p(Li.$$.fragment),V6=l(),a_=a("p"),U6=r("Shape of the dataset (number of columns, number of rows)."),M6=l(),s_=a("p"),R6=r("Example:"),B6=l(),p(Fi.$$.fragment),H6=l(),ue=a("div"),p(qi.$$.fragment),G6=l(),n_=a("p"),W6=r("Return a list of the unique elements in a column."),K6=l(),r_=a("p"),Y6=r("This is implemented in the low-level backend and as such, very fast."),J6=l(),o_=a("p"),X6=r("Example:"),Z6=l(),p(Oi.$$.fragment),Q6=l(),Ze=a("div"),p(Si.$$.fragment),e8=l(),i_=a("p"),t8=r(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),a8=l(),l_=a("p"),s8=r("Example:"),n8=l(),p(Ci.$$.fragment),r8=l(),Qe=a("div"),p(zi.$$.fragment),o8=l(),d_=a("p"),i8=r("Cast the dataset to a new set of features."),l8=l(),c_=a("p"),d8=r("Example:"),c8=l(),p(Vi.$$.fragment),p8=l(),et=a("div"),p(Ui.$$.fragment),m8=l(),p_=a("p"),h8=r("Cast column to feature for decoding."),f8=l(),m_=a("p"),u8=r("Example:"),g8=l(),p(Mi.$$.fragment),_8=l(),ge=a("div"),p(Ri.$$.fragment),b8=l(),h_=a("p"),v8=r("Remove one or several column(s) in the dataset and the features associated to them."),y8=l(),is=a("p"),x8=r("You can also remove a column using "),vh=a("a"),$8=r("Dataset.map()"),w8=r(" with "),f_=a("em"),D8=r("remove_columns"),E8=r(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),j8=l(),u_=a("p"),k8=r("Example:"),I8=l(),p(Bi.$$.fragment),T8=l(),tt=a("div"),p(Hi.$$.fragment),N8=l(),g_=a("p"),P8=r(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),A8=l(),__=a("p"),L8=r("Example:"),F8=l(),p(Gi.$$.fragment),q8=l(),at=a("div"),p(Wi.$$.fragment),O8=l(),b_=a("p"),S8=r(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),C8=l(),v_=a("p"),z8=r("Example:"),V8=l(),p(Ki.$$.fragment),U8=l(),st=a("div"),p(Yi.$$.fragment),M8=l(),Ji=a("p"),R8=r("Casts the given column as :obj:"),y_=a("code"),B8=r("datasets.features.ClassLabel"),H8=r(" and updates the table."),G8=l(),x_=a("p"),W8=r("Example:"),K8=l(),p(Xi.$$.fragment),Y8=l(),nt=a("div"),p(Zi.$$.fragment),J8=l(),$_=a("p"),X8=r("Number of rows in the dataset."),Z8=l(),w_=a("p"),Q8=r("Example:"),eE=l(),p(Qi.$$.fragment),tE=l(),ua=a("div"),p(el.$$.fragment),aE=l(),D_=a("p"),sE=r("Iterate through the examples."),nE=l(),tl=a("p"),rE=r("If a formatting is set with "),yh=a("a"),oE=r("Dataset.set_format()"),iE=r(` rows will be returned with the
selected format.`),lE=l(),gn=a("div"),p(al.$$.fragment),dE=l(),ls=a("p"),cE=r("To be used in a "),E_=a("code"),pE=r("with"),mE=r(" statement. Set "),j_=a("code"),hE=r("__getitem__"),fE=r(" return format (type and columns)."),uE=l(),Z=a("div"),p(sl.$$.fragment),gE=l(),Le=a("p"),_E=r("Set "),k_=a("strong"),bE=r("getitem"),vE=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),I_=a("code"),yE=r("type"),xE=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),T_=a("strong"),$E=r("getitem"),wE=r(`.
It\u2019s also possible to use custom transforms for formatting using `),xh=a("a"),DE=r("datasets.Dataset.set_transform()"),EE=r("."),jE=l(),Fe=a("p"),kE=r("It is possible to call "),N_=a("code"),IE=r("map"),TE=r(" after calling "),P_=a("code"),NE=r("set_format"),PE=r(". Since "),A_=a("code"),AE=r("map"),LE=r(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),L_=a("code"),FE=r("map"),qE=r(" on a dataset to add a new column, then this column will be formatted:"),OE=l(),F_=a("p"),SE=r("new formatted columns = (all columns - previously unformatted columns)"),CE=l(),q_=a("p"),zE=r("Example:"),VE=l(),p(nl.$$.fragment),UE=l(),rt=a("div"),p(rl.$$.fragment),ME=l(),ot=a("p"),RE=r("Set "),O_=a("strong"),BE=r("getitem"),HE=r(" return format using this transform. The transform is applied on-the-fly on batches when "),S_=a("strong"),GE=r("getitem"),WE=r(` is called.
As `),$h=a("a"),KE=r("datasets.Dataset.set_format()"),YE=r(", this can be reset using "),wh=a("a"),JE=r("datasets.Dataset.reset_format()"),XE=l(),C_=a("p"),ZE=r("Example:"),QE=l(),p(ol.$$.fragment),ej=l(),_e=a("div"),p(il.$$.fragment),tj=l(),ll=a("p"),aj=r("Reset "),z_=a("strong"),sj=r("getitem"),nj=r(" return format to python objects and all columns."),rj=l(),Dh=a("p"),oj=r("Same as "),V_=a("code"),ij=r("self.set_format()"),lj=l(),U_=a("p"),dj=r("Example:"),cj=l(),p(dl.$$.fragment),pj=l(),Q=a("div"),p(cl.$$.fragment),mj=l(),Jt=a("p"),hj=r("Set "),M_=a("strong"),fj=r("getitem"),uj=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),R_=a("code"),gj=r("type"),_j=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),B_=a("strong"),bj=r("getitem"),vj=r("."),yj=l(),pl=a("p"),xj=r("It\u2019s also possible to use custom transforms for formatting using "),Eh=a("a"),$j=r("datasets.Dataset.with_transform()"),wj=r("."),Dj=l(),ds=a("p"),Ej=r("Contrary to "),jh=a("a"),jj=r("datasets.Dataset.set_format()"),kj=r(", "),H_=a("code"),Ij=r("with_format"),Tj=r(" returns a new Dataset object."),Nj=l(),G_=a("p"),Pj=r("Example:"),Aj=l(),p(ml.$$.fragment),Lj=l(),ee=a("div"),p(hl.$$.fragment),Fj=l(),cs=a("p"),qj=r("Set "),W_=a("strong"),Oj=r("getitem"),Sj=r(" return format using this transform. The transform is applied on-the-fly on batches when "),K_=a("strong"),Cj=r("getitem"),zj=r(" is called."),Vj=l(),ps=a("p"),Uj=r("As "),kh=a("a"),Mj=r("datasets.Dataset.set_format()"),Rj=r(", this can be reset using "),Ih=a("a"),Bj=r("datasets.Dataset.reset_format()"),Hj=r("."),Gj=l(),ms=a("p"),Wj=r("Contrary to "),Th=a("a"),Kj=r("datasets.Dataset.set_transform()"),Yj=r(", "),Y_=a("code"),Jj=r("with_transform"),Xj=r(" returns a new Dataset object."),Zj=l(),J_=a("p"),Qj=r("Example:"),e3=l(),p(fl.$$.fragment),t3=l(),_n=a("div"),p(ul.$$.fragment),a3=l(),X_=a("p"),s3=r("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),n3=l(),be=a("div"),p(gl.$$.fragment),r3=l(),Z_=a("p"),o3=r(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),i3=l(),Q_=a("p"),l3=r("Be careful when running this command that no other process is currently using other cache files."),d3=l(),e1=a("p"),c3=r("Example:"),p3=l(),p(_l.$$.fragment),m3=l(),te=a("div"),p(bl.$$.fragment),h3=l(),t1=a("p"),f3=r(`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),u3=l(),vl=a("p"),g3=r("You can specify whether the function should be batched or not with the "),a1=a("code"),_3=r("batched"),b3=r(" parameter:"),v3=l(),hs=a("ul"),s1=a("li"),y3=r(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),x3=l(),n1=a("li"),$3=r(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),w3=l(),oe=a("li"),D3=r("If batched is True and batch_size is "),r1=a("code"),E3=r("n"),j3=r(" > 1, then the function takes a batch of "),o1=a("code"),k3=r("n"),I3=r(" examples as input and can return a batch with "),i1=a("code"),T3=r("n"),N3=r(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),l1=a("code"),P3=r("n"),A3=r(` examples.
A batch is a dictionary, e.g. a batch of `),d1=a("code"),L3=r("n"),F3=r(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),q3=l(),c1=a("p"),O3=r("Example:"),S3=l(),p(yl.$$.fragment),C3=l(),it=a("div"),p(xl.$$.fragment),z3=l(),p1=a("p"),V3=r(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),U3=l(),m1=a("p"),M3=r("Example:"),R3=l(),p($l.$$.fragment),B3=l(),lt=a("div"),p(wl.$$.fragment),H3=l(),h1=a("p"),G3=r("Create a new dataset with rows selected following the list/array of indices."),W3=l(),f1=a("p"),K3=r("Example:"),Y3=l(),p(Dl.$$.fragment),J3=l(),ve=a("div"),p(El.$$.fragment),X3=l(),u1=a("p"),Z3=r("Create a new dataset sorted according to a column."),Q3=l(),g1=a("p"),ek=r(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),tk=l(),_1=a("p"),ak=r("Example:"),sk=l(),p(jl.$$.fragment),nk=l(),ye=a("div"),p(kl.$$.fragment),rk=l(),b1=a("p"),ok=r("Create a new Dataset where the rows are shuffled."),ik=l(),v1=a("p"),lk=r(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),dk=l(),y1=a("p"),ck=r("Example:"),pk=l(),p(Il.$$.fragment),mk=l(),xe=a("div"),p(Tl.$$.fragment),hk=l(),O=a("p"),fk=r("Return a dictionary ("),x1=a("code"),uk=r("datasets.DatsetDict"),gk=r(") with two random train and test subsets ("),$1=a("em"),_k=r("train"),bk=r(" and "),w1=a("em"),vk=r("test"),yk=l(),D1=a("code"),xk=r("Dataset"),$k=r(` splits).
Splits are created from the dataset according to `),E1=a("em"),wk=r("test_size"),Dk=r(", "),j1=a("em"),Ek=r("train_size"),jk=r(" and "),k1=a("em"),kk=r("shuffle"),Ik=r("."),Tk=l(),Nl=a("p"),Nk=r("This method is similar to scikit-learn "),I1=a("em"),Pk=r("train_test_split"),Ak=r(" with the omission of the stratified options."),Lk=l(),T1=a("p"),Fk=r("Example:"),qk=l(),p(Pl.$$.fragment),Ok=l(),M=a("div"),p(Al.$$.fragment),Sk=l(),fs=a("p"),Ck=r("Return the "),N1=a("em"),zk=r("index"),Vk=r("-nth shard from dataset split into "),P1=a("em"),Uk=r("num_shards"),Mk=r(" pieces."),Rk=l(),A1=a("p"),Bk=r(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),Hk=l(),Ll=a("p"),Gk=r(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),L1=a("em"),Wk=r("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),Kk=r(` will return
a dataset with the same order as the original.`),Yk=l(),F1=a("p"),Jk=r(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),Xk=l(),q1=a("p"),Zk=r("Example:"),Qk=l(),p(Fl.$$.fragment),e5=l(),dt=a("div"),p(ql.$$.fragment),t5=l(),O1=a("p"),a5=r(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),s5=l(),S1=a("p"),n5=r("Example:"),r5=l(),p(Ol.$$.fragment),o5=l(),ct=a("div"),p(Sl.$$.fragment),i5=l(),C1=a("p"),l5=r(`Pushes the dataset to the hub.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),d5=l(),z1=a("p"),c5=r("Example:"),p5=l(),p(Cl.$$.fragment),m5=l(),pt=a("div"),p(zl.$$.fragment),h5=l(),us=a("p"),f5=r("Saves a dataset to a dataset directory, or in a filesystem using either "),Nh=a("a"),u5=r("S3FileSystem"),g5=r(` or
any implementation of `),V1=a("code"),_5=r("fsspec.spec.AbstractFileSystem"),b5=r("."),v5=l(),U1=a("p"),y5=r("Example:"),x5=l(),p(Vl.$$.fragment),$5=l(),mt=a("div"),p(Ul.$$.fragment),w5=l(),Xt=a("p"),D5=r("Loads a dataset that was previously saved using "),M1=a("code"),E5=r("save_to_disk"),j5=r(` from a dataset directory, or from a
filesystem using either `),Ph=a("a"),k5=r("S3FileSystem"),I5=r(` or any implementation of
`),R1=a("code"),T5=r("fsspec.spec.AbstractFileSystem"),N5=r("."),P5=l(),B1=a("p"),A5=r("Example:"),L5=l(),p(Ml.$$.fragment),F5=l(),bn=a("div"),p(Rl.$$.fragment),q5=l(),H1=a("p"),O5=r("Create and cache a new Dataset by flattening the indices mapping."),S5=l(),ht=a("div"),p(Bl.$$.fragment),C5=l(),G1=a("p"),z5=r("Exports the dataset to csv"),V5=l(),W1=a("p"),U5=r("Example:"),M5=l(),p(Hl.$$.fragment),R5=l(),ft=a("div"),p(Gl.$$.fragment),B5=l(),Wl=a("p"),H5=r("Returns the dataset as a "),K1=a("code"),G5=r("pandas.DataFrame"),W5=r(". Can also return a generator for large datasets."),K5=l(),Y1=a("p"),Y5=r("Example:"),J5=l(),p(Kl.$$.fragment),X5=l(),ut=a("div"),p(Yl.$$.fragment),Z5=l(),J1=a("p"),Q5=r("Returns the dataset as a Python dict. Can also return a generator for large datasets."),eI=l(),X1=a("p"),tI=r("Example:"),aI=l(),p(Jl.$$.fragment),sI=l(),gt=a("div"),p(Xl.$$.fragment),nI=l(),Z1=a("p"),rI=r("Export the dataset to JSON Lines or JSON."),oI=l(),Q1=a("p"),iI=r("Example:"),lI=l(),p(Zl.$$.fragment),dI=l(),_t=a("div"),p(Ql.$$.fragment),cI=l(),eb=a("p"),pI=r("Exports the dataset to parquet"),mI=l(),tb=a("p"),hI=r("Example:"),fI=l(),p(ed.$$.fragment),uI=l(),$e=a("div"),p(td.$$.fragment),gI=l(),gs=a("p"),_I=r(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),ab=a("code"),bI=r("device"),vI=r(" if you want to run it on GPU ("),sb=a("code"),yI=r("device"),xI=r(` must be the GPU index).
You can find more information about Faiss here:`),$I=l(),nb=a("ul"),Ah=a("li"),wI=r("For "),ad=a("a"),DI=r("string factory"),EI=l(),rb=a("p"),jI=r("Example:"),kI=l(),p(sd.$$.fragment),II=l(),ga=a("div"),p(nd.$$.fragment),TI=l(),Zt=a("p"),NI=r(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),ob=a("em"),PI=r("external_arrays"),AI=r(`.
You can specify `),ib=a("em"),LI=r("device"),FI=r(" if you want to run it on GPU ("),lb=a("em"),qI=r("device"),OI=r(` must be the GPU index).
You can find more information about Faiss here:`),SI=l(),db=a("ul"),Lh=a("li"),CI=r("For "),rd=a("a"),zI=r("string factory"),VI=l(),vn=a("div"),p(od.$$.fragment),UI=l(),cb=a("p"),MI=r("Save a FaissIndex on disk."),RI=l(),_a=a("div"),p(id.$$.fragment),BI=l(),pb=a("p"),HI=r("Load a FaissIndex from disk."),GI=l(),ld=a("p"),WI=r(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),mb=a("em"),KI=r(".get_index(index_name).faiss_index"),YI=r(" to make it fit your needs."),JI=l(),bt=a("div"),p(dd.$$.fragment),XI=l(),hb=a("p"),ZI=r("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),QI=l(),fb=a("p"),e9=r("Example:"),t9=l(),p(cd.$$.fragment),a9=l(),vt=a("div"),p(pd.$$.fragment),s9=l(),ub=a("p"),n9=r("Load an existing text index using ElasticSearch for fast retrieval."),r9=l(),gb=a("p"),o9=r("Default config is:"),i9=l(),p(md.$$.fragment),l9=l(),yn=a("div"),p(hd.$$.fragment),d9=l(),_b=a("p"),c9=r("List the colindex_nameumns/identifiers of all the attached indexes."),p9=l(),xn=a("div"),p(fd.$$.fragment),m9=l(),bb=a("p"),h9=r("List the index_name/identifiers of all the attached indexes."),f9=l(),$n=a("div"),p(ud.$$.fragment),u9=l(),vb=a("p"),g9=r("Drop the index with the specified column."),_9=l(),wn=a("div"),p(gd.$$.fragment),b9=l(),yb=a("p"),v9=r("Find the nearest examples indices in the dataset to the query."),y9=l(),Dn=a("div"),p(_d.$$.fragment),x9=l(),xb=a("p"),$9=r("Find the nearest examples indices in the dataset to the query."),w9=l(),En=a("div"),p(bd.$$.fragment),D9=l(),$b=a("p"),E9=r("Find the nearest examples in the dataset to the query."),j9=l(),jn=a("div"),p(vd.$$.fragment),k9=l(),wb=a("p"),I9=r("Find the nearest examples in the dataset to the query."),T9=l(),kn=a("div"),p(yd.$$.fragment),N9=l(),Fh=a("p"),qh=a("a"),P9=r("datasets.DatasetInfo"),A9=r(" object containing all the metadata in the dataset."),L9=l(),In=a("div"),p(xd.$$.fragment),F9=l(),Oh=a("p"),Sh=a("a"),q9=r("datasets.NamedSplit"),O9=r(" object corresponding to a named dataset split."),S9=l(),Ch=a("div"),p($d.$$.fragment),C9=l(),zh=a("div"),p(wd.$$.fragment),z9=l(),Vh=a("div"),p(Dd.$$.fragment),V9=l(),Uh=a("div"),p(Ed.$$.fragment),U9=l(),Mh=a("div"),p(jd.$$.fragment),M9=l(),Rh=a("div"),p(kd.$$.fragment),R9=l(),Bh=a("div"),p(Id.$$.fragment),B9=l(),Hh=a("div"),p(Td.$$.fragment),H9=l(),Gh=a("div"),p(Nd.$$.fragment),G9=l(),Wh=a("div"),p(Pd.$$.fragment),W9=l(),Kh=a("div"),p(Ad.$$.fragment),K9=l(),Yh=a("div"),p(Ld.$$.fragment),Y9=l(),Jh=a("div"),p(Fd.$$.fragment),J9=l(),yt=a("div"),p(qd.$$.fragment),X9=l(),Db=a("p"),Z9=r("Create Dataset from CSV file(s)."),Q9=l(),Eb=a("p"),eT=r("Example:"),tT=l(),p(Od.$$.fragment),aT=l(),xt=a("div"),p(Sd.$$.fragment),sT=l(),jb=a("p"),nT=r("Create Dataset from JSON or JSON Lines file(s)."),rT=l(),kb=a("p"),oT=r("Example:"),iT=l(),p(Cd.$$.fragment),lT=l(),$t=a("div"),p(zd.$$.fragment),dT=l(),Ib=a("p"),cT=r("Create Dataset from Parquet file(s)."),pT=l(),Tb=a("p"),mT=r("Example:"),hT=l(),p(Vd.$$.fragment),fT=l(),wt=a("div"),p(Ud.$$.fragment),uT=l(),Nb=a("p"),gT=r("Create Dataset from text file(s)."),_T=l(),Pb=a("p"),bT=r("Example:"),vT=l(),p(Md.$$.fragment),yT=l(),ba=a("div"),p(Rd.$$.fragment),xT=l(),_s=a("p"),$T=r("Prepare a dataset for the given task by casting the dataset\u2019s "),Xh=a("a"),wT=r("Features"),DT=r(" to standardized column names and types as detailed in "),Zh=a("a"),ET=r("datasets.tasks"),jT=r("."),kT=l(),bs=a("p"),IT=r("Casts "),Ab=a("code"),TT=r("datasets.DatasetInfo.features"),NT=r(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Lb=a("code"),PT=r("datasets.DatasetInfo.task_templates"),AT=r(" after casting."),LT=l(),Dt=a("div"),p(Bd.$$.fragment),FT=l(),Hd=a("p"),qT=r("Align the dataset\u2019s label ID and label name mapping to match an input "),Fb=a("code"),OT=r("label2id"),ST=r(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),CT=l(),qb=a("p"),zT=r("Example:"),VT=l(),p(Gd.$$.fragment),dw=l(),qe=a("div"),p(Wd.$$.fragment),UT=l(),vs=a("p"),MT=r("Converts a list of "),Qh=a("a"),RT=r("Dataset"),BT=r(" with the same schema into a single "),ef=a("a"),HT=r("Dataset"),GT=r("."),WT=l(),Ob=a("p"),KT=r("Example:"),YT=l(),p(Kd.$$.fragment),cw=l(),S=a("div"),p(Yd.$$.fragment),JT=l(),Sb=a("p"),XT=r(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),ZT=l(),ys=a("p"),QT=r("You can use this function on a list of "),tf=a("a"),eN=r("Dataset"),tN=r(" objects, or on a list of "),af=a("a"),aN=r("IterableDataset"),sN=r(" objects."),nN=l(),Oe=a("p"),rN=r("If "),Cb=a("code"),oN=r("probabilities"),iN=r(" is "),zb=a("code"),lN=r("None"),dN=r(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),Vb=a("code"),cN=r("probabilities"),pN=r(" is not "),Ub=a("code"),mN=r("None"),hN=r(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),fN=l(),Mb=a("p"),uN=r("The resulting dataset ends when one of the source datasets runs out of examples."),gN=l(),Rb=a("p"),_N=r("Example:"),bN=l(),p(Jd.$$.fragment),pw=l(),ie=a("div"),p(Xd.$$.fragment),vN=l(),Bb=a("p"),yN=r(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),xN=l(),Hb=a("p"),$N=r(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),wN=l(),Gb=a("p"),DN=r(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),EN=l(),Se=a("ul"),Wb=a("li"),jN=r("cache files are always recreated"),kN=l(),Kb=a("li"),IN=r("cache files are written to a temporary directory that is deleted when session closes"),TN=l(),Yb=a("li"),NN=r("cache files are named using a random hash instead of the dataset fingerprint"),PN=l(),Zd=a("li"),AN=r("use "),sf=a("a"),LN=r("datasets.Dataset.save_to_disk()"),FN=r(" to save a transformed dataset or it will be deleted when session closes"),qN=l(),Qt=a("li"),ON=r("caching doesn\u2019t affect "),nf=a("a"),SN=r("datasets.load_dataset()"),CN=r(`. If you want to regenerate a dataset from scratch you should use
the `),Jb=a("code"),zN=r("download_mode"),VN=r(" parameter in "),rf=a("a"),UN=r("datasets.load_dataset()"),MN=r("."),mw=l(),le=a("div"),p(Qd.$$.fragment),RN=l(),Xb=a("p"),BN=r(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),HN=l(),Zb=a("p"),GN=r(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),WN=l(),Qb=a("p"),KN=r(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),YN=l(),Ce=a("ul"),ev=a("li"),JN=r("cache files are always recreated"),XN=l(),tv=a("li"),ZN=r("cache files are written to a temporary directory that is deleted when session closes"),QN=l(),av=a("li"),eP=r("cache files are named using a random hash instead of the dataset fingerprint"),tP=l(),ec=a("li"),aP=r("use "),of=a("a"),sP=r("datasets.Dataset.save_to_disk()"),nP=r(" to save a transformed dataset or it will be deleted when session closes"),rP=l(),ea=a("li"),oP=r("caching doesn\u2019t affect "),lf=a("a"),iP=r("datasets.load_dataset()"),lP=r(`. If you want to regenerate a dataset from scratch you should use
the `),sv=a("code"),dP=r("download_mode"),cP=r(" parameter in "),df=a("a"),pP=r("datasets.load_dataset()"),mP=r("."),hw=l(),de=a("div"),p(tc.$$.fragment),hP=l(),nv=a("p"),fP=r(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),uP=l(),rv=a("p"),gP=r(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),_P=l(),ov=a("p"),bP=r(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),vP=l(),ze=a("ul"),iv=a("li"),yP=r("cache files are always recreated"),xP=l(),lv=a("li"),$P=r("cache files are written to a temporary directory that is deleted when session closes"),wP=l(),dv=a("li"),DP=r("cache files are named using a random hash instead of the dataset fingerprint"),EP=l(),ac=a("li"),jP=r("use "),cf=a("a"),kP=r("datasets.Dataset.save_to_disk()"),IP=r(" to save a transformed dataset or it will be deleted when session closes"),TP=l(),ta=a("li"),NP=r("caching doesn\u2019t affect "),pf=a("a"),PP=r("datasets.load_dataset()"),AP=r(`. If you want to regenerate a dataset from scratch you should use
the `),cv=a("code"),LP=r("download_mode"),FP=r(" parameter in "),mf=a("a"),qP=r("datasets.load_dataset()"),OP=r("."),fw=l(),xs=a("h2"),Tn=a("a"),pv=a("span"),p(sc.$$.fragment),SP=l(),mv=a("span"),CP=r("DatasetDict"),uw=l(),Nn=a("p"),zP=r("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),hv=a("code"),VP=r("Dataset"),UP=r(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),gw=l(),$=a("div"),p(nc.$$.fragment),MP=l(),fv=a("p"),RP=r("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),BP=l(),Pn=a("div"),p(rc.$$.fragment),HP=l(),uv=a("p"),GP=r("The Apache Arrow tables backing each split."),WP=l(),An=a("div"),p(oc.$$.fragment),KP=l(),gv=a("p"),YP=r("The cache files containing the Apache Arrow table backing each split."),JP=l(),Ln=a("div"),p(ic.$$.fragment),XP=l(),_v=a("p"),ZP=r("Number of columns in each split of the dataset."),QP=l(),Fn=a("div"),p(lc.$$.fragment),eA=l(),dc=a("p"),tA=r("Number of rows in each split of the dataset (same as "),qn=a("a"),aA=r("datasets.Dataset."),bv=a("strong"),sA=r("len"),nA=r("()"),rA=r(")."),oA=l(),On=a("div"),p(cc.$$.fragment),iA=l(),vv=a("p"),lA=r("Names of the columns in each split of the dataset."),dA=l(),Sn=a("div"),p(pc.$$.fragment),cA=l(),yv=a("p"),pA=r("Shape of each split of the dataset (number of columns, number of rows)."),mA=l(),va=a("div"),p(mc.$$.fragment),hA=l(),xv=a("p"),fA=r("Return a list of the unique elements in a column for each split."),uA=l(),$v=a("p"),gA=r("This is implemented in the low-level backend and as such, very fast."),_A=l(),Cn=a("div"),p(hc.$$.fragment),bA=l(),wv=a("p"),vA=r(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be carefull when running this command that no other process is currently using other cache files.`),yA=l(),zn=a("div"),p(fc.$$.fragment),xA=l(),Dv=a("p"),$A=r(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),wA=l(),Vn=a("div"),p(uc.$$.fragment),DA=l(),Ev=a("p"),EA=r(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),jA=l(),ya=a("div"),p(gc.$$.fragment),kA=l(),jv=a("p"),IA=r(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),TA=l(),kv=a("p"),NA=r(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),PA=l(),Et=a("div"),p(_c.$$.fragment),AA=l(),Iv=a("p"),LA=r("Create a new Dataset where the rows are shuffled."),FA=l(),Tv=a("p"),qA=r("The transformation is applied to all the datasets of the dataset dictionary."),OA=l(),Nv=a("p"),SA=r(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),CA=l(),jt=a("div"),p(bc.$$.fragment),zA=l(),vc=a("p"),VA=r("Set "),Pv=a("code"),UA=r("__getitem__"),MA=r(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),RA=l(),Ve=a("p"),BA=r("It is possible to call "),Av=a("code"),HA=r("map"),GA=r(" after calling "),Lv=a("code"),WA=r("set_format"),KA=r(". Since "),Fv=a("code"),YA=r("map"),JA=r(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),qv=a("code"),XA=r("map"),ZA=r(" on a dataset to add a new column, then this column will be formatted:"),QA=l(),Ov=a("p"),eL=r("new formatted columns = (all columns - previously unformatted columns)"),tL=l(),xa=a("div"),p(yc.$$.fragment),aL=l(),xc=a("p"),sL=r("Reset "),Sv=a("code"),nL=r("__getitem__"),rL=r(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),oL=l(),hf=a("p"),iL=r("Same as "),Cv=a("code"),lL=r("self.set_format()"),dL=l(),Un=a("div"),p($c.$$.fragment),cL=l(),$s=a("p"),pL=r("To be used in a "),zv=a("em"),mL=r("with"),hL=r(" statement. Set "),Vv=a("code"),fL=r("__getitem__"),uL=r(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),gL=l(),kt=a("div"),p(wc.$$.fragment),_L=l(),aa=a("p"),bL=r("Set "),Uv=a("code"),vL=r("__getitem__"),yL=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Mv=a("code"),xL=r("type"),$L=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),Rv=a("code"),wL=r("__getitem__"),DL=r(`.
The format is set for every dataset in the dataset dictionary`),EL=l(),Dc=a("p"),jL=r("It\u2019s also possible to use custom transforms for formatting using "),ff=a("a"),kL=r("datasets.Dataset.with_transform()"),IL=r("."),TL=l(),ws=a("p"),NL=r("Contrary to "),uf=a("a"),PL=r("datasets.DatasetDict.set_format()"),AL=r(", "),Bv=a("code"),LL=r("with_format"),FL=r(" returns a new DatasetDict object with new Dataset objects."),qL=l(),It=a("div"),p(Ec.$$.fragment),OL=l(),Ds=a("p"),SL=r("Set "),Hv=a("code"),CL=r("__getitem__"),zL=r(" return format using this transform. The transform is applied on-the-fly on batches when "),Gv=a("code"),VL=r("__getitem__"),UL=r(` is called.
The transform is set for every dataset in the dataset dictionary`),ML=l(),Es=a("p"),RL=r("As "),gf=a("a"),BL=r("datasets.Dataset.set_format()"),HL=r(", this can be reset using "),_f=a("a"),GL=r("datasets.Dataset.reset_format()"),WL=r("."),KL=l(),js=a("p"),YL=r("Contrary to "),Wv=a("code"),JL=r("datasets.DatasetDict.set_transform()"),XL=r(", "),Kv=a("code"),ZL=r("with_transform"),QL=r(" returns a new DatasetDict object with new Dataset objects."),eF=l(),Mn=a("div"),p(jc.$$.fragment),tF=l(),Yv=a("p"),aF=r(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),sF=l(),$a=a("div"),p(kc.$$.fragment),nF=l(),Jv=a("p"),rF=r(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),oF=l(),sa=a("p"),iF=r("You can also remove a column using "),bf=a("a"),lF=r("Dataset.map()"),dF=r(" with "),Xv=a("em"),cF=r("feature"),pF=r(" but "),Zv=a("code"),mF=r("cast_"),hF=r(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),fF=l(),Rn=a("div"),p(Ic.$$.fragment),uF=l(),Qv=a("p"),gF=r("Cast column to feature for decoding."),_F=l(),Tt=a("div"),p(Tc.$$.fragment),bF=l(),ey=a("p"),vF=r(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),yF=l(),ty=a("p"),xF=r("The transformation is applied to all the splits of the dataset dictionary."),$F=l(),ks=a("p"),wF=r("You can also remove a column using "),vf=a("a"),DF=r("Dataset.map()"),EF=r(" with "),ay=a("em"),jF=r("remove_columns"),kF=r(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),IF=l(),Nt=a("div"),p(Nc.$$.fragment),TF=l(),sy=a("p"),NF=r(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),PF=l(),Is=a("p"),AF=r("You can also rename a column using "),yf=a("a"),LF=r("Dataset.map()"),FF=r(" with "),ny=a("em"),qF=r("remove_columns"),OF=r(" but the present method:"),SF=l(),Pc=a("ul"),ry=a("li"),CF=r("takes care of moving the original features under the new column name."),zF=l(),oy=a("li"),VF=r("doesn\u2019t copy the data to a new dataset and is thus much faster."),UF=l(),Bn=a("div"),p(Ac.$$.fragment),MF=l(),iy=a("p"),RF=r(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),BF=l(),Hn=a("div"),p(Lc.$$.fragment),HF=l(),Fc=a("p"),GF=r("Casts the given column as :obj:"),ly=a("code"),WF=r("datasets.features.ClassLabel"),KF=r(" and updates the tables."),YF=l(),we=a("div"),p(qc.$$.fragment),JF=l(),Ts=a("p"),XF=r("Pushes the "),dy=a("code"),ZF=r("DatasetDict"),QF=r(` to the hub.
The `),cy=a("code"),eq=r("DatasetDict"),tq=r(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),aq=l(),py=a("p"),sq=r("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),nq=l(),my=a("p"),rq=r("Example:"),oq=l(),p(Oc.$$.fragment),iq=l(),Gn=a("div"),p(Sc.$$.fragment),lq=l(),Ns=a("p"),dq=r("Saves a dataset dict to a filesystem using either "),xf=a("a"),cq=r("S3FileSystem"),pq=r(` or
`),hy=a("code"),mq=r("fsspec.spec.AbstractFileSystem"),hq=r("."),fq=l(),Wn=a("div"),p(Cc.$$.fragment),uq=l(),na=a("p"),gq=r("Load a dataset that was previously saved using "),fy=a("code"),_q=r("save_to_disk"),bq=r(` from a filesystem using either
`),$f=a("a"),vq=r("S3FileSystem"),yq=r(" or "),uy=a("code"),xq=r("fsspec.spec.AbstractFileSystem"),$q=r("."),wq=l(),Kn=a("div"),p(zc.$$.fragment),Dq=l(),gy=a("p"),Eq=r("Create DatasetDict from CSV file(s)."),jq=l(),Yn=a("div"),p(Vc.$$.fragment),kq=l(),_y=a("p"),Iq=r("Create DatasetDict from JSON Lines file(s)."),Tq=l(),Jn=a("div"),p(Uc.$$.fragment),Nq=l(),by=a("p"),Pq=r("Create DatasetDict from Parquet file(s)."),Aq=l(),Xn=a("div"),p(Mc.$$.fragment),Lq=l(),vy=a("p"),Fq=r("Create DatasetDict from text file(s)."),qq=l(),wa=a("div"),p(Rc.$$.fragment),Oq=l(),Ps=a("p"),Sq=r("Prepare a dataset for the given task by casting the dataset\u2019s "),wf=a("a"),Cq=r("Features"),zq=r(" to standardized column names and types as detailed in "),Df=a("a"),Vq=r("datasets.tasks"),Uq=r("."),Mq=l(),As=a("p"),Rq=r("Casts "),yy=a("code"),Bq=r("datasets.DatasetInfo.features"),Hq=r(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),xy=a("code"),Gq=r("datasets.DatasetInfo.task_templates"),Wq=r(" after casting."),_w=l(),Ef=a("a"),bw=l(),Ls=a("h2"),Zn=a("a"),$y=a("span"),p(Bc.$$.fragment),Kq=l(),wy=a("span"),Yq=r("IterableDataset"),vw=l(),Qn=a("p"),Jq=r("The base class "),jf=a("a"),Xq=r("IterableDataset"),Zq=r(" implements an iterable Dataset backed by python generators."),yw=l(),E=a("div"),p(Hc.$$.fragment),Qq=l(),Dy=a("p"),eO=r("A Dataset backed by an iterable."),tO=l(),er=a("div"),p(Gc.$$.fragment),aO=l(),Ey=a("p"),sO=r(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),nO=l(),tr=a("div"),p(Wc.$$.fragment),rO=l(),jy=a("p"),oO=r("Cast column to feature for decoding."),iO=l(),ar=a("div"),p(Kc.$$.fragment),lO=l(),ky=a("p"),dO=r("Cast the dataset to a new set of features."),cO=l(),kf=a("div"),p(Yc.$$.fragment),pO=l(),Pt=a("div"),p(Jc.$$.fragment),mO=l(),Iy=a("p"),hO=r(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),fO=l(),Xc=a("p"),uO=r("You can specify whether the function should be batched or not with the "),Ty=a("code"),gO=r("batched"),_O=r(" parameter:"),bO=l(),Fs=a("ul"),Ny=a("li"),vO=r(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),yO=l(),Py=a("li"),xO=r(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),$O=l(),ce=a("li"),wO=r("If batched is True and batch_size is "),Ay=a("code"),DO=r("n"),EO=r(" > 1, then the function takes a batch of "),Ly=a("code"),jO=r("n"),kO=r(" examples as input and can return a batch with "),Fy=a("code"),IO=r("n"),TO=r(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),qy=a("code"),NO=r("n"),PO=r(` examples.
A batch is a dictionary, e.g. a batch of `),Oy=a("code"),AO=r("n"),LO=r(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),FO=l(),sr=a("div"),p(Zc.$$.fragment),qO=l(),Sy=a("p"),OO=r(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),SO=l(),nr=a("div"),p(Qc.$$.fragment),CO=l(),Cy=a("p"),zO=r(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),VO=l(),De=a("div"),p(ep.$$.fragment),UO=l(),zy=a("p"),MO=r("Randomly shuffles the elements of this dataset."),RO=l(),Vy=a("p"),BO=r(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),HO=l(),tp=a("p"),GO=r("For instance, if your dataset contains 10,000 elements but "),Uy=a("code"),WO=r("buffer_size"),KO=r(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),YO=l(),qs=a("p"),JO=r(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),If=a("a"),XO=r("datasets.IterableDataset.skip()"),ZO=r(" or "),Tf=a("a"),QO=r("datasets.IterableDataset.take()"),eS=r(`
then the order of the shards is kept unchanged.`),tS=l(),rr=a("div"),p(ap.$$.fragment),aS=l(),sp=a("p"),sS=r("Create a new IterableDataset that skips the first "),My=a("code"),nS=r("n"),rS=r(" elements."),oS=l(),or=a("div"),p(np.$$.fragment),iS=l(),rp=a("p"),lS=r("Create a new IterableDataset with only the first "),Ry=a("code"),dS=r("n"),cS=r(" elements."),pS=l(),ir=a("div"),p(op.$$.fragment),mS=l(),Nf=a("p"),Pf=a("a"),hS=r("datasets.DatasetInfo"),fS=r(" object containing all the metadata in the dataset."),uS=l(),lr=a("div"),p(ip.$$.fragment),gS=l(),Af=a("p"),Lf=a("a"),_S=r("datasets.NamedSplit"),bS=r(" object corresponding to a named dataset split."),vS=l(),Ff=a("div"),p(lp.$$.fragment),yS=l(),qf=a("div"),p(dp.$$.fragment),xS=l(),Of=a("div"),p(cp.$$.fragment),$S=l(),Sf=a("div"),p(pp.$$.fragment),wS=l(),Cf=a("div"),p(mp.$$.fragment),DS=l(),zf=a("div"),p(hp.$$.fragment),ES=l(),Vf=a("div"),p(fp.$$.fragment),jS=l(),Uf=a("div"),p(up.$$.fragment),kS=l(),Mf=a("div"),p(gp.$$.fragment),IS=l(),Rf=a("div"),p(_p.$$.fragment),TS=l(),Bf=a("div"),p(bp.$$.fragment),NS=l(),Hf=a("div"),p(vp.$$.fragment),PS=l(),Gf=a("div"),p(yp.$$.fragment),xw=l(),Os=a("h2"),dr=a("a"),By=a("span"),p(xp.$$.fragment),AS=l(),Hy=a("span"),LS=r("IterableDatasetDict"),$w=l(),cr=a("p"),FS=r("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Gy=a("code"),qS=r("IterableDataset"),OS=r(" objects as values."),ww=l(),P=a("div"),p($p.$$.fragment),SS=l(),At=a("div"),p(wp.$$.fragment),CS=l(),Wy=a("p"),zS=r(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),VS=l(),Dp=a("p"),US=r("You can specify whether the function should be batched or not with the "),Ky=a("code"),MS=r("batched"),RS=r(" parameter:"),BS=l(),Ss=a("ul"),Yy=a("li"),HS=r(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),GS=l(),Jy=a("li"),WS=r(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),KS=l(),pe=a("li"),YS=r("If batched is True and batch_size is "),Xy=a("code"),JS=r("n"),XS=r(" > 1, then the function takes a batch of "),Zy=a("code"),ZS=r("n"),QS=r(" examples as input and can return a batch with "),Qy=a("code"),eC=r("n"),tC=r(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),e2=a("code"),aC=r("n"),sC=r(` examples.
A batch is a dictionary, e.g. a batch of `),t2=a("code"),nC=r("n"),rC=r(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),oC=l(),pr=a("div"),p(Ep.$$.fragment),iC=l(),a2=a("p"),lC=r(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),dC=l(),Ee=a("div"),p(jp.$$.fragment),cC=l(),s2=a("p"),pC=r(`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),mC=l(),n2=a("p"),hC=r(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),fC=l(),kp=a("p"),uC=r("For instance, if your dataset contains 10,000 elements but "),r2=a("code"),gC=r("buffer_size"),_C=r(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),bC=l(),Cs=a("p"),vC=r(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Wf=a("a"),yC=r("datasets.IterableDataset.skip()"),xC=r(" or "),Kf=a("a"),$C=r("datasets.IterableDataset.take()"),wC=r(`
then the order of the shards is kept unchanged.`),DC=l(),mr=a("div"),p(Ip.$$.fragment),EC=l(),o2=a("p"),jC=r(`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),kC=l(),hr=a("div"),p(Tp.$$.fragment),IC=l(),i2=a("p"),TC=r(`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),NC=l(),fr=a("div"),p(Np.$$.fragment),PC=l(),l2=a("p"),AC=r(`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),LC=l(),ur=a("div"),p(Pp.$$.fragment),FC=l(),d2=a("p"),qC=r(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),OC=l(),gr=a("div"),p(Ap.$$.fragment),SC=l(),c2=a("p"),CC=r(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),zC=l(),_r=a("div"),p(Lp.$$.fragment),VC=l(),p2=a("p"),UC=r(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),Dw=l(),zs=a("h2"),br=a("a"),m2=a("span"),p(Fp.$$.fragment),MC=l(),h2=a("span"),RC=r("Features"),Ew=l(),T=a("div"),p(qp.$$.fragment),BC=l(),f2=a("p"),HC=r("A special dictionary that defines the internal structure of a dataset."),GC=l(),Op=a("p"),WC=r("Instantiated with a dictionary of type "),u2=a("code"),KC=r("dict[str, FieldType]"),YC=r(`, where keys are the desired column names,
and values are the type of that column.`),JC=l(),Yf=a("p"),g2=a("code"),XC=r("FieldType"),ZC=r(" can be one of the following:"),QC=l(),C=a("ul"),_2=a("li"),Da=a("p"),ez=r("a "),Jf=a("a"),tz=r("datasets.Value"),az=r(" feature specifies a single typed value, e.g. "),b2=a("code"),sz=r("int64"),nz=r(" or "),v2=a("code"),rz=r("string"),oz=l(),y2=a("li"),Sp=a("p"),iz=r("a "),Xf=a("a"),lz=r("datasets.ClassLabel"),dz=r(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),cz=l(),x2=a("li"),Cp=a("p"),pz=r("a python "),$2=a("code"),mz=r("dict"),hz=r(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),fz=l(),zp=a("li"),Ue=a("p"),uz=r("a python "),w2=a("code"),gz=r("list"),_z=r(" or a "),Zf=a("a"),bz=r("datasets.Sequence"),vz=r(` specifies that the field contains a list of objects. The python
`),D2=a("code"),yz=r("list"),xz=r(" or "),Qf=a("a"),$z=r("datasets.Sequence"),wz=r(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),Dz=l(),p(vr.$$.fragment),Ez=l(),E2=a("li"),Me=a("p"),jz=r("a "),eu=a("a"),kz=r("Array2D"),Iz=r(", "),tu=a("a"),Tz=r("Array3D"),Nz=r(", "),au=a("a"),Pz=r("Array4D"),Az=r(" or "),su=a("a"),Lz=r("Array5D"),Fz=r(" feature for multidimensional arrays"),qz=l(),j2=a("li"),Vp=a("p"),Oz=r("an "),nu=a("a"),Sz=r("Audio"),Cz=r(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),zz=l(),k2=a("li"),ra=a("p"),Vz=r("an "),ru=a("a"),Uz=r("Image"),Mz=r(" feature to store the absolute path to an image file, an "),I2=a("code"),Rz=r("np.ndarray"),Bz=r(" object, a "),T2=a("code"),Hz=r("PIL.Image.Image"),Gz=r(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),Wz=l(),N2=a("li"),yr=a("p"),ou=a("a"),Kz=r("datasets.Translation"),Yz=r(" and "),iu=a("a"),Jz=r("datasets.TranslationVariableLanguages"),Xz=r(", the two features specific to Machine Translation"),Zz=l(),xr=a("div"),p(Up.$$.fragment),Qz=l(),P2=a("p"),eV=r("Make a deep copy of Features."),tV=l(),$r=a("div"),p(Mp.$$.fragment),aV=l(),A2=a("p"),sV=r("Decode batch with custom feature decoding."),nV=l(),wr=a("div"),p(Rp.$$.fragment),rV=l(),L2=a("p"),oV=r("Decode column with custom feature decoding."),iV=l(),Dr=a("div"),p(Bp.$$.fragment),lV=l(),F2=a("p"),dV=r("Decode example with custom feature decoding."),cV=l(),Er=a("div"),p(Hp.$$.fragment),pV=l(),q2=a("p"),mV=r("Encode batch into a format for Arrow."),hV=l(),jr=a("div"),p(Gp.$$.fragment),fV=l(),O2=a("p"),uV=r("Encode example into a format for Arrow."),gV=l(),Ea=a("div"),p(Wp.$$.fragment),_V=l(),S2=a("p"),bV=r(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),vV=l(),C2=a("p"),yV=r(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),xV=l(),kr=a("div"),p(Kp.$$.fragment),$V=l(),z2=a("p"),wV=r(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),DV=l(),ae=a("div"),p(Yp.$$.fragment),EV=l(),V2=a("p"),jV=r("Construct Features from dict."),kV=l(),U2=a("p"),IV=r(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),TV=l(),oa=a("p"),NV=r(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),lu=a("a"),PV=r("DatasetInfo"),AV=r(` that was dumped to a JSON object. This acts as an analogue to
`),du=a("a"),LV=r("Features.from_arrow_schema()"),FV=r(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),cu=a("a"),qV=r("Value"),OV=r(" automatically performs."),SV=l(),M2=a("p"),CV=r("Example:"),zV=l(),p(Jp.$$.fragment),VV=l(),je=a("div"),p(Xp.$$.fragment),UV=l(),R2=a("p"),MV=r("Reorder Features fields to match the field order of other Features."),RV=l(),B2=a("p"),BV=r(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),HV=l(),H2=a("p"),GV=r("Example:"),WV=l(),p(Zp.$$.fragment),jw=l(),Vs=a("div"),p(Qp.$$.fragment),KV=l(),G2=a("p"),YV=r(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),kw=l(),G=a("div"),p(em.$$.fragment),JV=l(),W2=a("p"),XV=r("Feature type for integer class labels."),ZV=l(),tm=a("p"),QV=r("There are 3 ways to define a "),K2=a("em"),eU=r("ClassLabel"),tU=r(", which correspond to the 3 arguments:"),aU=l(),Us=a("ul"),pu=a("li"),Y2=a("em"),sU=r("num_classes"),nU=r(": Create 0 to (num_classes-1) labels."),rU=l(),mu=a("li"),J2=a("em"),oU=r("names"),iU=r(": List of label strings."),lU=l(),hu=a("li"),X2=a("em"),dU=r("names_file"),cU=r(": File containing the list of labels."),pU=l(),Ir=a("div"),p(am.$$.fragment),mU=l(),Z2=a("p"),hU=r("Conversion integer => class name string."),fU=l(),Tr=a("div"),p(sm.$$.fragment),uU=l(),Q2=a("p"),gU=r("Conversion class name string => integer."),Iw=l(),ia=a("div"),p(nm.$$.fragment),_U=l(),ex=a("p"),bU=r("The Value dtypes are as follows:"),vU=l(),tx=a("p"),yU=r(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),Tw=l(),z=a("div"),p(rm.$$.fragment),xU=l(),fu=a("p"),ax=a("code"),$U=r("FeatureConnector"),wU=r(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),DU=l(),sx=a("p"),EU=r(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),jU=l(),om=a("p"),kU=r("Output: A dictionary mapping string language codes to translations as "),nx=a("code"),IU=r("Text"),TU=r(`
features.`),NU=l(),rx=a("p"),PU=r("Example:"),AU=l(),p(im.$$.fragment),LU=l(),Nr=a("div"),p(lm.$$.fragment),FU=l(),ox=a("p"),qU=r("Flatten the Translation feature into a dictionary."),Nw=l(),V=a("div"),p(dm.$$.fragment),OU=l(),uu=a("p"),ix=a("code"),SU=r("FeatureConnector"),CU=r(` for translations with variable languages per example.
Here for compatiblity with tfds.`),zU=l(),lx=a("p"),VU=r(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),UU=l(),dx=a("p"),MU=r(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),RU=l(),cx=a("p"),BU=r("Example:"),HU=l(),p(cm.$$.fragment),GU=l(),Pr=a("div"),p(pm.$$.fragment),WU=l(),px=a("p"),KU=r("Flatten the TranslationVariableLanguages feature into a dictionary."),Pw=l(),mm=a("div"),p(hm.$$.fragment),Aw=l(),fm=a("div"),p(um.$$.fragment),Lw=l(),gm=a("div"),p(_m.$$.fragment),Fw=l(),bm=a("div"),p(vm.$$.fragment),qw=l(),A=a("div"),p(ym.$$.fragment),YU=l(),mx=a("p"),JU=r("Audio Feature to extract audio data from an audio file."),XU=l(),hx=a("p"),ZU=r("Input: The Audio feature accepts as input:"),QU=l(),Ms=a("ul"),fx=a("li"),xm=a("p"),eM=r("A "),ux=a("code"),tM=r("str"),aM=r(": Absolute path to the audio file (i.e. random access is allowed)."),sM=l(),Rs=a("li"),$m=a("p"),nM=r("A "),gx=a("code"),rM=r("dict"),oM=r(" with the keys:"),iM=l(),wm=a("ul"),_x=a("li"),lM=r("path: String with relative path of the audio file to the archive file."),dM=l(),bx=a("li"),cM=r("bytes: Bytes content of the audio file."),pM=l(),vx=a("p"),mM=r("This is useful for archived files with sequential access."),hM=l(),Bs=a("li"),Dm=a("p"),fM=r("A "),yx=a("code"),uM=r("dict"),gM=r(" with the keys:"),_M=l(),Hs=a("ul"),xx=a("li"),bM=r("path: String with relative path of the audio file to the archive file."),vM=l(),$x=a("li"),yM=r("array: Array containing the audio sample"),xM=l(),wx=a("li"),$M=r("sampling_rate: Integer corresponding to the samping rate of the audio sample."),wM=l(),Dx=a("p"),DM=r("This is useful for archived files with sequential access."),EM=l(),ja=a("div"),p(Em.$$.fragment),jM=l(),Ex=a("p"),kM=r(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),IM=l(),la=a("ul"),jx=a("li"),TM=r("pa.string() - it must contain the \u201Cpath\u201D data"),NM=l(),kx=a("li"),PM=r("pa.struct({\u201Cbytes\u201D: pa.binary()})"),AM=l(),Ix=a("li"),LM=r("pa.struct({\u201Cpath\u201D: pa.string()})"),FM=l(),Tx=a("li"),qM=r("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),OM=l(),Ar=a("div"),p(jm.$$.fragment),SM=l(),Nx=a("p"),CM=r("Decode example audio file into audio data."),zM=l(),Lr=a("div"),p(km.$$.fragment),VM=l(),Px=a("p"),UM=r("Embed audio files into the Arrow array."),MM=l(),Fr=a("div"),p(Im.$$.fragment),RM=l(),Ax=a("p"),BM=r("Encode example into a format for Arrow."),HM=l(),qr=a("div"),p(Tm.$$.fragment),GM=l(),Lx=a("p"),WM=r("If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),Ow=l(),L=a("div"),p(Nm.$$.fragment),KM=l(),Fx=a("p"),YM=r("Image feature to read image data from an image file."),JM=l(),qx=a("p"),XM=r("Input: The Image feature accepts as input:"),ZM=l(),da=a("ul"),Ox=a("li"),Pm=a("p"),QM=r("A "),Sx=a("code"),eR=r("str"),tR=r(": Absolute path to the image file (i.e. random access is allowed)."),aR=l(),Gs=a("li"),Am=a("p"),sR=r("A "),Cx=a("code"),nR=r("dict"),rR=r(" with the keys:"),oR=l(),Lm=a("ul"),zx=a("li"),iR=r("path: String with relative path of the image file to the archive file."),lR=l(),Vx=a("li"),dR=r("bytes: Bytes of the image file."),cR=l(),Ux=a("p"),pR=r("This is useful for archived files with sequential access."),mR=l(),Mx=a("li"),Fm=a("p"),hR=r("An "),Rx=a("code"),fR=r("np.ndarray"),uR=r(": NumPy array representing an image."),gR=l(),Bx=a("li"),qm=a("p"),_R=r("A "),Hx=a("code"),bR=r("PIL.Image.Image"),vR=r(": PIL image object."),yR=l(),ka=a("div"),p(Om.$$.fragment),xR=l(),Gx=a("p"),$R=r(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),wR=l(),Re=a("ul"),Wx=a("li"),DR=r("pa.string() - it must contain the \u201Cpath\u201D data"),ER=l(),Kx=a("li"),jR=r("pa.struct({\u201Cbytes\u201D: pa.binary()})"),kR=l(),Yx=a("li"),IR=r("pa.struct({\u201Cpath\u201D: pa.string()})"),TR=l(),Jx=a("li"),NR=r("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),PR=l(),Xx=a("li"),AR=r("pa.list(*) - it must contain the image array data"),LR=l(),Or=a("div"),p(Sm.$$.fragment),FR=l(),Zx=a("p"),qR=r("Decode example image file into image data."),OR=l(),Sr=a("div"),p(Cm.$$.fragment),SR=l(),Qx=a("p"),CR=r("Embed image files into the Arrow array."),zR=l(),Cr=a("div"),p(zm.$$.fragment),VR=l(),e$=a("p"),UR=r("Encode example into a format for Arrow."),MR=l(),zr=a("div"),p(Vm.$$.fragment),RR=l(),t$=a("p"),BR=r("If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),Sw=l(),Ws=a("h2"),Vr=a("a"),a$=a("span"),p(Um.$$.fragment),HR=l(),s$=a("span"),GR=r("MetricInfo"),Cw=l(),W=a("div"),p(Mm.$$.fragment),WR=l(),n$=a("p"),KR=r("Information about a metric."),YR=l(),gu=a("p"),r$=a("code"),JR=r("MetricInfo"),XR=r(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),ZR=l(),o$=a("p"),QR=r("Note: Not all fields are known on construction and may be updated later."),eB=l(),Ur=a("div"),p(Rm.$$.fragment),tB=l(),Bm=a("p"),aB=r("Create MetricInfo from the JSON file in "),i$=a("code"),sB=r("metric_info_dir"),nB=r("."),rB=l(),Mr=a("div"),p(Hm.$$.fragment),oB=l(),ca=a("p"),iB=r("Write "),l$=a("code"),lB=r("MetricInfo"),dB=r(" as JSON to "),d$=a("code"),cB=r("metric_info_dir"),pB=r(`.
Also save the license separately in LICENCE.
If `),c$=a("code"),mB=r("pretty_print"),hB=r(" is True, the JSON will be pretty-printed with the indent level of 4."),zw=l(),Ks=a("h2"),Rr=a("a"),p$=a("span"),p(Gm.$$.fragment),fB=l(),m$=a("span"),uB=r("Metric"),Vw=l(),Ia=a("p"),gB=r("The base class "),h$=a("code"),_B=r("Metric"),bB=r(" implements a Metric backed by one or several "),_u=a("a"),vB=r("Dataset"),yB=r("."),Uw=l(),K=a("div"),p(Wm.$$.fragment),xB=l(),f$=a("p"),$B=r("A Metric is the base class and common API for all metrics."),wB=l(),Br=a("div"),p(Km.$$.fragment),DB=l(),u$=a("p"),EB=r("Add one prediction and reference for the metric\u2019s stack."),jB=l(),Hr=a("div"),p(Ym.$$.fragment),kB=l(),g$=a("p"),IB=r("Add a batch of predictions and references for the metric\u2019s stack."),TB=l(),Ta=a("div"),p(Jm.$$.fragment),NB=l(),_$=a("p"),PB=r("Compute the metrics."),AB=l(),b$=a("p"),LB=r("Usage of positional arguments is not allowed to prevent mistakes."),FB=l(),Gr=a("div"),p(Xm.$$.fragment),qB=l(),v$=a("p"),OB=r("Downloads and prepares dataset for reading."),Mw=l(),Ys=a("h2"),Wr=a("a"),y$=a("span"),p(Zm.$$.fragment),SB=l(),x$=a("span"),CB=r("Filesystems"),Rw=l(),k=a("div"),p(Qm.$$.fragment),zB=l(),$$=a("p"),VB=r("Access S3 as if it were a file system."),UB=l(),w$=a("p"),MB=r(`This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3
storage.`),RB=l(),pa=a("p"),BB=r("Provide credentials either explicitly ("),D$=a("code"),HB=r("key="),GB=r(", "),E$=a("code"),WB=r("secret="),KB=r(`) or depend
on boto\u2019s credential methods. See botocore documentation for more
information. If no credentials are available, use `),j$=a("code"),YB=r("anon=True"),JB=r("."),XB=l(),k$=a("p"),ZB=r("The following parameters are passed on to fsspec:"),QB=l(),I$=a("p"),eH=r(`skip_instance_cache: to control reuse of instances
use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings`),tH=l(),T$=a("p"),aH=r("."),sH=l(),Lt=a("p"),N$=a("code"),nH=r("datasets.filesystems.S3FileSystem"),rH=r(" is a subclass of s3fs.S3FileSystem]("),eh=a("a"),oH=r("https://s3fs.readthedocs.io/en/latest/api.html"),iH=r(`), which is a known
implementation of `),P$=a("code"),lH=r("fsspec"),dH=r(". Filesystem Spec "),th=a("a"),cH=r("FSSPEC"),pH=r(` is a project to
unify various projects and classes to work with remote filesystems
and file-system-like abstractions using a standard pythonic interface.`),mH=l(),A$=a("p"),hH=r("Examples:"),fH=l(),L$=a("p"),uH=r("Listing files from public s3 bucket."),gH=l(),p(ah.$$.fragment),_H=l(),Js=a("p"),bH=r("Listing files from private s3 bucket using "),F$=a("code"),vH=r("aws_access_key_id"),yH=r(" and "),q$=a("code"),xH=r("aws_secret_access_key"),$H=r("."),wH=l(),p(sh.$$.fragment),DH=l(),ma=a("p"),EH=r("Using "),O$=a("code"),jH=r("S3Filesystem"),kH=r(" with "),S$=a("code"),IH=r("botocore.session.Session"),TH=r(" and custom "),C$=a("code"),NH=r("aws_profile"),PH=r("."),AH=l(),p(nh.$$.fragment),LH=l(),Xs=a("p"),FH=r("Loading dataset from s3 using "),z$=a("code"),qH=r("S3Filesystem"),OH=r(" and "),V$=a("code"),SH=r("load_from_disk()"),CH=r("."),zH=l(),p(rh.$$.fragment),VH=l(),U$=a("p"),UH=r("Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>."),MH=l(),p(oh.$$.fragment),RH=l(),Kr=a("h2"),Yr=a("a"),M$=a("span"),p(ih.$$.fragment),BH=l(),R$=a("span"),HH=r("Parameters"),GH=l(),U=a("p"),WH=r(`anon : bool (False)
Whether to use anonymous connection (public buckets only). If False,
uses the key/secret given, or boto\u2019s credential resolver (client_kwargs,
environment, variables, config files, EC2 IAM server, in that order)
key : string (None)
If not anonymous, use this access key ID, if specified
secret : string (None)
If not anonymous, use this secret access key, if specified
token : string (None)
If not anonymous, use this security token, if specified
use_ssl : bool (True)
Whether to use SSL in connections to S3; may be faster without, but
insecure. If `),B$=a("code"),KH=r("use_ssl"),YH=r(" is also set in "),H$=a("code"),JH=r("client_kwargs"),XH=r(`,
the value set in `),G$=a("code"),ZH=r("client_kwargs"),QH=r(` will take priority.
s3_additional_kwargs : dict of parameters that are used when calling s3 api
methods. Typically used for things like \u201CServerSideEncryption\u201D.
client_kwargs : dict of parameters for the botocore client
requester_pays : bool (False)
If RequesterPays buckets are supported.
default_block_size: int (None)
If given, the default block size value used for `),W$=a("code"),eG=r("open()"),tG=r(`, if no
specific value is given at all time. The built-in default is 5MB.
default_fill_cache : Bool (True)
Whether to use cache filling with open by default. Refer to
`),K$=a("code"),aG=r("S3File.open"),sG=r(`.
default_cache_type : string (\u2018bytes\u2019)
If given, the default cache_type value used for `),Y$=a("code"),nG=r("open()"),rG=r(`. Set to \u201Cnone\u201D
if no caching is desired. See fsspec\u2019s documentation for other available
cache_type values. Default cache_type is \u2018bytes\u2019.
version_aware : bool (False)
Whether to support bucket versioning.  If enable this will require the
user to have the necessary IAM permissions for dealing with versioned
objects.
cache_regions : bool (False)
Whether to cache bucket regions or not. Whenever a new bucket is used,
it will first find out which region it belongs and then use the client
for that region.
config_kwargs : dict of parameters passed to `),J$=a("code"),oG=r("botocore.client.Config"),iG=r(`
kwargs : other parameters for core session
session : aiobotocore AioSession object to be used for all connections.
This session will be used inplace of creating a new session inside S3FileSystem.
For example: aiobotocore.session.AioSession(profile=\u2018test_user\u2019)`),Bw=l(),Zs=a("div"),p(lh.$$.fragment),lG=l(),Qs=a("p"),dG=r("preprocesses "),X$=a("em"),cG=r("dataset_path"),pG=r(" and removes remote filesystem (e.g. removing "),Z$=a("code"),mG=r("s3://"),hG=r(")"),Hw=l(),en=a("div"),p(dh.$$.fragment),fG=l(),Q$=a("p"),uG=r("Validates if filesystem has remote protocol."),Gw=l(),tn=a("h2"),Jr=a("a"),ew=a("span"),p(ch.$$.fragment),gG=l(),tw=a("span"),_G=r("Fingerprint"),Ww=l(),an=a("div"),p(ph.$$.fragment),bG=l(),aw=a("p"),vG=r("Hasher that accepts python objects as inputs."),this.h()},l(i){const y=Lse('[data-svelte="svelte-1phssyn"]',document.head);F=s(y,"META",{name:!0,content:!0}),y.forEach(t),rn=d(i),Y=s(i,"H1",{class:!0});var mh=n(Y);Be=s(mh,"A",{id:!0,class:!0,href:!0});var OG=n(Be);ss=s(OG,"SPAN",{});var SG=n(ss);m(Pe.$$.fragment,SG),SG.forEach(t),OG.forEach(t),ni=d(mh),ns=s(mh,"SPAN",{});var CG=n(ns);ha=o(CG,"Main classes"),CG.forEach(t),mh.forEach(t),on=d(i),Ae=s(i,"H2",{class:!0});var Yw=n(Ae);me=s(Yw,"A",{id:!0,class:!0,href:!0});var zG=n(me);J=s(zG,"SPAN",{});var VG=n(J);m(fa.$$.fragment,VG),VG.forEach(t),zG.forEach(t),fh=d(Yw),ln=s(Yw,"SPAN",{});var UG=n(ln);P4=o(UG,"DatasetInfo"),UG.forEach(t),Yw.forEach(t),rw=d(i),H=s(i,"DIV",{class:!0});var Ft=n(H);m(ri.$$.fragment,Ft),A4=d(Ft),bg=s(Ft,"P",{});var MG=n(bg);L4=o(MG,"Information about a dataset."),MG.forEach(t),F4=d(Ft),uh=s(Ft,"P",{});var yG=n(uh);vg=s(yG,"EM",{});var RG=n(vg);q4=o(RG,"DatasetInfo"),RG.forEach(t),O4=o(yG,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),yG.forEach(t),S4=d(Ft),yg=s(Ft,"P",{});var BG=n(yg);C4=o(BG,"Note: Not all fields are known on construction and may be updated later."),BG.forEach(t),z4=d(Ft),He=s(Ft,"DIV",{class:!0});var Xr=n(He);m(oi.$$.fragment,Xr),V4=d(Xr),ii=s(Xr,"P",{});var Jw=n(ii);U4=o(Jw,"Create DatasetInfo from the JSON file in "),xg=s(Jw,"CODE",{});var HG=n(xg);M4=o(HG,"dataset_info_dir"),HG.forEach(t),R4=o(Jw,"."),Jw.forEach(t),B4=d(Xr),$g=s(Xr,"P",{});var GG=n($g);H4=o(GG,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),GG.forEach(t),G4=d(Xr),wg=s(Xr,"P",{});var WG=n(wg);W4=o(WG,"This will overwrite all previous metadata."),WG.forEach(t),Xr.forEach(t),K4=d(Ft),dn=s(Ft,"DIV",{class:!0});var Xw=n(dn);m(li.$$.fragment,Xw),Y4=d(Xw),rs=s(Xw,"P",{});var bu=n(rs);J4=o(bu,"Write "),Dg=s(bu,"EM",{});var KG=n(Dg);X4=o(KG,"DatasetInfo"),KG.forEach(t),Z4=o(bu," and license (if present) as JSON files to "),Eg=s(bu,"EM",{});var YG=n(Eg);Q4=o(YG,"dataset_info_dir"),YG.forEach(t),e7=o(bu,"."),bu.forEach(t),Xw.forEach(t),Ft.forEach(t),ow=d(i),os=s(i,"H2",{class:!0});var Zw=n(os);cn=s(Zw,"A",{id:!0,class:!0,href:!0});var JG=n(cn);jg=s(JG,"SPAN",{});var XG=n(jg);m(di.$$.fragment,XG),XG.forEach(t),JG.forEach(t),t7=d(Zw),kg=s(Zw,"SPAN",{});var ZG=n(kg);a7=o(ZG,"Dataset"),ZG.forEach(t),Zw.forEach(t),iw=d(i),pn=s(i,"P",{});var Qw=n(pn);s7=o(Qw,"The base class "),gh=s(Qw,"A",{href:!0});var QG=n(gh);n7=o(QG,"Dataset"),QG.forEach(t),r7=o(Qw," implements a Dataset backed by an Apache Arrow table."),Qw.forEach(t),lw=d(i),b=s(i,"DIV",{class:!0});var v=n(b);m(ci.$$.fragment,v),o7=d(v),Ig=s(v,"P",{});var eW=n(Ig);i7=o(eW,"A Dataset backed by an Arrow table."),eW.forEach(t),l7=d(v),he=s(v,"DIV",{class:!0});var Na=n(he);m(pi.$$.fragment,Na),d7=d(Na),Tg=s(Na,"P",{});var tW=n(Tg);c7=o(tW,"Add column to Dataset."),tW.forEach(t),p7=d(Na),Ng=s(Na,"P",{});var aW=n(Ng);Pg=s(aW,"EM",{});var sW=n(Pg);m7=o(sW,"New in version 1.7."),sW.forEach(t),aW.forEach(t),h7=d(Na),Ag=s(Na,"P",{});var nW=n(Ag);f7=o(nW,"Example:"),nW.forEach(t),u7=d(Na),m(mi.$$.fragment,Na),Na.forEach(t),g7=d(v),fe=s(v,"DIV",{class:!0});var Pa=n(fe);m(hi.$$.fragment,Pa),_7=d(Pa),Lg=s(Pa,"P",{});var rW=n(Lg);b7=o(rW,"Add item to Dataset."),rW.forEach(t),v7=d(Pa),Fg=s(Pa,"P",{});var oW=n(Fg);qg=s(oW,"EM",{});var iW=n(qg);y7=o(iW,"New in version 1.7."),iW.forEach(t),oW.forEach(t),x7=d(Pa),Og=s(Pa,"P",{});var lW=n(Og);$7=o(lW,"Example:"),lW.forEach(t),w7=d(Pa),m(fi.$$.fragment,Pa),Pa.forEach(t),D7=d(v),mn=s(v,"DIV",{class:!0});var e0=n(mn);m(ui.$$.fragment,e0),E7=d(e0),Sg=s(e0,"P",{});var dW=n(Sg);j7=o(dW,"Instantiate a Dataset backed by an Arrow table at filename."),dW.forEach(t),e0.forEach(t),k7=d(v),hn=s(v,"DIV",{class:!0});var t0=n(hn);m(gi.$$.fragment,t0),I7=d(t0),Cg=s(t0,"P",{});var cW=n(Cg);T7=o(cW,"Instantiate a Dataset backed by an Arrow buffer."),cW.forEach(t),t0.forEach(t),N7=d(v),X=s(v,"DIV",{class:!0});var qt=n(X);m(_i.$$.fragment,qt),P7=d(qt),Kt=s(qt,"P",{});var Zr=n(Kt);A7=o(Zr,"Convert "),zg=s(Zr,"CODE",{});var pW=n(zg);L7=o(pW,"pandas.DataFrame"),pW.forEach(t),F7=o(Zr," to a "),Vg=s(Zr,"CODE",{});var mW=n(Vg);q7=o(mW,"pyarrow.Table"),mW.forEach(t),O7=o(Zr," to create a "),_h=s(Zr,"A",{href:!0});var hW=n(_h);S7=o(hW,"Dataset"),hW.forEach(t),C7=o(Zr,"."),Zr.forEach(t),z7=d(qt),bi=s(qt,"P",{});var a0=n(bi);V7=o(a0,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Ug=s(a0,"EM",{});var fW=n(Ug);U7=o(fW,"object"),fW.forEach(t),M7=o(a0,", we need to guess the datatype by looking at the Python objects in this Series."),a0.forEach(t),R7=d(qt),vi=s(qt,"P",{});var s0=n(vi);B7=o(s0,"Be aware that Series of the "),Mg=s(s0,"EM",{});var uW=n(Mg);H7=o(uW,"object"),uW.forEach(t),G7=o(s0,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),s0.forEach(t),W7=d(qt),Rg=s(qt,"P",{});var gW=n(Rg);K7=o(gW,"Example:"),gW.forEach(t),Y7=d(qt),m(yi.$$.fragment,qt),qt.forEach(t),J7=d(v),fn=s(v,"DIV",{class:!0});var n0=n(fn);m(xi.$$.fragment,n0),X7=d(n0),Yt=s(n0,"P",{});var Qr=n(Yt);Z7=o(Qr,"Convert "),Bg=s(Qr,"CODE",{});var _W=n(Bg);Q7=o(_W,"dict"),_W.forEach(t),e6=o(Qr," to a "),Hg=s(Qr,"CODE",{});var bW=n(Hg);t6=o(bW,"pyarrow.Table"),bW.forEach(t),a6=o(Qr," to create a "),bh=s(Qr,"A",{href:!0});var vW=n(bh);s6=o(vW,"Dataset"),vW.forEach(t),n6=o(Qr,"."),Qr.forEach(t),n0.forEach(t),r6=d(v),Ge=s(v,"DIV",{class:!0});var eo=n(Ge);m($i.$$.fragment,eo),o6=d(eo),Gg=s(eo,"P",{});var yW=n(Gg);i6=o(yW,"The Apache Arrow table backing the dataset."),yW.forEach(t),l6=d(eo),Wg=s(eo,"P",{});var xW=n(Wg);d6=o(xW,"Example:"),xW.forEach(t),c6=d(eo),m(wi.$$.fragment,eo),eo.forEach(t),p6=d(v),We=s(v,"DIV",{class:!0});var to=n(We);m(Di.$$.fragment,to),m6=d(to),Kg=s(to,"P",{});var $W=n(Kg);h6=o($W,"The cache files containing the Apache Arrow table backing the dataset."),$W.forEach(t),f6=d(to),Yg=s(to,"P",{});var wW=n(Yg);u6=o(wW,"Example:"),wW.forEach(t),g6=d(to),m(Ei.$$.fragment,to),to.forEach(t),_6=d(v),Ke=s(v,"DIV",{class:!0});var ao=n(Ke);m(ji.$$.fragment,ao),b6=d(ao),Jg=s(ao,"P",{});var DW=n(Jg);v6=o(DW,"Number of columns in the dataset."),DW.forEach(t),y6=d(ao),Xg=s(ao,"P",{});var EW=n(Xg);x6=o(EW,"Example:"),EW.forEach(t),$6=d(ao),m(ki.$$.fragment,ao),ao.forEach(t),w6=d(v),Ye=s(v,"DIV",{class:!0});var so=n(Ye);m(Ii.$$.fragment,so),D6=d(so),Ti=s(so,"P",{});var r0=n(Ti);E6=o(r0,"Number of rows in the dataset (same as "),un=s(r0,"A",{href:!0});var o0=n(un);j6=o(o0,"Dataset."),Zg=s(o0,"STRONG",{});var jW=n(Zg);k6=o(jW,"len"),jW.forEach(t),I6=o(o0,"()"),o0.forEach(t),T6=o(r0,")."),r0.forEach(t),N6=d(so),Qg=s(so,"P",{});var kW=n(Qg);P6=o(kW,"Example:"),kW.forEach(t),A6=d(so),m(Ni.$$.fragment,so),so.forEach(t),L6=d(v),Je=s(v,"DIV",{class:!0});var no=n(Je);m(Pi.$$.fragment,no),F6=d(no),e_=s(no,"P",{});var IW=n(e_);q6=o(IW,"Names of the columns in the dataset."),IW.forEach(t),O6=d(no),t_=s(no,"P",{});var TW=n(t_);S6=o(TW,"Example:"),TW.forEach(t),C6=d(no),m(Ai.$$.fragment,no),no.forEach(t),z6=d(v),Xe=s(v,"DIV",{class:!0});var ro=n(Xe);m(Li.$$.fragment,ro),V6=d(ro),a_=s(ro,"P",{});var NW=n(a_);U6=o(NW,"Shape of the dataset (number of columns, number of rows)."),NW.forEach(t),M6=d(ro),s_=s(ro,"P",{});var PW=n(s_);R6=o(PW,"Example:"),PW.forEach(t),B6=d(ro),m(Fi.$$.fragment,ro),ro.forEach(t),H6=d(v),ue=s(v,"DIV",{class:!0});var Aa=n(ue);m(qi.$$.fragment,Aa),G6=d(Aa),n_=s(Aa,"P",{});var AW=n(n_);W6=o(AW,"Return a list of the unique elements in a column."),AW.forEach(t),K6=d(Aa),r_=s(Aa,"P",{});var LW=n(r_);Y6=o(LW,"This is implemented in the low-level backend and as such, very fast."),LW.forEach(t),J6=d(Aa),o_=s(Aa,"P",{});var FW=n(o_);X6=o(FW,"Example:"),FW.forEach(t),Z6=d(Aa),m(Oi.$$.fragment,Aa),Aa.forEach(t),Q6=d(v),Ze=s(v,"DIV",{class:!0});var oo=n(Ze);m(Si.$$.fragment,oo),e8=d(oo),i_=s(oo,"P",{});var qW=n(i_);t8=o(qW,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),qW.forEach(t),a8=d(oo),l_=s(oo,"P",{});var OW=n(l_);s8=o(OW,"Example:"),OW.forEach(t),n8=d(oo),m(Ci.$$.fragment,oo),oo.forEach(t),r8=d(v),Qe=s(v,"DIV",{class:!0});var io=n(Qe);m(zi.$$.fragment,io),o8=d(io),d_=s(io,"P",{});var SW=n(d_);i8=o(SW,"Cast the dataset to a new set of features."),SW.forEach(t),l8=d(io),c_=s(io,"P",{});var CW=n(c_);d8=o(CW,"Example:"),CW.forEach(t),c8=d(io),m(Vi.$$.fragment,io),io.forEach(t),p8=d(v),et=s(v,"DIV",{class:!0});var lo=n(et);m(Ui.$$.fragment,lo),m8=d(lo),p_=s(lo,"P",{});var zW=n(p_);h8=o(zW,"Cast column to feature for decoding."),zW.forEach(t),f8=d(lo),m_=s(lo,"P",{});var VW=n(m_);u8=o(VW,"Example:"),VW.forEach(t),g8=d(lo),m(Mi.$$.fragment,lo),lo.forEach(t),_8=d(v),ge=s(v,"DIV",{class:!0});var La=n(ge);m(Ri.$$.fragment,La),b8=d(La),h_=s(La,"P",{});var UW=n(h_);v8=o(UW,"Remove one or several column(s) in the dataset and the features associated to them."),UW.forEach(t),y8=d(La),is=s(La,"P",{});var vu=n(is);x8=o(vu,"You can also remove a column using "),vh=s(vu,"A",{href:!0});var MW=n(vh);$8=o(MW,"Dataset.map()"),MW.forEach(t),w8=o(vu," with "),f_=s(vu,"EM",{});var RW=n(f_);D8=o(RW,"remove_columns"),RW.forEach(t),E8=o(vu,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),vu.forEach(t),j8=d(La),u_=s(La,"P",{});var BW=n(u_);k8=o(BW,"Example:"),BW.forEach(t),I8=d(La),m(Bi.$$.fragment,La),La.forEach(t),T8=d(v),tt=s(v,"DIV",{class:!0});var co=n(tt);m(Hi.$$.fragment,co),N8=d(co),g_=s(co,"P",{});var HW=n(g_);P8=o(HW,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),HW.forEach(t),A8=d(co),__=s(co,"P",{});var GW=n(__);L8=o(GW,"Example:"),GW.forEach(t),F8=d(co),m(Gi.$$.fragment,co),co.forEach(t),q8=d(v),at=s(v,"DIV",{class:!0});var po=n(at);m(Wi.$$.fragment,po),O8=d(po),b_=s(po,"P",{});var WW=n(b_);S8=o(WW,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),WW.forEach(t),C8=d(po),v_=s(po,"P",{});var KW=n(v_);z8=o(KW,"Example:"),KW.forEach(t),V8=d(po),m(Ki.$$.fragment,po),po.forEach(t),U8=d(v),st=s(v,"DIV",{class:!0});var mo=n(st);m(Yi.$$.fragment,mo),M8=d(mo),Ji=s(mo,"P",{});var i0=n(Ji);R8=o(i0,"Casts the given column as :obj:"),y_=s(i0,"CODE",{});var YW=n(y_);B8=o(YW,"datasets.features.ClassLabel"),YW.forEach(t),H8=o(i0," and updates the table."),i0.forEach(t),G8=d(mo),x_=s(mo,"P",{});var JW=n(x_);W8=o(JW,"Example:"),JW.forEach(t),K8=d(mo),m(Xi.$$.fragment,mo),mo.forEach(t),Y8=d(v),nt=s(v,"DIV",{class:!0});var ho=n(nt);m(Zi.$$.fragment,ho),J8=d(ho),$_=s(ho,"P",{});var XW=n($_);X8=o(XW,"Number of rows in the dataset."),XW.forEach(t),Z8=d(ho),w_=s(ho,"P",{});var ZW=n(w_);Q8=o(ZW,"Example:"),ZW.forEach(t),eE=d(ho),m(Qi.$$.fragment,ho),ho.forEach(t),tE=d(v),ua=s(v,"DIV",{class:!0});var yu=n(ua);m(el.$$.fragment,yu),aE=d(yu),D_=s(yu,"P",{});var QW=n(D_);sE=o(QW,"Iterate through the examples."),QW.forEach(t),nE=d(yu),tl=s(yu,"P",{});var l0=n(tl);rE=o(l0,"If a formatting is set with "),yh=s(l0,"A",{href:!0});var eK=n(yh);oE=o(eK,"Dataset.set_format()"),eK.forEach(t),iE=o(l0,` rows will be returned with the
selected format.`),l0.forEach(t),yu.forEach(t),lE=d(v),gn=s(v,"DIV",{class:!0});var d0=n(gn);m(al.$$.fragment,d0),dE=d(d0),ls=s(d0,"P",{});var xu=n(ls);cE=o(xu,"To be used in a "),E_=s(xu,"CODE",{});var tK=n(E_);pE=o(tK,"with"),tK.forEach(t),mE=o(xu," statement. Set "),j_=s(xu,"CODE",{});var aK=n(j_);hE=o(aK,"__getitem__"),aK.forEach(t),fE=o(xu," return format (type and columns)."),xu.forEach(t),d0.forEach(t),uE=d(v),Z=s(v,"DIV",{class:!0});var Ot=n(Z);m(sl.$$.fragment,Ot),gE=d(Ot),Le=s(Ot,"P",{});var Fa=n(Le);_E=o(Fa,"Set "),k_=s(Fa,"STRONG",{});var sK=n(k_);bE=o(sK,"getitem"),sK.forEach(t),vE=o(Fa,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),I_=s(Fa,"CODE",{});var nK=n(I_);yE=o(nK,"type"),nK.forEach(t),xE=o(Fa," (for example \u201Cnumpy\u201D) is used to format batches when using "),T_=s(Fa,"STRONG",{});var rK=n(T_);$E=o(rK,"getitem"),rK.forEach(t),wE=o(Fa,`.
It\u2019s also possible to use custom transforms for formatting using `),xh=s(Fa,"A",{href:!0});var oK=n(xh);DE=o(oK,"datasets.Dataset.set_transform()"),oK.forEach(t),EE=o(Fa,"."),Fa.forEach(t),jE=d(Ot),Fe=s(Ot,"P",{});var qa=n(Fe);kE=o(qa,"It is possible to call "),N_=s(qa,"CODE",{});var iK=n(N_);IE=o(iK,"map"),iK.forEach(t),TE=o(qa," after calling "),P_=s(qa,"CODE",{});var lK=n(P_);NE=o(lK,"set_format"),lK.forEach(t),PE=o(qa,". Since "),A_=s(qa,"CODE",{});var dK=n(A_);AE=o(dK,"map"),dK.forEach(t),LE=o(qa,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),L_=s(qa,"CODE",{});var cK=n(L_);FE=o(cK,"map"),cK.forEach(t),qE=o(qa," on a dataset to add a new column, then this column will be formatted:"),qa.forEach(t),OE=d(Ot),F_=s(Ot,"P",{});var pK=n(F_);SE=o(pK,"new formatted columns = (all columns - previously unformatted columns)"),pK.forEach(t),CE=d(Ot),q_=s(Ot,"P",{});var mK=n(q_);zE=o(mK,"Example:"),mK.forEach(t),VE=d(Ot),m(nl.$$.fragment,Ot),Ot.forEach(t),UE=d(v),rt=s(v,"DIV",{class:!0});var fo=n(rt);m(rl.$$.fragment,fo),ME=d(fo),ot=s(fo,"P",{});var sn=n(ot);RE=o(sn,"Set "),O_=s(sn,"STRONG",{});var hK=n(O_);BE=o(hK,"getitem"),hK.forEach(t),HE=o(sn," return format using this transform. The transform is applied on-the-fly on batches when "),S_=s(sn,"STRONG",{});var fK=n(S_);GE=o(fK,"getitem"),fK.forEach(t),WE=o(sn,` is called.
As `),$h=s(sn,"A",{href:!0});var uK=n($h);KE=o(uK,"datasets.Dataset.set_format()"),uK.forEach(t),YE=o(sn,", this can be reset using "),wh=s(sn,"A",{href:!0});var gK=n(wh);JE=o(gK,"datasets.Dataset.reset_format()"),gK.forEach(t),sn.forEach(t),XE=d(fo),C_=s(fo,"P",{});var _K=n(C_);ZE=o(_K,"Example:"),_K.forEach(t),QE=d(fo),m(ol.$$.fragment,fo),fo.forEach(t),ej=d(v),_e=s(v,"DIV",{class:!0});var Oa=n(_e);m(il.$$.fragment,Oa),tj=d(Oa),ll=s(Oa,"P",{});var c0=n(ll);aj=o(c0,"Reset "),z_=s(c0,"STRONG",{});var bK=n(z_);sj=o(bK,"getitem"),bK.forEach(t),nj=o(c0," return format to python objects and all columns."),c0.forEach(t),rj=d(Oa),Dh=s(Oa,"P",{});var xG=n(Dh);oj=o(xG,"Same as "),V_=s(xG,"CODE",{});var vK=n(V_);ij=o(vK,"self.set_format()"),vK.forEach(t),xG.forEach(t),lj=d(Oa),U_=s(Oa,"P",{});var yK=n(U_);dj=o(yK,"Example:"),yK.forEach(t),cj=d(Oa),m(dl.$$.fragment,Oa),Oa.forEach(t),pj=d(v),Q=s(v,"DIV",{class:!0});var St=n(Q);m(cl.$$.fragment,St),mj=d(St),Jt=s(St,"P",{});var uo=n(Jt);hj=o(uo,"Set "),M_=s(uo,"STRONG",{});var xK=n(M_);fj=o(xK,"getitem"),xK.forEach(t),uj=o(uo,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),R_=s(uo,"CODE",{});var $K=n(R_);gj=o($K,"type"),$K.forEach(t),_j=o(uo," (for example \u201Cnumpy\u201D) is used to format batches when using "),B_=s(uo,"STRONG",{});var wK=n(B_);bj=o(wK,"getitem"),wK.forEach(t),vj=o(uo,"."),uo.forEach(t),yj=d(St),pl=s(St,"P",{});var p0=n(pl);xj=o(p0,"It\u2019s also possible to use custom transforms for formatting using "),Eh=s(p0,"A",{href:!0});var DK=n(Eh);$j=o(DK,"datasets.Dataset.with_transform()"),DK.forEach(t),wj=o(p0,"."),p0.forEach(t),Dj=d(St),ds=s(St,"P",{});var $u=n(ds);Ej=o($u,"Contrary to "),jh=s($u,"A",{href:!0});var EK=n(jh);jj=o(EK,"datasets.Dataset.set_format()"),EK.forEach(t),kj=o($u,", "),H_=s($u,"CODE",{});var jK=n(H_);Ij=o(jK,"with_format"),jK.forEach(t),Tj=o($u," returns a new Dataset object."),$u.forEach(t),Nj=d(St),G_=s(St,"P",{});var kK=n(G_);Pj=o(kK,"Example:"),kK.forEach(t),Aj=d(St),m(ml.$$.fragment,St),St.forEach(t),Lj=d(v),ee=s(v,"DIV",{class:!0});var Ct=n(ee);m(hl.$$.fragment,Ct),Fj=d(Ct),cs=s(Ct,"P",{});var wu=n(cs);qj=o(wu,"Set "),W_=s(wu,"STRONG",{});var IK=n(W_);Oj=o(IK,"getitem"),IK.forEach(t),Sj=o(wu," return format using this transform. The transform is applied on-the-fly on batches when "),K_=s(wu,"STRONG",{});var TK=n(K_);Cj=o(TK,"getitem"),TK.forEach(t),zj=o(wu," is called."),wu.forEach(t),Vj=d(Ct),ps=s(Ct,"P",{});var Du=n(ps);Uj=o(Du,"As "),kh=s(Du,"A",{href:!0});var NK=n(kh);Mj=o(NK,"datasets.Dataset.set_format()"),NK.forEach(t),Rj=o(Du,", this can be reset using "),Ih=s(Du,"A",{href:!0});var PK=n(Ih);Bj=o(PK,"datasets.Dataset.reset_format()"),PK.forEach(t),Hj=o(Du,"."),Du.forEach(t),Gj=d(Ct),ms=s(Ct,"P",{});var Eu=n(ms);Wj=o(Eu,"Contrary to "),Th=s(Eu,"A",{href:!0});var AK=n(Th);Kj=o(AK,"datasets.Dataset.set_transform()"),AK.forEach(t),Yj=o(Eu,", "),Y_=s(Eu,"CODE",{});var LK=n(Y_);Jj=o(LK,"with_transform"),LK.forEach(t),Xj=o(Eu," returns a new Dataset object."),Eu.forEach(t),Zj=d(Ct),J_=s(Ct,"P",{});var FK=n(J_);Qj=o(FK,"Example:"),FK.forEach(t),e3=d(Ct),m(fl.$$.fragment,Ct),Ct.forEach(t),t3=d(v),_n=s(v,"DIV",{class:!0});var m0=n(_n);m(ul.$$.fragment,m0),a3=d(m0),X_=s(m0,"P",{});var qK=n(X_);s3=o(qK,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),qK.forEach(t),m0.forEach(t),n3=d(v),be=s(v,"DIV",{class:!0});var Sa=n(be);m(gl.$$.fragment,Sa),r3=d(Sa),Z_=s(Sa,"P",{});var OK=n(Z_);o3=o(OK,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),OK.forEach(t),i3=d(Sa),Q_=s(Sa,"P",{});var SK=n(Q_);l3=o(SK,"Be careful when running this command that no other process is currently using other cache files."),SK.forEach(t),d3=d(Sa),e1=s(Sa,"P",{});var CK=n(e1);c3=o(CK,"Example:"),CK.forEach(t),p3=d(Sa),m(_l.$$.fragment,Sa),Sa.forEach(t),m3=d(v),te=s(v,"DIV",{class:!0});var zt=n(te);m(bl.$$.fragment,zt),h3=d(zt),t1=s(zt,"P",{});var zK=n(t1);f3=o(zK,`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),zK.forEach(t),u3=d(zt),vl=s(zt,"P",{});var h0=n(vl);g3=o(h0,"You can specify whether the function should be batched or not with the "),a1=s(h0,"CODE",{});var VK=n(a1);_3=o(VK,"batched"),VK.forEach(t),b3=o(h0," parameter:"),h0.forEach(t),v3=d(zt),hs=s(zt,"UL",{});var ju=n(hs);s1=s(ju,"LI",{});var UK=n(s1);y3=o(UK,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),UK.forEach(t),x3=d(ju),n1=s(ju,"LI",{});var MK=n(n1);$3=o(MK,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),MK.forEach(t),w3=d(ju),oe=s(ju,"LI",{});var Vt=n(oe);D3=o(Vt,"If batched is True and batch_size is "),r1=s(Vt,"CODE",{});var RK=n(r1);E3=o(RK,"n"),RK.forEach(t),j3=o(Vt," > 1, then the function takes a batch of "),o1=s(Vt,"CODE",{});var BK=n(o1);k3=o(BK,"n"),BK.forEach(t),I3=o(Vt," examples as input and can return a batch with "),i1=s(Vt,"CODE",{});var HK=n(i1);T3=o(HK,"n"),HK.forEach(t),N3=o(Vt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),l1=s(Vt,"CODE",{});var GK=n(l1);P3=o(GK,"n"),GK.forEach(t),A3=o(Vt,` examples.
A batch is a dictionary, e.g. a batch of `),d1=s(Vt,"CODE",{});var WK=n(d1);L3=o(WK,"n"),WK.forEach(t),F3=o(Vt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Vt.forEach(t),ju.forEach(t),q3=d(zt),c1=s(zt,"P",{});var KK=n(c1);O3=o(KK,"Example:"),KK.forEach(t),S3=d(zt),m(yl.$$.fragment,zt),zt.forEach(t),C3=d(v),it=s(v,"DIV",{class:!0});var go=n(it);m(xl.$$.fragment,go),z3=d(go),p1=s(go,"P",{});var YK=n(p1);V3=o(YK,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),YK.forEach(t),U3=d(go),m1=s(go,"P",{});var JK=n(m1);M3=o(JK,"Example:"),JK.forEach(t),R3=d(go),m($l.$$.fragment,go),go.forEach(t),B3=d(v),lt=s(v,"DIV",{class:!0});var _o=n(lt);m(wl.$$.fragment,_o),H3=d(_o),h1=s(_o,"P",{});var XK=n(h1);G3=o(XK,"Create a new dataset with rows selected following the list/array of indices."),XK.forEach(t),W3=d(_o),f1=s(_o,"P",{});var ZK=n(f1);K3=o(ZK,"Example:"),ZK.forEach(t),Y3=d(_o),m(Dl.$$.fragment,_o),_o.forEach(t),J3=d(v),ve=s(v,"DIV",{class:!0});var Ca=n(ve);m(El.$$.fragment,Ca),X3=d(Ca),u1=s(Ca,"P",{});var QK=n(u1);Z3=o(QK,"Create a new dataset sorted according to a column."),QK.forEach(t),Q3=d(Ca),g1=s(Ca,"P",{});var eY=n(g1);ek=o(eY,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),eY.forEach(t),tk=d(Ca),_1=s(Ca,"P",{});var tY=n(_1);ak=o(tY,"Example:"),tY.forEach(t),sk=d(Ca),m(jl.$$.fragment,Ca),Ca.forEach(t),nk=d(v),ye=s(v,"DIV",{class:!0});var za=n(ye);m(kl.$$.fragment,za),rk=d(za),b1=s(za,"P",{});var aY=n(b1);ok=o(aY,"Create a new Dataset where the rows are shuffled."),aY.forEach(t),ik=d(za),v1=s(za,"P",{});var sY=n(v1);lk=o(sY,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),sY.forEach(t),dk=d(za),y1=s(za,"P",{});var nY=n(y1);ck=o(nY,"Example:"),nY.forEach(t),pk=d(za),m(Il.$$.fragment,za),za.forEach(t),mk=d(v),xe=s(v,"DIV",{class:!0});var Va=n(xe);m(Tl.$$.fragment,Va),hk=d(Va),O=s(Va,"P",{});var se=n(O);fk=o(se,"Return a dictionary ("),x1=s(se,"CODE",{});var rY=n(x1);uk=o(rY,"datasets.DatsetDict"),rY.forEach(t),gk=o(se,") with two random train and test subsets ("),$1=s(se,"EM",{});var oY=n($1);_k=o(oY,"train"),oY.forEach(t),bk=o(se," and "),w1=s(se,"EM",{});var iY=n(w1);vk=o(iY,"test"),iY.forEach(t),yk=d(se),D1=s(se,"CODE",{});var lY=n(D1);xk=o(lY,"Dataset"),lY.forEach(t),$k=o(se,` splits).
Splits are created from the dataset according to `),E1=s(se,"EM",{});var dY=n(E1);wk=o(dY,"test_size"),dY.forEach(t),Dk=o(se,", "),j1=s(se,"EM",{});var cY=n(j1);Ek=o(cY,"train_size"),cY.forEach(t),jk=o(se," and "),k1=s(se,"EM",{});var pY=n(k1);kk=o(pY,"shuffle"),pY.forEach(t),Ik=o(se,"."),se.forEach(t),Tk=d(Va),Nl=s(Va,"P",{});var f0=n(Nl);Nk=o(f0,"This method is similar to scikit-learn "),I1=s(f0,"EM",{});var mY=n(I1);Pk=o(mY,"train_test_split"),mY.forEach(t),Ak=o(f0," with the omission of the stratified options."),f0.forEach(t),Lk=d(Va),T1=s(Va,"P",{});var hY=n(T1);Fk=o(hY,"Example:"),hY.forEach(t),qk=d(Va),m(Pl.$$.fragment,Va),Va.forEach(t),Ok=d(v),M=s(v,"DIV",{class:!0});var ke=n(M);m(Al.$$.fragment,ke),Sk=d(ke),fs=s(ke,"P",{});var ku=n(fs);Ck=o(ku,"Return the "),N1=s(ku,"EM",{});var fY=n(N1);zk=o(fY,"index"),fY.forEach(t),Vk=o(ku,"-nth shard from dataset split into "),P1=s(ku,"EM",{});var uY=n(P1);Uk=o(uY,"num_shards"),uY.forEach(t),Mk=o(ku," pieces."),ku.forEach(t),Rk=d(ke),A1=s(ke,"P",{});var gY=n(A1);Bk=o(gY,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),gY.forEach(t),Hk=d(ke),Ll=s(ke,"P",{});var u0=n(Ll);Gk=o(u0,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),L1=s(u0,"EM",{});var _Y=n(L1);Wk=o(_Y,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),_Y.forEach(t),Kk=o(u0,` will return
a dataset with the same order as the original.`),u0.forEach(t),Yk=d(ke),F1=s(ke,"P",{});var bY=n(F1);Jk=o(bY,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),bY.forEach(t),Xk=d(ke),q1=s(ke,"P",{});var vY=n(q1);Zk=o(vY,"Example:"),vY.forEach(t),Qk=d(ke),m(Fl.$$.fragment,ke),ke.forEach(t),e5=d(v),dt=s(v,"DIV",{class:!0});var bo=n(dt);m(ql.$$.fragment,bo),t5=d(bo),O1=s(bo,"P",{});var yY=n(O1);a5=o(yY,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),yY.forEach(t),s5=d(bo),S1=s(bo,"P",{});var xY=n(S1);n5=o(xY,"Example:"),xY.forEach(t),r5=d(bo),m(Ol.$$.fragment,bo),bo.forEach(t),o5=d(v),ct=s(v,"DIV",{class:!0});var vo=n(ct);m(Sl.$$.fragment,vo),i5=d(vo),C1=s(vo,"P",{});var $Y=n(C1);l5=o($Y,`Pushes the dataset to the hub.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),$Y.forEach(t),d5=d(vo),z1=s(vo,"P",{});var wY=n(z1);c5=o(wY,"Example:"),wY.forEach(t),p5=d(vo),m(Cl.$$.fragment,vo),vo.forEach(t),m5=d(v),pt=s(v,"DIV",{class:!0});var yo=n(pt);m(zl.$$.fragment,yo),h5=d(yo),us=s(yo,"P",{});var Iu=n(us);f5=o(Iu,"Saves a dataset to a dataset directory, or in a filesystem using either "),Nh=s(Iu,"A",{href:!0});var DY=n(Nh);u5=o(DY,"S3FileSystem"),DY.forEach(t),g5=o(Iu,` or
any implementation of `),V1=s(Iu,"CODE",{});var EY=n(V1);_5=o(EY,"fsspec.spec.AbstractFileSystem"),EY.forEach(t),b5=o(Iu,"."),Iu.forEach(t),v5=d(yo),U1=s(yo,"P",{});var jY=n(U1);y5=o(jY,"Example:"),jY.forEach(t),x5=d(yo),m(Vl.$$.fragment,yo),yo.forEach(t),$5=d(v),mt=s(v,"DIV",{class:!0});var xo=n(mt);m(Ul.$$.fragment,xo),w5=d(xo),Xt=s(xo,"P",{});var $o=n(Xt);D5=o($o,"Loads a dataset that was previously saved using "),M1=s($o,"CODE",{});var kY=n(M1);E5=o(kY,"save_to_disk"),kY.forEach(t),j5=o($o,` from a dataset directory, or from a
filesystem using either `),Ph=s($o,"A",{href:!0});var IY=n(Ph);k5=o(IY,"S3FileSystem"),IY.forEach(t),I5=o($o,` or any implementation of
`),R1=s($o,"CODE",{});var TY=n(R1);T5=o(TY,"fsspec.spec.AbstractFileSystem"),TY.forEach(t),N5=o($o,"."),$o.forEach(t),P5=d(xo),B1=s(xo,"P",{});var NY=n(B1);A5=o(NY,"Example:"),NY.forEach(t),L5=d(xo),m(Ml.$$.fragment,xo),xo.forEach(t),F5=d(v),bn=s(v,"DIV",{class:!0});var g0=n(bn);m(Rl.$$.fragment,g0),q5=d(g0),H1=s(g0,"P",{});var PY=n(H1);O5=o(PY,"Create and cache a new Dataset by flattening the indices mapping."),PY.forEach(t),g0.forEach(t),S5=d(v),ht=s(v,"DIV",{class:!0});var wo=n(ht);m(Bl.$$.fragment,wo),C5=d(wo),G1=s(wo,"P",{});var AY=n(G1);z5=o(AY,"Exports the dataset to csv"),AY.forEach(t),V5=d(wo),W1=s(wo,"P",{});var LY=n(W1);U5=o(LY,"Example:"),LY.forEach(t),M5=d(wo),m(Hl.$$.fragment,wo),wo.forEach(t),R5=d(v),ft=s(v,"DIV",{class:!0});var Do=n(ft);m(Gl.$$.fragment,Do),B5=d(Do),Wl=s(Do,"P",{});var _0=n(Wl);H5=o(_0,"Returns the dataset as a "),K1=s(_0,"CODE",{});var FY=n(K1);G5=o(FY,"pandas.DataFrame"),FY.forEach(t),W5=o(_0,". Can also return a generator for large datasets."),_0.forEach(t),K5=d(Do),Y1=s(Do,"P",{});var qY=n(Y1);Y5=o(qY,"Example:"),qY.forEach(t),J5=d(Do),m(Kl.$$.fragment,Do),Do.forEach(t),X5=d(v),ut=s(v,"DIV",{class:!0});var Eo=n(ut);m(Yl.$$.fragment,Eo),Z5=d(Eo),J1=s(Eo,"P",{});var OY=n(J1);Q5=o(OY,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),OY.forEach(t),eI=d(Eo),X1=s(Eo,"P",{});var SY=n(X1);tI=o(SY,"Example:"),SY.forEach(t),aI=d(Eo),m(Jl.$$.fragment,Eo),Eo.forEach(t),sI=d(v),gt=s(v,"DIV",{class:!0});var jo=n(gt);m(Xl.$$.fragment,jo),nI=d(jo),Z1=s(jo,"P",{});var CY=n(Z1);rI=o(CY,"Export the dataset to JSON Lines or JSON."),CY.forEach(t),oI=d(jo),Q1=s(jo,"P",{});var zY=n(Q1);iI=o(zY,"Example:"),zY.forEach(t),lI=d(jo),m(Zl.$$.fragment,jo),jo.forEach(t),dI=d(v),_t=s(v,"DIV",{class:!0});var ko=n(_t);m(Ql.$$.fragment,ko),cI=d(ko),eb=s(ko,"P",{});var VY=n(eb);pI=o(VY,"Exports the dataset to parquet"),VY.forEach(t),mI=d(ko),tb=s(ko,"P",{});var UY=n(tb);hI=o(UY,"Example:"),UY.forEach(t),fI=d(ko),m(ed.$$.fragment,ko),ko.forEach(t),uI=d(v),$e=s(v,"DIV",{class:!0});var Ua=n($e);m(td.$$.fragment,Ua),gI=d(Ua),gs=s(Ua,"P",{});var Tu=n(gs);_I=o(Tu,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),ab=s(Tu,"CODE",{});var MY=n(ab);bI=o(MY,"device"),MY.forEach(t),vI=o(Tu," if you want to run it on GPU ("),sb=s(Tu,"CODE",{});var RY=n(sb);yI=o(RY,"device"),RY.forEach(t),xI=o(Tu,` must be the GPU index).
You can find more information about Faiss here:`),Tu.forEach(t),$I=d(Ua),nb=s(Ua,"UL",{});var BY=n(nb);Ah=s(BY,"LI",{});var $G=n(Ah);wI=o($G,"For "),ad=s($G,"A",{href:!0,rel:!0});var HY=n(ad);DI=o(HY,"string factory"),HY.forEach(t),$G.forEach(t),BY.forEach(t),EI=d(Ua),rb=s(Ua,"P",{});var GY=n(rb);jI=o(GY,"Example:"),GY.forEach(t),kI=d(Ua),m(sd.$$.fragment,Ua),Ua.forEach(t),II=d(v),ga=s(v,"DIV",{class:!0});var Nu=n(ga);m(nd.$$.fragment,Nu),TI=d(Nu),Zt=s(Nu,"P",{});var Io=n(Zt);NI=o(Io,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),ob=s(Io,"EM",{});var WY=n(ob);PI=o(WY,"external_arrays"),WY.forEach(t),AI=o(Io,`.
You can specify `),ib=s(Io,"EM",{});var KY=n(ib);LI=o(KY,"device"),KY.forEach(t),FI=o(Io," if you want to run it on GPU ("),lb=s(Io,"EM",{});var YY=n(lb);qI=o(YY,"device"),YY.forEach(t),OI=o(Io,` must be the GPU index).
You can find more information about Faiss here:`),Io.forEach(t),SI=d(Nu),db=s(Nu,"UL",{});var JY=n(db);Lh=s(JY,"LI",{});var wG=n(Lh);CI=o(wG,"For "),rd=s(wG,"A",{href:!0,rel:!0});var XY=n(rd);zI=o(XY,"string factory"),XY.forEach(t),wG.forEach(t),JY.forEach(t),Nu.forEach(t),VI=d(v),vn=s(v,"DIV",{class:!0});var b0=n(vn);m(od.$$.fragment,b0),UI=d(b0),cb=s(b0,"P",{});var ZY=n(cb);MI=o(ZY,"Save a FaissIndex on disk."),ZY.forEach(t),b0.forEach(t),RI=d(v),_a=s(v,"DIV",{class:!0});var Pu=n(_a);m(id.$$.fragment,Pu),BI=d(Pu),pb=s(Pu,"P",{});var QY=n(pb);HI=o(QY,"Load a FaissIndex from disk."),QY.forEach(t),GI=d(Pu),ld=s(Pu,"P",{});var v0=n(ld);WI=o(v0,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),mb=s(v0,"EM",{});var eJ=n(mb);KI=o(eJ,".get_index(index_name).faiss_index"),eJ.forEach(t),YI=o(v0," to make it fit your needs."),v0.forEach(t),Pu.forEach(t),JI=d(v),bt=s(v,"DIV",{class:!0});var To=n(bt);m(dd.$$.fragment,To),XI=d(To),hb=s(To,"P",{});var tJ=n(hb);ZI=o(tJ,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),tJ.forEach(t),QI=d(To),fb=s(To,"P",{});var aJ=n(fb);e9=o(aJ,"Example:"),aJ.forEach(t),t9=d(To),m(cd.$$.fragment,To),To.forEach(t),a9=d(v),vt=s(v,"DIV",{class:!0});var No=n(vt);m(pd.$$.fragment,No),s9=d(No),ub=s(No,"P",{});var sJ=n(ub);n9=o(sJ,"Load an existing text index using ElasticSearch for fast retrieval."),sJ.forEach(t),r9=d(No),gb=s(No,"P",{});var nJ=n(gb);o9=o(nJ,"Default config is:"),nJ.forEach(t),i9=d(No),m(md.$$.fragment,No),No.forEach(t),l9=d(v),yn=s(v,"DIV",{class:!0});var y0=n(yn);m(hd.$$.fragment,y0),d9=d(y0),_b=s(y0,"P",{});var rJ=n(_b);c9=o(rJ,"List the colindex_nameumns/identifiers of all the attached indexes."),rJ.forEach(t),y0.forEach(t),p9=d(v),xn=s(v,"DIV",{class:!0});var x0=n(xn);m(fd.$$.fragment,x0),m9=d(x0),bb=s(x0,"P",{});var oJ=n(bb);h9=o(oJ,"List the index_name/identifiers of all the attached indexes."),oJ.forEach(t),x0.forEach(t),f9=d(v),$n=s(v,"DIV",{class:!0});var $0=n($n);m(ud.$$.fragment,$0),u9=d($0),vb=s($0,"P",{});var iJ=n(vb);g9=o(iJ,"Drop the index with the specified column."),iJ.forEach(t),$0.forEach(t),_9=d(v),wn=s(v,"DIV",{class:!0});var w0=n(wn);m(gd.$$.fragment,w0),b9=d(w0),yb=s(w0,"P",{});var lJ=n(yb);v9=o(lJ,"Find the nearest examples indices in the dataset to the query."),lJ.forEach(t),w0.forEach(t),y9=d(v),Dn=s(v,"DIV",{class:!0});var D0=n(Dn);m(_d.$$.fragment,D0),x9=d(D0),xb=s(D0,"P",{});var dJ=n(xb);$9=o(dJ,"Find the nearest examples indices in the dataset to the query."),dJ.forEach(t),D0.forEach(t),w9=d(v),En=s(v,"DIV",{class:!0});var E0=n(En);m(bd.$$.fragment,E0),D9=d(E0),$b=s(E0,"P",{});var cJ=n($b);E9=o(cJ,"Find the nearest examples in the dataset to the query."),cJ.forEach(t),E0.forEach(t),j9=d(v),jn=s(v,"DIV",{class:!0});var j0=n(jn);m(vd.$$.fragment,j0),k9=d(j0),wb=s(j0,"P",{});var pJ=n(wb);I9=o(pJ,"Find the nearest examples in the dataset to the query."),pJ.forEach(t),j0.forEach(t),T9=d(v),kn=s(v,"DIV",{class:!0});var k0=n(kn);m(yd.$$.fragment,k0),N9=d(k0),Fh=s(k0,"P",{});var DG=n(Fh);qh=s(DG,"A",{href:!0});var mJ=n(qh);P9=o(mJ,"datasets.DatasetInfo"),mJ.forEach(t),A9=o(DG," object containing all the metadata in the dataset."),DG.forEach(t),k0.forEach(t),L9=d(v),In=s(v,"DIV",{class:!0});var I0=n(In);m(xd.$$.fragment,I0),F9=d(I0),Oh=s(I0,"P",{});var EG=n(Oh);Sh=s(EG,"A",{href:!0});var hJ=n(Sh);q9=o(hJ,"datasets.NamedSplit"),hJ.forEach(t),O9=o(EG," object corresponding to a named dataset split."),EG.forEach(t),I0.forEach(t),S9=d(v),Ch=s(v,"DIV",{class:!0});var fJ=n(Ch);m($d.$$.fragment,fJ),fJ.forEach(t),C9=d(v),zh=s(v,"DIV",{class:!0});var uJ=n(zh);m(wd.$$.fragment,uJ),uJ.forEach(t),z9=d(v),Vh=s(v,"DIV",{class:!0});var gJ=n(Vh);m(Dd.$$.fragment,gJ),gJ.forEach(t),V9=d(v),Uh=s(v,"DIV",{class:!0});var _J=n(Uh);m(Ed.$$.fragment,_J),_J.forEach(t),U9=d(v),Mh=s(v,"DIV",{class:!0});var bJ=n(Mh);m(jd.$$.fragment,bJ),bJ.forEach(t),M9=d(v),Rh=s(v,"DIV",{class:!0});var vJ=n(Rh);m(kd.$$.fragment,vJ),vJ.forEach(t),R9=d(v),Bh=s(v,"DIV",{class:!0});var yJ=n(Bh);m(Id.$$.fragment,yJ),yJ.forEach(t),B9=d(v),Hh=s(v,"DIV",{class:!0});var xJ=n(Hh);m(Td.$$.fragment,xJ),xJ.forEach(t),H9=d(v),Gh=s(v,"DIV",{class:!0});var $J=n(Gh);m(Nd.$$.fragment,$J),$J.forEach(t),G9=d(v),Wh=s(v,"DIV",{class:!0});var wJ=n(Wh);m(Pd.$$.fragment,wJ),wJ.forEach(t),W9=d(v),Kh=s(v,"DIV",{class:!0});var DJ=n(Kh);m(Ad.$$.fragment,DJ),DJ.forEach(t),K9=d(v),Yh=s(v,"DIV",{class:!0});var EJ=n(Yh);m(Ld.$$.fragment,EJ),EJ.forEach(t),Y9=d(v),Jh=s(v,"DIV",{class:!0});var jJ=n(Jh);m(Fd.$$.fragment,jJ),jJ.forEach(t),J9=d(v),yt=s(v,"DIV",{class:!0});var Po=n(yt);m(qd.$$.fragment,Po),X9=d(Po),Db=s(Po,"P",{});var kJ=n(Db);Z9=o(kJ,"Create Dataset from CSV file(s)."),kJ.forEach(t),Q9=d(Po),Eb=s(Po,"P",{});var IJ=n(Eb);eT=o(IJ,"Example:"),IJ.forEach(t),tT=d(Po),m(Od.$$.fragment,Po),Po.forEach(t),aT=d(v),xt=s(v,"DIV",{class:!0});var Ao=n(xt);m(Sd.$$.fragment,Ao),sT=d(Ao),jb=s(Ao,"P",{});var TJ=n(jb);nT=o(TJ,"Create Dataset from JSON or JSON Lines file(s)."),TJ.forEach(t),rT=d(Ao),kb=s(Ao,"P",{});var NJ=n(kb);oT=o(NJ,"Example:"),NJ.forEach(t),iT=d(Ao),m(Cd.$$.fragment,Ao),Ao.forEach(t),lT=d(v),$t=s(v,"DIV",{class:!0});var Lo=n($t);m(zd.$$.fragment,Lo),dT=d(Lo),Ib=s(Lo,"P",{});var PJ=n(Ib);cT=o(PJ,"Create Dataset from Parquet file(s)."),PJ.forEach(t),pT=d(Lo),Tb=s(Lo,"P",{});var AJ=n(Tb);mT=o(AJ,"Example:"),AJ.forEach(t),hT=d(Lo),m(Vd.$$.fragment,Lo),Lo.forEach(t),fT=d(v),wt=s(v,"DIV",{class:!0});var Fo=n(wt);m(Ud.$$.fragment,Fo),uT=d(Fo),Nb=s(Fo,"P",{});var LJ=n(Nb);gT=o(LJ,"Create Dataset from text file(s)."),LJ.forEach(t),_T=d(Fo),Pb=s(Fo,"P",{});var FJ=n(Pb);bT=o(FJ,"Example:"),FJ.forEach(t),vT=d(Fo),m(Md.$$.fragment,Fo),Fo.forEach(t),yT=d(v),ba=s(v,"DIV",{class:!0});var Au=n(ba);m(Rd.$$.fragment,Au),xT=d(Au),_s=s(Au,"P",{});var Lu=n(_s);$T=o(Lu,"Prepare a dataset for the given task by casting the dataset\u2019s "),Xh=s(Lu,"A",{href:!0});var qJ=n(Xh);wT=o(qJ,"Features"),qJ.forEach(t),DT=o(Lu," to standardized column names and types as detailed in "),Zh=s(Lu,"A",{href:!0});var OJ=n(Zh);ET=o(OJ,"datasets.tasks"),OJ.forEach(t),jT=o(Lu,"."),Lu.forEach(t),kT=d(Au),bs=s(Au,"P",{});var Fu=n(bs);IT=o(Fu,"Casts "),Ab=s(Fu,"CODE",{});var SJ=n(Ab);TT=o(SJ,"datasets.DatasetInfo.features"),SJ.forEach(t),NT=o(Fu," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Lb=s(Fu,"CODE",{});var CJ=n(Lb);PT=o(CJ,"datasets.DatasetInfo.task_templates"),CJ.forEach(t),AT=o(Fu," after casting."),Fu.forEach(t),Au.forEach(t),LT=d(v),Dt=s(v,"DIV",{class:!0});var qo=n(Dt);m(Bd.$$.fragment,qo),FT=d(qo),Hd=s(qo,"P",{});var T0=n(Hd);qT=o(T0,"Align the dataset\u2019s label ID and label name mapping to match an input "),Fb=s(T0,"CODE",{});var zJ=n(Fb);OT=o(zJ,"label2id"),zJ.forEach(t),ST=o(T0,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),T0.forEach(t),CT=d(qo),qb=s(qo,"P",{});var VJ=n(qb);zT=o(VJ,"Example:"),VJ.forEach(t),VT=d(qo),m(Gd.$$.fragment,qo),qo.forEach(t),v.forEach(t),dw=d(i),qe=s(i,"DIV",{class:!0});var Oo=n(qe);m(Wd.$$.fragment,Oo),UT=d(Oo),vs=s(Oo,"P",{});var qu=n(vs);MT=o(qu,"Converts a list of "),Qh=s(qu,"A",{href:!0});var UJ=n(Qh);RT=o(UJ,"Dataset"),UJ.forEach(t),BT=o(qu," with the same schema into a single "),ef=s(qu,"A",{href:!0});var MJ=n(ef);HT=o(MJ,"Dataset"),MJ.forEach(t),GT=o(qu,"."),qu.forEach(t),WT=d(Oo),Ob=s(Oo,"P",{});var RJ=n(Ob);KT=o(RJ,"Example:"),RJ.forEach(t),YT=d(Oo),m(Kd.$$.fragment,Oo),Oo.forEach(t),cw=d(i),S=s(i,"DIV",{class:!0});var Ie=n(S);m(Yd.$$.fragment,Ie),JT=d(Ie),Sb=s(Ie,"P",{});var BJ=n(Sb);XT=o(BJ,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),BJ.forEach(t),ZT=d(Ie),ys=s(Ie,"P",{});var Ou=n(ys);QT=o(Ou,"You can use this function on a list of "),tf=s(Ou,"A",{href:!0});var HJ=n(tf);eN=o(HJ,"Dataset"),HJ.forEach(t),tN=o(Ou," objects, or on a list of "),af=s(Ou,"A",{href:!0});var GJ=n(af);aN=o(GJ,"IterableDataset"),GJ.forEach(t),sN=o(Ou," objects."),Ou.forEach(t),nN=d(Ie),Oe=s(Ie,"P",{});var Ma=n(Oe);rN=o(Ma,"If "),Cb=s(Ma,"CODE",{});var WJ=n(Cb);oN=o(WJ,"probabilities"),WJ.forEach(t),iN=o(Ma," is "),zb=s(Ma,"CODE",{});var KJ=n(zb);lN=o(KJ,"None"),KJ.forEach(t),dN=o(Ma,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),Vb=s(Ma,"CODE",{});var YJ=n(Vb);cN=o(YJ,"probabilities"),YJ.forEach(t),pN=o(Ma," is not "),Ub=s(Ma,"CODE",{});var JJ=n(Ub);mN=o(JJ,"None"),JJ.forEach(t),hN=o(Ma,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),Ma.forEach(t),fN=d(Ie),Mb=s(Ie,"P",{});var XJ=n(Mb);uN=o(XJ,"The resulting dataset ends when one of the source datasets runs out of examples."),XJ.forEach(t),gN=d(Ie),Rb=s(Ie,"P",{});var ZJ=n(Rb);_N=o(ZJ,"Example:"),ZJ.forEach(t),bN=d(Ie),m(Jd.$$.fragment,Ie),Ie.forEach(t),pw=d(i),ie=s(i,"DIV",{class:!0});var Ra=n(ie);m(Xd.$$.fragment,Ra),vN=d(Ra),Bb=s(Ra,"P",{});var QJ=n(Bb);yN=o(QJ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),QJ.forEach(t),xN=d(Ra),Hb=s(Ra,"P",{});var eX=n(Hb);$N=o(eX,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),eX.forEach(t),wN=d(Ra),Gb=s(Ra,"P",{});var tX=n(Gb);DN=o(tX,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),tX.forEach(t),EN=d(Ra),Se=s(Ra,"UL",{});var Ba=n(Se);Wb=s(Ba,"LI",{});var aX=n(Wb);jN=o(aX,"cache files are always recreated"),aX.forEach(t),kN=d(Ba),Kb=s(Ba,"LI",{});var sX=n(Kb);IN=o(sX,"cache files are written to a temporary directory that is deleted when session closes"),sX.forEach(t),TN=d(Ba),Yb=s(Ba,"LI",{});var nX=n(Yb);NN=o(nX,"cache files are named using a random hash instead of the dataset fingerprint"),nX.forEach(t),PN=d(Ba),Zd=s(Ba,"LI",{});var N0=n(Zd);AN=o(N0,"use "),sf=s(N0,"A",{href:!0});var rX=n(sf);LN=o(rX,"datasets.Dataset.save_to_disk()"),rX.forEach(t),FN=o(N0," to save a transformed dataset or it will be deleted when session closes"),N0.forEach(t),qN=d(Ba),Qt=s(Ba,"LI",{});var So=n(Qt);ON=o(So,"caching doesn\u2019t affect "),nf=s(So,"A",{href:!0});var oX=n(nf);SN=o(oX,"datasets.load_dataset()"),oX.forEach(t),CN=o(So,`. If you want to regenerate a dataset from scratch you should use
the `),Jb=s(So,"CODE",{});var iX=n(Jb);zN=o(iX,"download_mode"),iX.forEach(t),VN=o(So," parameter in "),rf=s(So,"A",{href:!0});var lX=n(rf);UN=o(lX,"datasets.load_dataset()"),lX.forEach(t),MN=o(So,"."),So.forEach(t),Ba.forEach(t),Ra.forEach(t),mw=d(i),le=s(i,"DIV",{class:!0});var Ha=n(le);m(Qd.$$.fragment,Ha),RN=d(Ha),Xb=s(Ha,"P",{});var dX=n(Xb);BN=o(dX,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),dX.forEach(t),HN=d(Ha),Zb=s(Ha,"P",{});var cX=n(Zb);GN=o(cX,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),cX.forEach(t),WN=d(Ha),Qb=s(Ha,"P",{});var pX=n(Qb);KN=o(pX,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),pX.forEach(t),YN=d(Ha),Ce=s(Ha,"UL",{});var Ga=n(Ce);ev=s(Ga,"LI",{});var mX=n(ev);JN=o(mX,"cache files are always recreated"),mX.forEach(t),XN=d(Ga),tv=s(Ga,"LI",{});var hX=n(tv);ZN=o(hX,"cache files are written to a temporary directory that is deleted when session closes"),hX.forEach(t),QN=d(Ga),av=s(Ga,"LI",{});var fX=n(av);eP=o(fX,"cache files are named using a random hash instead of the dataset fingerprint"),fX.forEach(t),tP=d(Ga),ec=s(Ga,"LI",{});var P0=n(ec);aP=o(P0,"use "),of=s(P0,"A",{href:!0});var uX=n(of);sP=o(uX,"datasets.Dataset.save_to_disk()"),uX.forEach(t),nP=o(P0," to save a transformed dataset or it will be deleted when session closes"),P0.forEach(t),rP=d(Ga),ea=s(Ga,"LI",{});var Co=n(ea);oP=o(Co,"caching doesn\u2019t affect "),lf=s(Co,"A",{href:!0});var gX=n(lf);iP=o(gX,"datasets.load_dataset()"),gX.forEach(t),lP=o(Co,`. If you want to regenerate a dataset from scratch you should use
the `),sv=s(Co,"CODE",{});var _X=n(sv);dP=o(_X,"download_mode"),_X.forEach(t),cP=o(Co," parameter in "),df=s(Co,"A",{href:!0});var bX=n(df);pP=o(bX,"datasets.load_dataset()"),bX.forEach(t),mP=o(Co,"."),Co.forEach(t),Ga.forEach(t),Ha.forEach(t),hw=d(i),de=s(i,"DIV",{class:!0});var Wa=n(de);m(tc.$$.fragment,Wa),hP=d(Wa),nv=s(Wa,"P",{});var vX=n(nv);fP=o(vX,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),vX.forEach(t),uP=d(Wa),rv=s(Wa,"P",{});var yX=n(rv);gP=o(yX,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),yX.forEach(t),_P=d(Wa),ov=s(Wa,"P",{});var xX=n(ov);bP=o(xX,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),xX.forEach(t),vP=d(Wa),ze=s(Wa,"UL",{});var Ka=n(ze);iv=s(Ka,"LI",{});var $X=n(iv);yP=o($X,"cache files are always recreated"),$X.forEach(t),xP=d(Ka),lv=s(Ka,"LI",{});var wX=n(lv);$P=o(wX,"cache files are written to a temporary directory that is deleted when session closes"),wX.forEach(t),wP=d(Ka),dv=s(Ka,"LI",{});var DX=n(dv);DP=o(DX,"cache files are named using a random hash instead of the dataset fingerprint"),DX.forEach(t),EP=d(Ka),ac=s(Ka,"LI",{});var A0=n(ac);jP=o(A0,"use "),cf=s(A0,"A",{href:!0});var EX=n(cf);kP=o(EX,"datasets.Dataset.save_to_disk()"),EX.forEach(t),IP=o(A0," to save a transformed dataset or it will be deleted when session closes"),A0.forEach(t),TP=d(Ka),ta=s(Ka,"LI",{});var zo=n(ta);NP=o(zo,"caching doesn\u2019t affect "),pf=s(zo,"A",{href:!0});var jX=n(pf);PP=o(jX,"datasets.load_dataset()"),jX.forEach(t),AP=o(zo,`. If you want to regenerate a dataset from scratch you should use
the `),cv=s(zo,"CODE",{});var kX=n(cv);LP=o(kX,"download_mode"),kX.forEach(t),FP=o(zo," parameter in "),mf=s(zo,"A",{href:!0});var IX=n(mf);qP=o(IX,"datasets.load_dataset()"),IX.forEach(t),OP=o(zo,"."),zo.forEach(t),Ka.forEach(t),Wa.forEach(t),fw=d(i),xs=s(i,"H2",{class:!0});var L0=n(xs);Tn=s(L0,"A",{id:!0,class:!0,href:!0});var TX=n(Tn);pv=s(TX,"SPAN",{});var NX=n(pv);m(sc.$$.fragment,NX),NX.forEach(t),TX.forEach(t),SP=d(L0),mv=s(L0,"SPAN",{});var PX=n(mv);CP=o(PX,"DatasetDict"),PX.forEach(t),L0.forEach(t),uw=d(i),Nn=s(i,"P",{});var F0=n(Nn);zP=o(F0,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),hv=s(F0,"CODE",{});var AX=n(hv);VP=o(AX,"Dataset"),AX.forEach(t),UP=o(F0,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),F0.forEach(t),gw=d(i),$=s(i,"DIV",{class:!0});var w=n($);m(nc.$$.fragment,w),MP=d(w),fv=s(w,"P",{});var LX=n(fv);RP=o(LX,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),LX.forEach(t),BP=d(w),Pn=s(w,"DIV",{class:!0});var q0=n(Pn);m(rc.$$.fragment,q0),HP=d(q0),uv=s(q0,"P",{});var FX=n(uv);GP=o(FX,"The Apache Arrow tables backing each split."),FX.forEach(t),q0.forEach(t),WP=d(w),An=s(w,"DIV",{class:!0});var O0=n(An);m(oc.$$.fragment,O0),KP=d(O0),gv=s(O0,"P",{});var qX=n(gv);YP=o(qX,"The cache files containing the Apache Arrow table backing each split."),qX.forEach(t),O0.forEach(t),JP=d(w),Ln=s(w,"DIV",{class:!0});var S0=n(Ln);m(ic.$$.fragment,S0),XP=d(S0),_v=s(S0,"P",{});var OX=n(_v);ZP=o(OX,"Number of columns in each split of the dataset."),OX.forEach(t),S0.forEach(t),QP=d(w),Fn=s(w,"DIV",{class:!0});var C0=n(Fn);m(lc.$$.fragment,C0),eA=d(C0),dc=s(C0,"P",{});var z0=n(dc);tA=o(z0,"Number of rows in each split of the dataset (same as "),qn=s(z0,"A",{href:!0});var V0=n(qn);aA=o(V0,"datasets.Dataset."),bv=s(V0,"STRONG",{});var SX=n(bv);sA=o(SX,"len"),SX.forEach(t),nA=o(V0,"()"),V0.forEach(t),rA=o(z0,")."),z0.forEach(t),C0.forEach(t),oA=d(w),On=s(w,"DIV",{class:!0});var U0=n(On);m(cc.$$.fragment,U0),iA=d(U0),vv=s(U0,"P",{});var CX=n(vv);lA=o(CX,"Names of the columns in each split of the dataset."),CX.forEach(t),U0.forEach(t),dA=d(w),Sn=s(w,"DIV",{class:!0});var M0=n(Sn);m(pc.$$.fragment,M0),cA=d(M0),yv=s(M0,"P",{});var zX=n(yv);pA=o(zX,"Shape of each split of the dataset (number of columns, number of rows)."),zX.forEach(t),M0.forEach(t),mA=d(w),va=s(w,"DIV",{class:!0});var Su=n(va);m(mc.$$.fragment,Su),hA=d(Su),xv=s(Su,"P",{});var VX=n(xv);fA=o(VX,"Return a list of the unique elements in a column for each split."),VX.forEach(t),uA=d(Su),$v=s(Su,"P",{});var UX=n($v);gA=o(UX,"This is implemented in the low-level backend and as such, very fast."),UX.forEach(t),Su.forEach(t),_A=d(w),Cn=s(w,"DIV",{class:!0});var R0=n(Cn);m(hc.$$.fragment,R0),bA=d(R0),wv=s(R0,"P",{});var MX=n(wv);vA=o(MX,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be carefull when running this command that no other process is currently using other cache files.`),MX.forEach(t),R0.forEach(t),yA=d(w),zn=s(w,"DIV",{class:!0});var B0=n(zn);m(fc.$$.fragment,B0),xA=d(B0),Dv=s(B0,"P",{});var RX=n(Dv);$A=o(RX,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),RX.forEach(t),B0.forEach(t),wA=d(w),Vn=s(w,"DIV",{class:!0});var H0=n(Vn);m(uc.$$.fragment,H0),DA=d(H0),Ev=s(H0,"P",{});var BX=n(Ev);EA=o(BX,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),BX.forEach(t),H0.forEach(t),jA=d(w),ya=s(w,"DIV",{class:!0});var Cu=n(ya);m(gc.$$.fragment,Cu),kA=d(Cu),jv=s(Cu,"P",{});var HX=n(jv);IA=o(HX,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),HX.forEach(t),TA=d(Cu),kv=s(Cu,"P",{});var GX=n(kv);NA=o(GX,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),GX.forEach(t),Cu.forEach(t),PA=d(w),Et=s(w,"DIV",{class:!0});var Vo=n(Et);m(_c.$$.fragment,Vo),AA=d(Vo),Iv=s(Vo,"P",{});var WX=n(Iv);LA=o(WX,"Create a new Dataset where the rows are shuffled."),WX.forEach(t),FA=d(Vo),Tv=s(Vo,"P",{});var KX=n(Tv);qA=o(KX,"The transformation is applied to all the datasets of the dataset dictionary."),KX.forEach(t),OA=d(Vo),Nv=s(Vo,"P",{});var YX=n(Nv);SA=o(YX,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),YX.forEach(t),Vo.forEach(t),CA=d(w),jt=s(w,"DIV",{class:!0});var Uo=n(jt);m(bc.$$.fragment,Uo),zA=d(Uo),vc=s(Uo,"P",{});var G0=n(vc);VA=o(G0,"Set "),Pv=s(G0,"CODE",{});var JX=n(Pv);UA=o(JX,"__getitem__"),JX.forEach(t),MA=o(G0,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),G0.forEach(t),RA=d(Uo),Ve=s(Uo,"P",{});var Ya=n(Ve);BA=o(Ya,"It is possible to call "),Av=s(Ya,"CODE",{});var XX=n(Av);HA=o(XX,"map"),XX.forEach(t),GA=o(Ya," after calling "),Lv=s(Ya,"CODE",{});var ZX=n(Lv);WA=o(ZX,"set_format"),ZX.forEach(t),KA=o(Ya,". Since "),Fv=s(Ya,"CODE",{});var QX=n(Fv);YA=o(QX,"map"),QX.forEach(t),JA=o(Ya,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),qv=s(Ya,"CODE",{});var eZ=n(qv);XA=o(eZ,"map"),eZ.forEach(t),ZA=o(Ya," on a dataset to add a new column, then this column will be formatted:"),Ya.forEach(t),QA=d(Uo),Ov=s(Uo,"P",{});var tZ=n(Ov);eL=o(tZ,"new formatted columns = (all columns - previously unformatted columns)"),tZ.forEach(t),Uo.forEach(t),tL=d(w),xa=s(w,"DIV",{class:!0});var zu=n(xa);m(yc.$$.fragment,zu),aL=d(zu),xc=s(zu,"P",{});var W0=n(xc);sL=o(W0,"Reset "),Sv=s(W0,"CODE",{});var aZ=n(Sv);nL=o(aZ,"__getitem__"),aZ.forEach(t),rL=o(W0,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),W0.forEach(t),oL=d(zu),hf=s(zu,"P",{});var jG=n(hf);iL=o(jG,"Same as "),Cv=s(jG,"CODE",{});var sZ=n(Cv);lL=o(sZ,"self.set_format()"),sZ.forEach(t),jG.forEach(t),zu.forEach(t),dL=d(w),Un=s(w,"DIV",{class:!0});var K0=n(Un);m($c.$$.fragment,K0),cL=d(K0),$s=s(K0,"P",{});var Vu=n($s);pL=o(Vu,"To be used in a "),zv=s(Vu,"EM",{});var nZ=n(zv);mL=o(nZ,"with"),nZ.forEach(t),hL=o(Vu," statement. Set "),Vv=s(Vu,"CODE",{});var rZ=n(Vv);fL=o(rZ,"__getitem__"),rZ.forEach(t),uL=o(Vu,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),Vu.forEach(t),K0.forEach(t),gL=d(w),kt=s(w,"DIV",{class:!0});var Mo=n(kt);m(wc.$$.fragment,Mo),_L=d(Mo),aa=s(Mo,"P",{});var Ro=n(aa);bL=o(Ro,"Set "),Uv=s(Ro,"CODE",{});var oZ=n(Uv);vL=o(oZ,"__getitem__"),oZ.forEach(t),yL=o(Ro,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Mv=s(Ro,"CODE",{});var iZ=n(Mv);xL=o(iZ,"type"),iZ.forEach(t),$L=o(Ro," (for example \u201Cnumpy\u201D) is used to format batches when using "),Rv=s(Ro,"CODE",{});var lZ=n(Rv);wL=o(lZ,"__getitem__"),lZ.forEach(t),DL=o(Ro,`.
The format is set for every dataset in the dataset dictionary`),Ro.forEach(t),EL=d(Mo),Dc=s(Mo,"P",{});var Y0=n(Dc);jL=o(Y0,"It\u2019s also possible to use custom transforms for formatting using "),ff=s(Y0,"A",{href:!0});var dZ=n(ff);kL=o(dZ,"datasets.Dataset.with_transform()"),dZ.forEach(t),IL=o(Y0,"."),Y0.forEach(t),TL=d(Mo),ws=s(Mo,"P",{});var Uu=n(ws);NL=o(Uu,"Contrary to "),uf=s(Uu,"A",{href:!0});var cZ=n(uf);PL=o(cZ,"datasets.DatasetDict.set_format()"),cZ.forEach(t),AL=o(Uu,", "),Bv=s(Uu,"CODE",{});var pZ=n(Bv);LL=o(pZ,"with_format"),pZ.forEach(t),FL=o(Uu," returns a new DatasetDict object with new Dataset objects."),Uu.forEach(t),Mo.forEach(t),qL=d(w),It=s(w,"DIV",{class:!0});var Bo=n(It);m(Ec.$$.fragment,Bo),OL=d(Bo),Ds=s(Bo,"P",{});var Mu=n(Ds);SL=o(Mu,"Set "),Hv=s(Mu,"CODE",{});var mZ=n(Hv);CL=o(mZ,"__getitem__"),mZ.forEach(t),zL=o(Mu," return format using this transform. The transform is applied on-the-fly on batches when "),Gv=s(Mu,"CODE",{});var hZ=n(Gv);VL=o(hZ,"__getitem__"),hZ.forEach(t),UL=o(Mu,` is called.
The transform is set for every dataset in the dataset dictionary`),Mu.forEach(t),ML=d(Bo),Es=s(Bo,"P",{});var Ru=n(Es);RL=o(Ru,"As "),gf=s(Ru,"A",{href:!0});var fZ=n(gf);BL=o(fZ,"datasets.Dataset.set_format()"),fZ.forEach(t),HL=o(Ru,", this can be reset using "),_f=s(Ru,"A",{href:!0});var uZ=n(_f);GL=o(uZ,"datasets.Dataset.reset_format()"),uZ.forEach(t),WL=o(Ru,"."),Ru.forEach(t),KL=d(Bo),js=s(Bo,"P",{});var Bu=n(js);YL=o(Bu,"Contrary to "),Wv=s(Bu,"CODE",{});var gZ=n(Wv);JL=o(gZ,"datasets.DatasetDict.set_transform()"),gZ.forEach(t),XL=o(Bu,", "),Kv=s(Bu,"CODE",{});var _Z=n(Kv);ZL=o(_Z,"with_transform"),_Z.forEach(t),QL=o(Bu," returns a new DatasetDict object with new Dataset objects."),Bu.forEach(t),Bo.forEach(t),eF=d(w),Mn=s(w,"DIV",{class:!0});var J0=n(Mn);m(jc.$$.fragment,J0),tF=d(J0),Yv=s(J0,"P",{});var bZ=n(Yv);aF=o(bZ,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),bZ.forEach(t),J0.forEach(t),sF=d(w),$a=s(w,"DIV",{class:!0});var Hu=n($a);m(kc.$$.fragment,Hu),nF=d(Hu),Jv=s(Hu,"P",{});var vZ=n(Jv);rF=o(vZ,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),vZ.forEach(t),oF=d(Hu),sa=s(Hu,"P",{});var Ho=n(sa);iF=o(Ho,"You can also remove a column using "),bf=s(Ho,"A",{href:!0});var yZ=n(bf);lF=o(yZ,"Dataset.map()"),yZ.forEach(t),dF=o(Ho," with "),Xv=s(Ho,"EM",{});var xZ=n(Xv);cF=o(xZ,"feature"),xZ.forEach(t),pF=o(Ho," but "),Zv=s(Ho,"CODE",{});var $Z=n(Zv);mF=o($Z,"cast_"),$Z.forEach(t),hF=o(Ho,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Ho.forEach(t),Hu.forEach(t),fF=d(w),Rn=s(w,"DIV",{class:!0});var X0=n(Rn);m(Ic.$$.fragment,X0),uF=d(X0),Qv=s(X0,"P",{});var wZ=n(Qv);gF=o(wZ,"Cast column to feature for decoding."),wZ.forEach(t),X0.forEach(t),_F=d(w),Tt=s(w,"DIV",{class:!0});var Go=n(Tt);m(Tc.$$.fragment,Go),bF=d(Go),ey=s(Go,"P",{});var DZ=n(ey);vF=o(DZ,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),DZ.forEach(t),yF=d(Go),ty=s(Go,"P",{});var EZ=n(ty);xF=o(EZ,"The transformation is applied to all the splits of the dataset dictionary."),EZ.forEach(t),$F=d(Go),ks=s(Go,"P",{});var Gu=n(ks);wF=o(Gu,"You can also remove a column using "),vf=s(Gu,"A",{href:!0});var jZ=n(vf);DF=o(jZ,"Dataset.map()"),jZ.forEach(t),EF=o(Gu," with "),ay=s(Gu,"EM",{});var kZ=n(ay);jF=o(kZ,"remove_columns"),kZ.forEach(t),kF=o(Gu,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Gu.forEach(t),Go.forEach(t),IF=d(w),Nt=s(w,"DIV",{class:!0});var Wo=n(Nt);m(Nc.$$.fragment,Wo),TF=d(Wo),sy=s(Wo,"P",{});var IZ=n(sy);NF=o(IZ,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),IZ.forEach(t),PF=d(Wo),Is=s(Wo,"P",{});var Wu=n(Is);AF=o(Wu,"You can also rename a column using "),yf=s(Wu,"A",{href:!0});var TZ=n(yf);LF=o(TZ,"Dataset.map()"),TZ.forEach(t),FF=o(Wu," with "),ny=s(Wu,"EM",{});var NZ=n(ny);qF=o(NZ,"remove_columns"),NZ.forEach(t),OF=o(Wu," but the present method:"),Wu.forEach(t),SF=d(Wo),Pc=s(Wo,"UL",{});var Z0=n(Pc);ry=s(Z0,"LI",{});var PZ=n(ry);CF=o(PZ,"takes care of moving the original features under the new column name."),PZ.forEach(t),zF=d(Z0),oy=s(Z0,"LI",{});var AZ=n(oy);VF=o(AZ,"doesn\u2019t copy the data to a new dataset and is thus much faster."),AZ.forEach(t),Z0.forEach(t),Wo.forEach(t),UF=d(w),Bn=s(w,"DIV",{class:!0});var Q0=n(Bn);m(Ac.$$.fragment,Q0),MF=d(Q0),iy=s(Q0,"P",{});var LZ=n(iy);RF=o(LZ,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),LZ.forEach(t),Q0.forEach(t),BF=d(w),Hn=s(w,"DIV",{class:!0});var eD=n(Hn);m(Lc.$$.fragment,eD),HF=d(eD),Fc=s(eD,"P",{});var tD=n(Fc);GF=o(tD,"Casts the given column as :obj:"),ly=s(tD,"CODE",{});var FZ=n(ly);WF=o(FZ,"datasets.features.ClassLabel"),FZ.forEach(t),KF=o(tD," and updates the tables."),tD.forEach(t),eD.forEach(t),YF=d(w),we=s(w,"DIV",{class:!0});var Ja=n(we);m(qc.$$.fragment,Ja),JF=d(Ja),Ts=s(Ja,"P",{});var Ku=n(Ts);XF=o(Ku,"Pushes the "),dy=s(Ku,"CODE",{});var qZ=n(dy);ZF=o(qZ,"DatasetDict"),qZ.forEach(t),QF=o(Ku,` to the hub.
The `),cy=s(Ku,"CODE",{});var OZ=n(cy);eq=o(OZ,"DatasetDict"),OZ.forEach(t),tq=o(Ku," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),Ku.forEach(t),aq=d(Ja),py=s(Ja,"P",{});var SZ=n(py);sq=o(SZ,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),SZ.forEach(t),nq=d(Ja),my=s(Ja,"P",{});var CZ=n(my);rq=o(CZ,"Example:"),CZ.forEach(t),oq=d(Ja),m(Oc.$$.fragment,Ja),Ja.forEach(t),iq=d(w),Gn=s(w,"DIV",{class:!0});var aD=n(Gn);m(Sc.$$.fragment,aD),lq=d(aD),Ns=s(aD,"P",{});var Yu=n(Ns);dq=o(Yu,"Saves a dataset dict to a filesystem using either "),xf=s(Yu,"A",{href:!0});var zZ=n(xf);cq=o(zZ,"S3FileSystem"),zZ.forEach(t),pq=o(Yu,` or
`),hy=s(Yu,"CODE",{});var VZ=n(hy);mq=o(VZ,"fsspec.spec.AbstractFileSystem"),VZ.forEach(t),hq=o(Yu,"."),Yu.forEach(t),aD.forEach(t),fq=d(w),Wn=s(w,"DIV",{class:!0});var sD=n(Wn);m(Cc.$$.fragment,sD),uq=d(sD),na=s(sD,"P",{});var Ko=n(na);gq=o(Ko,"Load a dataset that was previously saved using "),fy=s(Ko,"CODE",{});var UZ=n(fy);_q=o(UZ,"save_to_disk"),UZ.forEach(t),bq=o(Ko,` from a filesystem using either
`),$f=s(Ko,"A",{href:!0});var MZ=n($f);vq=o(MZ,"S3FileSystem"),MZ.forEach(t),yq=o(Ko," or "),uy=s(Ko,"CODE",{});var RZ=n(uy);xq=o(RZ,"fsspec.spec.AbstractFileSystem"),RZ.forEach(t),$q=o(Ko,"."),Ko.forEach(t),sD.forEach(t),wq=d(w),Kn=s(w,"DIV",{class:!0});var nD=n(Kn);m(zc.$$.fragment,nD),Dq=d(nD),gy=s(nD,"P",{});var BZ=n(gy);Eq=o(BZ,"Create DatasetDict from CSV file(s)."),BZ.forEach(t),nD.forEach(t),jq=d(w),Yn=s(w,"DIV",{class:!0});var rD=n(Yn);m(Vc.$$.fragment,rD),kq=d(rD),_y=s(rD,"P",{});var HZ=n(_y);Iq=o(HZ,"Create DatasetDict from JSON Lines file(s)."),HZ.forEach(t),rD.forEach(t),Tq=d(w),Jn=s(w,"DIV",{class:!0});var oD=n(Jn);m(Uc.$$.fragment,oD),Nq=d(oD),by=s(oD,"P",{});var GZ=n(by);Pq=o(GZ,"Create DatasetDict from Parquet file(s)."),GZ.forEach(t),oD.forEach(t),Aq=d(w),Xn=s(w,"DIV",{class:!0});var iD=n(Xn);m(Mc.$$.fragment,iD),Lq=d(iD),vy=s(iD,"P",{});var WZ=n(vy);Fq=o(WZ,"Create DatasetDict from text file(s)."),WZ.forEach(t),iD.forEach(t),qq=d(w),wa=s(w,"DIV",{class:!0});var Ju=n(wa);m(Rc.$$.fragment,Ju),Oq=d(Ju),Ps=s(Ju,"P",{});var Xu=n(Ps);Sq=o(Xu,"Prepare a dataset for the given task by casting the dataset\u2019s "),wf=s(Xu,"A",{href:!0});var KZ=n(wf);Cq=o(KZ,"Features"),KZ.forEach(t),zq=o(Xu," to standardized column names and types as detailed in "),Df=s(Xu,"A",{href:!0});var YZ=n(Df);Vq=o(YZ,"datasets.tasks"),YZ.forEach(t),Uq=o(Xu,"."),Xu.forEach(t),Mq=d(Ju),As=s(Ju,"P",{});var Zu=n(As);Rq=o(Zu,"Casts "),yy=s(Zu,"CODE",{});var JZ=n(yy);Bq=o(JZ,"datasets.DatasetInfo.features"),JZ.forEach(t),Hq=o(Zu," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),xy=s(Zu,"CODE",{});var XZ=n(xy);Gq=o(XZ,"datasets.DatasetInfo.task_templates"),XZ.forEach(t),Wq=o(Zu," after casting."),Zu.forEach(t),Ju.forEach(t),w.forEach(t),_w=d(i),Ef=s(i,"A",{id:!0}),n(Ef).forEach(t),bw=d(i),Ls=s(i,"H2",{class:!0});var lD=n(Ls);Zn=s(lD,"A",{id:!0,class:!0,href:!0});var ZZ=n(Zn);$y=s(ZZ,"SPAN",{});var QZ=n($y);m(Bc.$$.fragment,QZ),QZ.forEach(t),ZZ.forEach(t),Kq=d(lD),wy=s(lD,"SPAN",{});var eQ=n(wy);Yq=o(eQ,"IterableDataset"),eQ.forEach(t),lD.forEach(t),vw=d(i),Qn=s(i,"P",{});var dD=n(Qn);Jq=o(dD,"The base class "),jf=s(dD,"A",{href:!0});var tQ=n(jf);Xq=o(tQ,"IterableDataset"),tQ.forEach(t),Zq=o(dD," implements an iterable Dataset backed by python generators."),dD.forEach(t),yw=d(i),E=s(i,"DIV",{class:!0});var j=n(E);m(Hc.$$.fragment,j),Qq=d(j),Dy=s(j,"P",{});var aQ=n(Dy);eO=o(aQ,"A Dataset backed by an iterable."),aQ.forEach(t),tO=d(j),er=s(j,"DIV",{class:!0});var cD=n(er);m(Gc.$$.fragment,cD),aO=d(cD),Ey=s(cD,"P",{});var sQ=n(Ey);sO=o(sQ,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),sQ.forEach(t),cD.forEach(t),nO=d(j),tr=s(j,"DIV",{class:!0});var pD=n(tr);m(Wc.$$.fragment,pD),rO=d(pD),jy=s(pD,"P",{});var nQ=n(jy);oO=o(nQ,"Cast column to feature for decoding."),nQ.forEach(t),pD.forEach(t),iO=d(j),ar=s(j,"DIV",{class:!0});var mD=n(ar);m(Kc.$$.fragment,mD),lO=d(mD),ky=s(mD,"P",{});var rQ=n(ky);dO=o(rQ,"Cast the dataset to a new set of features."),rQ.forEach(t),mD.forEach(t),cO=d(j),kf=s(j,"DIV",{class:!0});var oQ=n(kf);m(Yc.$$.fragment,oQ),oQ.forEach(t),pO=d(j),Pt=s(j,"DIV",{class:!0});var Yo=n(Pt);m(Jc.$$.fragment,Yo),mO=d(Yo),Iy=s(Yo,"P",{});var iQ=n(Iy);hO=o(iQ,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),iQ.forEach(t),fO=d(Yo),Xc=s(Yo,"P",{});var hD=n(Xc);uO=o(hD,"You can specify whether the function should be batched or not with the "),Ty=s(hD,"CODE",{});var lQ=n(Ty);gO=o(lQ,"batched"),lQ.forEach(t),_O=o(hD," parameter:"),hD.forEach(t),bO=d(Yo),Fs=s(Yo,"UL",{});var Qu=n(Fs);Ny=s(Qu,"LI",{});var dQ=n(Ny);vO=o(dQ,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),dQ.forEach(t),yO=d(Qu),Py=s(Qu,"LI",{});var cQ=n(Py);xO=o(cQ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),cQ.forEach(t),$O=d(Qu),ce=s(Qu,"LI",{});var Ut=n(ce);wO=o(Ut,"If batched is True and batch_size is "),Ay=s(Ut,"CODE",{});var pQ=n(Ay);DO=o(pQ,"n"),pQ.forEach(t),EO=o(Ut," > 1, then the function takes a batch of "),Ly=s(Ut,"CODE",{});var mQ=n(Ly);jO=o(mQ,"n"),mQ.forEach(t),kO=o(Ut," examples as input and can return a batch with "),Fy=s(Ut,"CODE",{});var hQ=n(Fy);IO=o(hQ,"n"),hQ.forEach(t),TO=o(Ut,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),qy=s(Ut,"CODE",{});var fQ=n(qy);NO=o(fQ,"n"),fQ.forEach(t),PO=o(Ut,` examples.
A batch is a dictionary, e.g. a batch of `),Oy=s(Ut,"CODE",{});var uQ=n(Oy);AO=o(uQ,"n"),uQ.forEach(t),LO=o(Ut," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Ut.forEach(t),Qu.forEach(t),Yo.forEach(t),FO=d(j),sr=s(j,"DIV",{class:!0});var fD=n(sr);m(Zc.$$.fragment,fD),qO=d(fD),Sy=s(fD,"P",{});var gQ=n(Sy);OO=o(gQ,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),gQ.forEach(t),fD.forEach(t),SO=d(j),nr=s(j,"DIV",{class:!0});var uD=n(nr);m(Qc.$$.fragment,uD),CO=d(uD),Cy=s(uD,"P",{});var _Q=n(Cy);zO=o(_Q,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),_Q.forEach(t),uD.forEach(t),VO=d(j),De=s(j,"DIV",{class:!0});var Xa=n(De);m(ep.$$.fragment,Xa),UO=d(Xa),zy=s(Xa,"P",{});var bQ=n(zy);MO=o(bQ,"Randomly shuffles the elements of this dataset."),bQ.forEach(t),RO=d(Xa),Vy=s(Xa,"P",{});var vQ=n(Vy);BO=o(vQ,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),vQ.forEach(t),HO=d(Xa),tp=s(Xa,"P",{});var gD=n(tp);GO=o(gD,"For instance, if your dataset contains 10,000 elements but "),Uy=s(gD,"CODE",{});var yQ=n(Uy);WO=o(yQ,"buffer_size"),yQ.forEach(t),KO=o(gD,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),gD.forEach(t),YO=d(Xa),qs=s(Xa,"P",{});var eg=n(qs);JO=o(eg,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),If=s(eg,"A",{href:!0});var xQ=n(If);XO=o(xQ,"datasets.IterableDataset.skip()"),xQ.forEach(t),ZO=o(eg," or "),Tf=s(eg,"A",{href:!0});var $Q=n(Tf);QO=o($Q,"datasets.IterableDataset.take()"),$Q.forEach(t),eS=o(eg,`
then the order of the shards is kept unchanged.`),eg.forEach(t),Xa.forEach(t),tS=d(j),rr=s(j,"DIV",{class:!0});var _D=n(rr);m(ap.$$.fragment,_D),aS=d(_D),sp=s(_D,"P",{});var bD=n(sp);sS=o(bD,"Create a new IterableDataset that skips the first "),My=s(bD,"CODE",{});var wQ=n(My);nS=o(wQ,"n"),wQ.forEach(t),rS=o(bD," elements."),bD.forEach(t),_D.forEach(t),oS=d(j),or=s(j,"DIV",{class:!0});var vD=n(or);m(np.$$.fragment,vD),iS=d(vD),rp=s(vD,"P",{});var yD=n(rp);lS=o(yD,"Create a new IterableDataset with only the first "),Ry=s(yD,"CODE",{});var DQ=n(Ry);dS=o(DQ,"n"),DQ.forEach(t),cS=o(yD," elements."),yD.forEach(t),vD.forEach(t),pS=d(j),ir=s(j,"DIV",{class:!0});var xD=n(ir);m(op.$$.fragment,xD),mS=d(xD),Nf=s(xD,"P",{});var kG=n(Nf);Pf=s(kG,"A",{href:!0});var EQ=n(Pf);hS=o(EQ,"datasets.DatasetInfo"),EQ.forEach(t),fS=o(kG," object containing all the metadata in the dataset."),kG.forEach(t),xD.forEach(t),uS=d(j),lr=s(j,"DIV",{class:!0});var $D=n(lr);m(ip.$$.fragment,$D),gS=d($D),Af=s($D,"P",{});var IG=n(Af);Lf=s(IG,"A",{href:!0});var jQ=n(Lf);_S=o(jQ,"datasets.NamedSplit"),jQ.forEach(t),bS=o(IG," object corresponding to a named dataset split."),IG.forEach(t),$D.forEach(t),vS=d(j),Ff=s(j,"DIV",{class:!0});var kQ=n(Ff);m(lp.$$.fragment,kQ),kQ.forEach(t),yS=d(j),qf=s(j,"DIV",{class:!0});var IQ=n(qf);m(dp.$$.fragment,IQ),IQ.forEach(t),xS=d(j),Of=s(j,"DIV",{class:!0});var TQ=n(Of);m(cp.$$.fragment,TQ),TQ.forEach(t),$S=d(j),Sf=s(j,"DIV",{class:!0});var NQ=n(Sf);m(pp.$$.fragment,NQ),NQ.forEach(t),wS=d(j),Cf=s(j,"DIV",{class:!0});var PQ=n(Cf);m(mp.$$.fragment,PQ),PQ.forEach(t),DS=d(j),zf=s(j,"DIV",{class:!0});var AQ=n(zf);m(hp.$$.fragment,AQ),AQ.forEach(t),ES=d(j),Vf=s(j,"DIV",{class:!0});var LQ=n(Vf);m(fp.$$.fragment,LQ),LQ.forEach(t),jS=d(j),Uf=s(j,"DIV",{class:!0});var FQ=n(Uf);m(up.$$.fragment,FQ),FQ.forEach(t),kS=d(j),Mf=s(j,"DIV",{class:!0});var qQ=n(Mf);m(gp.$$.fragment,qQ),qQ.forEach(t),IS=d(j),Rf=s(j,"DIV",{class:!0});var OQ=n(Rf);m(_p.$$.fragment,OQ),OQ.forEach(t),TS=d(j),Bf=s(j,"DIV",{class:!0});var SQ=n(Bf);m(bp.$$.fragment,SQ),SQ.forEach(t),NS=d(j),Hf=s(j,"DIV",{class:!0});var CQ=n(Hf);m(vp.$$.fragment,CQ),CQ.forEach(t),PS=d(j),Gf=s(j,"DIV",{class:!0});var zQ=n(Gf);m(yp.$$.fragment,zQ),zQ.forEach(t),j.forEach(t),xw=d(i),Os=s(i,"H2",{class:!0});var wD=n(Os);dr=s(wD,"A",{id:!0,class:!0,href:!0});var VQ=n(dr);By=s(VQ,"SPAN",{});var UQ=n(By);m(xp.$$.fragment,UQ),UQ.forEach(t),VQ.forEach(t),AS=d(wD),Hy=s(wD,"SPAN",{});var MQ=n(Hy);LS=o(MQ,"IterableDatasetDict"),MQ.forEach(t),wD.forEach(t),$w=d(i),cr=s(i,"P",{});var DD=n(cr);FS=o(DD,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Gy=s(DD,"CODE",{});var RQ=n(Gy);qS=o(RQ,"IterableDataset"),RQ.forEach(t),OS=o(DD," objects as values."),DD.forEach(t),ww=d(i),P=s(i,"DIV",{class:!0});var q=n(P);m($p.$$.fragment,q),SS=d(q),At=s(q,"DIV",{class:!0});var Jo=n(At);m(wp.$$.fragment,Jo),CS=d(Jo),Wy=s(Jo,"P",{});var BQ=n(Wy);zS=o(BQ,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),BQ.forEach(t),VS=d(Jo),Dp=s(Jo,"P",{});var ED=n(Dp);US=o(ED,"You can specify whether the function should be batched or not with the "),Ky=s(ED,"CODE",{});var HQ=n(Ky);MS=o(HQ,"batched"),HQ.forEach(t),RS=o(ED," parameter:"),ED.forEach(t),BS=d(Jo),Ss=s(Jo,"UL",{});var tg=n(Ss);Yy=s(tg,"LI",{});var GQ=n(Yy);HS=o(GQ,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),GQ.forEach(t),GS=d(tg),Jy=s(tg,"LI",{});var WQ=n(Jy);WS=o(WQ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),WQ.forEach(t),KS=d(tg),pe=s(tg,"LI",{});var Mt=n(pe);YS=o(Mt,"If batched is True and batch_size is "),Xy=s(Mt,"CODE",{});var KQ=n(Xy);JS=o(KQ,"n"),KQ.forEach(t),XS=o(Mt," > 1, then the function takes a batch of "),Zy=s(Mt,"CODE",{});var YQ=n(Zy);ZS=o(YQ,"n"),YQ.forEach(t),QS=o(Mt," examples as input and can return a batch with "),Qy=s(Mt,"CODE",{});var JQ=n(Qy);eC=o(JQ,"n"),JQ.forEach(t),tC=o(Mt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),e2=s(Mt,"CODE",{});var XQ=n(e2);aC=o(XQ,"n"),XQ.forEach(t),sC=o(Mt,` examples.
A batch is a dictionary, e.g. a batch of `),t2=s(Mt,"CODE",{});var ZQ=n(t2);nC=o(ZQ,"n"),ZQ.forEach(t),rC=o(Mt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Mt.forEach(t),tg.forEach(t),Jo.forEach(t),oC=d(q),pr=s(q,"DIV",{class:!0});var jD=n(pr);m(Ep.$$.fragment,jD),iC=d(jD),a2=s(jD,"P",{});var QQ=n(a2);lC=o(QQ,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),QQ.forEach(t),jD.forEach(t),dC=d(q),Ee=s(q,"DIV",{class:!0});var Za=n(Ee);m(jp.$$.fragment,Za),cC=d(Za),s2=s(Za,"P",{});var eee=n(s2);pC=o(eee,`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),eee.forEach(t),mC=d(Za),n2=s(Za,"P",{});var tee=n(n2);hC=o(tee,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),tee.forEach(t),fC=d(Za),kp=s(Za,"P",{});var kD=n(kp);uC=o(kD,"For instance, if your dataset contains 10,000 elements but "),r2=s(kD,"CODE",{});var aee=n(r2);gC=o(aee,"buffer_size"),aee.forEach(t),_C=o(kD,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),kD.forEach(t),bC=d(Za),Cs=s(Za,"P",{});var ag=n(Cs);vC=o(ag,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Wf=s(ag,"A",{href:!0});var see=n(Wf);yC=o(see,"datasets.IterableDataset.skip()"),see.forEach(t),xC=o(ag," or "),Kf=s(ag,"A",{href:!0});var nee=n(Kf);$C=o(nee,"datasets.IterableDataset.take()"),nee.forEach(t),wC=o(ag,`
then the order of the shards is kept unchanged.`),ag.forEach(t),Za.forEach(t),DC=d(q),mr=s(q,"DIV",{class:!0});var ID=n(mr);m(Ip.$$.fragment,ID),EC=d(ID),o2=s(ID,"P",{});var ree=n(o2);jC=o(ree,`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),ree.forEach(t),ID.forEach(t),kC=d(q),hr=s(q,"DIV",{class:!0});var TD=n(hr);m(Tp.$$.fragment,TD),IC=d(TD),i2=s(TD,"P",{});var oee=n(i2);TC=o(oee,`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),oee.forEach(t),TD.forEach(t),NC=d(q),fr=s(q,"DIV",{class:!0});var ND=n(fr);m(Np.$$.fragment,ND),PC=d(ND),l2=s(ND,"P",{});var iee=n(l2);AC=o(iee,`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),iee.forEach(t),ND.forEach(t),LC=d(q),ur=s(q,"DIV",{class:!0});var PD=n(ur);m(Pp.$$.fragment,PD),FC=d(PD),d2=s(PD,"P",{});var lee=n(d2);qC=o(lee,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),lee.forEach(t),PD.forEach(t),OC=d(q),gr=s(q,"DIV",{class:!0});var AD=n(gr);m(Ap.$$.fragment,AD),SC=d(AD),c2=s(AD,"P",{});var dee=n(c2);CC=o(dee,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),dee.forEach(t),AD.forEach(t),zC=d(q),_r=s(q,"DIV",{class:!0});var LD=n(_r);m(Lp.$$.fragment,LD),VC=d(LD),p2=s(LD,"P",{});var cee=n(p2);UC=o(cee,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),cee.forEach(t),LD.forEach(t),q.forEach(t),Dw=d(i),zs=s(i,"H2",{class:!0});var FD=n(zs);br=s(FD,"A",{id:!0,class:!0,href:!0});var pee=n(br);m2=s(pee,"SPAN",{});var mee=n(m2);m(Fp.$$.fragment,mee),mee.forEach(t),pee.forEach(t),MC=d(FD),h2=s(FD,"SPAN",{});var hee=n(h2);RC=o(hee,"Features"),hee.forEach(t),FD.forEach(t),Ew=d(i),T=s(i,"DIV",{class:!0});var N=n(T);m(qp.$$.fragment,N),BC=d(N),f2=s(N,"P",{});var fee=n(f2);HC=o(fee,"A special dictionary that defines the internal structure of a dataset."),fee.forEach(t),GC=d(N),Op=s(N,"P",{});var qD=n(Op);WC=o(qD,"Instantiated with a dictionary of type "),u2=s(qD,"CODE",{});var uee=n(u2);KC=o(uee,"dict[str, FieldType]"),uee.forEach(t),YC=o(qD,`, where keys are the desired column names,
and values are the type of that column.`),qD.forEach(t),JC=d(N),Yf=s(N,"P",{});var TG=n(Yf);g2=s(TG,"CODE",{});var gee=n(g2);XC=o(gee,"FieldType"),gee.forEach(t),ZC=o(TG," can be one of the following:"),TG.forEach(t),QC=d(N),C=s(N,"UL",{});var ne=n(C);_2=s(ne,"LI",{});var _ee=n(_2);Da=s(_ee,"P",{});var hh=n(Da);ez=o(hh,"a "),Jf=s(hh,"A",{href:!0});var bee=n(Jf);tz=o(bee,"datasets.Value"),bee.forEach(t),az=o(hh," feature specifies a single typed value, e.g. "),b2=s(hh,"CODE",{});var vee=n(b2);sz=o(vee,"int64"),vee.forEach(t),nz=o(hh," or "),v2=s(hh,"CODE",{});var yee=n(v2);rz=o(yee,"string"),yee.forEach(t),hh.forEach(t),_ee.forEach(t),oz=d(ne),y2=s(ne,"LI",{});var xee=n(y2);Sp=s(xee,"P",{});var OD=n(Sp);iz=o(OD,"a "),Xf=s(OD,"A",{href:!0});var $ee=n(Xf);lz=o($ee,"datasets.ClassLabel"),$ee.forEach(t),dz=o(OD,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),OD.forEach(t),xee.forEach(t),cz=d(ne),x2=s(ne,"LI",{});var wee=n(x2);Cp=s(wee,"P",{});var SD=n(Cp);pz=o(SD,"a python "),$2=s(SD,"CODE",{});var Dee=n($2);mz=o(Dee,"dict"),Dee.forEach(t),hz=o(SD,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),SD.forEach(t),wee.forEach(t),fz=d(ne),zp=s(ne,"LI",{});var CD=n(zp);Ue=s(CD,"P",{});var Qa=n(Ue);uz=o(Qa,"a python "),w2=s(Qa,"CODE",{});var Eee=n(w2);gz=o(Eee,"list"),Eee.forEach(t),_z=o(Qa," or a "),Zf=s(Qa,"A",{href:!0});var jee=n(Zf);bz=o(jee,"datasets.Sequence"),jee.forEach(t),vz=o(Qa,` specifies that the field contains a list of objects. The python
`),D2=s(Qa,"CODE",{});var kee=n(D2);yz=o(kee,"list"),kee.forEach(t),xz=o(Qa," or "),Qf=s(Qa,"A",{href:!0});var Iee=n(Qf);$z=o(Iee,"datasets.Sequence"),Iee.forEach(t),wz=o(Qa,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),Qa.forEach(t),Dz=d(CD),m(vr.$$.fragment,CD),CD.forEach(t),Ez=d(ne),E2=s(ne,"LI",{});var Tee=n(E2);Me=s(Tee,"P",{});var es=n(Me);jz=o(es,"a "),eu=s(es,"A",{href:!0});var Nee=n(eu);kz=o(Nee,"Array2D"),Nee.forEach(t),Iz=o(es,", "),tu=s(es,"A",{href:!0});var Pee=n(tu);Tz=o(Pee,"Array3D"),Pee.forEach(t),Nz=o(es,", "),au=s(es,"A",{href:!0});var Aee=n(au);Pz=o(Aee,"Array4D"),Aee.forEach(t),Az=o(es," or "),su=s(es,"A",{href:!0});var Lee=n(su);Lz=o(Lee,"Array5D"),Lee.forEach(t),Fz=o(es," feature for multidimensional arrays"),es.forEach(t),Tee.forEach(t),qz=d(ne),j2=s(ne,"LI",{});var Fee=n(j2);Vp=s(Fee,"P",{});var zD=n(Vp);Oz=o(zD,"an "),nu=s(zD,"A",{href:!0});var qee=n(nu);Sz=o(qee,"Audio"),qee.forEach(t),Cz=o(zD,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),zD.forEach(t),Fee.forEach(t),zz=d(ne),k2=s(ne,"LI",{});var Oee=n(k2);ra=s(Oee,"P",{});var Xo=n(ra);Vz=o(Xo,"an "),ru=s(Xo,"A",{href:!0});var See=n(ru);Uz=o(See,"Image"),See.forEach(t),Mz=o(Xo," feature to store the absolute path to an image file, an "),I2=s(Xo,"CODE",{});var Cee=n(I2);Rz=o(Cee,"np.ndarray"),Cee.forEach(t),Bz=o(Xo," object, a "),T2=s(Xo,"CODE",{});var zee=n(T2);Hz=o(zee,"PIL.Image.Image"),zee.forEach(t),Gz=o(Xo,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),Xo.forEach(t),Oee.forEach(t),Wz=d(ne),N2=s(ne,"LI",{});var Vee=n(N2);yr=s(Vee,"P",{});var sw=n(yr);ou=s(sw,"A",{href:!0});var Uee=n(ou);Kz=o(Uee,"datasets.Translation"),Uee.forEach(t),Yz=o(sw," and "),iu=s(sw,"A",{href:!0});var Mee=n(iu);Jz=o(Mee,"datasets.TranslationVariableLanguages"),Mee.forEach(t),Xz=o(sw,", the two features specific to Machine Translation"),sw.forEach(t),Vee.forEach(t),ne.forEach(t),Zz=d(N),xr=s(N,"DIV",{class:!0});var VD=n(xr);m(Up.$$.fragment,VD),Qz=d(VD),P2=s(VD,"P",{});var Ree=n(P2);eV=o(Ree,"Make a deep copy of Features."),Ree.forEach(t),VD.forEach(t),tV=d(N),$r=s(N,"DIV",{class:!0});var UD=n($r);m(Mp.$$.fragment,UD),aV=d(UD),A2=s(UD,"P",{});var Bee=n(A2);sV=o(Bee,"Decode batch with custom feature decoding."),Bee.forEach(t),UD.forEach(t),nV=d(N),wr=s(N,"DIV",{class:!0});var MD=n(wr);m(Rp.$$.fragment,MD),rV=d(MD),L2=s(MD,"P",{});var Hee=n(L2);oV=o(Hee,"Decode column with custom feature decoding."),Hee.forEach(t),MD.forEach(t),iV=d(N),Dr=s(N,"DIV",{class:!0});var RD=n(Dr);m(Bp.$$.fragment,RD),lV=d(RD),F2=s(RD,"P",{});var Gee=n(F2);dV=o(Gee,"Decode example with custom feature decoding."),Gee.forEach(t),RD.forEach(t),cV=d(N),Er=s(N,"DIV",{class:!0});var BD=n(Er);m(Hp.$$.fragment,BD),pV=d(BD),q2=s(BD,"P",{});var Wee=n(q2);mV=o(Wee,"Encode batch into a format for Arrow."),Wee.forEach(t),BD.forEach(t),hV=d(N),jr=s(N,"DIV",{class:!0});var HD=n(jr);m(Gp.$$.fragment,HD),fV=d(HD),O2=s(HD,"P",{});var Kee=n(O2);uV=o(Kee,"Encode example into a format for Arrow."),Kee.forEach(t),HD.forEach(t),gV=d(N),Ea=s(N,"DIV",{class:!0});var sg=n(Ea);m(Wp.$$.fragment,sg),_V=d(sg),S2=s(sg,"P",{});var Yee=n(S2);bV=o(Yee,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),Yee.forEach(t),vV=d(sg),C2=s(sg,"P",{});var Jee=n(C2);yV=o(Jee,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),Jee.forEach(t),sg.forEach(t),xV=d(N),kr=s(N,"DIV",{class:!0});var GD=n(kr);m(Kp.$$.fragment,GD),$V=d(GD),z2=s(GD,"P",{});var Xee=n(z2);wV=o(Xee,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),Xee.forEach(t),GD.forEach(t),DV=d(N),ae=s(N,"DIV",{class:!0});var Rt=n(ae);m(Yp.$$.fragment,Rt),EV=d(Rt),V2=s(Rt,"P",{});var Zee=n(V2);jV=o(Zee,"Construct Features from dict."),Zee.forEach(t),kV=d(Rt),U2=s(Rt,"P",{});var Qee=n(U2);IV=o(Qee,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),Qee.forEach(t),TV=d(Rt),oa=s(Rt,"P",{});var Zo=n(oa);NV=o(Zo,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),lu=s(Zo,"A",{href:!0});var ete=n(lu);PV=o(ete,"DatasetInfo"),ete.forEach(t),AV=o(Zo,` that was dumped to a JSON object. This acts as an analogue to
`),du=s(Zo,"A",{href:!0});var tte=n(du);LV=o(tte,"Features.from_arrow_schema()"),tte.forEach(t),FV=o(Zo,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),cu=s(Zo,"A",{href:!0});var ate=n(cu);qV=o(ate,"Value"),ate.forEach(t),OV=o(Zo," automatically performs."),Zo.forEach(t),SV=d(Rt),M2=s(Rt,"P",{});var ste=n(M2);CV=o(ste,"Example:"),ste.forEach(t),zV=d(Rt),m(Jp.$$.fragment,Rt),Rt.forEach(t),VV=d(N),je=s(N,"DIV",{class:!0});var ts=n(je);m(Xp.$$.fragment,ts),UV=d(ts),R2=s(ts,"P",{});var nte=n(R2);MV=o(nte,"Reorder Features fields to match the field order of other Features."),nte.forEach(t),RV=d(ts),B2=s(ts,"P",{});var rte=n(B2);BV=o(rte,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),rte.forEach(t),HV=d(ts),H2=s(ts,"P",{});var ote=n(H2);GV=o(ote,"Example:"),ote.forEach(t),WV=d(ts),m(Zp.$$.fragment,ts),ts.forEach(t),N.forEach(t),jw=d(i),Vs=s(i,"DIV",{class:!0});var WD=n(Vs);m(Qp.$$.fragment,WD),KV=d(WD),G2=s(WD,"P",{});var ite=n(G2);YV=o(ite,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),ite.forEach(t),WD.forEach(t),kw=d(i),G=s(i,"DIV",{class:!0});var Bt=n(G);m(em.$$.fragment,Bt),JV=d(Bt),W2=s(Bt,"P",{});var lte=n(W2);XV=o(lte,"Feature type for integer class labels."),lte.forEach(t),ZV=d(Bt),tm=s(Bt,"P",{});var KD=n(tm);QV=o(KD,"There are 3 ways to define a "),K2=s(KD,"EM",{});var dte=n(K2);eU=o(dte,"ClassLabel"),dte.forEach(t),tU=o(KD,", which correspond to the 3 arguments:"),KD.forEach(t),aU=d(Bt),Us=s(Bt,"UL",{});var ng=n(Us);pu=s(ng,"LI",{});var NG=n(pu);Y2=s(NG,"EM",{});var cte=n(Y2);sU=o(cte,"num_classes"),cte.forEach(t),nU=o(NG,": Create 0 to (num_classes-1) labels."),NG.forEach(t),rU=d(ng),mu=s(ng,"LI",{});var PG=n(mu);J2=s(PG,"EM",{});var pte=n(J2);oU=o(pte,"names"),pte.forEach(t),iU=o(PG,": List of label strings."),PG.forEach(t),lU=d(ng),hu=s(ng,"LI",{});var AG=n(hu);X2=s(AG,"EM",{});var mte=n(X2);dU=o(mte,"names_file"),mte.forEach(t),cU=o(AG,": File containing the list of labels."),AG.forEach(t),ng.forEach(t),pU=d(Bt),Ir=s(Bt,"DIV",{class:!0});var YD=n(Ir);m(am.$$.fragment,YD),mU=d(YD),Z2=s(YD,"P",{});var hte=n(Z2);hU=o(hte,"Conversion integer => class name string."),hte.forEach(t),YD.forEach(t),fU=d(Bt),Tr=s(Bt,"DIV",{class:!0});var JD=n(Tr);m(sm.$$.fragment,JD),uU=d(JD),Q2=s(JD,"P",{});var fte=n(Q2);gU=o(fte,"Conversion class name string => integer."),fte.forEach(t),JD.forEach(t),Bt.forEach(t),Iw=d(i),ia=s(i,"DIV",{class:!0});var rg=n(ia);m(nm.$$.fragment,rg),_U=d(rg),ex=s(rg,"P",{});var ute=n(ex);bU=o(ute,"The Value dtypes are as follows:"),ute.forEach(t),vU=d(rg),tx=s(rg,"P",{});var gte=n(tx);yU=o(gte,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),gte.forEach(t),rg.forEach(t),Tw=d(i),z=s(i,"DIV",{class:!0});var Te=n(z);m(rm.$$.fragment,Te),xU=d(Te),fu=s(Te,"P",{});var LG=n(fu);ax=s(LG,"CODE",{});var _te=n(ax);$U=o(_te,"FeatureConnector"),_te.forEach(t),wU=o(LG,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),LG.forEach(t),DU=d(Te),sx=s(Te,"P",{});var bte=n(sx);EU=o(bte,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),bte.forEach(t),jU=d(Te),om=s(Te,"P",{});var XD=n(om);kU=o(XD,"Output: A dictionary mapping string language codes to translations as "),nx=s(XD,"CODE",{});var vte=n(nx);IU=o(vte,"Text"),vte.forEach(t),TU=o(XD,`
features.`),XD.forEach(t),NU=d(Te),rx=s(Te,"P",{});var yte=n(rx);PU=o(yte,"Example:"),yte.forEach(t),AU=d(Te),m(im.$$.fragment,Te),LU=d(Te),Nr=s(Te,"DIV",{class:!0});var ZD=n(Nr);m(lm.$$.fragment,ZD),FU=d(ZD),ox=s(ZD,"P",{});var xte=n(ox);qU=o(xte,"Flatten the Translation feature into a dictionary."),xte.forEach(t),ZD.forEach(t),Te.forEach(t),Nw=d(i),V=s(i,"DIV",{class:!0});var Ne=n(V);m(dm.$$.fragment,Ne),OU=d(Ne),uu=s(Ne,"P",{});var FG=n(uu);ix=s(FG,"CODE",{});var $te=n(ix);SU=o($te,"FeatureConnector"),$te.forEach(t),CU=o(FG,` for translations with variable languages per example.
Here for compatiblity with tfds.`),FG.forEach(t),zU=d(Ne),lx=s(Ne,"P",{});var wte=n(lx);VU=o(wte,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),wte.forEach(t),UU=d(Ne),dx=s(Ne,"P",{});var Dte=n(dx);MU=o(Dte,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),Dte.forEach(t),RU=d(Ne),cx=s(Ne,"P",{});var Ete=n(cx);BU=o(Ete,"Example:"),Ete.forEach(t),HU=d(Ne),m(cm.$$.fragment,Ne),GU=d(Ne),Pr=s(Ne,"DIV",{class:!0});var QD=n(Pr);m(pm.$$.fragment,QD),WU=d(QD),px=s(QD,"P",{});var jte=n(px);KU=o(jte,"Flatten the TranslationVariableLanguages feature into a dictionary."),jte.forEach(t),QD.forEach(t),Ne.forEach(t),Pw=d(i),mm=s(i,"DIV",{class:!0});var kte=n(mm);m(hm.$$.fragment,kte),kte.forEach(t),Aw=d(i),fm=s(i,"DIV",{class:!0});var Ite=n(fm);m(um.$$.fragment,Ite),Ite.forEach(t),Lw=d(i),gm=s(i,"DIV",{class:!0});var Tte=n(gm);m(_m.$$.fragment,Tte),Tte.forEach(t),Fw=d(i),bm=s(i,"DIV",{class:!0});var Nte=n(bm);m(vm.$$.fragment,Nte),Nte.forEach(t),qw=d(i),A=s(i,"DIV",{class:!0});var R=n(A);m(ym.$$.fragment,R),YU=d(R),mx=s(R,"P",{});var Pte=n(mx);JU=o(Pte,"Audio Feature to extract audio data from an audio file."),Pte.forEach(t),XU=d(R),hx=s(R,"P",{});var Ate=n(hx);ZU=o(Ate,"Input: The Audio feature accepts as input:"),Ate.forEach(t),QU=d(R),Ms=s(R,"UL",{});var og=n(Ms);fx=s(og,"LI",{});var Lte=n(fx);xm=s(Lte,"P",{});var e4=n(xm);eM=o(e4,"A "),ux=s(e4,"CODE",{});var Fte=n(ux);tM=o(Fte,"str"),Fte.forEach(t),aM=o(e4,": Absolute path to the audio file (i.e. random access is allowed)."),e4.forEach(t),Lte.forEach(t),sM=d(og),Rs=s(og,"LI",{});var ig=n(Rs);$m=s(ig,"P",{});var t4=n($m);nM=o(t4,"A "),gx=s(t4,"CODE",{});var qte=n(gx);rM=o(qte,"dict"),qte.forEach(t),oM=o(t4," with the keys:"),t4.forEach(t),iM=d(ig),wm=s(ig,"UL",{});var a4=n(wm);_x=s(a4,"LI",{});var Ote=n(_x);lM=o(Ote,"path: String with relative path of the audio file to the archive file."),Ote.forEach(t),dM=d(a4),bx=s(a4,"LI",{});var Ste=n(bx);cM=o(Ste,"bytes: Bytes content of the audio file."),Ste.forEach(t),a4.forEach(t),pM=d(ig),vx=s(ig,"P",{});var Cte=n(vx);mM=o(Cte,"This is useful for archived files with sequential access."),Cte.forEach(t),ig.forEach(t),hM=d(og),Bs=s(og,"LI",{});var lg=n(Bs);Dm=s(lg,"P",{});var s4=n(Dm);fM=o(s4,"A "),yx=s(s4,"CODE",{});var zte=n(yx);uM=o(zte,"dict"),zte.forEach(t),gM=o(s4," with the keys:"),s4.forEach(t),_M=d(lg),Hs=s(lg,"UL",{});var dg=n(Hs);xx=s(dg,"LI",{});var Vte=n(xx);bM=o(Vte,"path: String with relative path of the audio file to the archive file."),Vte.forEach(t),vM=d(dg),$x=s(dg,"LI",{});var Ute=n($x);yM=o(Ute,"array: Array containing the audio sample"),Ute.forEach(t),xM=d(dg),wx=s(dg,"LI",{});var Mte=n(wx);$M=o(Mte,"sampling_rate: Integer corresponding to the samping rate of the audio sample."),Mte.forEach(t),dg.forEach(t),wM=d(lg),Dx=s(lg,"P",{});var Rte=n(Dx);DM=o(Rte,"This is useful for archived files with sequential access."),Rte.forEach(t),lg.forEach(t),og.forEach(t),EM=d(R),ja=s(R,"DIV",{class:!0});var cg=n(ja);m(Em.$$.fragment,cg),jM=d(cg),Ex=s(cg,"P",{});var Bte=n(Ex);kM=o(Bte,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),Bte.forEach(t),IM=d(cg),la=s(cg,"UL",{});var Qo=n(la);jx=s(Qo,"LI",{});var Hte=n(jx);TM=o(Hte,"pa.string() - it must contain the \u201Cpath\u201D data"),Hte.forEach(t),NM=d(Qo),kx=s(Qo,"LI",{});var Gte=n(kx);PM=o(Gte,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),Gte.forEach(t),AM=d(Qo),Ix=s(Qo,"LI",{});var Wte=n(Ix);LM=o(Wte,"pa.struct({\u201Cpath\u201D: pa.string()})"),Wte.forEach(t),FM=d(Qo),Tx=s(Qo,"LI",{});var Kte=n(Tx);qM=o(Kte,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),Kte.forEach(t),Qo.forEach(t),cg.forEach(t),OM=d(R),Ar=s(R,"DIV",{class:!0});var n4=n(Ar);m(jm.$$.fragment,n4),SM=d(n4),Nx=s(n4,"P",{});var Yte=n(Nx);CM=o(Yte,"Decode example audio file into audio data."),Yte.forEach(t),n4.forEach(t),zM=d(R),Lr=s(R,"DIV",{class:!0});var r4=n(Lr);m(km.$$.fragment,r4),VM=d(r4),Px=s(r4,"P",{});var Jte=n(Px);UM=o(Jte,"Embed audio files into the Arrow array."),Jte.forEach(t),r4.forEach(t),MM=d(R),Fr=s(R,"DIV",{class:!0});var o4=n(Fr);m(Im.$$.fragment,o4),RM=d(o4),Ax=s(o4,"P",{});var Xte=n(Ax);BM=o(Xte,"Encode example into a format for Arrow."),Xte.forEach(t),o4.forEach(t),HM=d(R),qr=s(R,"DIV",{class:!0});var i4=n(qr);m(Tm.$$.fragment,i4),GM=d(i4),Lx=s(i4,"P",{});var Zte=n(Lx);WM=o(Zte,"If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),Zte.forEach(t),i4.forEach(t),R.forEach(t),Ow=d(i),L=s(i,"DIV",{class:!0});var B=n(L);m(Nm.$$.fragment,B),KM=d(B),Fx=s(B,"P",{});var Qte=n(Fx);YM=o(Qte,"Image feature to read image data from an image file."),Qte.forEach(t),JM=d(B),qx=s(B,"P",{});var eae=n(qx);XM=o(eae,"Input: The Image feature accepts as input:"),eae.forEach(t),ZM=d(B),da=s(B,"UL",{});var ei=n(da);Ox=s(ei,"LI",{});var tae=n(Ox);Pm=s(tae,"P",{});var l4=n(Pm);QM=o(l4,"A "),Sx=s(l4,"CODE",{});var aae=n(Sx);eR=o(aae,"str"),aae.forEach(t),tR=o(l4,": Absolute path to the image file (i.e. random access is allowed)."),l4.forEach(t),tae.forEach(t),aR=d(ei),Gs=s(ei,"LI",{});var pg=n(Gs);Am=s(pg,"P",{});var d4=n(Am);sR=o(d4,"A "),Cx=s(d4,"CODE",{});var sae=n(Cx);nR=o(sae,"dict"),sae.forEach(t),rR=o(d4," with the keys:"),d4.forEach(t),oR=d(pg),Lm=s(pg,"UL",{});var c4=n(Lm);zx=s(c4,"LI",{});var nae=n(zx);iR=o(nae,"path: String with relative path of the image file to the archive file."),nae.forEach(t),lR=d(c4),Vx=s(c4,"LI",{});var rae=n(Vx);dR=o(rae,"bytes: Bytes of the image file."),rae.forEach(t),c4.forEach(t),cR=d(pg),Ux=s(pg,"P",{});var oae=n(Ux);pR=o(oae,"This is useful for archived files with sequential access."),oae.forEach(t),pg.forEach(t),mR=d(ei),Mx=s(ei,"LI",{});var iae=n(Mx);Fm=s(iae,"P",{});var p4=n(Fm);hR=o(p4,"An "),Rx=s(p4,"CODE",{});var lae=n(Rx);fR=o(lae,"np.ndarray"),lae.forEach(t),uR=o(p4,": NumPy array representing an image."),p4.forEach(t),iae.forEach(t),gR=d(ei),Bx=s(ei,"LI",{});var dae=n(Bx);qm=s(dae,"P",{});var m4=n(qm);_R=o(m4,"A "),Hx=s(m4,"CODE",{});var cae=n(Hx);bR=o(cae,"PIL.Image.Image"),cae.forEach(t),vR=o(m4,": PIL image object."),m4.forEach(t),dae.forEach(t),ei.forEach(t),yR=d(B),ka=s(B,"DIV",{class:!0});var mg=n(ka);m(Om.$$.fragment,mg),xR=d(mg),Gx=s(mg,"P",{});var pae=n(Gx);$R=o(pae,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),pae.forEach(t),wR=d(mg),Re=s(mg,"UL",{});var as=n(Re);Wx=s(as,"LI",{});var mae=n(Wx);DR=o(mae,"pa.string() - it must contain the \u201Cpath\u201D data"),mae.forEach(t),ER=d(as),Kx=s(as,"LI",{});var hae=n(Kx);jR=o(hae,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),hae.forEach(t),kR=d(as),Yx=s(as,"LI",{});var fae=n(Yx);IR=o(fae,"pa.struct({\u201Cpath\u201D: pa.string()})"),fae.forEach(t),TR=d(as),Jx=s(as,"LI",{});var uae=n(Jx);NR=o(uae,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),uae.forEach(t),PR=d(as),Xx=s(as,"LI",{});var gae=n(Xx);AR=o(gae,"pa.list(*) - it must contain the image array data"),gae.forEach(t),as.forEach(t),mg.forEach(t),LR=d(B),Or=s(B,"DIV",{class:!0});var h4=n(Or);m(Sm.$$.fragment,h4),FR=d(h4),Zx=s(h4,"P",{});var _ae=n(Zx);qR=o(_ae,"Decode example image file into image data."),_ae.forEach(t),h4.forEach(t),OR=d(B),Sr=s(B,"DIV",{class:!0});var f4=n(Sr);m(Cm.$$.fragment,f4),SR=d(f4),Qx=s(f4,"P",{});var bae=n(Qx);CR=o(bae,"Embed image files into the Arrow array."),bae.forEach(t),f4.forEach(t),zR=d(B),Cr=s(B,"DIV",{class:!0});var u4=n(Cr);m(zm.$$.fragment,u4),VR=d(u4),e$=s(u4,"P",{});var vae=n(e$);UR=o(vae,"Encode example into a format for Arrow."),vae.forEach(t),u4.forEach(t),MR=d(B),zr=s(B,"DIV",{class:!0});var g4=n(zr);m(Vm.$$.fragment,g4),RR=d(g4),t$=s(g4,"P",{});var yae=n(t$);BR=o(yae,"If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),yae.forEach(t),g4.forEach(t),B.forEach(t),Sw=d(i),Ws=s(i,"H2",{class:!0});var _4=n(Ws);Vr=s(_4,"A",{id:!0,class:!0,href:!0});var xae=n(Vr);a$=s(xae,"SPAN",{});var $ae=n(a$);m(Um.$$.fragment,$ae),$ae.forEach(t),xae.forEach(t),HR=d(_4),s$=s(_4,"SPAN",{});var wae=n(s$);GR=o(wae,"MetricInfo"),wae.forEach(t),_4.forEach(t),Cw=d(i),W=s(i,"DIV",{class:!0});var Ht=n(W);m(Mm.$$.fragment,Ht),WR=d(Ht),n$=s(Ht,"P",{});var Dae=n(n$);KR=o(Dae,"Information about a metric."),Dae.forEach(t),YR=d(Ht),gu=s(Ht,"P",{});var qG=n(gu);r$=s(qG,"CODE",{});var Eae=n(r$);JR=o(Eae,"MetricInfo"),Eae.forEach(t),XR=o(qG,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),qG.forEach(t),ZR=d(Ht),o$=s(Ht,"P",{});var jae=n(o$);QR=o(jae,"Note: Not all fields are known on construction and may be updated later."),jae.forEach(t),eB=d(Ht),Ur=s(Ht,"DIV",{class:!0});var b4=n(Ur);m(Rm.$$.fragment,b4),tB=d(b4),Bm=s(b4,"P",{});var v4=n(Bm);aB=o(v4,"Create MetricInfo from the JSON file in "),i$=s(v4,"CODE",{});var kae=n(i$);sB=o(kae,"metric_info_dir"),kae.forEach(t),nB=o(v4,"."),v4.forEach(t),b4.forEach(t),rB=d(Ht),Mr=s(Ht,"DIV",{class:!0});var y4=n(Mr);m(Hm.$$.fragment,y4),oB=d(y4),ca=s(y4,"P",{});var ti=n(ca);iB=o(ti,"Write "),l$=s(ti,"CODE",{});var Iae=n(l$);lB=o(Iae,"MetricInfo"),Iae.forEach(t),dB=o(ti," as JSON to "),d$=s(ti,"CODE",{});var Tae=n(d$);cB=o(Tae,"metric_info_dir"),Tae.forEach(t),pB=o(ti,`.
Also save the license separately in LICENCE.
If `),c$=s(ti,"CODE",{});var Nae=n(c$);mB=o(Nae,"pretty_print"),Nae.forEach(t),hB=o(ti," is True, the JSON will be pretty-printed with the indent level of 4."),ti.forEach(t),y4.forEach(t),Ht.forEach(t),zw=d(i),Ks=s(i,"H2",{class:!0});var x4=n(Ks);Rr=s(x4,"A",{id:!0,class:!0,href:!0});var Pae=n(Rr);p$=s(Pae,"SPAN",{});var Aae=n(p$);m(Gm.$$.fragment,Aae),Aae.forEach(t),Pae.forEach(t),fB=d(x4),m$=s(x4,"SPAN",{});var Lae=n(m$);uB=o(Lae,"Metric"),Lae.forEach(t),x4.forEach(t),Vw=d(i),Ia=s(i,"P",{});var hg=n(Ia);gB=o(hg,"The base class "),h$=s(hg,"CODE",{});var Fae=n(h$);_B=o(Fae,"Metric"),Fae.forEach(t),bB=o(hg," implements a Metric backed by one or several "),_u=s(hg,"A",{href:!0});var qae=n(_u);vB=o(qae,"Dataset"),qae.forEach(t),yB=o(hg,"."),hg.forEach(t),Uw=d(i),K=s(i,"DIV",{class:!0});var Gt=n(K);m(Wm.$$.fragment,Gt),xB=d(Gt),f$=s(Gt,"P",{});var Oae=n(f$);$B=o(Oae,"A Metric is the base class and common API for all metrics."),Oae.forEach(t),wB=d(Gt),Br=s(Gt,"DIV",{class:!0});var $4=n(Br);m(Km.$$.fragment,$4),DB=d($4),u$=s($4,"P",{});var Sae=n(u$);EB=o(Sae,"Add one prediction and reference for the metric\u2019s stack."),Sae.forEach(t),$4.forEach(t),jB=d(Gt),Hr=s(Gt,"DIV",{class:!0});var w4=n(Hr);m(Ym.$$.fragment,w4),kB=d(w4),g$=s(w4,"P",{});var Cae=n(g$);IB=o(Cae,"Add a batch of predictions and references for the metric\u2019s stack."),Cae.forEach(t),w4.forEach(t),TB=d(Gt),Ta=s(Gt,"DIV",{class:!0});var fg=n(Ta);m(Jm.$$.fragment,fg),NB=d(fg),_$=s(fg,"P",{});var zae=n(_$);PB=o(zae,"Compute the metrics."),zae.forEach(t),AB=d(fg),b$=s(fg,"P",{});var Vae=n(b$);LB=o(Vae,"Usage of positional arguments is not allowed to prevent mistakes."),Vae.forEach(t),fg.forEach(t),FB=d(Gt),Gr=s(Gt,"DIV",{class:!0});var D4=n(Gr);m(Xm.$$.fragment,D4),qB=d(D4),v$=s(D4,"P",{});var Uae=n(v$);OB=o(Uae,"Downloads and prepares dataset for reading."),Uae.forEach(t),D4.forEach(t),Gt.forEach(t),Mw=d(i),Ys=s(i,"H2",{class:!0});var E4=n(Ys);Wr=s(E4,"A",{id:!0,class:!0,href:!0});var Mae=n(Wr);y$=s(Mae,"SPAN",{});var Rae=n(y$);m(Zm.$$.fragment,Rae),Rae.forEach(t),Mae.forEach(t),SB=d(E4),x$=s(E4,"SPAN",{});var Bae=n(x$);CB=o(Bae,"Filesystems"),Bae.forEach(t),E4.forEach(t),Rw=d(i),k=s(i,"DIV",{class:!0});var I=n(k);m(Qm.$$.fragment,I),zB=d(I),$$=s(I,"P",{});var Hae=n($$);VB=o(Hae,"Access S3 as if it were a file system."),Hae.forEach(t),UB=d(I),w$=s(I,"P",{});var Gae=n(w$);MB=o(Gae,`This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3
storage.`),Gae.forEach(t),RB=d(I),pa=s(I,"P",{});var ai=n(pa);BB=o(ai,"Provide credentials either explicitly ("),D$=s(ai,"CODE",{});var Wae=n(D$);HB=o(Wae,"key="),Wae.forEach(t),GB=o(ai,", "),E$=s(ai,"CODE",{});var Kae=n(E$);WB=o(Kae,"secret="),Kae.forEach(t),KB=o(ai,`) or depend
on boto\u2019s credential methods. See botocore documentation for more
information. If no credentials are available, use `),j$=s(ai,"CODE",{});var Yae=n(j$);YB=o(Yae,"anon=True"),Yae.forEach(t),JB=o(ai,"."),ai.forEach(t),XB=d(I),k$=s(I,"P",{});var Jae=n(k$);ZB=o(Jae,"The following parameters are passed on to fsspec:"),Jae.forEach(t),QB=d(I),I$=s(I,"P",{});var Xae=n(I$);eH=o(Xae,`skip_instance_cache: to control reuse of instances
use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings`),Xae.forEach(t),tH=d(I),T$=s(I,"P",{});var Zae=n(T$);aH=o(Zae,"."),Zae.forEach(t),sH=d(I),Lt=s(I,"P",{});var nn=n(Lt);N$=s(nn,"CODE",{});var Qae=n(N$);nH=o(Qae,"datasets.filesystems.S3FileSystem"),Qae.forEach(t),rH=o(nn," is a subclass of s3fs.S3FileSystem]("),eh=s(nn,"A",{href:!0,rel:!0});var ese=n(eh);oH=o(ese,"https://s3fs.readthedocs.io/en/latest/api.html"),ese.forEach(t),iH=o(nn,`), which is a known
implementation of `),P$=s(nn,"CODE",{});var tse=n(P$);lH=o(tse,"fsspec"),tse.forEach(t),dH=o(nn,". Filesystem Spec "),th=s(nn,"A",{href:!0,rel:!0});var ase=n(th);cH=o(ase,"FSSPEC"),ase.forEach(t),pH=o(nn,` is a project to
unify various projects and classes to work with remote filesystems
and file-system-like abstractions using a standard pythonic interface.`),nn.forEach(t),mH=d(I),A$=s(I,"P",{});var sse=n(A$);hH=o(sse,"Examples:"),sse.forEach(t),fH=d(I),L$=s(I,"P",{});var nse=n(L$);uH=o(nse,"Listing files from public s3 bucket."),nse.forEach(t),gH=d(I),m(ah.$$.fragment,I),_H=d(I),Js=s(I,"P",{});var ug=n(Js);bH=o(ug,"Listing files from private s3 bucket using "),F$=s(ug,"CODE",{});var rse=n(F$);vH=o(rse,"aws_access_key_id"),rse.forEach(t),yH=o(ug," and "),q$=s(ug,"CODE",{});var ose=n(q$);xH=o(ose,"aws_secret_access_key"),ose.forEach(t),$H=o(ug,"."),ug.forEach(t),wH=d(I),m(sh.$$.fragment,I),DH=d(I),ma=s(I,"P",{});var si=n(ma);EH=o(si,"Using "),O$=s(si,"CODE",{});var ise=n(O$);jH=o(ise,"S3Filesystem"),ise.forEach(t),kH=o(si," with "),S$=s(si,"CODE",{});var lse=n(S$);IH=o(lse,"botocore.session.Session"),lse.forEach(t),TH=o(si," and custom "),C$=s(si,"CODE",{});var dse=n(C$);NH=o(dse,"aws_profile"),dse.forEach(t),PH=o(si,"."),si.forEach(t),AH=d(I),m(nh.$$.fragment,I),LH=d(I),Xs=s(I,"P",{});var gg=n(Xs);FH=o(gg,"Loading dataset from s3 using "),z$=s(gg,"CODE",{});var cse=n(z$);qH=o(cse,"S3Filesystem"),cse.forEach(t),OH=o(gg," and "),V$=s(gg,"CODE",{});var pse=n(V$);SH=o(pse,"load_from_disk()"),pse.forEach(t),CH=o(gg,"."),gg.forEach(t),zH=d(I),m(rh.$$.fragment,I),VH=d(I),U$=s(I,"P",{});var mse=n(U$);UH=o(mse,"Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>."),mse.forEach(t),MH=d(I),m(oh.$$.fragment,I),RH=d(I),Kr=s(I,"H2",{class:!0});var j4=n(Kr);Yr=s(j4,"A",{id:!0,class:!0,href:!0});var hse=n(Yr);M$=s(hse,"SPAN",{});var fse=n(M$);m(ih.$$.fragment,fse),fse.forEach(t),hse.forEach(t),BH=d(j4),R$=s(j4,"SPAN",{});var use=n(R$);HH=o(use,"Parameters"),use.forEach(t),j4.forEach(t),GH=d(I),U=s(I,"P",{});var re=n(U);WH=o(re,`anon : bool (False)
Whether to use anonymous connection (public buckets only). If False,
uses the key/secret given, or boto\u2019s credential resolver (client_kwargs,
environment, variables, config files, EC2 IAM server, in that order)
key : string (None)
If not anonymous, use this access key ID, if specified
secret : string (None)
If not anonymous, use this secret access key, if specified
token : string (None)
If not anonymous, use this security token, if specified
use_ssl : bool (True)
Whether to use SSL in connections to S3; may be faster without, but
insecure. If `),B$=s(re,"CODE",{});var gse=n(B$);KH=o(gse,"use_ssl"),gse.forEach(t),YH=o(re," is also set in "),H$=s(re,"CODE",{});var _se=n(H$);JH=o(_se,"client_kwargs"),_se.forEach(t),XH=o(re,`,
the value set in `),G$=s(re,"CODE",{});var bse=n(G$);ZH=o(bse,"client_kwargs"),bse.forEach(t),QH=o(re,` will take priority.
s3_additional_kwargs : dict of parameters that are used when calling s3 api
methods. Typically used for things like \u201CServerSideEncryption\u201D.
client_kwargs : dict of parameters for the botocore client
requester_pays : bool (False)
If RequesterPays buckets are supported.
default_block_size: int (None)
If given, the default block size value used for `),W$=s(re,"CODE",{});var vse=n(W$);eG=o(vse,"open()"),vse.forEach(t),tG=o(re,`, if no
specific value is given at all time. The built-in default is 5MB.
default_fill_cache : Bool (True)
Whether to use cache filling with open by default. Refer to
`),K$=s(re,"CODE",{});var yse=n(K$);aG=o(yse,"S3File.open"),yse.forEach(t),sG=o(re,`.
default_cache_type : string (\u2018bytes\u2019)
If given, the default cache_type value used for `),Y$=s(re,"CODE",{});var xse=n(Y$);nG=o(xse,"open()"),xse.forEach(t),rG=o(re,`. Set to \u201Cnone\u201D
if no caching is desired. See fsspec\u2019s documentation for other available
cache_type values. Default cache_type is \u2018bytes\u2019.
version_aware : bool (False)
Whether to support bucket versioning.  If enable this will require the
user to have the necessary IAM permissions for dealing with versioned
objects.
cache_regions : bool (False)
Whether to cache bucket regions or not. Whenever a new bucket is used,
it will first find out which region it belongs and then use the client
for that region.
config_kwargs : dict of parameters passed to `),J$=s(re,"CODE",{});var $se=n(J$);oG=o($se,"botocore.client.Config"),$se.forEach(t),iG=o(re,`
kwargs : other parameters for core session
session : aiobotocore AioSession object to be used for all connections.
This session will be used inplace of creating a new session inside S3FileSystem.
For example: aiobotocore.session.AioSession(profile=\u2018test_user\u2019)`),re.forEach(t),I.forEach(t),Bw=d(i),Zs=s(i,"DIV",{class:!0});var k4=n(Zs);m(lh.$$.fragment,k4),lG=d(k4),Qs=s(k4,"P",{});var _g=n(Qs);dG=o(_g,"preprocesses "),X$=s(_g,"EM",{});var wse=n(X$);cG=o(wse,"dataset_path"),wse.forEach(t),pG=o(_g," and removes remote filesystem (e.g. removing "),Z$=s(_g,"CODE",{});var Dse=n(Z$);mG=o(Dse,"s3://"),Dse.forEach(t),hG=o(_g,")"),_g.forEach(t),k4.forEach(t),Hw=d(i),en=s(i,"DIV",{class:!0});var I4=n(en);m(dh.$$.fragment,I4),fG=d(I4),Q$=s(I4,"P",{});var Ese=n(Q$);uG=o(Ese,"Validates if filesystem has remote protocol."),Ese.forEach(t),I4.forEach(t),Gw=d(i),tn=s(i,"H2",{class:!0});var T4=n(tn);Jr=s(T4,"A",{id:!0,class:!0,href:!0});var jse=n(Jr);ew=s(jse,"SPAN",{});var kse=n(ew);m(ch.$$.fragment,kse),kse.forEach(t),jse.forEach(t),gG=d(T4),tw=s(T4,"SPAN",{});var Ise=n(tw);_G=o(Ise,"Fingerprint"),Ise.forEach(t),T4.forEach(t),Ww=d(i),an=s(i,"DIV",{class:!0});var N4=n(an);m(ph.$$.fragment,N4),bG=d(N4),aw=s(N4,"P",{});var Tse=n(aw);vG=o(Tse,"Hasher that accepts python objects as inputs."),Tse.forEach(t),N4.forEach(t),this.h()},h(){c(F,"name","hf:doc:metadata"),c(F,"content",JSON.stringify(Cse)),c(Be,"id","main-classes"),c(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Be,"href","#main-classes"),c(Y,"class","relative group"),c(me,"id","datasets.DatasetInfo"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#datasets.DatasetInfo"),c(Ae,"class","relative group"),c(He,"class","docstring"),c(dn,"class","docstring"),c(H,"class","docstring"),c(cn,"id","datasets.Dataset"),c(cn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cn,"href","#datasets.Dataset"),c(os,"class","relative group"),c(gh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"),c(he,"class","docstring"),c(fe,"class","docstring"),c(mn,"class","docstring"),c(hn,"class","docstring"),c(_h,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"),c(X,"class","docstring"),c(bh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"),c(fn,"class","docstring"),c(Ge,"class","docstring"),c(We,"class","docstring"),c(Ke,"class","docstring"),c(un,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.__len__"),c(Ye,"class","docstring"),c(Je,"class","docstring"),c(Xe,"class","docstring"),c(ue,"class","docstring"),c(Ze,"class","docstring"),c(Qe,"class","docstring"),c(et,"class","docstring"),c(vh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.map"),c(ge,"class","docstring"),c(tt,"class","docstring"),c(at,"class","docstring"),c(st,"class","docstring"),c(nt,"class","docstring"),c(yh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.set_format"),c(ua,"class","docstring"),c(gn,"class","docstring"),c(xh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.set_transform"),c(Z,"class","docstring"),c($h,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.set_format"),c(wh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.reset_format"),c(rt,"class","docstring"),c(_e,"class","docstring"),c(Eh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.with_transform"),c(jh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.set_format"),c(Q,"class","docstring"),c(kh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.set_format"),c(Ih,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.reset_format"),c(Th,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.set_transform"),c(ee,"class","docstring"),c(_n,"class","docstring"),c(be,"class","docstring"),c(te,"class","docstring"),c(it,"class","docstring"),c(lt,"class","docstring"),c(ve,"class","docstring"),c(ye,"class","docstring"),c(xe,"class","docstring"),c(M,"class","docstring"),c(dt,"class","docstring"),c(ct,"class","docstring"),c(Nh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(pt,"class","docstring"),c(Ph,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(mt,"class","docstring"),c(bn,"class","docstring"),c(ht,"class","docstring"),c(ft,"class","docstring"),c(ut,"class","docstring"),c(gt,"class","docstring"),c(_t,"class","docstring"),c(ad,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),c(ad,"rel","nofollow"),c($e,"class","docstring"),c(rd,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),c(rd,"rel","nofollow"),c(ga,"class","docstring"),c(vn,"class","docstring"),c(_a,"class","docstring"),c(bt,"class","docstring"),c(vt,"class","docstring"),c(yn,"class","docstring"),c(xn,"class","docstring"),c($n,"class","docstring"),c(wn,"class","docstring"),c(Dn,"class","docstring"),c(En,"class","docstring"),c(jn,"class","docstring"),c(qh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetInfo"),c(kn,"class","docstring"),c(Sh,"href","/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.NamedSplit"),c(In,"class","docstring"),c(Ch,"class","docstring"),c(zh,"class","docstring"),c(Vh,"class","docstring"),c(Uh,"class","docstring"),c(Mh,"class","docstring"),c(Rh,"class","docstring"),c(Bh,"class","docstring"),c(Hh,"class","docstring"),c(Gh,"class","docstring"),c(Wh,"class","docstring"),c(Kh,"class","docstring"),c(Yh,"class","docstring"),c(Jh,"class","docstring"),c(yt,"class","docstring"),c(xt,"class","docstring"),c($t,"class","docstring"),c(wt,"class","docstring"),c(Xh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features"),c(Zh,"href","/docs/datasets/package_reference/task_templates"),c(ba,"class","docstring"),c(Dt,"class","docstring"),c(b,"class","docstring"),c(Qh,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"),c(ef,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"),c(qe,"class","docstring"),c(tf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"),c(af,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDataset"),c(S,"class","docstring"),c(sf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),c(nf,"href","/docs/datasets/pr_4168/en/package_reference/loading_methods#datasets.load_dataset"),c(rf,"href","/docs/datasets/pr_4168/en/package_reference/loading_methods#datasets.load_dataset"),c(ie,"class","docstring"),c(of,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),c(lf,"href","/docs/datasets/pr_4168/en/package_reference/loading_methods#datasets.load_dataset"),c(df,"href","/docs/datasets/pr_4168/en/package_reference/loading_methods#datasets.load_dataset"),c(le,"class","docstring"),c(cf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),c(pf,"href","/docs/datasets/pr_4168/en/package_reference/loading_methods#datasets.load_dataset"),c(mf,"href","/docs/datasets/pr_4168/en/package_reference/loading_methods#datasets.load_dataset"),c(de,"class","docstring"),c(Tn,"id","datasets.DatasetDict"),c(Tn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tn,"href","#datasets.DatasetDict"),c(xs,"class","relative group"),c(Pn,"class","docstring"),c(An,"class","docstring"),c(Ln,"class","docstring"),c(qn,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.__len__"),c(Fn,"class","docstring"),c(On,"class","docstring"),c(Sn,"class","docstring"),c(va,"class","docstring"),c(Cn,"class","docstring"),c(zn,"class","docstring"),c(Vn,"class","docstring"),c(ya,"class","docstring"),c(Et,"class","docstring"),c(jt,"class","docstring"),c(xa,"class","docstring"),c(Un,"class","docstring"),c(ff,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.with_transform"),c(uf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetDict.set_format"),c(kt,"class","docstring"),c(gf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.set_format"),c(_f,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.reset_format"),c(It,"class","docstring"),c(Mn,"class","docstring"),c(bf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.map"),c($a,"class","docstring"),c(Rn,"class","docstring"),c(vf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.map"),c(Tt,"class","docstring"),c(yf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset.map"),c(Nt,"class","docstring"),c(Bn,"class","docstring"),c(Hn,"class","docstring"),c(we,"class","docstring"),c(xf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(Gn,"class","docstring"),c($f,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(Wn,"class","docstring"),c(Kn,"class","docstring"),c(Yn,"class","docstring"),c(Jn,"class","docstring"),c(Xn,"class","docstring"),c(wf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features"),c(Df,"href","/docs/datasets/package_reference/task_templates"),c(wa,"class","docstring"),c($,"class","docstring"),c(Ef,"id","package_reference_features"),c(Zn,"id","datasets.IterableDataset"),c(Zn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zn,"href","#datasets.IterableDataset"),c(Ls,"class","relative group"),c(jf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDataset"),c(er,"class","docstring"),c(tr,"class","docstring"),c(ar,"class","docstring"),c(kf,"class","docstring"),c(Pt,"class","docstring"),c(sr,"class","docstring"),c(nr,"class","docstring"),c(If,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDataset.skip"),c(Tf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDataset.take"),c(De,"class","docstring"),c(rr,"class","docstring"),c(or,"class","docstring"),c(Pf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetInfo"),c(ir,"class","docstring"),c(Lf,"href","/docs/datasets/pr_4168/en/package_reference/builder_classes#datasets.NamedSplit"),c(lr,"class","docstring"),c(Ff,"class","docstring"),c(qf,"class","docstring"),c(Of,"class","docstring"),c(Sf,"class","docstring"),c(Cf,"class","docstring"),c(zf,"class","docstring"),c(Vf,"class","docstring"),c(Uf,"class","docstring"),c(Mf,"class","docstring"),c(Rf,"class","docstring"),c(Bf,"class","docstring"),c(Hf,"class","docstring"),c(Gf,"class","docstring"),c(E,"class","docstring"),c(dr,"id","datasets.IterableDatasetDict"),c(dr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dr,"href","#datasets.IterableDatasetDict"),c(Os,"class","relative group"),c(At,"class","docstring"),c(pr,"class","docstring"),c(Wf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDataset.skip"),c(Kf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.IterableDataset.take"),c(Ee,"class","docstring"),c(mr,"class","docstring"),c(hr,"class","docstring"),c(fr,"class","docstring"),c(ur,"class","docstring"),c(gr,"class","docstring"),c(_r,"class","docstring"),c(P,"class","docstring"),c(br,"id","datasets.Features"),c(br,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(br,"href","#datasets.Features"),c(zs,"class","relative group"),c(Jf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Value"),c(Xf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.ClassLabel"),c(Zf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Sequence"),c(Qf,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Sequence"),c(eu,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Array2D"),c(tu,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Array3D"),c(au,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Array4D"),c(su,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Array5D"),c(nu,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Audio"),c(ru,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Image"),c(ou,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Translation"),c(iu,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),c(xr,"class","docstring"),c($r,"class","docstring"),c(wr,"class","docstring"),c(Dr,"class","docstring"),c(Er,"class","docstring"),c(jr,"class","docstring"),c(Ea,"class","docstring"),c(kr,"class","docstring"),c(lu,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.DatasetInfo"),c(du,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),c(cu,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Value"),c(ae,"class","docstring"),c(je,"class","docstring"),c(T,"class","docstring"),c(Vs,"class","docstring"),c(Ir,"class","docstring"),c(Tr,"class","docstring"),c(G,"class","docstring"),c(ia,"class","docstring"),c(Nr,"class","docstring"),c(z,"class","docstring"),c(Pr,"class","docstring"),c(V,"class","docstring"),c(mm,"class","docstring"),c(fm,"class","docstring"),c(gm,"class","docstring"),c(bm,"class","docstring"),c(ja,"class","docstring"),c(Ar,"class","docstring"),c(Lr,"class","docstring"),c(Fr,"class","docstring"),c(qr,"class","docstring"),c(A,"class","docstring"),c(ka,"class","docstring"),c(Or,"class","docstring"),c(Sr,"class","docstring"),c(Cr,"class","docstring"),c(zr,"class","docstring"),c(L,"class","docstring"),c(Vr,"id","datasets.MetricInfo"),c(Vr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vr,"href","#datasets.MetricInfo"),c(Ws,"class","relative group"),c(Ur,"class","docstring"),c(Mr,"class","docstring"),c(W,"class","docstring"),c(Rr,"id","datasets.Metric"),c(Rr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rr,"href","#datasets.Metric"),c(Ks,"class","relative group"),c(_u,"href","/docs/datasets/pr_4168/en/package_reference/main_classes#datasets.Dataset"),c(Br,"class","docstring"),c(Hr,"class","docstring"),c(Ta,"class","docstring"),c(Gr,"class","docstring"),c(K,"class","docstring"),c(Wr,"id","datasets.filesystems.S3FileSystem"),c(Wr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wr,"href","#datasets.filesystems.S3FileSystem"),c(Ys,"class","relative group"),c(eh,"href","https://s3fs.readthedocs.io/en/latest/api.html"),c(eh,"rel","nofollow"),c(th,"href","https://filesystem-spec.readthedocs.io/en/latest/?badge=latest"),c(th,"rel","nofollow"),c(Yr,"id","parameters"),c(Yr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yr,"href","#parameters"),c(Kr,"class","relative group"),c(k,"class","docstring"),c(Zs,"class","docstring"),c(en,"class","docstring"),c(Jr,"id","datasets.fingerprint.Hasher"),c(Jr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jr,"href","#datasets.fingerprint.Hasher"),c(tn,"class","relative group"),c(an,"class","docstring")},m(i,y){e(document.head,F),x(i,rn,y),x(i,Y,y),e(Y,Be),e(Be,ss),h(Pe,ss,null),e(Y,ni),e(Y,ns),e(ns,ha),x(i,on,y),x(i,Ae,y),e(Ae,me),e(me,J),h(fa,J,null),e(Ae,fh),e(Ae,ln),e(ln,P4),x(i,rw,y),x(i,H,y),h(ri,H,null),e(H,A4),e(H,bg),e(bg,L4),e(H,F4),e(H,uh),e(uh,vg),e(vg,q4),e(uh,O4),e(H,S4),e(H,yg),e(yg,C4),e(H,z4),e(H,He),h(oi,He,null),e(He,V4),e(He,ii),e(ii,U4),e(ii,xg),e(xg,M4),e(ii,R4),e(He,B4),e(He,$g),e($g,H4),e(He,G4),e(He,wg),e(wg,W4),e(H,K4),e(H,dn),h(li,dn,null),e(dn,Y4),e(dn,rs),e(rs,J4),e(rs,Dg),e(Dg,X4),e(rs,Z4),e(rs,Eg),e(Eg,Q4),e(rs,e7),x(i,ow,y),x(i,os,y),e(os,cn),e(cn,jg),h(di,jg,null),e(os,t7),e(os,kg),e(kg,a7),x(i,iw,y),x(i,pn,y),e(pn,s7),e(pn,gh),e(gh,n7),e(pn,r7),x(i,lw,y),x(i,b,y),h(ci,b,null),e(b,o7),e(b,Ig),e(Ig,i7),e(b,l7),e(b,he),h(pi,he,null),e(he,d7),e(he,Tg),e(Tg,c7),e(he,p7),e(he,Ng),e(Ng,Pg),e(Pg,m7),e(he,h7),e(he,Ag),e(Ag,f7),e(he,u7),h(mi,he,null),e(b,g7),e(b,fe),h(hi,fe,null),e(fe,_7),e(fe,Lg),e(Lg,b7),e(fe,v7),e(fe,Fg),e(Fg,qg),e(qg,y7),e(fe,x7),e(fe,Og),e(Og,$7),e(fe,w7),h(fi,fe,null),e(b,D7),e(b,mn),h(ui,mn,null),e(mn,E7),e(mn,Sg),e(Sg,j7),e(b,k7),e(b,hn),h(gi,hn,null),e(hn,I7),e(hn,Cg),e(Cg,T7),e(b,N7),e(b,X),h(_i,X,null),e(X,P7),e(X,Kt),e(Kt,A7),e(Kt,zg),e(zg,L7),e(Kt,F7),e(Kt,Vg),e(Vg,q7),e(Kt,O7),e(Kt,_h),e(_h,S7),e(Kt,C7),e(X,z7),e(X,bi),e(bi,V7),e(bi,Ug),e(Ug,U7),e(bi,M7),e(X,R7),e(X,vi),e(vi,B7),e(vi,Mg),e(Mg,H7),e(vi,G7),e(X,W7),e(X,Rg),e(Rg,K7),e(X,Y7),h(yi,X,null),e(b,J7),e(b,fn),h(xi,fn,null),e(fn,X7),e(fn,Yt),e(Yt,Z7),e(Yt,Bg),e(Bg,Q7),e(Yt,e6),e(Yt,Hg),e(Hg,t6),e(Yt,a6),e(Yt,bh),e(bh,s6),e(Yt,n6),e(b,r6),e(b,Ge),h($i,Ge,null),e(Ge,o6),e(Ge,Gg),e(Gg,i6),e(Ge,l6),e(Ge,Wg),e(Wg,d6),e(Ge,c6),h(wi,Ge,null),e(b,p6),e(b,We),h(Di,We,null),e(We,m6),e(We,Kg),e(Kg,h6),e(We,f6),e(We,Yg),e(Yg,u6),e(We,g6),h(Ei,We,null),e(b,_6),e(b,Ke),h(ji,Ke,null),e(Ke,b6),e(Ke,Jg),e(Jg,v6),e(Ke,y6),e(Ke,Xg),e(Xg,x6),e(Ke,$6),h(ki,Ke,null),e(b,w6),e(b,Ye),h(Ii,Ye,null),e(Ye,D6),e(Ye,Ti),e(Ti,E6),e(Ti,un),e(un,j6),e(un,Zg),e(Zg,k6),e(un,I6),e(Ti,T6),e(Ye,N6),e(Ye,Qg),e(Qg,P6),e(Ye,A6),h(Ni,Ye,null),e(b,L6),e(b,Je),h(Pi,Je,null),e(Je,F6),e(Je,e_),e(e_,q6),e(Je,O6),e(Je,t_),e(t_,S6),e(Je,C6),h(Ai,Je,null),e(b,z6),e(b,Xe),h(Li,Xe,null),e(Xe,V6),e(Xe,a_),e(a_,U6),e(Xe,M6),e(Xe,s_),e(s_,R6),e(Xe,B6),h(Fi,Xe,null),e(b,H6),e(b,ue),h(qi,ue,null),e(ue,G6),e(ue,n_),e(n_,W6),e(ue,K6),e(ue,r_),e(r_,Y6),e(ue,J6),e(ue,o_),e(o_,X6),e(ue,Z6),h(Oi,ue,null),e(b,Q6),e(b,Ze),h(Si,Ze,null),e(Ze,e8),e(Ze,i_),e(i_,t8),e(Ze,a8),e(Ze,l_),e(l_,s8),e(Ze,n8),h(Ci,Ze,null),e(b,r8),e(b,Qe),h(zi,Qe,null),e(Qe,o8),e(Qe,d_),e(d_,i8),e(Qe,l8),e(Qe,c_),e(c_,d8),e(Qe,c8),h(Vi,Qe,null),e(b,p8),e(b,et),h(Ui,et,null),e(et,m8),e(et,p_),e(p_,h8),e(et,f8),e(et,m_),e(m_,u8),e(et,g8),h(Mi,et,null),e(b,_8),e(b,ge),h(Ri,ge,null),e(ge,b8),e(ge,h_),e(h_,v8),e(ge,y8),e(ge,is),e(is,x8),e(is,vh),e(vh,$8),e(is,w8),e(is,f_),e(f_,D8),e(is,E8),e(ge,j8),e(ge,u_),e(u_,k8),e(ge,I8),h(Bi,ge,null),e(b,T8),e(b,tt),h(Hi,tt,null),e(tt,N8),e(tt,g_),e(g_,P8),e(tt,A8),e(tt,__),e(__,L8),e(tt,F8),h(Gi,tt,null),e(b,q8),e(b,at),h(Wi,at,null),e(at,O8),e(at,b_),e(b_,S8),e(at,C8),e(at,v_),e(v_,z8),e(at,V8),h(Ki,at,null),e(b,U8),e(b,st),h(Yi,st,null),e(st,M8),e(st,Ji),e(Ji,R8),e(Ji,y_),e(y_,B8),e(Ji,H8),e(st,G8),e(st,x_),e(x_,W8),e(st,K8),h(Xi,st,null),e(b,Y8),e(b,nt),h(Zi,nt,null),e(nt,J8),e(nt,$_),e($_,X8),e(nt,Z8),e(nt,w_),e(w_,Q8),e(nt,eE),h(Qi,nt,null),e(b,tE),e(b,ua),h(el,ua,null),e(ua,aE),e(ua,D_),e(D_,sE),e(ua,nE),e(ua,tl),e(tl,rE),e(tl,yh),e(yh,oE),e(tl,iE),e(b,lE),e(b,gn),h(al,gn,null),e(gn,dE),e(gn,ls),e(ls,cE),e(ls,E_),e(E_,pE),e(ls,mE),e(ls,j_),e(j_,hE),e(ls,fE),e(b,uE),e(b,Z),h(sl,Z,null),e(Z,gE),e(Z,Le),e(Le,_E),e(Le,k_),e(k_,bE),e(Le,vE),e(Le,I_),e(I_,yE),e(Le,xE),e(Le,T_),e(T_,$E),e(Le,wE),e(Le,xh),e(xh,DE),e(Le,EE),e(Z,jE),e(Z,Fe),e(Fe,kE),e(Fe,N_),e(N_,IE),e(Fe,TE),e(Fe,P_),e(P_,NE),e(Fe,PE),e(Fe,A_),e(A_,AE),e(Fe,LE),e(Fe,L_),e(L_,FE),e(Fe,qE),e(Z,OE),e(Z,F_),e(F_,SE),e(Z,CE),e(Z,q_),e(q_,zE),e(Z,VE),h(nl,Z,null),e(b,UE),e(b,rt),h(rl,rt,null),e(rt,ME),e(rt,ot),e(ot,RE),e(ot,O_),e(O_,BE),e(ot,HE),e(ot,S_),e(S_,GE),e(ot,WE),e(ot,$h),e($h,KE),e(ot,YE),e(ot,wh),e(wh,JE),e(rt,XE),e(rt,C_),e(C_,ZE),e(rt,QE),h(ol,rt,null),e(b,ej),e(b,_e),h(il,_e,null),e(_e,tj),e(_e,ll),e(ll,aj),e(ll,z_),e(z_,sj),e(ll,nj),e(_e,rj),e(_e,Dh),e(Dh,oj),e(Dh,V_),e(V_,ij),e(_e,lj),e(_e,U_),e(U_,dj),e(_e,cj),h(dl,_e,null),e(b,pj),e(b,Q),h(cl,Q,null),e(Q,mj),e(Q,Jt),e(Jt,hj),e(Jt,M_),e(M_,fj),e(Jt,uj),e(Jt,R_),e(R_,gj),e(Jt,_j),e(Jt,B_),e(B_,bj),e(Jt,vj),e(Q,yj),e(Q,pl),e(pl,xj),e(pl,Eh),e(Eh,$j),e(pl,wj),e(Q,Dj),e(Q,ds),e(ds,Ej),e(ds,jh),e(jh,jj),e(ds,kj),e(ds,H_),e(H_,Ij),e(ds,Tj),e(Q,Nj),e(Q,G_),e(G_,Pj),e(Q,Aj),h(ml,Q,null),e(b,Lj),e(b,ee),h(hl,ee,null),e(ee,Fj),e(ee,cs),e(cs,qj),e(cs,W_),e(W_,Oj),e(cs,Sj),e(cs,K_),e(K_,Cj),e(cs,zj),e(ee,Vj),e(ee,ps),e(ps,Uj),e(ps,kh),e(kh,Mj),e(ps,Rj),e(ps,Ih),e(Ih,Bj),e(ps,Hj),e(ee,Gj),e(ee,ms),e(ms,Wj),e(ms,Th),e(Th,Kj),e(ms,Yj),e(ms,Y_),e(Y_,Jj),e(ms,Xj),e(ee,Zj),e(ee,J_),e(J_,Qj),e(ee,e3),h(fl,ee,null),e(b,t3),e(b,_n),h(ul,_n,null),e(_n,a3),e(_n,X_),e(X_,s3),e(b,n3),e(b,be),h(gl,be,null),e(be,r3),e(be,Z_),e(Z_,o3),e(be,i3),e(be,Q_),e(Q_,l3),e(be,d3),e(be,e1),e(e1,c3),e(be,p3),h(_l,be,null),e(b,m3),e(b,te),h(bl,te,null),e(te,h3),e(te,t1),e(t1,f3),e(te,u3),e(te,vl),e(vl,g3),e(vl,a1),e(a1,_3),e(vl,b3),e(te,v3),e(te,hs),e(hs,s1),e(s1,y3),e(hs,x3),e(hs,n1),e(n1,$3),e(hs,w3),e(hs,oe),e(oe,D3),e(oe,r1),e(r1,E3),e(oe,j3),e(oe,o1),e(o1,k3),e(oe,I3),e(oe,i1),e(i1,T3),e(oe,N3),e(oe,l1),e(l1,P3),e(oe,A3),e(oe,d1),e(d1,L3),e(oe,F3),e(te,q3),e(te,c1),e(c1,O3),e(te,S3),h(yl,te,null),e(b,C3),e(b,it),h(xl,it,null),e(it,z3),e(it,p1),e(p1,V3),e(it,U3),e(it,m1),e(m1,M3),e(it,R3),h($l,it,null),e(b,B3),e(b,lt),h(wl,lt,null),e(lt,H3),e(lt,h1),e(h1,G3),e(lt,W3),e(lt,f1),e(f1,K3),e(lt,Y3),h(Dl,lt,null),e(b,J3),e(b,ve),h(El,ve,null),e(ve,X3),e(ve,u1),e(u1,Z3),e(ve,Q3),e(ve,g1),e(g1,ek),e(ve,tk),e(ve,_1),e(_1,ak),e(ve,sk),h(jl,ve,null),e(b,nk),e(b,ye),h(kl,ye,null),e(ye,rk),e(ye,b1),e(b1,ok),e(ye,ik),e(ye,v1),e(v1,lk),e(ye,dk),e(ye,y1),e(y1,ck),e(ye,pk),h(Il,ye,null),e(b,mk),e(b,xe),h(Tl,xe,null),e(xe,hk),e(xe,O),e(O,fk),e(O,x1),e(x1,uk),e(O,gk),e(O,$1),e($1,_k),e(O,bk),e(O,w1),e(w1,vk),e(O,yk),e(O,D1),e(D1,xk),e(O,$k),e(O,E1),e(E1,wk),e(O,Dk),e(O,j1),e(j1,Ek),e(O,jk),e(O,k1),e(k1,kk),e(O,Ik),e(xe,Tk),e(xe,Nl),e(Nl,Nk),e(Nl,I1),e(I1,Pk),e(Nl,Ak),e(xe,Lk),e(xe,T1),e(T1,Fk),e(xe,qk),h(Pl,xe,null),e(b,Ok),e(b,M),h(Al,M,null),e(M,Sk),e(M,fs),e(fs,Ck),e(fs,N1),e(N1,zk),e(fs,Vk),e(fs,P1),e(P1,Uk),e(fs,Mk),e(M,Rk),e(M,A1),e(A1,Bk),e(M,Hk),e(M,Ll),e(Ll,Gk),e(Ll,L1),e(L1,Wk),e(Ll,Kk),e(M,Yk),e(M,F1),e(F1,Jk),e(M,Xk),e(M,q1),e(q1,Zk),e(M,Qk),h(Fl,M,null),e(b,e5),e(b,dt),h(ql,dt,null),e(dt,t5),e(dt,O1),e(O1,a5),e(dt,s5),e(dt,S1),e(S1,n5),e(dt,r5),h(Ol,dt,null),e(b,o5),e(b,ct),h(Sl,ct,null),e(ct,i5),e(ct,C1),e(C1,l5),e(ct,d5),e(ct,z1),e(z1,c5),e(ct,p5),h(Cl,ct,null),e(b,m5),e(b,pt),h(zl,pt,null),e(pt,h5),e(pt,us),e(us,f5),e(us,Nh),e(Nh,u5),e(us,g5),e(us,V1),e(V1,_5),e(us,b5),e(pt,v5),e(pt,U1),e(U1,y5),e(pt,x5),h(Vl,pt,null),e(b,$5),e(b,mt),h(Ul,mt,null),e(mt,w5),e(mt,Xt),e(Xt,D5),e(Xt,M1),e(M1,E5),e(Xt,j5),e(Xt,Ph),e(Ph,k5),e(Xt,I5),e(Xt,R1),e(R1,T5),e(Xt,N5),e(mt,P5),e(mt,B1),e(B1,A5),e(mt,L5),h(Ml,mt,null),e(b,F5),e(b,bn),h(Rl,bn,null),e(bn,q5),e(bn,H1),e(H1,O5),e(b,S5),e(b,ht),h(Bl,ht,null),e(ht,C5),e(ht,G1),e(G1,z5),e(ht,V5),e(ht,W1),e(W1,U5),e(ht,M5),h(Hl,ht,null),e(b,R5),e(b,ft),h(Gl,ft,null),e(ft,B5),e(ft,Wl),e(Wl,H5),e(Wl,K1),e(K1,G5),e(Wl,W5),e(ft,K5),e(ft,Y1),e(Y1,Y5),e(ft,J5),h(Kl,ft,null),e(b,X5),e(b,ut),h(Yl,ut,null),e(ut,Z5),e(ut,J1),e(J1,Q5),e(ut,eI),e(ut,X1),e(X1,tI),e(ut,aI),h(Jl,ut,null),e(b,sI),e(b,gt),h(Xl,gt,null),e(gt,nI),e(gt,Z1),e(Z1,rI),e(gt,oI),e(gt,Q1),e(Q1,iI),e(gt,lI),h(Zl,gt,null),e(b,dI),e(b,_t),h(Ql,_t,null),e(_t,cI),e(_t,eb),e(eb,pI),e(_t,mI),e(_t,tb),e(tb,hI),e(_t,fI),h(ed,_t,null),e(b,uI),e(b,$e),h(td,$e,null),e($e,gI),e($e,gs),e(gs,_I),e(gs,ab),e(ab,bI),e(gs,vI),e(gs,sb),e(sb,yI),e(gs,xI),e($e,$I),e($e,nb),e(nb,Ah),e(Ah,wI),e(Ah,ad),e(ad,DI),e($e,EI),e($e,rb),e(rb,jI),e($e,kI),h(sd,$e,null),e(b,II),e(b,ga),h(nd,ga,null),e(ga,TI),e(ga,Zt),e(Zt,NI),e(Zt,ob),e(ob,PI),e(Zt,AI),e(Zt,ib),e(ib,LI),e(Zt,FI),e(Zt,lb),e(lb,qI),e(Zt,OI),e(ga,SI),e(ga,db),e(db,Lh),e(Lh,CI),e(Lh,rd),e(rd,zI),e(b,VI),e(b,vn),h(od,vn,null),e(vn,UI),e(vn,cb),e(cb,MI),e(b,RI),e(b,_a),h(id,_a,null),e(_a,BI),e(_a,pb),e(pb,HI),e(_a,GI),e(_a,ld),e(ld,WI),e(ld,mb),e(mb,KI),e(ld,YI),e(b,JI),e(b,bt),h(dd,bt,null),e(bt,XI),e(bt,hb),e(hb,ZI),e(bt,QI),e(bt,fb),e(fb,e9),e(bt,t9),h(cd,bt,null),e(b,a9),e(b,vt),h(pd,vt,null),e(vt,s9),e(vt,ub),e(ub,n9),e(vt,r9),e(vt,gb),e(gb,o9),e(vt,i9),h(md,vt,null),e(b,l9),e(b,yn),h(hd,yn,null),e(yn,d9),e(yn,_b),e(_b,c9),e(b,p9),e(b,xn),h(fd,xn,null),e(xn,m9),e(xn,bb),e(bb,h9),e(b,f9),e(b,$n),h(ud,$n,null),e($n,u9),e($n,vb),e(vb,g9),e(b,_9),e(b,wn),h(gd,wn,null),e(wn,b9),e(wn,yb),e(yb,v9),e(b,y9),e(b,Dn),h(_d,Dn,null),e(Dn,x9),e(Dn,xb),e(xb,$9),e(b,w9),e(b,En),h(bd,En,null),e(En,D9),e(En,$b),e($b,E9),e(b,j9),e(b,jn),h(vd,jn,null),e(jn,k9),e(jn,wb),e(wb,I9),e(b,T9),e(b,kn),h(yd,kn,null),e(kn,N9),e(kn,Fh),e(Fh,qh),e(qh,P9),e(Fh,A9),e(b,L9),e(b,In),h(xd,In,null),e(In,F9),e(In,Oh),e(Oh,Sh),e(Sh,q9),e(Oh,O9),e(b,S9),e(b,Ch),h($d,Ch,null),e(b,C9),e(b,zh),h(wd,zh,null),e(b,z9),e(b,Vh),h(Dd,Vh,null),e(b,V9),e(b,Uh),h(Ed,Uh,null),e(b,U9),e(b,Mh),h(jd,Mh,null),e(b,M9),e(b,Rh),h(kd,Rh,null),e(b,R9),e(b,Bh),h(Id,Bh,null),e(b,B9),e(b,Hh),h(Td,Hh,null),e(b,H9),e(b,Gh),h(Nd,Gh,null),e(b,G9),e(b,Wh),h(Pd,Wh,null),e(b,W9),e(b,Kh),h(Ad,Kh,null),e(b,K9),e(b,Yh),h(Ld,Yh,null),e(b,Y9),e(b,Jh),h(Fd,Jh,null),e(b,J9),e(b,yt),h(qd,yt,null),e(yt,X9),e(yt,Db),e(Db,Z9),e(yt,Q9),e(yt,Eb),e(Eb,eT),e(yt,tT),h(Od,yt,null),e(b,aT),e(b,xt),h(Sd,xt,null),e(xt,sT),e(xt,jb),e(jb,nT),e(xt,rT),e(xt,kb),e(kb,oT),e(xt,iT),h(Cd,xt,null),e(b,lT),e(b,$t),h(zd,$t,null),e($t,dT),e($t,Ib),e(Ib,cT),e($t,pT),e($t,Tb),e(Tb,mT),e($t,hT),h(Vd,$t,null),e(b,fT),e(b,wt),h(Ud,wt,null),e(wt,uT),e(wt,Nb),e(Nb,gT),e(wt,_T),e(wt,Pb),e(Pb,bT),e(wt,vT),h(Md,wt,null),e(b,yT),e(b,ba),h(Rd,ba,null),e(ba,xT),e(ba,_s),e(_s,$T),e(_s,Xh),e(Xh,wT),e(_s,DT),e(_s,Zh),e(Zh,ET),e(_s,jT),e(ba,kT),e(ba,bs),e(bs,IT),e(bs,Ab),e(Ab,TT),e(bs,NT),e(bs,Lb),e(Lb,PT),e(bs,AT),e(b,LT),e(b,Dt),h(Bd,Dt,null),e(Dt,FT),e(Dt,Hd),e(Hd,qT),e(Hd,Fb),e(Fb,OT),e(Hd,ST),e(Dt,CT),e(Dt,qb),e(qb,zT),e(Dt,VT),h(Gd,Dt,null),x(i,dw,y),x(i,qe,y),h(Wd,qe,null),e(qe,UT),e(qe,vs),e(vs,MT),e(vs,Qh),e(Qh,RT),e(vs,BT),e(vs,ef),e(ef,HT),e(vs,GT),e(qe,WT),e(qe,Ob),e(Ob,KT),e(qe,YT),h(Kd,qe,null),x(i,cw,y),x(i,S,y),h(Yd,S,null),e(S,JT),e(S,Sb),e(Sb,XT),e(S,ZT),e(S,ys),e(ys,QT),e(ys,tf),e(tf,eN),e(ys,tN),e(ys,af),e(af,aN),e(ys,sN),e(S,nN),e(S,Oe),e(Oe,rN),e(Oe,Cb),e(Cb,oN),e(Oe,iN),e(Oe,zb),e(zb,lN),e(Oe,dN),e(Oe,Vb),e(Vb,cN),e(Oe,pN),e(Oe,Ub),e(Ub,mN),e(Oe,hN),e(S,fN),e(S,Mb),e(Mb,uN),e(S,gN),e(S,Rb),e(Rb,_N),e(S,bN),h(Jd,S,null),x(i,pw,y),x(i,ie,y),h(Xd,ie,null),e(ie,vN),e(ie,Bb),e(Bb,yN),e(ie,xN),e(ie,Hb),e(Hb,$N),e(ie,wN),e(ie,Gb),e(Gb,DN),e(ie,EN),e(ie,Se),e(Se,Wb),e(Wb,jN),e(Se,kN),e(Se,Kb),e(Kb,IN),e(Se,TN),e(Se,Yb),e(Yb,NN),e(Se,PN),e(Se,Zd),e(Zd,AN),e(Zd,sf),e(sf,LN),e(Zd,FN),e(Se,qN),e(Se,Qt),e(Qt,ON),e(Qt,nf),e(nf,SN),e(Qt,CN),e(Qt,Jb),e(Jb,zN),e(Qt,VN),e(Qt,rf),e(rf,UN),e(Qt,MN),x(i,mw,y),x(i,le,y),h(Qd,le,null),e(le,RN),e(le,Xb),e(Xb,BN),e(le,HN),e(le,Zb),e(Zb,GN),e(le,WN),e(le,Qb),e(Qb,KN),e(le,YN),e(le,Ce),e(Ce,ev),e(ev,JN),e(Ce,XN),e(Ce,tv),e(tv,ZN),e(Ce,QN),e(Ce,av),e(av,eP),e(Ce,tP),e(Ce,ec),e(ec,aP),e(ec,of),e(of,sP),e(ec,nP),e(Ce,rP),e(Ce,ea),e(ea,oP),e(ea,lf),e(lf,iP),e(ea,lP),e(ea,sv),e(sv,dP),e(ea,cP),e(ea,df),e(df,pP),e(ea,mP),x(i,hw,y),x(i,de,y),h(tc,de,null),e(de,hP),e(de,nv),e(nv,fP),e(de,uP),e(de,rv),e(rv,gP),e(de,_P),e(de,ov),e(ov,bP),e(de,vP),e(de,ze),e(ze,iv),e(iv,yP),e(ze,xP),e(ze,lv),e(lv,$P),e(ze,wP),e(ze,dv),e(dv,DP),e(ze,EP),e(ze,ac),e(ac,jP),e(ac,cf),e(cf,kP),e(ac,IP),e(ze,TP),e(ze,ta),e(ta,NP),e(ta,pf),e(pf,PP),e(ta,AP),e(ta,cv),e(cv,LP),e(ta,FP),e(ta,mf),e(mf,qP),e(ta,OP),x(i,fw,y),x(i,xs,y),e(xs,Tn),e(Tn,pv),h(sc,pv,null),e(xs,SP),e(xs,mv),e(mv,CP),x(i,uw,y),x(i,Nn,y),e(Nn,zP),e(Nn,hv),e(hv,VP),e(Nn,UP),x(i,gw,y),x(i,$,y),h(nc,$,null),e($,MP),e($,fv),e(fv,RP),e($,BP),e($,Pn),h(rc,Pn,null),e(Pn,HP),e(Pn,uv),e(uv,GP),e($,WP),e($,An),h(oc,An,null),e(An,KP),e(An,gv),e(gv,YP),e($,JP),e($,Ln),h(ic,Ln,null),e(Ln,XP),e(Ln,_v),e(_v,ZP),e($,QP),e($,Fn),h(lc,Fn,null),e(Fn,eA),e(Fn,dc),e(dc,tA),e(dc,qn),e(qn,aA),e(qn,bv),e(bv,sA),e(qn,nA),e(dc,rA),e($,oA),e($,On),h(cc,On,null),e(On,iA),e(On,vv),e(vv,lA),e($,dA),e($,Sn),h(pc,Sn,null),e(Sn,cA),e(Sn,yv),e(yv,pA),e($,mA),e($,va),h(mc,va,null),e(va,hA),e(va,xv),e(xv,fA),e(va,uA),e(va,$v),e($v,gA),e($,_A),e($,Cn),h(hc,Cn,null),e(Cn,bA),e(Cn,wv),e(wv,vA),e($,yA),e($,zn),h(fc,zn,null),e(zn,xA),e(zn,Dv),e(Dv,$A),e($,wA),e($,Vn),h(uc,Vn,null),e(Vn,DA),e(Vn,Ev),e(Ev,EA),e($,jA),e($,ya),h(gc,ya,null),e(ya,kA),e(ya,jv),e(jv,IA),e(ya,TA),e(ya,kv),e(kv,NA),e($,PA),e($,Et),h(_c,Et,null),e(Et,AA),e(Et,Iv),e(Iv,LA),e(Et,FA),e(Et,Tv),e(Tv,qA),e(Et,OA),e(Et,Nv),e(Nv,SA),e($,CA),e($,jt),h(bc,jt,null),e(jt,zA),e(jt,vc),e(vc,VA),e(vc,Pv),e(Pv,UA),e(vc,MA),e(jt,RA),e(jt,Ve),e(Ve,BA),e(Ve,Av),e(Av,HA),e(Ve,GA),e(Ve,Lv),e(Lv,WA),e(Ve,KA),e(Ve,Fv),e(Fv,YA),e(Ve,JA),e(Ve,qv),e(qv,XA),e(Ve,ZA),e(jt,QA),e(jt,Ov),e(Ov,eL),e($,tL),e($,xa),h(yc,xa,null),e(xa,aL),e(xa,xc),e(xc,sL),e(xc,Sv),e(Sv,nL),e(xc,rL),e(xa,oL),e(xa,hf),e(hf,iL),e(hf,Cv),e(Cv,lL),e($,dL),e($,Un),h($c,Un,null),e(Un,cL),e(Un,$s),e($s,pL),e($s,zv),e(zv,mL),e($s,hL),e($s,Vv),e(Vv,fL),e($s,uL),e($,gL),e($,kt),h(wc,kt,null),e(kt,_L),e(kt,aa),e(aa,bL),e(aa,Uv),e(Uv,vL),e(aa,yL),e(aa,Mv),e(Mv,xL),e(aa,$L),e(aa,Rv),e(Rv,wL),e(aa,DL),e(kt,EL),e(kt,Dc),e(Dc,jL),e(Dc,ff),e(ff,kL),e(Dc,IL),e(kt,TL),e(kt,ws),e(ws,NL),e(ws,uf),e(uf,PL),e(ws,AL),e(ws,Bv),e(Bv,LL),e(ws,FL),e($,qL),e($,It),h(Ec,It,null),e(It,OL),e(It,Ds),e(Ds,SL),e(Ds,Hv),e(Hv,CL),e(Ds,zL),e(Ds,Gv),e(Gv,VL),e(Ds,UL),e(It,ML),e(It,Es),e(Es,RL),e(Es,gf),e(gf,BL),e(Es,HL),e(Es,_f),e(_f,GL),e(Es,WL),e(It,KL),e(It,js),e(js,YL),e(js,Wv),e(Wv,JL),e(js,XL),e(js,Kv),e(Kv,ZL),e(js,QL),e($,eF),e($,Mn),h(jc,Mn,null),e(Mn,tF),e(Mn,Yv),e(Yv,aF),e($,sF),e($,$a),h(kc,$a,null),e($a,nF),e($a,Jv),e(Jv,rF),e($a,oF),e($a,sa),e(sa,iF),e(sa,bf),e(bf,lF),e(sa,dF),e(sa,Xv),e(Xv,cF),e(sa,pF),e(sa,Zv),e(Zv,mF),e(sa,hF),e($,fF),e($,Rn),h(Ic,Rn,null),e(Rn,uF),e(Rn,Qv),e(Qv,gF),e($,_F),e($,Tt),h(Tc,Tt,null),e(Tt,bF),e(Tt,ey),e(ey,vF),e(Tt,yF),e(Tt,ty),e(ty,xF),e(Tt,$F),e(Tt,ks),e(ks,wF),e(ks,vf),e(vf,DF),e(ks,EF),e(ks,ay),e(ay,jF),e(ks,kF),e($,IF),e($,Nt),h(Nc,Nt,null),e(Nt,TF),e(Nt,sy),e(sy,NF),e(Nt,PF),e(Nt,Is),e(Is,AF),e(Is,yf),e(yf,LF),e(Is,FF),e(Is,ny),e(ny,qF),e(Is,OF),e(Nt,SF),e(Nt,Pc),e(Pc,ry),e(ry,CF),e(Pc,zF),e(Pc,oy),e(oy,VF),e($,UF),e($,Bn),h(Ac,Bn,null),e(Bn,MF),e(Bn,iy),e(iy,RF),e($,BF),e($,Hn),h(Lc,Hn,null),e(Hn,HF),e(Hn,Fc),e(Fc,GF),e(Fc,ly),e(ly,WF),e(Fc,KF),e($,YF),e($,we),h(qc,we,null),e(we,JF),e(we,Ts),e(Ts,XF),e(Ts,dy),e(dy,ZF),e(Ts,QF),e(Ts,cy),e(cy,eq),e(Ts,tq),e(we,aq),e(we,py),e(py,sq),e(we,nq),e(we,my),e(my,rq),e(we,oq),h(Oc,we,null),e($,iq),e($,Gn),h(Sc,Gn,null),e(Gn,lq),e(Gn,Ns),e(Ns,dq),e(Ns,xf),e(xf,cq),e(Ns,pq),e(Ns,hy),e(hy,mq),e(Ns,hq),e($,fq),e($,Wn),h(Cc,Wn,null),e(Wn,uq),e(Wn,na),e(na,gq),e(na,fy),e(fy,_q),e(na,bq),e(na,$f),e($f,vq),e(na,yq),e(na,uy),e(uy,xq),e(na,$q),e($,wq),e($,Kn),h(zc,Kn,null),e(Kn,Dq),e(Kn,gy),e(gy,Eq),e($,jq),e($,Yn),h(Vc,Yn,null),e(Yn,kq),e(Yn,_y),e(_y,Iq),e($,Tq),e($,Jn),h(Uc,Jn,null),e(Jn,Nq),e(Jn,by),e(by,Pq),e($,Aq),e($,Xn),h(Mc,Xn,null),e(Xn,Lq),e(Xn,vy),e(vy,Fq),e($,qq),e($,wa),h(Rc,wa,null),e(wa,Oq),e(wa,Ps),e(Ps,Sq),e(Ps,wf),e(wf,Cq),e(Ps,zq),e(Ps,Df),e(Df,Vq),e(Ps,Uq),e(wa,Mq),e(wa,As),e(As,Rq),e(As,yy),e(yy,Bq),e(As,Hq),e(As,xy),e(xy,Gq),e(As,Wq),x(i,_w,y),x(i,Ef,y),x(i,bw,y),x(i,Ls,y),e(Ls,Zn),e(Zn,$y),h(Bc,$y,null),e(Ls,Kq),e(Ls,wy),e(wy,Yq),x(i,vw,y),x(i,Qn,y),e(Qn,Jq),e(Qn,jf),e(jf,Xq),e(Qn,Zq),x(i,yw,y),x(i,E,y),h(Hc,E,null),e(E,Qq),e(E,Dy),e(Dy,eO),e(E,tO),e(E,er),h(Gc,er,null),e(er,aO),e(er,Ey),e(Ey,sO),e(E,nO),e(E,tr),h(Wc,tr,null),e(tr,rO),e(tr,jy),e(jy,oO),e(E,iO),e(E,ar),h(Kc,ar,null),e(ar,lO),e(ar,ky),e(ky,dO),e(E,cO),e(E,kf),h(Yc,kf,null),e(E,pO),e(E,Pt),h(Jc,Pt,null),e(Pt,mO),e(Pt,Iy),e(Iy,hO),e(Pt,fO),e(Pt,Xc),e(Xc,uO),e(Xc,Ty),e(Ty,gO),e(Xc,_O),e(Pt,bO),e(Pt,Fs),e(Fs,Ny),e(Ny,vO),e(Fs,yO),e(Fs,Py),e(Py,xO),e(Fs,$O),e(Fs,ce),e(ce,wO),e(ce,Ay),e(Ay,DO),e(ce,EO),e(ce,Ly),e(Ly,jO),e(ce,kO),e(ce,Fy),e(Fy,IO),e(ce,TO),e(ce,qy),e(qy,NO),e(ce,PO),e(ce,Oy),e(Oy,AO),e(ce,LO),e(E,FO),e(E,sr),h(Zc,sr,null),e(sr,qO),e(sr,Sy),e(Sy,OO),e(E,SO),e(E,nr),h(Qc,nr,null),e(nr,CO),e(nr,Cy),e(Cy,zO),e(E,VO),e(E,De),h(ep,De,null),e(De,UO),e(De,zy),e(zy,MO),e(De,RO),e(De,Vy),e(Vy,BO),e(De,HO),e(De,tp),e(tp,GO),e(tp,Uy),e(Uy,WO),e(tp,KO),e(De,YO),e(De,qs),e(qs,JO),e(qs,If),e(If,XO),e(qs,ZO),e(qs,Tf),e(Tf,QO),e(qs,eS),e(E,tS),e(E,rr),h(ap,rr,null),e(rr,aS),e(rr,sp),e(sp,sS),e(sp,My),e(My,nS),e(sp,rS),e(E,oS),e(E,or),h(np,or,null),e(or,iS),e(or,rp),e(rp,lS),e(rp,Ry),e(Ry,dS),e(rp,cS),e(E,pS),e(E,ir),h(op,ir,null),e(ir,mS),e(ir,Nf),e(Nf,Pf),e(Pf,hS),e(Nf,fS),e(E,uS),e(E,lr),h(ip,lr,null),e(lr,gS),e(lr,Af),e(Af,Lf),e(Lf,_S),e(Af,bS),e(E,vS),e(E,Ff),h(lp,Ff,null),e(E,yS),e(E,qf),h(dp,qf,null),e(E,xS),e(E,Of),h(cp,Of,null),e(E,$S),e(E,Sf),h(pp,Sf,null),e(E,wS),e(E,Cf),h(mp,Cf,null),e(E,DS),e(E,zf),h(hp,zf,null),e(E,ES),e(E,Vf),h(fp,Vf,null),e(E,jS),e(E,Uf),h(up,Uf,null),e(E,kS),e(E,Mf),h(gp,Mf,null),e(E,IS),e(E,Rf),h(_p,Rf,null),e(E,TS),e(E,Bf),h(bp,Bf,null),e(E,NS),e(E,Hf),h(vp,Hf,null),e(E,PS),e(E,Gf),h(yp,Gf,null),x(i,xw,y),x(i,Os,y),e(Os,dr),e(dr,By),h(xp,By,null),e(Os,AS),e(Os,Hy),e(Hy,LS),x(i,$w,y),x(i,cr,y),e(cr,FS),e(cr,Gy),e(Gy,qS),e(cr,OS),x(i,ww,y),x(i,P,y),h($p,P,null),e(P,SS),e(P,At),h(wp,At,null),e(At,CS),e(At,Wy),e(Wy,zS),e(At,VS),e(At,Dp),e(Dp,US),e(Dp,Ky),e(Ky,MS),e(Dp,RS),e(At,BS),e(At,Ss),e(Ss,Yy),e(Yy,HS),e(Ss,GS),e(Ss,Jy),e(Jy,WS),e(Ss,KS),e(Ss,pe),e(pe,YS),e(pe,Xy),e(Xy,JS),e(pe,XS),e(pe,Zy),e(Zy,ZS),e(pe,QS),e(pe,Qy),e(Qy,eC),e(pe,tC),e(pe,e2),e(e2,aC),e(pe,sC),e(pe,t2),e(t2,nC),e(pe,rC),e(P,oC),e(P,pr),h(Ep,pr,null),e(pr,iC),e(pr,a2),e(a2,lC),e(P,dC),e(P,Ee),h(jp,Ee,null),e(Ee,cC),e(Ee,s2),e(s2,pC),e(Ee,mC),e(Ee,n2),e(n2,hC),e(Ee,fC),e(Ee,kp),e(kp,uC),e(kp,r2),e(r2,gC),e(kp,_C),e(Ee,bC),e(Ee,Cs),e(Cs,vC),e(Cs,Wf),e(Wf,yC),e(Cs,xC),e(Cs,Kf),e(Kf,$C),e(Cs,wC),e(P,DC),e(P,mr),h(Ip,mr,null),e(mr,EC),e(mr,o2),e(o2,jC),e(P,kC),e(P,hr),h(Tp,hr,null),e(hr,IC),e(hr,i2),e(i2,TC),e(P,NC),e(P,fr),h(Np,fr,null),e(fr,PC),e(fr,l2),e(l2,AC),e(P,LC),e(P,ur),h(Pp,ur,null),e(ur,FC),e(ur,d2),e(d2,qC),e(P,OC),e(P,gr),h(Ap,gr,null),e(gr,SC),e(gr,c2),e(c2,CC),e(P,zC),e(P,_r),h(Lp,_r,null),e(_r,VC),e(_r,p2),e(p2,UC),x(i,Dw,y),x(i,zs,y),e(zs,br),e(br,m2),h(Fp,m2,null),e(zs,MC),e(zs,h2),e(h2,RC),x(i,Ew,y),x(i,T,y),h(qp,T,null),e(T,BC),e(T,f2),e(f2,HC),e(T,GC),e(T,Op),e(Op,WC),e(Op,u2),e(u2,KC),e(Op,YC),e(T,JC),e(T,Yf),e(Yf,g2),e(g2,XC),e(Yf,ZC),e(T,QC),e(T,C),e(C,_2),e(_2,Da),e(Da,ez),e(Da,Jf),e(Jf,tz),e(Da,az),e(Da,b2),e(b2,sz),e(Da,nz),e(Da,v2),e(v2,rz),e(C,oz),e(C,y2),e(y2,Sp),e(Sp,iz),e(Sp,Xf),e(Xf,lz),e(Sp,dz),e(C,cz),e(C,x2),e(x2,Cp),e(Cp,pz),e(Cp,$2),e($2,mz),e(Cp,hz),e(C,fz),e(C,zp),e(zp,Ue),e(Ue,uz),e(Ue,w2),e(w2,gz),e(Ue,_z),e(Ue,Zf),e(Zf,bz),e(Ue,vz),e(Ue,D2),e(D2,yz),e(Ue,xz),e(Ue,Qf),e(Qf,$z),e(Ue,wz),e(zp,Dz),h(vr,zp,null),e(C,Ez),e(C,E2),e(E2,Me),e(Me,jz),e(Me,eu),e(eu,kz),e(Me,Iz),e(Me,tu),e(tu,Tz),e(Me,Nz),e(Me,au),e(au,Pz),e(Me,Az),e(Me,su),e(su,Lz),e(Me,Fz),e(C,qz),e(C,j2),e(j2,Vp),e(Vp,Oz),e(Vp,nu),e(nu,Sz),e(Vp,Cz),e(C,zz),e(C,k2),e(k2,ra),e(ra,Vz),e(ra,ru),e(ru,Uz),e(ra,Mz),e(ra,I2),e(I2,Rz),e(ra,Bz),e(ra,T2),e(T2,Hz),e(ra,Gz),e(C,Wz),e(C,N2),e(N2,yr),e(yr,ou),e(ou,Kz),e(yr,Yz),e(yr,iu),e(iu,Jz),e(yr,Xz),e(T,Zz),e(T,xr),h(Up,xr,null),e(xr,Qz),e(xr,P2),e(P2,eV),e(T,tV),e(T,$r),h(Mp,$r,null),e($r,aV),e($r,A2),e(A2,sV),e(T,nV),e(T,wr),h(Rp,wr,null),e(wr,rV),e(wr,L2),e(L2,oV),e(T,iV),e(T,Dr),h(Bp,Dr,null),e(Dr,lV),e(Dr,F2),e(F2,dV),e(T,cV),e(T,Er),h(Hp,Er,null),e(Er,pV),e(Er,q2),e(q2,mV),e(T,hV),e(T,jr),h(Gp,jr,null),e(jr,fV),e(jr,O2),e(O2,uV),e(T,gV),e(T,Ea),h(Wp,Ea,null),e(Ea,_V),e(Ea,S2),e(S2,bV),e(Ea,vV),e(Ea,C2),e(C2,yV),e(T,xV),e(T,kr),h(Kp,kr,null),e(kr,$V),e(kr,z2),e(z2,wV),e(T,DV),e(T,ae),h(Yp,ae,null),e(ae,EV),e(ae,V2),e(V2,jV),e(ae,kV),e(ae,U2),e(U2,IV),e(ae,TV),e(ae,oa),e(oa,NV),e(oa,lu),e(lu,PV),e(oa,AV),e(oa,du),e(du,LV),e(oa,FV),e(oa,cu),e(cu,qV),e(oa,OV),e(ae,SV),e(ae,M2),e(M2,CV),e(ae,zV),h(Jp,ae,null),e(T,VV),e(T,je),h(Xp,je,null),e(je,UV),e(je,R2),e(R2,MV),e(je,RV),e(je,B2),e(B2,BV),e(je,HV),e(je,H2),e(H2,GV),e(je,WV),h(Zp,je,null),x(i,jw,y),x(i,Vs,y),h(Qp,Vs,null),e(Vs,KV),e(Vs,G2),e(G2,YV),x(i,kw,y),x(i,G,y),h(em,G,null),e(G,JV),e(G,W2),e(W2,XV),e(G,ZV),e(G,tm),e(tm,QV),e(tm,K2),e(K2,eU),e(tm,tU),e(G,aU),e(G,Us),e(Us,pu),e(pu,Y2),e(Y2,sU),e(pu,nU),e(Us,rU),e(Us,mu),e(mu,J2),e(J2,oU),e(mu,iU),e(Us,lU),e(Us,hu),e(hu,X2),e(X2,dU),e(hu,cU),e(G,pU),e(G,Ir),h(am,Ir,null),e(Ir,mU),e(Ir,Z2),e(Z2,hU),e(G,fU),e(G,Tr),h(sm,Tr,null),e(Tr,uU),e(Tr,Q2),e(Q2,gU),x(i,Iw,y),x(i,ia,y),h(nm,ia,null),e(ia,_U),e(ia,ex),e(ex,bU),e(ia,vU),e(ia,tx),e(tx,yU),x(i,Tw,y),x(i,z,y),h(rm,z,null),e(z,xU),e(z,fu),e(fu,ax),e(ax,$U),e(fu,wU),e(z,DU),e(z,sx),e(sx,EU),e(z,jU),e(z,om),e(om,kU),e(om,nx),e(nx,IU),e(om,TU),e(z,NU),e(z,rx),e(rx,PU),e(z,AU),h(im,z,null),e(z,LU),e(z,Nr),h(lm,Nr,null),e(Nr,FU),e(Nr,ox),e(ox,qU),x(i,Nw,y),x(i,V,y),h(dm,V,null),e(V,OU),e(V,uu),e(uu,ix),e(ix,SU),e(uu,CU),e(V,zU),e(V,lx),e(lx,VU),e(V,UU),e(V,dx),e(dx,MU),e(V,RU),e(V,cx),e(cx,BU),e(V,HU),h(cm,V,null),e(V,GU),e(V,Pr),h(pm,Pr,null),e(Pr,WU),e(Pr,px),e(px,KU),x(i,Pw,y),x(i,mm,y),h(hm,mm,null),x(i,Aw,y),x(i,fm,y),h(um,fm,null),x(i,Lw,y),x(i,gm,y),h(_m,gm,null),x(i,Fw,y),x(i,bm,y),h(vm,bm,null),x(i,qw,y),x(i,A,y),h(ym,A,null),e(A,YU),e(A,mx),e(mx,JU),e(A,XU),e(A,hx),e(hx,ZU),e(A,QU),e(A,Ms),e(Ms,fx),e(fx,xm),e(xm,eM),e(xm,ux),e(ux,tM),e(xm,aM),e(Ms,sM),e(Ms,Rs),e(Rs,$m),e($m,nM),e($m,gx),e(gx,rM),e($m,oM),e(Rs,iM),e(Rs,wm),e(wm,_x),e(_x,lM),e(wm,dM),e(wm,bx),e(bx,cM),e(Rs,pM),e(Rs,vx),e(vx,mM),e(Ms,hM),e(Ms,Bs),e(Bs,Dm),e(Dm,fM),e(Dm,yx),e(yx,uM),e(Dm,gM),e(Bs,_M),e(Bs,Hs),e(Hs,xx),e(xx,bM),e(Hs,vM),e(Hs,$x),e($x,yM),e(Hs,xM),e(Hs,wx),e(wx,$M),e(Bs,wM),e(Bs,Dx),e(Dx,DM),e(A,EM),e(A,ja),h(Em,ja,null),e(ja,jM),e(ja,Ex),e(Ex,kM),e(ja,IM),e(ja,la),e(la,jx),e(jx,TM),e(la,NM),e(la,kx),e(kx,PM),e(la,AM),e(la,Ix),e(Ix,LM),e(la,FM),e(la,Tx),e(Tx,qM),e(A,OM),e(A,Ar),h(jm,Ar,null),e(Ar,SM),e(Ar,Nx),e(Nx,CM),e(A,zM),e(A,Lr),h(km,Lr,null),e(Lr,VM),e(Lr,Px),e(Px,UM),e(A,MM),e(A,Fr),h(Im,Fr,null),e(Fr,RM),e(Fr,Ax),e(Ax,BM),e(A,HM),e(A,qr),h(Tm,qr,null),e(qr,GM),e(qr,Lx),e(Lx,WM),x(i,Ow,y),x(i,L,y),h(Nm,L,null),e(L,KM),e(L,Fx),e(Fx,YM),e(L,JM),e(L,qx),e(qx,XM),e(L,ZM),e(L,da),e(da,Ox),e(Ox,Pm),e(Pm,QM),e(Pm,Sx),e(Sx,eR),e(Pm,tR),e(da,aR),e(da,Gs),e(Gs,Am),e(Am,sR),e(Am,Cx),e(Cx,nR),e(Am,rR),e(Gs,oR),e(Gs,Lm),e(Lm,zx),e(zx,iR),e(Lm,lR),e(Lm,Vx),e(Vx,dR),e(Gs,cR),e(Gs,Ux),e(Ux,pR),e(da,mR),e(da,Mx),e(Mx,Fm),e(Fm,hR),e(Fm,Rx),e(Rx,fR),e(Fm,uR),e(da,gR),e(da,Bx),e(Bx,qm),e(qm,_R),e(qm,Hx),e(Hx,bR),e(qm,vR),e(L,yR),e(L,ka),h(Om,ka,null),e(ka,xR),e(ka,Gx),e(Gx,$R),e(ka,wR),e(ka,Re),e(Re,Wx),e(Wx,DR),e(Re,ER),e(Re,Kx),e(Kx,jR),e(Re,kR),e(Re,Yx),e(Yx,IR),e(Re,TR),e(Re,Jx),e(Jx,NR),e(Re,PR),e(Re,Xx),e(Xx,AR),e(L,LR),e(L,Or),h(Sm,Or,null),e(Or,FR),e(Or,Zx),e(Zx,qR),e(L,OR),e(L,Sr),h(Cm,Sr,null),e(Sr,SR),e(Sr,Qx),e(Qx,CR),e(L,zR),e(L,Cr),h(zm,Cr,null),e(Cr,VR),e(Cr,e$),e(e$,UR),e(L,MR),e(L,zr),h(Vm,zr,null),e(zr,RR),e(zr,t$),e(t$,BR),x(i,Sw,y),x(i,Ws,y),e(Ws,Vr),e(Vr,a$),h(Um,a$,null),e(Ws,HR),e(Ws,s$),e(s$,GR),x(i,Cw,y),x(i,W,y),h(Mm,W,null),e(W,WR),e(W,n$),e(n$,KR),e(W,YR),e(W,gu),e(gu,r$),e(r$,JR),e(gu,XR),e(W,ZR),e(W,o$),e(o$,QR),e(W,eB),e(W,Ur),h(Rm,Ur,null),e(Ur,tB),e(Ur,Bm),e(Bm,aB),e(Bm,i$),e(i$,sB),e(Bm,nB),e(W,rB),e(W,Mr),h(Hm,Mr,null),e(Mr,oB),e(Mr,ca),e(ca,iB),e(ca,l$),e(l$,lB),e(ca,dB),e(ca,d$),e(d$,cB),e(ca,pB),e(ca,c$),e(c$,mB),e(ca,hB),x(i,zw,y),x(i,Ks,y),e(Ks,Rr),e(Rr,p$),h(Gm,p$,null),e(Ks,fB),e(Ks,m$),e(m$,uB),x(i,Vw,y),x(i,Ia,y),e(Ia,gB),e(Ia,h$),e(h$,_B),e(Ia,bB),e(Ia,_u),e(_u,vB),e(Ia,yB),x(i,Uw,y),x(i,K,y),h(Wm,K,null),e(K,xB),e(K,f$),e(f$,$B),e(K,wB),e(K,Br),h(Km,Br,null),e(Br,DB),e(Br,u$),e(u$,EB),e(K,jB),e(K,Hr),h(Ym,Hr,null),e(Hr,kB),e(Hr,g$),e(g$,IB),e(K,TB),e(K,Ta),h(Jm,Ta,null),e(Ta,NB),e(Ta,_$),e(_$,PB),e(Ta,AB),e(Ta,b$),e(b$,LB),e(K,FB),e(K,Gr),h(Xm,Gr,null),e(Gr,qB),e(Gr,v$),e(v$,OB),x(i,Mw,y),x(i,Ys,y),e(Ys,Wr),e(Wr,y$),h(Zm,y$,null),e(Ys,SB),e(Ys,x$),e(x$,CB),x(i,Rw,y),x(i,k,y),h(Qm,k,null),e(k,zB),e(k,$$),e($$,VB),e(k,UB),e(k,w$),e(w$,MB),e(k,RB),e(k,pa),e(pa,BB),e(pa,D$),e(D$,HB),e(pa,GB),e(pa,E$),e(E$,WB),e(pa,KB),e(pa,j$),e(j$,YB),e(pa,JB),e(k,XB),e(k,k$),e(k$,ZB),e(k,QB),e(k,I$),e(I$,eH),e(k,tH),e(k,T$),e(T$,aH),e(k,sH),e(k,Lt),e(Lt,N$),e(N$,nH),e(Lt,rH),e(Lt,eh),e(eh,oH),e(Lt,iH),e(Lt,P$),e(P$,lH),e(Lt,dH),e(Lt,th),e(th,cH),e(Lt,pH),e(k,mH),e(k,A$),e(A$,hH),e(k,fH),e(k,L$),e(L$,uH),e(k,gH),h(ah,k,null),e(k,_H),e(k,Js),e(Js,bH),e(Js,F$),e(F$,vH),e(Js,yH),e(Js,q$),e(q$,xH),e(Js,$H),e(k,wH),h(sh,k,null),e(k,DH),e(k,ma),e(ma,EH),e(ma,O$),e(O$,jH),e(ma,kH),e(ma,S$),e(S$,IH),e(ma,TH),e(ma,C$),e(C$,NH),e(ma,PH),e(k,AH),h(nh,k,null),e(k,LH),e(k,Xs),e(Xs,FH),e(Xs,z$),e(z$,qH),e(Xs,OH),e(Xs,V$),e(V$,SH),e(Xs,CH),e(k,zH),h(rh,k,null),e(k,VH),e(k,U$),e(U$,UH),e(k,MH),h(oh,k,null),e(k,RH),e(k,Kr),e(Kr,Yr),e(Yr,M$),h(ih,M$,null),e(Kr,BH),e(Kr,R$),e(R$,HH),e(k,GH),e(k,U),e(U,WH),e(U,B$),e(B$,KH),e(U,YH),e(U,H$),e(H$,JH),e(U,XH),e(U,G$),e(G$,ZH),e(U,QH),e(U,W$),e(W$,eG),e(U,tG),e(U,K$),e(K$,aG),e(U,sG),e(U,Y$),e(Y$,nG),e(U,rG),e(U,J$),e(J$,oG),e(U,iG),x(i,Bw,y),x(i,Zs,y),h(lh,Zs,null),e(Zs,lG),e(Zs,Qs),e(Qs,dG),e(Qs,X$),e(X$,cG),e(Qs,pG),e(Qs,Z$),e(Z$,mG),e(Qs,hG),x(i,Hw,y),x(i,en,y),h(dh,en,null),e(en,fG),e(en,Q$),e(Q$,uG),x(i,Gw,y),x(i,tn,y),e(tn,Jr),e(Jr,ew),h(ch,ew,null),e(tn,gG),e(tn,tw),e(tw,_G),x(i,Ww,y),x(i,an,y),h(ph,an,null),e(an,bG),e(an,aw),e(aw,vG),Kw=!0},p(i,[y]){const mh={};y&2&&(mh.$$scope={dirty:y,ctx:i}),vr.$set(mh)},i(i){Kw||(f(Pe.$$.fragment,i),f(fa.$$.fragment,i),f(ri.$$.fragment,i),f(oi.$$.fragment,i),f(li.$$.fragment,i),f(di.$$.fragment,i),f(ci.$$.fragment,i),f(pi.$$.fragment,i),f(mi.$$.fragment,i),f(hi.$$.fragment,i),f(fi.$$.fragment,i),f(ui.$$.fragment,i),f(gi.$$.fragment,i),f(_i.$$.fragment,i),f(yi.$$.fragment,i),f(xi.$$.fragment,i),f($i.$$.fragment,i),f(wi.$$.fragment,i),f(Di.$$.fragment,i),f(Ei.$$.fragment,i),f(ji.$$.fragment,i),f(ki.$$.fragment,i),f(Ii.$$.fragment,i),f(Ni.$$.fragment,i),f(Pi.$$.fragment,i),f(Ai.$$.fragment,i),f(Li.$$.fragment,i),f(Fi.$$.fragment,i),f(qi.$$.fragment,i),f(Oi.$$.fragment,i),f(Si.$$.fragment,i),f(Ci.$$.fragment,i),f(zi.$$.fragment,i),f(Vi.$$.fragment,i),f(Ui.$$.fragment,i),f(Mi.$$.fragment,i),f(Ri.$$.fragment,i),f(Bi.$$.fragment,i),f(Hi.$$.fragment,i),f(Gi.$$.fragment,i),f(Wi.$$.fragment,i),f(Ki.$$.fragment,i),f(Yi.$$.fragment,i),f(Xi.$$.fragment,i),f(Zi.$$.fragment,i),f(Qi.$$.fragment,i),f(el.$$.fragment,i),f(al.$$.fragment,i),f(sl.$$.fragment,i),f(nl.$$.fragment,i),f(rl.$$.fragment,i),f(ol.$$.fragment,i),f(il.$$.fragment,i),f(dl.$$.fragment,i),f(cl.$$.fragment,i),f(ml.$$.fragment,i),f(hl.$$.fragment,i),f(fl.$$.fragment,i),f(ul.$$.fragment,i),f(gl.$$.fragment,i),f(_l.$$.fragment,i),f(bl.$$.fragment,i),f(yl.$$.fragment,i),f(xl.$$.fragment,i),f($l.$$.fragment,i),f(wl.$$.fragment,i),f(Dl.$$.fragment,i),f(El.$$.fragment,i),f(jl.$$.fragment,i),f(kl.$$.fragment,i),f(Il.$$.fragment,i),f(Tl.$$.fragment,i),f(Pl.$$.fragment,i),f(Al.$$.fragment,i),f(Fl.$$.fragment,i),f(ql.$$.fragment,i),f(Ol.$$.fragment,i),f(Sl.$$.fragment,i),f(Cl.$$.fragment,i),f(zl.$$.fragment,i),f(Vl.$$.fragment,i),f(Ul.$$.fragment,i),f(Ml.$$.fragment,i),f(Rl.$$.fragment,i),f(Bl.$$.fragment,i),f(Hl.$$.fragment,i),f(Gl.$$.fragment,i),f(Kl.$$.fragment,i),f(Yl.$$.fragment,i),f(Jl.$$.fragment,i),f(Xl.$$.fragment,i),f(Zl.$$.fragment,i),f(Ql.$$.fragment,i),f(ed.$$.fragment,i),f(td.$$.fragment,i),f(sd.$$.fragment,i),f(nd.$$.fragment,i),f(od.$$.fragment,i),f(id.$$.fragment,i),f(dd.$$.fragment,i),f(cd.$$.fragment,i),f(pd.$$.fragment,i),f(md.$$.fragment,i),f(hd.$$.fragment,i),f(fd.$$.fragment,i),f(ud.$$.fragment,i),f(gd.$$.fragment,i),f(_d.$$.fragment,i),f(bd.$$.fragment,i),f(vd.$$.fragment,i),f(yd.$$.fragment,i),f(xd.$$.fragment,i),f($d.$$.fragment,i),f(wd.$$.fragment,i),f(Dd.$$.fragment,i),f(Ed.$$.fragment,i),f(jd.$$.fragment,i),f(kd.$$.fragment,i),f(Id.$$.fragment,i),f(Td.$$.fragment,i),f(Nd.$$.fragment,i),f(Pd.$$.fragment,i),f(Ad.$$.fragment,i),f(Ld.$$.fragment,i),f(Fd.$$.fragment,i),f(qd.$$.fragment,i),f(Od.$$.fragment,i),f(Sd.$$.fragment,i),f(Cd.$$.fragment,i),f(zd.$$.fragment,i),f(Vd.$$.fragment,i),f(Ud.$$.fragment,i),f(Md.$$.fragment,i),f(Rd.$$.fragment,i),f(Bd.$$.fragment,i),f(Gd.$$.fragment,i),f(Wd.$$.fragment,i),f(Kd.$$.fragment,i),f(Yd.$$.fragment,i),f(Jd.$$.fragment,i),f(Xd.$$.fragment,i),f(Qd.$$.fragment,i),f(tc.$$.fragment,i),f(sc.$$.fragment,i),f(nc.$$.fragment,i),f(rc.$$.fragment,i),f(oc.$$.fragment,i),f(ic.$$.fragment,i),f(lc.$$.fragment,i),f(cc.$$.fragment,i),f(pc.$$.fragment,i),f(mc.$$.fragment,i),f(hc.$$.fragment,i),f(fc.$$.fragment,i),f(uc.$$.fragment,i),f(gc.$$.fragment,i),f(_c.$$.fragment,i),f(bc.$$.fragment,i),f(yc.$$.fragment,i),f($c.$$.fragment,i),f(wc.$$.fragment,i),f(Ec.$$.fragment,i),f(jc.$$.fragment,i),f(kc.$$.fragment,i),f(Ic.$$.fragment,i),f(Tc.$$.fragment,i),f(Nc.$$.fragment,i),f(Ac.$$.fragment,i),f(Lc.$$.fragment,i),f(qc.$$.fragment,i),f(Oc.$$.fragment,i),f(Sc.$$.fragment,i),f(Cc.$$.fragment,i),f(zc.$$.fragment,i),f(Vc.$$.fragment,i),f(Uc.$$.fragment,i),f(Mc.$$.fragment,i),f(Rc.$$.fragment,i),f(Bc.$$.fragment,i),f(Hc.$$.fragment,i),f(Gc.$$.fragment,i),f(Wc.$$.fragment,i),f(Kc.$$.fragment,i),f(Yc.$$.fragment,i),f(Jc.$$.fragment,i),f(Zc.$$.fragment,i),f(Qc.$$.fragment,i),f(ep.$$.fragment,i),f(ap.$$.fragment,i),f(np.$$.fragment,i),f(op.$$.fragment,i),f(ip.$$.fragment,i),f(lp.$$.fragment,i),f(dp.$$.fragment,i),f(cp.$$.fragment,i),f(pp.$$.fragment,i),f(mp.$$.fragment,i),f(hp.$$.fragment,i),f(fp.$$.fragment,i),f(up.$$.fragment,i),f(gp.$$.fragment,i),f(_p.$$.fragment,i),f(bp.$$.fragment,i),f(vp.$$.fragment,i),f(yp.$$.fragment,i),f(xp.$$.fragment,i),f($p.$$.fragment,i),f(wp.$$.fragment,i),f(Ep.$$.fragment,i),f(jp.$$.fragment,i),f(Ip.$$.fragment,i),f(Tp.$$.fragment,i),f(Np.$$.fragment,i),f(Pp.$$.fragment,i),f(Ap.$$.fragment,i),f(Lp.$$.fragment,i),f(Fp.$$.fragment,i),f(qp.$$.fragment,i),f(vr.$$.fragment,i),f(Up.$$.fragment,i),f(Mp.$$.fragment,i),f(Rp.$$.fragment,i),f(Bp.$$.fragment,i),f(Hp.$$.fragment,i),f(Gp.$$.fragment,i),f(Wp.$$.fragment,i),f(Kp.$$.fragment,i),f(Yp.$$.fragment,i),f(Jp.$$.fragment,i),f(Xp.$$.fragment,i),f(Zp.$$.fragment,i),f(Qp.$$.fragment,i),f(em.$$.fragment,i),f(am.$$.fragment,i),f(sm.$$.fragment,i),f(nm.$$.fragment,i),f(rm.$$.fragment,i),f(im.$$.fragment,i),f(lm.$$.fragment,i),f(dm.$$.fragment,i),f(cm.$$.fragment,i),f(pm.$$.fragment,i),f(hm.$$.fragment,i),f(um.$$.fragment,i),f(_m.$$.fragment,i),f(vm.$$.fragment,i),f(ym.$$.fragment,i),f(Em.$$.fragment,i),f(jm.$$.fragment,i),f(km.$$.fragment,i),f(Im.$$.fragment,i),f(Tm.$$.fragment,i),f(Nm.$$.fragment,i),f(Om.$$.fragment,i),f(Sm.$$.fragment,i),f(Cm.$$.fragment,i),f(zm.$$.fragment,i),f(Vm.$$.fragment,i),f(Um.$$.fragment,i),f(Mm.$$.fragment,i),f(Rm.$$.fragment,i),f(Hm.$$.fragment,i),f(Gm.$$.fragment,i),f(Wm.$$.fragment,i),f(Km.$$.fragment,i),f(Ym.$$.fragment,i),f(Jm.$$.fragment,i),f(Xm.$$.fragment,i),f(Zm.$$.fragment,i),f(Qm.$$.fragment,i),f(ah.$$.fragment,i),f(sh.$$.fragment,i),f(nh.$$.fragment,i),f(rh.$$.fragment,i),f(oh.$$.fragment,i),f(ih.$$.fragment,i),f(lh.$$.fragment,i),f(dh.$$.fragment,i),f(ch.$$.fragment,i),f(ph.$$.fragment,i),Kw=!0)},o(i){u(Pe.$$.fragment,i),u(fa.$$.fragment,i),u(ri.$$.fragment,i),u(oi.$$.fragment,i),u(li.$$.fragment,i),u(di.$$.fragment,i),u(ci.$$.fragment,i),u(pi.$$.fragment,i),u(mi.$$.fragment,i),u(hi.$$.fragment,i),u(fi.$$.fragment,i),u(ui.$$.fragment,i),u(gi.$$.fragment,i),u(_i.$$.fragment,i),u(yi.$$.fragment,i),u(xi.$$.fragment,i),u($i.$$.fragment,i),u(wi.$$.fragment,i),u(Di.$$.fragment,i),u(Ei.$$.fragment,i),u(ji.$$.fragment,i),u(ki.$$.fragment,i),u(Ii.$$.fragment,i),u(Ni.$$.fragment,i),u(Pi.$$.fragment,i),u(Ai.$$.fragment,i),u(Li.$$.fragment,i),u(Fi.$$.fragment,i),u(qi.$$.fragment,i),u(Oi.$$.fragment,i),u(Si.$$.fragment,i),u(Ci.$$.fragment,i),u(zi.$$.fragment,i),u(Vi.$$.fragment,i),u(Ui.$$.fragment,i),u(Mi.$$.fragment,i),u(Ri.$$.fragment,i),u(Bi.$$.fragment,i),u(Hi.$$.fragment,i),u(Gi.$$.fragment,i),u(Wi.$$.fragment,i),u(Ki.$$.fragment,i),u(Yi.$$.fragment,i),u(Xi.$$.fragment,i),u(Zi.$$.fragment,i),u(Qi.$$.fragment,i),u(el.$$.fragment,i),u(al.$$.fragment,i),u(sl.$$.fragment,i),u(nl.$$.fragment,i),u(rl.$$.fragment,i),u(ol.$$.fragment,i),u(il.$$.fragment,i),u(dl.$$.fragment,i),u(cl.$$.fragment,i),u(ml.$$.fragment,i),u(hl.$$.fragment,i),u(fl.$$.fragment,i),u(ul.$$.fragment,i),u(gl.$$.fragment,i),u(_l.$$.fragment,i),u(bl.$$.fragment,i),u(yl.$$.fragment,i),u(xl.$$.fragment,i),u($l.$$.fragment,i),u(wl.$$.fragment,i),u(Dl.$$.fragment,i),u(El.$$.fragment,i),u(jl.$$.fragment,i),u(kl.$$.fragment,i),u(Il.$$.fragment,i),u(Tl.$$.fragment,i),u(Pl.$$.fragment,i),u(Al.$$.fragment,i),u(Fl.$$.fragment,i),u(ql.$$.fragment,i),u(Ol.$$.fragment,i),u(Sl.$$.fragment,i),u(Cl.$$.fragment,i),u(zl.$$.fragment,i),u(Vl.$$.fragment,i),u(Ul.$$.fragment,i),u(Ml.$$.fragment,i),u(Rl.$$.fragment,i),u(Bl.$$.fragment,i),u(Hl.$$.fragment,i),u(Gl.$$.fragment,i),u(Kl.$$.fragment,i),u(Yl.$$.fragment,i),u(Jl.$$.fragment,i),u(Xl.$$.fragment,i),u(Zl.$$.fragment,i),u(Ql.$$.fragment,i),u(ed.$$.fragment,i),u(td.$$.fragment,i),u(sd.$$.fragment,i),u(nd.$$.fragment,i),u(od.$$.fragment,i),u(id.$$.fragment,i),u(dd.$$.fragment,i),u(cd.$$.fragment,i),u(pd.$$.fragment,i),u(md.$$.fragment,i),u(hd.$$.fragment,i),u(fd.$$.fragment,i),u(ud.$$.fragment,i),u(gd.$$.fragment,i),u(_d.$$.fragment,i),u(bd.$$.fragment,i),u(vd.$$.fragment,i),u(yd.$$.fragment,i),u(xd.$$.fragment,i),u($d.$$.fragment,i),u(wd.$$.fragment,i),u(Dd.$$.fragment,i),u(Ed.$$.fragment,i),u(jd.$$.fragment,i),u(kd.$$.fragment,i),u(Id.$$.fragment,i),u(Td.$$.fragment,i),u(Nd.$$.fragment,i),u(Pd.$$.fragment,i),u(Ad.$$.fragment,i),u(Ld.$$.fragment,i),u(Fd.$$.fragment,i),u(qd.$$.fragment,i),u(Od.$$.fragment,i),u(Sd.$$.fragment,i),u(Cd.$$.fragment,i),u(zd.$$.fragment,i),u(Vd.$$.fragment,i),u(Ud.$$.fragment,i),u(Md.$$.fragment,i),u(Rd.$$.fragment,i),u(Bd.$$.fragment,i),u(Gd.$$.fragment,i),u(Wd.$$.fragment,i),u(Kd.$$.fragment,i),u(Yd.$$.fragment,i),u(Jd.$$.fragment,i),u(Xd.$$.fragment,i),u(Qd.$$.fragment,i),u(tc.$$.fragment,i),u(sc.$$.fragment,i),u(nc.$$.fragment,i),u(rc.$$.fragment,i),u(oc.$$.fragment,i),u(ic.$$.fragment,i),u(lc.$$.fragment,i),u(cc.$$.fragment,i),u(pc.$$.fragment,i),u(mc.$$.fragment,i),u(hc.$$.fragment,i),u(fc.$$.fragment,i),u(uc.$$.fragment,i),u(gc.$$.fragment,i),u(_c.$$.fragment,i),u(bc.$$.fragment,i),u(yc.$$.fragment,i),u($c.$$.fragment,i),u(wc.$$.fragment,i),u(Ec.$$.fragment,i),u(jc.$$.fragment,i),u(kc.$$.fragment,i),u(Ic.$$.fragment,i),u(Tc.$$.fragment,i),u(Nc.$$.fragment,i),u(Ac.$$.fragment,i),u(Lc.$$.fragment,i),u(qc.$$.fragment,i),u(Oc.$$.fragment,i),u(Sc.$$.fragment,i),u(Cc.$$.fragment,i),u(zc.$$.fragment,i),u(Vc.$$.fragment,i),u(Uc.$$.fragment,i),u(Mc.$$.fragment,i),u(Rc.$$.fragment,i),u(Bc.$$.fragment,i),u(Hc.$$.fragment,i),u(Gc.$$.fragment,i),u(Wc.$$.fragment,i),u(Kc.$$.fragment,i),u(Yc.$$.fragment,i),u(Jc.$$.fragment,i),u(Zc.$$.fragment,i),u(Qc.$$.fragment,i),u(ep.$$.fragment,i),u(ap.$$.fragment,i),u(np.$$.fragment,i),u(op.$$.fragment,i),u(ip.$$.fragment,i),u(lp.$$.fragment,i),u(dp.$$.fragment,i),u(cp.$$.fragment,i),u(pp.$$.fragment,i),u(mp.$$.fragment,i),u(hp.$$.fragment,i),u(fp.$$.fragment,i),u(up.$$.fragment,i),u(gp.$$.fragment,i),u(_p.$$.fragment,i),u(bp.$$.fragment,i),u(vp.$$.fragment,i),u(yp.$$.fragment,i),u(xp.$$.fragment,i),u($p.$$.fragment,i),u(wp.$$.fragment,i),u(Ep.$$.fragment,i),u(jp.$$.fragment,i),u(Ip.$$.fragment,i),u(Tp.$$.fragment,i),u(Np.$$.fragment,i),u(Pp.$$.fragment,i),u(Ap.$$.fragment,i),u(Lp.$$.fragment,i),u(Fp.$$.fragment,i),u(qp.$$.fragment,i),u(vr.$$.fragment,i),u(Up.$$.fragment,i),u(Mp.$$.fragment,i),u(Rp.$$.fragment,i),u(Bp.$$.fragment,i),u(Hp.$$.fragment,i),u(Gp.$$.fragment,i),u(Wp.$$.fragment,i),u(Kp.$$.fragment,i),u(Yp.$$.fragment,i),u(Jp.$$.fragment,i),u(Xp.$$.fragment,i),u(Zp.$$.fragment,i),u(Qp.$$.fragment,i),u(em.$$.fragment,i),u(am.$$.fragment,i),u(sm.$$.fragment,i),u(nm.$$.fragment,i),u(rm.$$.fragment,i),u(im.$$.fragment,i),u(lm.$$.fragment,i),u(dm.$$.fragment,i),u(cm.$$.fragment,i),u(pm.$$.fragment,i),u(hm.$$.fragment,i),u(um.$$.fragment,i),u(_m.$$.fragment,i),u(vm.$$.fragment,i),u(ym.$$.fragment,i),u(Em.$$.fragment,i),u(jm.$$.fragment,i),u(km.$$.fragment,i),u(Im.$$.fragment,i),u(Tm.$$.fragment,i),u(Nm.$$.fragment,i),u(Om.$$.fragment,i),u(Sm.$$.fragment,i),u(Cm.$$.fragment,i),u(zm.$$.fragment,i),u(Vm.$$.fragment,i),u(Um.$$.fragment,i),u(Mm.$$.fragment,i),u(Rm.$$.fragment,i),u(Hm.$$.fragment,i),u(Gm.$$.fragment,i),u(Wm.$$.fragment,i),u(Km.$$.fragment,i),u(Ym.$$.fragment,i),u(Jm.$$.fragment,i),u(Xm.$$.fragment,i),u(Zm.$$.fragment,i),u(Qm.$$.fragment,i),u(ah.$$.fragment,i),u(sh.$$.fragment,i),u(nh.$$.fragment,i),u(rh.$$.fragment,i),u(oh.$$.fragment,i),u(ih.$$.fragment,i),u(lh.$$.fragment,i),u(dh.$$.fragment,i),u(ch.$$.fragment,i),u(ph.$$.fragment,i),Kw=!1},d(i){t(F),i&&t(rn),i&&t(Y),g(Pe),i&&t(on),i&&t(Ae),g(fa),i&&t(rw),i&&t(H),g(ri),g(oi),g(li),i&&t(ow),i&&t(os),g(di),i&&t(iw),i&&t(pn),i&&t(lw),i&&t(b),g(ci),g(pi),g(mi),g(hi),g(fi),g(ui),g(gi),g(_i),g(yi),g(xi),g($i),g(wi),g(Di),g(Ei),g(ji),g(ki),g(Ii),g(Ni),g(Pi),g(Ai),g(Li),g(Fi),g(qi),g(Oi),g(Si),g(Ci),g(zi),g(Vi),g(Ui),g(Mi),g(Ri),g(Bi),g(Hi),g(Gi),g(Wi),g(Ki),g(Yi),g(Xi),g(Zi),g(Qi),g(el),g(al),g(sl),g(nl),g(rl),g(ol),g(il),g(dl),g(cl),g(ml),g(hl),g(fl),g(ul),g(gl),g(_l),g(bl),g(yl),g(xl),g($l),g(wl),g(Dl),g(El),g(jl),g(kl),g(Il),g(Tl),g(Pl),g(Al),g(Fl),g(ql),g(Ol),g(Sl),g(Cl),g(zl),g(Vl),g(Ul),g(Ml),g(Rl),g(Bl),g(Hl),g(Gl),g(Kl),g(Yl),g(Jl),g(Xl),g(Zl),g(Ql),g(ed),g(td),g(sd),g(nd),g(od),g(id),g(dd),g(cd),g(pd),g(md),g(hd),g(fd),g(ud),g(gd),g(_d),g(bd),g(vd),g(yd),g(xd),g($d),g(wd),g(Dd),g(Ed),g(jd),g(kd),g(Id),g(Td),g(Nd),g(Pd),g(Ad),g(Ld),g(Fd),g(qd),g(Od),g(Sd),g(Cd),g(zd),g(Vd),g(Ud),g(Md),g(Rd),g(Bd),g(Gd),i&&t(dw),i&&t(qe),g(Wd),g(Kd),i&&t(cw),i&&t(S),g(Yd),g(Jd),i&&t(pw),i&&t(ie),g(Xd),i&&t(mw),i&&t(le),g(Qd),i&&t(hw),i&&t(de),g(tc),i&&t(fw),i&&t(xs),g(sc),i&&t(uw),i&&t(Nn),i&&t(gw),i&&t($),g(nc),g(rc),g(oc),g(ic),g(lc),g(cc),g(pc),g(mc),g(hc),g(fc),g(uc),g(gc),g(_c),g(bc),g(yc),g($c),g(wc),g(Ec),g(jc),g(kc),g(Ic),g(Tc),g(Nc),g(Ac),g(Lc),g(qc),g(Oc),g(Sc),g(Cc),g(zc),g(Vc),g(Uc),g(Mc),g(Rc),i&&t(_w),i&&t(Ef),i&&t(bw),i&&t(Ls),g(Bc),i&&t(vw),i&&t(Qn),i&&t(yw),i&&t(E),g(Hc),g(Gc),g(Wc),g(Kc),g(Yc),g(Jc),g(Zc),g(Qc),g(ep),g(ap),g(np),g(op),g(ip),g(lp),g(dp),g(cp),g(pp),g(mp),g(hp),g(fp),g(up),g(gp),g(_p),g(bp),g(vp),g(yp),i&&t(xw),i&&t(Os),g(xp),i&&t($w),i&&t(cr),i&&t(ww),i&&t(P),g($p),g(wp),g(Ep),g(jp),g(Ip),g(Tp),g(Np),g(Pp),g(Ap),g(Lp),i&&t(Dw),i&&t(zs),g(Fp),i&&t(Ew),i&&t(T),g(qp),g(vr),g(Up),g(Mp),g(Rp),g(Bp),g(Hp),g(Gp),g(Wp),g(Kp),g(Yp),g(Jp),g(Xp),g(Zp),i&&t(jw),i&&t(Vs),g(Qp),i&&t(kw),i&&t(G),g(em),g(am),g(sm),i&&t(Iw),i&&t(ia),g(nm),i&&t(Tw),i&&t(z),g(rm),g(im),g(lm),i&&t(Nw),i&&t(V),g(dm),g(cm),g(pm),i&&t(Pw),i&&t(mm),g(hm),i&&t(Aw),i&&t(fm),g(um),i&&t(Lw),i&&t(gm),g(_m),i&&t(Fw),i&&t(bm),g(vm),i&&t(qw),i&&t(A),g(ym),g(Em),g(jm),g(km),g(Im),g(Tm),i&&t(Ow),i&&t(L),g(Nm),g(Om),g(Sm),g(Cm),g(zm),g(Vm),i&&t(Sw),i&&t(Ws),g(Um),i&&t(Cw),i&&t(W),g(Mm),g(Rm),g(Hm),i&&t(zw),i&&t(Ks),g(Gm),i&&t(Vw),i&&t(Ia),i&&t(Uw),i&&t(K),g(Wm),g(Km),g(Ym),g(Jm),g(Xm),i&&t(Mw),i&&t(Ys),g(Zm),i&&t(Rw),i&&t(k),g(Qm),g(ah),g(sh),g(nh),g(rh),g(oh),g(ih),i&&t(Bw),i&&t(Zs),g(lh),i&&t(Hw),i&&t(en),g(dh),i&&t(Gw),i&&t(tn),g(ch),i&&t(Ww),i&&t(an),g(ph)}}}const Cse={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.IterableDatasetDict",title:"IterableDatasetDict"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function zse(nw){return Fse(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Hse extends Nse{constructor(F){super();Pse(this,F,zse,Sse,Ase,{})}}export{Hse as default,Cse as metadata};
