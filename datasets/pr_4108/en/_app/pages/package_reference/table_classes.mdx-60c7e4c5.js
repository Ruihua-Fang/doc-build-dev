import{S as h_,i as b_,s as u_,e as n,k as r,w as p,t as c,M as g_,c as s,d as a,m as l,a as o,x as m,h as d,b as i,F as e,g as x,y as h,L as f_,q as b,o as u,B as g,v as y_}from"../../chunks/vendor-8138ceec.js";import{D as f}from"../../chunks/Docstring-1fc0f9df.js";import{C as v_}from"../../chunks/CodeBlock-fc89709f.js";import{I as Ds}from"../../chunks/IconCopyLink-2dd3a6ac.js";function __(cf){let W,vl,X,ee,Cs,Vt,Md,Ps,xd,_l,C,Id,Ls,Dd,Cd,os,Pd,Ld,$l,H,te,As,St,Ad,Ns,Nd,Tl,k,qt,jd,js,Fd,Vd,Fs,Sd,qd,Vs,Rd,Ud,P,Rt,zd,Ss,Bd,Od,Ut,Wd,qs,Xd,Hd,Gd,ae,zt,Yd,Rs,Jd,Kd,ne,Bt,Qd,Us,Zd,ei,se,Ot,ti,zs,ai,ni,oe,Wt,si,Bs,oi,ri,rs,Xt,li,re,Ht,ci,Os,di,ii,le,Gt,pi,Ws,mi,hi,ce,Yt,bi,Xs,ui,gi,de,Jt,fi,Hs,yi,vi,ie,Kt,_i,Gs,$i,Ti,pe,Qt,wi,Ys,ki,Ei,L,Zt,Mi,Js,xi,Ii,Ks,Di,Ci,me,ea,Pi,Qs,Li,Ai,he,ta,Ni,Zs,ji,wl,G,be,eo,aa,Fi,to,Vi,kl,y,na,Si,ao,qi,Ri,no,Ui,zi,so,Bi,Oi,oo,Wi,Xi,A,sa,Hi,ro,Gi,Yi,oa,Ji,lo,Ki,Qi,Zi,ue,ra,ep,co,tp,ap,ge,la,np,io,sp,op,fe,ca,rp,po,lp,cp,ye,da,dp,mo,ip,pp,ls,ia,mp,ve,pa,hp,ho,bp,up,_e,ma,gp,bo,fp,yp,$e,ha,vp,uo,_p,$p,Te,ba,Tp,go,wp,kp,we,ua,Ep,fo,Mp,xp,ke,ga,Ip,yo,Dp,Cp,N,fa,Pp,vo,Lp,Ap,_o,Np,jp,Ee,ya,Fp,$o,Vp,Sp,Me,va,qp,To,Rp,Up,xe,_a,zp,wo,Bp,Op,Ie,$a,Wp,ko,Xp,Hp,De,Ta,Gp,Eo,Yp,Jp,Ce,wa,Kp,Mo,Qp,Zp,j,ka,em,xo,tm,am,Io,nm,sm,Pe,Ea,om,Do,rm,lm,Le,Ma,cm,Co,dm,im,F,xa,pm,Po,mm,hm,Lo,bm,um,Ae,Ia,gm,Ao,fm,ym,Ne,Da,vm,No,_m,$m,je,Ca,Tm,jo,wm,km,Fe,Pa,Em,Fo,Mm,xm,Ve,La,Im,Vo,Dm,Cm,cs,Aa,Pm,ds,Na,Lm,I,ja,Am,So,Nm,jm,Fa,Fm,qo,Vm,Sm,qm,Va,Rm,Ro,Um,zm,Bm,Uo,Om,Wm,Sa,Xm,Se,qa,Hm,zo,Gm,Ym,qe,Ra,Jm,Bo,Km,Qm,Re,Ua,Zm,Oo,eh,El,Y,Ue,Wo,za,th,Xo,ah,Ml,$,Ba,nh,Ho,sh,oh,Go,rh,lh,Yo,ch,dh,Jo,ih,ph,Ko,mh,hh,V,Oa,bh,Qo,uh,gh,Wa,fh,Zo,yh,vh,_h,ze,Xa,$h,er,Th,wh,Be,Ha,kh,tr,Eh,Mh,Oe,Ga,xh,ar,Ih,Dh,We,Ya,Ch,nr,Ph,Lh,is,Ja,Ah,Xe,Ka,Nh,sr,jh,Fh,He,Qa,Vh,or,Sh,qh,Ge,Za,Rh,rr,Uh,zh,Ye,en,Bh,lr,Oh,Wh,Je,tn,Xh,cr,Hh,Gh,Ke,an,Yh,dr,Jh,Kh,S,nn,Qh,ir,Zh,eb,pr,tb,ab,Qe,sn,nb,mr,sb,ob,Ze,on,rb,hr,lb,cb,et,rn,db,br,ib,pb,tt,ln,mb,ur,hb,bb,at,cn,ub,gr,gb,fb,nt,dn,yb,fr,vb,_b,q,pn,$b,yr,Tb,wb,vr,kb,Eb,st,mn,Mb,_r,xb,Ib,ot,hn,Db,$r,Cb,Pb,R,bn,Lb,Tr,Ab,Nb,wr,jb,Fb,rt,un,Vb,kr,Sb,qb,lt,gn,Rb,Er,Ub,zb,ct,fn,Bb,Mr,Ob,Wb,dt,yn,Xb,xr,Hb,Gb,it,vn,Yb,Ir,Jb,Kb,ps,_n,xl,J,pt,Dr,$n,Qb,Cr,Zb,Il,_,Tn,eu,Pr,tu,au,Lr,nu,su,wn,Ar,ou,ru,Nr,lu,cu,kn,du,jr,iu,pu,mu,Fr,hu,bu,U,En,uu,Vr,gu,fu,Mn,yu,Sr,vu,_u,$u,mt,xn,Tu,qr,wu,ku,ht,In,Eu,Rr,Mu,xu,bt,Dn,Iu,Ur,Du,Cu,ut,Cn,Pu,zr,Lu,Au,ms,Pn,Nu,gt,Ln,ju,Br,Fu,Vu,ft,An,Su,Or,qu,Ru,yt,Nn,Uu,Wr,zu,Bu,vt,jn,Ou,Xr,Wu,Xu,_t,Fn,Hu,Hr,Gu,Yu,$t,Vn,Ju,Gr,Ku,Qu,z,Sn,Zu,Yr,eg,tg,Jr,ag,ng,Tt,qn,sg,Kr,og,rg,wt,Rn,lg,Qr,cg,dg,kt,Un,ig,Zr,pg,mg,Et,zn,hg,el,bg,ug,Mt,Bn,gg,tl,fg,yg,xt,On,vg,al,_g,$g,B,Wn,Tg,nl,wg,kg,sl,Eg,Mg,It,Xn,xg,ol,Ig,Dg,Dt,Hn,Cg,rl,Pg,Lg,O,Gn,Ag,ll,Ng,jg,cl,Fg,Vg,Ct,Yn,Sg,dl,qg,Rg,Pt,Jn,Ug,il,zg,Bg,Lt,Kn,Og,pl,Wg,Xg,At,Qn,Hg,ml,Gg,Yg,Nt,Zn,Jg,hl,Kg,Qg,hs,es,Zg,jt,ts,ef,bl,tf,Dl,K,Ft,ul,as,af,gl,nf,Cl,Q,ns,sf,fl,of,Pl,Z,ss,rf,yl,lf,Ll;return Vt=new Ds({}),St=new Ds({}),qt=new f({props:{name:"class datasets.table.Table",anchor:"datasets.table.Table",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L147"}}),Rt=new f({props:{name:"validate",anchor:"datasets.table.Table.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L198",parametersDescription:[{anchor:"datasets.table.Table.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}]}}),zt=new f({props:{name:"equals",anchor:"datasets.table.Table.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L214",parametersDescription:[{anchor:"datasets.table.Table.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.Table.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],returnType:`
<p><code>bool</code></p>
`}}),Bt=new f({props:{name:"to_batches",anchor:"datasets.table.Table.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L231",parametersDescription:[{anchor:"datasets.table.Table.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),Ot=new f({props:{name:"to_pydict",anchor:"datasets.table.Table.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L245",returnType:`
<p><code>dict</code></p>
`}}),Wt=new f({props:{name:"to_pandas",anchor:"datasets.table.Table.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L254",parametersDescription:[{anchor:"datasets.table.Table.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.Table.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.Table.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.Table.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.Table.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.Table.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.Table.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.Table.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.Table.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.Table.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.Table.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.Table.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.Table.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.Table.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),Xt=new f({props:{name:"to_string",anchor:"datasets.table.Table.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L316"}}),Ht=new f({props:{name:"field",anchor:"datasets.table.Table.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L319",parametersDescription:[{anchor:"datasets.table.Table.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.Field</code></p>
`}}),Gt=new f({props:{name:"column",anchor:"datasets.table.Table.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L332",parametersDescription:[{anchor:"datasets.table.Table.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),Yt=new f({props:{name:"itercolumns",anchor:"datasets.table.Table.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L345"}}),Jt=new f({props:{name:"schema",anchor:"datasets.table.Table.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L354",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),Kt=new f({props:{name:"columns",anchor:"datasets.table.Table.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L364",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),Qt=new f({props:{name:"num_columns",anchor:"datasets.table.Table.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L374",returnType:`
<p>int</p>
`}}),Zt=new f({props:{name:"num_rows",anchor:"datasets.table.Table.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L384",returnType:`
<p>int</p>
`}}),ea=new f({props:{name:"shape",anchor:"datasets.table.Table.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L397",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),ta=new f({props:{name:"nbytes",anchor:"datasets.table.Table.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L407"}}),aa=new Ds({}),na=new f({props:{name:"class datasets.table.InMemoryTable",anchor:"datasets.table.InMemoryTable",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L630"}}),sa=new f({props:{name:"validate",anchor:"datasets.table.InMemoryTable.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L198",parametersDescription:[{anchor:"datasets.table.InMemoryTable.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}]}}),ra=new f({props:{name:"equals",anchor:"datasets.table.InMemoryTable.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L214",parametersDescription:[{anchor:"datasets.table.InMemoryTable.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.InMemoryTable.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],returnType:`
<p><code>bool</code></p>
`}}),la=new f({props:{name:"to_batches",anchor:"datasets.table.InMemoryTable.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L231",parametersDescription:[{anchor:"datasets.table.InMemoryTable.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),ca=new f({props:{name:"to_pydict",anchor:"datasets.table.InMemoryTable.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L245",returnType:`
<p><code>dict</code></p>
`}}),da=new f({props:{name:"to_pandas",anchor:"datasets.table.InMemoryTable.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L254",parametersDescription:[{anchor:"datasets.table.InMemoryTable.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.InMemoryTable.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.InMemoryTable.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.InMemoryTable.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.InMemoryTable.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.InMemoryTable.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.InMemoryTable.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.InMemoryTable.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.InMemoryTable.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.InMemoryTable.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.InMemoryTable.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.InMemoryTable.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.InMemoryTable.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.InMemoryTable.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),ia=new f({props:{name:"to_string",anchor:"datasets.table.InMemoryTable.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L316"}}),pa=new f({props:{name:"field",anchor:"datasets.table.InMemoryTable.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L319",parametersDescription:[{anchor:"datasets.table.InMemoryTable.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.Field</code></p>
`}}),ma=new f({props:{name:"column",anchor:"datasets.table.InMemoryTable.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L332",parametersDescription:[{anchor:"datasets.table.InMemoryTable.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),ha=new f({props:{name:"itercolumns",anchor:"datasets.table.InMemoryTable.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L345"}}),ba=new f({props:{name:"schema",anchor:"datasets.table.InMemoryTable.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L354",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),ua=new f({props:{name:"columns",anchor:"datasets.table.InMemoryTable.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L364",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),ga=new f({props:{name:"num_columns",anchor:"datasets.table.InMemoryTable.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L374",returnType:`
<p>int</p>
`}}),fa=new f({props:{name:"num_rows",anchor:"datasets.table.InMemoryTable.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L384",returnType:`
<p>int</p>
`}}),ya=new f({props:{name:"shape",anchor:"datasets.table.InMemoryTable.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L397",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),va=new f({props:{name:"nbytes",anchor:"datasets.table.InMemoryTable.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L407"}}),_a=new f({props:{name:"column_names",anchor:"datasets.table.InMemoryTable.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L414"}}),$a=new f({props:{name:"slice",anchor:"datasets.table.InMemoryTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L767",parametersDescription:[{anchor:"datasets.table.InMemoryTable.slice.offset",description:`<strong>offset</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Offset from start of table to slice`,name:"offset"},{anchor:"datasets.table.InMemoryTable.slice.length",description:`<strong>length</strong> (<code>int</code>, defaults to <code>None</code>) &#x2014;
Length of slice (default is until end of table starting from
offset)`,name:"length"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ta=new f({props:{name:"filter",anchor:"datasets.table.InMemoryTable.filter",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L784"}}),wa=new f({props:{name:"flatten",anchor:"datasets.table.InMemoryTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L790",parametersDescription:[{anchor:"datasets.table.InMemoryTable.flatten.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ka=new f({props:{name:"combine_chunks",anchor:"datasets.table.InMemoryTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L804",parametersDescription:[{anchor:"datasets.table.InMemoryTable.combine_chunks.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ea=new f({props:{name:"cast",anchor:"datasets.table.InMemoryTable.cast",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L820",parametersDescription:[{anchor:"datasets.table.InMemoryTable.cast.target_schema",description:`<strong>target_schema</strong> (<code>Schema</code>) &#x2014;
Schema to cast to, the names and order of fields must match`,name:"target_schema"},{anchor:"datasets.table.InMemoryTable.cast.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ma=new f({props:{name:"replace_schema_metadata",anchor:"datasets.table.InMemoryTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L835",parametersDescription:[{anchor:"datasets.table.InMemoryTable.replace_schema_metadata.metadata",description:"<strong>metadata</strong> (<code>dict</code>, defaults to <code>None</code>) &#x2014;",name:"metadata"}],returnDescription:`
<p>shallow_copy</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),xa=new f({props:{name:"add_column",anchor:"datasets.table.InMemoryTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L849",parametersDescription:[{anchor:"datasets.table.InMemoryTable.add_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.InMemoryTable.add_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.InMemoryTable.add_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ia=new f({props:{name:"append_column",anchor:"datasets.table.InMemoryTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L870",parametersDescription:[{anchor:"datasets.table.InMemoryTable.append_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.InMemoryTable.append_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Da=new f({props:{name:"remove_column",anchor:"datasets.table.InMemoryTable.remove_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L887",parametersDescription:[{anchor:"datasets.table.InMemoryTable.remove_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index of column to remove.`,name:"i"}],returnDescription:`
<p>New table without the column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ca=new f({props:{name:"set_column",anchor:"datasets.table.InMemoryTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L901",parametersDescription:[{anchor:"datasets.table.InMemoryTable.set_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.InMemoryTable.set_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.InMemoryTable.set_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column set.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Pa=new f({props:{name:"rename_columns",anchor:"datasets.table.InMemoryTable.rename_columns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L920"}}),La=new f({props:{name:"drop",anchor:"datasets.table.InMemoryTable.drop",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L926",parametersDescription:[{anchor:"datasets.table.InMemoryTable.drop.columns",description:`<strong>columns</strong> (<code>List[str]</code>) &#x2014;
List of field names referencing existing columns.`,name:"columns"}],returnDescription:`
<p>New table without the columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Aa=new f({props:{name:"from_file",anchor:"datasets.table.InMemoryTable.from_file",parameters:[{name:"filename",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L645"}}),Na=new f({props:{name:"from_buffer",anchor:"datasets.table.InMemoryTable.from_buffer",parameters:[{name:"buffer",val:": Buffer"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L650"}}),ja=new f({props:{name:"from_pandas",anchor:"datasets.table.InMemoryTable.from_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L655",parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014;",name:"df"},{anchor:"datasets.table.InMemoryTable.from_pandas.schema",description:`<strong>schema</strong> (<code>pyarrow.Schema</code>, optional) &#x2014;
The expected schema of the Arrow Table. This can be used to
indicate the type of columns if we cannot infer it automatically.
If passed, the output will have exactly this schema. Columns
specified in the schema that are not found in the DataFrame columns
or its index will raise an error. Additional columns or index
levels in the DataFrame which are not specified in the schema will
be ignored.`,name:"schema"},{anchor:"datasets.table.InMemoryTable.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014;
Whether to store the index as an additional column in the resulting
<code>Table</code>. The default of None will store the index as a column,
except for RangeIndex which is stored as metadata only. Use
<code>preserve_index=True</code> to force it to be stored as a column.`,name:"preserve_index"},{anchor:"datasets.table.InMemoryTable.from_pandas.nthreads",description:`<strong>nthreads</strong> (<code>int</code>, defaults to <code>None</code> (may use up to system CPU count threads)) &#x2014;
If greater than 1, convert columns to Arrow in parallel using
indicated number of threads`,name:"nthreads"},{anchor:"datasets.table.InMemoryTable.from_pandas.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014;
List of column to be converted. If None, use all columns.`,name:"columns"},{anchor:"datasets.table.InMemoryTable.from_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Sa=new v_({props:{code:`import pandas as pd
import pyarrow as pa
df = pd.DataFrame({
pa.Table.from_pandas(df)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pyarrow <span class="hljs-keyword">as</span> pa
<span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame({
    ...     <span class="hljs-string">&#x27;int&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],
    ...     <span class="hljs-string">&#x27;str&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]
    ... })
<span class="hljs-meta">&gt;&gt;&gt; </span>pa.Table.from_pandas(df)
&lt;pyarrow.lib.Table <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f05d1fb1b40</span>&gt;`}}),qa=new f({props:{name:"from_arrays",anchor:"datasets.table.InMemoryTable.from_arrays",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L713",parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_arrays.arrays",description:`<strong>arrays</strong> (<code>List[Union[pyarrow.Array, pyarrow.ChunkedArray]]</code>) &#x2014;
Equal-length arrays that should form the table.`,name:"arrays"},{anchor:"datasets.table.InMemoryTable.from_arrays.names",description:`<strong>names</strong> (<code>List[str]</code>, optional) &#x2014;
Names for the table columns. If not passed, schema must be passed`,name:"names"},{anchor:"datasets.table.InMemoryTable.from_arrays.schema",description:`<strong>schema</strong> (<code>Schema</code>, defaults to <code>None</code>) &#x2014;
Schema for the created table. If not passed, names must be passed`,name:"schema"},{anchor:"datasets.table.InMemoryTable.from_arrays.metadata",description:`<strong>metadata</strong> (<code>Union[dict, Mapping]</code>, default None) &#x2014;
Optional metadata for the schema (if inferred).`,name:"metadata"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ra=new f({props:{name:"from_pydict",anchor:"datasets.table.InMemoryTable.from_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L733",parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_pydict.mapping",description:`<strong>mapping</strong> (<code>Union[dict, Mapping]</code>) &#x2014;
A mapping of strings to Arrays or Python lists.`,name:"mapping"},{anchor:"datasets.table.InMemoryTable.from_pydict.schema",description:`<strong>schema</strong> (<code>Schema</code>, defaults to <code>None</code>) &#x2014;
If not passed, will be inferred from the Mapping values`,name:"schema"},{anchor:"datasets.table.InMemoryTable.from_pydict.metadata",description:`<strong>metadata</strong> (<code>Union[dict, Mapping]</code>, default None) &#x2014;
Optional metadata for the schema (if inferred).`,name:"metadata"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ua=new f({props:{name:"from_batches",anchor:"datasets.table.InMemoryTable.from_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L751",parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_batches.batches",description:`<strong>batches</strong> (<code>Union[Sequence[pyarrow.RecordBatch], Iterator[pyarrow.RecordBatch]]</code>) &#x2014;
Sequence of RecordBatch to be converted, all schemas must be equal.`,name:"batches"},{anchor:"datasets.table.InMemoryTable.from_batches.schema",description:`<strong>schema</strong> (<code>Schema</code>, defaults to <code>None</code>) &#x2014;
If not passed, will be inferred from the first RecordBatch.`,name:"schema"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),za=new Ds({}),Ba=new f({props:{name:"class datasets.table.MemoryMappedTable",anchor:"datasets.table.MemoryMappedTable",parameters:[{name:"table",val:": Table"},{name:"path",val:": str"},{name:"replays",val:": typing.Union[typing.List[typing.Tuple[str, tuple, dict]], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L948"}}),Oa=new f({props:{name:"validate",anchor:"datasets.table.MemoryMappedTable.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L198",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}]}}),Xa=new f({props:{name:"equals",anchor:"datasets.table.MemoryMappedTable.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L214",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.MemoryMappedTable.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],returnType:`
<p><code>bool</code></p>
`}}),Ha=new f({props:{name:"to_batches",anchor:"datasets.table.MemoryMappedTable.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L231",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),Ga=new f({props:{name:"to_pydict",anchor:"datasets.table.MemoryMappedTable.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L245",returnType:`
<p><code>dict</code></p>
`}}),Ya=new f({props:{name:"to_pandas",anchor:"datasets.table.MemoryMappedTable.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L254",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),Ja=new f({props:{name:"to_string",anchor:"datasets.table.MemoryMappedTable.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L316"}}),Ka=new f({props:{name:"field",anchor:"datasets.table.MemoryMappedTable.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L319",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.Field</code></p>
`}}),Qa=new f({props:{name:"column",anchor:"datasets.table.MemoryMappedTable.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L332",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),Za=new f({props:{name:"itercolumns",anchor:"datasets.table.MemoryMappedTable.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L345"}}),en=new f({props:{name:"schema",anchor:"datasets.table.MemoryMappedTable.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L354",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),tn=new f({props:{name:"columns",anchor:"datasets.table.MemoryMappedTable.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L364",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),an=new f({props:{name:"num_columns",anchor:"datasets.table.MemoryMappedTable.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L374",returnType:`
<p>int</p>
`}}),nn=new f({props:{name:"num_rows",anchor:"datasets.table.MemoryMappedTable.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L384",returnType:`
<p>int</p>
`}}),sn=new f({props:{name:"shape",anchor:"datasets.table.MemoryMappedTable.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L397",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),on=new f({props:{name:"nbytes",anchor:"datasets.table.MemoryMappedTable.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L407"}}),rn=new f({props:{name:"column_names",anchor:"datasets.table.MemoryMappedTable.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L414"}}),ln=new f({props:{name:"slice",anchor:"datasets.table.MemoryMappedTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1007",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.slice.offset",description:`<strong>offset</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Offset from start of table to slice`,name:"offset"},{anchor:"datasets.table.MemoryMappedTable.slice.length",description:`<strong>length</strong> (<code>int</code>, defaults to <code>None</code>) &#x2014;
Length of slice (default is until end of table starting from
offset)`,name:"length"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),cn=new f({props:{name:"filter",anchor:"datasets.table.MemoryMappedTable.filter",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1026"}}),dn=new f({props:{name:"flatten",anchor:"datasets.table.MemoryMappedTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1034",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.flatten.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),pn=new f({props:{name:"combine_chunks",anchor:"datasets.table.MemoryMappedTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1050",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.combine_chunks.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),mn=new f({props:{name:"cast",anchor:"datasets.table.MemoryMappedTable.cast",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1068",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.cast.target_schema",description:`<strong>target_schema</strong> (<code>Schema</code>) &#x2014;
Schema to cast to, the names and order of fields must match`,name:"target_schema"},{anchor:"datasets.table.MemoryMappedTable.cast.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),hn=new f({props:{name:"replace_schema_metadata",anchor:"datasets.table.MemoryMappedTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1085",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.replace_schema_metadata.metadata",description:"<strong>metadata</strong> (<code>dict</code>, defaults to <code>None</code>) &#x2014;",name:"metadata"}],returnDescription:`
<p>shallow_copy</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),bn=new f({props:{name:"add_column",anchor:"datasets.table.MemoryMappedTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1101",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.add_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.MemoryMappedTable.add_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.MemoryMappedTable.add_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),un=new f({props:{name:"append_column",anchor:"datasets.table.MemoryMappedTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1124",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.append_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.MemoryMappedTable.append_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),gn=new f({props:{name:"remove_column",anchor:"datasets.table.MemoryMappedTable.remove_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1143",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.remove_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index of column to remove.`,name:"i"}],returnDescription:`
<p>New table without the column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),fn=new f({props:{name:"set_column",anchor:"datasets.table.MemoryMappedTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1159",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.set_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.MemoryMappedTable.set_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.MemoryMappedTable.set_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column set.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),yn=new f({props:{name:"rename_columns",anchor:"datasets.table.MemoryMappedTable.rename_columns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1180"}}),vn=new f({props:{name:"drop",anchor:"datasets.table.MemoryMappedTable.drop",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1188",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.drop.columns",description:`<strong>columns</strong> (<code>List[str]</code>) &#x2014;
List of field names referencing existing columns.`,name:"columns"}],returnDescription:`
<p>New table without the columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),_n=new f({props:{name:"from_file",anchor:"datasets.table.MemoryMappedTable.from_file",parameters:[{name:"filename",val:": str"},{name:"replays",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L974"}}),$n=new Ds({}),Tn=new f({props:{name:"class datasets.table.ConcatenationTable",anchor:"datasets.table.ConcatenationTable",parameters:[{name:"table",val:": Table"},{name:"blocks",val:": typing.List[typing.List[datasets.table.TableBlock]]"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1215"}}),En=new f({props:{name:"validate",anchor:"datasets.table.ConcatenationTable.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L198",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}]}}),xn=new f({props:{name:"equals",anchor:"datasets.table.ConcatenationTable.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L214",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.ConcatenationTable.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],returnType:`
<p><code>bool</code></p>
`}}),In=new f({props:{name:"to_batches",anchor:"datasets.table.ConcatenationTable.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L231",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),Dn=new f({props:{name:"to_pydict",anchor:"datasets.table.ConcatenationTable.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L245",returnType:`
<p><code>dict</code></p>
`}}),Cn=new f({props:{name:"to_pandas",anchor:"datasets.table.ConcatenationTable.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L254",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.ConcatenationTable.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.ConcatenationTable.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.ConcatenationTable.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.ConcatenationTable.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.ConcatenationTable.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.ConcatenationTable.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.ConcatenationTable.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.ConcatenationTable.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.ConcatenationTable.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.ConcatenationTable.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.ConcatenationTable.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.ConcatenationTable.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.ConcatenationTable.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),Pn=new f({props:{name:"to_string",anchor:"datasets.table.ConcatenationTable.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L316"}}),Ln=new f({props:{name:"field",anchor:"datasets.table.ConcatenationTable.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L319",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.Field</code></p>
`}}),An=new f({props:{name:"column",anchor:"datasets.table.ConcatenationTable.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L332",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),Nn=new f({props:{name:"itercolumns",anchor:"datasets.table.ConcatenationTable.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L345"}}),jn=new f({props:{name:"schema",anchor:"datasets.table.ConcatenationTable.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L354",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),Fn=new f({props:{name:"columns",anchor:"datasets.table.ConcatenationTable.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L364",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),Vn=new f({props:{name:"num_columns",anchor:"datasets.table.ConcatenationTable.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L374",returnType:`
<p>int</p>
`}}),Sn=new f({props:{name:"num_rows",anchor:"datasets.table.ConcatenationTable.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L384",returnType:`
<p>int</p>
`}}),qn=new f({props:{name:"shape",anchor:"datasets.table.ConcatenationTable.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L397",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),Rn=new f({props:{name:"nbytes",anchor:"datasets.table.ConcatenationTable.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L407"}}),Un=new f({props:{name:"column_names",anchor:"datasets.table.ConcatenationTable.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L414"}}),zn=new f({props:{name:"slice",anchor:"datasets.table.ConcatenationTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1383",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.slice.offset",description:`<strong>offset</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Offset from start of table to slice`,name:"offset"},{anchor:"datasets.table.ConcatenationTable.slice.length",description:`<strong>length</strong> (<code>int</code>, defaults to <code>None</code>) &#x2014;
Length of slice (default is until end of table starting from
offset)`,name:"length"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Bn=new f({props:{name:"filter",anchor:"datasets.table.ConcatenationTable.filter",parameters:[{name:"mask",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1414"}}),On=new f({props:{name:"flatten",anchor:"datasets.table.ConcatenationTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1425",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.flatten.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Wn=new f({props:{name:"combine_chunks",anchor:"datasets.table.ConcatenationTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1443",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.combine_chunks.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Xn=new f({props:{name:"cast",anchor:"datasets.table.ConcatenationTable.cast",parameters:[{name:"target_schema",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1463",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.cast.target_schema",description:`<strong>target_schema</strong> (<code>Schema</code>) &#x2014;
Schema to cast to, the names and order of fields must match`,name:"target_schema"},{anchor:"datasets.table.ConcatenationTable.cast.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Hn=new f({props:{name:"replace_schema_metadata",anchor:"datasets.table.ConcatenationTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1490",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.replace_schema_metadata.metadata",description:"<strong>metadata</strong> (<code>dict</code>, defaults to <code>None</code>) &#x2014;",name:"metadata"}],returnDescription:`
<p>shallow_copy</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Gn=new f({props:{name:"add_column",anchor:"datasets.table.ConcatenationTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1508",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.add_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.ConcatenationTable.add_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.ConcatenationTable.add_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Yn=new f({props:{name:"append_column",anchor:"datasets.table.ConcatenationTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1529",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.append_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.ConcatenationTable.append_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Jn=new f({props:{name:"remove_column",anchor:"datasets.table.ConcatenationTable.remove_column",parameters:[{name:"i",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1546",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.remove_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index of column to remove.`,name:"i"}],returnDescription:`
<p>New table without the column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Kn=new f({props:{name:"set_column",anchor:"datasets.table.ConcatenationTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1570",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.set_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.ConcatenationTable.set_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.ConcatenationTable.set_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column set.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Qn=new f({props:{name:"rename_columns",anchor:"datasets.table.ConcatenationTable.rename_columns",parameters:[{name:"names",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1589"}}),Zn=new f({props:{name:"drop",anchor:"datasets.table.ConcatenationTable.drop",parameters:[{name:"columns",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1602",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.drop.columns",description:`<strong>columns</strong> (<code>List[str]</code>) &#x2014;
List of field names referencing existing columns.`,name:"columns"}],returnDescription:`
<p>New table without the columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),es=new f({props:{name:"from_blocks",anchor:"datasets.table.ConcatenationTable.from_blocks",parameters:[{name:"blocks",val:": TableBlockContainer"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1310"}}),ts=new f({props:{name:"from_tables",anchor:"datasets.table.ConcatenationTable.from_tables",parameters:[{name:"tables",val:": typing.List[typing.Union[pyarrow.lib.Table, datasets.table.Table]]"},{name:"axis",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1324",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.from_tables.tables",description:`<strong>tables</strong> (list of <code>Table</code> or list of <code>pyarrow.Table</code>) &#x2014; List of tables.
axis &#x2014; (<code>{0, 1}</code>, defaults to <code>0</code>, meaning over rows):`,name:"tables"},{anchor:"datasets.table.ConcatenationTable.from_tables.Axis",description:`<strong>Axis</strong> to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns &#x2014;
(horizontally). &#x2014;`,name:"Axis"},{anchor:"datasets.table.ConcatenationTable.from_tables.*New",description:"<strong>*New</strong> in version 1.6.0* &#x2014;",name:"*New"}]}}),as=new Ds({}),ns=new f({props:{name:"datasets.table.concat_tables",anchor:"datasets.table.concat_tables",parameters:[{name:"tables",val:": typing.List[datasets.table.Table]"},{name:"axis",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1624",parametersDescription:[{anchor:"datasets.table.concat_tables.tables",description:"<strong>tables</strong> (list of <code>Table</code>) &#x2014; List of tables to be concatenated.",name:"tables"},{anchor:"datasets.table.concat_tables.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, defaults to <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],returnDescription:`
<p>If the number of input tables is > 1, then the returned table is a <code>datasets.table.ConcatenationTable</code>.
Otherwise if there\u2019s only one table, it is returned as is.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ss=new f({props:{name:"datasets.table.list_table_cache_files",anchor:"datasets.table.list_table_cache_files",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/pr_4108/src/datasets/table.py#L1647",returnDescription:`
<p>a list of paths to the cache files loaded by the table</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),{c(){W=n("meta"),vl=r(),X=n("h1"),ee=n("a"),Cs=n("span"),p(Vt.$$.fragment),Md=r(),Ps=n("span"),xd=c("Table Classes"),_l=r(),C=n("p"),Id=c("Each "),Ls=n("code"),Dd=c("Dataset"),Cd=c(` object is backed by a PyArrow Table.
A Table can be loaded from either the disk (memory mapped) or in memory.
Several Table types are available, and they all inherit from `),os=n("a"),Pd=c("table.Table"),Ld=c("."),$l=r(),H=n("h2"),te=n("a"),As=n("span"),p(St.$$.fragment),Ad=r(),Ns=n("span"),Nd=c("Table"),Tl=r(),k=n("div"),p(qt.$$.fragment),jd=r(),js=n("p"),Fd=c(`Wraps a pyarrow Table by using composition.
This is the base class for InMemoryTable, MemoryMappedTable and ConcatenationTable.`),Vd=r(),Fs=n("p"),Sd=c(`It implements all the basic attributes/methods of the pyarrow Table class except
the Table transforms: slice, filter, flatten, combine_chunks, cast, add_column,
append_column, remove_column, set_column, rename_columns and drop.`),qd=r(),Vs=n("p"),Rd=c("The implementation of these methods differs for the subclasses."),Ud=r(),P=n("div"),p(Rt.$$.fragment),zd=r(),Ss=n("p"),Bd=c("Perform validation checks.  An exception is raised if validation fails."),Od=r(),Ut=n("p"),Wd=c("By default only cheap validation checks are run.  Pass "),qs=n("em"),Xd=c("full=True"),Hd=c(`
for thorough validation checks (potentially O(n)).`),Gd=r(),ae=n("div"),p(zt.$$.fragment),Yd=r(),Rs=n("p"),Jd=c("Check if contents of two tables are equal."),Kd=r(),ne=n("div"),p(Bt.$$.fragment),Qd=r(),Us=n("p"),Zd=c("Convert Table to list of (contiguous) RecordBatch objects."),ei=r(),se=n("div"),p(Ot.$$.fragment),ti=r(),zs=n("p"),ai=c("Convert the Table to a dict or OrderedDict."),ni=r(),oe=n("div"),p(Wt.$$.fragment),si=r(),Bs=n("p"),oi=c("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),ri=r(),rs=n("div"),p(Xt.$$.fragment),li=r(),re=n("div"),p(Ht.$$.fragment),ci=r(),Os=n("p"),di=c("Select a schema field by its column name or numeric index."),ii=r(),le=n("div"),p(Gt.$$.fragment),pi=r(),Ws=n("p"),mi=c("Select a column by its column name, or numeric index."),hi=r(),ce=n("div"),p(Yt.$$.fragment),bi=r(),Xs=n("p"),ui=c("Iterator over all columns in their numerical order."),gi=r(),de=n("div"),p(Jt.$$.fragment),fi=r(),Hs=n("p"),yi=c("Schema of the table and its columns."),vi=r(),ie=n("div"),p(Kt.$$.fragment),_i=r(),Gs=n("p"),$i=c("List of all columns in numerical order."),Ti=r(),pe=n("div"),p(Qt.$$.fragment),wi=r(),Ys=n("p"),ki=c("Number of columns in this table."),Ei=r(),L=n("div"),p(Zt.$$.fragment),Mi=r(),Js=n("p"),xi=c("Number of rows in this table."),Ii=r(),Ks=n("p"),Di=c(`Due to the definition of a table, all columns have the same number of
rows.`),Ci=r(),me=n("div"),p(ea.$$.fragment),Pi=r(),Qs=n("p"),Li=c("Dimensions of the table: (#rows, #columns)."),Ai=r(),he=n("div"),p(ta.$$.fragment),Ni=r(),Zs=n("p"),ji=c("Total number of bytes consumed by the elements of the table."),wl=r(),G=n("h2"),be=n("a"),eo=n("span"),p(aa.$$.fragment),Fi=r(),to=n("span"),Vi=c("InMemoryTable"),kl=r(),y=n("div"),p(na.$$.fragment),Si=r(),ao=n("p"),qi=c("The table is said in-memory when it is loaded into the user\u2019s RAM."),Ri=r(),no=n("p"),Ui=c(`Pickling it does copy all the data using memory.
Its implementation is simple and uses the underlying pyarrow Table methods directly.`),zi=r(),so=n("p"),Bi=c(`This is different from the MemoryMapped table, for which pickling doesn\u2019t copy all the
data in memory. For a MemoryMapped, unpickling instead reloads the table from the disk.`),Oi=r(),oo=n("p"),Wi=c(`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),Xi=r(),A=n("div"),p(sa.$$.fragment),Hi=r(),ro=n("p"),Gi=c("Perform validation checks.  An exception is raised if validation fails."),Yi=r(),oa=n("p"),Ji=c("By default only cheap validation checks are run.  Pass "),lo=n("em"),Ki=c("full=True"),Qi=c(`
for thorough validation checks (potentially O(n)).`),Zi=r(),ue=n("div"),p(ra.$$.fragment),ep=r(),co=n("p"),tp=c("Check if contents of two tables are equal."),ap=r(),ge=n("div"),p(la.$$.fragment),np=r(),io=n("p"),sp=c("Convert Table to list of (contiguous) RecordBatch objects."),op=r(),fe=n("div"),p(ca.$$.fragment),rp=r(),po=n("p"),lp=c("Convert the Table to a dict or OrderedDict."),cp=r(),ye=n("div"),p(da.$$.fragment),dp=r(),mo=n("p"),ip=c("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),pp=r(),ls=n("div"),p(ia.$$.fragment),mp=r(),ve=n("div"),p(pa.$$.fragment),hp=r(),ho=n("p"),bp=c("Select a schema field by its column name or numeric index."),up=r(),_e=n("div"),p(ma.$$.fragment),gp=r(),bo=n("p"),fp=c("Select a column by its column name, or numeric index."),yp=r(),$e=n("div"),p(ha.$$.fragment),vp=r(),uo=n("p"),_p=c("Iterator over all columns in their numerical order."),$p=r(),Te=n("div"),p(ba.$$.fragment),Tp=r(),go=n("p"),wp=c("Schema of the table and its columns."),kp=r(),we=n("div"),p(ua.$$.fragment),Ep=r(),fo=n("p"),Mp=c("List of all columns in numerical order."),xp=r(),ke=n("div"),p(ga.$$.fragment),Ip=r(),yo=n("p"),Dp=c("Number of columns in this table."),Cp=r(),N=n("div"),p(fa.$$.fragment),Pp=r(),vo=n("p"),Lp=c("Number of rows in this table."),Ap=r(),_o=n("p"),Np=c(`Due to the definition of a table, all columns have the same number of
rows.`),jp=r(),Ee=n("div"),p(ya.$$.fragment),Fp=r(),$o=n("p"),Vp=c("Dimensions of the table: (#rows, #columns)."),Sp=r(),Me=n("div"),p(va.$$.fragment),qp=r(),To=n("p"),Rp=c("Total number of bytes consumed by the elements of the table."),Up=r(),xe=n("div"),p(_a.$$.fragment),zp=r(),wo=n("p"),Bp=c("Names of the table\u2019s columns"),Op=r(),Ie=n("div"),p($a.$$.fragment),Wp=r(),ko=n("p"),Xp=c("Compute zero-copy slice of this Table"),Hp=r(),De=n("div"),p(Ta.$$.fragment),Gp=r(),Eo=n("p"),Yp=c("Select records from a Table. See pyarrow.compute.filter for full usage."),Jp=r(),Ce=n("div"),p(wa.$$.fragment),Kp=r(),Mo=n("p"),Qp=c(`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),Zp=r(),j=n("div"),p(ka.$$.fragment),em=r(),xo=n("p"),tm=c("Make a new table by combining the chunks this table has."),am=r(),Io=n("p"),nm=c(`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),sm=r(),Pe=n("div"),p(Ea.$$.fragment),om=r(),Do=n("p"),rm=c("Cast table values to another schema"),lm=r(),Le=n("div"),p(Ma.$$.fragment),cm=r(),Co=n("p"),dm=c(`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),im=r(),F=n("div"),p(xa.$$.fragment),pm=r(),Po=n("p"),mm=c("Add column to Table at position."),hm=r(),Lo=n("p"),bm=c(`A new table is returned with the column added, the original table
object is left unchanged.`),um=r(),Ae=n("div"),p(Ia.$$.fragment),gm=r(),Ao=n("p"),fm=c("Append column at end of columns."),ym=r(),Ne=n("div"),p(Da.$$.fragment),vm=r(),No=n("p"),_m=c("Create new Table with the indicated column removed."),$m=r(),je=n("div"),p(Ca.$$.fragment),Tm=r(),jo=n("p"),wm=c("Replace column in Table at position."),km=r(),Fe=n("div"),p(Pa.$$.fragment),Em=r(),Fo=n("p"),Mm=c("Create new table with columns renamed to provided names."),xm=r(),Ve=n("div"),p(La.$$.fragment),Im=r(),Vo=n("p"),Dm=c("Drop one or more columns and return a new table."),Cm=r(),cs=n("div"),p(Aa.$$.fragment),Pm=r(),ds=n("div"),p(Na.$$.fragment),Lm=r(),I=n("div"),p(ja.$$.fragment),Am=r(),So=n("p"),Nm=c("Convert pandas.DataFrame to an Arrow Table."),jm=r(),Fa=n("p"),Fm=c(`The column types in the resulting Arrow Table are inferred from the
dtypes of the pandas.Series in the DataFrame. In the case of non-object
Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),qo=n("em"),Vm=c("object"),Sm=c(`, we need to guess the datatype by looking at the
Python objects in this Series.`),qm=r(),Va=n("p"),Rm=c("Be aware that Series of the "),Ro=n("em"),Um=c("object"),zm=c(` dtype don\u2019t carry enough
information to always lead to a meaningful Arrow type. In the case that
we cannot infer a type, e.g. because the DataFrame is of length 0 or
the Series only contains None/nan objects, the type is set to
null. This behavior can be avoided by constructing an explicit schema
and passing it to this function.`),Bm=r(),Uo=n("p"),Om=c("Examples:"),Wm=r(),p(Sa.$$.fragment),Xm=r(),Se=n("div"),p(qa.$$.fragment),Hm=r(),zo=n("p"),Gm=c("Construct a Table from Arrow arrays"),Ym=r(),qe=n("div"),p(Ra.$$.fragment),Jm=r(),Bo=n("p"),Km=c("Construct a Table from Arrow arrays or columns"),Qm=r(),Re=n("div"),p(Ua.$$.fragment),Zm=r(),Oo=n("p"),eh=c("Construct a Table from a sequence or iterator of Arrow RecordBatches."),El=r(),Y=n("h2"),Ue=n("a"),Wo=n("span"),p(za.$$.fragment),th=r(),Xo=n("span"),ah=c("MemoryMappedTable"),Ml=r(),$=n("div"),p(Ba.$$.fragment),nh=r(),Ho=n("p"),sh=c(`The table is said memory mapped when it doesn\u2019t use the user\u2019s RAM but loads the data
from the disk instead.`),oh=r(),Go=n("p"),rh=c(`Pickling it doesn\u2019t copy the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplay\u201D when reloading the table from the disk.`),lh=r(),Yo=n("p"),ch=c(`Its implementation requires to store an history of all the transforms that were applied
to the underlying pyarrow Table, so that they can be \u201Creplayed\u201D when reloading the Table
from the disk.`),dh=r(),Jo=n("p"),ih=c(`This is different from the InMemoryTable table, for which pickling does copy all the
data in memory.`),ph=r(),Ko=n("p"),mh=c(`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),hh=r(),V=n("div"),p(Oa.$$.fragment),bh=r(),Qo=n("p"),uh=c("Perform validation checks.  An exception is raised if validation fails."),gh=r(),Wa=n("p"),fh=c("By default only cheap validation checks are run.  Pass "),Zo=n("em"),yh=c("full=True"),vh=c(`
for thorough validation checks (potentially O(n)).`),_h=r(),ze=n("div"),p(Xa.$$.fragment),$h=r(),er=n("p"),Th=c("Check if contents of two tables are equal."),wh=r(),Be=n("div"),p(Ha.$$.fragment),kh=r(),tr=n("p"),Eh=c("Convert Table to list of (contiguous) RecordBatch objects."),Mh=r(),Oe=n("div"),p(Ga.$$.fragment),xh=r(),ar=n("p"),Ih=c("Convert the Table to a dict or OrderedDict."),Dh=r(),We=n("div"),p(Ya.$$.fragment),Ch=r(),nr=n("p"),Ph=c("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Lh=r(),is=n("div"),p(Ja.$$.fragment),Ah=r(),Xe=n("div"),p(Ka.$$.fragment),Nh=r(),sr=n("p"),jh=c("Select a schema field by its column name or numeric index."),Fh=r(),He=n("div"),p(Qa.$$.fragment),Vh=r(),or=n("p"),Sh=c("Select a column by its column name, or numeric index."),qh=r(),Ge=n("div"),p(Za.$$.fragment),Rh=r(),rr=n("p"),Uh=c("Iterator over all columns in their numerical order."),zh=r(),Ye=n("div"),p(en.$$.fragment),Bh=r(),lr=n("p"),Oh=c("Schema of the table and its columns."),Wh=r(),Je=n("div"),p(tn.$$.fragment),Xh=r(),cr=n("p"),Hh=c("List of all columns in numerical order."),Gh=r(),Ke=n("div"),p(an.$$.fragment),Yh=r(),dr=n("p"),Jh=c("Number of columns in this table."),Kh=r(),S=n("div"),p(nn.$$.fragment),Qh=r(),ir=n("p"),Zh=c("Number of rows in this table."),eb=r(),pr=n("p"),tb=c(`Due to the definition of a table, all columns have the same number of
rows.`),ab=r(),Qe=n("div"),p(sn.$$.fragment),nb=r(),mr=n("p"),sb=c("Dimensions of the table: (#rows, #columns)."),ob=r(),Ze=n("div"),p(on.$$.fragment),rb=r(),hr=n("p"),lb=c("Total number of bytes consumed by the elements of the table."),cb=r(),et=n("div"),p(rn.$$.fragment),db=r(),br=n("p"),ib=c("Names of the table\u2019s columns"),pb=r(),tt=n("div"),p(ln.$$.fragment),mb=r(),ur=n("p"),hb=c("Compute zero-copy slice of this Table"),bb=r(),at=n("div"),p(cn.$$.fragment),ub=r(),gr=n("p"),gb=c("Select records from a Table. See pyarrow.compute.filter for full usage."),fb=r(),nt=n("div"),p(dn.$$.fragment),yb=r(),fr=n("p"),vb=c(`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),_b=r(),q=n("div"),p(pn.$$.fragment),$b=r(),yr=n("p"),Tb=c("Make a new table by combining the chunks this table has."),wb=r(),vr=n("p"),kb=c(`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),Eb=r(),st=n("div"),p(mn.$$.fragment),Mb=r(),_r=n("p"),xb=c("Cast table values to another schema"),Ib=r(),ot=n("div"),p(hn.$$.fragment),Db=r(),$r=n("p"),Cb=c(`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),Pb=r(),R=n("div"),p(bn.$$.fragment),Lb=r(),Tr=n("p"),Ab=c("Add column to Table at position."),Nb=r(),wr=n("p"),jb=c(`A new table is returned with the column added, the original table
object is left unchanged.`),Fb=r(),rt=n("div"),p(un.$$.fragment),Vb=r(),kr=n("p"),Sb=c("Append column at end of columns."),qb=r(),lt=n("div"),p(gn.$$.fragment),Rb=r(),Er=n("p"),Ub=c("Create new Table with the indicated column removed."),zb=r(),ct=n("div"),p(fn.$$.fragment),Bb=r(),Mr=n("p"),Ob=c("Replace column in Table at position."),Wb=r(),dt=n("div"),p(yn.$$.fragment),Xb=r(),xr=n("p"),Hb=c("Create new table with columns renamed to provided names."),Gb=r(),it=n("div"),p(vn.$$.fragment),Yb=r(),Ir=n("p"),Jb=c("Drop one or more columns and return a new table."),Kb=r(),ps=n("div"),p(_n.$$.fragment),xl=r(),J=n("h2"),pt=n("a"),Dr=n("span"),p($n.$$.fragment),Qb=r(),Cr=n("span"),Zb=c("ConcatenationTable"),Il=r(),_=n("div"),p(Tn.$$.fragment),eu=r(),Pr=n("p"),tu=c(`The table comes from the concatenation of several tables called blocks.
It enables concatenation on both axis 0 (append rows) and axis 1 (append columns).`),au=r(),Lr=n("p"),nu=c(`The underlying tables are called \u201Cblocks\u201D and can be either InMemoryTable
or MemoryMappedTable objects.
This allows to combine tables that come from memory or that are memory mapped.
When a ConcatenationTable is pickled, then each block is pickled:`),su=r(),wn=n("ul"),Ar=n("li"),ou=c("the InMemoryTable objects are pickled by copying all the data in memory;"),ru=r(),Nr=n("li"),lu=c(`the MemoryMappedTable objects are pickled without copying the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplays\u201D when reloading the table from the disk.`),cu=r(),kn=n("p"),du=c(`Its implementation requires to store each block separately.
The `),jr=n("code"),iu=c("blocks"),pu=c(` attributes stores a list of list of blocks.
The first axis concatenates the tables along the axis 0 (it appends rows),
while the second axis concatenates tables along the axis 1 (it appends columns).`),mu=r(),Fr=n("p"),hu=c(`You can access the fully combined table by accessing the ConcatenationTable.table attribute,
and the blocks by accessing the ConcatenationTable.blocks attribute.`),bu=r(),U=n("div"),p(En.$$.fragment),uu=r(),Vr=n("p"),gu=c("Perform validation checks.  An exception is raised if validation fails."),fu=r(),Mn=n("p"),yu=c("By default only cheap validation checks are run.  Pass "),Sr=n("em"),vu=c("full=True"),_u=c(`
for thorough validation checks (potentially O(n)).`),$u=r(),mt=n("div"),p(xn.$$.fragment),Tu=r(),qr=n("p"),wu=c("Check if contents of two tables are equal."),ku=r(),ht=n("div"),p(In.$$.fragment),Eu=r(),Rr=n("p"),Mu=c("Convert Table to list of (contiguous) RecordBatch objects."),xu=r(),bt=n("div"),p(Dn.$$.fragment),Iu=r(),Ur=n("p"),Du=c("Convert the Table to a dict or OrderedDict."),Cu=r(),ut=n("div"),p(Cn.$$.fragment),Pu=r(),zr=n("p"),Lu=c("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Au=r(),ms=n("div"),p(Pn.$$.fragment),Nu=r(),gt=n("div"),p(Ln.$$.fragment),ju=r(),Br=n("p"),Fu=c("Select a schema field by its column name or numeric index."),Vu=r(),ft=n("div"),p(An.$$.fragment),Su=r(),Or=n("p"),qu=c("Select a column by its column name, or numeric index."),Ru=r(),yt=n("div"),p(Nn.$$.fragment),Uu=r(),Wr=n("p"),zu=c("Iterator over all columns in their numerical order."),Bu=r(),vt=n("div"),p(jn.$$.fragment),Ou=r(),Xr=n("p"),Wu=c("Schema of the table and its columns."),Xu=r(),_t=n("div"),p(Fn.$$.fragment),Hu=r(),Hr=n("p"),Gu=c("List of all columns in numerical order."),Yu=r(),$t=n("div"),p(Vn.$$.fragment),Ju=r(),Gr=n("p"),Ku=c("Number of columns in this table."),Qu=r(),z=n("div"),p(Sn.$$.fragment),Zu=r(),Yr=n("p"),eg=c("Number of rows in this table."),tg=r(),Jr=n("p"),ag=c(`Due to the definition of a table, all columns have the same number of
rows.`),ng=r(),Tt=n("div"),p(qn.$$.fragment),sg=r(),Kr=n("p"),og=c("Dimensions of the table: (#rows, #columns)."),rg=r(),wt=n("div"),p(Rn.$$.fragment),lg=r(),Qr=n("p"),cg=c("Total number of bytes consumed by the elements of the table."),dg=r(),kt=n("div"),p(Un.$$.fragment),ig=r(),Zr=n("p"),pg=c("Names of the table\u2019s columns"),mg=r(),Et=n("div"),p(zn.$$.fragment),hg=r(),el=n("p"),bg=c("Compute zero-copy slice of this Table"),ug=r(),Mt=n("div"),p(Bn.$$.fragment),gg=r(),tl=n("p"),fg=c("Select records from a Table. See pyarrow.compute.filter for full usage."),yg=r(),xt=n("div"),p(On.$$.fragment),vg=r(),al=n("p"),_g=c(`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),$g=r(),B=n("div"),p(Wn.$$.fragment),Tg=r(),nl=n("p"),wg=c("Make a new table by combining the chunks this table has."),kg=r(),sl=n("p"),Eg=c(`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),Mg=r(),It=n("div"),p(Xn.$$.fragment),xg=r(),ol=n("p"),Ig=c("Cast table values to another schema"),Dg=r(),Dt=n("div"),p(Hn.$$.fragment),Cg=r(),rl=n("p"),Pg=c(`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),Lg=r(),O=n("div"),p(Gn.$$.fragment),Ag=r(),ll=n("p"),Ng=c("Add column to Table at position."),jg=r(),cl=n("p"),Fg=c(`A new table is returned with the column added, the original table
object is left unchanged.`),Vg=r(),Ct=n("div"),p(Yn.$$.fragment),Sg=r(),dl=n("p"),qg=c("Append column at end of columns."),Rg=r(),Pt=n("div"),p(Jn.$$.fragment),Ug=r(),il=n("p"),zg=c("Create new Table with the indicated column removed."),Bg=r(),Lt=n("div"),p(Kn.$$.fragment),Og=r(),pl=n("p"),Wg=c("Replace column in Table at position."),Xg=r(),At=n("div"),p(Qn.$$.fragment),Hg=r(),ml=n("p"),Gg=c("Create new table with columns renamed to provided names."),Yg=r(),Nt=n("div"),p(Zn.$$.fragment),Jg=r(),hl=n("p"),Kg=c("Drop one or more columns and return a new table."),Qg=r(),hs=n("div"),p(es.$$.fragment),Zg=r(),jt=n("div"),p(ts.$$.fragment),ef=r(),bl=n("p"),tf=c("Create ConcatenationTable from list of tables."),Dl=r(),K=n("h2"),Ft=n("a"),ul=n("span"),p(as.$$.fragment),af=r(),gl=n("span"),nf=c("Utils"),Cl=r(),Q=n("div"),p(ns.$$.fragment),sf=r(),fl=n("p"),of=c("Concatenate tables."),Pl=r(),Z=n("div"),p(ss.$$.fragment),rf=r(),yl=n("p"),lf=c(`Get the cache files that are loaded by the table.
Cache file are used when parts of the table come from the disk via memory mapping.`),this.h()},l(t){const M=g_('[data-svelte="svelte-1phssyn"]',document.head);W=s(M,"META",{name:!0,content:!0}),M.forEach(a),vl=l(t),X=s(t,"H1",{class:!0});var Al=o(X);ee=s(Al,"A",{id:!0,class:!0,href:!0});var df=o(ee);Cs=s(df,"SPAN",{});var pf=o(Cs);m(Vt.$$.fragment,pf),pf.forEach(a),df.forEach(a),Md=l(Al),Ps=s(Al,"SPAN",{});var mf=o(Ps);xd=d(mf,"Table Classes"),mf.forEach(a),Al.forEach(a),_l=l(t),C=s(t,"P",{});var bs=o(C);Id=d(bs,"Each "),Ls=s(bs,"CODE",{});var hf=o(Ls);Dd=d(hf,"Dataset"),hf.forEach(a),Cd=d(bs,` object is backed by a PyArrow Table.
A Table can be loaded from either the disk (memory mapped) or in memory.
Several Table types are available, and they all inherit from `),os=s(bs,"A",{href:!0});var bf=o(os);Pd=d(bf,"table.Table"),bf.forEach(a),Ld=d(bs,"."),bs.forEach(a),$l=l(t),H=s(t,"H2",{class:!0});var Nl=o(H);te=s(Nl,"A",{id:!0,class:!0,href:!0});var uf=o(te);As=s(uf,"SPAN",{});var gf=o(As);m(St.$$.fragment,gf),gf.forEach(a),uf.forEach(a),Ad=l(Nl),Ns=s(Nl,"SPAN",{});var ff=o(Ns);Nd=d(ff,"Table"),ff.forEach(a),Nl.forEach(a),Tl=l(t),k=s(t,"DIV",{class:!0});var E=o(k);m(qt.$$.fragment,E),jd=l(E),js=s(E,"P",{});var yf=o(js);Fd=d(yf,`Wraps a pyarrow Table by using composition.
This is the base class for InMemoryTable, MemoryMappedTable and ConcatenationTable.`),yf.forEach(a),Vd=l(E),Fs=s(E,"P",{});var vf=o(Fs);Sd=d(vf,`It implements all the basic attributes/methods of the pyarrow Table class except
the Table transforms: slice, filter, flatten, combine_chunks, cast, add_column,
append_column, remove_column, set_column, rename_columns and drop.`),vf.forEach(a),qd=l(E),Vs=s(E,"P",{});var _f=o(Vs);Rd=d(_f,"The implementation of these methods differs for the subclasses."),_f.forEach(a),Ud=l(E),P=s(E,"DIV",{class:!0});var us=o(P);m(Rt.$$.fragment,us),zd=l(us),Ss=s(us,"P",{});var $f=o(Ss);Bd=d($f,"Perform validation checks.  An exception is raised if validation fails."),$f.forEach(a),Od=l(us),Ut=s(us,"P",{});var jl=o(Ut);Wd=d(jl,"By default only cheap validation checks are run.  Pass "),qs=s(jl,"EM",{});var Tf=o(qs);Xd=d(Tf,"full=True"),Tf.forEach(a),Hd=d(jl,`
for thorough validation checks (potentially O(n)).`),jl.forEach(a),us.forEach(a),Gd=l(E),ae=s(E,"DIV",{class:!0});var Fl=o(ae);m(zt.$$.fragment,Fl),Yd=l(Fl),Rs=s(Fl,"P",{});var wf=o(Rs);Jd=d(wf,"Check if contents of two tables are equal."),wf.forEach(a),Fl.forEach(a),Kd=l(E),ne=s(E,"DIV",{class:!0});var Vl=o(ne);m(Bt.$$.fragment,Vl),Qd=l(Vl),Us=s(Vl,"P",{});var kf=o(Us);Zd=d(kf,"Convert Table to list of (contiguous) RecordBatch objects."),kf.forEach(a),Vl.forEach(a),ei=l(E),se=s(E,"DIV",{class:!0});var Sl=o(se);m(Ot.$$.fragment,Sl),ti=l(Sl),zs=s(Sl,"P",{});var Ef=o(zs);ai=d(Ef,"Convert the Table to a dict or OrderedDict."),Ef.forEach(a),Sl.forEach(a),ni=l(E),oe=s(E,"DIV",{class:!0});var ql=o(oe);m(Wt.$$.fragment,ql),si=l(ql),Bs=s(ql,"P",{});var Mf=o(Bs);oi=d(Mf,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Mf.forEach(a),ql.forEach(a),ri=l(E),rs=s(E,"DIV",{class:!0});var xf=o(rs);m(Xt.$$.fragment,xf),xf.forEach(a),li=l(E),re=s(E,"DIV",{class:!0});var Rl=o(re);m(Ht.$$.fragment,Rl),ci=l(Rl),Os=s(Rl,"P",{});var If=o(Os);di=d(If,"Select a schema field by its column name or numeric index."),If.forEach(a),Rl.forEach(a),ii=l(E),le=s(E,"DIV",{class:!0});var Ul=o(le);m(Gt.$$.fragment,Ul),pi=l(Ul),Ws=s(Ul,"P",{});var Df=o(Ws);mi=d(Df,"Select a column by its column name, or numeric index."),Df.forEach(a),Ul.forEach(a),hi=l(E),ce=s(E,"DIV",{class:!0});var zl=o(ce);m(Yt.$$.fragment,zl),bi=l(zl),Xs=s(zl,"P",{});var Cf=o(Xs);ui=d(Cf,"Iterator over all columns in their numerical order."),Cf.forEach(a),zl.forEach(a),gi=l(E),de=s(E,"DIV",{class:!0});var Bl=o(de);m(Jt.$$.fragment,Bl),fi=l(Bl),Hs=s(Bl,"P",{});var Pf=o(Hs);yi=d(Pf,"Schema of the table and its columns."),Pf.forEach(a),Bl.forEach(a),vi=l(E),ie=s(E,"DIV",{class:!0});var Ol=o(ie);m(Kt.$$.fragment,Ol),_i=l(Ol),Gs=s(Ol,"P",{});var Lf=o(Gs);$i=d(Lf,"List of all columns in numerical order."),Lf.forEach(a),Ol.forEach(a),Ti=l(E),pe=s(E,"DIV",{class:!0});var Wl=o(pe);m(Qt.$$.fragment,Wl),wi=l(Wl),Ys=s(Wl,"P",{});var Af=o(Ys);ki=d(Af,"Number of columns in this table."),Af.forEach(a),Wl.forEach(a),Ei=l(E),L=s(E,"DIV",{class:!0});var gs=o(L);m(Zt.$$.fragment,gs),Mi=l(gs),Js=s(gs,"P",{});var Nf=o(Js);xi=d(Nf,"Number of rows in this table."),Nf.forEach(a),Ii=l(gs),Ks=s(gs,"P",{});var jf=o(Ks);Di=d(jf,`Due to the definition of a table, all columns have the same number of
rows.`),jf.forEach(a),gs.forEach(a),Ci=l(E),me=s(E,"DIV",{class:!0});var Xl=o(me);m(ea.$$.fragment,Xl),Pi=l(Xl),Qs=s(Xl,"P",{});var Ff=o(Qs);Li=d(Ff,"Dimensions of the table: (#rows, #columns)."),Ff.forEach(a),Xl.forEach(a),Ai=l(E),he=s(E,"DIV",{class:!0});var Hl=o(he);m(ta.$$.fragment,Hl),Ni=l(Hl),Zs=s(Hl,"P",{});var Vf=o(Zs);ji=d(Vf,"Total number of bytes consumed by the elements of the table."),Vf.forEach(a),Hl.forEach(a),E.forEach(a),wl=l(t),G=s(t,"H2",{class:!0});var Gl=o(G);be=s(Gl,"A",{id:!0,class:!0,href:!0});var Sf=o(be);eo=s(Sf,"SPAN",{});var qf=o(eo);m(aa.$$.fragment,qf),qf.forEach(a),Sf.forEach(a),Fi=l(Gl),to=s(Gl,"SPAN",{});var Rf=o(to);Vi=d(Rf,"InMemoryTable"),Rf.forEach(a),Gl.forEach(a),kl=l(t),y=s(t,"DIV",{class:!0});var v=o(y);m(na.$$.fragment,v),Si=l(v),ao=s(v,"P",{});var Uf=o(ao);qi=d(Uf,"The table is said in-memory when it is loaded into the user\u2019s RAM."),Uf.forEach(a),Ri=l(v),no=s(v,"P",{});var zf=o(no);Ui=d(zf,`Pickling it does copy all the data using memory.
Its implementation is simple and uses the underlying pyarrow Table methods directly.`),zf.forEach(a),zi=l(v),so=s(v,"P",{});var Bf=o(so);Bi=d(Bf,`This is different from the MemoryMapped table, for which pickling doesn\u2019t copy all the
data in memory. For a MemoryMapped, unpickling instead reloads the table from the disk.`),Bf.forEach(a),Oi=l(v),oo=s(v,"P",{});var Of=o(oo);Wi=d(Of,`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),Of.forEach(a),Xi=l(v),A=s(v,"DIV",{class:!0});var fs=o(A);m(sa.$$.fragment,fs),Hi=l(fs),ro=s(fs,"P",{});var Wf=o(ro);Gi=d(Wf,"Perform validation checks.  An exception is raised if validation fails."),Wf.forEach(a),Yi=l(fs),oa=s(fs,"P",{});var Yl=o(oa);Ji=d(Yl,"By default only cheap validation checks are run.  Pass "),lo=s(Yl,"EM",{});var Xf=o(lo);Ki=d(Xf,"full=True"),Xf.forEach(a),Qi=d(Yl,`
for thorough validation checks (potentially O(n)).`),Yl.forEach(a),fs.forEach(a),Zi=l(v),ue=s(v,"DIV",{class:!0});var Jl=o(ue);m(ra.$$.fragment,Jl),ep=l(Jl),co=s(Jl,"P",{});var Hf=o(co);tp=d(Hf,"Check if contents of two tables are equal."),Hf.forEach(a),Jl.forEach(a),ap=l(v),ge=s(v,"DIV",{class:!0});var Kl=o(ge);m(la.$$.fragment,Kl),np=l(Kl),io=s(Kl,"P",{});var Gf=o(io);sp=d(Gf,"Convert Table to list of (contiguous) RecordBatch objects."),Gf.forEach(a),Kl.forEach(a),op=l(v),fe=s(v,"DIV",{class:!0});var Ql=o(fe);m(ca.$$.fragment,Ql),rp=l(Ql),po=s(Ql,"P",{});var Yf=o(po);lp=d(Yf,"Convert the Table to a dict or OrderedDict."),Yf.forEach(a),Ql.forEach(a),cp=l(v),ye=s(v,"DIV",{class:!0});var Zl=o(ye);m(da.$$.fragment,Zl),dp=l(Zl),mo=s(Zl,"P",{});var Jf=o(mo);ip=d(Jf,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Jf.forEach(a),Zl.forEach(a),pp=l(v),ls=s(v,"DIV",{class:!0});var Kf=o(ls);m(ia.$$.fragment,Kf),Kf.forEach(a),mp=l(v),ve=s(v,"DIV",{class:!0});var ec=o(ve);m(pa.$$.fragment,ec),hp=l(ec),ho=s(ec,"P",{});var Qf=o(ho);bp=d(Qf,"Select a schema field by its column name or numeric index."),Qf.forEach(a),ec.forEach(a),up=l(v),_e=s(v,"DIV",{class:!0});var tc=o(_e);m(ma.$$.fragment,tc),gp=l(tc),bo=s(tc,"P",{});var Zf=o(bo);fp=d(Zf,"Select a column by its column name, or numeric index."),Zf.forEach(a),tc.forEach(a),yp=l(v),$e=s(v,"DIV",{class:!0});var ac=o($e);m(ha.$$.fragment,ac),vp=l(ac),uo=s(ac,"P",{});var ey=o(uo);_p=d(ey,"Iterator over all columns in their numerical order."),ey.forEach(a),ac.forEach(a),$p=l(v),Te=s(v,"DIV",{class:!0});var nc=o(Te);m(ba.$$.fragment,nc),Tp=l(nc),go=s(nc,"P",{});var ty=o(go);wp=d(ty,"Schema of the table and its columns."),ty.forEach(a),nc.forEach(a),kp=l(v),we=s(v,"DIV",{class:!0});var sc=o(we);m(ua.$$.fragment,sc),Ep=l(sc),fo=s(sc,"P",{});var ay=o(fo);Mp=d(ay,"List of all columns in numerical order."),ay.forEach(a),sc.forEach(a),xp=l(v),ke=s(v,"DIV",{class:!0});var oc=o(ke);m(ga.$$.fragment,oc),Ip=l(oc),yo=s(oc,"P",{});var ny=o(yo);Dp=d(ny,"Number of columns in this table."),ny.forEach(a),oc.forEach(a),Cp=l(v),N=s(v,"DIV",{class:!0});var ys=o(N);m(fa.$$.fragment,ys),Pp=l(ys),vo=s(ys,"P",{});var sy=o(vo);Lp=d(sy,"Number of rows in this table."),sy.forEach(a),Ap=l(ys),_o=s(ys,"P",{});var oy=o(_o);Np=d(oy,`Due to the definition of a table, all columns have the same number of
rows.`),oy.forEach(a),ys.forEach(a),jp=l(v),Ee=s(v,"DIV",{class:!0});var rc=o(Ee);m(ya.$$.fragment,rc),Fp=l(rc),$o=s(rc,"P",{});var ry=o($o);Vp=d(ry,"Dimensions of the table: (#rows, #columns)."),ry.forEach(a),rc.forEach(a),Sp=l(v),Me=s(v,"DIV",{class:!0});var lc=o(Me);m(va.$$.fragment,lc),qp=l(lc),To=s(lc,"P",{});var ly=o(To);Rp=d(ly,"Total number of bytes consumed by the elements of the table."),ly.forEach(a),lc.forEach(a),Up=l(v),xe=s(v,"DIV",{class:!0});var cc=o(xe);m(_a.$$.fragment,cc),zp=l(cc),wo=s(cc,"P",{});var cy=o(wo);Bp=d(cy,"Names of the table\u2019s columns"),cy.forEach(a),cc.forEach(a),Op=l(v),Ie=s(v,"DIV",{class:!0});var dc=o(Ie);m($a.$$.fragment,dc),Wp=l(dc),ko=s(dc,"P",{});var dy=o(ko);Xp=d(dy,"Compute zero-copy slice of this Table"),dy.forEach(a),dc.forEach(a),Hp=l(v),De=s(v,"DIV",{class:!0});var ic=o(De);m(Ta.$$.fragment,ic),Gp=l(ic),Eo=s(ic,"P",{});var iy=o(Eo);Yp=d(iy,"Select records from a Table. See pyarrow.compute.filter for full usage."),iy.forEach(a),ic.forEach(a),Jp=l(v),Ce=s(v,"DIV",{class:!0});var pc=o(Ce);m(wa.$$.fragment,pc),Kp=l(pc),Mo=s(pc,"P",{});var py=o(Mo);Qp=d(py,`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),py.forEach(a),pc.forEach(a),Zp=l(v),j=s(v,"DIV",{class:!0});var vs=o(j);m(ka.$$.fragment,vs),em=l(vs),xo=s(vs,"P",{});var my=o(xo);tm=d(my,"Make a new table by combining the chunks this table has."),my.forEach(a),am=l(vs),Io=s(vs,"P",{});var hy=o(Io);nm=d(hy,`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),hy.forEach(a),vs.forEach(a),sm=l(v),Pe=s(v,"DIV",{class:!0});var mc=o(Pe);m(Ea.$$.fragment,mc),om=l(mc),Do=s(mc,"P",{});var by=o(Do);rm=d(by,"Cast table values to another schema"),by.forEach(a),mc.forEach(a),lm=l(v),Le=s(v,"DIV",{class:!0});var hc=o(Le);m(Ma.$$.fragment,hc),cm=l(hc),Co=s(hc,"P",{});var uy=o(Co);dm=d(uy,`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),uy.forEach(a),hc.forEach(a),im=l(v),F=s(v,"DIV",{class:!0});var _s=o(F);m(xa.$$.fragment,_s),pm=l(_s),Po=s(_s,"P",{});var gy=o(Po);mm=d(gy,"Add column to Table at position."),gy.forEach(a),hm=l(_s),Lo=s(_s,"P",{});var fy=o(Lo);bm=d(fy,`A new table is returned with the column added, the original table
object is left unchanged.`),fy.forEach(a),_s.forEach(a),um=l(v),Ae=s(v,"DIV",{class:!0});var bc=o(Ae);m(Ia.$$.fragment,bc),gm=l(bc),Ao=s(bc,"P",{});var yy=o(Ao);fm=d(yy,"Append column at end of columns."),yy.forEach(a),bc.forEach(a),ym=l(v),Ne=s(v,"DIV",{class:!0});var uc=o(Ne);m(Da.$$.fragment,uc),vm=l(uc),No=s(uc,"P",{});var vy=o(No);_m=d(vy,"Create new Table with the indicated column removed."),vy.forEach(a),uc.forEach(a),$m=l(v),je=s(v,"DIV",{class:!0});var gc=o(je);m(Ca.$$.fragment,gc),Tm=l(gc),jo=s(gc,"P",{});var _y=o(jo);wm=d(_y,"Replace column in Table at position."),_y.forEach(a),gc.forEach(a),km=l(v),Fe=s(v,"DIV",{class:!0});var fc=o(Fe);m(Pa.$$.fragment,fc),Em=l(fc),Fo=s(fc,"P",{});var $y=o(Fo);Mm=d($y,"Create new table with columns renamed to provided names."),$y.forEach(a),fc.forEach(a),xm=l(v),Ve=s(v,"DIV",{class:!0});var yc=o(Ve);m(La.$$.fragment,yc),Im=l(yc),Vo=s(yc,"P",{});var Ty=o(Vo);Dm=d(Ty,"Drop one or more columns and return a new table."),Ty.forEach(a),yc.forEach(a),Cm=l(v),cs=s(v,"DIV",{class:!0});var wy=o(cs);m(Aa.$$.fragment,wy),wy.forEach(a),Pm=l(v),ds=s(v,"DIV",{class:!0});var ky=o(ds);m(Na.$$.fragment,ky),ky.forEach(a),Lm=l(v),I=s(v,"DIV",{class:!0});var D=o(I);m(ja.$$.fragment,D),Am=l(D),So=s(D,"P",{});var Ey=o(So);Nm=d(Ey,"Convert pandas.DataFrame to an Arrow Table."),Ey.forEach(a),jm=l(D),Fa=s(D,"P",{});var vc=o(Fa);Fm=d(vc,`The column types in the resulting Arrow Table are inferred from the
dtypes of the pandas.Series in the DataFrame. In the case of non-object
Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),qo=s(vc,"EM",{});var My=o(qo);Vm=d(My,"object"),My.forEach(a),Sm=d(vc,`, we need to guess the datatype by looking at the
Python objects in this Series.`),vc.forEach(a),qm=l(D),Va=s(D,"P",{});var _c=o(Va);Rm=d(_c,"Be aware that Series of the "),Ro=s(_c,"EM",{});var xy=o(Ro);Um=d(xy,"object"),xy.forEach(a),zm=d(_c,` dtype don\u2019t carry enough
information to always lead to a meaningful Arrow type. In the case that
we cannot infer a type, e.g. because the DataFrame is of length 0 or
the Series only contains None/nan objects, the type is set to
null. This behavior can be avoided by constructing an explicit schema
and passing it to this function.`),_c.forEach(a),Bm=l(D),Uo=s(D,"P",{});var Iy=o(Uo);Om=d(Iy,"Examples:"),Iy.forEach(a),Wm=l(D),m(Sa.$$.fragment,D),D.forEach(a),Xm=l(v),Se=s(v,"DIV",{class:!0});var $c=o(Se);m(qa.$$.fragment,$c),Hm=l($c),zo=s($c,"P",{});var Dy=o(zo);Gm=d(Dy,"Construct a Table from Arrow arrays"),Dy.forEach(a),$c.forEach(a),Ym=l(v),qe=s(v,"DIV",{class:!0});var Tc=o(qe);m(Ra.$$.fragment,Tc),Jm=l(Tc),Bo=s(Tc,"P",{});var Cy=o(Bo);Km=d(Cy,"Construct a Table from Arrow arrays or columns"),Cy.forEach(a),Tc.forEach(a),Qm=l(v),Re=s(v,"DIV",{class:!0});var wc=o(Re);m(Ua.$$.fragment,wc),Zm=l(wc),Oo=s(wc,"P",{});var Py=o(Oo);eh=d(Py,"Construct a Table from a sequence or iterator of Arrow RecordBatches."),Py.forEach(a),wc.forEach(a),v.forEach(a),El=l(t),Y=s(t,"H2",{class:!0});var kc=o(Y);Ue=s(kc,"A",{id:!0,class:!0,href:!0});var Ly=o(Ue);Wo=s(Ly,"SPAN",{});var Ay=o(Wo);m(za.$$.fragment,Ay),Ay.forEach(a),Ly.forEach(a),th=l(kc),Xo=s(kc,"SPAN",{});var Ny=o(Xo);ah=d(Ny,"MemoryMappedTable"),Ny.forEach(a),kc.forEach(a),Ml=l(t),$=s(t,"DIV",{class:!0});var w=o($);m(Ba.$$.fragment,w),nh=l(w),Ho=s(w,"P",{});var jy=o(Ho);sh=d(jy,`The table is said memory mapped when it doesn\u2019t use the user\u2019s RAM but loads the data
from the disk instead.`),jy.forEach(a),oh=l(w),Go=s(w,"P",{});var Fy=o(Go);rh=d(Fy,`Pickling it doesn\u2019t copy the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplay\u201D when reloading the table from the disk.`),Fy.forEach(a),lh=l(w),Yo=s(w,"P",{});var Vy=o(Yo);ch=d(Vy,`Its implementation requires to store an history of all the transforms that were applied
to the underlying pyarrow Table, so that they can be \u201Creplayed\u201D when reloading the Table
from the disk.`),Vy.forEach(a),dh=l(w),Jo=s(w,"P",{});var Sy=o(Jo);ih=d(Sy,`This is different from the InMemoryTable table, for which pickling does copy all the
data in memory.`),Sy.forEach(a),ph=l(w),Ko=s(w,"P",{});var qy=o(Ko);mh=d(qy,`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),qy.forEach(a),hh=l(w),V=s(w,"DIV",{class:!0});var $s=o(V);m(Oa.$$.fragment,$s),bh=l($s),Qo=s($s,"P",{});var Ry=o(Qo);uh=d(Ry,"Perform validation checks.  An exception is raised if validation fails."),Ry.forEach(a),gh=l($s),Wa=s($s,"P",{});var Ec=o(Wa);fh=d(Ec,"By default only cheap validation checks are run.  Pass "),Zo=s(Ec,"EM",{});var Uy=o(Zo);yh=d(Uy,"full=True"),Uy.forEach(a),vh=d(Ec,`
for thorough validation checks (potentially O(n)).`),Ec.forEach(a),$s.forEach(a),_h=l(w),ze=s(w,"DIV",{class:!0});var Mc=o(ze);m(Xa.$$.fragment,Mc),$h=l(Mc),er=s(Mc,"P",{});var zy=o(er);Th=d(zy,"Check if contents of two tables are equal."),zy.forEach(a),Mc.forEach(a),wh=l(w),Be=s(w,"DIV",{class:!0});var xc=o(Be);m(Ha.$$.fragment,xc),kh=l(xc),tr=s(xc,"P",{});var By=o(tr);Eh=d(By,"Convert Table to list of (contiguous) RecordBatch objects."),By.forEach(a),xc.forEach(a),Mh=l(w),Oe=s(w,"DIV",{class:!0});var Ic=o(Oe);m(Ga.$$.fragment,Ic),xh=l(Ic),ar=s(Ic,"P",{});var Oy=o(ar);Ih=d(Oy,"Convert the Table to a dict or OrderedDict."),Oy.forEach(a),Ic.forEach(a),Dh=l(w),We=s(w,"DIV",{class:!0});var Dc=o(We);m(Ya.$$.fragment,Dc),Ch=l(Dc),nr=s(Dc,"P",{});var Wy=o(nr);Ph=d(Wy,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Wy.forEach(a),Dc.forEach(a),Lh=l(w),is=s(w,"DIV",{class:!0});var Xy=o(is);m(Ja.$$.fragment,Xy),Xy.forEach(a),Ah=l(w),Xe=s(w,"DIV",{class:!0});var Cc=o(Xe);m(Ka.$$.fragment,Cc),Nh=l(Cc),sr=s(Cc,"P",{});var Hy=o(sr);jh=d(Hy,"Select a schema field by its column name or numeric index."),Hy.forEach(a),Cc.forEach(a),Fh=l(w),He=s(w,"DIV",{class:!0});var Pc=o(He);m(Qa.$$.fragment,Pc),Vh=l(Pc),or=s(Pc,"P",{});var Gy=o(or);Sh=d(Gy,"Select a column by its column name, or numeric index."),Gy.forEach(a),Pc.forEach(a),qh=l(w),Ge=s(w,"DIV",{class:!0});var Lc=o(Ge);m(Za.$$.fragment,Lc),Rh=l(Lc),rr=s(Lc,"P",{});var Yy=o(rr);Uh=d(Yy,"Iterator over all columns in their numerical order."),Yy.forEach(a),Lc.forEach(a),zh=l(w),Ye=s(w,"DIV",{class:!0});var Ac=o(Ye);m(en.$$.fragment,Ac),Bh=l(Ac),lr=s(Ac,"P",{});var Jy=o(lr);Oh=d(Jy,"Schema of the table and its columns."),Jy.forEach(a),Ac.forEach(a),Wh=l(w),Je=s(w,"DIV",{class:!0});var Nc=o(Je);m(tn.$$.fragment,Nc),Xh=l(Nc),cr=s(Nc,"P",{});var Ky=o(cr);Hh=d(Ky,"List of all columns in numerical order."),Ky.forEach(a),Nc.forEach(a),Gh=l(w),Ke=s(w,"DIV",{class:!0});var jc=o(Ke);m(an.$$.fragment,jc),Yh=l(jc),dr=s(jc,"P",{});var Qy=o(dr);Jh=d(Qy,"Number of columns in this table."),Qy.forEach(a),jc.forEach(a),Kh=l(w),S=s(w,"DIV",{class:!0});var Ts=o(S);m(nn.$$.fragment,Ts),Qh=l(Ts),ir=s(Ts,"P",{});var Zy=o(ir);Zh=d(Zy,"Number of rows in this table."),Zy.forEach(a),eb=l(Ts),pr=s(Ts,"P",{});var ev=o(pr);tb=d(ev,`Due to the definition of a table, all columns have the same number of
rows.`),ev.forEach(a),Ts.forEach(a),ab=l(w),Qe=s(w,"DIV",{class:!0});var Fc=o(Qe);m(sn.$$.fragment,Fc),nb=l(Fc),mr=s(Fc,"P",{});var tv=o(mr);sb=d(tv,"Dimensions of the table: (#rows, #columns)."),tv.forEach(a),Fc.forEach(a),ob=l(w),Ze=s(w,"DIV",{class:!0});var Vc=o(Ze);m(on.$$.fragment,Vc),rb=l(Vc),hr=s(Vc,"P",{});var av=o(hr);lb=d(av,"Total number of bytes consumed by the elements of the table."),av.forEach(a),Vc.forEach(a),cb=l(w),et=s(w,"DIV",{class:!0});var Sc=o(et);m(rn.$$.fragment,Sc),db=l(Sc),br=s(Sc,"P",{});var nv=o(br);ib=d(nv,"Names of the table\u2019s columns"),nv.forEach(a),Sc.forEach(a),pb=l(w),tt=s(w,"DIV",{class:!0});var qc=o(tt);m(ln.$$.fragment,qc),mb=l(qc),ur=s(qc,"P",{});var sv=o(ur);hb=d(sv,"Compute zero-copy slice of this Table"),sv.forEach(a),qc.forEach(a),bb=l(w),at=s(w,"DIV",{class:!0});var Rc=o(at);m(cn.$$.fragment,Rc),ub=l(Rc),gr=s(Rc,"P",{});var ov=o(gr);gb=d(ov,"Select records from a Table. See pyarrow.compute.filter for full usage."),ov.forEach(a),Rc.forEach(a),fb=l(w),nt=s(w,"DIV",{class:!0});var Uc=o(nt);m(dn.$$.fragment,Uc),yb=l(Uc),fr=s(Uc,"P",{});var rv=o(fr);vb=d(rv,`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),rv.forEach(a),Uc.forEach(a),_b=l(w),q=s(w,"DIV",{class:!0});var ws=o(q);m(pn.$$.fragment,ws),$b=l(ws),yr=s(ws,"P",{});var lv=o(yr);Tb=d(lv,"Make a new table by combining the chunks this table has."),lv.forEach(a),wb=l(ws),vr=s(ws,"P",{});var cv=o(vr);kb=d(cv,`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),cv.forEach(a),ws.forEach(a),Eb=l(w),st=s(w,"DIV",{class:!0});var zc=o(st);m(mn.$$.fragment,zc),Mb=l(zc),_r=s(zc,"P",{});var dv=o(_r);xb=d(dv,"Cast table values to another schema"),dv.forEach(a),zc.forEach(a),Ib=l(w),ot=s(w,"DIV",{class:!0});var Bc=o(ot);m(hn.$$.fragment,Bc),Db=l(Bc),$r=s(Bc,"P",{});var iv=o($r);Cb=d(iv,`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),iv.forEach(a),Bc.forEach(a),Pb=l(w),R=s(w,"DIV",{class:!0});var ks=o(R);m(bn.$$.fragment,ks),Lb=l(ks),Tr=s(ks,"P",{});var pv=o(Tr);Ab=d(pv,"Add column to Table at position."),pv.forEach(a),Nb=l(ks),wr=s(ks,"P",{});var mv=o(wr);jb=d(mv,`A new table is returned with the column added, the original table
object is left unchanged.`),mv.forEach(a),ks.forEach(a),Fb=l(w),rt=s(w,"DIV",{class:!0});var Oc=o(rt);m(un.$$.fragment,Oc),Vb=l(Oc),kr=s(Oc,"P",{});var hv=o(kr);Sb=d(hv,"Append column at end of columns."),hv.forEach(a),Oc.forEach(a),qb=l(w),lt=s(w,"DIV",{class:!0});var Wc=o(lt);m(gn.$$.fragment,Wc),Rb=l(Wc),Er=s(Wc,"P",{});var bv=o(Er);Ub=d(bv,"Create new Table with the indicated column removed."),bv.forEach(a),Wc.forEach(a),zb=l(w),ct=s(w,"DIV",{class:!0});var Xc=o(ct);m(fn.$$.fragment,Xc),Bb=l(Xc),Mr=s(Xc,"P",{});var uv=o(Mr);Ob=d(uv,"Replace column in Table at position."),uv.forEach(a),Xc.forEach(a),Wb=l(w),dt=s(w,"DIV",{class:!0});var Hc=o(dt);m(yn.$$.fragment,Hc),Xb=l(Hc),xr=s(Hc,"P",{});var gv=o(xr);Hb=d(gv,"Create new table with columns renamed to provided names."),gv.forEach(a),Hc.forEach(a),Gb=l(w),it=s(w,"DIV",{class:!0});var Gc=o(it);m(vn.$$.fragment,Gc),Yb=l(Gc),Ir=s(Gc,"P",{});var fv=o(Ir);Jb=d(fv,"Drop one or more columns and return a new table."),fv.forEach(a),Gc.forEach(a),Kb=l(w),ps=s(w,"DIV",{class:!0});var yv=o(ps);m(_n.$$.fragment,yv),yv.forEach(a),w.forEach(a),xl=l(t),J=s(t,"H2",{class:!0});var Yc=o(J);pt=s(Yc,"A",{id:!0,class:!0,href:!0});var vv=o(pt);Dr=s(vv,"SPAN",{});var _v=o(Dr);m($n.$$.fragment,_v),_v.forEach(a),vv.forEach(a),Qb=l(Yc),Cr=s(Yc,"SPAN",{});var $v=o(Cr);Zb=d($v,"ConcatenationTable"),$v.forEach(a),Yc.forEach(a),Il=l(t),_=s(t,"DIV",{class:!0});var T=o(_);m(Tn.$$.fragment,T),eu=l(T),Pr=s(T,"P",{});var Tv=o(Pr);tu=d(Tv,`The table comes from the concatenation of several tables called blocks.
It enables concatenation on both axis 0 (append rows) and axis 1 (append columns).`),Tv.forEach(a),au=l(T),Lr=s(T,"P",{});var wv=o(Lr);nu=d(wv,`The underlying tables are called \u201Cblocks\u201D and can be either InMemoryTable
or MemoryMappedTable objects.
This allows to combine tables that come from memory or that are memory mapped.
When a ConcatenationTable is pickled, then each block is pickled:`),wv.forEach(a),su=l(T),wn=s(T,"UL",{});var Jc=o(wn);Ar=s(Jc,"LI",{});var kv=o(Ar);ou=d(kv,"the InMemoryTable objects are pickled by copying all the data in memory;"),kv.forEach(a),ru=l(Jc),Nr=s(Jc,"LI",{});var Ev=o(Nr);lu=d(Ev,`the MemoryMappedTable objects are pickled without copying the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplays\u201D when reloading the table from the disk.`),Ev.forEach(a),Jc.forEach(a),cu=l(T),kn=s(T,"P",{});var Kc=o(kn);du=d(Kc,`Its implementation requires to store each block separately.
The `),jr=s(Kc,"CODE",{});var Mv=o(jr);iu=d(Mv,"blocks"),Mv.forEach(a),pu=d(Kc,` attributes stores a list of list of blocks.
The first axis concatenates the tables along the axis 0 (it appends rows),
while the second axis concatenates tables along the axis 1 (it appends columns).`),Kc.forEach(a),mu=l(T),Fr=s(T,"P",{});var xv=o(Fr);hu=d(xv,`You can access the fully combined table by accessing the ConcatenationTable.table attribute,
and the blocks by accessing the ConcatenationTable.blocks attribute.`),xv.forEach(a),bu=l(T),U=s(T,"DIV",{class:!0});var Es=o(U);m(En.$$.fragment,Es),uu=l(Es),Vr=s(Es,"P",{});var Iv=o(Vr);gu=d(Iv,"Perform validation checks.  An exception is raised if validation fails."),Iv.forEach(a),fu=l(Es),Mn=s(Es,"P",{});var Qc=o(Mn);yu=d(Qc,"By default only cheap validation checks are run.  Pass "),Sr=s(Qc,"EM",{});var Dv=o(Sr);vu=d(Dv,"full=True"),Dv.forEach(a),_u=d(Qc,`
for thorough validation checks (potentially O(n)).`),Qc.forEach(a),Es.forEach(a),$u=l(T),mt=s(T,"DIV",{class:!0});var Zc=o(mt);m(xn.$$.fragment,Zc),Tu=l(Zc),qr=s(Zc,"P",{});var Cv=o(qr);wu=d(Cv,"Check if contents of two tables are equal."),Cv.forEach(a),Zc.forEach(a),ku=l(T),ht=s(T,"DIV",{class:!0});var ed=o(ht);m(In.$$.fragment,ed),Eu=l(ed),Rr=s(ed,"P",{});var Pv=o(Rr);Mu=d(Pv,"Convert Table to list of (contiguous) RecordBatch objects."),Pv.forEach(a),ed.forEach(a),xu=l(T),bt=s(T,"DIV",{class:!0});var td=o(bt);m(Dn.$$.fragment,td),Iu=l(td),Ur=s(td,"P",{});var Lv=o(Ur);Du=d(Lv,"Convert the Table to a dict or OrderedDict."),Lv.forEach(a),td.forEach(a),Cu=l(T),ut=s(T,"DIV",{class:!0});var ad=o(ut);m(Cn.$$.fragment,ad),Pu=l(ad),zr=s(ad,"P",{});var Av=o(zr);Lu=d(Av,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Av.forEach(a),ad.forEach(a),Au=l(T),ms=s(T,"DIV",{class:!0});var Nv=o(ms);m(Pn.$$.fragment,Nv),Nv.forEach(a),Nu=l(T),gt=s(T,"DIV",{class:!0});var nd=o(gt);m(Ln.$$.fragment,nd),ju=l(nd),Br=s(nd,"P",{});var jv=o(Br);Fu=d(jv,"Select a schema field by its column name or numeric index."),jv.forEach(a),nd.forEach(a),Vu=l(T),ft=s(T,"DIV",{class:!0});var sd=o(ft);m(An.$$.fragment,sd),Su=l(sd),Or=s(sd,"P",{});var Fv=o(Or);qu=d(Fv,"Select a column by its column name, or numeric index."),Fv.forEach(a),sd.forEach(a),Ru=l(T),yt=s(T,"DIV",{class:!0});var od=o(yt);m(Nn.$$.fragment,od),Uu=l(od),Wr=s(od,"P",{});var Vv=o(Wr);zu=d(Vv,"Iterator over all columns in their numerical order."),Vv.forEach(a),od.forEach(a),Bu=l(T),vt=s(T,"DIV",{class:!0});var rd=o(vt);m(jn.$$.fragment,rd),Ou=l(rd),Xr=s(rd,"P",{});var Sv=o(Xr);Wu=d(Sv,"Schema of the table and its columns."),Sv.forEach(a),rd.forEach(a),Xu=l(T),_t=s(T,"DIV",{class:!0});var ld=o(_t);m(Fn.$$.fragment,ld),Hu=l(ld),Hr=s(ld,"P",{});var qv=o(Hr);Gu=d(qv,"List of all columns in numerical order."),qv.forEach(a),ld.forEach(a),Yu=l(T),$t=s(T,"DIV",{class:!0});var cd=o($t);m(Vn.$$.fragment,cd),Ju=l(cd),Gr=s(cd,"P",{});var Rv=o(Gr);Ku=d(Rv,"Number of columns in this table."),Rv.forEach(a),cd.forEach(a),Qu=l(T),z=s(T,"DIV",{class:!0});var Ms=o(z);m(Sn.$$.fragment,Ms),Zu=l(Ms),Yr=s(Ms,"P",{});var Uv=o(Yr);eg=d(Uv,"Number of rows in this table."),Uv.forEach(a),tg=l(Ms),Jr=s(Ms,"P",{});var zv=o(Jr);ag=d(zv,`Due to the definition of a table, all columns have the same number of
rows.`),zv.forEach(a),Ms.forEach(a),ng=l(T),Tt=s(T,"DIV",{class:!0});var dd=o(Tt);m(qn.$$.fragment,dd),sg=l(dd),Kr=s(dd,"P",{});var Bv=o(Kr);og=d(Bv,"Dimensions of the table: (#rows, #columns)."),Bv.forEach(a),dd.forEach(a),rg=l(T),wt=s(T,"DIV",{class:!0});var id=o(wt);m(Rn.$$.fragment,id),lg=l(id),Qr=s(id,"P",{});var Ov=o(Qr);cg=d(Ov,"Total number of bytes consumed by the elements of the table."),Ov.forEach(a),id.forEach(a),dg=l(T),kt=s(T,"DIV",{class:!0});var pd=o(kt);m(Un.$$.fragment,pd),ig=l(pd),Zr=s(pd,"P",{});var Wv=o(Zr);pg=d(Wv,"Names of the table\u2019s columns"),Wv.forEach(a),pd.forEach(a),mg=l(T),Et=s(T,"DIV",{class:!0});var md=o(Et);m(zn.$$.fragment,md),hg=l(md),el=s(md,"P",{});var Xv=o(el);bg=d(Xv,"Compute zero-copy slice of this Table"),Xv.forEach(a),md.forEach(a),ug=l(T),Mt=s(T,"DIV",{class:!0});var hd=o(Mt);m(Bn.$$.fragment,hd),gg=l(hd),tl=s(hd,"P",{});var Hv=o(tl);fg=d(Hv,"Select records from a Table. See pyarrow.compute.filter for full usage."),Hv.forEach(a),hd.forEach(a),yg=l(T),xt=s(T,"DIV",{class:!0});var bd=o(xt);m(On.$$.fragment,bd),vg=l(bd),al=s(bd,"P",{});var Gv=o(al);_g=d(Gv,`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),Gv.forEach(a),bd.forEach(a),$g=l(T),B=s(T,"DIV",{class:!0});var xs=o(B);m(Wn.$$.fragment,xs),Tg=l(xs),nl=s(xs,"P",{});var Yv=o(nl);wg=d(Yv,"Make a new table by combining the chunks this table has."),Yv.forEach(a),kg=l(xs),sl=s(xs,"P",{});var Jv=o(sl);Eg=d(Jv,`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),Jv.forEach(a),xs.forEach(a),Mg=l(T),It=s(T,"DIV",{class:!0});var ud=o(It);m(Xn.$$.fragment,ud),xg=l(ud),ol=s(ud,"P",{});var Kv=o(ol);Ig=d(Kv,"Cast table values to another schema"),Kv.forEach(a),ud.forEach(a),Dg=l(T),Dt=s(T,"DIV",{class:!0});var gd=o(Dt);m(Hn.$$.fragment,gd),Cg=l(gd),rl=s(gd,"P",{});var Qv=o(rl);Pg=d(Qv,`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),Qv.forEach(a),gd.forEach(a),Lg=l(T),O=s(T,"DIV",{class:!0});var Is=o(O);m(Gn.$$.fragment,Is),Ag=l(Is),ll=s(Is,"P",{});var Zv=o(ll);Ng=d(Zv,"Add column to Table at position."),Zv.forEach(a),jg=l(Is),cl=s(Is,"P",{});var e_=o(cl);Fg=d(e_,`A new table is returned with the column added, the original table
object is left unchanged.`),e_.forEach(a),Is.forEach(a),Vg=l(T),Ct=s(T,"DIV",{class:!0});var fd=o(Ct);m(Yn.$$.fragment,fd),Sg=l(fd),dl=s(fd,"P",{});var t_=o(dl);qg=d(t_,"Append column at end of columns."),t_.forEach(a),fd.forEach(a),Rg=l(T),Pt=s(T,"DIV",{class:!0});var yd=o(Pt);m(Jn.$$.fragment,yd),Ug=l(yd),il=s(yd,"P",{});var a_=o(il);zg=d(a_,"Create new Table with the indicated column removed."),a_.forEach(a),yd.forEach(a),Bg=l(T),Lt=s(T,"DIV",{class:!0});var vd=o(Lt);m(Kn.$$.fragment,vd),Og=l(vd),pl=s(vd,"P",{});var n_=o(pl);Wg=d(n_,"Replace column in Table at position."),n_.forEach(a),vd.forEach(a),Xg=l(T),At=s(T,"DIV",{class:!0});var _d=o(At);m(Qn.$$.fragment,_d),Hg=l(_d),ml=s(_d,"P",{});var s_=o(ml);Gg=d(s_,"Create new table with columns renamed to provided names."),s_.forEach(a),_d.forEach(a),Yg=l(T),Nt=s(T,"DIV",{class:!0});var $d=o(Nt);m(Zn.$$.fragment,$d),Jg=l($d),hl=s($d,"P",{});var o_=o(hl);Kg=d(o_,"Drop one or more columns and return a new table."),o_.forEach(a),$d.forEach(a),Qg=l(T),hs=s(T,"DIV",{class:!0});var r_=o(hs);m(es.$$.fragment,r_),r_.forEach(a),Zg=l(T),jt=s(T,"DIV",{class:!0});var Td=o(jt);m(ts.$$.fragment,Td),ef=l(Td),bl=s(Td,"P",{});var l_=o(bl);tf=d(l_,"Create ConcatenationTable from list of tables."),l_.forEach(a),Td.forEach(a),T.forEach(a),Dl=l(t),K=s(t,"H2",{class:!0});var wd=o(K);Ft=s(wd,"A",{id:!0,class:!0,href:!0});var c_=o(Ft);ul=s(c_,"SPAN",{});var d_=o(ul);m(as.$$.fragment,d_),d_.forEach(a),c_.forEach(a),af=l(wd),gl=s(wd,"SPAN",{});var i_=o(gl);nf=d(i_,"Utils"),i_.forEach(a),wd.forEach(a),Cl=l(t),Q=s(t,"DIV",{class:!0});var kd=o(Q);m(ns.$$.fragment,kd),sf=l(kd),fl=s(kd,"P",{});var p_=o(fl);of=d(p_,"Concatenate tables."),p_.forEach(a),kd.forEach(a),Pl=l(t),Z=s(t,"DIV",{class:!0});var Ed=o(Z);m(ss.$$.fragment,Ed),rf=l(Ed),yl=s(Ed,"P",{});var m_=o(yl);lf=d(m_,`Get the cache files that are loaded by the table.
Cache file are used when parts of the table come from the disk via memory mapping.`),m_.forEach(a),Ed.forEach(a),this.h()},h(){i(W,"name","hf:doc:metadata"),i(W,"content",JSON.stringify($_)),i(ee,"id","table-classes"),i(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ee,"href","#table-classes"),i(X,"class","relative group"),i(os,"href","/docs/datasets/pr_4108/en/package_reference/table_classes#datasets.table.Table"),i(te,"id","datasets.table.Table"),i(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(te,"href","#datasets.table.Table"),i(H,"class","relative group"),i(P,"class","docstring"),i(ae,"class","docstring"),i(ne,"class","docstring"),i(se,"class","docstring"),i(oe,"class","docstring"),i(rs,"class","docstring"),i(re,"class","docstring"),i(le,"class","docstring"),i(ce,"class","docstring"),i(de,"class","docstring"),i(ie,"class","docstring"),i(pe,"class","docstring"),i(L,"class","docstring"),i(me,"class","docstring"),i(he,"class","docstring"),i(k,"class","docstring"),i(be,"id","datasets.table.InMemoryTable"),i(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(be,"href","#datasets.table.InMemoryTable"),i(G,"class","relative group"),i(A,"class","docstring"),i(ue,"class","docstring"),i(ge,"class","docstring"),i(fe,"class","docstring"),i(ye,"class","docstring"),i(ls,"class","docstring"),i(ve,"class","docstring"),i(_e,"class","docstring"),i($e,"class","docstring"),i(Te,"class","docstring"),i(we,"class","docstring"),i(ke,"class","docstring"),i(N,"class","docstring"),i(Ee,"class","docstring"),i(Me,"class","docstring"),i(xe,"class","docstring"),i(Ie,"class","docstring"),i(De,"class","docstring"),i(Ce,"class","docstring"),i(j,"class","docstring"),i(Pe,"class","docstring"),i(Le,"class","docstring"),i(F,"class","docstring"),i(Ae,"class","docstring"),i(Ne,"class","docstring"),i(je,"class","docstring"),i(Fe,"class","docstring"),i(Ve,"class","docstring"),i(cs,"class","docstring"),i(ds,"class","docstring"),i(I,"class","docstring"),i(Se,"class","docstring"),i(qe,"class","docstring"),i(Re,"class","docstring"),i(y,"class","docstring"),i(Ue,"id","datasets.table.MemoryMappedTable"),i(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ue,"href","#datasets.table.MemoryMappedTable"),i(Y,"class","relative group"),i(V,"class","docstring"),i(ze,"class","docstring"),i(Be,"class","docstring"),i(Oe,"class","docstring"),i(We,"class","docstring"),i(is,"class","docstring"),i(Xe,"class","docstring"),i(He,"class","docstring"),i(Ge,"class","docstring"),i(Ye,"class","docstring"),i(Je,"class","docstring"),i(Ke,"class","docstring"),i(S,"class","docstring"),i(Qe,"class","docstring"),i(Ze,"class","docstring"),i(et,"class","docstring"),i(tt,"class","docstring"),i(at,"class","docstring"),i(nt,"class","docstring"),i(q,"class","docstring"),i(st,"class","docstring"),i(ot,"class","docstring"),i(R,"class","docstring"),i(rt,"class","docstring"),i(lt,"class","docstring"),i(ct,"class","docstring"),i(dt,"class","docstring"),i(it,"class","docstring"),i(ps,"class","docstring"),i($,"class","docstring"),i(pt,"id","datasets.table.ConcatenationTable"),i(pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(pt,"href","#datasets.table.ConcatenationTable"),i(J,"class","relative group"),i(U,"class","docstring"),i(mt,"class","docstring"),i(ht,"class","docstring"),i(bt,"class","docstring"),i(ut,"class","docstring"),i(ms,"class","docstring"),i(gt,"class","docstring"),i(ft,"class","docstring"),i(yt,"class","docstring"),i(vt,"class","docstring"),i(_t,"class","docstring"),i($t,"class","docstring"),i(z,"class","docstring"),i(Tt,"class","docstring"),i(wt,"class","docstring"),i(kt,"class","docstring"),i(Et,"class","docstring"),i(Mt,"class","docstring"),i(xt,"class","docstring"),i(B,"class","docstring"),i(It,"class","docstring"),i(Dt,"class","docstring"),i(O,"class","docstring"),i(Ct,"class","docstring"),i(Pt,"class","docstring"),i(Lt,"class","docstring"),i(At,"class","docstring"),i(Nt,"class","docstring"),i(hs,"class","docstring"),i(jt,"class","docstring"),i(_,"class","docstring"),i(Ft,"id","datasets.table.concat_tables"),i(Ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ft,"href","#datasets.table.concat_tables"),i(K,"class","relative group"),i(Q,"class","docstring"),i(Z,"class","docstring")},m(t,M){e(document.head,W),x(t,vl,M),x(t,X,M),e(X,ee),e(ee,Cs),h(Vt,Cs,null),e(X,Md),e(X,Ps),e(Ps,xd),x(t,_l,M),x(t,C,M),e(C,Id),e(C,Ls),e(Ls,Dd),e(C,Cd),e(C,os),e(os,Pd),e(C,Ld),x(t,$l,M),x(t,H,M),e(H,te),e(te,As),h(St,As,null),e(H,Ad),e(H,Ns),e(Ns,Nd),x(t,Tl,M),x(t,k,M),h(qt,k,null),e(k,jd),e(k,js),e(js,Fd),e(k,Vd),e(k,Fs),e(Fs,Sd),e(k,qd),e(k,Vs),e(Vs,Rd),e(k,Ud),e(k,P),h(Rt,P,null),e(P,zd),e(P,Ss),e(Ss,Bd),e(P,Od),e(P,Ut),e(Ut,Wd),e(Ut,qs),e(qs,Xd),e(Ut,Hd),e(k,Gd),e(k,ae),h(zt,ae,null),e(ae,Yd),e(ae,Rs),e(Rs,Jd),e(k,Kd),e(k,ne),h(Bt,ne,null),e(ne,Qd),e(ne,Us),e(Us,Zd),e(k,ei),e(k,se),h(Ot,se,null),e(se,ti),e(se,zs),e(zs,ai),e(k,ni),e(k,oe),h(Wt,oe,null),e(oe,si),e(oe,Bs),e(Bs,oi),e(k,ri),e(k,rs),h(Xt,rs,null),e(k,li),e(k,re),h(Ht,re,null),e(re,ci),e(re,Os),e(Os,di),e(k,ii),e(k,le),h(Gt,le,null),e(le,pi),e(le,Ws),e(Ws,mi),e(k,hi),e(k,ce),h(Yt,ce,null),e(ce,bi),e(ce,Xs),e(Xs,ui),e(k,gi),e(k,de),h(Jt,de,null),e(de,fi),e(de,Hs),e(Hs,yi),e(k,vi),e(k,ie),h(Kt,ie,null),e(ie,_i),e(ie,Gs),e(Gs,$i),e(k,Ti),e(k,pe),h(Qt,pe,null),e(pe,wi),e(pe,Ys),e(Ys,ki),e(k,Ei),e(k,L),h(Zt,L,null),e(L,Mi),e(L,Js),e(Js,xi),e(L,Ii),e(L,Ks),e(Ks,Di),e(k,Ci),e(k,me),h(ea,me,null),e(me,Pi),e(me,Qs),e(Qs,Li),e(k,Ai),e(k,he),h(ta,he,null),e(he,Ni),e(he,Zs),e(Zs,ji),x(t,wl,M),x(t,G,M),e(G,be),e(be,eo),h(aa,eo,null),e(G,Fi),e(G,to),e(to,Vi),x(t,kl,M),x(t,y,M),h(na,y,null),e(y,Si),e(y,ao),e(ao,qi),e(y,Ri),e(y,no),e(no,Ui),e(y,zi),e(y,so),e(so,Bi),e(y,Oi),e(y,oo),e(oo,Wi),e(y,Xi),e(y,A),h(sa,A,null),e(A,Hi),e(A,ro),e(ro,Gi),e(A,Yi),e(A,oa),e(oa,Ji),e(oa,lo),e(lo,Ki),e(oa,Qi),e(y,Zi),e(y,ue),h(ra,ue,null),e(ue,ep),e(ue,co),e(co,tp),e(y,ap),e(y,ge),h(la,ge,null),e(ge,np),e(ge,io),e(io,sp),e(y,op),e(y,fe),h(ca,fe,null),e(fe,rp),e(fe,po),e(po,lp),e(y,cp),e(y,ye),h(da,ye,null),e(ye,dp),e(ye,mo),e(mo,ip),e(y,pp),e(y,ls),h(ia,ls,null),e(y,mp),e(y,ve),h(pa,ve,null),e(ve,hp),e(ve,ho),e(ho,bp),e(y,up),e(y,_e),h(ma,_e,null),e(_e,gp),e(_e,bo),e(bo,fp),e(y,yp),e(y,$e),h(ha,$e,null),e($e,vp),e($e,uo),e(uo,_p),e(y,$p),e(y,Te),h(ba,Te,null),e(Te,Tp),e(Te,go),e(go,wp),e(y,kp),e(y,we),h(ua,we,null),e(we,Ep),e(we,fo),e(fo,Mp),e(y,xp),e(y,ke),h(ga,ke,null),e(ke,Ip),e(ke,yo),e(yo,Dp),e(y,Cp),e(y,N),h(fa,N,null),e(N,Pp),e(N,vo),e(vo,Lp),e(N,Ap),e(N,_o),e(_o,Np),e(y,jp),e(y,Ee),h(ya,Ee,null),e(Ee,Fp),e(Ee,$o),e($o,Vp),e(y,Sp),e(y,Me),h(va,Me,null),e(Me,qp),e(Me,To),e(To,Rp),e(y,Up),e(y,xe),h(_a,xe,null),e(xe,zp),e(xe,wo),e(wo,Bp),e(y,Op),e(y,Ie),h($a,Ie,null),e(Ie,Wp),e(Ie,ko),e(ko,Xp),e(y,Hp),e(y,De),h(Ta,De,null),e(De,Gp),e(De,Eo),e(Eo,Yp),e(y,Jp),e(y,Ce),h(wa,Ce,null),e(Ce,Kp),e(Ce,Mo),e(Mo,Qp),e(y,Zp),e(y,j),h(ka,j,null),e(j,em),e(j,xo),e(xo,tm),e(j,am),e(j,Io),e(Io,nm),e(y,sm),e(y,Pe),h(Ea,Pe,null),e(Pe,om),e(Pe,Do),e(Do,rm),e(y,lm),e(y,Le),h(Ma,Le,null),e(Le,cm),e(Le,Co),e(Co,dm),e(y,im),e(y,F),h(xa,F,null),e(F,pm),e(F,Po),e(Po,mm),e(F,hm),e(F,Lo),e(Lo,bm),e(y,um),e(y,Ae),h(Ia,Ae,null),e(Ae,gm),e(Ae,Ao),e(Ao,fm),e(y,ym),e(y,Ne),h(Da,Ne,null),e(Ne,vm),e(Ne,No),e(No,_m),e(y,$m),e(y,je),h(Ca,je,null),e(je,Tm),e(je,jo),e(jo,wm),e(y,km),e(y,Fe),h(Pa,Fe,null),e(Fe,Em),e(Fe,Fo),e(Fo,Mm),e(y,xm),e(y,Ve),h(La,Ve,null),e(Ve,Im),e(Ve,Vo),e(Vo,Dm),e(y,Cm),e(y,cs),h(Aa,cs,null),e(y,Pm),e(y,ds),h(Na,ds,null),e(y,Lm),e(y,I),h(ja,I,null),e(I,Am),e(I,So),e(So,Nm),e(I,jm),e(I,Fa),e(Fa,Fm),e(Fa,qo),e(qo,Vm),e(Fa,Sm),e(I,qm),e(I,Va),e(Va,Rm),e(Va,Ro),e(Ro,Um),e(Va,zm),e(I,Bm),e(I,Uo),e(Uo,Om),e(I,Wm),h(Sa,I,null),e(y,Xm),e(y,Se),h(qa,Se,null),e(Se,Hm),e(Se,zo),e(zo,Gm),e(y,Ym),e(y,qe),h(Ra,qe,null),e(qe,Jm),e(qe,Bo),e(Bo,Km),e(y,Qm),e(y,Re),h(Ua,Re,null),e(Re,Zm),e(Re,Oo),e(Oo,eh),x(t,El,M),x(t,Y,M),e(Y,Ue),e(Ue,Wo),h(za,Wo,null),e(Y,th),e(Y,Xo),e(Xo,ah),x(t,Ml,M),x(t,$,M),h(Ba,$,null),e($,nh),e($,Ho),e(Ho,sh),e($,oh),e($,Go),e(Go,rh),e($,lh),e($,Yo),e(Yo,ch),e($,dh),e($,Jo),e(Jo,ih),e($,ph),e($,Ko),e(Ko,mh),e($,hh),e($,V),h(Oa,V,null),e(V,bh),e(V,Qo),e(Qo,uh),e(V,gh),e(V,Wa),e(Wa,fh),e(Wa,Zo),e(Zo,yh),e(Wa,vh),e($,_h),e($,ze),h(Xa,ze,null),e(ze,$h),e(ze,er),e(er,Th),e($,wh),e($,Be),h(Ha,Be,null),e(Be,kh),e(Be,tr),e(tr,Eh),e($,Mh),e($,Oe),h(Ga,Oe,null),e(Oe,xh),e(Oe,ar),e(ar,Ih),e($,Dh),e($,We),h(Ya,We,null),e(We,Ch),e(We,nr),e(nr,Ph),e($,Lh),e($,is),h(Ja,is,null),e($,Ah),e($,Xe),h(Ka,Xe,null),e(Xe,Nh),e(Xe,sr),e(sr,jh),e($,Fh),e($,He),h(Qa,He,null),e(He,Vh),e(He,or),e(or,Sh),e($,qh),e($,Ge),h(Za,Ge,null),e(Ge,Rh),e(Ge,rr),e(rr,Uh),e($,zh),e($,Ye),h(en,Ye,null),e(Ye,Bh),e(Ye,lr),e(lr,Oh),e($,Wh),e($,Je),h(tn,Je,null),e(Je,Xh),e(Je,cr),e(cr,Hh),e($,Gh),e($,Ke),h(an,Ke,null),e(Ke,Yh),e(Ke,dr),e(dr,Jh),e($,Kh),e($,S),h(nn,S,null),e(S,Qh),e(S,ir),e(ir,Zh),e(S,eb),e(S,pr),e(pr,tb),e($,ab),e($,Qe),h(sn,Qe,null),e(Qe,nb),e(Qe,mr),e(mr,sb),e($,ob),e($,Ze),h(on,Ze,null),e(Ze,rb),e(Ze,hr),e(hr,lb),e($,cb),e($,et),h(rn,et,null),e(et,db),e(et,br),e(br,ib),e($,pb),e($,tt),h(ln,tt,null),e(tt,mb),e(tt,ur),e(ur,hb),e($,bb),e($,at),h(cn,at,null),e(at,ub),e(at,gr),e(gr,gb),e($,fb),e($,nt),h(dn,nt,null),e(nt,yb),e(nt,fr),e(fr,vb),e($,_b),e($,q),h(pn,q,null),e(q,$b),e(q,yr),e(yr,Tb),e(q,wb),e(q,vr),e(vr,kb),e($,Eb),e($,st),h(mn,st,null),e(st,Mb),e(st,_r),e(_r,xb),e($,Ib),e($,ot),h(hn,ot,null),e(ot,Db),e(ot,$r),e($r,Cb),e($,Pb),e($,R),h(bn,R,null),e(R,Lb),e(R,Tr),e(Tr,Ab),e(R,Nb),e(R,wr),e(wr,jb),e($,Fb),e($,rt),h(un,rt,null),e(rt,Vb),e(rt,kr),e(kr,Sb),e($,qb),e($,lt),h(gn,lt,null),e(lt,Rb),e(lt,Er),e(Er,Ub),e($,zb),e($,ct),h(fn,ct,null),e(ct,Bb),e(ct,Mr),e(Mr,Ob),e($,Wb),e($,dt),h(yn,dt,null),e(dt,Xb),e(dt,xr),e(xr,Hb),e($,Gb),e($,it),h(vn,it,null),e(it,Yb),e(it,Ir),e(Ir,Jb),e($,Kb),e($,ps),h(_n,ps,null),x(t,xl,M),x(t,J,M),e(J,pt),e(pt,Dr),h($n,Dr,null),e(J,Qb),e(J,Cr),e(Cr,Zb),x(t,Il,M),x(t,_,M),h(Tn,_,null),e(_,eu),e(_,Pr),e(Pr,tu),e(_,au),e(_,Lr),e(Lr,nu),e(_,su),e(_,wn),e(wn,Ar),e(Ar,ou),e(wn,ru),e(wn,Nr),e(Nr,lu),e(_,cu),e(_,kn),e(kn,du),e(kn,jr),e(jr,iu),e(kn,pu),e(_,mu),e(_,Fr),e(Fr,hu),e(_,bu),e(_,U),h(En,U,null),e(U,uu),e(U,Vr),e(Vr,gu),e(U,fu),e(U,Mn),e(Mn,yu),e(Mn,Sr),e(Sr,vu),e(Mn,_u),e(_,$u),e(_,mt),h(xn,mt,null),e(mt,Tu),e(mt,qr),e(qr,wu),e(_,ku),e(_,ht),h(In,ht,null),e(ht,Eu),e(ht,Rr),e(Rr,Mu),e(_,xu),e(_,bt),h(Dn,bt,null),e(bt,Iu),e(bt,Ur),e(Ur,Du),e(_,Cu),e(_,ut),h(Cn,ut,null),e(ut,Pu),e(ut,zr),e(zr,Lu),e(_,Au),e(_,ms),h(Pn,ms,null),e(_,Nu),e(_,gt),h(Ln,gt,null),e(gt,ju),e(gt,Br),e(Br,Fu),e(_,Vu),e(_,ft),h(An,ft,null),e(ft,Su),e(ft,Or),e(Or,qu),e(_,Ru),e(_,yt),h(Nn,yt,null),e(yt,Uu),e(yt,Wr),e(Wr,zu),e(_,Bu),e(_,vt),h(jn,vt,null),e(vt,Ou),e(vt,Xr),e(Xr,Wu),e(_,Xu),e(_,_t),h(Fn,_t,null),e(_t,Hu),e(_t,Hr),e(Hr,Gu),e(_,Yu),e(_,$t),h(Vn,$t,null),e($t,Ju),e($t,Gr),e(Gr,Ku),e(_,Qu),e(_,z),h(Sn,z,null),e(z,Zu),e(z,Yr),e(Yr,eg),e(z,tg),e(z,Jr),e(Jr,ag),e(_,ng),e(_,Tt),h(qn,Tt,null),e(Tt,sg),e(Tt,Kr),e(Kr,og),e(_,rg),e(_,wt),h(Rn,wt,null),e(wt,lg),e(wt,Qr),e(Qr,cg),e(_,dg),e(_,kt),h(Un,kt,null),e(kt,ig),e(kt,Zr),e(Zr,pg),e(_,mg),e(_,Et),h(zn,Et,null),e(Et,hg),e(Et,el),e(el,bg),e(_,ug),e(_,Mt),h(Bn,Mt,null),e(Mt,gg),e(Mt,tl),e(tl,fg),e(_,yg),e(_,xt),h(On,xt,null),e(xt,vg),e(xt,al),e(al,_g),e(_,$g),e(_,B),h(Wn,B,null),e(B,Tg),e(B,nl),e(nl,wg),e(B,kg),e(B,sl),e(sl,Eg),e(_,Mg),e(_,It),h(Xn,It,null),e(It,xg),e(It,ol),e(ol,Ig),e(_,Dg),e(_,Dt),h(Hn,Dt,null),e(Dt,Cg),e(Dt,rl),e(rl,Pg),e(_,Lg),e(_,O),h(Gn,O,null),e(O,Ag),e(O,ll),e(ll,Ng),e(O,jg),e(O,cl),e(cl,Fg),e(_,Vg),e(_,Ct),h(Yn,Ct,null),e(Ct,Sg),e(Ct,dl),e(dl,qg),e(_,Rg),e(_,Pt),h(Jn,Pt,null),e(Pt,Ug),e(Pt,il),e(il,zg),e(_,Bg),e(_,Lt),h(Kn,Lt,null),e(Lt,Og),e(Lt,pl),e(pl,Wg),e(_,Xg),e(_,At),h(Qn,At,null),e(At,Hg),e(At,ml),e(ml,Gg),e(_,Yg),e(_,Nt),h(Zn,Nt,null),e(Nt,Jg),e(Nt,hl),e(hl,Kg),e(_,Qg),e(_,hs),h(es,hs,null),e(_,Zg),e(_,jt),h(ts,jt,null),e(jt,ef),e(jt,bl),e(bl,tf),x(t,Dl,M),x(t,K,M),e(K,Ft),e(Ft,ul),h(as,ul,null),e(K,af),e(K,gl),e(gl,nf),x(t,Cl,M),x(t,Q,M),h(ns,Q,null),e(Q,sf),e(Q,fl),e(fl,of),x(t,Pl,M),x(t,Z,M),h(ss,Z,null),e(Z,rf),e(Z,yl),e(yl,lf),Ll=!0},p:f_,i(t){Ll||(b(Vt.$$.fragment,t),b(St.$$.fragment,t),b(qt.$$.fragment,t),b(Rt.$$.fragment,t),b(zt.$$.fragment,t),b(Bt.$$.fragment,t),b(Ot.$$.fragment,t),b(Wt.$$.fragment,t),b(Xt.$$.fragment,t),b(Ht.$$.fragment,t),b(Gt.$$.fragment,t),b(Yt.$$.fragment,t),b(Jt.$$.fragment,t),b(Kt.$$.fragment,t),b(Qt.$$.fragment,t),b(Zt.$$.fragment,t),b(ea.$$.fragment,t),b(ta.$$.fragment,t),b(aa.$$.fragment,t),b(na.$$.fragment,t),b(sa.$$.fragment,t),b(ra.$$.fragment,t),b(la.$$.fragment,t),b(ca.$$.fragment,t),b(da.$$.fragment,t),b(ia.$$.fragment,t),b(pa.$$.fragment,t),b(ma.$$.fragment,t),b(ha.$$.fragment,t),b(ba.$$.fragment,t),b(ua.$$.fragment,t),b(ga.$$.fragment,t),b(fa.$$.fragment,t),b(ya.$$.fragment,t),b(va.$$.fragment,t),b(_a.$$.fragment,t),b($a.$$.fragment,t),b(Ta.$$.fragment,t),b(wa.$$.fragment,t),b(ka.$$.fragment,t),b(Ea.$$.fragment,t),b(Ma.$$.fragment,t),b(xa.$$.fragment,t),b(Ia.$$.fragment,t),b(Da.$$.fragment,t),b(Ca.$$.fragment,t),b(Pa.$$.fragment,t),b(La.$$.fragment,t),b(Aa.$$.fragment,t),b(Na.$$.fragment,t),b(ja.$$.fragment,t),b(Sa.$$.fragment,t),b(qa.$$.fragment,t),b(Ra.$$.fragment,t),b(Ua.$$.fragment,t),b(za.$$.fragment,t),b(Ba.$$.fragment,t),b(Oa.$$.fragment,t),b(Xa.$$.fragment,t),b(Ha.$$.fragment,t),b(Ga.$$.fragment,t),b(Ya.$$.fragment,t),b(Ja.$$.fragment,t),b(Ka.$$.fragment,t),b(Qa.$$.fragment,t),b(Za.$$.fragment,t),b(en.$$.fragment,t),b(tn.$$.fragment,t),b(an.$$.fragment,t),b(nn.$$.fragment,t),b(sn.$$.fragment,t),b(on.$$.fragment,t),b(rn.$$.fragment,t),b(ln.$$.fragment,t),b(cn.$$.fragment,t),b(dn.$$.fragment,t),b(pn.$$.fragment,t),b(mn.$$.fragment,t),b(hn.$$.fragment,t),b(bn.$$.fragment,t),b(un.$$.fragment,t),b(gn.$$.fragment,t),b(fn.$$.fragment,t),b(yn.$$.fragment,t),b(vn.$$.fragment,t),b(_n.$$.fragment,t),b($n.$$.fragment,t),b(Tn.$$.fragment,t),b(En.$$.fragment,t),b(xn.$$.fragment,t),b(In.$$.fragment,t),b(Dn.$$.fragment,t),b(Cn.$$.fragment,t),b(Pn.$$.fragment,t),b(Ln.$$.fragment,t),b(An.$$.fragment,t),b(Nn.$$.fragment,t),b(jn.$$.fragment,t),b(Fn.$$.fragment,t),b(Vn.$$.fragment,t),b(Sn.$$.fragment,t),b(qn.$$.fragment,t),b(Rn.$$.fragment,t),b(Un.$$.fragment,t),b(zn.$$.fragment,t),b(Bn.$$.fragment,t),b(On.$$.fragment,t),b(Wn.$$.fragment,t),b(Xn.$$.fragment,t),b(Hn.$$.fragment,t),b(Gn.$$.fragment,t),b(Yn.$$.fragment,t),b(Jn.$$.fragment,t),b(Kn.$$.fragment,t),b(Qn.$$.fragment,t),b(Zn.$$.fragment,t),b(es.$$.fragment,t),b(ts.$$.fragment,t),b(as.$$.fragment,t),b(ns.$$.fragment,t),b(ss.$$.fragment,t),Ll=!0)},o(t){u(Vt.$$.fragment,t),u(St.$$.fragment,t),u(qt.$$.fragment,t),u(Rt.$$.fragment,t),u(zt.$$.fragment,t),u(Bt.$$.fragment,t),u(Ot.$$.fragment,t),u(Wt.$$.fragment,t),u(Xt.$$.fragment,t),u(Ht.$$.fragment,t),u(Gt.$$.fragment,t),u(Yt.$$.fragment,t),u(Jt.$$.fragment,t),u(Kt.$$.fragment,t),u(Qt.$$.fragment,t),u(Zt.$$.fragment,t),u(ea.$$.fragment,t),u(ta.$$.fragment,t),u(aa.$$.fragment,t),u(na.$$.fragment,t),u(sa.$$.fragment,t),u(ra.$$.fragment,t),u(la.$$.fragment,t),u(ca.$$.fragment,t),u(da.$$.fragment,t),u(ia.$$.fragment,t),u(pa.$$.fragment,t),u(ma.$$.fragment,t),u(ha.$$.fragment,t),u(ba.$$.fragment,t),u(ua.$$.fragment,t),u(ga.$$.fragment,t),u(fa.$$.fragment,t),u(ya.$$.fragment,t),u(va.$$.fragment,t),u(_a.$$.fragment,t),u($a.$$.fragment,t),u(Ta.$$.fragment,t),u(wa.$$.fragment,t),u(ka.$$.fragment,t),u(Ea.$$.fragment,t),u(Ma.$$.fragment,t),u(xa.$$.fragment,t),u(Ia.$$.fragment,t),u(Da.$$.fragment,t),u(Ca.$$.fragment,t),u(Pa.$$.fragment,t),u(La.$$.fragment,t),u(Aa.$$.fragment,t),u(Na.$$.fragment,t),u(ja.$$.fragment,t),u(Sa.$$.fragment,t),u(qa.$$.fragment,t),u(Ra.$$.fragment,t),u(Ua.$$.fragment,t),u(za.$$.fragment,t),u(Ba.$$.fragment,t),u(Oa.$$.fragment,t),u(Xa.$$.fragment,t),u(Ha.$$.fragment,t),u(Ga.$$.fragment,t),u(Ya.$$.fragment,t),u(Ja.$$.fragment,t),u(Ka.$$.fragment,t),u(Qa.$$.fragment,t),u(Za.$$.fragment,t),u(en.$$.fragment,t),u(tn.$$.fragment,t),u(an.$$.fragment,t),u(nn.$$.fragment,t),u(sn.$$.fragment,t),u(on.$$.fragment,t),u(rn.$$.fragment,t),u(ln.$$.fragment,t),u(cn.$$.fragment,t),u(dn.$$.fragment,t),u(pn.$$.fragment,t),u(mn.$$.fragment,t),u(hn.$$.fragment,t),u(bn.$$.fragment,t),u(un.$$.fragment,t),u(gn.$$.fragment,t),u(fn.$$.fragment,t),u(yn.$$.fragment,t),u(vn.$$.fragment,t),u(_n.$$.fragment,t),u($n.$$.fragment,t),u(Tn.$$.fragment,t),u(En.$$.fragment,t),u(xn.$$.fragment,t),u(In.$$.fragment,t),u(Dn.$$.fragment,t),u(Cn.$$.fragment,t),u(Pn.$$.fragment,t),u(Ln.$$.fragment,t),u(An.$$.fragment,t),u(Nn.$$.fragment,t),u(jn.$$.fragment,t),u(Fn.$$.fragment,t),u(Vn.$$.fragment,t),u(Sn.$$.fragment,t),u(qn.$$.fragment,t),u(Rn.$$.fragment,t),u(Un.$$.fragment,t),u(zn.$$.fragment,t),u(Bn.$$.fragment,t),u(On.$$.fragment,t),u(Wn.$$.fragment,t),u(Xn.$$.fragment,t),u(Hn.$$.fragment,t),u(Gn.$$.fragment,t),u(Yn.$$.fragment,t),u(Jn.$$.fragment,t),u(Kn.$$.fragment,t),u(Qn.$$.fragment,t),u(Zn.$$.fragment,t),u(es.$$.fragment,t),u(ts.$$.fragment,t),u(as.$$.fragment,t),u(ns.$$.fragment,t),u(ss.$$.fragment,t),Ll=!1},d(t){a(W),t&&a(vl),t&&a(X),g(Vt),t&&a(_l),t&&a(C),t&&a($l),t&&a(H),g(St),t&&a(Tl),t&&a(k),g(qt),g(Rt),g(zt),g(Bt),g(Ot),g(Wt),g(Xt),g(Ht),g(Gt),g(Yt),g(Jt),g(Kt),g(Qt),g(Zt),g(ea),g(ta),t&&a(wl),t&&a(G),g(aa),t&&a(kl),t&&a(y),g(na),g(sa),g(ra),g(la),g(ca),g(da),g(ia),g(pa),g(ma),g(ha),g(ba),g(ua),g(ga),g(fa),g(ya),g(va),g(_a),g($a),g(Ta),g(wa),g(ka),g(Ea),g(Ma),g(xa),g(Ia),g(Da),g(Ca),g(Pa),g(La),g(Aa),g(Na),g(ja),g(Sa),g(qa),g(Ra),g(Ua),t&&a(El),t&&a(Y),g(za),t&&a(Ml),t&&a($),g(Ba),g(Oa),g(Xa),g(Ha),g(Ga),g(Ya),g(Ja),g(Ka),g(Qa),g(Za),g(en),g(tn),g(an),g(nn),g(sn),g(on),g(rn),g(ln),g(cn),g(dn),g(pn),g(mn),g(hn),g(bn),g(un),g(gn),g(fn),g(yn),g(vn),g(_n),t&&a(xl),t&&a(J),g($n),t&&a(Il),t&&a(_),g(Tn),g(En),g(xn),g(In),g(Dn),g(Cn),g(Pn),g(Ln),g(An),g(Nn),g(jn),g(Fn),g(Vn),g(Sn),g(qn),g(Rn),g(Un),g(zn),g(Bn),g(On),g(Wn),g(Xn),g(Hn),g(Gn),g(Yn),g(Jn),g(Kn),g(Qn),g(Zn),g(es),g(ts),t&&a(Dl),t&&a(K),g(as),t&&a(Cl),t&&a(Q),g(ns),t&&a(Pl),t&&a(Z),g(ss)}}}const $_={local:"table-classes",sections:[{local:"datasets.table.Table",title:"Table"},{local:"datasets.table.InMemoryTable",title:"InMemoryTable"},{local:"datasets.table.MemoryMappedTable",title:"MemoryMappedTable"},{local:"datasets.table.ConcatenationTable",title:"ConcatenationTable"},{local:"datasets.table.concat_tables",title:"Utils"}],title:"Table Classes"};function T_(cf){return y_(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class x_ extends h_{constructor(W){super();b_(this,W,T_,__,u_,{})}}export{x_ as default,$_ as metadata};
