import{S as ZH,i as QH,s as eG,e as a,k as d,w as p,t as r,M as tG,c as s,d as t,m as l,a as n,x as m,h as o,b as c,F as e,g as $,y as f,q as h,o as u,B as g}from"../../chunks/vendor-e67aec41.js";import{T as aG}from"../../chunks/Tip-76459d1c.js";import{D as _}from"../../chunks/Docstring-fac5775a.js";import{C as Re}from"../../chunks/CodeBlock-e2bcf023.js";import{I as rt}from"../../chunks/IconCopyLink-ffd7f84e.js";function sG(Ef){let A,ot,O,J,Jt,ie,$r,Xt,it,Ga,de;return{c(){A=a("p"),ot=r("A "),O=a("a"),J=r("datasets.Sequence"),Jt=r(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),ie=a("code"),$r=r("list"),Xt=r(` instead of the
`),it=a("a"),Ga=r("datasets.Sequence"),de=r("."),this.h()},l(ee){A=s(ee,"P",{});var H=n(A);ot=o(H,"A "),O=s(H,"A",{href:!0});var dt=n(O);J=o(dt,"datasets.Sequence"),dt.forEach(t),Jt=o(H,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),ie=s(H,"CODE",{});var Dc=n(ie);$r=o(Dc,"list"),Dc.forEach(t),Xt=o(H,` instead of the
`),it=s(H,"A",{href:!0});var Ka=n(it);Ga=o(Ka,"datasets.Sequence"),Ka.forEach(t),de=o(H,"."),H.forEach(t),this.h()},h(){c(O,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Sequence"),c(it,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Sequence")},m(ee,H){$(ee,A,H),e(A,ot),e(A,O),e(O,J),e(A,Jt),e(A,ie),e(ie,$r),e(A,Xt),e(A,it),e(it,Ga),e(A,de)},d(ee){ee&&t(A)}}}function nG(Ef){let A,ot,O,J,Jt,ie,$r,Xt,it,Ga,de,ee,H,dt,Dc,Ka,fw,xb,z,wr,hw,kf,uw,gw,xc,If,_w,vw,bw,Tf,yw,$w,ve,Dr,ww,xr,Dw,Nf,xw,Ew,kw,Ff,Iw,Tw,Pf,Nw,Fw,lt,Er,Pw,Zt,Aw,Af,Lw,Sw,Lf,Ow,jw,Cw,Sf,qw,Eb,Qt,Wa,Of,kr,zw,jf,Vw,kb,Ya,Mw,Ec,Uw,Rw,Ib,v,Ir,Bw,Cf,Hw,Gw,ct,Tr,Kw,qf,Ww,Yw,zf,Vf,Jw,Xw,pt,Nr,Zw,Mf,Qw,eD,Uf,Rf,tD,aD,Ja,Fr,sD,Bf,nD,rD,Xa,Pr,oD,Hf,iD,dD,be,Ar,lD,Be,cD,Gf,pD,mD,Kf,fD,hD,kc,uD,gD,_D,Lr,vD,Wf,bD,yD,$D,Sr,wD,Yf,DD,xD,ED,Za,Or,kD,He,ID,Jf,TD,ND,Xf,FD,PD,Ic,AD,LD,SD,Qa,jr,OD,Zf,jD,CD,es,Cr,qD,Qf,zD,VD,ts,qr,MD,eh,UD,RD,as,zr,BD,Vr,HD,ss,GD,th,KD,WD,YD,JD,ns,Mr,XD,ah,ZD,QD,rs,Ur,ex,sh,tx,ax,mt,Rr,sx,nh,nx,rx,rh,ox,ix,os,Br,dx,oh,lx,cx,is,Hr,px,ih,mx,fx,ds,Gr,hx,dh,ux,gx,ft,Kr,_x,lh,vx,bx,ea,yx,Tc,$x,wx,ch,Dx,xx,Ex,ls,Wr,kx,ph,Ix,Tx,cs,Yr,Nx,Jr,Fx,mh,Px,Ax,Lx,ps,Xr,Sx,fh,Ox,jx,ht,Zr,Cx,hh,qx,zx,Qr,Vx,Nc,Mx,Ux,Rx,ms,eo,Bx,ta,Hx,uh,Gx,Kx,gh,Wx,Yx,Jx,ye,to,Xx,le,Zx,_h,Qx,e0,vh,t0,a0,bh,s0,n0,Fc,r0,o0,i0,ce,d0,yh,l0,c0,$h,p0,m0,wh,f0,h0,Dh,u0,g0,_0,xh,v0,b0,fs,ao,y0,$e,$0,Eh,w0,D0,kh,x0,E0,Pc,k0,I0,Ac,T0,N0,ut,so,F0,no,P0,Ih,A0,L0,S0,Lc,O0,Th,j0,C0,we,ro,q0,Ge,z0,Nh,V0,M0,Fh,U0,R0,Ph,B0,H0,G0,oo,K0,Sc,W0,Y0,J0,aa,X0,Oc,Z0,Q0,Ah,e9,t9,a9,De,io,s9,sa,n9,Lh,r9,o9,Sh,i9,d9,l9,na,c9,jc,p9,m9,Cc,f9,h9,u9,ra,g9,qc,_9,v9,Oh,b9,y9,$9,hs,lo,w9,jh,D9,x9,gt,co,E9,Ch,k9,I9,qh,T9,N9,us,po,F9,zh,P9,A9,gs,mo,L9,Vh,S9,O9,_s,fo,j9,Mh,C9,q9,_t,ho,z9,Uh,V9,M9,Rh,U9,R9,vt,uo,B9,Bh,H9,G9,Hh,K9,W9,bt,go,Y9,j,J9,Gh,X9,Z9,Kh,Q9,e3,Wh,t3,a3,Yh,s3,n3,Jh,r3,o3,Xh,i3,d3,Zh,l3,c3,p3,_o,m3,Qh,f3,h3,u3,te,vo,g3,oa,_3,eu,v3,b3,tu,y3,$3,w3,au,D3,x3,bo,E3,su,k3,I3,T3,nu,N3,F3,vs,yo,P3,ru,A3,L3,xe,$o,S3,ou,O3,j3,iu,C3,q3,wo,z3,bs,Do,V3,ia,M3,zc,U3,R3,du,B3,H3,G3,ys,xo,K3,Ke,W3,lu,Y3,J3,Vc,X3,Z3,cu,Q3,e4,t4,$s,Eo,a4,pu,s4,n4,ws,ko,r4,mu,o4,i4,Ds,Io,d4,To,l4,fu,c4,p4,m4,xs,No,f4,hu,h4,u4,Es,Fo,g4,uu,_4,v4,ks,Po,b4,gu,y4,$4,ae,Ao,w4,da,D4,_u,x4,E4,vu,k4,I4,T4,bu,Mc,N4,Lo,F4,P4,yu,A4,L4,So,S4,yt,Oo,O4,We,j4,$u,C4,q4,wu,z4,V4,Du,M4,U4,R4,xu,Uc,B4,jo,H4,G4,Is,Co,K4,Eu,W4,Y4,$t,qo,J4,ku,X4,Z4,zo,Q4,Iu,e7,t7,a7,G,Vo,s7,Tu,n7,r7,Nu,o7,i7,Mo,d7,Fu,l7,c7,Uo,p7,Ee,Ro,m7,Pu,f7,h7,Au,u7,g7,Bo,_7,Ts,Ho,v7,Lu,b7,y7,Ns,Go,$7,Su,w7,D7,Fs,Ko,x7,Ou,E7,k7,Ps,Wo,I7,ju,T7,N7,As,Yo,F7,Cu,P7,A7,Ls,Jo,L7,qu,S7,O7,Ss,Xo,j7,zu,C7,q7,Os,Zo,z7,Rc,Bc,V7,M7,U7,js,Qo,R7,Hc,Gc,B7,H7,G7,Kc,ei,K7,Wc,ti,W7,Yc,ai,Y7,Jc,si,J7,Xc,ni,X7,Zc,ri,Z7,Qc,oi,Q7,ep,ii,eE,tp,di,tE,ap,li,aE,sp,ci,sE,np,pi,nE,rp,mi,rE,Cs,fi,oE,Vu,iE,dE,qs,hi,lE,Mu,cE,pE,zs,ui,mE,Uu,fE,hE,Vs,gi,uE,Ru,gE,_E,wt,_i,vE,la,bE,op,yE,$E,ip,wE,DE,xE,ca,EE,Bu,kE,IE,Hu,TE,NE,FE,ke,vi,PE,bi,AE,Gu,LE,SE,OE,Ku,jE,CE,yi,Tb,pa,$i,qE,ma,zE,dp,VE,ME,lp,UE,RE,Nb,C,wi,BE,Wu,HE,GE,fa,KE,cp,WE,YE,pp,JE,XE,ZE,pe,QE,Yu,ek,tk,Ju,ak,sk,Xu,nk,rk,Zu,ok,ik,dk,Qu,lk,ck,eg,pk,mk,Di,Fb,X,xi,fk,tg,hk,uk,ag,gk,_k,sg,vk,bk,me,ng,yk,$k,rg,wk,Dk,og,xk,Ek,Ei,kk,mp,Ik,Tk,Nk,Ye,Fk,fp,Pk,Ak,ig,Lk,Sk,hp,Ok,jk,Pb,Z,ki,Ck,dg,qk,zk,lg,Vk,Mk,cg,Uk,Rk,fe,pg,Bk,Hk,mg,Gk,Kk,fg,Wk,Yk,Ii,Jk,up,Xk,Zk,Qk,Je,eI,gp,tI,aI,hg,sI,nI,_p,rI,oI,Ab,ha,Ti,iI,ug,dI,Lb,ua,Ni,lI,gg,cI,Sb,ga,Ms,_g,Fi,pI,vg,mI,Ob,Us,fI,bg,hI,uI,jb,w,Pi,gI,yg,_I,vI,Rs,Ai,bI,$g,yI,$I,Bs,Li,wI,wg,DI,xI,Hs,Si,EI,Dg,kI,II,Gs,Oi,TI,ji,NI,Ks,FI,xg,PI,AI,LI,SI,Ws,Ci,OI,Eg,jI,CI,Ys,qi,qI,kg,zI,VI,Dt,zi,MI,Ig,UI,RI,Tg,BI,HI,Js,Vi,GI,Ng,KI,WI,Xs,Mi,YI,Fg,JI,XI,Zs,Ui,ZI,Pg,QI,e5,xt,Ri,t5,Ag,a5,s5,Lg,n5,r5,Ie,Bi,o5,Sg,i5,d5,Og,l5,c5,jg,p5,m5,Te,Hi,f5,Gi,h5,Cg,u5,g5,_5,he,v5,qg,b5,y5,zg,$5,w5,Vg,D5,x5,Mg,E5,k5,I5,Ug,T5,N5,Et,Ki,F5,Wi,P5,Rg,A5,L5,S5,vp,O5,Bg,j5,C5,Qs,Yi,q5,_a,z5,Hg,V5,M5,Gg,U5,R5,B5,Ne,Ji,H5,Xe,G5,Kg,K5,W5,Wg,Y5,J5,Yg,X5,Z5,Q5,Xi,e6,bp,t6,a6,s6,va,n6,yp,r6,o6,Jg,i6,d6,l6,Fe,Zi,c6,ba,p6,Xg,m6,f6,Zg,h6,u6,g6,ya,_6,$p,v6,b6,wp,y6,$6,w6,$a,D6,Qg,x6,E6,e_,k6,I6,T6,en,Qi,N6,t_,F6,P6,kt,ed,A6,a_,L6,S6,Ze,O6,Dp,j6,C6,s_,q6,z6,n_,V6,M6,U6,tn,td,R6,r_,B6,H6,Pe,ad,G6,o_,K6,W6,i_,Y6,J6,wa,X6,xp,Z6,Q6,d_,e8,t8,a8,Ae,sd,s8,l_,n8,r8,Da,o8,Ep,i8,d8,c_,l8,c8,p8,nd,p_,m8,f8,m_,h8,u8,an,rd,g8,od,_8,f_,v8,b8,y8,se,id,$8,xa,w8,h_,D8,x8,u_,E8,k8,I8,g_,T8,N8,__,F8,P8,dd,A8,sn,ld,L8,Ea,S8,kp,O8,j8,v_,C8,q8,z8,nn,cd,V8,Qe,M8,b_,U8,R8,Ip,B8,H8,y_,G8,K8,W8,rn,pd,Y8,$_,J8,X8,on,md,Z8,w_,Q8,eT,dn,fd,tT,D_,aT,sT,ln,hd,nT,x_,rT,oT,It,ud,iT,ka,dT,Tp,lT,cT,Np,pT,mT,fT,Ia,hT,E_,uT,gT,k_,_T,vT,Cb,Fp,qb,Ta,cn,I_,gd,bT,T_,yT,zb,pn,$T,Pp,wT,DT,Vb,x,_d,xT,N_,ET,kT,mn,vd,IT,F_,TT,NT,fn,bd,FT,P_,PT,AT,Ap,yd,LT,Le,$d,ST,A_,OT,jT,wd,CT,L_,qT,zT,VT,Na,S_,MT,UT,O_,RT,BT,Q,HT,j_,GT,KT,C_,WT,YT,q_,JT,XT,z_,ZT,QT,V_,eN,tN,aN,ne,Dd,sN,M_,nN,rN,U_,oN,iN,xd,dN,R_,lN,cN,pN,Fa,mN,Lp,fN,hN,Sp,uN,gN,_N,hn,Ed,vN,kd,bN,B_,yN,$N,wN,un,Id,DN,Td,xN,H_,EN,kN,IN,gn,Nd,TN,Op,jp,NN,FN,PN,_n,Fd,AN,Cp,qp,LN,SN,ON,zp,Pd,jN,Vp,Ad,CN,Mp,Ld,qN,Up,Sd,zN,Rp,Od,VN,Bp,jd,MN,Hp,Cd,UN,Gp,qd,RN,Kp,zd,BN,Wp,Vd,HN,Yp,Md,GN,Jp,Ud,KN,Xp,Rd,Mb,Pa,vn,G_,Bd,WN,K_,YN,Ub,bn,JN,W_,XN,ZN,Rb,Hd,Gd,Bb,Aa,yn,Y_,Kd,QN,J_,eF,Hb,T,Wd,tF,X_,aF,sF,Yd,nF,Z_,rF,oF,iF,Zp,Q_,dF,lF,cF,q,ev,Tt,pF,Qp,mF,fF,tv,hF,uF,av,gF,_F,sv,Jd,vF,em,bF,yF,$F,nv,Xd,wF,rv,DF,xF,EF,Zd,ue,kF,ov,IF,TF,tm,NF,FF,iv,PF,AF,am,LF,SF,OF,$n,jF,dv,ge,CF,sm,qF,zF,nm,VF,MF,rm,UF,RF,om,BF,HF,GF,lv,Qd,KF,im,WF,YF,JF,cv,et,XF,dm,ZF,QF,pv,eP,tP,mv,aP,sP,nP,fv,wn,lm,rP,oP,cm,iP,dP,lP,Dn,el,cP,hv,pP,mP,xn,tl,fP,uv,hP,uP,En,al,gP,gv,_P,vP,kn,sl,bP,_v,yP,$P,In,nl,wP,vv,DP,xP,Tn,rl,EP,bv,kP,IP,Nt,ol,TP,yv,NP,FP,$v,PP,AP,Nn,il,LP,wv,SP,OP,K,dl,jP,Dv,CP,qP,xv,zP,VP,tt,MP,pm,UP,RP,mm,BP,HP,fm,GP,KP,WP,Ev,YP,JP,ll,XP,re,cl,ZP,kv,QP,eA,Iv,tA,aA,Tv,sA,nA,pl,Gb,La,ml,rA,Nv,oA,Kb,V,fl,iA,Fv,dA,lA,hl,cA,Pv,pA,mA,fA,Sa,hm,Av,hA,uA,gA,um,Lv,_A,vA,bA,gm,Sv,yA,$A,wA,Fn,ul,DA,Ov,xA,EA,Pn,gl,kA,jv,IA,Wb,at,_l,TA,Cv,NA,FA,qv,PA,Yb,M,vl,AA,_m,zv,LA,SA,OA,Vv,jA,CA,bl,qA,Mv,zA,VA,MA,Uv,UA,RA,yl,Jb,U,$l,BA,vm,Rv,HA,GA,KA,Bv,WA,YA,Hv,JA,XA,Gv,ZA,QA,wl,Xb,Dl,xl,Zb,El,kl,Qb,Il,Tl,ey,Nl,Fl,ty,F,Pl,eL,Kv,tL,aL,Wv,sL,nL,Al,Yv,Ll,rL,Jv,oL,iL,dL,Sl,Ol,lL,Xv,cL,pL,mL,jl,Zv,fL,hL,Qv,uL,gL,e1,_L,vL,t1,Cl,ql,bL,a1,yL,$L,wL,Oa,s1,DL,xL,n1,EL,kL,r1,IL,TL,o1,NL,FL,Ft,zl,PL,i1,AL,LL,st,d1,SL,OL,l1,jL,CL,c1,qL,zL,p1,VL,ML,An,Vl,UL,m1,RL,BL,Ln,Ml,HL,f1,GL,KL,Sn,Ul,WL,h1,YL,ay,P,Rl,JL,u1,XL,ZL,g1,QL,eS,Bl,_1,Hl,tS,v1,aS,sS,nS,Gl,Kl,rS,b1,oS,iS,dS,Wl,y1,lS,cS,$1,pS,mS,w1,fS,hS,Yl,Jl,uS,D1,gS,_S,vS,Xl,bS,x1,yS,$S,wS,Pt,Zl,DS,E1,xS,ES,_e,k1,kS,IS,I1,TS,NS,T1,FS,PS,N1,AS,LS,F1,SS,OS,On,Ql,jS,P1,CS,qS,jn,ec,zS,A1,VS,MS,Cn,tc,US,L1,RS,sy,ja,qn,S1,ac,BS,O1,HS,ny,R,sc,GS,j1,KS,WS,bm,C1,YS,JS,XS,q1,ZS,QS,zn,nc,eO,rc,tO,z1,aO,sO,nO,Vn,oc,rO,Ca,oO,V1,iO,dO,M1,lO,cO,ry,qa,Mn,U1,ic,pO,R1,mO,oy,At,fO,B1,hO,uO,ym,gO,_O,iy,B,dc,vO,H1,bO,yO,Un,lc,$O,G1,wO,DO,Rn,cc,xO,K1,EO,kO,Lt,pc,IO,W1,TO,NO,Y1,FO,PO,Bn,mc,AO,J1,LO,dy,za,Hn,X1,fc,SO,Z1,OO,ly,nt,hc,jO,Q1,CO,qO,k,zO,eb,VO,MO,tb,UO,RO,ab,BO,HO,sb,GO,KO,uc,WO,YO,nb,JO,XO,gc,ZO,QO,rb,ej,tj,ob,aj,sj,ib,nj,rj,db,oj,ij,lb,dj,lj,cb,cj,pj,pb,mj,fj,mb,hj,uj,fb,gj,_j,hb,vj,bj,ub,yj,$j,gb,wj,cy,Va,_c,Dj,Ma,xj,_b,Ej,kj,vb,Ij,Tj,py,Ua,vc,Nj,bb,Fj,my,Ra,Gn,yb,bc,Pj,$b,Aj,fy,Ba,yc,Lj,wb,Sj,hy;return ie=new rt({}),dt=new rt({}),wr=new _({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/info.py#L87",parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:`<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.
**config_kwargs &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"task_templates"}]}}),Dr=new _({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/info.py#L231",parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"}]}}),Er=new _({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/info.py#L182"}}),kr=new rt({}),Ir=new _({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L625"}}),Tr=new _({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3566",parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Nr=new _({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3785",parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Fr=new _({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L691",parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Pr=new _({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L726",parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ar=new _({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L754",parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Or=new _({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L800",parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),jr=new _({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1141"}}),Cr=new _({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1146"}}),qr=new _({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1154"}}),zr=new _({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1159"}}),Mr=new _({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1166"}}),Ur=new _({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1171"}}),Rr=new _({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1178",parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>).',name:"column"}],returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),Br=new _({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:""},{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1257",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Hr=new _({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 10000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 10000"},{name:"num_proc",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1278",parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Gr=new _({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1337",parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Kr=new _({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1360",parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Wr=new _({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1396",parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Yr=new _({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1199",parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}]}}),Xr=new _({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1498"}}),Zr=new _({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1514"}}),eo=new _({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1534",parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),to=new _({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1562",parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),ao=new _({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1626",parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}]}}),so=new _({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1619"}}),ro=new _({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1647",parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),io=new _({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1674",parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}]}}),lo=new _({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1774"}}),co=new _({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1780",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),po=new _({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1818",parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Union[Dict, Any]) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Union[Dict, Any], </em>extra_args) -&gt; Union[Dict, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Union[Dict[List], List[Any]]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]], </em>extra_args) -&gt; Union[Dict, Any]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}]}}),mo=new _({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"remove_columns",val:": typing.Optional[typing.List[str]] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L2386",parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}]}}),fo=new _({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L2552",parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:"<strong>indices</strong> (sequence, iterable, ndarray or Series) &#x2014; List or 1D-array of integer indices for indexing.",name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),ho=new _({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L2641",parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),uo=new _({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L2723",parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),go=new _({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L2801",parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}]}}),vo=new _({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3001",parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}]}}),yo=new _({props:{name:"to_tf_dataset",anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset",parameters:[{name:"columns",val:": typing.Union[str, typing.List[str]]"},{name:"batch_size",val:": int"},{name:"shuffle",val:": bool"},{name:"collate_fn",val:": typing.Callable"},{name:"drop_remainder",val:": bool = None"},{name:"collate_fn_args",val:": typing.Dict[str, typing.Any] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str]] = None"},{name:"dummy_labels",val:": bool = False"},{name:"prefetch",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L315",parametersDescription:[{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>) &#x2014; Dataset column(s) to load in the tf.data.Dataset. In general,
only columns that the model can use as input should be included here (numeric data only).`,name:"columns"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.
shuffle(<code>bool</code>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"batch_size"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>None</code>) &#x2014; Drop the last incomplete batch when loading. If not provided,
defaults to the same setting as shuffle.
collate_fn(<code>Callable</code>) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"drop_remainder(bool,"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case it is
not necessary to actually pass the labels here, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.dummy_labels",description:`<strong>dummy_labels</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If no <em>label_cols</em> are set, output an array of &#x201C;dummy&#x201D; labels
with each batch. This can avoid problems with <em>fit()</em> or <em>train_on_batch()</em> that expect labels to be
a Tensor or np.ndarray, but should (hopefully) not be necessary with our standard train_step().`,name:"dummy_labels"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),$o=new _({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"shard_size",val:": typing.Optional[int] = 524288000"},{name:"embed_external_files",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3490",parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
The size of the dataset shards to be uploaded to the hub. The dataset will be pushed in files
of the size specified here, in bytes. Defaults to a shard size of 500MB.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}]}}),wo=new Re({props:{code:`.. code-block:: python

>>> dataset.push_to_hub("<organization>/<dataset_id>", split="evaluation")`,highlighted:`.. code-block:: python

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;evaluation&quot;</span>)`}}),Do=new _({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L986",parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}]}}),xo=new _({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1080",parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],returnDescription:`
<p>the dataset requested.
a <code>datasets.DatasetDict</code> with each split.</p>
`,returnType:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset dict directory</li>
</ul>
`}}),Eo=new _({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L2483",parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),ko=new _({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3140",parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.
to_csv_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>`,name:"num_proc"}],returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Io=new _({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3235",parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),No=new _({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3167",parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),Fo=new _({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3196",parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code>
**to_json_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.</li>
</ul>`,name:"lines"}],returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),Po=new _({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3266",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Ao=new _({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3591",parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <code>datasets.Dataset.get_nearest_examples()</code>or <code>datasets.Dataset.search()</code>
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>int</code>) &#x2014;
If not None, this is the index of the GPU to use.
By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}]}}),So=new Re({props:{code:`.. code-block:: python

ds = datasets.load_dataset('crime_and_punish', split='train')
ds_with_embeddings = ds.map(lambda example: {'embeddings': embed(example['line']}))
ds_with_embeddings.add_faiss_index(column='embeddings')
# query
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples('embeddings', embed('my new query'), k=10)
# save index
ds_with_embeddings.save_faiss_index('embeddings', 'my_index.faiss')

ds = datasets.load_dataset('crime_and_punish', split='train')
# load index
ds.load_faiss_index('embeddings', 'my_index.faiss')
# query
scores, retrieved_examples = ds.get_nearest_examples('embeddings', embed('my new query'), k=10)`,highlighted:`.. code-block:: python

ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-comment"># query</span>
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-comment"># save index</span>
ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-comment"># load index</span>
ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-comment"># query</span>
scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`}}),Oo=new _({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3664",parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <code>datasets.Dataset.get_nearest_examples()</code>or <code>datasets.Dataset.search()</code>`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>int</code>) &#x2014;
If not None, this is the index of the GPU to use.
By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}]}}),Co=new _({props:{name:"save_faiss_index",anchor:"datasets.search.IndexableMixin.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/search.py#L475",parametersDescription:[{anchor:"datasets.search.IndexableMixin.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}]}}),qo=new _({props:{name:"load_faiss_index",anchor:"datasets.search.IndexableMixin.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/search.py#L488",parametersDescription:[{anchor:"datasets.search.IndexableMixin.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.search.IndexableMixin.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.search.IndexableMixin.load_faiss_index.device",description:"<strong>device</strong> (Optional <code>int</code>) &#x2014; If not None, this is the index of the GPU to use. By default it uses the CPU.",name:"device"}]}}),Vo=new _({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3717",parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <code>Dataset.get_nearest_examples()</code>or <code>Dataset.search()</code>
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}]}}),Mo=new Re({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),Uo=new Re({props:{code:`.. code-block:: python

    es_client = elasticsearch.Elasticsearch()
    ds = datasets.load_dataset('crime_and_punish', split='train')
    ds.add_elasticsearch_index(column='line', es_client=es_client, es_index_name="my_es_index")
    scores, retrieved_examples = ds.get_nearest_examples('line', 'my new query', k=10)`,highlighted:`.. code-block:: python

    es_client = elasticsearch.Elasticsearch()
    ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
    ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
    scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`}}),Ro=new _({props:{name:"load_elasticsearch_index",anchor:"datasets.search.IndexableMixin.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/search.py#L565",parametersDescription:[{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}]}}),Bo=new Re({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),Ho=new _({props:{name:"list_indexes",anchor:"datasets.search.IndexableMixin.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/search.py#L390"}}),Go=new _({props:{name:"get_index",anchor:"datasets.search.IndexableMixin.get_index",parameters:[{name:"index_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/search.py#L394",parametersDescription:[{anchor:"datasets.search.IndexableMixin.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],returnType:`
<p><code>BaseIndex</code></p>
`}}),Ko=new _({props:{name:"drop_index",anchor:"datasets.search.IndexableMixin.drop_index",parameters:[{name:"index_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/search.py#L609",parametersDescription:[{anchor:"datasets.search.IndexableMixin.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}]}}),Wo=new _({props:{name:"search",anchor:"datasets.search.IndexableMixin.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/search.py#L617",parametersDescription:[{anchor:"datasets.search.IndexableMixin.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.search.IndexableMixin.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples.
The indices of the retrieved examples.</p>
`,returnType:`
<p>indices (<code>List[List[int]]</code>)</p>
`}}),Yo=new _({props:{name:"search_batch",anchor:"datasets.search.IndexableMixin.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/search.py#L632",parametersDescription:[{anchor:"datasets.search.IndexableMixin.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.search.IndexableMixin.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_indices (<code>List[List[int]]</code>)</p>
`}}),Jo=new _({props:{name:"get_nearest_examples",anchor:"datasets.search.IndexableMixin.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/search.py#L647",parametersDescription:[{anchor:"datasets.search.IndexableMixin.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.search.IndexableMixin.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples.
The retrieved examples.</p>
`,returnType:`
<p>examples (<code>dict</code>)</p>
`}}),Xo=new _({props:{name:"get_nearest_examples_batch",anchor:"datasets.search.IndexableMixin.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/search.py#L665",parametersDescription:[{anchor:"datasets.search.IndexableMixin.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.search.IndexableMixin.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
The retrieved examples per query.</p>
`,returnType:`
<p>total_examples (<em>List[dict]</em>)</p>
`}}),Zo=new _({props:{name:"info",anchor:"datasets.arrow_dataset.DatasetInfoMixin.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L154"}}),Qo=new _({props:{name:"split",anchor:"datasets.arrow_dataset.DatasetInfoMixin.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L159"}}),ei=new _({props:{name:"builder_name",anchor:"datasets.arrow_dataset.DatasetInfoMixin.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L164"}}),ti=new _({props:{name:"citation",anchor:"datasets.arrow_dataset.DatasetInfoMixin.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L168"}}),ai=new _({props:{name:"config_name",anchor:"datasets.arrow_dataset.DatasetInfoMixin.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L172"}}),si=new _({props:{name:"dataset_size",anchor:"datasets.arrow_dataset.DatasetInfoMixin.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L176"}}),ni=new _({props:{name:"description",anchor:"datasets.arrow_dataset.DatasetInfoMixin.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L180"}}),ri=new _({props:{name:"download_checksums",anchor:"datasets.arrow_dataset.DatasetInfoMixin.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L184"}}),oi=new _({props:{name:"download_size",anchor:"datasets.arrow_dataset.DatasetInfoMixin.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L188"}}),ii=new _({props:{name:"features",anchor:"datasets.arrow_dataset.DatasetInfoMixin.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L192"}}),di=new _({props:{name:"homepage",anchor:"datasets.arrow_dataset.DatasetInfoMixin.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L196"}}),li=new _({props:{name:"license",anchor:"datasets.arrow_dataset.DatasetInfoMixin.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L200"}}),ci=new _({props:{name:"size_in_bytes",anchor:"datasets.arrow_dataset.DatasetInfoMixin.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L204"}}),pi=new _({props:{name:"supervised_keys",anchor:"datasets.arrow_dataset.DatasetInfoMixin.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L208"}}),mi=new _({props:{name:"version",anchor:"datasets.arrow_dataset.DatasetInfoMixin.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L216"}}),fi=new _({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L839",parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),hi=new _({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L868",parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:`<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"field"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ui=new _({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L905",parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),gi=new _({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L944",parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),_i=new _({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L1700",parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code> must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}]}}),vi=new _({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3825",parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}]}}),yi=new Re({props:{code:`.. code-block:: python

# dataset with mapping {'entailment': 0, 'neutral': 1, 'contradiction': 2}
ds = load_dataset("glue", "mnli", split="train")
# mapping to align with
label2id = {'CONTRADICTION': 0, 'NEUTRAL': 1, 'ENTAILMENT': 2}
ds_aligned = ds.align_labels_with_mapping(label2id, "label")`,highlighted:`.. code-block:: python

<span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
ds = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-comment"># mapping to align with</span>
label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),$i=new _({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"},{name:"axis",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L3877",parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}]}}),wi=new _({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/combine.py#L20",parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructued by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.
**kwargs &#x2014; For map-style datasets:
Keyword arguments to be passed to <a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.select">Dataset.select()</a> when selecting the indices used to interleave the datasets.`,name:"seed"}],returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`}}),Di=new Re({props:{code:`For regular datasets (map-style):

>>> from datasets import Dataset, interleave_datasets
>>> d1 = Dataset.from_dict({"a": [0, 1, 2]})
>>> d2 = Dataset.from_dict({"a": [10, 11, 12]})
>>> d3 = Dataset.from_dict({"a": [20, 21, 22]})
>>> dataset = interleave_datasets([d1, d2, d3])
>>> dataset["a"]
[0, 10, 20, 1, 11, 21, 2, 12, 22]
>>> dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
>>> dataset["a"]
[10, 0, 11, 1, 2, 20, 12]

For datasets in streaming mode (iterable):

>>> from datasets import load_dataset, interleave_datasets
>>> d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
>>> d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
>>> dataset = interleave_datasets([d1, d2])
>>> iterator = iter(dataset)
>>> next(iterator)
{'text': 'Mtendere Village was inspired by the vision...
>>> next(iterator)
{'text': "M\xE9dia de d\xE9bat d'id\xE9es, de culture...`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>]

For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),xi=new _({props:{name:"datasets.set_caching_enabled",anchor:"datasets.set_caching_enabled",parameters:[{name:"boolean",val:": bool"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/fingerprint.py#L96"}}),ki=new _({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/fingerprint.py#L117"}}),Ti=new _({props:{name:"datasets.set_progress_bar_enabled",anchor:"datasets.set_progress_bar_enabled",parameters:[{name:"boolean",val:": bool"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/utils/tqdm_utils.py#L70"}}),Ni=new _({props:{name:"datasets.is_progress_bar_enabled",anchor:"datasets.is_progress_bar_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/utils/tqdm_utils.py#L76"}}),Fi=new rt({}),Pi=new _({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L30"}}),Ai=new _({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L52"}}),Li=new _({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L58"}}),Si=new _({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L64"}}),Oi=new _({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L70"}}),Ci=new _({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L76"}}),qi=new _({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L82"}}),zi=new _({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L96",parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)`,name:"column"}],returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),Vi=new _({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L112",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),Mi=new _({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L358",parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><em>function(example: Dict) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict, indices: int) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[List]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[List], indices: List[int]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}]}}),Ui=new _({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"remove_columns",val:": typing.Optional[typing.List[str]] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L446",parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}]}}),Ri=new _({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L519",parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}]}}),Bi=new _({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L575",parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (the seed argument has priority over seeds if both arguments are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}]}}),Hi=new _({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L242",parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),Ki=new _({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L269"}}),Yi=new _({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L209",parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),Ji=new _({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L303",parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),Zi=new _({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L331",parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}]}}),Qi=new _({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L88"}}),ed=new _({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L127",parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}]}}),td=new _({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L144",parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),ad=new _({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L157",parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}]}}),sd=new _({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L173",parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}]}}),rd=new _({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L194",parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}]}}),id=new _({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"shard_size",val:": typing.Optional[int] = 524288000"},{name:"embed_external_files",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L836",parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
The size of the dataset shards to be uploaded to the hub. The dataset will be pushed in files
of the size specified here, in bytes.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}]}}),dd=new Re({props:{code:`.. code-block:: python

>>> dataset_dict.push_to_hub("<organization>/<dataset_id>")`,highlighted:`.. code-block:: python

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)`}}),ld=new _({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L637",parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}]}}),cd=new _({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L663",parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),pd=new _({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L704",parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),md=new _({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L731",parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),fd=new _({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L758",parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),hd=new _({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L794",parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),ud=new _({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L821",parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code> must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}]}}),gd=new rt({}),_d=new _({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/iterable_dataset.py#L330"}}),vd=new _({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/iterable_dataset.py#L512",parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),bd=new _({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/iterable_dataset.py#L532",parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),yd=new _({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/iterable_dataset.py#L370"}}),$d=new _({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Callable"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/iterable_dataset.py#L406",parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; if not None, this function is applied
on-the-fly on the examples when you iterate on the dataset.`,name:"function"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}]}}),Dd=new _({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"buffer_size",val:""},{name:"seed",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/iterable_dataset.py#L445",parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>) &#x2014; size of the buffer.",name:"buffer_size"},{anchor:"datasets.IterableDataset.shuffle.seed",description:"<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to create the distribution.",name:"seed"}]}}),Ed=new _({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/iterable_dataset.py#L480",parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}]}}),Id=new _({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/iterable_dataset.py#L496",parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}]}}),Nd=new _({props:{name:"info",anchor:"datasets.arrow_dataset.DatasetInfoMixin.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L154"}}),Fd=new _({props:{name:"split",anchor:"datasets.arrow_dataset.DatasetInfoMixin.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L159"}}),Pd=new _({props:{name:"builder_name",anchor:"datasets.arrow_dataset.DatasetInfoMixin.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L164"}}),Ad=new _({props:{name:"citation",anchor:"datasets.arrow_dataset.DatasetInfoMixin.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L168"}}),Ld=new _({props:{name:"config_name",anchor:"datasets.arrow_dataset.DatasetInfoMixin.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L172"}}),Sd=new _({props:{name:"dataset_size",anchor:"datasets.arrow_dataset.DatasetInfoMixin.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L176"}}),Od=new _({props:{name:"description",anchor:"datasets.arrow_dataset.DatasetInfoMixin.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L180"}}),jd=new _({props:{name:"download_checksums",anchor:"datasets.arrow_dataset.DatasetInfoMixin.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L184"}}),Cd=new _({props:{name:"download_size",anchor:"datasets.arrow_dataset.DatasetInfoMixin.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L188"}}),qd=new _({props:{name:"features",anchor:"datasets.arrow_dataset.DatasetInfoMixin.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L192"}}),zd=new _({props:{name:"homepage",anchor:"datasets.arrow_dataset.DatasetInfoMixin.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L196"}}),Vd=new _({props:{name:"license",anchor:"datasets.arrow_dataset.DatasetInfoMixin.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L200"}}),Md=new _({props:{name:"size_in_bytes",anchor:"datasets.arrow_dataset.DatasetInfoMixin.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L204"}}),Ud=new _({props:{name:"supervised_keys",anchor:"datasets.arrow_dataset.DatasetInfoMixin.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L208"}}),Rd=new _({props:{name:"version",anchor:"datasets.arrow_dataset.DatasetInfoMixin.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/arrow_dataset.py#L216"}}),Bd=new rt({}),Gd=new _({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/dataset_dict.py#L921"}}),Kd=new rt({}),Wd=new _({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L1170"}}),$n=new aG({props:{$$slots:{default:[sG]},$$scope:{ctx:Ef}}}),el=new _({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L1370",returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),tl=new _({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L1352",parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),al=new _({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L1336",parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],returnDescription:`
<p><code>list[Any]</code></p>
`}}),sl=new _({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L1317",parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"}],returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),nl=new _({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L1299",parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),rl=new _({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L1286",parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),ol=new _({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L1440",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),il=new _({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L1235",parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),dl=new _({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L1255",parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),ll=new Re({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),cl=new _({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L1379",parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],returnType:`
<p><a
  href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),pl=new Re({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),ml=new _({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L876"}}),fl=new _({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": int = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L746",parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}]}}),ul=new _({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L831"}}),gl=new _({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L802"}}),_l=new _({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L367"}}),vl=new _({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/translation.py#L8"}}),yl=new Re({props:{code:`# At construction time:

datasets.features.Translation(languages=['en', 'fr', 'de'])

# During data generation:

yield {
'en': 'the cat',
'fr': 'le chat',
'de': 'die katze'
}`,highlighted:`<span class="hljs-comment"># At construction time:</span>

datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])

<span class="hljs-comment"># During data generation:</span>

<span class="hljs-keyword">yield</span> {
<span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
}`}}),$l=new _({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/translation.py#L45"}}),wl=new Re({props:{code:`# At construction time:

datasets.features.Translation(languages=['en', 'fr', 'de'])

# During data generation:

yield {
'en': 'the cat',
'fr': ['le chat', 'la chatte,']
'de': 'die katze'
}

# Tensor returned :

{
'language': ['en', 'de', 'fr', 'fr'],
'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-comment"># At construction time:</span>

datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])

<span class="hljs-comment"># During data generation:</span>

<span class="hljs-keyword">yield</span> {
<span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
}

<span class="hljs-comment"># Tensor returned :</span>

{
<span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
}`}}),xl=new _({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L443"}}),kl=new _({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L452"}}),Tl=new _({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L461"}}),Fl=new _({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/features.py#L470"}}),Pl=new _({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/audio.py#L14",parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}]}}),zl=new _({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/audio.py#L112",parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Vl=new _({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/audio.py#L80",parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"}],returnDescription:`
<p>dict</p>
`}}),Ml=new _({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/audio.py#L145",parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Ul=new _({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/audio.py#L54",parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],returnType:`
<p><code>dict</code></p>
`}}),Rl=new _({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/image.py#L23",parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}]}}),Zl=new _({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/image.py#L117",parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Ql=new _({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/image.py#L81",parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"}],returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),ec=new _({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/image.py#L166",parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),tc=new _({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/features/image.py#L53",parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),ac=new rt({}),sc=new _({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/info.py#L296"}}),nc=new _({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/info.py#L341"}}),oc=new _({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/info.py#L331"}}),ic=new rt({}),dc=new _({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/metric.py#L126",parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}]}}),lc=new _({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/metric.py#L484",parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}]}}),cc=new _({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/metric.py#L435",parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}]}}),pc=new _({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/metric.py#L376",parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),mc=new _({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.utils.download_manager.DownloadManager] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/metric.py#L557",parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}]}}),fc=new rt({}),hc=new _({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/filesystems/s3filesystem.py#L6",parametersDescription:[{anchor:"datasets.filesystems.S3FileSystem.anon",description:"<strong>anon</strong> (<code>bool</code>) &#x2014; Whether to use anonymous connection (public buckets only). If False, uses the key/secret given, or boto&#x2019;s credential resolver (client_kwargs, environment, variables, config files, EC2 IAM server, in that order)",name:"anon"},{anchor:"datasets.filesystems.S3FileSystem.key",description:"<strong>key</strong> (<code>string</code>) &#x2014; If not anonymous, use this access key ID, if specified",name:"key"},{anchor:"datasets.filesystems.S3FileSystem.secret",description:"<strong>secret</strong> (<code>string</code>) &#x2014; If not anonymous, use this secret access key, if specified",name:"secret"},{anchor:"datasets.filesystems.S3FileSystem.token",description:"<strong>token</strong> (<code>string</code>) &#x2014; If not anonymous, use this security token, if specified",name:"token"},{anchor:"datasets.filesystems.S3FileSystem.use_ssl",description:"<strong>use_ssl</strong> (<code>bool</code>) &#x2014; Whether to use SSL in connections to S3; may be faster without, but insecure. If <code>use_ssl</code> is also set in <code>client_kwargs</code>, the value set in <code>client_kwargs</code> will take priority.",name:"use_ssl"},{anchor:"datasets.filesystems.S3FileSystem.s3_additional_kwargs",description:"<strong>s3_additional_kwargs</strong> (dict of parameters that are used when calling s3 <code>api</code>) &#x2014; methods. Typically used for things like &#x201C;ServerSideEncryption&#x201D;.",name:"s3_additional_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.client_kwargs",description:"<strong>client_kwargs</strong> (dict of parameters for the botocore <code>client</code>) &#x2014;",name:"client_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.requester_pays",description:`<strong>requester_pays</strong> (<code>bool</code>) &#x2014; If RequesterPays buckets are supported.
default_block_size &#x2014; int (None) If given, the default block size value used for <code>open()</code>, if no specific value is given at all time. The built-in default is 5MB.`,name:"requester_pays"},{anchor:"datasets.filesystems.S3FileSystem.default_fill_cache",description:"<strong>default_fill_cache</strong> (<code>Bool</code>) &#x2014; Whether to use cache filling with open by default. Refer to <code>S3File.open</code>.",name:"default_fill_cache"},{anchor:"datasets.filesystems.S3FileSystem.default_cache_type",description:"<strong>default_cache_type</strong> (<code>string</code>) &#x2014; If given, the default cache_type value used for <code>open()</code>. Set to &#x201C;none&#x201D; if no caching is desired. See fsspec&#x2019;s documentation for other available cache_type values. Default cache_type is &#x2018;bytes&#x2019;.",name:"default_cache_type"},{anchor:"datasets.filesystems.S3FileSystem.version_aware",description:"<strong>version_aware</strong> (<code>bool</code>) &#x2014; Whether to support bucket versioning.  If enable this will require the user to have the necessary IAM permissions for dealing with versioned objects.",name:"version_aware"},{anchor:"datasets.filesystems.S3FileSystem.cache_regions",description:"<strong>cache_regions</strong> (<code>bool</code>) &#x2014; Whether to cache bucket regions or not. Whenever a new bucket is used, it will first find out which region it belongs and then use the client for that region.",name:"cache_regions"},{anchor:"datasets.filesystems.S3FileSystem.config_kwargs",description:"<strong>config_kwargs</strong> (dict of parameters passed to :obj:<code>botocore.client.Config</code>) &#x2014;",name:"config_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.kwargs",description:"<strong>kwargs</strong> (other parameters for core <code>session</code>) &#x2014;",name:"kwargs"},{anchor:"datasets.filesystems.S3FileSystem.session",description:"<strong>session</strong> (aiobotocore AioSession object to be used for all <code>connections.</code>) &#x2014; This session will be used inplace of creating a new session inside S3FileSystem. For example: aiobotocore.session.AioSession(profile=&#x2018;test_user&#x2019;)",name:"session"}]}}),_c=new _({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/filesystems.py#L28",parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}]}}),vc=new _({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/filesystems.py#L40",parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}]}}),bc=new rt({}),yc=new _({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3799/src/datasets/fingerprint.py#L167"}}),{c(){A=a("meta"),ot=d(),O=a("h1"),J=a("a"),Jt=a("span"),p(ie.$$.fragment),$r=d(),Xt=a("span"),it=r("Main classes"),Ga=d(),de=a("h2"),ee=a("a"),H=a("span"),p(dt.$$.fragment),Dc=d(),Ka=a("span"),fw=r("DatasetInfo"),xb=d(),z=a("div"),p(wr.$$.fragment),hw=d(),kf=a("p"),uw=r("Information about a dataset."),gw=d(),xc=a("p"),If=a("em"),_w=r("DatasetInfo"),vw=r(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),bw=d(),Tf=a("p"),yw=r("Note: Not all fields are known on construction and may be updated later."),$w=d(),ve=a("div"),p(Dr.$$.fragment),ww=d(),xr=a("p"),Dw=r("Create DatasetInfo from the JSON file in "),Nf=a("code"),xw=r("dataset_info_dir"),Ew=r("."),kw=d(),Ff=a("p"),Iw=r(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),Tw=d(),Pf=a("p"),Nw=r("This will overwrite all previous metadata."),Fw=d(),lt=a("div"),p(Er.$$.fragment),Pw=d(),Zt=a("p"),Aw=r("Write "),Af=a("code"),Lw=r("DatasetInfo"),Sw=r(" as JSON to "),Lf=a("code"),Ow=r("dataset_info_dir"),jw=r("."),Cw=d(),Sf=a("p"),qw=r("Also save the license separately in LICENCE."),Eb=d(),Qt=a("h2"),Wa=a("a"),Of=a("span"),p(kr.$$.fragment),zw=d(),jf=a("span"),Vw=r("Dataset"),kb=d(),Ya=a("p"),Mw=r("The base class "),Ec=a("a"),Uw=r("datasets.Dataset"),Rw=r(" implements a Dataset backed by an Apache Arrow table."),Ib=d(),v=a("div"),p(Ir.$$.fragment),Bw=d(),Cf=a("p"),Hw=r("A Dataset backed by an Arrow table."),Gw=d(),ct=a("div"),p(Tr.$$.fragment),Kw=d(),qf=a("p"),Ww=r("Add column to Dataset."),Yw=d(),zf=a("p"),Vf=a("em"),Jw=r("New in version 1.7."),Xw=d(),pt=a("div"),p(Nr.$$.fragment),Zw=d(),Mf=a("p"),Qw=r("Add item to Dataset."),eD=d(),Uf=a("p"),Rf=a("em"),tD=r("New in version 1.7."),aD=d(),Ja=a("div"),p(Fr.$$.fragment),sD=d(),Bf=a("p"),nD=r("Instantiate a Dataset backed by an Arrow table at filename."),rD=d(),Xa=a("div"),p(Pr.$$.fragment),oD=d(),Hf=a("p"),iD=r("Instantiate a Dataset backed by an Arrow buffer."),dD=d(),be=a("div"),p(Ar.$$.fragment),lD=d(),Be=a("p"),cD=r("Convert "),Gf=a("code"),pD=r("pandas.DataFrame"),mD=r(" to a "),Kf=a("code"),fD=r("pyarrow.Table"),hD=r(" to create a "),kc=a("a"),uD=r("Dataset"),gD=r("."),_D=d(),Lr=a("p"),vD=r(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Wf=a("em"),bD=r("object"),yD=r(", we need to guess the datatype by looking at the Python objects in this Series."),$D=d(),Sr=a("p"),wD=r("Be aware that Series of the "),Yf=a("em"),DD=r("object"),xD=r(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),ED=d(),Za=a("div"),p(Or.$$.fragment),kD=d(),He=a("p"),ID=r("Convert "),Jf=a("code"),TD=r("dict"),ND=r(" to a "),Xf=a("code"),FD=r("pyarrow.Table"),PD=r(" to create a "),Ic=a("a"),AD=r("Dataset"),LD=r("."),SD=d(),Qa=a("div"),p(jr.$$.fragment),OD=d(),Zf=a("p"),jD=r("The Apache Arrow table backing the dataset."),CD=d(),es=a("div"),p(Cr.$$.fragment),qD=d(),Qf=a("p"),zD=r("The cache files containing the Apache Arrow table backing the dataset."),VD=d(),ts=a("div"),p(qr.$$.fragment),MD=d(),eh=a("p"),UD=r("Number of columns in the dataset."),RD=d(),as=a("div"),p(zr.$$.fragment),BD=d(),Vr=a("p"),HD=r("Number of rows in the dataset (same as "),ss=a("a"),GD=r("Dataset."),th=a("strong"),KD=r("len"),WD=r("()"),YD=r(")."),JD=d(),ns=a("div"),p(Mr.$$.fragment),XD=d(),ah=a("p"),ZD=r("Names of the columns in the dataset."),QD=d(),rs=a("div"),p(Ur.$$.fragment),ex=d(),sh=a("p"),tx=r("Shape of the dataset (number of columns, number of rows)."),ax=d(),mt=a("div"),p(Rr.$$.fragment),sx=d(),nh=a("p"),nx=r("Return a list of the unique elements in a column."),rx=d(),rh=a("p"),ox=r("This is implemented in the low-level backend and as such, very fast."),ix=d(),os=a("div"),p(Br.$$.fragment),dx=d(),oh=a("p"),lx=r(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),cx=d(),is=a("div"),p(Hr.$$.fragment),px=d(),ih=a("p"),mx=r("Cast the dataset to a new set of features."),fx=d(),ds=a("div"),p(Gr.$$.fragment),hx=d(),dh=a("p"),ux=r("Cast column to feature for decoding."),gx=d(),ft=a("div"),p(Kr.$$.fragment),_x=d(),lh=a("p"),vx=r("Remove one or several column(s) in the dataset and the features associated to them."),bx=d(),ea=a("p"),yx=r("You can also remove a column using "),Tc=a("a"),$x=r("Dataset.map()"),wx=r(" with "),ch=a("em"),Dx=r("remove_columns"),xx=r(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Ex=d(),ls=a("div"),p(Wr.$$.fragment),kx=d(),ph=a("p"),Ix=r(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),Tx=d(),cs=a("div"),p(Yr.$$.fragment),Nx=d(),Jr=a("p"),Fx=r("Casts the given column as :obj:"),mh=a("code"),Px=r("datasets.features.ClassLabel"),Ax=r(" and updates the table."),Lx=d(),ps=a("div"),p(Xr.$$.fragment),Sx=d(),fh=a("p"),Ox=r("Number of rows in the dataset."),jx=d(),ht=a("div"),p(Zr.$$.fragment),Cx=d(),hh=a("p"),qx=r("Iterate through the examples."),zx=d(),Qr=a("p"),Vx=r("If a formatting is set with "),Nc=a("a"),Mx=r("Dataset.set_format()"),Ux=r(` rows will be returned with the
selected format.`),Rx=d(),ms=a("div"),p(eo.$$.fragment),Bx=d(),ta=a("p"),Hx=r("To be used in a "),uh=a("code"),Gx=r("with"),Kx=r(" statement. Set "),gh=a("code"),Wx=r("__getitem__"),Yx=r(" return format (type and columns)."),Jx=d(),ye=a("div"),p(to.$$.fragment),Xx=d(),le=a("p"),Zx=r("Set "),_h=a("strong"),Qx=r("getitem"),e0=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),vh=a("code"),t0=r("type"),a0=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),bh=a("strong"),s0=r("getitem"),n0=r(`.
It\u2019s also possible to use custom transforms for formatting using `),Fc=a("a"),r0=r("datasets.Dataset.set_transform()"),o0=r("."),i0=d(),ce=a("p"),d0=r("It is possible to call "),yh=a("code"),l0=r("map"),c0=r(" after calling "),$h=a("code"),p0=r("set_format"),m0=r(". Since "),wh=a("code"),f0=r("map"),h0=r(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),Dh=a("code"),u0=r("map"),g0=r(" on a dataset to add a new column, then this column will be formatted:"),_0=d(),xh=a("p"),v0=r("new formatted columns = (all columns - previously unformatted columns)"),b0=d(),fs=a("div"),p(ao.$$.fragment),y0=d(),$e=a("p"),$0=r("Set "),Eh=a("strong"),w0=r("getitem"),D0=r(" return format using this transform. The transform is applied on-the-fly on batches when "),kh=a("strong"),x0=r("getitem"),E0=r(` is called.
As `),Pc=a("a"),k0=r("datasets.Dataset.set_format()"),I0=r(", this can be reset using "),Ac=a("a"),T0=r("datasets.Dataset.reset_format()"),N0=d(),ut=a("div"),p(so.$$.fragment),F0=d(),no=a("p"),P0=r("Reset "),Ih=a("strong"),A0=r("getitem"),L0=r(" return format to python objects and all columns."),S0=d(),Lc=a("p"),O0=r("Same as "),Th=a("code"),j0=r("self.set_format()"),C0=d(),we=a("div"),p(ro.$$.fragment),q0=d(),Ge=a("p"),z0=r("Set "),Nh=a("strong"),V0=r("getitem"),M0=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Fh=a("code"),U0=r("type"),R0=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),Ph=a("strong"),B0=r("getitem"),H0=r("."),G0=d(),oo=a("p"),K0=r("It\u2019s also possible to use custom transforms for formatting using "),Sc=a("a"),W0=r("datasets.Dataset.with_transform()"),Y0=r("."),J0=d(),aa=a("p"),X0=r("Contrary to "),Oc=a("a"),Z0=r("datasets.Dataset.set_format()"),Q0=r(", "),Ah=a("code"),e9=r("with_format"),t9=r(" returns a new Dataset object."),a9=d(),De=a("div"),p(io.$$.fragment),s9=d(),sa=a("p"),n9=r("Set "),Lh=a("strong"),r9=r("getitem"),o9=r(" return format using this transform. The transform is applied on-the-fly on batches when "),Sh=a("strong"),i9=r("getitem"),d9=r(" is called."),l9=d(),na=a("p"),c9=r("As "),jc=a("a"),p9=r("datasets.Dataset.set_format()"),m9=r(", this can be reset using "),Cc=a("a"),f9=r("datasets.Dataset.reset_format()"),h9=r("."),u9=d(),ra=a("p"),g9=r("Contrary to "),qc=a("a"),_9=r("datasets.Dataset.set_transform()"),v9=r(", "),Oh=a("code"),b9=r("with_transform"),y9=r(" returns a new Dataset object."),$9=d(),hs=a("div"),p(lo.$$.fragment),w9=d(),jh=a("p"),D9=r("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),x9=d(),gt=a("div"),p(co.$$.fragment),E9=d(),Ch=a("p"),k9=r(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),I9=d(),qh=a("p"),T9=r("Be careful when running this command that no other process is currently using other cache files."),N9=d(),us=a("div"),p(po.$$.fragment),F9=d(),zh=a("p"),P9=r(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does update examples).`),A9=d(),gs=a("div"),p(mo.$$.fragment),L9=d(),Vh=a("p"),S9=r(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),O9=d(),_s=a("div"),p(fo.$$.fragment),j9=d(),Mh=a("p"),C9=r("Create a new dataset with rows selected following the list/array of indices."),q9=d(),_t=a("div"),p(ho.$$.fragment),z9=d(),Uh=a("p"),V9=r("Create a new dataset sorted according to a column."),M9=d(),Rh=a("p"),U9=r(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),R9=d(),vt=a("div"),p(uo.$$.fragment),B9=d(),Bh=a("p"),H9=r("Create a new Dataset where the rows are shuffled."),G9=d(),Hh=a("p"),K9=r(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),W9=d(),bt=a("div"),p(go.$$.fragment),Y9=d(),j=a("p"),J9=r("Return a dictionary ("),Gh=a("code"),X9=r("datasets.DatsetDict"),Z9=r(") with two random train and test subsets ("),Kh=a("em"),Q9=r("train"),e3=r(" and "),Wh=a("em"),t3=r("test"),a3=d(),Yh=a("code"),s3=r("Dataset"),n3=r(` splits).
Splits are created from the dataset according to `),Jh=a("em"),r3=r("test_size"),o3=r(", "),Xh=a("em"),i3=r("train_size"),d3=r(" and "),Zh=a("em"),l3=r("shuffle"),c3=r("."),p3=d(),_o=a("p"),m3=r("This method is similar to scikit-learn "),Qh=a("em"),f3=r("train_test_split"),h3=r(" with the omission of the stratified options."),u3=d(),te=a("div"),p(vo.$$.fragment),g3=d(),oa=a("p"),_3=r("Return the "),eu=a("em"),v3=r("index"),b3=r("-nth shard from dataset split into "),tu=a("em"),y3=r("num_shards"),$3=r(" pieces."),w3=d(),au=a("p"),D3=r(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),x3=d(),bo=a("p"),E3=r(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),su=a("em"),k3=r("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),I3=r(` will return
a dataset with the same order as the original.`),T3=d(),nu=a("p"),N3=r(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),F3=d(),vs=a("div"),p(yo.$$.fragment),P3=d(),ru=a("p"),A3=r(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),L3=d(),xe=a("div"),p($o.$$.fragment),S3=d(),ou=a("p"),O3=r(`Pushes the dataset to the hub.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),j3=d(),iu=a("p"),C3=r("Example:"),q3=d(),p(wo.$$.fragment),z3=d(),bs=a("div"),p(Do.$$.fragment),V3=d(),ia=a("p"),M3=r("Saves a dataset to a dataset directory, or in a filesystem using either "),zc=a("a"),U3=r("S3FileSystem"),R3=r(` or
any implementation of `),du=a("code"),B3=r("fsspec.spec.AbstractFileSystem"),H3=r("."),G3=d(),ys=a("div"),p(xo.$$.fragment),K3=d(),Ke=a("p"),W3=r("Loads a dataset that was previously saved using "),lu=a("code"),Y3=r("save_to_disk"),J3=r(` from a dataset directory, or from a
filesystem using either `),Vc=a("a"),X3=r("S3FileSystem"),Z3=r(` or any implementation of
`),cu=a("code"),Q3=r("fsspec.spec.AbstractFileSystem"),e4=r("."),t4=d(),$s=a("div"),p(Eo.$$.fragment),a4=d(),pu=a("p"),s4=r("Create and cache a new Dataset by flattening the indices mapping."),n4=d(),ws=a("div"),p(ko.$$.fragment),r4=d(),mu=a("p"),o4=r("Exports the dataset to csv"),i4=d(),Ds=a("div"),p(Io.$$.fragment),d4=d(),To=a("p"),l4=r("Returns the dataset as a "),fu=a("code"),c4=r("pandas.DataFrame"),p4=r(". Can also return a generator for large datasets."),m4=d(),xs=a("div"),p(No.$$.fragment),f4=d(),hu=a("p"),h4=r("Returns the dataset as a Python dict. Can also return a generator for large datasets."),u4=d(),Es=a("div"),p(Fo.$$.fragment),g4=d(),uu=a("p"),_4=r("Export the dataset to JSON Lines or JSON."),v4=d(),ks=a("div"),p(Po.$$.fragment),b4=d(),gu=a("p"),y4=r("Exports the dataset to parquet"),$4=d(),ae=a("div"),p(Ao.$$.fragment),w4=d(),da=a("p"),D4=r(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),_u=a("code"),x4=r("device"),E4=r(" if you want to run it on GPU ("),vu=a("code"),k4=r("device"),I4=r(` must be the GPU index).
You can find more information about Faiss here:`),T4=d(),bu=a("ul"),Mc=a("li"),N4=r("For "),Lo=a("a"),F4=r("string factory"),P4=d(),yu=a("p"),A4=r("Example:"),L4=d(),p(So.$$.fragment),S4=d(),yt=a("div"),p(Oo.$$.fragment),O4=d(),We=a("p"),j4=r(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),$u=a("em"),C4=r("external_arrays"),q4=r(`.
You can specify `),wu=a("em"),z4=r("device"),V4=r(" if you want to run it on GPU ("),Du=a("em"),M4=r("device"),U4=r(` must be the GPU index).
You can find more information about Faiss here:`),R4=d(),xu=a("ul"),Uc=a("li"),B4=r("For "),jo=a("a"),H4=r("string factory"),G4=d(),Is=a("div"),p(Co.$$.fragment),K4=d(),Eu=a("p"),W4=r("Save a FaissIndex on disk."),Y4=d(),$t=a("div"),p(qo.$$.fragment),J4=d(),ku=a("p"),X4=r("Load a FaissIndex from disk."),Z4=d(),zo=a("p"),Q4=r(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),Iu=a("em"),e7=r(".get_index(index_name).faiss_index"),t7=r(" to make it fit your needs."),a7=d(),G=a("div"),p(Vo.$$.fragment),s7=d(),Tu=a("p"),n7=r("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),r7=d(),Nu=a("p"),o7=r("Default config is:"),i7=d(),p(Mo.$$.fragment),d7=d(),Fu=a("p"),l7=r("Example:"),c7=d(),p(Uo.$$.fragment),p7=d(),Ee=a("div"),p(Ro.$$.fragment),m7=d(),Pu=a("p"),f7=r("Load an existing text index using ElasticSearch for fast retrieval."),h7=d(),Au=a("p"),u7=r("Default config is:"),g7=d(),p(Bo.$$.fragment),_7=d(),Ts=a("div"),p(Ho.$$.fragment),v7=d(),Lu=a("p"),b7=r("List the colindex_nameumns/identifiers of all the attached indexes."),y7=d(),Ns=a("div"),p(Go.$$.fragment),$7=d(),Su=a("p"),w7=r("List the index_name/identifiers of all the attached indexes."),D7=d(),Fs=a("div"),p(Ko.$$.fragment),x7=d(),Ou=a("p"),E7=r("Drop the index with the specified column."),k7=d(),Ps=a("div"),p(Wo.$$.fragment),I7=d(),ju=a("p"),T7=r("Find the nearest examples indices in the dataset to the query."),N7=d(),As=a("div"),p(Yo.$$.fragment),F7=d(),Cu=a("p"),P7=r("Find the nearest examples indices in the dataset to the query."),A7=d(),Ls=a("div"),p(Jo.$$.fragment),L7=d(),qu=a("p"),S7=r("Find the nearest examples in the dataset to the query."),O7=d(),Ss=a("div"),p(Xo.$$.fragment),j7=d(),zu=a("p"),C7=r("Find the nearest examples in the dataset to the query."),q7=d(),Os=a("div"),p(Zo.$$.fragment),z7=d(),Rc=a("p"),Bc=a("a"),V7=r("datasets.DatasetInfo"),M7=r(" object containing all the metadata in the dataset."),U7=d(),js=a("div"),p(Qo.$$.fragment),R7=d(),Hc=a("p"),Gc=a("a"),B7=r("datasets.NamedSplit"),H7=r(" object corresponding to a named dataset split."),G7=d(),Kc=a("div"),p(ei.$$.fragment),K7=d(),Wc=a("div"),p(ti.$$.fragment),W7=d(),Yc=a("div"),p(ai.$$.fragment),Y7=d(),Jc=a("div"),p(si.$$.fragment),J7=d(),Xc=a("div"),p(ni.$$.fragment),X7=d(),Zc=a("div"),p(ri.$$.fragment),Z7=d(),Qc=a("div"),p(oi.$$.fragment),Q7=d(),ep=a("div"),p(ii.$$.fragment),eE=d(),tp=a("div"),p(di.$$.fragment),tE=d(),ap=a("div"),p(li.$$.fragment),aE=d(),sp=a("div"),p(ci.$$.fragment),sE=d(),np=a("div"),p(pi.$$.fragment),nE=d(),rp=a("div"),p(mi.$$.fragment),rE=d(),Cs=a("div"),p(fi.$$.fragment),oE=d(),Vu=a("p"),iE=r("Create Dataset from CSV file(s)."),dE=d(),qs=a("div"),p(hi.$$.fragment),lE=d(),Mu=a("p"),cE=r("Create Dataset from JSON or JSON Lines file(s)."),pE=d(),zs=a("div"),p(ui.$$.fragment),mE=d(),Uu=a("p"),fE=r("Create Dataset from Parquet file(s)."),hE=d(),Vs=a("div"),p(gi.$$.fragment),uE=d(),Ru=a("p"),gE=r("Create Dataset from text file(s)."),_E=d(),wt=a("div"),p(_i.$$.fragment),vE=d(),la=a("p"),bE=r("Prepare a dataset for the given task by casting the dataset\u2019s "),op=a("a"),yE=r("Features"),$E=r(" to standardized column names and types as detailed in "),ip=a("a"),wE=r("datasets.tasks"),DE=r("."),xE=d(),ca=a("p"),EE=r("Casts "),Bu=a("code"),kE=r("datasets.DatasetInfo.features"),IE=r(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Hu=a("code"),TE=r("datasets.DatasetInfo.task_templates"),NE=r(" after casting."),FE=d(),ke=a("div"),p(vi.$$.fragment),PE=d(),bi=a("p"),AE=r("Align the dataset\u2019s label ID and label name mapping to match an input "),Gu=a("code"),LE=r("label2id"),SE=r(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),OE=d(),Ku=a("p"),jE=r("Example:"),CE=d(),p(yi.$$.fragment),Tb=d(),pa=a("div"),p($i.$$.fragment),qE=d(),ma=a("p"),zE=r("Converts a list of "),dp=a("a"),VE=r("Dataset"),ME=r(" with the same schema into a single "),lp=a("a"),UE=r("Dataset"),RE=r("."),Nb=d(),C=a("div"),p(wi.$$.fragment),BE=d(),Wu=a("p"),HE=r(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),GE=d(),fa=a("p"),KE=r("You can use this function on a list of "),cp=a("a"),WE=r("Dataset"),YE=r(" objects, or on a list of "),pp=a("a"),JE=r("IterableDataset"),XE=r(" objects."),ZE=d(),pe=a("p"),QE=r("If "),Yu=a("code"),ek=r("probabilities"),tk=r(" is "),Ju=a("code"),ak=r("None"),sk=r(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),Xu=a("code"),nk=r("probabilities"),rk=r(" is not "),Zu=a("code"),ok=r("None"),ik=r(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),dk=d(),Qu=a("p"),lk=r("The resulting dataset ends when one of the source datasets runs out of examples."),ck=d(),eg=a("p"),pk=r("Example:"),mk=d(),p(Di.$$.fragment),Fb=d(),X=a("div"),p(xi.$$.fragment),fk=d(),tg=a("p"),hk=r(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),uk=d(),ag=a("p"),gk=r(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),_k=d(),sg=a("p"),vk=r(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),bk=d(),me=a("ul"),ng=a("li"),yk=r("cache files are always recreated"),$k=d(),rg=a("li"),wk=r("cache files are written to a temporary directory that is deleted when session closes"),Dk=d(),og=a("li"),xk=r("cache files are named using a random hash instead of the dataset fingerprint"),Ek=d(),Ei=a("li"),kk=r("use "),mp=a("a"),Ik=r("datasets.Dataset.save_to_disk()"),Tk=r(" to save a transformed dataset or it will be deleted when session closes"),Nk=d(),Ye=a("li"),Fk=r("caching doesn\u2019t affect "),fp=a("a"),Pk=r("datasets.load_dataset()"),Ak=r(`. If you want to regenerate a dataset from scratch you should use
the `),ig=a("code"),Lk=r("download_mode"),Sk=r(" parameter in "),hp=a("a"),Ok=r("datasets.load_dataset()"),jk=r("."),Pb=d(),Z=a("div"),p(ki.$$.fragment),Ck=d(),dg=a("p"),qk=r(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),zk=d(),lg=a("p"),Vk=r(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),Mk=d(),cg=a("p"),Uk=r(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),Rk=d(),fe=a("ul"),pg=a("li"),Bk=r("cache files are always recreated"),Hk=d(),mg=a("li"),Gk=r("cache files are written to a temporary directory that is deleted when session closes"),Kk=d(),fg=a("li"),Wk=r("cache files are named using a random hash instead of the dataset fingerprint"),Yk=d(),Ii=a("li"),Jk=r("use "),up=a("a"),Xk=r("datasets.Dataset.save_to_disk()"),Zk=r(" to save a transformed dataset or it will be deleted when session closes"),Qk=d(),Je=a("li"),eI=r("caching doesn\u2019t affect "),gp=a("a"),tI=r("datasets.load_dataset()"),aI=r(`. If you want to regenerate a dataset from scratch you should use
the `),hg=a("code"),sI=r("download_mode"),nI=r(" parameter in "),_p=a("a"),rI=r("datasets.load_dataset()"),oI=r("."),Ab=d(),ha=a("div"),p(Ti.$$.fragment),iI=d(),ug=a("p"),dI=r("Enable/disable tqdm progress bars."),Lb=d(),ua=a("div"),p(Ni.$$.fragment),lI=d(),gg=a("p"),cI=r("Return a boolean indicating whether tqdm progress bars are enabled."),Sb=d(),ga=a("h2"),Ms=a("a"),_g=a("span"),p(Fi.$$.fragment),pI=d(),vg=a("span"),mI=r("DatasetDict"),Ob=d(),Us=a("p"),fI=r("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),bg=a("code"),hI=r("datasets.Dataset"),uI=r(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),jb=d(),w=a("div"),p(Pi.$$.fragment),gI=d(),yg=a("p"),_I=r("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),vI=d(),Rs=a("div"),p(Ai.$$.fragment),bI=d(),$g=a("p"),yI=r("The Apache Arrow tables backing each split."),$I=d(),Bs=a("div"),p(Li.$$.fragment),wI=d(),wg=a("p"),DI=r("The cache files containing the Apache Arrow table backing each split."),xI=d(),Hs=a("div"),p(Si.$$.fragment),EI=d(),Dg=a("p"),kI=r("Number of columns in each split of the dataset."),II=d(),Gs=a("div"),p(Oi.$$.fragment),TI=d(),ji=a("p"),NI=r("Number of rows in each split of the dataset (same as "),Ks=a("a"),FI=r("datasets.Dataset."),xg=a("strong"),PI=r("len"),AI=r("()"),LI=r(")."),SI=d(),Ws=a("div"),p(Ci.$$.fragment),OI=d(),Eg=a("p"),jI=r("Names of the columns in each split of the dataset."),CI=d(),Ys=a("div"),p(qi.$$.fragment),qI=d(),kg=a("p"),zI=r("Shape of each split of the dataset (number of columns, number of rows)."),VI=d(),Dt=a("div"),p(zi.$$.fragment),MI=d(),Ig=a("p"),UI=r("Return a list of the unique elements in a column for each split."),RI=d(),Tg=a("p"),BI=r("This is implemented in the low-level backend and as such, very fast."),HI=d(),Js=a("div"),p(Vi.$$.fragment),GI=d(),Ng=a("p"),KI=r(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be carefull when running this command that no other process is currently using other cache files.`),WI=d(),Xs=a("div"),p(Mi.$$.fragment),YI=d(),Fg=a("p"),JI=r(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),XI=d(),Zs=a("div"),p(Ui.$$.fragment),ZI=d(),Pg=a("p"),QI=r(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),e5=d(),xt=a("div"),p(Ri.$$.fragment),t5=d(),Ag=a("p"),a5=r(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),s5=d(),Lg=a("p"),n5=r(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),r5=d(),Ie=a("div"),p(Bi.$$.fragment),o5=d(),Sg=a("p"),i5=r("Create a new Dataset where the rows are shuffled."),d5=d(),Og=a("p"),l5=r("The transformation is applied to all the datasets of the dataset dictionary."),c5=d(),jg=a("p"),p5=r(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),m5=d(),Te=a("div"),p(Hi.$$.fragment),f5=d(),Gi=a("p"),h5=r("Set "),Cg=a("code"),u5=r("__getitem__"),g5=r(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),_5=d(),he=a("p"),v5=r("It is possible to call "),qg=a("code"),b5=r("map"),y5=r(" after calling "),zg=a("code"),$5=r("set_format"),w5=r(". Since "),Vg=a("code"),D5=r("map"),x5=r(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),Mg=a("code"),E5=r("map"),k5=r(" on a dataset to add a new column, then this column will be formatted:"),I5=d(),Ug=a("p"),T5=r("new formatted columns = (all columns - previously unformatted columns)"),N5=d(),Et=a("div"),p(Ki.$$.fragment),F5=d(),Wi=a("p"),P5=r("Reset "),Rg=a("code"),A5=r("__getitem__"),L5=r(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),S5=d(),vp=a("p"),O5=r("Same as "),Bg=a("code"),j5=r("self.set_format()"),C5=d(),Qs=a("div"),p(Yi.$$.fragment),q5=d(),_a=a("p"),z5=r("To be used in a "),Hg=a("em"),V5=r("with"),M5=r(" statement. Set "),Gg=a("code"),U5=r("__getitem__"),R5=r(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),B5=d(),Ne=a("div"),p(Ji.$$.fragment),H5=d(),Xe=a("p"),G5=r("Set "),Kg=a("code"),K5=r("__getitem__"),W5=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Wg=a("code"),Y5=r("type"),J5=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),Yg=a("code"),X5=r("__getitem__"),Z5=r(`.
The format is set for every dataset in the dataset dictionary`),Q5=d(),Xi=a("p"),e6=r("It\u2019s also possible to use custom transforms for formatting using "),bp=a("a"),t6=r("datasets.Dataset.with_transform()"),a6=r("."),s6=d(),va=a("p"),n6=r("Contrary to "),yp=a("a"),r6=r("datasets.DatasetDict.set_format()"),o6=r(", "),Jg=a("code"),i6=r("with_format"),d6=r(" returns a new DatasetDict object with new Dataset objects."),l6=d(),Fe=a("div"),p(Zi.$$.fragment),c6=d(),ba=a("p"),p6=r("Set "),Xg=a("code"),m6=r("__getitem__"),f6=r(" return format using this transform. The transform is applied on-the-fly on batches when "),Zg=a("code"),h6=r("__getitem__"),u6=r(` is called.
The transform is set for every dataset in the dataset dictionary`),g6=d(),ya=a("p"),_6=r("As "),$p=a("a"),v6=r("datasets.Dataset.set_format()"),b6=r(", this can be reset using "),wp=a("a"),y6=r("datasets.Dataset.reset_format()"),$6=r("."),w6=d(),$a=a("p"),D6=r("Contrary to "),Qg=a("code"),x6=r("datasets.DatasetDict.set_transform()"),E6=d(),e_=a("code"),k6=r("with_transform"),I6=r(" returns a new DatasetDict object with new Dataset objects."),T6=d(),en=a("div"),p(Qi.$$.fragment),N6=d(),t_=a("p"),F6=r(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),P6=d(),kt=a("div"),p(ed.$$.fragment),A6=d(),a_=a("p"),L6=r(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),S6=d(),Ze=a("p"),O6=r("You can also remove a column using "),Dp=a("a"),j6=r("Dataset.map()"),C6=r(" with "),s_=a("em"),q6=r("feature"),z6=r(" but "),n_=a("code"),V6=r("cast_"),M6=r(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),U6=d(),tn=a("div"),p(td.$$.fragment),R6=d(),r_=a("p"),B6=r("Cast column to feature for decoding."),H6=d(),Pe=a("div"),p(ad.$$.fragment),G6=d(),o_=a("p"),K6=r(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),W6=d(),i_=a("p"),Y6=r("The transformation is applied to all the splits of the dataset dictionary."),J6=d(),wa=a("p"),X6=r("You can also remove a column using "),xp=a("a"),Z6=r("Dataset.map()"),Q6=r(" with "),d_=a("em"),e8=r("remove_columns"),t8=r(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),a8=d(),Ae=a("div"),p(sd.$$.fragment),s8=d(),l_=a("p"),n8=r(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),r8=d(),Da=a("p"),o8=r("You can also rename a column using "),Ep=a("a"),i8=r("Dataset.map()"),d8=r(" with "),c_=a("em"),l8=r("remove_columns"),c8=r(" but the present method:"),p8=d(),nd=a("ul"),p_=a("li"),m8=r("takes care of moving the original features under the new column name."),f8=d(),m_=a("li"),h8=r("doesn\u2019t copy the data to a new dataset and is thus much faster."),u8=d(),an=a("div"),p(rd.$$.fragment),g8=d(),od=a("p"),_8=r("Casts the given column as :obj:"),f_=a("code"),v8=r("datasets.features.ClassLabel"),b8=r(" and updates the tables."),y8=d(),se=a("div"),p(id.$$.fragment),$8=d(),xa=a("p"),w8=r("Pushes the "),h_=a("code"),D8=r("DatasetDict"),x8=r(` to the hub.
The `),u_=a("code"),E8=r("DatasetDict"),k8=r(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),I8=d(),g_=a("p"),T8=r("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),N8=d(),__=a("p"),F8=r("Example:"),P8=d(),p(dd.$$.fragment),A8=d(),sn=a("div"),p(ld.$$.fragment),L8=d(),Ea=a("p"),S8=r("Saves a dataset dict to a filesystem using either "),kp=a("a"),O8=r("S3FileSystem"),j8=r(` or
`),v_=a("code"),C8=r("fsspec.spec.AbstractFileSystem"),q8=r("."),z8=d(),nn=a("div"),p(cd.$$.fragment),V8=d(),Qe=a("p"),M8=r("Load a dataset that was previously saved using "),b_=a("code"),U8=r("save_to_disk"),R8=r(` from a filesystem using either
`),Ip=a("a"),B8=r("S3FileSystem"),H8=r(" or "),y_=a("code"),G8=r("fsspec.spec.AbstractFileSystem"),K8=r("."),W8=d(),rn=a("div"),p(pd.$$.fragment),Y8=d(),$_=a("p"),J8=r("Create DatasetDict from CSV file(s)."),X8=d(),on=a("div"),p(md.$$.fragment),Z8=d(),w_=a("p"),Q8=r("Create DatasetDict from JSON Lines file(s)."),eT=d(),dn=a("div"),p(fd.$$.fragment),tT=d(),D_=a("p"),aT=r("Create DatasetDict from Parquet file(s)."),sT=d(),ln=a("div"),p(hd.$$.fragment),nT=d(),x_=a("p"),rT=r("Create DatasetDict from text file(s)."),oT=d(),It=a("div"),p(ud.$$.fragment),iT=d(),ka=a("p"),dT=r("Prepare a dataset for the given task by casting the dataset\u2019s "),Tp=a("a"),lT=r("Features"),cT=r(" to standardized column names and types as detailed in "),Np=a("a"),pT=r("datasets.tasks"),mT=r("."),fT=d(),Ia=a("p"),hT=r("Casts "),E_=a("code"),uT=r("datasets.DatasetInfo.features"),gT=r(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),k_=a("code"),_T=r("datasets.DatasetInfo.task_templates"),vT=r(" after casting."),Cb=d(),Fp=a("a"),qb=d(),Ta=a("h2"),cn=a("a"),I_=a("span"),p(gd.$$.fragment),bT=d(),T_=a("span"),yT=r("IterableDataset"),zb=d(),pn=a("p"),$T=r("The base class "),Pp=a("a"),wT=r("datasets.IterableDataset"),DT=r(" implements an iterable Dataset backed by python generators."),Vb=d(),x=a("div"),p(_d.$$.fragment),xT=d(),N_=a("p"),ET=r("A Dataset backed by an iterable."),kT=d(),mn=a("div"),p(vd.$$.fragment),IT=d(),F_=a("p"),TT=r(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),NT=d(),fn=a("div"),p(bd.$$.fragment),FT=d(),P_=a("p"),PT=r("Cast column to feature for decoding."),AT=d(),Ap=a("div"),p(yd.$$.fragment),LT=d(),Le=a("div"),p($d.$$.fragment),ST=d(),A_=a("p"),OT=r("Return a dataset with the specified map function. The function is applied on-the-fly on the examples when iterating over the dataset."),jT=d(),wd=a("p"),CT=r("You can specify whether the function should be batched or not with the "),L_=a("code"),qT=r("batched"),zT=r(" parameter:"),VT=d(),Na=a("ul"),S_=a("li"),MT=r(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),UT=d(),O_=a("li"),RT=r(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),BT=d(),Q=a("li"),HT=r("If batched is True and batch_size is "),j_=a("code"),GT=r("n"),KT=r(" > 1, then the function takes a batch of "),C_=a("code"),WT=r("n"),YT=r(" examples as input and can return a batch with "),q_=a("code"),JT=r("n"),XT=r(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),z_=a("code"),ZT=r("n"),QT=r(` examples.
A batch is a dictionary, e.g. a batch of `),V_=a("code"),eN=r("n"),tN=r(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),aN=d(),ne=a("div"),p(Dd.$$.fragment),sN=d(),M_=a("p"),nN=r("Randomly shuffles the elements of this dataset."),rN=d(),U_=a("p"),oN=r(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),iN=d(),xd=a("p"),dN=r("For instance, if your dataset contains 10,000 elements but "),R_=a("code"),lN=r("buffer_size"),cN=r(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),pN=d(),Fa=a("p"),mN=r(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Lp=a("a"),fN=r("datasets.IterableDataset.skip()"),hN=r(" or "),Sp=a("a"),uN=r("datasets.IterableDataset.take()"),gN=r(`
then the order of the shards is kept unchanged.`),_N=d(),hn=a("div"),p(Ed.$$.fragment),vN=d(),kd=a("p"),bN=r("Create a new IterableDataset that skips the first "),B_=a("code"),yN=r("n"),$N=r(" elements."),wN=d(),un=a("div"),p(Id.$$.fragment),DN=d(),Td=a("p"),xN=r("Create a new IterableDataset with only the first "),H_=a("code"),EN=r("n"),kN=r(" elements."),IN=d(),gn=a("div"),p(Nd.$$.fragment),TN=d(),Op=a("p"),jp=a("a"),NN=r("datasets.DatasetInfo"),FN=r(" object containing all the metadata in the dataset."),PN=d(),_n=a("div"),p(Fd.$$.fragment),AN=d(),Cp=a("p"),qp=a("a"),LN=r("datasets.NamedSplit"),SN=r(" object corresponding to a named dataset split."),ON=d(),zp=a("div"),p(Pd.$$.fragment),jN=d(),Vp=a("div"),p(Ad.$$.fragment),CN=d(),Mp=a("div"),p(Ld.$$.fragment),qN=d(),Up=a("div"),p(Sd.$$.fragment),zN=d(),Rp=a("div"),p(Od.$$.fragment),VN=d(),Bp=a("div"),p(jd.$$.fragment),MN=d(),Hp=a("div"),p(Cd.$$.fragment),UN=d(),Gp=a("div"),p(qd.$$.fragment),RN=d(),Kp=a("div"),p(zd.$$.fragment),BN=d(),Wp=a("div"),p(Vd.$$.fragment),HN=d(),Yp=a("div"),p(Md.$$.fragment),GN=d(),Jp=a("div"),p(Ud.$$.fragment),KN=d(),Xp=a("div"),p(Rd.$$.fragment),Mb=d(),Pa=a("h2"),vn=a("a"),G_=a("span"),p(Bd.$$.fragment),WN=d(),K_=a("span"),YN=r("IterableDatasetDict"),Ub=d(),bn=a("p"),JN=r("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),W_=a("code"),XN=r("datasets.IterableDataset"),ZN=r(" objects as values."),Rb=d(),Hd=a("div"),p(Gd.$$.fragment),Bb=d(),Aa=a("h2"),yn=a("a"),Y_=a("span"),p(Kd.$$.fragment),QN=d(),J_=a("span"),eF=r("Features"),Hb=d(),T=a("div"),p(Wd.$$.fragment),tF=d(),X_=a("p"),aF=r("A special dictionary that defines the internal structure of a dataset."),sF=d(),Yd=a("p"),nF=r("Instantiated with a dictionary of type "),Z_=a("code"),rF=r("dict[str, FieldType]"),oF=r(`, where keys are the desired column names,
and values are the type of that column.`),iF=d(),Zp=a("p"),Q_=a("code"),dF=r("FieldType"),lF=r(" can be one of the following:"),cF=d(),q=a("ul"),ev=a("li"),Tt=a("p"),pF=r("a "),Qp=a("a"),mF=r("datasets.Value"),fF=r(" feature specifies a single typed value, e.g. "),tv=a("code"),hF=r("int64"),uF=r(" or "),av=a("code"),gF=r("string"),_F=d(),sv=a("li"),Jd=a("p"),vF=r("a "),em=a("a"),bF=r("datasets.ClassLabel"),yF=r(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),$F=d(),nv=a("li"),Xd=a("p"),wF=r("a python "),rv=a("code"),DF=r("dict"),xF=r(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),EF=d(),Zd=a("li"),ue=a("p"),kF=r("a python "),ov=a("code"),IF=r("list"),TF=r(" or a "),tm=a("a"),NF=r("datasets.Sequence"),FF=r(` specifies that the field contains a list of objects. The python
`),iv=a("code"),PF=r("list"),AF=r(" or "),am=a("a"),LF=r("datasets.Sequence"),SF=r(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),OF=d(),p($n.$$.fragment),jF=d(),dv=a("li"),ge=a("p"),CF=r("a "),sm=a("a"),qF=r("Array2D"),zF=r(", "),nm=a("a"),VF=r("Array3D"),MF=r(", "),rm=a("a"),UF=r("Array4D"),RF=r(" or "),om=a("a"),BF=r("Array5D"),HF=r(" feature for multidimensional arrays"),GF=d(),lv=a("li"),Qd=a("p"),KF=r("an "),im=a("a"),WF=r("Audio"),YF=r(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),JF=d(),cv=a("li"),et=a("p"),XF=r("an "),dm=a("a"),ZF=r("Image"),QF=r(" feature to store the absolute path to an image file, an "),pv=a("code"),eP=r("np.ndarray"),tP=r(" object, a "),mv=a("code"),aP=r("PIL.Image.Image"),sP=r(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),nP=d(),fv=a("li"),wn=a("p"),lm=a("a"),rP=r("datasets.Translation"),oP=r(" and "),cm=a("a"),iP=r("datasets.TranslationVariableLanguages"),dP=r(", the two features specific to Machine Translation"),lP=d(),Dn=a("div"),p(el.$$.fragment),cP=d(),hv=a("p"),pP=r("Make a deep copy of Features."),mP=d(),xn=a("div"),p(tl.$$.fragment),fP=d(),uv=a("p"),hP=r("Decode batch with custom feature decoding."),uP=d(),En=a("div"),p(al.$$.fragment),gP=d(),gv=a("p"),_P=r("Decode column with custom feature decoding."),vP=d(),kn=a("div"),p(sl.$$.fragment),bP=d(),_v=a("p"),yP=r("Decode example with custom feature decoding."),$P=d(),In=a("div"),p(nl.$$.fragment),wP=d(),vv=a("p"),DP=r("Encode batch into a format for Arrow."),xP=d(),Tn=a("div"),p(rl.$$.fragment),EP=d(),bv=a("p"),kP=r("Encode example into a format for Arrow."),IP=d(),Nt=a("div"),p(ol.$$.fragment),TP=d(),yv=a("p"),NP=r(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),FP=d(),$v=a("p"),PP=r(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),AP=d(),Nn=a("div"),p(il.$$.fragment),LP=d(),wv=a("p"),SP=r(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),OP=d(),K=a("div"),p(dl.$$.fragment),jP=d(),Dv=a("p"),CP=r("Construct Features from dict."),qP=d(),xv=a("p"),zP=r(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),VP=d(),tt=a("p"),MP=r(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),pm=a("a"),UP=r("DatasetInfo"),RP=r(` that was dumped to a JSON object. This acts as an analogue to
`),mm=a("a"),BP=r("Features.from_arrow_schema()"),HP=r(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),fm=a("a"),GP=r("Value"),KP=r(" automatically performs."),WP=d(),Ev=a("p"),YP=r("Example:"),JP=d(),p(ll.$$.fragment),XP=d(),re=a("div"),p(cl.$$.fragment),ZP=d(),kv=a("p"),QP=r("Reorder Features fields to match the field order of other Features."),eA=d(),Iv=a("p"),tA=r(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),aA=d(),Tv=a("p"),sA=r("Example:"),nA=d(),p(pl.$$.fragment),Gb=d(),La=a("div"),p(ml.$$.fragment),rA=d(),Nv=a("p"),oA=r(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),Kb=d(),V=a("div"),p(fl.$$.fragment),iA=d(),Fv=a("p"),dA=r("Feature type for integer class labels."),lA=d(),hl=a("p"),cA=r("There are 3 ways to define a "),Pv=a("em"),pA=r("ClassLabel"),mA=r(", which correspond to the 3 arguments:"),fA=d(),Sa=a("ul"),hm=a("li"),Av=a("em"),hA=r("num_classes"),uA=r(": Create 0 to (num_classes-1) labels."),gA=d(),um=a("li"),Lv=a("em"),_A=r("names"),vA=r(": List of label strings."),bA=d(),gm=a("li"),Sv=a("em"),yA=r("names_file"),$A=r(": File containing the list of labels."),wA=d(),Fn=a("div"),p(ul.$$.fragment),DA=d(),Ov=a("p"),xA=r("Conversion integer => class name string."),EA=d(),Pn=a("div"),p(gl.$$.fragment),kA=d(),jv=a("p"),IA=r("Conversion class name string => integer."),Wb=d(),at=a("div"),p(_l.$$.fragment),TA=d(),Cv=a("p"),NA=r("The Value dtypes are as follows:"),FA=d(),qv=a("p"),PA=r(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),Yb=d(),M=a("div"),p(vl.$$.fragment),AA=d(),_m=a("p"),zv=a("em"),LA=r("FeatureConnector"),SA=r(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),OA=d(),Vv=a("p"),jA=r(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),CA=d(),bl=a("p"),qA=r("Output: A dictionary mapping string language codes to translations as "),Mv=a("em"),zA=r("Text"),VA=r(`
features.`),MA=d(),Uv=a("p"),UA=r("Example:"),RA=d(),p(yl.$$.fragment),Jb=d(),U=a("div"),p($l.$$.fragment),BA=d(),vm=a("p"),Rv=a("em"),HA=r("FeatureConnector"),GA=r(` for translations with variable languages per example.
Here for compatiblity with tfds.`),KA=d(),Bv=a("p"),WA=r(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),YA=d(),Hv=a("p"),JA=r(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),XA=d(),Gv=a("p"),ZA=r("Example:"),QA=d(),p(wl.$$.fragment),Xb=d(),Dl=a("div"),p(xl.$$.fragment),Zb=d(),El=a("div"),p(kl.$$.fragment),Qb=d(),Il=a("div"),p(Tl.$$.fragment),ey=d(),Nl=a("div"),p(Fl.$$.fragment),ty=d(),F=a("div"),p(Pl.$$.fragment),eL=d(),Kv=a("p"),tL=r("Audio Feature to extract audio data from an audio file."),aL=d(),Wv=a("p"),sL=r("Input: The Audio feature accepts as input:"),nL=d(),Al=a("ul"),Yv=a("li"),Ll=a("p"),rL=r("A "),Jv=a("code"),oL=r("str"),iL=r(": Absolute path to the audio file (i.e. random access is allowed)."),dL=d(),Sl=a("li"),Ol=a("p"),lL=r("A "),Xv=a("code"),cL=r("dict"),pL=r(" with the keys:"),mL=d(),jl=a("ul"),Zv=a("li"),fL=r("path: String with relative path of the audio file to the archive file."),hL=d(),Qv=a("li"),uL=r("bytes: Bytes content of the audio file."),gL=d(),e1=a("p"),_L=r("This is useful for archived files with sequential access."),vL=d(),t1=a("ul"),Cl=a("li"),ql=a("p"),bL=r("A "),a1=a("code"),yL=r("dict"),$L=r(" with the keys:"),wL=d(),Oa=a("ul"),s1=a("li"),DL=r("path: String with relative path of the audio file to the archive file."),xL=d(),n1=a("li"),EL=r("array: Array containing the audio sample"),kL=d(),r1=a("li"),IL=r("sampling_rate: Integer corresponding to the samping rate of the audio sample."),TL=d(),o1=a("p"),NL=r("This is useful for archived files with sequential access."),FL=d(),Ft=a("div"),p(zl.$$.fragment),PL=d(),i1=a("p"),AL=r(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),LL=d(),st=a("ul"),d1=a("li"),SL=r("pa.string() - it must contain the \u201Cpath\u201D data"),OL=d(),l1=a("li"),jL=r("pa.struct({\u201Cbytes\u201D: pa.binary()})"),CL=d(),c1=a("li"),qL=r("pa.struct({\u201Cpath\u201D: pa.string()})"),zL=d(),p1=a("li"),VL=r("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),ML=d(),An=a("div"),p(Vl.$$.fragment),UL=d(),m1=a("p"),RL=r("Decode example audio file into audio data."),BL=d(),Ln=a("div"),p(Ml.$$.fragment),HL=d(),f1=a("p"),GL=r("Embed audio files into the Arrow array."),KL=d(),Sn=a("div"),p(Ul.$$.fragment),WL=d(),h1=a("p"),YL=r("Encode example into a format for Arrow."),ay=d(),P=a("div"),p(Rl.$$.fragment),JL=d(),u1=a("p"),XL=r("Image feature to read image data from an image file."),ZL=d(),g1=a("p"),QL=r("Input: The Image feature accepts as input:"),eS=d(),Bl=a("ul"),_1=a("li"),Hl=a("p"),tS=r("A "),v1=a("code"),aS=r("str"),sS=r(": Absolute path to the image file (i.e. random access is allowed)."),nS=d(),Gl=a("li"),Kl=a("p"),rS=r("A "),b1=a("code"),oS=r("dict"),iS=r(" with the keys:"),dS=d(),Wl=a("ul"),y1=a("li"),lS=r("path: String with relative path of the image file to the archive file."),cS=d(),$1=a("li"),pS=r("bytes: Bytes of the image file."),mS=d(),w1=a("p"),fS=r("This is useful for archived files with sequential access."),hS=d(),Yl=a("ul"),Jl=a("li"),uS=r("An "),D1=a("code"),gS=r("np.ndarray"),_S=r(": NumPy array representing an image."),vS=d(),Xl=a("li"),bS=r("A "),x1=a("code"),yS=r("PIL.Image.Image"),$S=r(": PIL image object."),wS=d(),Pt=a("div"),p(Zl.$$.fragment),DS=d(),E1=a("p"),xS=r(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),ES=d(),_e=a("ul"),k1=a("li"),kS=r("pa.string() - it must contain the \u201Cpath\u201D data"),IS=d(),I1=a("li"),TS=r("pa.struct({\u201Cbytes\u201D: pa.binary()})"),NS=d(),T1=a("li"),FS=r("pa.struct({\u201Cpath\u201D: pa.string()})"),PS=d(),N1=a("li"),AS=r("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),LS=d(),F1=a("li"),SS=r("pa.list(*) - it must contain the image array data"),OS=d(),On=a("div"),p(Ql.$$.fragment),jS=d(),P1=a("p"),CS=r("Decode example image file into image data."),qS=d(),jn=a("div"),p(ec.$$.fragment),zS=d(),A1=a("p"),VS=r("Embed image files into the Arrow array."),MS=d(),Cn=a("div"),p(tc.$$.fragment),US=d(),L1=a("p"),RS=r("Encode example into a format for Arrow."),sy=d(),ja=a("h2"),qn=a("a"),S1=a("span"),p(ac.$$.fragment),BS=d(),O1=a("span"),HS=r("MetricInfo"),ny=d(),R=a("div"),p(sc.$$.fragment),GS=d(),j1=a("p"),KS=r("Information about a metric."),WS=d(),bm=a("p"),C1=a("code"),YS=r("MetricInfo"),JS=r(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),XS=d(),q1=a("p"),ZS=r("Note: Not all fields are known on construction and may be updated later."),QS=d(),zn=a("div"),p(nc.$$.fragment),eO=d(),rc=a("p"),tO=r("Create MetricInfo from the JSON file in "),z1=a("code"),aO=r("metric_info_dir"),sO=r("."),nO=d(),Vn=a("div"),p(oc.$$.fragment),rO=d(),Ca=a("p"),oO=r("Write "),V1=a("code"),iO=r("MetricInfo"),dO=r(" as JSON to "),M1=a("code"),lO=r("metric_info_dir"),cO=r(`.
Also save the license separately in LICENCE.`),ry=d(),qa=a("h2"),Mn=a("a"),U1=a("span"),p(ic.$$.fragment),pO=d(),R1=a("span"),mO=r("Metric"),oy=d(),At=a("p"),fO=r("The base class "),B1=a("code"),hO=r("Metric"),uO=r(" implements a Metric backed by one or several "),ym=a("a"),gO=r("datasets.Dataset"),_O=r("."),iy=d(),B=a("div"),p(dc.$$.fragment),vO=d(),H1=a("p"),bO=r("A Metric is the base class and common API for all metrics."),yO=d(),Un=a("div"),p(lc.$$.fragment),$O=d(),G1=a("p"),wO=r("Add one prediction and reference for the metric\u2019s stack."),DO=d(),Rn=a("div"),p(cc.$$.fragment),xO=d(),K1=a("p"),EO=r("Add a batch of predictions and references for the metric\u2019s stack."),kO=d(),Lt=a("div"),p(pc.$$.fragment),IO=d(),W1=a("p"),TO=r("Compute the metrics."),NO=d(),Y1=a("p"),FO=r("Usage of positional arguments is not allowed to prevent mistakes."),PO=d(),Bn=a("div"),p(mc.$$.fragment),AO=d(),J1=a("p"),LO=r("Downloads and prepares dataset for reading."),dy=d(),za=a("h2"),Hn=a("a"),X1=a("span"),p(fc.$$.fragment),SO=d(),Z1=a("span"),OO=r("Filesystems"),ly=d(),nt=a("div"),p(hc.$$.fragment),jO=d(),Q1=a("p"),CO=r("Access S3 as if it were a file system."),qO=d(),k=a("p"),zO=r("This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),eb=a("code"),VO=r("key="),MO=r(", "),tb=a("code"),UO=r("secret="),RO=r(") or depend on boto\u2019s credential methods. See botocore documentation for more information. If no credentials are available, use "),ab=a("code"),BO=r("anon=True"),HO=r(". The following parameters are passed on to fsspec: skip_instance_cache: to control reuse of instances use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings . "),sb=a("code"),GO=r("datasets.filesystems.S3FileSystem"),KO=r(" is a subclass of s3fs.S3FileSystem]("),uc=a("a"),WO=r("https://s3fs.readthedocs.io/en/latest/api.html"),YO=r("), which is a known implementation of "),nb=a("code"),JO=r("fsspec"),XO=r(". Filesystem Spec "),gc=a("a"),ZO=r("FSSPEC"),QO=r(" is a project to unify various projects and classes to work with remote filesystems and file-system-like abstractions using a standard pythonic interface. Examples: Listing files from public s3 bucket. "),rb=a("code"),ej=r("py >>> import datasets >>> s3 = datasets.filesystems.S3FileSystem(anon=True) # doctest: +SKIP >>> s3.ls('public-datasets/imdb/train') # doctest: +SKIP ['dataset_info.json.json','dataset.arrow','state.json']"),tj=r(" Listing files from private s3 bucket using "),ob=a("code"),aj=r("aws_access_key_id"),sj=r(" and "),ib=a("code"),nj=r("aws_secret_access_key"),rj=r(". "),db=a("code"),oj=r("py >>> import datasets >>> s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key) # doctest: +SKIP >>> s3.ls('my-private-datasets/imdb/train') # doctest: +SKIP ['dataset_info.json.json','dataset.arrow','state.json']"),ij=r(" Using "),lb=a("code"),dj=r("S3Filesystem"),lj=r(" with "),cb=a("code"),cj=r("botocore.session.Session"),pj=r(" and custom "),pb=a("code"),mj=r("aws_profile"),fj=r(". "),mb=a("code"),hj=r("py >>> import botocore >>> from datasets.filesystems import S3Filesystem >>> s3_session = botocore.session.Session(profile_name='my_profile_name') >>> >>> s3 = S3FileSystem(session=s3_session) # doctest: +SKIP"),uj=r(" Loading dataset from s3 using "),fb=a("code"),gj=r("S3Filesystem"),_j=r(" and "),hb=a("code"),vj=r("load_from_disk()"),bj=r(". "),ub=a("code"),yj=r("py >>> from datasets import load_from_disk >>> from datasets.filesystems import S3Filesystem >>> >>> s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key) # doctest: +SKIP >>> >>> dataset = load_from_disk('s3://my-private-datasets/imdb/train',fs=s3) # doctest: +SKIP >>> >>> print(len(dataset)) 25000"),$j=r(" Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>. "),gb=a("code"),wj=r(`py >>> from datasets import load_dataset >>> from datasets.filesystems import S3Filesystem >>> >>> dataset = load_dataset("imdb") >>> >>> s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key) # doctest: +SKIP >>> >>> dataset.save_to_disk('s3://my-private-datasets/imdb/train',fs=s3) # doctest: +SKIP`),cy=d(),Va=a("div"),p(_c.$$.fragment),Dj=d(),Ma=a("p"),xj=r("preprocesses "),_b=a("em"),Ej=r("dataset_path"),kj=r(" and removes remote filesystem (e.g. removing "),vb=a("code"),Ij=r("s3://"),Tj=r(")"),py=d(),Ua=a("div"),p(vc.$$.fragment),Nj=d(),bb=a("p"),Fj=r("Validates if filesystem has remote protocol."),my=d(),Ra=a("h2"),Gn=a("a"),yb=a("span"),p(bc.$$.fragment),Pj=d(),$b=a("span"),Aj=r("Fingerprint"),fy=d(),Ba=a("div"),p(yc.$$.fragment),Lj=d(),wb=a("p"),Sj=r("Hasher that accepts python objects as inputs."),this.h()},l(i){const y=tG('[data-svelte="svelte-1phssyn"]',document.head);A=s(y,"META",{name:!0,content:!0}),y.forEach(t),ot=l(i),O=s(i,"H1",{class:!0});var $c=n(O);J=s($c,"A",{id:!0,class:!0,href:!0});var Xj=n(J);Jt=s(Xj,"SPAN",{});var Zj=n(Jt);m(ie.$$.fragment,Zj),Zj.forEach(t),Xj.forEach(t),$r=l($c),Xt=s($c,"SPAN",{});var Qj=n(Xt);it=o(Qj,"Main classes"),Qj.forEach(t),$c.forEach(t),Ga=l(i),de=s(i,"H2",{class:!0});var uy=n(de);ee=s(uy,"A",{id:!0,class:!0,href:!0});var eC=n(ee);H=s(eC,"SPAN",{});var tC=n(H);m(dt.$$.fragment,tC),tC.forEach(t),eC.forEach(t),Dc=l(uy),Ka=s(uy,"SPAN",{});var aC=n(Ka);fw=o(aC,"DatasetInfo"),aC.forEach(t),uy.forEach(t),xb=l(i),z=s(i,"DIV",{class:!0});var Se=n(z);m(wr.$$.fragment,Se),hw=l(Se),kf=s(Se,"P",{});var sC=n(kf);uw=o(sC,"Information about a dataset."),sC.forEach(t),gw=l(Se),xc=s(Se,"P",{});var Oj=n(xc);If=s(Oj,"EM",{});var nC=n(If);_w=o(nC,"DatasetInfo"),nC.forEach(t),vw=o(Oj,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Oj.forEach(t),bw=l(Se),Tf=s(Se,"P",{});var rC=n(Tf);yw=o(rC,"Note: Not all fields are known on construction and may be updated later."),rC.forEach(t),$w=l(Se),ve=s(Se,"DIV",{class:!0});var Kn=n(ve);m(Dr.$$.fragment,Kn),ww=l(Kn),xr=s(Kn,"P",{});var gy=n(xr);Dw=o(gy,"Create DatasetInfo from the JSON file in "),Nf=s(gy,"CODE",{});var oC=n(Nf);xw=o(oC,"dataset_info_dir"),oC.forEach(t),Ew=o(gy,"."),gy.forEach(t),kw=l(Kn),Ff=s(Kn,"P",{});var iC=n(Ff);Iw=o(iC,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),iC.forEach(t),Tw=l(Kn),Pf=s(Kn,"P",{});var dC=n(Pf);Nw=o(dC,"This will overwrite all previous metadata."),dC.forEach(t),Kn.forEach(t),Fw=l(Se),lt=s(Se,"DIV",{class:!0});var $m=n(lt);m(Er.$$.fragment,$m),Pw=l($m),Zt=s($m,"P",{});var wm=n(Zt);Aw=o(wm,"Write "),Af=s(wm,"CODE",{});var lC=n(Af);Lw=o(lC,"DatasetInfo"),lC.forEach(t),Sw=o(wm," as JSON to "),Lf=s(wm,"CODE",{});var cC=n(Lf);Ow=o(cC,"dataset_info_dir"),cC.forEach(t),jw=o(wm,"."),wm.forEach(t),Cw=l($m),Sf=s($m,"P",{});var pC=n(Sf);qw=o(pC,"Also save the license separately in LICENCE."),pC.forEach(t),$m.forEach(t),Se.forEach(t),Eb=l(i),Qt=s(i,"H2",{class:!0});var _y=n(Qt);Wa=s(_y,"A",{id:!0,class:!0,href:!0});var mC=n(Wa);Of=s(mC,"SPAN",{});var fC=n(Of);m(kr.$$.fragment,fC),fC.forEach(t),mC.forEach(t),zw=l(_y),jf=s(_y,"SPAN",{});var hC=n(jf);Vw=o(hC,"Dataset"),hC.forEach(t),_y.forEach(t),kb=l(i),Ya=s(i,"P",{});var vy=n(Ya);Mw=o(vy,"The base class "),Ec=s(vy,"A",{href:!0});var uC=n(Ec);Uw=o(uC,"datasets.Dataset"),uC.forEach(t),Rw=o(vy," implements a Dataset backed by an Apache Arrow table."),vy.forEach(t),Ib=l(i),v=s(i,"DIV",{class:!0});var b=n(v);m(Ir.$$.fragment,b),Bw=l(b),Cf=s(b,"P",{});var gC=n(Cf);Hw=o(gC,"A Dataset backed by an Arrow table."),gC.forEach(t),Gw=l(b),ct=s(b,"DIV",{class:!0});var Dm=n(ct);m(Tr.$$.fragment,Dm),Kw=l(Dm),qf=s(Dm,"P",{});var _C=n(qf);Ww=o(_C,"Add column to Dataset."),_C.forEach(t),Yw=l(Dm),zf=s(Dm,"P",{});var vC=n(zf);Vf=s(vC,"EM",{});var bC=n(Vf);Jw=o(bC,"New in version 1.7."),bC.forEach(t),vC.forEach(t),Dm.forEach(t),Xw=l(b),pt=s(b,"DIV",{class:!0});var xm=n(pt);m(Nr.$$.fragment,xm),Zw=l(xm),Mf=s(xm,"P",{});var yC=n(Mf);Qw=o(yC,"Add item to Dataset."),yC.forEach(t),eD=l(xm),Uf=s(xm,"P",{});var $C=n(Uf);Rf=s($C,"EM",{});var wC=n(Rf);tD=o(wC,"New in version 1.7."),wC.forEach(t),$C.forEach(t),xm.forEach(t),aD=l(b),Ja=s(b,"DIV",{class:!0});var by=n(Ja);m(Fr.$$.fragment,by),sD=l(by),Bf=s(by,"P",{});var DC=n(Bf);nD=o(DC,"Instantiate a Dataset backed by an Arrow table at filename."),DC.forEach(t),by.forEach(t),rD=l(b),Xa=s(b,"DIV",{class:!0});var yy=n(Xa);m(Pr.$$.fragment,yy),oD=l(yy),Hf=s(yy,"P",{});var xC=n(Hf);iD=o(xC,"Instantiate a Dataset backed by an Arrow buffer."),xC.forEach(t),yy.forEach(t),dD=l(b),be=s(b,"DIV",{class:!0});var Wn=n(be);m(Ar.$$.fragment,Wn),lD=l(Wn),Be=s(Wn,"P",{});var Yn=n(Be);cD=o(Yn,"Convert "),Gf=s(Yn,"CODE",{});var EC=n(Gf);pD=o(EC,"pandas.DataFrame"),EC.forEach(t),mD=o(Yn," to a "),Kf=s(Yn,"CODE",{});var kC=n(Kf);fD=o(kC,"pyarrow.Table"),kC.forEach(t),hD=o(Yn," to create a "),kc=s(Yn,"A",{href:!0});var IC=n(kc);uD=o(IC,"Dataset"),IC.forEach(t),gD=o(Yn,"."),Yn.forEach(t),_D=l(Wn),Lr=s(Wn,"P",{});var $y=n(Lr);vD=o($y,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Wf=s($y,"EM",{});var TC=n(Wf);bD=o(TC,"object"),TC.forEach(t),yD=o($y,", we need to guess the datatype by looking at the Python objects in this Series."),$y.forEach(t),$D=l(Wn),Sr=s(Wn,"P",{});var wy=n(Sr);wD=o(wy,"Be aware that Series of the "),Yf=s(wy,"EM",{});var NC=n(Yf);DD=o(NC,"object"),NC.forEach(t),xD=o(wy,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),wy.forEach(t),Wn.forEach(t),ED=l(b),Za=s(b,"DIV",{class:!0});var Dy=n(Za);m(Or.$$.fragment,Dy),kD=l(Dy),He=s(Dy,"P",{});var Jn=n(He);ID=o(Jn,"Convert "),Jf=s(Jn,"CODE",{});var FC=n(Jf);TD=o(FC,"dict"),FC.forEach(t),ND=o(Jn," to a "),Xf=s(Jn,"CODE",{});var PC=n(Xf);FD=o(PC,"pyarrow.Table"),PC.forEach(t),PD=o(Jn," to create a "),Ic=s(Jn,"A",{href:!0});var AC=n(Ic);AD=o(AC,"Dataset"),AC.forEach(t),LD=o(Jn,"."),Jn.forEach(t),Dy.forEach(t),SD=l(b),Qa=s(b,"DIV",{class:!0});var xy=n(Qa);m(jr.$$.fragment,xy),OD=l(xy),Zf=s(xy,"P",{});var LC=n(Zf);jD=o(LC,"The Apache Arrow table backing the dataset."),LC.forEach(t),xy.forEach(t),CD=l(b),es=s(b,"DIV",{class:!0});var Ey=n(es);m(Cr.$$.fragment,Ey),qD=l(Ey),Qf=s(Ey,"P",{});var SC=n(Qf);zD=o(SC,"The cache files containing the Apache Arrow table backing the dataset."),SC.forEach(t),Ey.forEach(t),VD=l(b),ts=s(b,"DIV",{class:!0});var ky=n(ts);m(qr.$$.fragment,ky),MD=l(ky),eh=s(ky,"P",{});var OC=n(eh);UD=o(OC,"Number of columns in the dataset."),OC.forEach(t),ky.forEach(t),RD=l(b),as=s(b,"DIV",{class:!0});var Iy=n(as);m(zr.$$.fragment,Iy),BD=l(Iy),Vr=s(Iy,"P",{});var Ty=n(Vr);HD=o(Ty,"Number of rows in the dataset (same as "),ss=s(Ty,"A",{href:!0});var Ny=n(ss);GD=o(Ny,"Dataset."),th=s(Ny,"STRONG",{});var jC=n(th);KD=o(jC,"len"),jC.forEach(t),WD=o(Ny,"()"),Ny.forEach(t),YD=o(Ty,")."),Ty.forEach(t),Iy.forEach(t),JD=l(b),ns=s(b,"DIV",{class:!0});var Fy=n(ns);m(Mr.$$.fragment,Fy),XD=l(Fy),ah=s(Fy,"P",{});var CC=n(ah);ZD=o(CC,"Names of the columns in the dataset."),CC.forEach(t),Fy.forEach(t),QD=l(b),rs=s(b,"DIV",{class:!0});var Py=n(rs);m(Ur.$$.fragment,Py),ex=l(Py),sh=s(Py,"P",{});var qC=n(sh);tx=o(qC,"Shape of the dataset (number of columns, number of rows)."),qC.forEach(t),Py.forEach(t),ax=l(b),mt=s(b,"DIV",{class:!0});var Em=n(mt);m(Rr.$$.fragment,Em),sx=l(Em),nh=s(Em,"P",{});var zC=n(nh);nx=o(zC,"Return a list of the unique elements in a column."),zC.forEach(t),rx=l(Em),rh=s(Em,"P",{});var VC=n(rh);ox=o(VC,"This is implemented in the low-level backend and as such, very fast."),VC.forEach(t),Em.forEach(t),ix=l(b),os=s(b,"DIV",{class:!0});var Ay=n(os);m(Br.$$.fragment,Ay),dx=l(Ay),oh=s(Ay,"P",{});var MC=n(oh);lx=o(MC,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),MC.forEach(t),Ay.forEach(t),cx=l(b),is=s(b,"DIV",{class:!0});var Ly=n(is);m(Hr.$$.fragment,Ly),px=l(Ly),ih=s(Ly,"P",{});var UC=n(ih);mx=o(UC,"Cast the dataset to a new set of features."),UC.forEach(t),Ly.forEach(t),fx=l(b),ds=s(b,"DIV",{class:!0});var Sy=n(ds);m(Gr.$$.fragment,Sy),hx=l(Sy),dh=s(Sy,"P",{});var RC=n(dh);ux=o(RC,"Cast column to feature for decoding."),RC.forEach(t),Sy.forEach(t),gx=l(b),ft=s(b,"DIV",{class:!0});var km=n(ft);m(Kr.$$.fragment,km),_x=l(km),lh=s(km,"P",{});var BC=n(lh);vx=o(BC,"Remove one or several column(s) in the dataset and the features associated to them."),BC.forEach(t),bx=l(km),ea=s(km,"P",{});var Im=n(ea);yx=o(Im,"You can also remove a column using "),Tc=s(Im,"A",{href:!0});var HC=n(Tc);$x=o(HC,"Dataset.map()"),HC.forEach(t),wx=o(Im," with "),ch=s(Im,"EM",{});var GC=n(ch);Dx=o(GC,"remove_columns"),GC.forEach(t),xx=o(Im,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Im.forEach(t),km.forEach(t),Ex=l(b),ls=s(b,"DIV",{class:!0});var Oy=n(ls);m(Wr.$$.fragment,Oy),kx=l(Oy),ph=s(Oy,"P",{});var KC=n(ph);Ix=o(KC,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),KC.forEach(t),Oy.forEach(t),Tx=l(b),cs=s(b,"DIV",{class:!0});var jy=n(cs);m(Yr.$$.fragment,jy),Nx=l(jy),Jr=s(jy,"P",{});var Cy=n(Jr);Fx=o(Cy,"Casts the given column as :obj:"),mh=s(Cy,"CODE",{});var WC=n(mh);Px=o(WC,"datasets.features.ClassLabel"),WC.forEach(t),Ax=o(Cy," and updates the table."),Cy.forEach(t),jy.forEach(t),Lx=l(b),ps=s(b,"DIV",{class:!0});var qy=n(ps);m(Xr.$$.fragment,qy),Sx=l(qy),fh=s(qy,"P",{});var YC=n(fh);Ox=o(YC,"Number of rows in the dataset."),YC.forEach(t),qy.forEach(t),jx=l(b),ht=s(b,"DIV",{class:!0});var Tm=n(ht);m(Zr.$$.fragment,Tm),Cx=l(Tm),hh=s(Tm,"P",{});var JC=n(hh);qx=o(JC,"Iterate through the examples."),JC.forEach(t),zx=l(Tm),Qr=s(Tm,"P",{});var zy=n(Qr);Vx=o(zy,"If a formatting is set with "),Nc=s(zy,"A",{href:!0});var XC=n(Nc);Mx=o(XC,"Dataset.set_format()"),XC.forEach(t),Ux=o(zy,` rows will be returned with the
selected format.`),zy.forEach(t),Tm.forEach(t),Rx=l(b),ms=s(b,"DIV",{class:!0});var Vy=n(ms);m(eo.$$.fragment,Vy),Bx=l(Vy),ta=s(Vy,"P",{});var Nm=n(ta);Hx=o(Nm,"To be used in a "),uh=s(Nm,"CODE",{});var ZC=n(uh);Gx=o(ZC,"with"),ZC.forEach(t),Kx=o(Nm," statement. Set "),gh=s(Nm,"CODE",{});var QC=n(gh);Wx=o(QC,"__getitem__"),QC.forEach(t),Yx=o(Nm," return format (type and columns)."),Nm.forEach(t),Vy.forEach(t),Jx=l(b),ye=s(b,"DIV",{class:!0});var Xn=n(ye);m(to.$$.fragment,Xn),Xx=l(Xn),le=s(Xn,"P",{});var St=n(le);Zx=o(St,"Set "),_h=s(St,"STRONG",{});var eq=n(_h);Qx=o(eq,"getitem"),eq.forEach(t),e0=o(St,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),vh=s(St,"CODE",{});var tq=n(vh);t0=o(tq,"type"),tq.forEach(t),a0=o(St," (for example \u201Cnumpy\u201D) is used to format batches when using "),bh=s(St,"STRONG",{});var aq=n(bh);s0=o(aq,"getitem"),aq.forEach(t),n0=o(St,`.
It\u2019s also possible to use custom transforms for formatting using `),Fc=s(St,"A",{href:!0});var sq=n(Fc);r0=o(sq,"datasets.Dataset.set_transform()"),sq.forEach(t),o0=o(St,"."),St.forEach(t),i0=l(Xn),ce=s(Xn,"P",{});var Ot=n(ce);d0=o(Ot,"It is possible to call "),yh=s(Ot,"CODE",{});var nq=n(yh);l0=o(nq,"map"),nq.forEach(t),c0=o(Ot," after calling "),$h=s(Ot,"CODE",{});var rq=n($h);p0=o(rq,"set_format"),rq.forEach(t),m0=o(Ot,". Since "),wh=s(Ot,"CODE",{});var oq=n(wh);f0=o(oq,"map"),oq.forEach(t),h0=o(Ot,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),Dh=s(Ot,"CODE",{});var iq=n(Dh);u0=o(iq,"map"),iq.forEach(t),g0=o(Ot," on a dataset to add a new column, then this column will be formatted:"),Ot.forEach(t),_0=l(Xn),xh=s(Xn,"P",{});var dq=n(xh);v0=o(dq,"new formatted columns = (all columns - previously unformatted columns)"),dq.forEach(t),Xn.forEach(t),b0=l(b),fs=s(b,"DIV",{class:!0});var My=n(fs);m(ao.$$.fragment,My),y0=l(My),$e=s(My,"P",{});var Ha=n($e);$0=o(Ha,"Set "),Eh=s(Ha,"STRONG",{});var lq=n(Eh);w0=o(lq,"getitem"),lq.forEach(t),D0=o(Ha," return format using this transform. The transform is applied on-the-fly on batches when "),kh=s(Ha,"STRONG",{});var cq=n(kh);x0=o(cq,"getitem"),cq.forEach(t),E0=o(Ha,` is called.
As `),Pc=s(Ha,"A",{href:!0});var pq=n(Pc);k0=o(pq,"datasets.Dataset.set_format()"),pq.forEach(t),I0=o(Ha,", this can be reset using "),Ac=s(Ha,"A",{href:!0});var mq=n(Ac);T0=o(mq,"datasets.Dataset.reset_format()"),mq.forEach(t),Ha.forEach(t),My.forEach(t),N0=l(b),ut=s(b,"DIV",{class:!0});var Fm=n(ut);m(so.$$.fragment,Fm),F0=l(Fm),no=s(Fm,"P",{});var Uy=n(no);P0=o(Uy,"Reset "),Ih=s(Uy,"STRONG",{});var fq=n(Ih);A0=o(fq,"getitem"),fq.forEach(t),L0=o(Uy," return format to python objects and all columns."),Uy.forEach(t),S0=l(Fm),Lc=s(Fm,"P",{});var jj=n(Lc);O0=o(jj,"Same as "),Th=s(jj,"CODE",{});var hq=n(Th);j0=o(hq,"self.set_format()"),hq.forEach(t),jj.forEach(t),Fm.forEach(t),C0=l(b),we=s(b,"DIV",{class:!0});var Zn=n(we);m(ro.$$.fragment,Zn),q0=l(Zn),Ge=s(Zn,"P",{});var Qn=n(Ge);z0=o(Qn,"Set "),Nh=s(Qn,"STRONG",{});var uq=n(Nh);V0=o(uq,"getitem"),uq.forEach(t),M0=o(Qn,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Fh=s(Qn,"CODE",{});var gq=n(Fh);U0=o(gq,"type"),gq.forEach(t),R0=o(Qn," (for example \u201Cnumpy\u201D) is used to format batches when using "),Ph=s(Qn,"STRONG",{});var _q=n(Ph);B0=o(_q,"getitem"),_q.forEach(t),H0=o(Qn,"."),Qn.forEach(t),G0=l(Zn),oo=s(Zn,"P",{});var Ry=n(oo);K0=o(Ry,"It\u2019s also possible to use custom transforms for formatting using "),Sc=s(Ry,"A",{href:!0});var vq=n(Sc);W0=o(vq,"datasets.Dataset.with_transform()"),vq.forEach(t),Y0=o(Ry,"."),Ry.forEach(t),J0=l(Zn),aa=s(Zn,"P",{});var Pm=n(aa);X0=o(Pm,"Contrary to "),Oc=s(Pm,"A",{href:!0});var bq=n(Oc);Z0=o(bq,"datasets.Dataset.set_format()"),bq.forEach(t),Q0=o(Pm,", "),Ah=s(Pm,"CODE",{});var yq=n(Ah);e9=o(yq,"with_format"),yq.forEach(t),t9=o(Pm," returns a new Dataset object."),Pm.forEach(t),Zn.forEach(t),a9=l(b),De=s(b,"DIV",{class:!0});var er=n(De);m(io.$$.fragment,er),s9=l(er),sa=s(er,"P",{});var Am=n(sa);n9=o(Am,"Set "),Lh=s(Am,"STRONG",{});var $q=n(Lh);r9=o($q,"getitem"),$q.forEach(t),o9=o(Am," return format using this transform. The transform is applied on-the-fly on batches when "),Sh=s(Am,"STRONG",{});var wq=n(Sh);i9=o(wq,"getitem"),wq.forEach(t),d9=o(Am," is called."),Am.forEach(t),l9=l(er),na=s(er,"P",{});var Lm=n(na);c9=o(Lm,"As "),jc=s(Lm,"A",{href:!0});var Dq=n(jc);p9=o(Dq,"datasets.Dataset.set_format()"),Dq.forEach(t),m9=o(Lm,", this can be reset using "),Cc=s(Lm,"A",{href:!0});var xq=n(Cc);f9=o(xq,"datasets.Dataset.reset_format()"),xq.forEach(t),h9=o(Lm,"."),Lm.forEach(t),u9=l(er),ra=s(er,"P",{});var Sm=n(ra);g9=o(Sm,"Contrary to "),qc=s(Sm,"A",{href:!0});var Eq=n(qc);_9=o(Eq,"datasets.Dataset.set_transform()"),Eq.forEach(t),v9=o(Sm,", "),Oh=s(Sm,"CODE",{});var kq=n(Oh);b9=o(kq,"with_transform"),kq.forEach(t),y9=o(Sm," returns a new Dataset object."),Sm.forEach(t),er.forEach(t),$9=l(b),hs=s(b,"DIV",{class:!0});var By=n(hs);m(lo.$$.fragment,By),w9=l(By),jh=s(By,"P",{});var Iq=n(jh);D9=o(Iq,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),Iq.forEach(t),By.forEach(t),x9=l(b),gt=s(b,"DIV",{class:!0});var Om=n(gt);m(co.$$.fragment,Om),E9=l(Om),Ch=s(Om,"P",{});var Tq=n(Ch);k9=o(Tq,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),Tq.forEach(t),I9=l(Om),qh=s(Om,"P",{});var Nq=n(qh);T9=o(Nq,"Be careful when running this command that no other process is currently using other cache files."),Nq.forEach(t),Om.forEach(t),N9=l(b),us=s(b,"DIV",{class:!0});var Hy=n(us);m(po.$$.fragment,Hy),F9=l(Hy),zh=s(Hy,"P",{});var Fq=n(zh);P9=o(Fq,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does update examples).`),Fq.forEach(t),Hy.forEach(t),A9=l(b),gs=s(b,"DIV",{class:!0});var Gy=n(gs);m(mo.$$.fragment,Gy),L9=l(Gy),Vh=s(Gy,"P",{});var Pq=n(Vh);S9=o(Pq,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),Pq.forEach(t),Gy.forEach(t),O9=l(b),_s=s(b,"DIV",{class:!0});var Ky=n(_s);m(fo.$$.fragment,Ky),j9=l(Ky),Mh=s(Ky,"P",{});var Aq=n(Mh);C9=o(Aq,"Create a new dataset with rows selected following the list/array of indices."),Aq.forEach(t),Ky.forEach(t),q9=l(b),_t=s(b,"DIV",{class:!0});var jm=n(_t);m(ho.$$.fragment,jm),z9=l(jm),Uh=s(jm,"P",{});var Lq=n(Uh);V9=o(Lq,"Create a new dataset sorted according to a column."),Lq.forEach(t),M9=l(jm),Rh=s(jm,"P",{});var Sq=n(Rh);U9=o(Sq,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),Sq.forEach(t),jm.forEach(t),R9=l(b),vt=s(b,"DIV",{class:!0});var Cm=n(vt);m(uo.$$.fragment,Cm),B9=l(Cm),Bh=s(Cm,"P",{});var Oq=n(Bh);H9=o(Oq,"Create a new Dataset where the rows are shuffled."),Oq.forEach(t),G9=l(Cm),Hh=s(Cm,"P",{});var jq=n(Hh);K9=o(jq,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),jq.forEach(t),Cm.forEach(t),W9=l(b),bt=s(b,"DIV",{class:!0});var qm=n(bt);m(go.$$.fragment,qm),Y9=l(qm),j=s(qm,"P",{});var W=n(j);J9=o(W,"Return a dictionary ("),Gh=s(W,"CODE",{});var Cq=n(Gh);X9=o(Cq,"datasets.DatsetDict"),Cq.forEach(t),Z9=o(W,") with two random train and test subsets ("),Kh=s(W,"EM",{});var qq=n(Kh);Q9=o(qq,"train"),qq.forEach(t),e3=o(W," and "),Wh=s(W,"EM",{});var zq=n(Wh);t3=o(zq,"test"),zq.forEach(t),a3=l(W),Yh=s(W,"CODE",{});var Vq=n(Yh);s3=o(Vq,"Dataset"),Vq.forEach(t),n3=o(W,` splits).
Splits are created from the dataset according to `),Jh=s(W,"EM",{});var Mq=n(Jh);r3=o(Mq,"test_size"),Mq.forEach(t),o3=o(W,", "),Xh=s(W,"EM",{});var Uq=n(Xh);i3=o(Uq,"train_size"),Uq.forEach(t),d3=o(W," and "),Zh=s(W,"EM",{});var Rq=n(Zh);l3=o(Rq,"shuffle"),Rq.forEach(t),c3=o(W,"."),W.forEach(t),p3=l(qm),_o=s(qm,"P",{});var Wy=n(_o);m3=o(Wy,"This method is similar to scikit-learn "),Qh=s(Wy,"EM",{});var Bq=n(Qh);f3=o(Bq,"train_test_split"),Bq.forEach(t),h3=o(Wy," with the omission of the stratified options."),Wy.forEach(t),qm.forEach(t),u3=l(b),te=s(b,"DIV",{class:!0});var jt=n(te);m(vo.$$.fragment,jt),g3=l(jt),oa=s(jt,"P",{});var zm=n(oa);_3=o(zm,"Return the "),eu=s(zm,"EM",{});var Hq=n(eu);v3=o(Hq,"index"),Hq.forEach(t),b3=o(zm,"-nth shard from dataset split into "),tu=s(zm,"EM",{});var Gq=n(tu);y3=o(Gq,"num_shards"),Gq.forEach(t),$3=o(zm," pieces."),zm.forEach(t),w3=l(jt),au=s(jt,"P",{});var Kq=n(au);D3=o(Kq,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),Kq.forEach(t),x3=l(jt),bo=s(jt,"P",{});var Yy=n(bo);E3=o(Yy,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),su=s(Yy,"EM",{});var Wq=n(su);k3=o(Wq,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),Wq.forEach(t),I3=o(Yy,` will return
a dataset with the same order as the original.`),Yy.forEach(t),T3=l(jt),nu=s(jt,"P",{});var Yq=n(nu);N3=o(Yq,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),Yq.forEach(t),jt.forEach(t),F3=l(b),vs=s(b,"DIV",{class:!0});var Jy=n(vs);m(yo.$$.fragment,Jy),P3=l(Jy),ru=s(Jy,"P",{});var Jq=n(ru);A3=o(Jq,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),Jq.forEach(t),Jy.forEach(t),L3=l(b),xe=s(b,"DIV",{class:!0});var tr=n(xe);m($o.$$.fragment,tr),S3=l(tr),ou=s(tr,"P",{});var Xq=n(ou);O3=o(Xq,`Pushes the dataset to the hub.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),Xq.forEach(t),j3=l(tr),iu=s(tr,"P",{});var Zq=n(iu);C3=o(Zq,"Example:"),Zq.forEach(t),q3=l(tr),m(wo.$$.fragment,tr),tr.forEach(t),z3=l(b),bs=s(b,"DIV",{class:!0});var Xy=n(bs);m(Do.$$.fragment,Xy),V3=l(Xy),ia=s(Xy,"P",{});var Vm=n(ia);M3=o(Vm,"Saves a dataset to a dataset directory, or in a filesystem using either "),zc=s(Vm,"A",{href:!0});var Qq=n(zc);U3=o(Qq,"S3FileSystem"),Qq.forEach(t),R3=o(Vm,` or
any implementation of `),du=s(Vm,"CODE",{});var ez=n(du);B3=o(ez,"fsspec.spec.AbstractFileSystem"),ez.forEach(t),H3=o(Vm,"."),Vm.forEach(t),Xy.forEach(t),G3=l(b),ys=s(b,"DIV",{class:!0});var Zy=n(ys);m(xo.$$.fragment,Zy),K3=l(Zy),Ke=s(Zy,"P",{});var ar=n(Ke);W3=o(ar,"Loads a dataset that was previously saved using "),lu=s(ar,"CODE",{});var tz=n(lu);Y3=o(tz,"save_to_disk"),tz.forEach(t),J3=o(ar,` from a dataset directory, or from a
filesystem using either `),Vc=s(ar,"A",{href:!0});var az=n(Vc);X3=o(az,"S3FileSystem"),az.forEach(t),Z3=o(ar,` or any implementation of
`),cu=s(ar,"CODE",{});var sz=n(cu);Q3=o(sz,"fsspec.spec.AbstractFileSystem"),sz.forEach(t),e4=o(ar,"."),ar.forEach(t),Zy.forEach(t),t4=l(b),$s=s(b,"DIV",{class:!0});var Qy=n($s);m(Eo.$$.fragment,Qy),a4=l(Qy),pu=s(Qy,"P",{});var nz=n(pu);s4=o(nz,"Create and cache a new Dataset by flattening the indices mapping."),nz.forEach(t),Qy.forEach(t),n4=l(b),ws=s(b,"DIV",{class:!0});var e2=n(ws);m(ko.$$.fragment,e2),r4=l(e2),mu=s(e2,"P",{});var rz=n(mu);o4=o(rz,"Exports the dataset to csv"),rz.forEach(t),e2.forEach(t),i4=l(b),Ds=s(b,"DIV",{class:!0});var t2=n(Ds);m(Io.$$.fragment,t2),d4=l(t2),To=s(t2,"P",{});var a2=n(To);l4=o(a2,"Returns the dataset as a "),fu=s(a2,"CODE",{});var oz=n(fu);c4=o(oz,"pandas.DataFrame"),oz.forEach(t),p4=o(a2,". Can also return a generator for large datasets."),a2.forEach(t),t2.forEach(t),m4=l(b),xs=s(b,"DIV",{class:!0});var s2=n(xs);m(No.$$.fragment,s2),f4=l(s2),hu=s(s2,"P",{});var iz=n(hu);h4=o(iz,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),iz.forEach(t),s2.forEach(t),u4=l(b),Es=s(b,"DIV",{class:!0});var n2=n(Es);m(Fo.$$.fragment,n2),g4=l(n2),uu=s(n2,"P",{});var dz=n(uu);_4=o(dz,"Export the dataset to JSON Lines or JSON."),dz.forEach(t),n2.forEach(t),v4=l(b),ks=s(b,"DIV",{class:!0});var r2=n(ks);m(Po.$$.fragment,r2),b4=l(r2),gu=s(r2,"P",{});var lz=n(gu);y4=o(lz,"Exports the dataset to parquet"),lz.forEach(t),r2.forEach(t),$4=l(b),ae=s(b,"DIV",{class:!0});var Ct=n(ae);m(Ao.$$.fragment,Ct),w4=l(Ct),da=s(Ct,"P",{});var Mm=n(da);D4=o(Mm,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),_u=s(Mm,"CODE",{});var cz=n(_u);x4=o(cz,"device"),cz.forEach(t),E4=o(Mm," if you want to run it on GPU ("),vu=s(Mm,"CODE",{});var pz=n(vu);k4=o(pz,"device"),pz.forEach(t),I4=o(Mm,` must be the GPU index).
You can find more information about Faiss here:`),Mm.forEach(t),T4=l(Ct),bu=s(Ct,"UL",{});var mz=n(bu);Mc=s(mz,"LI",{});var Cj=n(Mc);N4=o(Cj,"For "),Lo=s(Cj,"A",{href:!0,rel:!0});var fz=n(Lo);F4=o(fz,"string factory"),fz.forEach(t),Cj.forEach(t),mz.forEach(t),P4=l(Ct),yu=s(Ct,"P",{});var hz=n(yu);A4=o(hz,"Example:"),hz.forEach(t),L4=l(Ct),m(So.$$.fragment,Ct),Ct.forEach(t),S4=l(b),yt=s(b,"DIV",{class:!0});var Um=n(yt);m(Oo.$$.fragment,Um),O4=l(Um),We=s(Um,"P",{});var sr=n(We);j4=o(sr,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),$u=s(sr,"EM",{});var uz=n($u);C4=o(uz,"external_arrays"),uz.forEach(t),q4=o(sr,`.
You can specify `),wu=s(sr,"EM",{});var gz=n(wu);z4=o(gz,"device"),gz.forEach(t),V4=o(sr," if you want to run it on GPU ("),Du=s(sr,"EM",{});var _z=n(Du);M4=o(_z,"device"),_z.forEach(t),U4=o(sr,` must be the GPU index).
You can find more information about Faiss here:`),sr.forEach(t),R4=l(Um),xu=s(Um,"UL",{});var vz=n(xu);Uc=s(vz,"LI",{});var qj=n(Uc);B4=o(qj,"For "),jo=s(qj,"A",{href:!0,rel:!0});var bz=n(jo);H4=o(bz,"string factory"),bz.forEach(t),qj.forEach(t),vz.forEach(t),Um.forEach(t),G4=l(b),Is=s(b,"DIV",{class:!0});var o2=n(Is);m(Co.$$.fragment,o2),K4=l(o2),Eu=s(o2,"P",{});var yz=n(Eu);W4=o(yz,"Save a FaissIndex on disk."),yz.forEach(t),o2.forEach(t),Y4=l(b),$t=s(b,"DIV",{class:!0});var Rm=n($t);m(qo.$$.fragment,Rm),J4=l(Rm),ku=s(Rm,"P",{});var $z=n(ku);X4=o($z,"Load a FaissIndex from disk."),$z.forEach(t),Z4=l(Rm),zo=s(Rm,"P",{});var i2=n(zo);Q4=o(i2,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),Iu=s(i2,"EM",{});var wz=n(Iu);e7=o(wz,".get_index(index_name).faiss_index"),wz.forEach(t),t7=o(i2," to make it fit your needs."),i2.forEach(t),Rm.forEach(t),a7=l(b),G=s(b,"DIV",{class:!0});var Oe=n(G);m(Vo.$$.fragment,Oe),s7=l(Oe),Tu=s(Oe,"P",{});var Dz=n(Tu);n7=o(Dz,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),Dz.forEach(t),r7=l(Oe),Nu=s(Oe,"P",{});var xz=n(Nu);o7=o(xz,"Default config is:"),xz.forEach(t),i7=l(Oe),m(Mo.$$.fragment,Oe),d7=l(Oe),Fu=s(Oe,"P",{});var Ez=n(Fu);l7=o(Ez,"Example:"),Ez.forEach(t),c7=l(Oe),m(Uo.$$.fragment,Oe),Oe.forEach(t),p7=l(b),Ee=s(b,"DIV",{class:!0});var nr=n(Ee);m(Ro.$$.fragment,nr),m7=l(nr),Pu=s(nr,"P",{});var kz=n(Pu);f7=o(kz,"Load an existing text index using ElasticSearch for fast retrieval."),kz.forEach(t),h7=l(nr),Au=s(nr,"P",{});var Iz=n(Au);u7=o(Iz,"Default config is:"),Iz.forEach(t),g7=l(nr),m(Bo.$$.fragment,nr),nr.forEach(t),_7=l(b),Ts=s(b,"DIV",{class:!0});var d2=n(Ts);m(Ho.$$.fragment,d2),v7=l(d2),Lu=s(d2,"P",{});var Tz=n(Lu);b7=o(Tz,"List the colindex_nameumns/identifiers of all the attached indexes."),Tz.forEach(t),d2.forEach(t),y7=l(b),Ns=s(b,"DIV",{class:!0});var l2=n(Ns);m(Go.$$.fragment,l2),$7=l(l2),Su=s(l2,"P",{});var Nz=n(Su);w7=o(Nz,"List the index_name/identifiers of all the attached indexes."),Nz.forEach(t),l2.forEach(t),D7=l(b),Fs=s(b,"DIV",{class:!0});var c2=n(Fs);m(Ko.$$.fragment,c2),x7=l(c2),Ou=s(c2,"P",{});var Fz=n(Ou);E7=o(Fz,"Drop the index with the specified column."),Fz.forEach(t),c2.forEach(t),k7=l(b),Ps=s(b,"DIV",{class:!0});var p2=n(Ps);m(Wo.$$.fragment,p2),I7=l(p2),ju=s(p2,"P",{});var Pz=n(ju);T7=o(Pz,"Find the nearest examples indices in the dataset to the query."),Pz.forEach(t),p2.forEach(t),N7=l(b),As=s(b,"DIV",{class:!0});var m2=n(As);m(Yo.$$.fragment,m2),F7=l(m2),Cu=s(m2,"P",{});var Az=n(Cu);P7=o(Az,"Find the nearest examples indices in the dataset to the query."),Az.forEach(t),m2.forEach(t),A7=l(b),Ls=s(b,"DIV",{class:!0});var f2=n(Ls);m(Jo.$$.fragment,f2),L7=l(f2),qu=s(f2,"P",{});var Lz=n(qu);S7=o(Lz,"Find the nearest examples in the dataset to the query."),Lz.forEach(t),f2.forEach(t),O7=l(b),Ss=s(b,"DIV",{class:!0});var h2=n(Ss);m(Xo.$$.fragment,h2),j7=l(h2),zu=s(h2,"P",{});var Sz=n(zu);C7=o(Sz,"Find the nearest examples in the dataset to the query."),Sz.forEach(t),h2.forEach(t),q7=l(b),Os=s(b,"DIV",{class:!0});var u2=n(Os);m(Zo.$$.fragment,u2),z7=l(u2),Rc=s(u2,"P",{});var zj=n(Rc);Bc=s(zj,"A",{href:!0});var Oz=n(Bc);V7=o(Oz,"datasets.DatasetInfo"),Oz.forEach(t),M7=o(zj," object containing all the metadata in the dataset."),zj.forEach(t),u2.forEach(t),U7=l(b),js=s(b,"DIV",{class:!0});var g2=n(js);m(Qo.$$.fragment,g2),R7=l(g2),Hc=s(g2,"P",{});var Vj=n(Hc);Gc=s(Vj,"A",{href:!0});var jz=n(Gc);B7=o(jz,"datasets.NamedSplit"),jz.forEach(t),H7=o(Vj," object corresponding to a named dataset split."),Vj.forEach(t),g2.forEach(t),G7=l(b),Kc=s(b,"DIV",{class:!0});var Cz=n(Kc);m(ei.$$.fragment,Cz),Cz.forEach(t),K7=l(b),Wc=s(b,"DIV",{class:!0});var qz=n(Wc);m(ti.$$.fragment,qz),qz.forEach(t),W7=l(b),Yc=s(b,"DIV",{class:!0});var zz=n(Yc);m(ai.$$.fragment,zz),zz.forEach(t),Y7=l(b),Jc=s(b,"DIV",{class:!0});var Vz=n(Jc);m(si.$$.fragment,Vz),Vz.forEach(t),J7=l(b),Xc=s(b,"DIV",{class:!0});var Mz=n(Xc);m(ni.$$.fragment,Mz),Mz.forEach(t),X7=l(b),Zc=s(b,"DIV",{class:!0});var Uz=n(Zc);m(ri.$$.fragment,Uz),Uz.forEach(t),Z7=l(b),Qc=s(b,"DIV",{class:!0});var Rz=n(Qc);m(oi.$$.fragment,Rz),Rz.forEach(t),Q7=l(b),ep=s(b,"DIV",{class:!0});var Bz=n(ep);m(ii.$$.fragment,Bz),Bz.forEach(t),eE=l(b),tp=s(b,"DIV",{class:!0});var Hz=n(tp);m(di.$$.fragment,Hz),Hz.forEach(t),tE=l(b),ap=s(b,"DIV",{class:!0});var Gz=n(ap);m(li.$$.fragment,Gz),Gz.forEach(t),aE=l(b),sp=s(b,"DIV",{class:!0});var Kz=n(sp);m(ci.$$.fragment,Kz),Kz.forEach(t),sE=l(b),np=s(b,"DIV",{class:!0});var Wz=n(np);m(pi.$$.fragment,Wz),Wz.forEach(t),nE=l(b),rp=s(b,"DIV",{class:!0});var Yz=n(rp);m(mi.$$.fragment,Yz),Yz.forEach(t),rE=l(b),Cs=s(b,"DIV",{class:!0});var _2=n(Cs);m(fi.$$.fragment,_2),oE=l(_2),Vu=s(_2,"P",{});var Jz=n(Vu);iE=o(Jz,"Create Dataset from CSV file(s)."),Jz.forEach(t),_2.forEach(t),dE=l(b),qs=s(b,"DIV",{class:!0});var v2=n(qs);m(hi.$$.fragment,v2),lE=l(v2),Mu=s(v2,"P",{});var Xz=n(Mu);cE=o(Xz,"Create Dataset from JSON or JSON Lines file(s)."),Xz.forEach(t),v2.forEach(t),pE=l(b),zs=s(b,"DIV",{class:!0});var b2=n(zs);m(ui.$$.fragment,b2),mE=l(b2),Uu=s(b2,"P",{});var Zz=n(Uu);fE=o(Zz,"Create Dataset from Parquet file(s)."),Zz.forEach(t),b2.forEach(t),hE=l(b),Vs=s(b,"DIV",{class:!0});var y2=n(Vs);m(gi.$$.fragment,y2),uE=l(y2),Ru=s(y2,"P",{});var Qz=n(Ru);gE=o(Qz,"Create Dataset from text file(s)."),Qz.forEach(t),y2.forEach(t),_E=l(b),wt=s(b,"DIV",{class:!0});var Bm=n(wt);m(_i.$$.fragment,Bm),vE=l(Bm),la=s(Bm,"P",{});var Hm=n(la);bE=o(Hm,"Prepare a dataset for the given task by casting the dataset\u2019s "),op=s(Hm,"A",{href:!0});var eV=n(op);yE=o(eV,"Features"),eV.forEach(t),$E=o(Hm," to standardized column names and types as detailed in "),ip=s(Hm,"A",{href:!0});var tV=n(ip);wE=o(tV,"datasets.tasks"),tV.forEach(t),DE=o(Hm,"."),Hm.forEach(t),xE=l(Bm),ca=s(Bm,"P",{});var Gm=n(ca);EE=o(Gm,"Casts "),Bu=s(Gm,"CODE",{});var aV=n(Bu);kE=o(aV,"datasets.DatasetInfo.features"),aV.forEach(t),IE=o(Gm," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Hu=s(Gm,"CODE",{});var sV=n(Hu);TE=o(sV,"datasets.DatasetInfo.task_templates"),sV.forEach(t),NE=o(Gm," after casting."),Gm.forEach(t),Bm.forEach(t),FE=l(b),ke=s(b,"DIV",{class:!0});var rr=n(ke);m(vi.$$.fragment,rr),PE=l(rr),bi=s(rr,"P",{});var $2=n(bi);AE=o($2,"Align the dataset\u2019s label ID and label name mapping to match an input "),Gu=s($2,"CODE",{});var nV=n(Gu);LE=o(nV,"label2id"),nV.forEach(t),SE=o($2,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),$2.forEach(t),OE=l(rr),Ku=s(rr,"P",{});var rV=n(Ku);jE=o(rV,"Example:"),rV.forEach(t),CE=l(rr),m(yi.$$.fragment,rr),rr.forEach(t),b.forEach(t),Tb=l(i),pa=s(i,"DIV",{class:!0});var w2=n(pa);m($i.$$.fragment,w2),qE=l(w2),ma=s(w2,"P",{});var Km=n(ma);zE=o(Km,"Converts a list of "),dp=s(Km,"A",{href:!0});var oV=n(dp);VE=o(oV,"Dataset"),oV.forEach(t),ME=o(Km," with the same schema into a single "),lp=s(Km,"A",{href:!0});var iV=n(lp);UE=o(iV,"Dataset"),iV.forEach(t),RE=o(Km,"."),Km.forEach(t),w2.forEach(t),Nb=l(i),C=s(i,"DIV",{class:!0});var oe=n(C);m(wi.$$.fragment,oe),BE=l(oe),Wu=s(oe,"P",{});var dV=n(Wu);HE=o(dV,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),dV.forEach(t),GE=l(oe),fa=s(oe,"P",{});var Wm=n(fa);KE=o(Wm,"You can use this function on a list of "),cp=s(Wm,"A",{href:!0});var lV=n(cp);WE=o(lV,"Dataset"),lV.forEach(t),YE=o(Wm," objects, or on a list of "),pp=s(Wm,"A",{href:!0});var cV=n(pp);JE=o(cV,"IterableDataset"),cV.forEach(t),XE=o(Wm," objects."),Wm.forEach(t),ZE=l(oe),pe=s(oe,"P",{});var qt=n(pe);QE=o(qt,"If "),Yu=s(qt,"CODE",{});var pV=n(Yu);ek=o(pV,"probabilities"),pV.forEach(t),tk=o(qt," is "),Ju=s(qt,"CODE",{});var mV=n(Ju);ak=o(mV,"None"),mV.forEach(t),sk=o(qt,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),Xu=s(qt,"CODE",{});var fV=n(Xu);nk=o(fV,"probabilities"),fV.forEach(t),rk=o(qt," is not "),Zu=s(qt,"CODE",{});var hV=n(Zu);ok=o(hV,"None"),hV.forEach(t),ik=o(qt,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),qt.forEach(t),dk=l(oe),Qu=s(oe,"P",{});var uV=n(Qu);lk=o(uV,"The resulting dataset ends when one of the source datasets runs out of examples."),uV.forEach(t),ck=l(oe),eg=s(oe,"P",{});var gV=n(eg);pk=o(gV,"Example:"),gV.forEach(t),mk=l(oe),m(Di.$$.fragment,oe),oe.forEach(t),Fb=l(i),X=s(i,"DIV",{class:!0});var zt=n(X);m(xi.$$.fragment,zt),fk=l(zt),tg=s(zt,"P",{});var _V=n(tg);hk=o(_V,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),_V.forEach(t),uk=l(zt),ag=s(zt,"P",{});var vV=n(ag);gk=o(vV,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),vV.forEach(t),_k=l(zt),sg=s(zt,"P",{});var bV=n(sg);vk=o(bV,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),bV.forEach(t),bk=l(zt),me=s(zt,"UL",{});var Vt=n(me);ng=s(Vt,"LI",{});var yV=n(ng);yk=o(yV,"cache files are always recreated"),yV.forEach(t),$k=l(Vt),rg=s(Vt,"LI",{});var $V=n(rg);wk=o($V,"cache files are written to a temporary directory that is deleted when session closes"),$V.forEach(t),Dk=l(Vt),og=s(Vt,"LI",{});var wV=n(og);xk=o(wV,"cache files are named using a random hash instead of the dataset fingerprint"),wV.forEach(t),Ek=l(Vt),Ei=s(Vt,"LI",{});var D2=n(Ei);kk=o(D2,"use "),mp=s(D2,"A",{href:!0});var DV=n(mp);Ik=o(DV,"datasets.Dataset.save_to_disk()"),DV.forEach(t),Tk=o(D2," to save a transformed dataset or it will be deleted when session closes"),D2.forEach(t),Nk=l(Vt),Ye=s(Vt,"LI",{});var or=n(Ye);Fk=o(or,"caching doesn\u2019t affect "),fp=s(or,"A",{href:!0});var xV=n(fp);Pk=o(xV,"datasets.load_dataset()"),xV.forEach(t),Ak=o(or,`. If you want to regenerate a dataset from scratch you should use
the `),ig=s(or,"CODE",{});var EV=n(ig);Lk=o(EV,"download_mode"),EV.forEach(t),Sk=o(or," parameter in "),hp=s(or,"A",{href:!0});var kV=n(hp);Ok=o(kV,"datasets.load_dataset()"),kV.forEach(t),jk=o(or,"."),or.forEach(t),Vt.forEach(t),zt.forEach(t),Pb=l(i),Z=s(i,"DIV",{class:!0});var Mt=n(Z);m(ki.$$.fragment,Mt),Ck=l(Mt),dg=s(Mt,"P",{});var IV=n(dg);qk=o(IV,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),IV.forEach(t),zk=l(Mt),lg=s(Mt,"P",{});var TV=n(lg);Vk=o(TV,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),TV.forEach(t),Mk=l(Mt),cg=s(Mt,"P",{});var NV=n(cg);Uk=o(NV,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),NV.forEach(t),Rk=l(Mt),fe=s(Mt,"UL",{});var Ut=n(fe);pg=s(Ut,"LI",{});var FV=n(pg);Bk=o(FV,"cache files are always recreated"),FV.forEach(t),Hk=l(Ut),mg=s(Ut,"LI",{});var PV=n(mg);Gk=o(PV,"cache files are written to a temporary directory that is deleted when session closes"),PV.forEach(t),Kk=l(Ut),fg=s(Ut,"LI",{});var AV=n(fg);Wk=o(AV,"cache files are named using a random hash instead of the dataset fingerprint"),AV.forEach(t),Yk=l(Ut),Ii=s(Ut,"LI",{});var x2=n(Ii);Jk=o(x2,"use "),up=s(x2,"A",{href:!0});var LV=n(up);Xk=o(LV,"datasets.Dataset.save_to_disk()"),LV.forEach(t),Zk=o(x2," to save a transformed dataset or it will be deleted when session closes"),x2.forEach(t),Qk=l(Ut),Je=s(Ut,"LI",{});var ir=n(Je);eI=o(ir,"caching doesn\u2019t affect "),gp=s(ir,"A",{href:!0});var SV=n(gp);tI=o(SV,"datasets.load_dataset()"),SV.forEach(t),aI=o(ir,`. If you want to regenerate a dataset from scratch you should use
the `),hg=s(ir,"CODE",{});var OV=n(hg);sI=o(OV,"download_mode"),OV.forEach(t),nI=o(ir," parameter in "),_p=s(ir,"A",{href:!0});var jV=n(_p);rI=o(jV,"datasets.load_dataset()"),jV.forEach(t),oI=o(ir,"."),ir.forEach(t),Ut.forEach(t),Mt.forEach(t),Ab=l(i),ha=s(i,"DIV",{class:!0});var E2=n(ha);m(Ti.$$.fragment,E2),iI=l(E2),ug=s(E2,"P",{});var CV=n(ug);dI=o(CV,"Enable/disable tqdm progress bars."),CV.forEach(t),E2.forEach(t),Lb=l(i),ua=s(i,"DIV",{class:!0});var k2=n(ua);m(Ni.$$.fragment,k2),lI=l(k2),gg=s(k2,"P",{});var qV=n(gg);cI=o(qV,"Return a boolean indicating whether tqdm progress bars are enabled."),qV.forEach(t),k2.forEach(t),Sb=l(i),ga=s(i,"H2",{class:!0});var I2=n(ga);Ms=s(I2,"A",{id:!0,class:!0,href:!0});var zV=n(Ms);_g=s(zV,"SPAN",{});var VV=n(_g);m(Fi.$$.fragment,VV),VV.forEach(t),zV.forEach(t),pI=l(I2),vg=s(I2,"SPAN",{});var MV=n(vg);mI=o(MV,"DatasetDict"),MV.forEach(t),I2.forEach(t),Ob=l(i),Us=s(i,"P",{});var T2=n(Us);fI=o(T2,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),bg=s(T2,"CODE",{});var UV=n(bg);hI=o(UV,"datasets.Dataset"),UV.forEach(t),uI=o(T2,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),T2.forEach(t),jb=l(i),w=s(i,"DIV",{class:!0});var D=n(w);m(Pi.$$.fragment,D),gI=l(D),yg=s(D,"P",{});var RV=n(yg);_I=o(RV,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),RV.forEach(t),vI=l(D),Rs=s(D,"DIV",{class:!0});var N2=n(Rs);m(Ai.$$.fragment,N2),bI=l(N2),$g=s(N2,"P",{});var BV=n($g);yI=o(BV,"The Apache Arrow tables backing each split."),BV.forEach(t),N2.forEach(t),$I=l(D),Bs=s(D,"DIV",{class:!0});var F2=n(Bs);m(Li.$$.fragment,F2),wI=l(F2),wg=s(F2,"P",{});var HV=n(wg);DI=o(HV,"The cache files containing the Apache Arrow table backing each split."),HV.forEach(t),F2.forEach(t),xI=l(D),Hs=s(D,"DIV",{class:!0});var P2=n(Hs);m(Si.$$.fragment,P2),EI=l(P2),Dg=s(P2,"P",{});var GV=n(Dg);kI=o(GV,"Number of columns in each split of the dataset."),GV.forEach(t),P2.forEach(t),II=l(D),Gs=s(D,"DIV",{class:!0});var A2=n(Gs);m(Oi.$$.fragment,A2),TI=l(A2),ji=s(A2,"P",{});var L2=n(ji);NI=o(L2,"Number of rows in each split of the dataset (same as "),Ks=s(L2,"A",{href:!0});var S2=n(Ks);FI=o(S2,"datasets.Dataset."),xg=s(S2,"STRONG",{});var KV=n(xg);PI=o(KV,"len"),KV.forEach(t),AI=o(S2,"()"),S2.forEach(t),LI=o(L2,")."),L2.forEach(t),A2.forEach(t),SI=l(D),Ws=s(D,"DIV",{class:!0});var O2=n(Ws);m(Ci.$$.fragment,O2),OI=l(O2),Eg=s(O2,"P",{});var WV=n(Eg);jI=o(WV,"Names of the columns in each split of the dataset."),WV.forEach(t),O2.forEach(t),CI=l(D),Ys=s(D,"DIV",{class:!0});var j2=n(Ys);m(qi.$$.fragment,j2),qI=l(j2),kg=s(j2,"P",{});var YV=n(kg);zI=o(YV,"Shape of each split of the dataset (number of columns, number of rows)."),YV.forEach(t),j2.forEach(t),VI=l(D),Dt=s(D,"DIV",{class:!0});var Ym=n(Dt);m(zi.$$.fragment,Ym),MI=l(Ym),Ig=s(Ym,"P",{});var JV=n(Ig);UI=o(JV,"Return a list of the unique elements in a column for each split."),JV.forEach(t),RI=l(Ym),Tg=s(Ym,"P",{});var XV=n(Tg);BI=o(XV,"This is implemented in the low-level backend and as such, very fast."),XV.forEach(t),Ym.forEach(t),HI=l(D),Js=s(D,"DIV",{class:!0});var C2=n(Js);m(Vi.$$.fragment,C2),GI=l(C2),Ng=s(C2,"P",{});var ZV=n(Ng);KI=o(ZV,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be carefull when running this command that no other process is currently using other cache files.`),ZV.forEach(t),C2.forEach(t),WI=l(D),Xs=s(D,"DIV",{class:!0});var q2=n(Xs);m(Mi.$$.fragment,q2),YI=l(q2),Fg=s(q2,"P",{});var QV=n(Fg);JI=o(QV,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),QV.forEach(t),q2.forEach(t),XI=l(D),Zs=s(D,"DIV",{class:!0});var z2=n(Zs);m(Ui.$$.fragment,z2),ZI=l(z2),Pg=s(z2,"P",{});var eM=n(Pg);QI=o(eM,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),eM.forEach(t),z2.forEach(t),e5=l(D),xt=s(D,"DIV",{class:!0});var Jm=n(xt);m(Ri.$$.fragment,Jm),t5=l(Jm),Ag=s(Jm,"P",{});var tM=n(Ag);a5=o(tM,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),tM.forEach(t),s5=l(Jm),Lg=s(Jm,"P",{});var aM=n(Lg);n5=o(aM,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),aM.forEach(t),Jm.forEach(t),r5=l(D),Ie=s(D,"DIV",{class:!0});var dr=n(Ie);m(Bi.$$.fragment,dr),o5=l(dr),Sg=s(dr,"P",{});var sM=n(Sg);i5=o(sM,"Create a new Dataset where the rows are shuffled."),sM.forEach(t),d5=l(dr),Og=s(dr,"P",{});var nM=n(Og);l5=o(nM,"The transformation is applied to all the datasets of the dataset dictionary."),nM.forEach(t),c5=l(dr),jg=s(dr,"P",{});var rM=n(jg);p5=o(rM,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),rM.forEach(t),dr.forEach(t),m5=l(D),Te=s(D,"DIV",{class:!0});var lr=n(Te);m(Hi.$$.fragment,lr),f5=l(lr),Gi=s(lr,"P",{});var V2=n(Gi);h5=o(V2,"Set "),Cg=s(V2,"CODE",{});var oM=n(Cg);u5=o(oM,"__getitem__"),oM.forEach(t),g5=o(V2,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),V2.forEach(t),_5=l(lr),he=s(lr,"P",{});var Rt=n(he);v5=o(Rt,"It is possible to call "),qg=s(Rt,"CODE",{});var iM=n(qg);b5=o(iM,"map"),iM.forEach(t),y5=o(Rt," after calling "),zg=s(Rt,"CODE",{});var dM=n(zg);$5=o(dM,"set_format"),dM.forEach(t),w5=o(Rt,". Since "),Vg=s(Rt,"CODE",{});var lM=n(Vg);D5=o(lM,"map"),lM.forEach(t),x5=o(Rt,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),Mg=s(Rt,"CODE",{});var cM=n(Mg);E5=o(cM,"map"),cM.forEach(t),k5=o(Rt," on a dataset to add a new column, then this column will be formatted:"),Rt.forEach(t),I5=l(lr),Ug=s(lr,"P",{});var pM=n(Ug);T5=o(pM,"new formatted columns = (all columns - previously unformatted columns)"),pM.forEach(t),lr.forEach(t),N5=l(D),Et=s(D,"DIV",{class:!0});var Xm=n(Et);m(Ki.$$.fragment,Xm),F5=l(Xm),Wi=s(Xm,"P",{});var M2=n(Wi);P5=o(M2,"Reset "),Rg=s(M2,"CODE",{});var mM=n(Rg);A5=o(mM,"__getitem__"),mM.forEach(t),L5=o(M2,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),M2.forEach(t),S5=l(Xm),vp=s(Xm,"P",{});var Mj=n(vp);O5=o(Mj,"Same as "),Bg=s(Mj,"CODE",{});var fM=n(Bg);j5=o(fM,"self.set_format()"),fM.forEach(t),Mj.forEach(t),Xm.forEach(t),C5=l(D),Qs=s(D,"DIV",{class:!0});var U2=n(Qs);m(Yi.$$.fragment,U2),q5=l(U2),_a=s(U2,"P",{});var Zm=n(_a);z5=o(Zm,"To be used in a "),Hg=s(Zm,"EM",{});var hM=n(Hg);V5=o(hM,"with"),hM.forEach(t),M5=o(Zm," statement. Set "),Gg=s(Zm,"CODE",{});var uM=n(Gg);U5=o(uM,"__getitem__"),uM.forEach(t),R5=o(Zm,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),Zm.forEach(t),U2.forEach(t),B5=l(D),Ne=s(D,"DIV",{class:!0});var cr=n(Ne);m(Ji.$$.fragment,cr),H5=l(cr),Xe=s(cr,"P",{});var pr=n(Xe);G5=o(pr,"Set "),Kg=s(pr,"CODE",{});var gM=n(Kg);K5=o(gM,"__getitem__"),gM.forEach(t),W5=o(pr,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Wg=s(pr,"CODE",{});var _M=n(Wg);Y5=o(_M,"type"),_M.forEach(t),J5=o(pr," (for example \u201Cnumpy\u201D) is used to format batches when using "),Yg=s(pr,"CODE",{});var vM=n(Yg);X5=o(vM,"__getitem__"),vM.forEach(t),Z5=o(pr,`.
The format is set for every dataset in the dataset dictionary`),pr.forEach(t),Q5=l(cr),Xi=s(cr,"P",{});var R2=n(Xi);e6=o(R2,"It\u2019s also possible to use custom transforms for formatting using "),bp=s(R2,"A",{href:!0});var bM=n(bp);t6=o(bM,"datasets.Dataset.with_transform()"),bM.forEach(t),a6=o(R2,"."),R2.forEach(t),s6=l(cr),va=s(cr,"P",{});var Qm=n(va);n6=o(Qm,"Contrary to "),yp=s(Qm,"A",{href:!0});var yM=n(yp);r6=o(yM,"datasets.DatasetDict.set_format()"),yM.forEach(t),o6=o(Qm,", "),Jg=s(Qm,"CODE",{});var $M=n(Jg);i6=o($M,"with_format"),$M.forEach(t),d6=o(Qm," returns a new DatasetDict object with new Dataset objects."),Qm.forEach(t),cr.forEach(t),l6=l(D),Fe=s(D,"DIV",{class:!0});var mr=n(Fe);m(Zi.$$.fragment,mr),c6=l(mr),ba=s(mr,"P",{});var ef=n(ba);p6=o(ef,"Set "),Xg=s(ef,"CODE",{});var wM=n(Xg);m6=o(wM,"__getitem__"),wM.forEach(t),f6=o(ef," return format using this transform. The transform is applied on-the-fly on batches when "),Zg=s(ef,"CODE",{});var DM=n(Zg);h6=o(DM,"__getitem__"),DM.forEach(t),u6=o(ef,` is called.
The transform is set for every dataset in the dataset dictionary`),ef.forEach(t),g6=l(mr),ya=s(mr,"P",{});var tf=n(ya);_6=o(tf,"As "),$p=s(tf,"A",{href:!0});var xM=n($p);v6=o(xM,"datasets.Dataset.set_format()"),xM.forEach(t),b6=o(tf,", this can be reset using "),wp=s(tf,"A",{href:!0});var EM=n(wp);y6=o(EM,"datasets.Dataset.reset_format()"),EM.forEach(t),$6=o(tf,"."),tf.forEach(t),w6=l(mr),$a=s(mr,"P",{});var af=n($a);D6=o(af,"Contrary to "),Qg=s(af,"CODE",{});var kM=n(Qg);x6=o(kM,"datasets.DatasetDict.set_transform()"),kM.forEach(t),E6=l(af),e_=s(af,"CODE",{});var IM=n(e_);k6=o(IM,"with_transform"),IM.forEach(t),I6=o(af," returns a new DatasetDict object with new Dataset objects."),af.forEach(t),mr.forEach(t),T6=l(D),en=s(D,"DIV",{class:!0});var B2=n(en);m(Qi.$$.fragment,B2),N6=l(B2),t_=s(B2,"P",{});var TM=n(t_);F6=o(TM,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),TM.forEach(t),B2.forEach(t),P6=l(D),kt=s(D,"DIV",{class:!0});var sf=n(kt);m(ed.$$.fragment,sf),A6=l(sf),a_=s(sf,"P",{});var NM=n(a_);L6=o(NM,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),NM.forEach(t),S6=l(sf),Ze=s(sf,"P",{});var fr=n(Ze);O6=o(fr,"You can also remove a column using "),Dp=s(fr,"A",{href:!0});var FM=n(Dp);j6=o(FM,"Dataset.map()"),FM.forEach(t),C6=o(fr," with "),s_=s(fr,"EM",{});var PM=n(s_);q6=o(PM,"feature"),PM.forEach(t),z6=o(fr," but "),n_=s(fr,"CODE",{});var AM=n(n_);V6=o(AM,"cast_"),AM.forEach(t),M6=o(fr,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),fr.forEach(t),sf.forEach(t),U6=l(D),tn=s(D,"DIV",{class:!0});var H2=n(tn);m(td.$$.fragment,H2),R6=l(H2),r_=s(H2,"P",{});var LM=n(r_);B6=o(LM,"Cast column to feature for decoding."),LM.forEach(t),H2.forEach(t),H6=l(D),Pe=s(D,"DIV",{class:!0});var hr=n(Pe);m(ad.$$.fragment,hr),G6=l(hr),o_=s(hr,"P",{});var SM=n(o_);K6=o(SM,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),SM.forEach(t),W6=l(hr),i_=s(hr,"P",{});var OM=n(i_);Y6=o(OM,"The transformation is applied to all the splits of the dataset dictionary."),OM.forEach(t),J6=l(hr),wa=s(hr,"P",{});var nf=n(wa);X6=o(nf,"You can also remove a column using "),xp=s(nf,"A",{href:!0});var jM=n(xp);Z6=o(jM,"Dataset.map()"),jM.forEach(t),Q6=o(nf," with "),d_=s(nf,"EM",{});var CM=n(d_);e8=o(CM,"remove_columns"),CM.forEach(t),t8=o(nf,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),nf.forEach(t),hr.forEach(t),a8=l(D),Ae=s(D,"DIV",{class:!0});var ur=n(Ae);m(sd.$$.fragment,ur),s8=l(ur),l_=s(ur,"P",{});var qM=n(l_);n8=o(qM,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),qM.forEach(t),r8=l(ur),Da=s(ur,"P",{});var rf=n(Da);o8=o(rf,"You can also rename a column using "),Ep=s(rf,"A",{href:!0});var zM=n(Ep);i8=o(zM,"Dataset.map()"),zM.forEach(t),d8=o(rf," with "),c_=s(rf,"EM",{});var VM=n(c_);l8=o(VM,"remove_columns"),VM.forEach(t),c8=o(rf," but the present method:"),rf.forEach(t),p8=l(ur),nd=s(ur,"UL",{});var G2=n(nd);p_=s(G2,"LI",{});var MM=n(p_);m8=o(MM,"takes care of moving the original features under the new column name."),MM.forEach(t),f8=l(G2),m_=s(G2,"LI",{});var UM=n(m_);h8=o(UM,"doesn\u2019t copy the data to a new dataset and is thus much faster."),UM.forEach(t),G2.forEach(t),ur.forEach(t),u8=l(D),an=s(D,"DIV",{class:!0});var K2=n(an);m(rd.$$.fragment,K2),g8=l(K2),od=s(K2,"P",{});var W2=n(od);_8=o(W2,"Casts the given column as :obj:"),f_=s(W2,"CODE",{});var RM=n(f_);v8=o(RM,"datasets.features.ClassLabel"),RM.forEach(t),b8=o(W2," and updates the tables."),W2.forEach(t),K2.forEach(t),y8=l(D),se=s(D,"DIV",{class:!0});var Bt=n(se);m(id.$$.fragment,Bt),$8=l(Bt),xa=s(Bt,"P",{});var of=n(xa);w8=o(of,"Pushes the "),h_=s(of,"CODE",{});var BM=n(h_);D8=o(BM,"DatasetDict"),BM.forEach(t),x8=o(of,` to the hub.
The `),u_=s(of,"CODE",{});var HM=n(u_);E8=o(HM,"DatasetDict"),HM.forEach(t),k8=o(of," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),of.forEach(t),I8=l(Bt),g_=s(Bt,"P",{});var GM=n(g_);T8=o(GM,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),GM.forEach(t),N8=l(Bt),__=s(Bt,"P",{});var KM=n(__);F8=o(KM,"Example:"),KM.forEach(t),P8=l(Bt),m(dd.$$.fragment,Bt),Bt.forEach(t),A8=l(D),sn=s(D,"DIV",{class:!0});var Y2=n(sn);m(ld.$$.fragment,Y2),L8=l(Y2),Ea=s(Y2,"P",{});var df=n(Ea);S8=o(df,"Saves a dataset dict to a filesystem using either "),kp=s(df,"A",{href:!0});var WM=n(kp);O8=o(WM,"S3FileSystem"),WM.forEach(t),j8=o(df,` or
`),v_=s(df,"CODE",{});var YM=n(v_);C8=o(YM,"fsspec.spec.AbstractFileSystem"),YM.forEach(t),q8=o(df,"."),df.forEach(t),Y2.forEach(t),z8=l(D),nn=s(D,"DIV",{class:!0});var J2=n(nn);m(cd.$$.fragment,J2),V8=l(J2),Qe=s(J2,"P",{});var gr=n(Qe);M8=o(gr,"Load a dataset that was previously saved using "),b_=s(gr,"CODE",{});var JM=n(b_);U8=o(JM,"save_to_disk"),JM.forEach(t),R8=o(gr,` from a filesystem using either
`),Ip=s(gr,"A",{href:!0});var XM=n(Ip);B8=o(XM,"S3FileSystem"),XM.forEach(t),H8=o(gr," or "),y_=s(gr,"CODE",{});var ZM=n(y_);G8=o(ZM,"fsspec.spec.AbstractFileSystem"),ZM.forEach(t),K8=o(gr,"."),gr.forEach(t),J2.forEach(t),W8=l(D),rn=s(D,"DIV",{class:!0});var X2=n(rn);m(pd.$$.fragment,X2),Y8=l(X2),$_=s(X2,"P",{});var QM=n($_);J8=o(QM,"Create DatasetDict from CSV file(s)."),QM.forEach(t),X2.forEach(t),X8=l(D),on=s(D,"DIV",{class:!0});var Z2=n(on);m(md.$$.fragment,Z2),Z8=l(Z2),w_=s(Z2,"P",{});var eU=n(w_);Q8=o(eU,"Create DatasetDict from JSON Lines file(s)."),eU.forEach(t),Z2.forEach(t),eT=l(D),dn=s(D,"DIV",{class:!0});var Q2=n(dn);m(fd.$$.fragment,Q2),tT=l(Q2),D_=s(Q2,"P",{});var tU=n(D_);aT=o(tU,"Create DatasetDict from Parquet file(s)."),tU.forEach(t),Q2.forEach(t),sT=l(D),ln=s(D,"DIV",{class:!0});var e$=n(ln);m(hd.$$.fragment,e$),nT=l(e$),x_=s(e$,"P",{});var aU=n(x_);rT=o(aU,"Create DatasetDict from text file(s)."),aU.forEach(t),e$.forEach(t),oT=l(D),It=s(D,"DIV",{class:!0});var lf=n(It);m(ud.$$.fragment,lf),iT=l(lf),ka=s(lf,"P",{});var cf=n(ka);dT=o(cf,"Prepare a dataset for the given task by casting the dataset\u2019s "),Tp=s(cf,"A",{href:!0});var sU=n(Tp);lT=o(sU,"Features"),sU.forEach(t),cT=o(cf," to standardized column names and types as detailed in "),Np=s(cf,"A",{href:!0});var nU=n(Np);pT=o(nU,"datasets.tasks"),nU.forEach(t),mT=o(cf,"."),cf.forEach(t),fT=l(lf),Ia=s(lf,"P",{});var pf=n(Ia);hT=o(pf,"Casts "),E_=s(pf,"CODE",{});var rU=n(E_);uT=o(rU,"datasets.DatasetInfo.features"),rU.forEach(t),gT=o(pf," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),k_=s(pf,"CODE",{});var oU=n(k_);_T=o(oU,"datasets.DatasetInfo.task_templates"),oU.forEach(t),vT=o(pf," after casting."),pf.forEach(t),lf.forEach(t),D.forEach(t),Cb=l(i),Fp=s(i,"A",{id:!0}),n(Fp).forEach(t),qb=l(i),Ta=s(i,"H2",{class:!0});var t$=n(Ta);cn=s(t$,"A",{id:!0,class:!0,href:!0});var iU=n(cn);I_=s(iU,"SPAN",{});var dU=n(I_);m(gd.$$.fragment,dU),dU.forEach(t),iU.forEach(t),bT=l(t$),T_=s(t$,"SPAN",{});var lU=n(T_);yT=o(lU,"IterableDataset"),lU.forEach(t),t$.forEach(t),zb=l(i),pn=s(i,"P",{});var a$=n(pn);$T=o(a$,"The base class "),Pp=s(a$,"A",{href:!0});var cU=n(Pp);wT=o(cU,"datasets.IterableDataset"),cU.forEach(t),DT=o(a$," implements an iterable Dataset backed by python generators."),a$.forEach(t),Vb=l(i),x=s(i,"DIV",{class:!0});var E=n(x);m(_d.$$.fragment,E),xT=l(E),N_=s(E,"P",{});var pU=n(N_);ET=o(pU,"A Dataset backed by an iterable."),pU.forEach(t),kT=l(E),mn=s(E,"DIV",{class:!0});var s$=n(mn);m(vd.$$.fragment,s$),IT=l(s$),F_=s(s$,"P",{});var mU=n(F_);TT=o(mU,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),mU.forEach(t),s$.forEach(t),NT=l(E),fn=s(E,"DIV",{class:!0});var n$=n(fn);m(bd.$$.fragment,n$),FT=l(n$),P_=s(n$,"P",{});var fU=n(P_);PT=o(fU,"Cast column to feature for decoding."),fU.forEach(t),n$.forEach(t),AT=l(E),Ap=s(E,"DIV",{class:!0});var hU=n(Ap);m(yd.$$.fragment,hU),hU.forEach(t),LT=l(E),Le=s(E,"DIV",{class:!0});var _r=n(Le);m($d.$$.fragment,_r),ST=l(_r),A_=s(_r,"P",{});var uU=n(A_);OT=o(uU,"Return a dataset with the specified map function. The function is applied on-the-fly on the examples when iterating over the dataset."),uU.forEach(t),jT=l(_r),wd=s(_r,"P",{});var r$=n(wd);CT=o(r$,"You can specify whether the function should be batched or not with the "),L_=s(r$,"CODE",{});var gU=n(L_);qT=o(gU,"batched"),gU.forEach(t),zT=o(r$," parameter:"),r$.forEach(t),VT=l(_r),Na=s(_r,"UL",{});var mf=n(Na);S_=s(mf,"LI",{});var _U=n(S_);MT=o(_U,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),_U.forEach(t),UT=l(mf),O_=s(mf,"LI",{});var vU=n(O_);RT=o(vU,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),vU.forEach(t),BT=l(mf),Q=s(mf,"LI",{});var je=n(Q);HT=o(je,"If batched is True and batch_size is "),j_=s(je,"CODE",{});var bU=n(j_);GT=o(bU,"n"),bU.forEach(t),KT=o(je," > 1, then the function takes a batch of "),C_=s(je,"CODE",{});var yU=n(C_);WT=o(yU,"n"),yU.forEach(t),YT=o(je," examples as input and can return a batch with "),q_=s(je,"CODE",{});var $U=n(q_);JT=o($U,"n"),$U.forEach(t),XT=o(je,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),z_=s(je,"CODE",{});var wU=n(z_);ZT=o(wU,"n"),wU.forEach(t),QT=o(je,` examples.
A batch is a dictionary, e.g. a batch of `),V_=s(je,"CODE",{});var DU=n(V_);eN=o(DU,"n"),DU.forEach(t),tN=o(je," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),je.forEach(t),mf.forEach(t),_r.forEach(t),aN=l(E),ne=s(E,"DIV",{class:!0});var Ht=n(ne);m(Dd.$$.fragment,Ht),sN=l(Ht),M_=s(Ht,"P",{});var xU=n(M_);nN=o(xU,"Randomly shuffles the elements of this dataset."),xU.forEach(t),rN=l(Ht),U_=s(Ht,"P",{});var EU=n(U_);oN=o(EU,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),EU.forEach(t),iN=l(Ht),xd=s(Ht,"P",{});var o$=n(xd);dN=o(o$,"For instance, if your dataset contains 10,000 elements but "),R_=s(o$,"CODE",{});var kU=n(R_);lN=o(kU,"buffer_size"),kU.forEach(t),cN=o(o$,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),o$.forEach(t),pN=l(Ht),Fa=s(Ht,"P",{});var ff=n(Fa);mN=o(ff,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Lp=s(ff,"A",{href:!0});var IU=n(Lp);fN=o(IU,"datasets.IterableDataset.skip()"),IU.forEach(t),hN=o(ff," or "),Sp=s(ff,"A",{href:!0});var TU=n(Sp);uN=o(TU,"datasets.IterableDataset.take()"),TU.forEach(t),gN=o(ff,`
then the order of the shards is kept unchanged.`),ff.forEach(t),Ht.forEach(t),_N=l(E),hn=s(E,"DIV",{class:!0});var i$=n(hn);m(Ed.$$.fragment,i$),vN=l(i$),kd=s(i$,"P",{});var d$=n(kd);bN=o(d$,"Create a new IterableDataset that skips the first "),B_=s(d$,"CODE",{});var NU=n(B_);yN=o(NU,"n"),NU.forEach(t),$N=o(d$," elements."),d$.forEach(t),i$.forEach(t),wN=l(E),un=s(E,"DIV",{class:!0});var l$=n(un);m(Id.$$.fragment,l$),DN=l(l$),Td=s(l$,"P",{});var c$=n(Td);xN=o(c$,"Create a new IterableDataset with only the first "),H_=s(c$,"CODE",{});var FU=n(H_);EN=o(FU,"n"),FU.forEach(t),kN=o(c$," elements."),c$.forEach(t),l$.forEach(t),IN=l(E),gn=s(E,"DIV",{class:!0});var p$=n(gn);m(Nd.$$.fragment,p$),TN=l(p$),Op=s(p$,"P",{});var Uj=n(Op);jp=s(Uj,"A",{href:!0});var PU=n(jp);NN=o(PU,"datasets.DatasetInfo"),PU.forEach(t),FN=o(Uj," object containing all the metadata in the dataset."),Uj.forEach(t),p$.forEach(t),PN=l(E),_n=s(E,"DIV",{class:!0});var m$=n(_n);m(Fd.$$.fragment,m$),AN=l(m$),Cp=s(m$,"P",{});var Rj=n(Cp);qp=s(Rj,"A",{href:!0});var AU=n(qp);LN=o(AU,"datasets.NamedSplit"),AU.forEach(t),SN=o(Rj," object corresponding to a named dataset split."),Rj.forEach(t),m$.forEach(t),ON=l(E),zp=s(E,"DIV",{class:!0});var LU=n(zp);m(Pd.$$.fragment,LU),LU.forEach(t),jN=l(E),Vp=s(E,"DIV",{class:!0});var SU=n(Vp);m(Ad.$$.fragment,SU),SU.forEach(t),CN=l(E),Mp=s(E,"DIV",{class:!0});var OU=n(Mp);m(Ld.$$.fragment,OU),OU.forEach(t),qN=l(E),Up=s(E,"DIV",{class:!0});var jU=n(Up);m(Sd.$$.fragment,jU),jU.forEach(t),zN=l(E),Rp=s(E,"DIV",{class:!0});var CU=n(Rp);m(Od.$$.fragment,CU),CU.forEach(t),VN=l(E),Bp=s(E,"DIV",{class:!0});var qU=n(Bp);m(jd.$$.fragment,qU),qU.forEach(t),MN=l(E),Hp=s(E,"DIV",{class:!0});var zU=n(Hp);m(Cd.$$.fragment,zU),zU.forEach(t),UN=l(E),Gp=s(E,"DIV",{class:!0});var VU=n(Gp);m(qd.$$.fragment,VU),VU.forEach(t),RN=l(E),Kp=s(E,"DIV",{class:!0});var MU=n(Kp);m(zd.$$.fragment,MU),MU.forEach(t),BN=l(E),Wp=s(E,"DIV",{class:!0});var UU=n(Wp);m(Vd.$$.fragment,UU),UU.forEach(t),HN=l(E),Yp=s(E,"DIV",{class:!0});var RU=n(Yp);m(Md.$$.fragment,RU),RU.forEach(t),GN=l(E),Jp=s(E,"DIV",{class:!0});var BU=n(Jp);m(Ud.$$.fragment,BU),BU.forEach(t),KN=l(E),Xp=s(E,"DIV",{class:!0});var HU=n(Xp);m(Rd.$$.fragment,HU),HU.forEach(t),E.forEach(t),Mb=l(i),Pa=s(i,"H2",{class:!0});var f$=n(Pa);vn=s(f$,"A",{id:!0,class:!0,href:!0});var GU=n(vn);G_=s(GU,"SPAN",{});var KU=n(G_);m(Bd.$$.fragment,KU),KU.forEach(t),GU.forEach(t),WN=l(f$),K_=s(f$,"SPAN",{});var WU=n(K_);YN=o(WU,"IterableDatasetDict"),WU.forEach(t),f$.forEach(t),Ub=l(i),bn=s(i,"P",{});var h$=n(bn);JN=o(h$,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),W_=s(h$,"CODE",{});var YU=n(W_);XN=o(YU,"datasets.IterableDataset"),YU.forEach(t),ZN=o(h$," objects as values."),h$.forEach(t),Rb=l(i),Hd=s(i,"DIV",{class:!0});var JU=n(Hd);m(Gd.$$.fragment,JU),JU.forEach(t),Bb=l(i),Aa=s(i,"H2",{class:!0});var u$=n(Aa);yn=s(u$,"A",{id:!0,class:!0,href:!0});var XU=n(yn);Y_=s(XU,"SPAN",{});var ZU=n(Y_);m(Kd.$$.fragment,ZU),ZU.forEach(t),XU.forEach(t),QN=l(u$),J_=s(u$,"SPAN",{});var QU=n(J_);eF=o(QU,"Features"),QU.forEach(t),u$.forEach(t),Hb=l(i),T=s(i,"DIV",{class:!0});var N=n(T);m(Wd.$$.fragment,N),tF=l(N),X_=s(N,"P",{});var eR=n(X_);aF=o(eR,"A special dictionary that defines the internal structure of a dataset."),eR.forEach(t),sF=l(N),Yd=s(N,"P",{});var g$=n(Yd);nF=o(g$,"Instantiated with a dictionary of type "),Z_=s(g$,"CODE",{});var tR=n(Z_);rF=o(tR,"dict[str, FieldType]"),tR.forEach(t),oF=o(g$,`, where keys are the desired column names,
and values are the type of that column.`),g$.forEach(t),iF=l(N),Zp=s(N,"P",{});var Bj=n(Zp);Q_=s(Bj,"CODE",{});var aR=n(Q_);dF=o(aR,"FieldType"),aR.forEach(t),lF=o(Bj," can be one of the following:"),Bj.forEach(t),cF=l(N),q=s(N,"UL",{});var Y=n(q);ev=s(Y,"LI",{});var sR=n(ev);Tt=s(sR,"P",{});var wc=n(Tt);pF=o(wc,"a "),Qp=s(wc,"A",{href:!0});var nR=n(Qp);mF=o(nR,"datasets.Value"),nR.forEach(t),fF=o(wc," feature specifies a single typed value, e.g. "),tv=s(wc,"CODE",{});var rR=n(tv);hF=o(rR,"int64"),rR.forEach(t),uF=o(wc," or "),av=s(wc,"CODE",{});var oR=n(av);gF=o(oR,"string"),oR.forEach(t),wc.forEach(t),sR.forEach(t),_F=l(Y),sv=s(Y,"LI",{});var iR=n(sv);Jd=s(iR,"P",{});var _$=n(Jd);vF=o(_$,"a "),em=s(_$,"A",{href:!0});var dR=n(em);bF=o(dR,"datasets.ClassLabel"),dR.forEach(t),yF=o(_$,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),_$.forEach(t),iR.forEach(t),$F=l(Y),nv=s(Y,"LI",{});var lR=n(nv);Xd=s(lR,"P",{});var v$=n(Xd);wF=o(v$,"a python "),rv=s(v$,"CODE",{});var cR=n(rv);DF=o(cR,"dict"),cR.forEach(t),xF=o(v$,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),v$.forEach(t),lR.forEach(t),EF=l(Y),Zd=s(Y,"LI",{});var b$=n(Zd);ue=s(b$,"P",{});var Gt=n(ue);kF=o(Gt,"a python "),ov=s(Gt,"CODE",{});var pR=n(ov);IF=o(pR,"list"),pR.forEach(t),TF=o(Gt," or a "),tm=s(Gt,"A",{href:!0});var mR=n(tm);NF=o(mR,"datasets.Sequence"),mR.forEach(t),FF=o(Gt,` specifies that the field contains a list of objects. The python
`),iv=s(Gt,"CODE",{});var fR=n(iv);PF=o(fR,"list"),fR.forEach(t),AF=o(Gt," or "),am=s(Gt,"A",{href:!0});var hR=n(am);LF=o(hR,"datasets.Sequence"),hR.forEach(t),SF=o(Gt,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),Gt.forEach(t),OF=l(b$),m($n.$$.fragment,b$),b$.forEach(t),jF=l(Y),dv=s(Y,"LI",{});var uR=n(dv);ge=s(uR,"P",{});var Kt=n(ge);CF=o(Kt,"a "),sm=s(Kt,"A",{href:!0});var gR=n(sm);qF=o(gR,"Array2D"),gR.forEach(t),zF=o(Kt,", "),nm=s(Kt,"A",{href:!0});var _R=n(nm);VF=o(_R,"Array3D"),_R.forEach(t),MF=o(Kt,", "),rm=s(Kt,"A",{href:!0});var vR=n(rm);UF=o(vR,"Array4D"),vR.forEach(t),RF=o(Kt," or "),om=s(Kt,"A",{href:!0});var bR=n(om);BF=o(bR,"Array5D"),bR.forEach(t),HF=o(Kt," feature for multidimensional arrays"),Kt.forEach(t),uR.forEach(t),GF=l(Y),lv=s(Y,"LI",{});var yR=n(lv);Qd=s(yR,"P",{});var y$=n(Qd);KF=o(y$,"an "),im=s(y$,"A",{href:!0});var $R=n(im);WF=o($R,"Audio"),$R.forEach(t),YF=o(y$,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),y$.forEach(t),yR.forEach(t),JF=l(Y),cv=s(Y,"LI",{});var wR=n(cv);et=s(wR,"P",{});var vr=n(et);XF=o(vr,"an "),dm=s(vr,"A",{href:!0});var DR=n(dm);ZF=o(DR,"Image"),DR.forEach(t),QF=o(vr," feature to store the absolute path to an image file, an "),pv=s(vr,"CODE",{});var xR=n(pv);eP=o(xR,"np.ndarray"),xR.forEach(t),tP=o(vr," object, a "),mv=s(vr,"CODE",{});var ER=n(mv);aP=o(ER,"PIL.Image.Image"),ER.forEach(t),sP=o(vr,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),vr.forEach(t),wR.forEach(t),nP=l(Y),fv=s(Y,"LI",{});var kR=n(fv);wn=s(kR,"P",{});var Db=n(wn);lm=s(Db,"A",{href:!0});var IR=n(lm);rP=o(IR,"datasets.Translation"),IR.forEach(t),oP=o(Db," and "),cm=s(Db,"A",{href:!0});var TR=n(cm);iP=o(TR,"datasets.TranslationVariableLanguages"),TR.forEach(t),dP=o(Db,", the two features specific to Machine Translation"),Db.forEach(t),kR.forEach(t),Y.forEach(t),lP=l(N),Dn=s(N,"DIV",{class:!0});var $$=n(Dn);m(el.$$.fragment,$$),cP=l($$),hv=s($$,"P",{});var NR=n(hv);pP=o(NR,"Make a deep copy of Features."),NR.forEach(t),$$.forEach(t),mP=l(N),xn=s(N,"DIV",{class:!0});var w$=n(xn);m(tl.$$.fragment,w$),fP=l(w$),uv=s(w$,"P",{});var FR=n(uv);hP=o(FR,"Decode batch with custom feature decoding."),FR.forEach(t),w$.forEach(t),uP=l(N),En=s(N,"DIV",{class:!0});var D$=n(En);m(al.$$.fragment,D$),gP=l(D$),gv=s(D$,"P",{});var PR=n(gv);_P=o(PR,"Decode column with custom feature decoding."),PR.forEach(t),D$.forEach(t),vP=l(N),kn=s(N,"DIV",{class:!0});var x$=n(kn);m(sl.$$.fragment,x$),bP=l(x$),_v=s(x$,"P",{});var AR=n(_v);yP=o(AR,"Decode example with custom feature decoding."),AR.forEach(t),x$.forEach(t),$P=l(N),In=s(N,"DIV",{class:!0});var E$=n(In);m(nl.$$.fragment,E$),wP=l(E$),vv=s(E$,"P",{});var LR=n(vv);DP=o(LR,"Encode batch into a format for Arrow."),LR.forEach(t),E$.forEach(t),xP=l(N),Tn=s(N,"DIV",{class:!0});var k$=n(Tn);m(rl.$$.fragment,k$),EP=l(k$),bv=s(k$,"P",{});var SR=n(bv);kP=o(SR,"Encode example into a format for Arrow."),SR.forEach(t),k$.forEach(t),IP=l(N),Nt=s(N,"DIV",{class:!0});var hf=n(Nt);m(ol.$$.fragment,hf),TP=l(hf),yv=s(hf,"P",{});var OR=n(yv);NP=o(OR,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),OR.forEach(t),FP=l(hf),$v=s(hf,"P",{});var jR=n($v);PP=o(jR,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),jR.forEach(t),hf.forEach(t),AP=l(N),Nn=s(N,"DIV",{class:!0});var I$=n(Nn);m(il.$$.fragment,I$),LP=l(I$),wv=s(I$,"P",{});var CR=n(wv);SP=o(CR,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),CR.forEach(t),I$.forEach(t),OP=l(N),K=s(N,"DIV",{class:!0});var Ce=n(K);m(dl.$$.fragment,Ce),jP=l(Ce),Dv=s(Ce,"P",{});var qR=n(Dv);CP=o(qR,"Construct Features from dict."),qR.forEach(t),qP=l(Ce),xv=s(Ce,"P",{});var zR=n(xv);zP=o(zR,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),zR.forEach(t),VP=l(Ce),tt=s(Ce,"P",{});var br=n(tt);MP=o(br,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),pm=s(br,"A",{href:!0});var VR=n(pm);UP=o(VR,"DatasetInfo"),VR.forEach(t),RP=o(br,` that was dumped to a JSON object. This acts as an analogue to
`),mm=s(br,"A",{href:!0});var MR=n(mm);BP=o(MR,"Features.from_arrow_schema()"),MR.forEach(t),HP=o(br,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),fm=s(br,"A",{href:!0});var UR=n(fm);GP=o(UR,"Value"),UR.forEach(t),KP=o(br," automatically performs."),br.forEach(t),WP=l(Ce),Ev=s(Ce,"P",{});var RR=n(Ev);YP=o(RR,"Example:"),RR.forEach(t),JP=l(Ce),m(ll.$$.fragment,Ce),Ce.forEach(t),XP=l(N),re=s(N,"DIV",{class:!0});var Wt=n(re);m(cl.$$.fragment,Wt),ZP=l(Wt),kv=s(Wt,"P",{});var BR=n(kv);QP=o(BR,"Reorder Features fields to match the field order of other Features."),BR.forEach(t),eA=l(Wt),Iv=s(Wt,"P",{});var HR=n(Iv);tA=o(HR,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),HR.forEach(t),aA=l(Wt),Tv=s(Wt,"P",{});var GR=n(Tv);sA=o(GR,"Example:"),GR.forEach(t),nA=l(Wt),m(pl.$$.fragment,Wt),Wt.forEach(t),N.forEach(t),Gb=l(i),La=s(i,"DIV",{class:!0});var T$=n(La);m(ml.$$.fragment,T$),rA=l(T$),Nv=s(T$,"P",{});var KR=n(Nv);oA=o(KR,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),KR.forEach(t),T$.forEach(t),Kb=l(i),V=s(i,"DIV",{class:!0});var qe=n(V);m(fl.$$.fragment,qe),iA=l(qe),Fv=s(qe,"P",{});var WR=n(Fv);dA=o(WR,"Feature type for integer class labels."),WR.forEach(t),lA=l(qe),hl=s(qe,"P",{});var N$=n(hl);cA=o(N$,"There are 3 ways to define a "),Pv=s(N$,"EM",{});var YR=n(Pv);pA=o(YR,"ClassLabel"),YR.forEach(t),mA=o(N$,", which correspond to the 3 arguments:"),N$.forEach(t),fA=l(qe),Sa=s(qe,"UL",{});var uf=n(Sa);hm=s(uf,"LI",{});var Hj=n(hm);Av=s(Hj,"EM",{});var JR=n(Av);hA=o(JR,"num_classes"),JR.forEach(t),uA=o(Hj,": Create 0 to (num_classes-1) labels."),Hj.forEach(t),gA=l(uf),um=s(uf,"LI",{});var Gj=n(um);Lv=s(Gj,"EM",{});var XR=n(Lv);_A=o(XR,"names"),XR.forEach(t),vA=o(Gj,": List of label strings."),Gj.forEach(t),bA=l(uf),gm=s(uf,"LI",{});var Kj=n(gm);Sv=s(Kj,"EM",{});var ZR=n(Sv);yA=o(ZR,"names_file"),ZR.forEach(t),$A=o(Kj,": File containing the list of labels."),Kj.forEach(t),uf.forEach(t),wA=l(qe),Fn=s(qe,"DIV",{class:!0});var F$=n(Fn);m(ul.$$.fragment,F$),DA=l(F$),Ov=s(F$,"P",{});var QR=n(Ov);xA=o(QR,"Conversion integer => class name string."),QR.forEach(t),F$.forEach(t),EA=l(qe),Pn=s(qe,"DIV",{class:!0});var P$=n(Pn);m(gl.$$.fragment,P$),kA=l(P$),jv=s(P$,"P",{});var eB=n(jv);IA=o(eB,"Conversion class name string => integer."),eB.forEach(t),P$.forEach(t),qe.forEach(t),Wb=l(i),at=s(i,"DIV",{class:!0});var gf=n(at);m(_l.$$.fragment,gf),TA=l(gf),Cv=s(gf,"P",{});var tB=n(Cv);NA=o(tB,"The Value dtypes are as follows:"),tB.forEach(t),FA=l(gf),qv=s(gf,"P",{});var aB=n(qv);PA=o(aB,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),aB.forEach(t),gf.forEach(t),Yb=l(i),M=s(i,"DIV",{class:!0});var ze=n(M);m(vl.$$.fragment,ze),AA=l(ze),_m=s(ze,"P",{});var Wj=n(_m);zv=s(Wj,"EM",{});var sB=n(zv);LA=o(sB,"FeatureConnector"),sB.forEach(t),SA=o(Wj,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),Wj.forEach(t),OA=l(ze),Vv=s(ze,"P",{});var nB=n(Vv);jA=o(nB,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),nB.forEach(t),CA=l(ze),bl=s(ze,"P",{});var A$=n(bl);qA=o(A$,"Output: A dictionary mapping string language codes to translations as "),Mv=s(A$,"EM",{});var rB=n(Mv);zA=o(rB,"Text"),rB.forEach(t),VA=o(A$,`
features.`),A$.forEach(t),MA=l(ze),Uv=s(ze,"P",{});var oB=n(Uv);UA=o(oB,"Example:"),oB.forEach(t),RA=l(ze),m(yl.$$.fragment,ze),ze.forEach(t),Jb=l(i),U=s(i,"DIV",{class:!0});var Ve=n(U);m($l.$$.fragment,Ve),BA=l(Ve),vm=s(Ve,"P",{});var Yj=n(vm);Rv=s(Yj,"EM",{});var iB=n(Rv);HA=o(iB,"FeatureConnector"),iB.forEach(t),GA=o(Yj,` for translations with variable languages per example.
Here for compatiblity with tfds.`),Yj.forEach(t),KA=l(Ve),Bv=s(Ve,"P",{});var dB=n(Bv);WA=o(dB,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),dB.forEach(t),YA=l(Ve),Hv=s(Ve,"P",{});var lB=n(Hv);JA=o(lB,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),lB.forEach(t),XA=l(Ve),Gv=s(Ve,"P",{});var cB=n(Gv);ZA=o(cB,"Example:"),cB.forEach(t),QA=l(Ve),m(wl.$$.fragment,Ve),Ve.forEach(t),Xb=l(i),Dl=s(i,"DIV",{class:!0});var pB=n(Dl);m(xl.$$.fragment,pB),pB.forEach(t),Zb=l(i),El=s(i,"DIV",{class:!0});var mB=n(El);m(kl.$$.fragment,mB),mB.forEach(t),Qb=l(i),Il=s(i,"DIV",{class:!0});var fB=n(Il);m(Tl.$$.fragment,fB),fB.forEach(t),ey=l(i),Nl=s(i,"DIV",{class:!0});var hB=n(Nl);m(Fl.$$.fragment,hB),hB.forEach(t),ty=l(i),F=s(i,"DIV",{class:!0});var L=n(F);m(Pl.$$.fragment,L),eL=l(L),Kv=s(L,"P",{});var uB=n(Kv);tL=o(uB,"Audio Feature to extract audio data from an audio file."),uB.forEach(t),aL=l(L),Wv=s(L,"P",{});var gB=n(Wv);sL=o(gB,"Input: The Audio feature accepts as input:"),gB.forEach(t),nL=l(L),Al=s(L,"UL",{});var L$=n(Al);Yv=s(L$,"LI",{});var _B=n(Yv);Ll=s(_B,"P",{});var S$=n(Ll);rL=o(S$,"A "),Jv=s(S$,"CODE",{});var vB=n(Jv);oL=o(vB,"str"),vB.forEach(t),iL=o(S$,": Absolute path to the audio file (i.e. random access is allowed)."),S$.forEach(t),_B.forEach(t),dL=l(L$),Sl=s(L$,"LI",{});var O$=n(Sl);Ol=s(O$,"P",{});var j$=n(Ol);lL=o(j$,"A "),Xv=s(j$,"CODE",{});var bB=n(Xv);cL=o(bB,"dict"),bB.forEach(t),pL=o(j$," with the keys:"),j$.forEach(t),mL=l(O$),jl=s(O$,"UL",{});var C$=n(jl);Zv=s(C$,"LI",{});var yB=n(Zv);fL=o(yB,"path: String with relative path of the audio file to the archive file."),yB.forEach(t),hL=l(C$),Qv=s(C$,"LI",{});var $B=n(Qv);uL=o($B,"bytes: Bytes content of the audio file."),$B.forEach(t),C$.forEach(t),O$.forEach(t),L$.forEach(t),gL=l(L),e1=s(L,"P",{});var wB=n(e1);_L=o(wB,"This is useful for archived files with sequential access."),wB.forEach(t),vL=l(L),t1=s(L,"UL",{});var DB=n(t1);Cl=s(DB,"LI",{});var q$=n(Cl);ql=s(q$,"P",{});var z$=n(ql);bL=o(z$,"A "),a1=s(z$,"CODE",{});var xB=n(a1);yL=o(xB,"dict"),xB.forEach(t),$L=o(z$," with the keys:"),z$.forEach(t),wL=l(q$),Oa=s(q$,"UL",{});var _f=n(Oa);s1=s(_f,"LI",{});var EB=n(s1);DL=o(EB,"path: String with relative path of the audio file to the archive file."),EB.forEach(t),xL=l(_f),n1=s(_f,"LI",{});var kB=n(n1);EL=o(kB,"array: Array containing the audio sample"),kB.forEach(t),kL=l(_f),r1=s(_f,"LI",{});var IB=n(r1);IL=o(IB,"sampling_rate: Integer corresponding to the samping rate of the audio sample."),IB.forEach(t),_f.forEach(t),q$.forEach(t),DB.forEach(t),TL=l(L),o1=s(L,"P",{});var TB=n(o1);NL=o(TB,"This is useful for archived files with sequential access."),TB.forEach(t),FL=l(L),Ft=s(L,"DIV",{class:!0});var vf=n(Ft);m(zl.$$.fragment,vf),PL=l(vf),i1=s(vf,"P",{});var NB=n(i1);AL=o(NB,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),NB.forEach(t),LL=l(vf),st=s(vf,"UL",{});var yr=n(st);d1=s(yr,"LI",{});var FB=n(d1);SL=o(FB,"pa.string() - it must contain the \u201Cpath\u201D data"),FB.forEach(t),OL=l(yr),l1=s(yr,"LI",{});var PB=n(l1);jL=o(PB,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),PB.forEach(t),CL=l(yr),c1=s(yr,"LI",{});var AB=n(c1);qL=o(AB,"pa.struct({\u201Cpath\u201D: pa.string()})"),AB.forEach(t),zL=l(yr),p1=s(yr,"LI",{});var LB=n(p1);VL=o(LB,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),LB.forEach(t),yr.forEach(t),vf.forEach(t),ML=l(L),An=s(L,"DIV",{class:!0});var V$=n(An);m(Vl.$$.fragment,V$),UL=l(V$),m1=s(V$,"P",{});var SB=n(m1);RL=o(SB,"Decode example audio file into audio data."),SB.forEach(t),V$.forEach(t),BL=l(L),Ln=s(L,"DIV",{class:!0});var M$=n(Ln);m(Ml.$$.fragment,M$),HL=l(M$),f1=s(M$,"P",{});var OB=n(f1);GL=o(OB,"Embed audio files into the Arrow array."),OB.forEach(t),M$.forEach(t),KL=l(L),Sn=s(L,"DIV",{class:!0});var U$=n(Sn);m(Ul.$$.fragment,U$),WL=l(U$),h1=s(U$,"P",{});var jB=n(h1);YL=o(jB,"Encode example into a format for Arrow."),jB.forEach(t),U$.forEach(t),L.forEach(t),ay=l(i),P=s(i,"DIV",{class:!0});var S=n(P);m(Rl.$$.fragment,S),JL=l(S),u1=s(S,"P",{});var CB=n(u1);XL=o(CB,"Image feature to read image data from an image file."),CB.forEach(t),ZL=l(S),g1=s(S,"P",{});var qB=n(g1);QL=o(qB,"Input: The Image feature accepts as input:"),qB.forEach(t),eS=l(S),Bl=s(S,"UL",{});var R$=n(Bl);_1=s(R$,"LI",{});var zB=n(_1);Hl=s(zB,"P",{});var B$=n(Hl);tS=o(B$,"A "),v1=s(B$,"CODE",{});var VB=n(v1);aS=o(VB,"str"),VB.forEach(t),sS=o(B$,": Absolute path to the image file (i.e. random access is allowed)."),B$.forEach(t),zB.forEach(t),nS=l(R$),Gl=s(R$,"LI",{});var H$=n(Gl);Kl=s(H$,"P",{});var G$=n(Kl);rS=o(G$,"A "),b1=s(G$,"CODE",{});var MB=n(b1);oS=o(MB,"dict"),MB.forEach(t),iS=o(G$," with the keys:"),G$.forEach(t),dS=l(H$),Wl=s(H$,"UL",{});var K$=n(Wl);y1=s(K$,"LI",{});var UB=n(y1);lS=o(UB,"path: String with relative path of the image file to the archive file."),UB.forEach(t),cS=l(K$),$1=s(K$,"LI",{});var RB=n($1);pS=o(RB,"bytes: Bytes of the image file."),RB.forEach(t),K$.forEach(t),H$.forEach(t),R$.forEach(t),mS=l(S),w1=s(S,"P",{});var BB=n(w1);fS=o(BB,"This is useful for archived files with sequential access."),BB.forEach(t),hS=l(S),Yl=s(S,"UL",{});var W$=n(Yl);Jl=s(W$,"LI",{});var Y$=n(Jl);uS=o(Y$,"An "),D1=s(Y$,"CODE",{});var HB=n(D1);gS=o(HB,"np.ndarray"),HB.forEach(t),_S=o(Y$,": NumPy array representing an image."),Y$.forEach(t),vS=l(W$),Xl=s(W$,"LI",{});var J$=n(Xl);bS=o(J$,"A "),x1=s(J$,"CODE",{});var GB=n(x1);yS=o(GB,"PIL.Image.Image"),GB.forEach(t),$S=o(J$,": PIL image object."),J$.forEach(t),W$.forEach(t),wS=l(S),Pt=s(S,"DIV",{class:!0});var bf=n(Pt);m(Zl.$$.fragment,bf),DS=l(bf),E1=s(bf,"P",{});var KB=n(E1);xS=o(KB,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),KB.forEach(t),ES=l(bf),_e=s(bf,"UL",{});var Yt=n(_e);k1=s(Yt,"LI",{});var WB=n(k1);kS=o(WB,"pa.string() - it must contain the \u201Cpath\u201D data"),WB.forEach(t),IS=l(Yt),I1=s(Yt,"LI",{});var YB=n(I1);TS=o(YB,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),YB.forEach(t),NS=l(Yt),T1=s(Yt,"LI",{});var JB=n(T1);FS=o(JB,"pa.struct({\u201Cpath\u201D: pa.string()})"),JB.forEach(t),PS=l(Yt),N1=s(Yt,"LI",{});var XB=n(N1);AS=o(XB,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),XB.forEach(t),LS=l(Yt),F1=s(Yt,"LI",{});var ZB=n(F1);SS=o(ZB,"pa.list(*) - it must contain the image array data"),ZB.forEach(t),Yt.forEach(t),bf.forEach(t),OS=l(S),On=s(S,"DIV",{class:!0});var X$=n(On);m(Ql.$$.fragment,X$),jS=l(X$),P1=s(X$,"P",{});var QB=n(P1);CS=o(QB,"Decode example image file into image data."),QB.forEach(t),X$.forEach(t),qS=l(S),jn=s(S,"DIV",{class:!0});var Z$=n(jn);m(ec.$$.fragment,Z$),zS=l(Z$),A1=s(Z$,"P",{});var eH=n(A1);VS=o(eH,"Embed image files into the Arrow array."),eH.forEach(t),Z$.forEach(t),MS=l(S),Cn=s(S,"DIV",{class:!0});var Q$=n(Cn);m(tc.$$.fragment,Q$),US=l(Q$),L1=s(Q$,"P",{});var tH=n(L1);RS=o(tH,"Encode example into a format for Arrow."),tH.forEach(t),Q$.forEach(t),S.forEach(t),sy=l(i),ja=s(i,"H2",{class:!0});var ew=n(ja);qn=s(ew,"A",{id:!0,class:!0,href:!0});var aH=n(qn);S1=s(aH,"SPAN",{});var sH=n(S1);m(ac.$$.fragment,sH),sH.forEach(t),aH.forEach(t),BS=l(ew),O1=s(ew,"SPAN",{});var nH=n(O1);HS=o(nH,"MetricInfo"),nH.forEach(t),ew.forEach(t),ny=l(i),R=s(i,"DIV",{class:!0});var Me=n(R);m(sc.$$.fragment,Me),GS=l(Me),j1=s(Me,"P",{});var rH=n(j1);KS=o(rH,"Information about a metric."),rH.forEach(t),WS=l(Me),bm=s(Me,"P",{});var Jj=n(bm);C1=s(Jj,"CODE",{});var oH=n(C1);YS=o(oH,"MetricInfo"),oH.forEach(t),JS=o(Jj,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Jj.forEach(t),XS=l(Me),q1=s(Me,"P",{});var iH=n(q1);ZS=o(iH,"Note: Not all fields are known on construction and may be updated later."),iH.forEach(t),QS=l(Me),zn=s(Me,"DIV",{class:!0});var tw=n(zn);m(nc.$$.fragment,tw),eO=l(tw),rc=s(tw,"P",{});var aw=n(rc);tO=o(aw,"Create MetricInfo from the JSON file in "),z1=s(aw,"CODE",{});var dH=n(z1);aO=o(dH,"metric_info_dir"),dH.forEach(t),sO=o(aw,"."),aw.forEach(t),tw.forEach(t),nO=l(Me),Vn=s(Me,"DIV",{class:!0});var sw=n(Vn);m(oc.$$.fragment,sw),rO=l(sw),Ca=s(sw,"P",{});var yf=n(Ca);oO=o(yf,"Write "),V1=s(yf,"CODE",{});var lH=n(V1);iO=o(lH,"MetricInfo"),lH.forEach(t),dO=o(yf," as JSON to "),M1=s(yf,"CODE",{});var cH=n(M1);lO=o(cH,"metric_info_dir"),cH.forEach(t),cO=o(yf,`.
Also save the license separately in LICENCE.`),yf.forEach(t),sw.forEach(t),Me.forEach(t),ry=l(i),qa=s(i,"H2",{class:!0});var nw=n(qa);Mn=s(nw,"A",{id:!0,class:!0,href:!0});var pH=n(Mn);U1=s(pH,"SPAN",{});var mH=n(U1);m(ic.$$.fragment,mH),mH.forEach(t),pH.forEach(t),pO=l(nw),R1=s(nw,"SPAN",{});var fH=n(R1);mO=o(fH,"Metric"),fH.forEach(t),nw.forEach(t),oy=l(i),At=s(i,"P",{});var $f=n(At);fO=o($f,"The base class "),B1=s($f,"CODE",{});var hH=n(B1);hO=o(hH,"Metric"),hH.forEach(t),uO=o($f," implements a Metric backed by one or several "),ym=s($f,"A",{href:!0});var uH=n(ym);gO=o(uH,"datasets.Dataset"),uH.forEach(t),_O=o($f,"."),$f.forEach(t),iy=l(i),B=s(i,"DIV",{class:!0});var Ue=n(B);m(dc.$$.fragment,Ue),vO=l(Ue),H1=s(Ue,"P",{});var gH=n(H1);bO=o(gH,"A Metric is the base class and common API for all metrics."),gH.forEach(t),yO=l(Ue),Un=s(Ue,"DIV",{class:!0});var rw=n(Un);m(lc.$$.fragment,rw),$O=l(rw),G1=s(rw,"P",{});var _H=n(G1);wO=o(_H,"Add one prediction and reference for the metric\u2019s stack."),_H.forEach(t),rw.forEach(t),DO=l(Ue),Rn=s(Ue,"DIV",{class:!0});var ow=n(Rn);m(cc.$$.fragment,ow),xO=l(ow),K1=s(ow,"P",{});var vH=n(K1);EO=o(vH,"Add a batch of predictions and references for the metric\u2019s stack."),vH.forEach(t),ow.forEach(t),kO=l(Ue),Lt=s(Ue,"DIV",{class:!0});var wf=n(Lt);m(pc.$$.fragment,wf),IO=l(wf),W1=s(wf,"P",{});var bH=n(W1);TO=o(bH,"Compute the metrics."),bH.forEach(t),NO=l(wf),Y1=s(wf,"P",{});var yH=n(Y1);FO=o(yH,"Usage of positional arguments is not allowed to prevent mistakes."),yH.forEach(t),wf.forEach(t),PO=l(Ue),Bn=s(Ue,"DIV",{class:!0});var iw=n(Bn);m(mc.$$.fragment,iw),AO=l(iw),J1=s(iw,"P",{});var $H=n(J1);LO=o($H,"Downloads and prepares dataset for reading."),$H.forEach(t),iw.forEach(t),Ue.forEach(t),dy=l(i),za=s(i,"H2",{class:!0});var dw=n(za);Hn=s(dw,"A",{id:!0,class:!0,href:!0});var wH=n(Hn);X1=s(wH,"SPAN",{});var DH=n(X1);m(fc.$$.fragment,DH),DH.forEach(t),wH.forEach(t),SO=l(dw),Z1=s(dw,"SPAN",{});var xH=n(Z1);OO=o(xH,"Filesystems"),xH.forEach(t),dw.forEach(t),ly=l(i),nt=s(i,"DIV",{class:!0});var Df=n(nt);m(hc.$$.fragment,Df),jO=l(Df),Q1=s(Df,"P",{});var EH=n(Q1);CO=o(EH,"Access S3 as if it were a file system."),EH.forEach(t),qO=l(Df),k=s(Df,"P",{});var I=n(k);zO=o(I,"This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),eb=s(I,"CODE",{});var kH=n(eb);VO=o(kH,"key="),kH.forEach(t),MO=o(I,", "),tb=s(I,"CODE",{});var IH=n(tb);UO=o(IH,"secret="),IH.forEach(t),RO=o(I,") or depend on boto\u2019s credential methods. See botocore documentation for more information. If no credentials are available, use "),ab=s(I,"CODE",{});var TH=n(ab);BO=o(TH,"anon=True"),TH.forEach(t),HO=o(I,". The following parameters are passed on to fsspec: skip_instance_cache: to control reuse of instances use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings . "),sb=s(I,"CODE",{});var NH=n(sb);GO=o(NH,"datasets.filesystems.S3FileSystem"),NH.forEach(t),KO=o(I," is a subclass of s3fs.S3FileSystem]("),uc=s(I,"A",{href:!0,rel:!0});var FH=n(uc);WO=o(FH,"https://s3fs.readthedocs.io/en/latest/api.html"),FH.forEach(t),YO=o(I,"), which is a known implementation of "),nb=s(I,"CODE",{});var PH=n(nb);JO=o(PH,"fsspec"),PH.forEach(t),XO=o(I,". Filesystem Spec "),gc=s(I,"A",{href:!0,rel:!0});var AH=n(gc);ZO=o(AH,"FSSPEC"),AH.forEach(t),QO=o(I," is a project to unify various projects and classes to work with remote filesystems and file-system-like abstractions using a standard pythonic interface. Examples: Listing files from public s3 bucket. "),rb=s(I,"CODE",{});var LH=n(rb);ej=o(LH,"py >>> import datasets >>> s3 = datasets.filesystems.S3FileSystem(anon=True) # doctest: +SKIP >>> s3.ls('public-datasets/imdb/train') # doctest: +SKIP ['dataset_info.json.json','dataset.arrow','state.json']"),LH.forEach(t),tj=o(I," Listing files from private s3 bucket using "),ob=s(I,"CODE",{});var SH=n(ob);aj=o(SH,"aws_access_key_id"),SH.forEach(t),sj=o(I," and "),ib=s(I,"CODE",{});var OH=n(ib);nj=o(OH,"aws_secret_access_key"),OH.forEach(t),rj=o(I,". "),db=s(I,"CODE",{});var jH=n(db);oj=o(jH,"py >>> import datasets >>> s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key) # doctest: +SKIP >>> s3.ls('my-private-datasets/imdb/train') # doctest: +SKIP ['dataset_info.json.json','dataset.arrow','state.json']"),jH.forEach(t),ij=o(I," Using "),lb=s(I,"CODE",{});var CH=n(lb);dj=o(CH,"S3Filesystem"),CH.forEach(t),lj=o(I," with "),cb=s(I,"CODE",{});var qH=n(cb);cj=o(qH,"botocore.session.Session"),qH.forEach(t),pj=o(I," and custom "),pb=s(I,"CODE",{});var zH=n(pb);mj=o(zH,"aws_profile"),zH.forEach(t),fj=o(I,". "),mb=s(I,"CODE",{});var VH=n(mb);hj=o(VH,"py >>> import botocore >>> from datasets.filesystems import S3Filesystem >>> s3_session = botocore.session.Session(profile_name='my_profile_name') >>> >>> s3 = S3FileSystem(session=s3_session) # doctest: +SKIP"),VH.forEach(t),uj=o(I," Loading dataset from s3 using "),fb=s(I,"CODE",{});var MH=n(fb);gj=o(MH,"S3Filesystem"),MH.forEach(t),_j=o(I," and "),hb=s(I,"CODE",{});var UH=n(hb);vj=o(UH,"load_from_disk()"),UH.forEach(t),bj=o(I,". "),ub=s(I,"CODE",{});var RH=n(ub);yj=o(RH,"py >>> from datasets import load_from_disk >>> from datasets.filesystems import S3Filesystem >>> >>> s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key) # doctest: +SKIP >>> >>> dataset = load_from_disk('s3://my-private-datasets/imdb/train',fs=s3) # doctest: +SKIP >>> >>> print(len(dataset)) 25000"),RH.forEach(t),$j=o(I," Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>. "),gb=s(I,"CODE",{});var BH=n(gb);wj=o(BH,`py >>> from datasets import load_dataset >>> from datasets.filesystems import S3Filesystem >>> >>> dataset = load_dataset("imdb") >>> >>> s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key) # doctest: +SKIP >>> >>> dataset.save_to_disk('s3://my-private-datasets/imdb/train',fs=s3) # doctest: +SKIP`),BH.forEach(t),I.forEach(t),Df.forEach(t),cy=l(i),Va=s(i,"DIV",{class:!0});var lw=n(Va);m(_c.$$.fragment,lw),Dj=l(lw),Ma=s(lw,"P",{});var xf=n(Ma);xj=o(xf,"preprocesses "),_b=s(xf,"EM",{});var HH=n(_b);Ej=o(HH,"dataset_path"),HH.forEach(t),kj=o(xf," and removes remote filesystem (e.g. removing "),vb=s(xf,"CODE",{});var GH=n(vb);Ij=o(GH,"s3://"),GH.forEach(t),Tj=o(xf,")"),xf.forEach(t),lw.forEach(t),py=l(i),Ua=s(i,"DIV",{class:!0});var cw=n(Ua);m(vc.$$.fragment,cw),Nj=l(cw),bb=s(cw,"P",{});var KH=n(bb);Fj=o(KH,"Validates if filesystem has remote protocol."),KH.forEach(t),cw.forEach(t),my=l(i),Ra=s(i,"H2",{class:!0});var pw=n(Ra);Gn=s(pw,"A",{id:!0,class:!0,href:!0});var WH=n(Gn);yb=s(WH,"SPAN",{});var YH=n(yb);m(bc.$$.fragment,YH),YH.forEach(t),WH.forEach(t),Pj=l(pw),$b=s(pw,"SPAN",{});var JH=n($b);Aj=o(JH,"Fingerprint"),JH.forEach(t),pw.forEach(t),fy=l(i),Ba=s(i,"DIV",{class:!0});var mw=n(Ba);m(yc.$$.fragment,mw),Lj=l(mw),wb=s(mw,"P",{});var XH=n(wb);Sj=o(XH,"Hasher that accepts python objects as inputs."),XH.forEach(t),mw.forEach(t),this.h()},h(){c(A,"name","hf:doc:metadata"),c(A,"content",JSON.stringify(rG)),c(J,"id","main-classes"),c(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J,"href","#main-classes"),c(O,"class","relative group"),c(ee,"id","datasets.DatasetInfo"),c(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ee,"href","#datasets.DatasetInfo"),c(de,"class","relative group"),c(ve,"class","docstring"),c(lt,"class","docstring"),c(z,"class","docstring"),c(Wa,"id","datasets.Dataset"),c(Wa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wa,"href","#datasets.Dataset"),c(Qt,"class","relative group"),c(Ec,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"),c(ct,"class","docstring"),c(pt,"class","docstring"),c(Ja,"class","docstring"),c(Xa,"class","docstring"),c(kc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"),c(be,"class","docstring"),c(Ic,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"),c(Za,"class","docstring"),c(Qa,"class","docstring"),c(es,"class","docstring"),c(ts,"class","docstring"),c(ss,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.__len__"),c(as,"class","docstring"),c(ns,"class","docstring"),c(rs,"class","docstring"),c(mt,"class","docstring"),c(os,"class","docstring"),c(is,"class","docstring"),c(ds,"class","docstring"),c(Tc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.map"),c(ft,"class","docstring"),c(ls,"class","docstring"),c(cs,"class","docstring"),c(ps,"class","docstring"),c(Nc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.set_format"),c(ht,"class","docstring"),c(ms,"class","docstring"),c(Fc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.set_transform"),c(ye,"class","docstring"),c(Pc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.set_format"),c(Ac,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.reset_format"),c(fs,"class","docstring"),c(ut,"class","docstring"),c(Sc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.with_transform"),c(Oc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.set_format"),c(we,"class","docstring"),c(jc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.set_format"),c(Cc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.reset_format"),c(qc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.set_transform"),c(De,"class","docstring"),c(hs,"class","docstring"),c(gt,"class","docstring"),c(us,"class","docstring"),c(gs,"class","docstring"),c(_s,"class","docstring"),c(_t,"class","docstring"),c(vt,"class","docstring"),c(bt,"class","docstring"),c(te,"class","docstring"),c(vs,"class","docstring"),c(xe,"class","docstring"),c(zc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(bs,"class","docstring"),c(Vc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(ys,"class","docstring"),c($s,"class","docstring"),c(ws,"class","docstring"),c(Ds,"class","docstring"),c(xs,"class","docstring"),c(Es,"class","docstring"),c(ks,"class","docstring"),c(Lo,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),c(Lo,"rel","nofollow"),c(ae,"class","docstring"),c(jo,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),c(jo,"rel","nofollow"),c(yt,"class","docstring"),c(Is,"class","docstring"),c($t,"class","docstring"),c(G,"class","docstring"),c(Ee,"class","docstring"),c(Ts,"class","docstring"),c(Ns,"class","docstring"),c(Fs,"class","docstring"),c(Ps,"class","docstring"),c(As,"class","docstring"),c(Ls,"class","docstring"),c(Ss,"class","docstring"),c(Bc,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetInfo"),c(Os,"class","docstring"),c(Gc,"href","/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.NamedSplit"),c(js,"class","docstring"),c(Kc,"class","docstring"),c(Wc,"class","docstring"),c(Yc,"class","docstring"),c(Jc,"class","docstring"),c(Xc,"class","docstring"),c(Zc,"class","docstring"),c(Qc,"class","docstring"),c(ep,"class","docstring"),c(tp,"class","docstring"),c(ap,"class","docstring"),c(sp,"class","docstring"),c(np,"class","docstring"),c(rp,"class","docstring"),c(Cs,"class","docstring"),c(qs,"class","docstring"),c(zs,"class","docstring"),c(Vs,"class","docstring"),c(op,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features"),c(ip,"href","/docs/datasets/package_reference/task_templates"),c(wt,"class","docstring"),c(ke,"class","docstring"),c(v,"class","docstring"),c(dp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"),c(lp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"),c(pa,"class","docstring"),c(cp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"),c(pp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.IterableDataset"),c(C,"class","docstring"),c(mp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),c(fp,"href","/docs/datasets/pr_3799/en/package_reference/loading_methods#datasets.load_dataset"),c(hp,"href","/docs/datasets/pr_3799/en/package_reference/loading_methods#datasets.load_dataset"),c(X,"class","docstring"),c(up,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),c(gp,"href","/docs/datasets/pr_3799/en/package_reference/loading_methods#datasets.load_dataset"),c(_p,"href","/docs/datasets/pr_3799/en/package_reference/loading_methods#datasets.load_dataset"),c(Z,"class","docstring"),c(ha,"class","docstring"),c(ua,"class","docstring"),c(Ms,"id","datasets.DatasetDict"),c(Ms,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ms,"href","#datasets.DatasetDict"),c(ga,"class","relative group"),c(Rs,"class","docstring"),c(Bs,"class","docstring"),c(Hs,"class","docstring"),c(Ks,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.__len__"),c(Gs,"class","docstring"),c(Ws,"class","docstring"),c(Ys,"class","docstring"),c(Dt,"class","docstring"),c(Js,"class","docstring"),c(Xs,"class","docstring"),c(Zs,"class","docstring"),c(xt,"class","docstring"),c(Ie,"class","docstring"),c(Te,"class","docstring"),c(Et,"class","docstring"),c(Qs,"class","docstring"),c(bp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.with_transform"),c(yp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetDict.set_format"),c(Ne,"class","docstring"),c($p,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.set_format"),c(wp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.reset_format"),c(Fe,"class","docstring"),c(en,"class","docstring"),c(Dp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.map"),c(kt,"class","docstring"),c(tn,"class","docstring"),c(xp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.map"),c(Pe,"class","docstring"),c(Ep,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset.map"),c(Ae,"class","docstring"),c(an,"class","docstring"),c(se,"class","docstring"),c(kp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(sn,"class","docstring"),c(Ip,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(nn,"class","docstring"),c(rn,"class","docstring"),c(on,"class","docstring"),c(dn,"class","docstring"),c(ln,"class","docstring"),c(Tp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features"),c(Np,"href","/docs/datasets/package_reference/task_templates"),c(It,"class","docstring"),c(w,"class","docstring"),c(Fp,"id","package_reference_features"),c(cn,"id","datasets.IterableDataset"),c(cn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cn,"href","#datasets.IterableDataset"),c(Ta,"class","relative group"),c(Pp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.IterableDataset"),c(mn,"class","docstring"),c(fn,"class","docstring"),c(Ap,"class","docstring"),c(Le,"class","docstring"),c(Lp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.IterableDataset.skip"),c(Sp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.IterableDataset.take"),c(ne,"class","docstring"),c(hn,"class","docstring"),c(un,"class","docstring"),c(jp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetInfo"),c(gn,"class","docstring"),c(qp,"href","/docs/datasets/pr_3799/en/package_reference/builder_classes#datasets.NamedSplit"),c(_n,"class","docstring"),c(zp,"class","docstring"),c(Vp,"class","docstring"),c(Mp,"class","docstring"),c(Up,"class","docstring"),c(Rp,"class","docstring"),c(Bp,"class","docstring"),c(Hp,"class","docstring"),c(Gp,"class","docstring"),c(Kp,"class","docstring"),c(Wp,"class","docstring"),c(Yp,"class","docstring"),c(Jp,"class","docstring"),c(Xp,"class","docstring"),c(x,"class","docstring"),c(vn,"id","datasets.IterableDatasetDict"),c(vn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vn,"href","#datasets.IterableDatasetDict"),c(Pa,"class","relative group"),c(Hd,"class","docstring"),c(yn,"id","datasets.Features"),c(yn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yn,"href","#datasets.Features"),c(Aa,"class","relative group"),c(Qp,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Value"),c(em,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.ClassLabel"),c(tm,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Sequence"),c(am,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Sequence"),c(sm,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Array2D"),c(nm,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Array3D"),c(rm,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Array4D"),c(om,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Array5D"),c(im,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Audio"),c(dm,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Image"),c(lm,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Translation"),c(cm,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),c(Dn,"class","docstring"),c(xn,"class","docstring"),c(En,"class","docstring"),c(kn,"class","docstring"),c(In,"class","docstring"),c(Tn,"class","docstring"),c(Nt,"class","docstring"),c(Nn,"class","docstring"),c(pm,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.DatasetInfo"),c(mm,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),c(fm,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Value"),c(K,"class","docstring"),c(re,"class","docstring"),c(T,"class","docstring"),c(La,"class","docstring"),c(Fn,"class","docstring"),c(Pn,"class","docstring"),c(V,"class","docstring"),c(at,"class","docstring"),c(M,"class","docstring"),c(U,"class","docstring"),c(Dl,"class","docstring"),c(El,"class","docstring"),c(Il,"class","docstring"),c(Nl,"class","docstring"),c(Ft,"class","docstring"),c(An,"class","docstring"),c(Ln,"class","docstring"),c(Sn,"class","docstring"),c(F,"class","docstring"),c(Pt,"class","docstring"),c(On,"class","docstring"),c(jn,"class","docstring"),c(Cn,"class","docstring"),c(P,"class","docstring"),c(qn,"id","datasets.MetricInfo"),c(qn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qn,"href","#datasets.MetricInfo"),c(ja,"class","relative group"),c(zn,"class","docstring"),c(Vn,"class","docstring"),c(R,"class","docstring"),c(Mn,"id","datasets.Metric"),c(Mn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mn,"href","#datasets.Metric"),c(qa,"class","relative group"),c(ym,"href","/docs/datasets/pr_3799/en/package_reference/main_classes#datasets.Dataset"),c(Un,"class","docstring"),c(Rn,"class","docstring"),c(Lt,"class","docstring"),c(Bn,"class","docstring"),c(B,"class","docstring"),c(Hn,"id","datasets.filesystems.S3FileSystem"),c(Hn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hn,"href","#datasets.filesystems.S3FileSystem"),c(za,"class","relative group"),c(uc,"href","https://s3fs.readthedocs.io/en/latest/api.html"),c(uc,"rel","nofollow"),c(gc,"href","https://filesystem-spec.readthedocs.io/en/latest/?badge=latest"),c(gc,"rel","nofollow"),c(nt,"class","docstring"),c(Va,"class","docstring"),c(Ua,"class","docstring"),c(Gn,"id","datasets.fingerprint.Hasher"),c(Gn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gn,"href","#datasets.fingerprint.Hasher"),c(Ra,"class","relative group"),c(Ba,"class","docstring")},m(i,y){e(document.head,A),$(i,ot,y),$(i,O,y),e(O,J),e(J,Jt),f(ie,Jt,null),e(O,$r),e(O,Xt),e(Xt,it),$(i,Ga,y),$(i,de,y),e(de,ee),e(ee,H),f(dt,H,null),e(de,Dc),e(de,Ka),e(Ka,fw),$(i,xb,y),$(i,z,y),f(wr,z,null),e(z,hw),e(z,kf),e(kf,uw),e(z,gw),e(z,xc),e(xc,If),e(If,_w),e(xc,vw),e(z,bw),e(z,Tf),e(Tf,yw),e(z,$w),e(z,ve),f(Dr,ve,null),e(ve,ww),e(ve,xr),e(xr,Dw),e(xr,Nf),e(Nf,xw),e(xr,Ew),e(ve,kw),e(ve,Ff),e(Ff,Iw),e(ve,Tw),e(ve,Pf),e(Pf,Nw),e(z,Fw),e(z,lt),f(Er,lt,null),e(lt,Pw),e(lt,Zt),e(Zt,Aw),e(Zt,Af),e(Af,Lw),e(Zt,Sw),e(Zt,Lf),e(Lf,Ow),e(Zt,jw),e(lt,Cw),e(lt,Sf),e(Sf,qw),$(i,Eb,y),$(i,Qt,y),e(Qt,Wa),e(Wa,Of),f(kr,Of,null),e(Qt,zw),e(Qt,jf),e(jf,Vw),$(i,kb,y),$(i,Ya,y),e(Ya,Mw),e(Ya,Ec),e(Ec,Uw),e(Ya,Rw),$(i,Ib,y),$(i,v,y),f(Ir,v,null),e(v,Bw),e(v,Cf),e(Cf,Hw),e(v,Gw),e(v,ct),f(Tr,ct,null),e(ct,Kw),e(ct,qf),e(qf,Ww),e(ct,Yw),e(ct,zf),e(zf,Vf),e(Vf,Jw),e(v,Xw),e(v,pt),f(Nr,pt,null),e(pt,Zw),e(pt,Mf),e(Mf,Qw),e(pt,eD),e(pt,Uf),e(Uf,Rf),e(Rf,tD),e(v,aD),e(v,Ja),f(Fr,Ja,null),e(Ja,sD),e(Ja,Bf),e(Bf,nD),e(v,rD),e(v,Xa),f(Pr,Xa,null),e(Xa,oD),e(Xa,Hf),e(Hf,iD),e(v,dD),e(v,be),f(Ar,be,null),e(be,lD),e(be,Be),e(Be,cD),e(Be,Gf),e(Gf,pD),e(Be,mD),e(Be,Kf),e(Kf,fD),e(Be,hD),e(Be,kc),e(kc,uD),e(Be,gD),e(be,_D),e(be,Lr),e(Lr,vD),e(Lr,Wf),e(Wf,bD),e(Lr,yD),e(be,$D),e(be,Sr),e(Sr,wD),e(Sr,Yf),e(Yf,DD),e(Sr,xD),e(v,ED),e(v,Za),f(Or,Za,null),e(Za,kD),e(Za,He),e(He,ID),e(He,Jf),e(Jf,TD),e(He,ND),e(He,Xf),e(Xf,FD),e(He,PD),e(He,Ic),e(Ic,AD),e(He,LD),e(v,SD),e(v,Qa),f(jr,Qa,null),e(Qa,OD),e(Qa,Zf),e(Zf,jD),e(v,CD),e(v,es),f(Cr,es,null),e(es,qD),e(es,Qf),e(Qf,zD),e(v,VD),e(v,ts),f(qr,ts,null),e(ts,MD),e(ts,eh),e(eh,UD),e(v,RD),e(v,as),f(zr,as,null),e(as,BD),e(as,Vr),e(Vr,HD),e(Vr,ss),e(ss,GD),e(ss,th),e(th,KD),e(ss,WD),e(Vr,YD),e(v,JD),e(v,ns),f(Mr,ns,null),e(ns,XD),e(ns,ah),e(ah,ZD),e(v,QD),e(v,rs),f(Ur,rs,null),e(rs,ex),e(rs,sh),e(sh,tx),e(v,ax),e(v,mt),f(Rr,mt,null),e(mt,sx),e(mt,nh),e(nh,nx),e(mt,rx),e(mt,rh),e(rh,ox),e(v,ix),e(v,os),f(Br,os,null),e(os,dx),e(os,oh),e(oh,lx),e(v,cx),e(v,is),f(Hr,is,null),e(is,px),e(is,ih),e(ih,mx),e(v,fx),e(v,ds),f(Gr,ds,null),e(ds,hx),e(ds,dh),e(dh,ux),e(v,gx),e(v,ft),f(Kr,ft,null),e(ft,_x),e(ft,lh),e(lh,vx),e(ft,bx),e(ft,ea),e(ea,yx),e(ea,Tc),e(Tc,$x),e(ea,wx),e(ea,ch),e(ch,Dx),e(ea,xx),e(v,Ex),e(v,ls),f(Wr,ls,null),e(ls,kx),e(ls,ph),e(ph,Ix),e(v,Tx),e(v,cs),f(Yr,cs,null),e(cs,Nx),e(cs,Jr),e(Jr,Fx),e(Jr,mh),e(mh,Px),e(Jr,Ax),e(v,Lx),e(v,ps),f(Xr,ps,null),e(ps,Sx),e(ps,fh),e(fh,Ox),e(v,jx),e(v,ht),f(Zr,ht,null),e(ht,Cx),e(ht,hh),e(hh,qx),e(ht,zx),e(ht,Qr),e(Qr,Vx),e(Qr,Nc),e(Nc,Mx),e(Qr,Ux),e(v,Rx),e(v,ms),f(eo,ms,null),e(ms,Bx),e(ms,ta),e(ta,Hx),e(ta,uh),e(uh,Gx),e(ta,Kx),e(ta,gh),e(gh,Wx),e(ta,Yx),e(v,Jx),e(v,ye),f(to,ye,null),e(ye,Xx),e(ye,le),e(le,Zx),e(le,_h),e(_h,Qx),e(le,e0),e(le,vh),e(vh,t0),e(le,a0),e(le,bh),e(bh,s0),e(le,n0),e(le,Fc),e(Fc,r0),e(le,o0),e(ye,i0),e(ye,ce),e(ce,d0),e(ce,yh),e(yh,l0),e(ce,c0),e(ce,$h),e($h,p0),e(ce,m0),e(ce,wh),e(wh,f0),e(ce,h0),e(ce,Dh),e(Dh,u0),e(ce,g0),e(ye,_0),e(ye,xh),e(xh,v0),e(v,b0),e(v,fs),f(ao,fs,null),e(fs,y0),e(fs,$e),e($e,$0),e($e,Eh),e(Eh,w0),e($e,D0),e($e,kh),e(kh,x0),e($e,E0),e($e,Pc),e(Pc,k0),e($e,I0),e($e,Ac),e(Ac,T0),e(v,N0),e(v,ut),f(so,ut,null),e(ut,F0),e(ut,no),e(no,P0),e(no,Ih),e(Ih,A0),e(no,L0),e(ut,S0),e(ut,Lc),e(Lc,O0),e(Lc,Th),e(Th,j0),e(v,C0),e(v,we),f(ro,we,null),e(we,q0),e(we,Ge),e(Ge,z0),e(Ge,Nh),e(Nh,V0),e(Ge,M0),e(Ge,Fh),e(Fh,U0),e(Ge,R0),e(Ge,Ph),e(Ph,B0),e(Ge,H0),e(we,G0),e(we,oo),e(oo,K0),e(oo,Sc),e(Sc,W0),e(oo,Y0),e(we,J0),e(we,aa),e(aa,X0),e(aa,Oc),e(Oc,Z0),e(aa,Q0),e(aa,Ah),e(Ah,e9),e(aa,t9),e(v,a9),e(v,De),f(io,De,null),e(De,s9),e(De,sa),e(sa,n9),e(sa,Lh),e(Lh,r9),e(sa,o9),e(sa,Sh),e(Sh,i9),e(sa,d9),e(De,l9),e(De,na),e(na,c9),e(na,jc),e(jc,p9),e(na,m9),e(na,Cc),e(Cc,f9),e(na,h9),e(De,u9),e(De,ra),e(ra,g9),e(ra,qc),e(qc,_9),e(ra,v9),e(ra,Oh),e(Oh,b9),e(ra,y9),e(v,$9),e(v,hs),f(lo,hs,null),e(hs,w9),e(hs,jh),e(jh,D9),e(v,x9),e(v,gt),f(co,gt,null),e(gt,E9),e(gt,Ch),e(Ch,k9),e(gt,I9),e(gt,qh),e(qh,T9),e(v,N9),e(v,us),f(po,us,null),e(us,F9),e(us,zh),e(zh,P9),e(v,A9),e(v,gs),f(mo,gs,null),e(gs,L9),e(gs,Vh),e(Vh,S9),e(v,O9),e(v,_s),f(fo,_s,null),e(_s,j9),e(_s,Mh),e(Mh,C9),e(v,q9),e(v,_t),f(ho,_t,null),e(_t,z9),e(_t,Uh),e(Uh,V9),e(_t,M9),e(_t,Rh),e(Rh,U9),e(v,R9),e(v,vt),f(uo,vt,null),e(vt,B9),e(vt,Bh),e(Bh,H9),e(vt,G9),e(vt,Hh),e(Hh,K9),e(v,W9),e(v,bt),f(go,bt,null),e(bt,Y9),e(bt,j),e(j,J9),e(j,Gh),e(Gh,X9),e(j,Z9),e(j,Kh),e(Kh,Q9),e(j,e3),e(j,Wh),e(Wh,t3),e(j,a3),e(j,Yh),e(Yh,s3),e(j,n3),e(j,Jh),e(Jh,r3),e(j,o3),e(j,Xh),e(Xh,i3),e(j,d3),e(j,Zh),e(Zh,l3),e(j,c3),e(bt,p3),e(bt,_o),e(_o,m3),e(_o,Qh),e(Qh,f3),e(_o,h3),e(v,u3),e(v,te),f(vo,te,null),e(te,g3),e(te,oa),e(oa,_3),e(oa,eu),e(eu,v3),e(oa,b3),e(oa,tu),e(tu,y3),e(oa,$3),e(te,w3),e(te,au),e(au,D3),e(te,x3),e(te,bo),e(bo,E3),e(bo,su),e(su,k3),e(bo,I3),e(te,T3),e(te,nu),e(nu,N3),e(v,F3),e(v,vs),f(yo,vs,null),e(vs,P3),e(vs,ru),e(ru,A3),e(v,L3),e(v,xe),f($o,xe,null),e(xe,S3),e(xe,ou),e(ou,O3),e(xe,j3),e(xe,iu),e(iu,C3),e(xe,q3),f(wo,xe,null),e(v,z3),e(v,bs),f(Do,bs,null),e(bs,V3),e(bs,ia),e(ia,M3),e(ia,zc),e(zc,U3),e(ia,R3),e(ia,du),e(du,B3),e(ia,H3),e(v,G3),e(v,ys),f(xo,ys,null),e(ys,K3),e(ys,Ke),e(Ke,W3),e(Ke,lu),e(lu,Y3),e(Ke,J3),e(Ke,Vc),e(Vc,X3),e(Ke,Z3),e(Ke,cu),e(cu,Q3),e(Ke,e4),e(v,t4),e(v,$s),f(Eo,$s,null),e($s,a4),e($s,pu),e(pu,s4),e(v,n4),e(v,ws),f(ko,ws,null),e(ws,r4),e(ws,mu),e(mu,o4),e(v,i4),e(v,Ds),f(Io,Ds,null),e(Ds,d4),e(Ds,To),e(To,l4),e(To,fu),e(fu,c4),e(To,p4),e(v,m4),e(v,xs),f(No,xs,null),e(xs,f4),e(xs,hu),e(hu,h4),e(v,u4),e(v,Es),f(Fo,Es,null),e(Es,g4),e(Es,uu),e(uu,_4),e(v,v4),e(v,ks),f(Po,ks,null),e(ks,b4),e(ks,gu),e(gu,y4),e(v,$4),e(v,ae),f(Ao,ae,null),e(ae,w4),e(ae,da),e(da,D4),e(da,_u),e(_u,x4),e(da,E4),e(da,vu),e(vu,k4),e(da,I4),e(ae,T4),e(ae,bu),e(bu,Mc),e(Mc,N4),e(Mc,Lo),e(Lo,F4),e(ae,P4),e(ae,yu),e(yu,A4),e(ae,L4),f(So,ae,null),e(v,S4),e(v,yt),f(Oo,yt,null),e(yt,O4),e(yt,We),e(We,j4),e(We,$u),e($u,C4),e(We,q4),e(We,wu),e(wu,z4),e(We,V4),e(We,Du),e(Du,M4),e(We,U4),e(yt,R4),e(yt,xu),e(xu,Uc),e(Uc,B4),e(Uc,jo),e(jo,H4),e(v,G4),e(v,Is),f(Co,Is,null),e(Is,K4),e(Is,Eu),e(Eu,W4),e(v,Y4),e(v,$t),f(qo,$t,null),e($t,J4),e($t,ku),e(ku,X4),e($t,Z4),e($t,zo),e(zo,Q4),e(zo,Iu),e(Iu,e7),e(zo,t7),e(v,a7),e(v,G),f(Vo,G,null),e(G,s7),e(G,Tu),e(Tu,n7),e(G,r7),e(G,Nu),e(Nu,o7),e(G,i7),f(Mo,G,null),e(G,d7),e(G,Fu),e(Fu,l7),e(G,c7),f(Uo,G,null),e(v,p7),e(v,Ee),f(Ro,Ee,null),e(Ee,m7),e(Ee,Pu),e(Pu,f7),e(Ee,h7),e(Ee,Au),e(Au,u7),e(Ee,g7),f(Bo,Ee,null),e(v,_7),e(v,Ts),f(Ho,Ts,null),e(Ts,v7),e(Ts,Lu),e(Lu,b7),e(v,y7),e(v,Ns),f(Go,Ns,null),e(Ns,$7),e(Ns,Su),e(Su,w7),e(v,D7),e(v,Fs),f(Ko,Fs,null),e(Fs,x7),e(Fs,Ou),e(Ou,E7),e(v,k7),e(v,Ps),f(Wo,Ps,null),e(Ps,I7),e(Ps,ju),e(ju,T7),e(v,N7),e(v,As),f(Yo,As,null),e(As,F7),e(As,Cu),e(Cu,P7),e(v,A7),e(v,Ls),f(Jo,Ls,null),e(Ls,L7),e(Ls,qu),e(qu,S7),e(v,O7),e(v,Ss),f(Xo,Ss,null),e(Ss,j7),e(Ss,zu),e(zu,C7),e(v,q7),e(v,Os),f(Zo,Os,null),e(Os,z7),e(Os,Rc),e(Rc,Bc),e(Bc,V7),e(Rc,M7),e(v,U7),e(v,js),f(Qo,js,null),e(js,R7),e(js,Hc),e(Hc,Gc),e(Gc,B7),e(Hc,H7),e(v,G7),e(v,Kc),f(ei,Kc,null),e(v,K7),e(v,Wc),f(ti,Wc,null),e(v,W7),e(v,Yc),f(ai,Yc,null),e(v,Y7),e(v,Jc),f(si,Jc,null),e(v,J7),e(v,Xc),f(ni,Xc,null),e(v,X7),e(v,Zc),f(ri,Zc,null),e(v,Z7),e(v,Qc),f(oi,Qc,null),e(v,Q7),e(v,ep),f(ii,ep,null),e(v,eE),e(v,tp),f(di,tp,null),e(v,tE),e(v,ap),f(li,ap,null),e(v,aE),e(v,sp),f(ci,sp,null),e(v,sE),e(v,np),f(pi,np,null),e(v,nE),e(v,rp),f(mi,rp,null),e(v,rE),e(v,Cs),f(fi,Cs,null),e(Cs,oE),e(Cs,Vu),e(Vu,iE),e(v,dE),e(v,qs),f(hi,qs,null),e(qs,lE),e(qs,Mu),e(Mu,cE),e(v,pE),e(v,zs),f(ui,zs,null),e(zs,mE),e(zs,Uu),e(Uu,fE),e(v,hE),e(v,Vs),f(gi,Vs,null),e(Vs,uE),e(Vs,Ru),e(Ru,gE),e(v,_E),e(v,wt),f(_i,wt,null),e(wt,vE),e(wt,la),e(la,bE),e(la,op),e(op,yE),e(la,$E),e(la,ip),e(ip,wE),e(la,DE),e(wt,xE),e(wt,ca),e(ca,EE),e(ca,Bu),e(Bu,kE),e(ca,IE),e(ca,Hu),e(Hu,TE),e(ca,NE),e(v,FE),e(v,ke),f(vi,ke,null),e(ke,PE),e(ke,bi),e(bi,AE),e(bi,Gu),e(Gu,LE),e(bi,SE),e(ke,OE),e(ke,Ku),e(Ku,jE),e(ke,CE),f(yi,ke,null),$(i,Tb,y),$(i,pa,y),f($i,pa,null),e(pa,qE),e(pa,ma),e(ma,zE),e(ma,dp),e(dp,VE),e(ma,ME),e(ma,lp),e(lp,UE),e(ma,RE),$(i,Nb,y),$(i,C,y),f(wi,C,null),e(C,BE),e(C,Wu),e(Wu,HE),e(C,GE),e(C,fa),e(fa,KE),e(fa,cp),e(cp,WE),e(fa,YE),e(fa,pp),e(pp,JE),e(fa,XE),e(C,ZE),e(C,pe),e(pe,QE),e(pe,Yu),e(Yu,ek),e(pe,tk),e(pe,Ju),e(Ju,ak),e(pe,sk),e(pe,Xu),e(Xu,nk),e(pe,rk),e(pe,Zu),e(Zu,ok),e(pe,ik),e(C,dk),e(C,Qu),e(Qu,lk),e(C,ck),e(C,eg),e(eg,pk),e(C,mk),f(Di,C,null),$(i,Fb,y),$(i,X,y),f(xi,X,null),e(X,fk),e(X,tg),e(tg,hk),e(X,uk),e(X,ag),e(ag,gk),e(X,_k),e(X,sg),e(sg,vk),e(X,bk),e(X,me),e(me,ng),e(ng,yk),e(me,$k),e(me,rg),e(rg,wk),e(me,Dk),e(me,og),e(og,xk),e(me,Ek),e(me,Ei),e(Ei,kk),e(Ei,mp),e(mp,Ik),e(Ei,Tk),e(me,Nk),e(me,Ye),e(Ye,Fk),e(Ye,fp),e(fp,Pk),e(Ye,Ak),e(Ye,ig),e(ig,Lk),e(Ye,Sk),e(Ye,hp),e(hp,Ok),e(Ye,jk),$(i,Pb,y),$(i,Z,y),f(ki,Z,null),e(Z,Ck),e(Z,dg),e(dg,qk),e(Z,zk),e(Z,lg),e(lg,Vk),e(Z,Mk),e(Z,cg),e(cg,Uk),e(Z,Rk),e(Z,fe),e(fe,pg),e(pg,Bk),e(fe,Hk),e(fe,mg),e(mg,Gk),e(fe,Kk),e(fe,fg),e(fg,Wk),e(fe,Yk),e(fe,Ii),e(Ii,Jk),e(Ii,up),e(up,Xk),e(Ii,Zk),e(fe,Qk),e(fe,Je),e(Je,eI),e(Je,gp),e(gp,tI),e(Je,aI),e(Je,hg),e(hg,sI),e(Je,nI),e(Je,_p),e(_p,rI),e(Je,oI),$(i,Ab,y),$(i,ha,y),f(Ti,ha,null),e(ha,iI),e(ha,ug),e(ug,dI),$(i,Lb,y),$(i,ua,y),f(Ni,ua,null),e(ua,lI),e(ua,gg),e(gg,cI),$(i,Sb,y),$(i,ga,y),e(ga,Ms),e(Ms,_g),f(Fi,_g,null),e(ga,pI),e(ga,vg),e(vg,mI),$(i,Ob,y),$(i,Us,y),e(Us,fI),e(Us,bg),e(bg,hI),e(Us,uI),$(i,jb,y),$(i,w,y),f(Pi,w,null),e(w,gI),e(w,yg),e(yg,_I),e(w,vI),e(w,Rs),f(Ai,Rs,null),e(Rs,bI),e(Rs,$g),e($g,yI),e(w,$I),e(w,Bs),f(Li,Bs,null),e(Bs,wI),e(Bs,wg),e(wg,DI),e(w,xI),e(w,Hs),f(Si,Hs,null),e(Hs,EI),e(Hs,Dg),e(Dg,kI),e(w,II),e(w,Gs),f(Oi,Gs,null),e(Gs,TI),e(Gs,ji),e(ji,NI),e(ji,Ks),e(Ks,FI),e(Ks,xg),e(xg,PI),e(Ks,AI),e(ji,LI),e(w,SI),e(w,Ws),f(Ci,Ws,null),e(Ws,OI),e(Ws,Eg),e(Eg,jI),e(w,CI),e(w,Ys),f(qi,Ys,null),e(Ys,qI),e(Ys,kg),e(kg,zI),e(w,VI),e(w,Dt),f(zi,Dt,null),e(Dt,MI),e(Dt,Ig),e(Ig,UI),e(Dt,RI),e(Dt,Tg),e(Tg,BI),e(w,HI),e(w,Js),f(Vi,Js,null),e(Js,GI),e(Js,Ng),e(Ng,KI),e(w,WI),e(w,Xs),f(Mi,Xs,null),e(Xs,YI),e(Xs,Fg),e(Fg,JI),e(w,XI),e(w,Zs),f(Ui,Zs,null),e(Zs,ZI),e(Zs,Pg),e(Pg,QI),e(w,e5),e(w,xt),f(Ri,xt,null),e(xt,t5),e(xt,Ag),e(Ag,a5),e(xt,s5),e(xt,Lg),e(Lg,n5),e(w,r5),e(w,Ie),f(Bi,Ie,null),e(Ie,o5),e(Ie,Sg),e(Sg,i5),e(Ie,d5),e(Ie,Og),e(Og,l5),e(Ie,c5),e(Ie,jg),e(jg,p5),e(w,m5),e(w,Te),f(Hi,Te,null),e(Te,f5),e(Te,Gi),e(Gi,h5),e(Gi,Cg),e(Cg,u5),e(Gi,g5),e(Te,_5),e(Te,he),e(he,v5),e(he,qg),e(qg,b5),e(he,y5),e(he,zg),e(zg,$5),e(he,w5),e(he,Vg),e(Vg,D5),e(he,x5),e(he,Mg),e(Mg,E5),e(he,k5),e(Te,I5),e(Te,Ug),e(Ug,T5),e(w,N5),e(w,Et),f(Ki,Et,null),e(Et,F5),e(Et,Wi),e(Wi,P5),e(Wi,Rg),e(Rg,A5),e(Wi,L5),e(Et,S5),e(Et,vp),e(vp,O5),e(vp,Bg),e(Bg,j5),e(w,C5),e(w,Qs),f(Yi,Qs,null),e(Qs,q5),e(Qs,_a),e(_a,z5),e(_a,Hg),e(Hg,V5),e(_a,M5),e(_a,Gg),e(Gg,U5),e(_a,R5),e(w,B5),e(w,Ne),f(Ji,Ne,null),e(Ne,H5),e(Ne,Xe),e(Xe,G5),e(Xe,Kg),e(Kg,K5),e(Xe,W5),e(Xe,Wg),e(Wg,Y5),e(Xe,J5),e(Xe,Yg),e(Yg,X5),e(Xe,Z5),e(Ne,Q5),e(Ne,Xi),e(Xi,e6),e(Xi,bp),e(bp,t6),e(Xi,a6),e(Ne,s6),e(Ne,va),e(va,n6),e(va,yp),e(yp,r6),e(va,o6),e(va,Jg),e(Jg,i6),e(va,d6),e(w,l6),e(w,Fe),f(Zi,Fe,null),e(Fe,c6),e(Fe,ba),e(ba,p6),e(ba,Xg),e(Xg,m6),e(ba,f6),e(ba,Zg),e(Zg,h6),e(ba,u6),e(Fe,g6),e(Fe,ya),e(ya,_6),e(ya,$p),e($p,v6),e(ya,b6),e(ya,wp),e(wp,y6),e(ya,$6),e(Fe,w6),e(Fe,$a),e($a,D6),e($a,Qg),e(Qg,x6),e($a,E6),e($a,e_),e(e_,k6),e($a,I6),e(w,T6),e(w,en),f(Qi,en,null),e(en,N6),e(en,t_),e(t_,F6),e(w,P6),e(w,kt),f(ed,kt,null),e(kt,A6),e(kt,a_),e(a_,L6),e(kt,S6),e(kt,Ze),e(Ze,O6),e(Ze,Dp),e(Dp,j6),e(Ze,C6),e(Ze,s_),e(s_,q6),e(Ze,z6),e(Ze,n_),e(n_,V6),e(Ze,M6),e(w,U6),e(w,tn),f(td,tn,null),e(tn,R6),e(tn,r_),e(r_,B6),e(w,H6),e(w,Pe),f(ad,Pe,null),e(Pe,G6),e(Pe,o_),e(o_,K6),e(Pe,W6),e(Pe,i_),e(i_,Y6),e(Pe,J6),e(Pe,wa),e(wa,X6),e(wa,xp),e(xp,Z6),e(wa,Q6),e(wa,d_),e(d_,e8),e(wa,t8),e(w,a8),e(w,Ae),f(sd,Ae,null),e(Ae,s8),e(Ae,l_),e(l_,n8),e(Ae,r8),e(Ae,Da),e(Da,o8),e(Da,Ep),e(Ep,i8),e(Da,d8),e(Da,c_),e(c_,l8),e(Da,c8),e(Ae,p8),e(Ae,nd),e(nd,p_),e(p_,m8),e(nd,f8),e(nd,m_),e(m_,h8),e(w,u8),e(w,an),f(rd,an,null),e(an,g8),e(an,od),e(od,_8),e(od,f_),e(f_,v8),e(od,b8),e(w,y8),e(w,se),f(id,se,null),e(se,$8),e(se,xa),e(xa,w8),e(xa,h_),e(h_,D8),e(xa,x8),e(xa,u_),e(u_,E8),e(xa,k8),e(se,I8),e(se,g_),e(g_,T8),e(se,N8),e(se,__),e(__,F8),e(se,P8),f(dd,se,null),e(w,A8),e(w,sn),f(ld,sn,null),e(sn,L8),e(sn,Ea),e(Ea,S8),e(Ea,kp),e(kp,O8),e(Ea,j8),e(Ea,v_),e(v_,C8),e(Ea,q8),e(w,z8),e(w,nn),f(cd,nn,null),e(nn,V8),e(nn,Qe),e(Qe,M8),e(Qe,b_),e(b_,U8),e(Qe,R8),e(Qe,Ip),e(Ip,B8),e(Qe,H8),e(Qe,y_),e(y_,G8),e(Qe,K8),e(w,W8),e(w,rn),f(pd,rn,null),e(rn,Y8),e(rn,$_),e($_,J8),e(w,X8),e(w,on),f(md,on,null),e(on,Z8),e(on,w_),e(w_,Q8),e(w,eT),e(w,dn),f(fd,dn,null),e(dn,tT),e(dn,D_),e(D_,aT),e(w,sT),e(w,ln),f(hd,ln,null),e(ln,nT),e(ln,x_),e(x_,rT),e(w,oT),e(w,It),f(ud,It,null),e(It,iT),e(It,ka),e(ka,dT),e(ka,Tp),e(Tp,lT),e(ka,cT),e(ka,Np),e(Np,pT),e(ka,mT),e(It,fT),e(It,Ia),e(Ia,hT),e(Ia,E_),e(E_,uT),e(Ia,gT),e(Ia,k_),e(k_,_T),e(Ia,vT),$(i,Cb,y),$(i,Fp,y),$(i,qb,y),$(i,Ta,y),e(Ta,cn),e(cn,I_),f(gd,I_,null),e(Ta,bT),e(Ta,T_),e(T_,yT),$(i,zb,y),$(i,pn,y),e(pn,$T),e(pn,Pp),e(Pp,wT),e(pn,DT),$(i,Vb,y),$(i,x,y),f(_d,x,null),e(x,xT),e(x,N_),e(N_,ET),e(x,kT),e(x,mn),f(vd,mn,null),e(mn,IT),e(mn,F_),e(F_,TT),e(x,NT),e(x,fn),f(bd,fn,null),e(fn,FT),e(fn,P_),e(P_,PT),e(x,AT),e(x,Ap),f(yd,Ap,null),e(x,LT),e(x,Le),f($d,Le,null),e(Le,ST),e(Le,A_),e(A_,OT),e(Le,jT),e(Le,wd),e(wd,CT),e(wd,L_),e(L_,qT),e(wd,zT),e(Le,VT),e(Le,Na),e(Na,S_),e(S_,MT),e(Na,UT),e(Na,O_),e(O_,RT),e(Na,BT),e(Na,Q),e(Q,HT),e(Q,j_),e(j_,GT),e(Q,KT),e(Q,C_),e(C_,WT),e(Q,YT),e(Q,q_),e(q_,JT),e(Q,XT),e(Q,z_),e(z_,ZT),e(Q,QT),e(Q,V_),e(V_,eN),e(Q,tN),e(x,aN),e(x,ne),f(Dd,ne,null),e(ne,sN),e(ne,M_),e(M_,nN),e(ne,rN),e(ne,U_),e(U_,oN),e(ne,iN),e(ne,xd),e(xd,dN),e(xd,R_),e(R_,lN),e(xd,cN),e(ne,pN),e(ne,Fa),e(Fa,mN),e(Fa,Lp),e(Lp,fN),e(Fa,hN),e(Fa,Sp),e(Sp,uN),e(Fa,gN),e(x,_N),e(x,hn),f(Ed,hn,null),e(hn,vN),e(hn,kd),e(kd,bN),e(kd,B_),e(B_,yN),e(kd,$N),e(x,wN),e(x,un),f(Id,un,null),e(un,DN),e(un,Td),e(Td,xN),e(Td,H_),e(H_,EN),e(Td,kN),e(x,IN),e(x,gn),f(Nd,gn,null),e(gn,TN),e(gn,Op),e(Op,jp),e(jp,NN),e(Op,FN),e(x,PN),e(x,_n),f(Fd,_n,null),e(_n,AN),e(_n,Cp),e(Cp,qp),e(qp,LN),e(Cp,SN),e(x,ON),e(x,zp),f(Pd,zp,null),e(x,jN),e(x,Vp),f(Ad,Vp,null),e(x,CN),e(x,Mp),f(Ld,Mp,null),e(x,qN),e(x,Up),f(Sd,Up,null),e(x,zN),e(x,Rp),f(Od,Rp,null),e(x,VN),e(x,Bp),f(jd,Bp,null),e(x,MN),e(x,Hp),f(Cd,Hp,null),e(x,UN),e(x,Gp),f(qd,Gp,null),e(x,RN),e(x,Kp),f(zd,Kp,null),e(x,BN),e(x,Wp),f(Vd,Wp,null),e(x,HN),e(x,Yp),f(Md,Yp,null),e(x,GN),e(x,Jp),f(Ud,Jp,null),e(x,KN),e(x,Xp),f(Rd,Xp,null),$(i,Mb,y),$(i,Pa,y),e(Pa,vn),e(vn,G_),f(Bd,G_,null),e(Pa,WN),e(Pa,K_),e(K_,YN),$(i,Ub,y),$(i,bn,y),e(bn,JN),e(bn,W_),e(W_,XN),e(bn,ZN),$(i,Rb,y),$(i,Hd,y),f(Gd,Hd,null),$(i,Bb,y),$(i,Aa,y),e(Aa,yn),e(yn,Y_),f(Kd,Y_,null),e(Aa,QN),e(Aa,J_),e(J_,eF),$(i,Hb,y),$(i,T,y),f(Wd,T,null),e(T,tF),e(T,X_),e(X_,aF),e(T,sF),e(T,Yd),e(Yd,nF),e(Yd,Z_),e(Z_,rF),e(Yd,oF),e(T,iF),e(T,Zp),e(Zp,Q_),e(Q_,dF),e(Zp,lF),e(T,cF),e(T,q),e(q,ev),e(ev,Tt),e(Tt,pF),e(Tt,Qp),e(Qp,mF),e(Tt,fF),e(Tt,tv),e(tv,hF),e(Tt,uF),e(Tt,av),e(av,gF),e(q,_F),e(q,sv),e(sv,Jd),e(Jd,vF),e(Jd,em),e(em,bF),e(Jd,yF),e(q,$F),e(q,nv),e(nv,Xd),e(Xd,wF),e(Xd,rv),e(rv,DF),e(Xd,xF),e(q,EF),e(q,Zd),e(Zd,ue),e(ue,kF),e(ue,ov),e(ov,IF),e(ue,TF),e(ue,tm),e(tm,NF),e(ue,FF),e(ue,iv),e(iv,PF),e(ue,AF),e(ue,am),e(am,LF),e(ue,SF),e(Zd,OF),f($n,Zd,null),e(q,jF),e(q,dv),e(dv,ge),e(ge,CF),e(ge,sm),e(sm,qF),e(ge,zF),e(ge,nm),e(nm,VF),e(ge,MF),e(ge,rm),e(rm,UF),e(ge,RF),e(ge,om),e(om,BF),e(ge,HF),e(q,GF),e(q,lv),e(lv,Qd),e(Qd,KF),e(Qd,im),e(im,WF),e(Qd,YF),e(q,JF),e(q,cv),e(cv,et),e(et,XF),e(et,dm),e(dm,ZF),e(et,QF),e(et,pv),e(pv,eP),e(et,tP),e(et,mv),e(mv,aP),e(et,sP),e(q,nP),e(q,fv),e(fv,wn),e(wn,lm),e(lm,rP),e(wn,oP),e(wn,cm),e(cm,iP),e(wn,dP),e(T,lP),e(T,Dn),f(el,Dn,null),e(Dn,cP),e(Dn,hv),e(hv,pP),e(T,mP),e(T,xn),f(tl,xn,null),e(xn,fP),e(xn,uv),e(uv,hP),e(T,uP),e(T,En),f(al,En,null),e(En,gP),e(En,gv),e(gv,_P),e(T,vP),e(T,kn),f(sl,kn,null),e(kn,bP),e(kn,_v),e(_v,yP),e(T,$P),e(T,In),f(nl,In,null),e(In,wP),e(In,vv),e(vv,DP),e(T,xP),e(T,Tn),f(rl,Tn,null),e(Tn,EP),e(Tn,bv),e(bv,kP),e(T,IP),e(T,Nt),f(ol,Nt,null),e(Nt,TP),e(Nt,yv),e(yv,NP),e(Nt,FP),e(Nt,$v),e($v,PP),e(T,AP),e(T,Nn),f(il,Nn,null),e(Nn,LP),e(Nn,wv),e(wv,SP),e(T,OP),e(T,K),f(dl,K,null),e(K,jP),e(K,Dv),e(Dv,CP),e(K,qP),e(K,xv),e(xv,zP),e(K,VP),e(K,tt),e(tt,MP),e(tt,pm),e(pm,UP),e(tt,RP),e(tt,mm),e(mm,BP),e(tt,HP),e(tt,fm),e(fm,GP),e(tt,KP),e(K,WP),e(K,Ev),e(Ev,YP),e(K,JP),f(ll,K,null),e(T,XP),e(T,re),f(cl,re,null),e(re,ZP),e(re,kv),e(kv,QP),e(re,eA),e(re,Iv),e(Iv,tA),e(re,aA),e(re,Tv),e(Tv,sA),e(re,nA),f(pl,re,null),$(i,Gb,y),$(i,La,y),f(ml,La,null),e(La,rA),e(La,Nv),e(Nv,oA),$(i,Kb,y),$(i,V,y),f(fl,V,null),e(V,iA),e(V,Fv),e(Fv,dA),e(V,lA),e(V,hl),e(hl,cA),e(hl,Pv),e(Pv,pA),e(hl,mA),e(V,fA),e(V,Sa),e(Sa,hm),e(hm,Av),e(Av,hA),e(hm,uA),e(Sa,gA),e(Sa,um),e(um,Lv),e(Lv,_A),e(um,vA),e(Sa,bA),e(Sa,gm),e(gm,Sv),e(Sv,yA),e(gm,$A),e(V,wA),e(V,Fn),f(ul,Fn,null),e(Fn,DA),e(Fn,Ov),e(Ov,xA),e(V,EA),e(V,Pn),f(gl,Pn,null),e(Pn,kA),e(Pn,jv),e(jv,IA),$(i,Wb,y),$(i,at,y),f(_l,at,null),e(at,TA),e(at,Cv),e(Cv,NA),e(at,FA),e(at,qv),e(qv,PA),$(i,Yb,y),$(i,M,y),f(vl,M,null),e(M,AA),e(M,_m),e(_m,zv),e(zv,LA),e(_m,SA),e(M,OA),e(M,Vv),e(Vv,jA),e(M,CA),e(M,bl),e(bl,qA),e(bl,Mv),e(Mv,zA),e(bl,VA),e(M,MA),e(M,Uv),e(Uv,UA),e(M,RA),f(yl,M,null),$(i,Jb,y),$(i,U,y),f($l,U,null),e(U,BA),e(U,vm),e(vm,Rv),e(Rv,HA),e(vm,GA),e(U,KA),e(U,Bv),e(Bv,WA),e(U,YA),e(U,Hv),e(Hv,JA),e(U,XA),e(U,Gv),e(Gv,ZA),e(U,QA),f(wl,U,null),$(i,Xb,y),$(i,Dl,y),f(xl,Dl,null),$(i,Zb,y),$(i,El,y),f(kl,El,null),$(i,Qb,y),$(i,Il,y),f(Tl,Il,null),$(i,ey,y),$(i,Nl,y),f(Fl,Nl,null),$(i,ty,y),$(i,F,y),f(Pl,F,null),e(F,eL),e(F,Kv),e(Kv,tL),e(F,aL),e(F,Wv),e(Wv,sL),e(F,nL),e(F,Al),e(Al,Yv),e(Yv,Ll),e(Ll,rL),e(Ll,Jv),e(Jv,oL),e(Ll,iL),e(Al,dL),e(Al,Sl),e(Sl,Ol),e(Ol,lL),e(Ol,Xv),e(Xv,cL),e(Ol,pL),e(Sl,mL),e(Sl,jl),e(jl,Zv),e(Zv,fL),e(jl,hL),e(jl,Qv),e(Qv,uL),e(F,gL),e(F,e1),e(e1,_L),e(F,vL),e(F,t1),e(t1,Cl),e(Cl,ql),e(ql,bL),e(ql,a1),e(a1,yL),e(ql,$L),e(Cl,wL),e(Cl,Oa),e(Oa,s1),e(s1,DL),e(Oa,xL),e(Oa,n1),e(n1,EL),e(Oa,kL),e(Oa,r1),e(r1,IL),e(F,TL),e(F,o1),e(o1,NL),e(F,FL),e(F,Ft),f(zl,Ft,null),e(Ft,PL),e(Ft,i1),e(i1,AL),e(Ft,LL),e(Ft,st),e(st,d1),e(d1,SL),e(st,OL),e(st,l1),e(l1,jL),e(st,CL),e(st,c1),e(c1,qL),e(st,zL),e(st,p1),e(p1,VL),e(F,ML),e(F,An),f(Vl,An,null),e(An,UL),e(An,m1),e(m1,RL),e(F,BL),e(F,Ln),f(Ml,Ln,null),e(Ln,HL),e(Ln,f1),e(f1,GL),e(F,KL),e(F,Sn),f(Ul,Sn,null),e(Sn,WL),e(Sn,h1),e(h1,YL),$(i,ay,y),$(i,P,y),f(Rl,P,null),e(P,JL),e(P,u1),e(u1,XL),e(P,ZL),e(P,g1),e(g1,QL),e(P,eS),e(P,Bl),e(Bl,_1),e(_1,Hl),e(Hl,tS),e(Hl,v1),e(v1,aS),e(Hl,sS),e(Bl,nS),e(Bl,Gl),e(Gl,Kl),e(Kl,rS),e(Kl,b1),e(b1,oS),e(Kl,iS),e(Gl,dS),e(Gl,Wl),e(Wl,y1),e(y1,lS),e(Wl,cS),e(Wl,$1),e($1,pS),e(P,mS),e(P,w1),e(w1,fS),e(P,hS),e(P,Yl),e(Yl,Jl),e(Jl,uS),e(Jl,D1),e(D1,gS),e(Jl,_S),e(Yl,vS),e(Yl,Xl),e(Xl,bS),e(Xl,x1),e(x1,yS),e(Xl,$S),e(P,wS),e(P,Pt),f(Zl,Pt,null),e(Pt,DS),e(Pt,E1),e(E1,xS),e(Pt,ES),e(Pt,_e),e(_e,k1),e(k1,kS),e(_e,IS),e(_e,I1),e(I1,TS),e(_e,NS),e(_e,T1),e(T1,FS),e(_e,PS),e(_e,N1),e(N1,AS),e(_e,LS),e(_e,F1),e(F1,SS),e(P,OS),e(P,On),f(Ql,On,null),e(On,jS),e(On,P1),e(P1,CS),e(P,qS),e(P,jn),f(ec,jn,null),e(jn,zS),e(jn,A1),e(A1,VS),e(P,MS),e(P,Cn),f(tc,Cn,null),e(Cn,US),e(Cn,L1),e(L1,RS),$(i,sy,y),$(i,ja,y),e(ja,qn),e(qn,S1),f(ac,S1,null),e(ja,BS),e(ja,O1),e(O1,HS),$(i,ny,y),$(i,R,y),f(sc,R,null),e(R,GS),e(R,j1),e(j1,KS),e(R,WS),e(R,bm),e(bm,C1),e(C1,YS),e(bm,JS),e(R,XS),e(R,q1),e(q1,ZS),e(R,QS),e(R,zn),f(nc,zn,null),e(zn,eO),e(zn,rc),e(rc,tO),e(rc,z1),e(z1,aO),e(rc,sO),e(R,nO),e(R,Vn),f(oc,Vn,null),e(Vn,rO),e(Vn,Ca),e(Ca,oO),e(Ca,V1),e(V1,iO),e(Ca,dO),e(Ca,M1),e(M1,lO),e(Ca,cO),$(i,ry,y),$(i,qa,y),e(qa,Mn),e(Mn,U1),f(ic,U1,null),e(qa,pO),e(qa,R1),e(R1,mO),$(i,oy,y),$(i,At,y),e(At,fO),e(At,B1),e(B1,hO),e(At,uO),e(At,ym),e(ym,gO),e(At,_O),$(i,iy,y),$(i,B,y),f(dc,B,null),e(B,vO),e(B,H1),e(H1,bO),e(B,yO),e(B,Un),f(lc,Un,null),e(Un,$O),e(Un,G1),e(G1,wO),e(B,DO),e(B,Rn),f(cc,Rn,null),e(Rn,xO),e(Rn,K1),e(K1,EO),e(B,kO),e(B,Lt),f(pc,Lt,null),e(Lt,IO),e(Lt,W1),e(W1,TO),e(Lt,NO),e(Lt,Y1),e(Y1,FO),e(B,PO),e(B,Bn),f(mc,Bn,null),e(Bn,AO),e(Bn,J1),e(J1,LO),$(i,dy,y),$(i,za,y),e(za,Hn),e(Hn,X1),f(fc,X1,null),e(za,SO),e(za,Z1),e(Z1,OO),$(i,ly,y),$(i,nt,y),f(hc,nt,null),e(nt,jO),e(nt,Q1),e(Q1,CO),e(nt,qO),e(nt,k),e(k,zO),e(k,eb),e(eb,VO),e(k,MO),e(k,tb),e(tb,UO),e(k,RO),e(k,ab),e(ab,BO),e(k,HO),e(k,sb),e(sb,GO),e(k,KO),e(k,uc),e(uc,WO),e(k,YO),e(k,nb),e(nb,JO),e(k,XO),e(k,gc),e(gc,ZO),e(k,QO),e(k,rb),e(rb,ej),e(k,tj),e(k,ob),e(ob,aj),e(k,sj),e(k,ib),e(ib,nj),e(k,rj),e(k,db),e(db,oj),e(k,ij),e(k,lb),e(lb,dj),e(k,lj),e(k,cb),e(cb,cj),e(k,pj),e(k,pb),e(pb,mj),e(k,fj),e(k,mb),e(mb,hj),e(k,uj),e(k,fb),e(fb,gj),e(k,_j),e(k,hb),e(hb,vj),e(k,bj),e(k,ub),e(ub,yj),e(k,$j),e(k,gb),e(gb,wj),$(i,cy,y),$(i,Va,y),f(_c,Va,null),e(Va,Dj),e(Va,Ma),e(Ma,xj),e(Ma,_b),e(_b,Ej),e(Ma,kj),e(Ma,vb),e(vb,Ij),e(Ma,Tj),$(i,py,y),$(i,Ua,y),f(vc,Ua,null),e(Ua,Nj),e(Ua,bb),e(bb,Fj),$(i,my,y),$(i,Ra,y),e(Ra,Gn),e(Gn,yb),f(bc,yb,null),e(Ra,Pj),e(Ra,$b),e($b,Aj),$(i,fy,y),$(i,Ba,y),f(yc,Ba,null),e(Ba,Lj),e(Ba,wb),e(wb,Sj),hy=!0},p(i,[y]){const $c={};y&2&&($c.$$scope={dirty:y,ctx:i}),$n.$set($c)},i(i){hy||(h(ie.$$.fragment,i),h(dt.$$.fragment,i),h(wr.$$.fragment,i),h(Dr.$$.fragment,i),h(Er.$$.fragment,i),h(kr.$$.fragment,i),h(Ir.$$.fragment,i),h(Tr.$$.fragment,i),h(Nr.$$.fragment,i),h(Fr.$$.fragment,i),h(Pr.$$.fragment,i),h(Ar.$$.fragment,i),h(Or.$$.fragment,i),h(jr.$$.fragment,i),h(Cr.$$.fragment,i),h(qr.$$.fragment,i),h(zr.$$.fragment,i),h(Mr.$$.fragment,i),h(Ur.$$.fragment,i),h(Rr.$$.fragment,i),h(Br.$$.fragment,i),h(Hr.$$.fragment,i),h(Gr.$$.fragment,i),h(Kr.$$.fragment,i),h(Wr.$$.fragment,i),h(Yr.$$.fragment,i),h(Xr.$$.fragment,i),h(Zr.$$.fragment,i),h(eo.$$.fragment,i),h(to.$$.fragment,i),h(ao.$$.fragment,i),h(so.$$.fragment,i),h(ro.$$.fragment,i),h(io.$$.fragment,i),h(lo.$$.fragment,i),h(co.$$.fragment,i),h(po.$$.fragment,i),h(mo.$$.fragment,i),h(fo.$$.fragment,i),h(ho.$$.fragment,i),h(uo.$$.fragment,i),h(go.$$.fragment,i),h(vo.$$.fragment,i),h(yo.$$.fragment,i),h($o.$$.fragment,i),h(wo.$$.fragment,i),h(Do.$$.fragment,i),h(xo.$$.fragment,i),h(Eo.$$.fragment,i),h(ko.$$.fragment,i),h(Io.$$.fragment,i),h(No.$$.fragment,i),h(Fo.$$.fragment,i),h(Po.$$.fragment,i),h(Ao.$$.fragment,i),h(So.$$.fragment,i),h(Oo.$$.fragment,i),h(Co.$$.fragment,i),h(qo.$$.fragment,i),h(Vo.$$.fragment,i),h(Mo.$$.fragment,i),h(Uo.$$.fragment,i),h(Ro.$$.fragment,i),h(Bo.$$.fragment,i),h(Ho.$$.fragment,i),h(Go.$$.fragment,i),h(Ko.$$.fragment,i),h(Wo.$$.fragment,i),h(Yo.$$.fragment,i),h(Jo.$$.fragment,i),h(Xo.$$.fragment,i),h(Zo.$$.fragment,i),h(Qo.$$.fragment,i),h(ei.$$.fragment,i),h(ti.$$.fragment,i),h(ai.$$.fragment,i),h(si.$$.fragment,i),h(ni.$$.fragment,i),h(ri.$$.fragment,i),h(oi.$$.fragment,i),h(ii.$$.fragment,i),h(di.$$.fragment,i),h(li.$$.fragment,i),h(ci.$$.fragment,i),h(pi.$$.fragment,i),h(mi.$$.fragment,i),h(fi.$$.fragment,i),h(hi.$$.fragment,i),h(ui.$$.fragment,i),h(gi.$$.fragment,i),h(_i.$$.fragment,i),h(vi.$$.fragment,i),h(yi.$$.fragment,i),h($i.$$.fragment,i),h(wi.$$.fragment,i),h(Di.$$.fragment,i),h(xi.$$.fragment,i),h(ki.$$.fragment,i),h(Ti.$$.fragment,i),h(Ni.$$.fragment,i),h(Fi.$$.fragment,i),h(Pi.$$.fragment,i),h(Ai.$$.fragment,i),h(Li.$$.fragment,i),h(Si.$$.fragment,i),h(Oi.$$.fragment,i),h(Ci.$$.fragment,i),h(qi.$$.fragment,i),h(zi.$$.fragment,i),h(Vi.$$.fragment,i),h(Mi.$$.fragment,i),h(Ui.$$.fragment,i),h(Ri.$$.fragment,i),h(Bi.$$.fragment,i),h(Hi.$$.fragment,i),h(Ki.$$.fragment,i),h(Yi.$$.fragment,i),h(Ji.$$.fragment,i),h(Zi.$$.fragment,i),h(Qi.$$.fragment,i),h(ed.$$.fragment,i),h(td.$$.fragment,i),h(ad.$$.fragment,i),h(sd.$$.fragment,i),h(rd.$$.fragment,i),h(id.$$.fragment,i),h(dd.$$.fragment,i),h(ld.$$.fragment,i),h(cd.$$.fragment,i),h(pd.$$.fragment,i),h(md.$$.fragment,i),h(fd.$$.fragment,i),h(hd.$$.fragment,i),h(ud.$$.fragment,i),h(gd.$$.fragment,i),h(_d.$$.fragment,i),h(vd.$$.fragment,i),h(bd.$$.fragment,i),h(yd.$$.fragment,i),h($d.$$.fragment,i),h(Dd.$$.fragment,i),h(Ed.$$.fragment,i),h(Id.$$.fragment,i),h(Nd.$$.fragment,i),h(Fd.$$.fragment,i),h(Pd.$$.fragment,i),h(Ad.$$.fragment,i),h(Ld.$$.fragment,i),h(Sd.$$.fragment,i),h(Od.$$.fragment,i),h(jd.$$.fragment,i),h(Cd.$$.fragment,i),h(qd.$$.fragment,i),h(zd.$$.fragment,i),h(Vd.$$.fragment,i),h(Md.$$.fragment,i),h(Ud.$$.fragment,i),h(Rd.$$.fragment,i),h(Bd.$$.fragment,i),h(Gd.$$.fragment,i),h(Kd.$$.fragment,i),h(Wd.$$.fragment,i),h($n.$$.fragment,i),h(el.$$.fragment,i),h(tl.$$.fragment,i),h(al.$$.fragment,i),h(sl.$$.fragment,i),h(nl.$$.fragment,i),h(rl.$$.fragment,i),h(ol.$$.fragment,i),h(il.$$.fragment,i),h(dl.$$.fragment,i),h(ll.$$.fragment,i),h(cl.$$.fragment,i),h(pl.$$.fragment,i),h(ml.$$.fragment,i),h(fl.$$.fragment,i),h(ul.$$.fragment,i),h(gl.$$.fragment,i),h(_l.$$.fragment,i),h(vl.$$.fragment,i),h(yl.$$.fragment,i),h($l.$$.fragment,i),h(wl.$$.fragment,i),h(xl.$$.fragment,i),h(kl.$$.fragment,i),h(Tl.$$.fragment,i),h(Fl.$$.fragment,i),h(Pl.$$.fragment,i),h(zl.$$.fragment,i),h(Vl.$$.fragment,i),h(Ml.$$.fragment,i),h(Ul.$$.fragment,i),h(Rl.$$.fragment,i),h(Zl.$$.fragment,i),h(Ql.$$.fragment,i),h(ec.$$.fragment,i),h(tc.$$.fragment,i),h(ac.$$.fragment,i),h(sc.$$.fragment,i),h(nc.$$.fragment,i),h(oc.$$.fragment,i),h(ic.$$.fragment,i),h(dc.$$.fragment,i),h(lc.$$.fragment,i),h(cc.$$.fragment,i),h(pc.$$.fragment,i),h(mc.$$.fragment,i),h(fc.$$.fragment,i),h(hc.$$.fragment,i),h(_c.$$.fragment,i),h(vc.$$.fragment,i),h(bc.$$.fragment,i),h(yc.$$.fragment,i),hy=!0)},o(i){u(ie.$$.fragment,i),u(dt.$$.fragment,i),u(wr.$$.fragment,i),u(Dr.$$.fragment,i),u(Er.$$.fragment,i),u(kr.$$.fragment,i),u(Ir.$$.fragment,i),u(Tr.$$.fragment,i),u(Nr.$$.fragment,i),u(Fr.$$.fragment,i),u(Pr.$$.fragment,i),u(Ar.$$.fragment,i),u(Or.$$.fragment,i),u(jr.$$.fragment,i),u(Cr.$$.fragment,i),u(qr.$$.fragment,i),u(zr.$$.fragment,i),u(Mr.$$.fragment,i),u(Ur.$$.fragment,i),u(Rr.$$.fragment,i),u(Br.$$.fragment,i),u(Hr.$$.fragment,i),u(Gr.$$.fragment,i),u(Kr.$$.fragment,i),u(Wr.$$.fragment,i),u(Yr.$$.fragment,i),u(Xr.$$.fragment,i),u(Zr.$$.fragment,i),u(eo.$$.fragment,i),u(to.$$.fragment,i),u(ao.$$.fragment,i),u(so.$$.fragment,i),u(ro.$$.fragment,i),u(io.$$.fragment,i),u(lo.$$.fragment,i),u(co.$$.fragment,i),u(po.$$.fragment,i),u(mo.$$.fragment,i),u(fo.$$.fragment,i),u(ho.$$.fragment,i),u(uo.$$.fragment,i),u(go.$$.fragment,i),u(vo.$$.fragment,i),u(yo.$$.fragment,i),u($o.$$.fragment,i),u(wo.$$.fragment,i),u(Do.$$.fragment,i),u(xo.$$.fragment,i),u(Eo.$$.fragment,i),u(ko.$$.fragment,i),u(Io.$$.fragment,i),u(No.$$.fragment,i),u(Fo.$$.fragment,i),u(Po.$$.fragment,i),u(Ao.$$.fragment,i),u(So.$$.fragment,i),u(Oo.$$.fragment,i),u(Co.$$.fragment,i),u(qo.$$.fragment,i),u(Vo.$$.fragment,i),u(Mo.$$.fragment,i),u(Uo.$$.fragment,i),u(Ro.$$.fragment,i),u(Bo.$$.fragment,i),u(Ho.$$.fragment,i),u(Go.$$.fragment,i),u(Ko.$$.fragment,i),u(Wo.$$.fragment,i),u(Yo.$$.fragment,i),u(Jo.$$.fragment,i),u(Xo.$$.fragment,i),u(Zo.$$.fragment,i),u(Qo.$$.fragment,i),u(ei.$$.fragment,i),u(ti.$$.fragment,i),u(ai.$$.fragment,i),u(si.$$.fragment,i),u(ni.$$.fragment,i),u(ri.$$.fragment,i),u(oi.$$.fragment,i),u(ii.$$.fragment,i),u(di.$$.fragment,i),u(li.$$.fragment,i),u(ci.$$.fragment,i),u(pi.$$.fragment,i),u(mi.$$.fragment,i),u(fi.$$.fragment,i),u(hi.$$.fragment,i),u(ui.$$.fragment,i),u(gi.$$.fragment,i),u(_i.$$.fragment,i),u(vi.$$.fragment,i),u(yi.$$.fragment,i),u($i.$$.fragment,i),u(wi.$$.fragment,i),u(Di.$$.fragment,i),u(xi.$$.fragment,i),u(ki.$$.fragment,i),u(Ti.$$.fragment,i),u(Ni.$$.fragment,i),u(Fi.$$.fragment,i),u(Pi.$$.fragment,i),u(Ai.$$.fragment,i),u(Li.$$.fragment,i),u(Si.$$.fragment,i),u(Oi.$$.fragment,i),u(Ci.$$.fragment,i),u(qi.$$.fragment,i),u(zi.$$.fragment,i),u(Vi.$$.fragment,i),u(Mi.$$.fragment,i),u(Ui.$$.fragment,i),u(Ri.$$.fragment,i),u(Bi.$$.fragment,i),u(Hi.$$.fragment,i),u(Ki.$$.fragment,i),u(Yi.$$.fragment,i),u(Ji.$$.fragment,i),u(Zi.$$.fragment,i),u(Qi.$$.fragment,i),u(ed.$$.fragment,i),u(td.$$.fragment,i),u(ad.$$.fragment,i),u(sd.$$.fragment,i),u(rd.$$.fragment,i),u(id.$$.fragment,i),u(dd.$$.fragment,i),u(ld.$$.fragment,i),u(cd.$$.fragment,i),u(pd.$$.fragment,i),u(md.$$.fragment,i),u(fd.$$.fragment,i),u(hd.$$.fragment,i),u(ud.$$.fragment,i),u(gd.$$.fragment,i),u(_d.$$.fragment,i),u(vd.$$.fragment,i),u(bd.$$.fragment,i),u(yd.$$.fragment,i),u($d.$$.fragment,i),u(Dd.$$.fragment,i),u(Ed.$$.fragment,i),u(Id.$$.fragment,i),u(Nd.$$.fragment,i),u(Fd.$$.fragment,i),u(Pd.$$.fragment,i),u(Ad.$$.fragment,i),u(Ld.$$.fragment,i),u(Sd.$$.fragment,i),u(Od.$$.fragment,i),u(jd.$$.fragment,i),u(Cd.$$.fragment,i),u(qd.$$.fragment,i),u(zd.$$.fragment,i),u(Vd.$$.fragment,i),u(Md.$$.fragment,i),u(Ud.$$.fragment,i),u(Rd.$$.fragment,i),u(Bd.$$.fragment,i),u(Gd.$$.fragment,i),u(Kd.$$.fragment,i),u(Wd.$$.fragment,i),u($n.$$.fragment,i),u(el.$$.fragment,i),u(tl.$$.fragment,i),u(al.$$.fragment,i),u(sl.$$.fragment,i),u(nl.$$.fragment,i),u(rl.$$.fragment,i),u(ol.$$.fragment,i),u(il.$$.fragment,i),u(dl.$$.fragment,i),u(ll.$$.fragment,i),u(cl.$$.fragment,i),u(pl.$$.fragment,i),u(ml.$$.fragment,i),u(fl.$$.fragment,i),u(ul.$$.fragment,i),u(gl.$$.fragment,i),u(_l.$$.fragment,i),u(vl.$$.fragment,i),u(yl.$$.fragment,i),u($l.$$.fragment,i),u(wl.$$.fragment,i),u(xl.$$.fragment,i),u(kl.$$.fragment,i),u(Tl.$$.fragment,i),u(Fl.$$.fragment,i),u(Pl.$$.fragment,i),u(zl.$$.fragment,i),u(Vl.$$.fragment,i),u(Ml.$$.fragment,i),u(Ul.$$.fragment,i),u(Rl.$$.fragment,i),u(Zl.$$.fragment,i),u(Ql.$$.fragment,i),u(ec.$$.fragment,i),u(tc.$$.fragment,i),u(ac.$$.fragment,i),u(sc.$$.fragment,i),u(nc.$$.fragment,i),u(oc.$$.fragment,i),u(ic.$$.fragment,i),u(dc.$$.fragment,i),u(lc.$$.fragment,i),u(cc.$$.fragment,i),u(pc.$$.fragment,i),u(mc.$$.fragment,i),u(fc.$$.fragment,i),u(hc.$$.fragment,i),u(_c.$$.fragment,i),u(vc.$$.fragment,i),u(bc.$$.fragment,i),u(yc.$$.fragment,i),hy=!1},d(i){t(A),i&&t(ot),i&&t(O),g(ie),i&&t(Ga),i&&t(de),g(dt),i&&t(xb),i&&t(z),g(wr),g(Dr),g(Er),i&&t(Eb),i&&t(Qt),g(kr),i&&t(kb),i&&t(Ya),i&&t(Ib),i&&t(v),g(Ir),g(Tr),g(Nr),g(Fr),g(Pr),g(Ar),g(Or),g(jr),g(Cr),g(qr),g(zr),g(Mr),g(Ur),g(Rr),g(Br),g(Hr),g(Gr),g(Kr),g(Wr),g(Yr),g(Xr),g(Zr),g(eo),g(to),g(ao),g(so),g(ro),g(io),g(lo),g(co),g(po),g(mo),g(fo),g(ho),g(uo),g(go),g(vo),g(yo),g($o),g(wo),g(Do),g(xo),g(Eo),g(ko),g(Io),g(No),g(Fo),g(Po),g(Ao),g(So),g(Oo),g(Co),g(qo),g(Vo),g(Mo),g(Uo),g(Ro),g(Bo),g(Ho),g(Go),g(Ko),g(Wo),g(Yo),g(Jo),g(Xo),g(Zo),g(Qo),g(ei),g(ti),g(ai),g(si),g(ni),g(ri),g(oi),g(ii),g(di),g(li),g(ci),g(pi),g(mi),g(fi),g(hi),g(ui),g(gi),g(_i),g(vi),g(yi),i&&t(Tb),i&&t(pa),g($i),i&&t(Nb),i&&t(C),g(wi),g(Di),i&&t(Fb),i&&t(X),g(xi),i&&t(Pb),i&&t(Z),g(ki),i&&t(Ab),i&&t(ha),g(Ti),i&&t(Lb),i&&t(ua),g(Ni),i&&t(Sb),i&&t(ga),g(Fi),i&&t(Ob),i&&t(Us),i&&t(jb),i&&t(w),g(Pi),g(Ai),g(Li),g(Si),g(Oi),g(Ci),g(qi),g(zi),g(Vi),g(Mi),g(Ui),g(Ri),g(Bi),g(Hi),g(Ki),g(Yi),g(Ji),g(Zi),g(Qi),g(ed),g(td),g(ad),g(sd),g(rd),g(id),g(dd),g(ld),g(cd),g(pd),g(md),g(fd),g(hd),g(ud),i&&t(Cb),i&&t(Fp),i&&t(qb),i&&t(Ta),g(gd),i&&t(zb),i&&t(pn),i&&t(Vb),i&&t(x),g(_d),g(vd),g(bd),g(yd),g($d),g(Dd),g(Ed),g(Id),g(Nd),g(Fd),g(Pd),g(Ad),g(Ld),g(Sd),g(Od),g(jd),g(Cd),g(qd),g(zd),g(Vd),g(Md),g(Ud),g(Rd),i&&t(Mb),i&&t(Pa),g(Bd),i&&t(Ub),i&&t(bn),i&&t(Rb),i&&t(Hd),g(Gd),i&&t(Bb),i&&t(Aa),g(Kd),i&&t(Hb),i&&t(T),g(Wd),g($n),g(el),g(tl),g(al),g(sl),g(nl),g(rl),g(ol),g(il),g(dl),g(ll),g(cl),g(pl),i&&t(Gb),i&&t(La),g(ml),i&&t(Kb),i&&t(V),g(fl),g(ul),g(gl),i&&t(Wb),i&&t(at),g(_l),i&&t(Yb),i&&t(M),g(vl),g(yl),i&&t(Jb),i&&t(U),g($l),g(wl),i&&t(Xb),i&&t(Dl),g(xl),i&&t(Zb),i&&t(El),g(kl),i&&t(Qb),i&&t(Il),g(Tl),i&&t(ey),i&&t(Nl),g(Fl),i&&t(ty),i&&t(F),g(Pl),g(zl),g(Vl),g(Ml),g(Ul),i&&t(ay),i&&t(P),g(Rl),g(Zl),g(Ql),g(ec),g(tc),i&&t(sy),i&&t(ja),g(ac),i&&t(ny),i&&t(R),g(sc),g(nc),g(oc),i&&t(ry),i&&t(qa),g(ic),i&&t(oy),i&&t(At),i&&t(iy),i&&t(B),g(dc),g(lc),g(cc),g(pc),g(mc),i&&t(dy),i&&t(za),g(fc),i&&t(ly),i&&t(nt),g(hc),i&&t(cy),i&&t(Va),g(_c),i&&t(py),i&&t(Ua),g(vc),i&&t(my),i&&t(Ra),g(bc),i&&t(fy),i&&t(Ba),g(yc)}}}const rG={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.IterableDatasetDict",title:"IterableDatasetDict"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function oG(Ef,A,ot){let{fw:O}=A;return Ef.$$set=J=>{"fw"in J&&ot(0,O=J.fw)},[O]}class mG extends ZH{constructor(A){super();QH(this,A,oG,nG,eG,{fw:0})}}export{mG as default,rG as metadata};
