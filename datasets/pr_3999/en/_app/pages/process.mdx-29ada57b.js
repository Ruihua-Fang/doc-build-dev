import{S as Eb,i as Db,s as Ab,e as t,k as h,w as f,t as r,M as Tb,c as n,d as e,m as c,a as l,x as u,h as p,b as m,F as a,g as i,y as d,q as g,o as _,B as j,v as Pb}from"../chunks/vendor-aa873a46.js";import{T as al}from"../chunks/Tip-f7f252ab.js";import{I as E}from"../chunks/IconCopyLink-d0ca3106.js";import{C as w}from"../chunks/CodeBlock-1f14baf3.js";function qb(z){let b,k,v,$,D;return{c(){b=t("p"),k=r("All the processing methods in this guide return a new "),v=t("a"),$=r("Dataset"),D=r(". Modification is not done in-place. Be careful about overriding your previous dataset!"),this.h()},l(x){b=n(x,"P",{});var y=l(b);k=p(y,"All the processing methods in this guide return a new "),v=n(y,"A",{href:!0});var A=l(v);$=p(A,"Dataset"),A.forEach(e),D=p(y,". Modification is not done in-place. Be careful about overriding your previous dataset!"),y.forEach(e),this.h()},h(){m(v,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset")},m(x,y){i(x,b,y),a(b,k),a(b,v),a(v,$),a(b,D)},d(x){x&&e(b)}}}function Sb(z){let b,k,v,$,D,x,y,A;return{c(){b=t("p"),k=r("Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),v=t("code"),$=r("Value('int32')"),D=r(" to "),x=t("code"),y=r("Value('bool')"),A=r(" if the original column only contains ones and zeros.")},l(C){b=n(C,"P",{});var S=l(b);k=p(S,"Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),v=n(S,"CODE",{});var L=l(v);$=p(L,"Value('int32')"),L.forEach(e),D=p(S," to "),x=n(S,"CODE",{});var M=l(x);y=p(M,"Value('bool')"),M.forEach(e),A=p(S," if the original column only contains ones and zeros."),S.forEach(e)},m(C,S){i(C,b,S),a(b,k),a(b,v),a(v,$),a(b,D),a(b,x),a(x,y),a(b,A)},d(C){C&&e(b)}}}function Cb(z){let b,k,v,$,D;return{c(){b=t("p"),k=r("\u{1F917} Datasets also has a "),v=t("a"),$=r("Dataset.remove_columns()"),D=r(" method that is functionally identical, but faster, because it doesn\u2019t copy the data of the remaining columns."),this.h()},l(x){b=n(x,"P",{});var y=l(b);k=p(y,"\u{1F917} Datasets also has a "),v=n(y,"A",{href:!0});var A=l(v);$=p(A,"Dataset.remove_columns()"),A.forEach(e),D=p(y," method that is functionally identical, but faster, because it doesn\u2019t copy the data of the remaining columns."),y.forEach(e),this.h()},h(){m(v,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.remove_columns")},m(x,y){i(x,b,y),a(b,k),a(b,v),a(v,$),a(b,D)},d(x){x&&e(b)}}}function Nb(z){let b,k,v,$,D,x,y,A,C,S,L,M,Us,K,Q,Vs,T,U,Ga,Ja;return{c(){b=t("p"),k=r("You can also mix several datasets together by taking alternating examples from each one to create a new dataset. This is known as interleaving, and you can use it with "),v=t("a"),$=r("interleave_datasets()"),D=r(". Both "),x=t("a"),y=r("interleave_datasets()"),A=r(" and "),C=t("a"),S=r("concatenate_datasets()"),L=r(" will work with regular "),M=t("a"),Us=r("Dataset"),K=r(" and "),Q=t("a"),Vs=r("IterableDataset"),T=r(" objects. Refer to the "),U=t("a"),Ga=r("Stream"),Ja=r(" section for an example of how it\u2019s used."),this.h()},l(W){b=n(W,"P",{});var P=l(b);k=p(P,"You can also mix several datasets together by taking alternating examples from each one to create a new dataset. This is known as interleaving, and you can use it with "),v=n(P,"A",{href:!0});var Dt=l(v);$=p(Dt,"interleave_datasets()"),Dt.forEach(e),D=p(P,". Both "),x=n(P,"A",{href:!0});var Hs=l(x);y=p(Hs,"interleave_datasets()"),Hs.forEach(e),A=p(P," and "),C=n(P,"A",{href:!0});var At=l(C);S=p(At,"concatenate_datasets()"),At.forEach(e),L=p(P," will work with regular "),M=n(P,"A",{href:!0});var Tt=l(M);Us=p(Tt,"Dataset"),Tt.forEach(e),K=p(P," and "),Q=n(P,"A",{href:!0});var Ys=l(Q);Vs=p(Ys,"IterableDataset"),Ys.forEach(e),T=p(P," objects. Refer to the "),U=n(P,"A",{href:!0});var Pt=l(U);Ga=p(Pt,"Stream"),Pt.forEach(e),Ja=p(P," section for an example of how it\u2019s used."),P.forEach(e),this.h()},h(){m(v,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.interleave_datasets"),m(x,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.interleave_datasets"),m(C,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.concatenate_datasets"),m(M,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset"),m(Q,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.IterableDataset"),m(U,"href","./stream#interleave")},m(W,P){i(W,b,P),a(b,k),a(b,v),a(v,$),a(b,D),a(b,x),a(x,y),a(b,A),a(b,C),a(C,S),a(b,L),a(b,M),a(M,Us),a(b,K),a(b,Q),a(Q,Vs),a(b,T),a(b,U),a(U,Ga),a(b,Ja)},d(W){W&&e(b)}}}function zb(z){let b,k;return{c(){b=t("p"),k=r("\u{1F917} Datasets also provides support for other common data formats such as NumPy, PyTorch, Pandas, and JAX.")},l(v){b=n(v,"P",{});var $=l(b);k=p($,"\u{1F917} Datasets also provides support for other common data formats such as NumPy, PyTorch, Pandas, and JAX."),$.forEach(e)},m(v,$){i(v,b,$),a(b,k)},d(v){v&&e(b)}}}function Fb(z){let b,k,v,$,D;return{c(){b=t("p"),k=r("Want to save your dataset to a cloud storage provider? Read our "),v=t("a"),$=r("Cloud Storage"),D=r(" guide on how to save your dataset to AWS or Google Cloud Storage!"),this.h()},l(x){b=n(x,"P",{});var y=l(b);k=p(y,"Want to save your dataset to a cloud storage provider? Read our "),v=n(y,"A",{href:!0});var A=l(v);$=p(A,"Cloud Storage"),A.forEach(e),D=p(y," guide on how to save your dataset to AWS or Google Cloud Storage!"),y.forEach(e),this.h()},h(){m(v,"href","./filesystems")},m(x,y){i(x,b,y),a(b,k),a(b,v),a(v,$),a(b,D)},d(x){x&&e(b)}}}function Ob(z){let b,k,v,$,D,x,y,A,C,S,L,M,Us,K,Q,Vs,T,U,Ga,Ja,W,P,Dt,Hs,At,Tt,Ys,Pt,Vh,el,Hh,Yh,tl,Wh,cp,qt,Gh,mp,Ka,fp,Ws,up,us,Gs,nl,Qa,Jh,ll,Kh,dp,St,Qh,gp,ds,Js,rl,Xa,Xh,pl,Zh,_p,Ks,sc,Ct,ac,ec,jp,Za,bp,gs,Qs,ol,se,tc,il,nc,vp,V,lc,Nt,rc,pc,hl,oc,ic,cl,hc,cc,wp,ae,xp,_s,Xs,ml,ee,mc,fl,fc,$p,X,uc,zt,dc,gc,Ft,_c,jc,yp,Ot,Rt,It,bc,vc,kp,te,Ep,Lt,Mt,Bt,wc,xc,Dp,ne,Ap,js,Ut,$c,yc,ul,kc,Ec,Tp,le,Pp,bs,Zs,dl,re,Dc,gl,Ac,qp,vs,Vt,Tc,Pc,_l,qc,Sc,Sp,pe,Cp,sa,Cc,jl,Nc,zc,Np,ws,aa,bl,oe,Fc,vl,Oc,zp,H,Rc,wl,Ic,Lc,Ht,Mc,Bc,xl,Uc,Vc,Fp,ea,Hc,ie,Yc,Wc,Op,he,Rp,Yt,Gc,Ip,ce,Lp,xs,ta,$l,me,Jc,yl,Kc,Mp,Wt,Qc,Bp,$s,na,kl,fe,Xc,El,Zc,Up,la,sm,Gt,am,em,Vp,ra,tm,Jt,nm,lm,Hp,ue,Yp,ys,pa,Dl,de,rm,Al,pm,Wp,oa,om,Kt,im,hm,Gp,ge,Jp,ks,ia,Tl,_e,cm,Pl,mm,Kp,B,Qt,fm,um,ql,dm,gm,Sl,_m,jm,Cl,bm,vm,Qp,je,Xp,ha,Zp,ca,wm,Xt,xm,$m,so,be,ao,Es,ma,Nl,ve,ym,zl,km,eo,fa,Em,Zt,Dm,Am,to,we,no,F,Tm,Fl,Pm,qm,Ol,Sm,Cm,Rl,Nm,zm,sn,Fm,Om,lo,xe,ro,Z,Rm,Il,Im,Lm,Ll,Mm,Bm,po,Ds,ua,Ml,$e,Um,Bl,Vm,oo,ss,Hm,an,Ym,Wm,ye,Gm,Jm,io,ke,ho,en,Km,co,Ee,mo,da,Qm,tn,Xm,Zm,fo,De,uo,nn,sf,go,As,ga,Ul,Ae,af,Vl,ef,_o,as,tf,ln,nf,lf,rn,rf,pf,jo,O,of,Hl,hf,cf,Yl,mf,ff,Wl,uf,df,Gl,gf,_f,bo,Te,vo,_a,jf,pn,bf,vf,wo,Pe,xo,ja,wf,on,xf,$f,$o,es,yf,Jl,kf,Ef,hn,Df,Af,yo,qe,ko,ba,Eo,ts,Tf,cn,Pf,qf,Kl,Sf,Cf,Do,Se,Ao,q,Nf,mn,zf,Ff,Ql,Of,Rf,Xl,If,Lf,Zl,Mf,Bf,sr,Uf,Vf,ar,Hf,Yf,er,Wf,Gf,To,Ce,Po,Ts,va,tr,Ne,Jf,nr,Kf,qo,ns,Qf,lr,Xf,Zf,fn,su,au,So,ze,Co,Ps,wa,rr,Fe,eu,pr,tu,No,G,un,nu,lu,or,ru,pu,ir,ou,iu,zo,qs,xa,hr,Oe,hu,cr,cu,Fo,dn,mu,Oo,gn,fu,Ro,Re,Io,$a,uu,mr,du,gu,Lo,Ie,Mo,R,_u,fr,ju,bu,ur,vu,wu,dr,xu,$u,gr,yu,ku,Bo,Ss,ya,_r,Le,Eu,jr,Du,Uo,_n,Au,Vo,ka,br,Me,Tu,vr,Pu,qu,Su,wr,xr,Cu,Ho,Be,Yo,Ea,Nu,jn,zu,Fu,Wo,Ue,Go,bn,Ou,Jo,Ve,Ko,Cs,Da,$r,He,Ru,yr,Iu,Qo,vn,Lu,Xo,ls,Mu,Ye,Bu,Uu,We,Vu,Hu,Zo,Ge,si,wn,Yu,ai,Je,ei,Aa,Wu,xn,Gu,Ju,ti,Ke,ni,I,Ku,kr,Qu,Xu,Er,Zu,sd,Dr,ad,ed,Ar,td,nd,li,Ns,Ta,Tr,Qe,ld,Pr,rd,ri,rs,pd,$n,od,id,qr,hd,cd,pi,Xe,oi,zs,Pa,Sr,Ze,md,Cr,fd,ii,ps,ud,yn,dd,gd,st,_d,jd,hi,qa,bd,Nr,vd,wd,ci,at,mi,Fs,Sa,zr,et,xd,Fr,$d,fi,Ca,yd,kn,kd,Ed,ui,tt,di,Na,gi,En,Dd,_i,nt,ji,Os,za,Or,lt,Ad,Rr,Td,bi,os,Pd,Dn,qd,Sd,Ir,Cd,Nd,vi,rt,wi,is,zd,pt,Fd,Od,Lr,Rd,Id,xi,ot,$i,Rs,An,Ld,Md,Tn,Bd,Ud,yi,it,ki,Fa,Ei,Oa,Vd,Pn,Hd,Yd,Di,ht,Ai,Is,Ra,Mr,ct,Wd,Br,Gd,Ti,mt,qn,Jd,Kd,Pi,ft,qi,Sn,Qd,Si,Ls,Ia,Ur,ut,Xd,Vr,Zd,Ci,La,sg,Cn,ag,eg,Ni,Nn,tg,zi,dt,Fi,Ma,ng,zn,lg,rg,Oi,gt,Ri,Ba,Ii,Ms,Ua,Hr,_t,pg,Yr,og,Li,Fn,ig,Mi,Va,Wr,jt,Gr,hg,cg,Jr,mg,fg,J,bt,Kr,ug,dg,Qr,On,gg,_g,vt,Xr,jg,bg,Zr,Rn,vg,wg,wt,sp,xg,$g,ap,In,yg,kg,xt,ep,Eg,Dg,$t,Ln,Ag,Tg,Mn,Pg,Bi,Bn,qg,Ui,yt,Vi;return x=new E({}),Ka=new w({props:{code:`from datasets import load_dataset
dataset = load_dataset('glue', 'mrpc', split='train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)`}}),Ws=new al({props:{warning:!0,$$slots:{default:[qb]},$$scope:{ctx:z}}}),Qa=new E({}),Xa=new E({}),Za=new w({props:{code:`dataset['label'][:10]
sorted_dataset = dataset.sort('label')
sorted_dataset['label'][:10]
sorted_dataset['label'][-10:]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset = dataset.sort(<span class="hljs-string">&#x27;label&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset[<span class="hljs-string">&#x27;label&#x27;</span>][-<span class="hljs-number">10</span>:]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]`}}),se=new E({}),ae=new w({props:{code:`shuffled_dataset = sorted_dataset.shuffle(seed=42)
shuffled_dataset['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset = sorted_dataset.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),ee=new E({}),te=new w({props:{code:`small_dataset = dataset.select([0, 10, 20, 30, 40, 50])
len(small_dataset)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>small_dataset = dataset.select([<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(small_dataset)
<span class="hljs-number">6</span>`}}),ne=new w({props:{code:`start_with_ar = dataset.filter(lambda example: example['sentence1'].startswith('Ar'))
len(start_with_ar)
start_with_ar['sentence1']`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example: example[<span class="hljs-string">&#x27;sentence1&#x27;</span>].startswith(<span class="hljs-string">&#x27;Ar&#x27;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(start_with_ar)
<span class="hljs-number">6</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar[<span class="hljs-string">&#x27;sentence1&#x27;</span>]
[<span class="hljs-string">&#x27;Around 0335 GMT , Tab shares were up 19 cents , or 4.4 % , at A $ 4.56 , having earlier set a record high of A $ 4.57 .&#x27;</span>,
<span class="hljs-string">&#x27;Arison said Mann may have been one of the pioneers of the world music movement and he had a deep love of Brazilian music .&#x27;</span>,
<span class="hljs-string">&#x27;Arts helped coach the youth on an eighth-grade football team at Lombardi Middle School in Green Bay .&#x27;</span>,
<span class="hljs-string">&#x27;Around 9 : 00 a.m. EDT ( 1300 GMT ) , the euro was at $ 1.1566 against the dollar , up 0.07 percent on the day .&#x27;</span>,
<span class="hljs-string">&quot;Arguing that the case was an isolated example , Canada has threatened a trade backlash if Tokyo &#x27;s ban is not justified on scientific grounds .&quot;</span>,
<span class="hljs-string">&#x27;Artists are worried the plan would harm those who need help most - performers who have a difficult time lining up shows .&#x27;</span>
]`}}),le=new w({props:{code:`even_dataset = dataset.filter(lambda example, idx: idx % 2 == 0, with_indices=True)
len(even_dataset)
len(dataset) / 2`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>even_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example, idx: idx % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(even_dataset)
<span class="hljs-number">1834</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(dataset) / <span class="hljs-number">2</span>
<span class="hljs-number">1834.0</span>`}}),re=new E({}),pe=new w({props:{code:`dataset.train_test_split(test_size=0.1)
0.1 * len(dataset)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.train_test_split(test_size=<span class="hljs-number">0.1</span>)
{<span class="hljs-string">&#x27;train&#x27;</span>: Dataset(schema: {<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-string">&#x27;int32&#x27;</span>}, num_rows: <span class="hljs-number">3301</span>),
<span class="hljs-string">&#x27;test&#x27;</span>: Dataset(schema: {<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-string">&#x27;int32&#x27;</span>}, num_rows: <span class="hljs-number">367</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.1</span> * <span class="hljs-built_in">len</span>(dataset)
<span class="hljs-number">366.8</span>`}}),oe=new E({}),he=new w({props:{code:`from datasets import load_dataset
datasets = load_dataset('imdb', split='train')
print(dataset)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets = load_dataset(<span class="hljs-string">&#x27;imdb&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(dataset)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">25000</span>
})`}}),ce=new w({props:{code:`dataset.shard(num_shards=4, index=0)
print(25000/4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.shard(num_shards=<span class="hljs-number">4</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">6250</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-number">25000</span>/<span class="hljs-number">4</span>)
<span class="hljs-number">6250.0</span>`}}),me=new E({}),fe=new E({}),ue=new w({props:{code:`dataset
dataset = dataset.rename_column("sentence1", "sentenceA")
dataset = dataset.rename_column("sentence2", "sentenceB")
dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;sentence1&quot;</span>, <span class="hljs-string">&quot;sentenceA&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;sentence2&quot;</span>, <span class="hljs-string">&quot;sentenceB&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentenceA&#x27;</span>, <span class="hljs-string">&#x27;sentenceB&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})`}}),de=new E({}),ge=new w({props:{code:`dataset = dataset.remove_columns("label")
dataset
dataset = dataset.remove_columns(['sentence1', 'sentence2'])
dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns([<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})`}}),_e=new E({}),je=new w({props:{code:`dataset.features

from datasets import ClassLabel, Value
new_features = dataset.features.copy()
new_features["label"] = ClassLabel(names=['negative', 'positive'])
new_features["idx"] = Value('int64')
dataset = dataset.cast(new_features)
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;not_equivalent&#x27;</span>, <span class="hljs-string">&#x27;equivalent&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = dataset.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;idx&quot;</span>] = Value(<span class="hljs-string">&#x27;int64&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),ha=new al({props:{$$slots:{default:[Sb]},$$scope:{ctx:z}}}),be=new w({props:{code:`dataset.features

dataset = dataset.cast_column("audio", Audio(sampling_rate=16000))
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">44100</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),ve=new E({}),we=new w({props:{code:`from datasets import load_dataset
dataset = load_dataset('squad', split='train')
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;squad&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),xe=new w({props:{code:`flat_dataset = dataset.flatten()
flat_dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>flat_dataset = dataset.flatten()
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_dataset
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
 num_rows: <span class="hljs-number">87599</span>
})`}}),$e=new E({}),ke=new w({props:{code:"label2id = {'entailment': 0, 'neutral': 1, 'contradiction': 2}",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&#x27;entailment&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;neutral&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;contradiction&#x27;</span>: <span class="hljs-number">2</span>}'}}),Ee=new w({props:{code:'label2id = {"contradiction": 0, "neutral": 1, "entailment": 2}',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&quot;contradiction&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;neutral&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;entailment&quot;</span>: <span class="hljs-number">2</span>}'}}),De=new w({props:{code:`from datasets import load_dataset

mnli = load_dataset("glue", "mnli", split="train")
mnli_aligned = mnli.align_labels_with_mapping(label2id, "label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>mnli = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>mnli_aligned = mnli.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),Ae=new E({}),Te=new w({props:{code:`def add_prefix(example):
    example['sentence1'] = 'My sentence: ' + example['sentence1']
    return example`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&#x27;sentence1&#x27;</span>] = <span class="hljs-string">&#x27;My sentence: &#x27;</span> + example[<span class="hljs-string">&#x27;sentence1&#x27;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example`}}),Pe=new w({props:{code:`updated_dataset = small_dataset.map(add_prefix)
updated_dataset['sentence1'][:5]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = small_dataset.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset[<span class="hljs-string">&#x27;sentence1&#x27;</span>][:<span class="hljs-number">5</span>]
[<span class="hljs-string">&#x27;My sentence: Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&quot;My sentence: Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>,
<span class="hljs-string">&#x27;My sentence: They had published an advertisement on the Internet on June 10 , offering the cargo for sale , he added .&#x27;</span>,
<span class="hljs-string">&#x27;My sentence: Around 0335 GMT , Tab shares were up 19 cents , or 4.4 % , at A $ 4.56 , having earlier set a record high of A $ 4.57 .&#x27;</span>,
]`}}),qe=new w({props:{code:`updated_dataset = dataset.map(lambda example: {'new_sentence': example['sentence1']}, remove_columns=['sentence1'])
updated_dataset.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;new_sentence&#x27;</span>: example[<span class="hljs-string">&#x27;sentence1&#x27;</span>]}, remove_columns=[<span class="hljs-string">&#x27;sentence1&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset.column_names
[<span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;new_sentence&#x27;</span>]`}}),ba=new al({props:{$$slots:{default:[Cb]},$$scope:{ctx:z}}}),Se=new w({props:{code:`updated_dataset = dataset.map(lambda example, idx: {'sentence2': f'{idx}: ' + example['sentence2']}, with_indices=True)
updated_dataset['sentence2'][:5]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example, idx: {<span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">f&#x27;<span class="hljs-subst">{idx}</span>: &#x27;</span> + example[<span class="hljs-string">&#x27;sentence2&#x27;</span>]}, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset[<span class="hljs-string">&#x27;sentence2&#x27;</span>][:<span class="hljs-number">5</span>]
[<span class="hljs-string">&#x27;0: Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,
 <span class="hljs-string">&quot;1: Yucaipa bought Dominick &#x27;s in 1995 for $ 693 million and sold it to Safeway for $ 1.8 billion in 1998 .&quot;</span>,
 <span class="hljs-string">&quot;2: On June 10 , the ship &#x27;s owners had published an advertisement on the Internet , offering the explosives for sale .&quot;</span>,
 <span class="hljs-string">&#x27;3: Tab shares jumped 20 cents , or 4.6 % , to set a record closing high at A $ 4.57 .&#x27;</span>,
 <span class="hljs-string">&#x27;4: PG &amp; E Corp. shares jumped $ 1.63 or 8 percent to $ 21.03 on the New York Stock Exchange on Friday .&#x27;</span>
]`}}),Ce=new w({props:{code:`from multiprocess import set_start_method
import torch
import os
set_start_method("spawn")
def gpu_computation(example, rank):
    os.environ["CUDA_VISIBLE_DEVICES"] = str(rank % torch.cuda.device_count())
    # Your big GPU call goes here
    return examples
updated_dataset = dataset.map(gpu_computation, with_rank=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> multiprocess <span class="hljs-keyword">import</span> set_start_method
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>set_start_method(<span class="hljs-string">&quot;spawn&quot;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gpu_computation</span>(<span class="hljs-params">example, rank</span>):
<span class="hljs-meta">&gt;&gt;&gt; </span>    os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="hljs-built_in">str</span>(rank % torch.cuda.device_count())
<span class="hljs-meta">&gt;&gt;&gt; </span>    <span class="hljs-comment"># Your big GPU call goes here</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>    <span class="hljs-keyword">return</span> examples
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(gpu_computation, with_rank=<span class="hljs-literal">True</span>)`}}),Ne=new E({}),ze=new w({props:{code:"updated_dataset = dataset.map(lambda example, idx: {'sentence2': f'{idx}: ' + example['sentence2']}, num_proc=4)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example, idx: {<span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">f&#x27;<span class="hljs-subst">{idx}</span>: &#x27;</span> + example[<span class="hljs-string">&#x27;sentence2&#x27;</span>]}, num_proc=<span class="hljs-number">4</span>)'}}),Fe=new E({}),Oe=new E({}),Re=new w({props:{code:`from transformers import BertTokenizerFast
tokenizer = BertTokenizerFast.from_pretrained('bert-base-cased')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizerFast
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizerFast.from_pretrained(<span class="hljs-string">&#x27;bert-base-cased&#x27;</span>)`}}),Ie=new w({props:{code:`encoded_dataset = dataset.map(lambda examples: tokenizer(examples['sentence1']), batched=True)
encoded_dataset.column_names
encoded_dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> examples: tokenizer(examples[<span class="hljs-string">&#x27;sentence1&#x27;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.column_names
[<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-number">0</span>,
<span class="hljs-string">&#x27;input_ids&#x27;</span>: [  <span class="hljs-number">101</span>,  <span class="hljs-number">7277</span>,  <span class="hljs-number">2180</span>,  <span class="hljs-number">5303</span>,  <span class="hljs-number">4806</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">1711</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">2292</span>, <span class="hljs-number">1119</span>,  <span class="hljs-number">1270</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">7737</span>,   <span class="hljs-number">107</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">1104</span>,  <span class="hljs-number">9938</span>, <span class="hljs-number">4267</span>, <span class="hljs-number">12223</span>, <span class="hljs-number">21811</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">2554</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>],
<span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
<span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
}`}}),Le=new E({}),Be=new w({props:{code:`def chunk_examples(examples):
    chunks = []
    for sentence in examples['sentence1']:
        chunks += [sentence[i:i + 50] for i in range(0, len(sentence), 50)]
    return {'chunks': chunks}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">chunk_examples</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    chunks = []
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&#x27;sentence1&#x27;</span>]:
<span class="hljs-meta">... </span>        chunks += [sentence[i:i + <span class="hljs-number">50</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(sentence), <span class="hljs-number">50</span>)]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> {<span class="hljs-string">&#x27;chunks&#x27;</span>: chunks}`}}),Ue=new w({props:{code:`chunked_dataset = dataset.map(chunk_examples, batched=True, remove_columns=dataset.column_names)
chunked_dataset[:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset = dataset.<span class="hljs-built_in">map</span>(chunk_examples, batched=<span class="hljs-literal">True</span>, remove_columns=dataset.column_names)
<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset[:<span class="hljs-number">10</span>]
{<span class="hljs-string">&#x27;chunks&#x27;</span>: [<span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the &#x27;</span>,
            <span class="hljs-string">&#x27;witness &quot; , of deliberately distorting his evidenc&#x27;</span>,
            <span class="hljs-string">&#x27;e .&#x27;</span>,
            <span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain&quot;</span>,
            <span class="hljs-string">&#x27; to Safeway in 1998 for $ 2.5 billion .&#x27;</span>,
            <span class="hljs-string">&#x27;They had published an advertisement on the Interne&#x27;</span>,
            <span class="hljs-string">&#x27;t on June 10 , offering the cargo for sale , he ad&#x27;</span>,
            <span class="hljs-string">&#x27;ded .&#x27;</span>,
            <span class="hljs-string">&#x27;Around 0335 GMT , Tab shares were up 19 cents , or&#x27;</span>,
            <span class="hljs-string">&#x27; 4.4 % , at A $ 4.56 , having earlier set a record&#x27;</span>]}`}}),Ve=new w({props:{code:`dataset
chunked_dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
 features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
 num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset
Dataset(schema: {<span class="hljs-string">&#x27;chunks&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>}, num_rows: <span class="hljs-number">10470</span>)`}}),He=new E({}),Ge=new w({props:{code:`from random import randint
from transformers import pipeline

fillmask = pipeline('fill-mask', model='roberta-base')
mask_token = fillmask.tokenizer.mask_token
smaller_dataset = dataset.filter(lambda e, i: i<100, with_indices=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>fillmask = pipeline(<span class="hljs-string">&#x27;fill-mask&#x27;</span>, model=<span class="hljs-string">&#x27;roberta-base&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask_token = fillmask.tokenizer.mask_token
<span class="hljs-meta">&gt;&gt;&gt; </span>smaller_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> e, i: i&lt;<span class="hljs-number">100</span>, with_indices=<span class="hljs-literal">True</span>)`}}),Je=new w({props:{code:`def augment_data(examples):
    outputs = []
    for sentence in examples['sentence1']:
        words = sentence.split(' ')
        K = randint(1, len(words)-1)
        masked_sentence = " ".join(words[:K]  + [mask_token] + words[K+1:])
        predictions = fillmask(masked_sentence)
        augmented_sequences = [predictions[i]['sequence'] for i in range(3)]
        outputs += [sentence] + augmented_sequences
    return {'data': outputs}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">augment_data</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    outputs = []
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&#x27;sentence1&#x27;</span>]:
<span class="hljs-meta">... </span>        words = sentence.split(<span class="hljs-string">&#x27; &#x27;</span>)
<span class="hljs-meta">... </span>        K = randint(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(words)-<span class="hljs-number">1</span>)
<span class="hljs-meta">... </span>        masked_sentence = <span class="hljs-string">&quot; &quot;</span>.join(words[:K]  + [mask_token] + words[K+<span class="hljs-number">1</span>:])
<span class="hljs-meta">... </span>        predictions = fillmask(masked_sentence)
<span class="hljs-meta">... </span>        augmented_sequences = [predictions[i][<span class="hljs-string">&#x27;sequence&#x27;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]
<span class="hljs-meta">... </span>        outputs += [sentence] + augmented_sequences
...
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> {<span class="hljs-string">&#x27;data&#x27;</span>: outputs}`}}),Ke=new w({props:{code:`augmented_dataset = smaller_dataset.map(augment_data, batched=True, remove_columns=dataset.column_names, batch_size=8)
augmented_dataset[:9]['data']`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>augmented_dataset = smaller_dataset.<span class="hljs-built_in">map</span>(augment_data, batched=<span class="hljs-literal">True</span>, remove_columns=dataset.column_names, batch_size=<span class="hljs-number">8</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>augmented_dataset[:<span class="hljs-number">9</span>][<span class="hljs-string">&#x27;data&#x27;</span>]
[<span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately withholding his evidence.&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately suppressing his evidence.&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately destroying his evidence.&#x27;</span>,
 <span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>,
 <span class="hljs-string">&#x27;Yucaipa owned Dominick Stores before selling the chain to Safeway in 1998 for $ 2.5 billion.&#x27;</span>,
 <span class="hljs-string">&quot;Yucaipa owned Dominick&#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion.&quot;</span>,
 <span class="hljs-string">&#x27;Yucaipa owned Dominick Pizza before selling the chain to Safeway in 1998 for $ 2.5 billion.&#x27;</span>
]`}}),Qe=new E({}),Xe=new w({props:{code:`from datasets import load_dataset

dataset = load_dataset('glue', 'mrpc')
encoded_dataset = dataset.map(lambda examples: tokenizer(examples['sentence1']), batched=True)
encoded_dataset["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-comment"># load all the splits</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> examples: tokenizer(examples[<span class="hljs-string">&#x27;sentence1&#x27;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-number">0</span>,
<span class="hljs-string">&#x27;input_ids&#x27;</span>: [  <span class="hljs-number">101</span>,  <span class="hljs-number">7277</span>,  <span class="hljs-number">2180</span>,  <span class="hljs-number">5303</span>,  <span class="hljs-number">4806</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">1711</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">2292</span>, <span class="hljs-number">1119</span>,  <span class="hljs-number">1270</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">7737</span>,   <span class="hljs-number">107</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">1104</span>,  <span class="hljs-number">9938</span>, <span class="hljs-number">4267</span>, <span class="hljs-number">12223</span>, <span class="hljs-number">21811</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">2554</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>],
<span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
<span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
}`}}),Ze=new E({}),at=new w({props:{code:`from datasets import Dataset
import torch.distributed

dataset1 = Dataset.from_dict({"a": [0, 1, 2]})

if training_args.local_rank > 0:
    print("Waiting for main process to perform the mapping")
    torch.distributed.barrier()

dataset2 = dataset1.map(lambda x: {"a": x["a"] + 1})

if training_args.local_rank == 0:
    print("Loading results from main process")
    torch.distributed.barrier()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch.distributed

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> training_args.local_rank &gt; <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Waiting for main process to perform the mapping&quot;</span>)
<span class="hljs-meta">... </span>    torch.distributed.barrier()

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset2 = dataset1.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: {<span class="hljs-string">&quot;a&quot;</span>: x[<span class="hljs-string">&quot;a&quot;</span>] + <span class="hljs-number">1</span>})

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> training_args.local_rank == <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Loading results from main process&quot;</span>)
<span class="hljs-meta">... </span>    torch.distributed.barrier()`}}),et=new E({}),tt=new w({props:{code:`from datasets import concatenate_datasets, load_dataset

bookcorpus = load_dataset("bookcorpus", split="train")
wiki = load_dataset("wikipedia", "20200501.en", split="train")
wiki = wiki.remove_columns("title")  # only keep the text

assert bookcorpus.features.type == wiki.features.type
bert_dataset = concatenate_datasets([bookcorpus, wiki])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> concatenate_datasets, load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>bookcorpus = load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = load_dataset(<span class="hljs-string">&quot;wikipedia&quot;</span>, <span class="hljs-string">&quot;20200501.en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = wiki.remove_columns(<span class="hljs-string">&quot;title&quot;</span>)  <span class="hljs-comment"># only keep the text</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> bookcorpus.features.<span class="hljs-built_in">type</span> == wiki.features.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>bert_dataset = concatenate_datasets([bookcorpus, wiki])`}}),Na=new al({props:{$$slots:{default:[Nb]},$$scope:{ctx:z}}}),nt=new w({props:{code:`from datasets import Dataset
bookcorpus_ids = Dataset.from_dict({"ids": list(range(len(bookcorpus)))})
bookcorpus_with_ids = concatenate_datasets([bookcorpus, bookcorpus_ids], axis=1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>bookcorpus_ids = Dataset.from_dict({<span class="hljs-string">&quot;ids&quot;</span>: <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(bookcorpus)))})
<span class="hljs-meta">&gt;&gt;&gt; </span>bookcorpus_with_ids = concatenate_datasets([bookcorpus, bookcorpus_ids], axis=<span class="hljs-number">1</span>)`}}),lt=new E({}),rt=new w({props:{code:`import tensorflow as tf
dataset.set_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])`}}),ot=new w({props:{code:'tfdataset = tf.data.Dataset.from_tensor_slices((features, dataset["label"])).batch(32)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tfdataset = tf.data.Dataset.from_tensor_slices((features, dataset[<span class="hljs-string">&quot;label&quot;</span>])).batch(<span class="hljs-number">32</span>)'}}),it=new w({props:{code:"dataset = dataset.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])'}}),Fa=new al({props:{$$slots:{default:[zb]},$$scope:{ctx:z}}}),ht=new w({props:{code:`dataset.format
dataset.reset_format()
dataset.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;label&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}`}}),ct=new E({}),ft=new w({props:{code:`from transformers import BertTokenizer
tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")
def encode(batch):
    return tokenizer(batch["sentence1"], padding="longest", truncation=True, max_length=512, return_tensors="pt")
dataset.set_transform(encode)
dataset.format
dataset[:2]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&quot;sentence1&quot;</span>], padding=<span class="hljs-string">&quot;longest&quot;</span>, truncation=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">512</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;custom&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {<span class="hljs-string">&#x27;transform&#x27;</span>: &lt;function __main__.encode(batch)&gt;}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[:<span class="hljs-number">2</span>]
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([[  <span class="hljs-number">101</span>,  <span class="hljs-number">2572</span>,  <span class="hljs-number">3217</span>, ... <span class="hljs-number">102</span>]]), <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, ... <span class="hljs-number">0</span>]]), <span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, ... <span class="hljs-number">1</span>]])}`}}),ut=new E({}),dt=new w({props:{code:'encoded_dataset.save_to_disk("path/of/my/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.save_to_disk(<span class="hljs-string">&quot;path/of/my/dataset/directory&quot;</span>)'}}),gt=new w({props:{code:`from datasets import load_from_disk
reloaded_encoded_dataset = load_from_disk("path/of/my/dataset/directory")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span>reloaded_encoded_dataset = load_from_disk(<span class="hljs-string">&quot;path/of/my/dataset/directory&quot;</span>)`}}),Ba=new al({props:{$$slots:{default:[Fb]},$$scope:{ctx:z}}}),_t=new E({}),yt=new w({props:{code:'encoded_dataset.to_csv("path/of/my/dataset.csv")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.to_csv(<span class="hljs-string">&quot;path/of/my/dataset.csv&quot;</span>)'}}),{c(){b=t("meta"),k=h(),v=t("h1"),$=t("a"),D=t("span"),f(x.$$.fragment),y=h(),A=t("span"),C=r("Process"),S=h(),L=t("p"),M=r("\u{1F917} Datasets provides many tools for modifying the structure and content of a dataset. You can rearrange the order of rows or extract nested fields into their own columns. For more powerful processing applications, you can even alter the contents of a dataset by applying a function to the entire dataset to generate new rows and columns. These processing methods provide a lot of control and flexibility to mold your dataset into the desired shape and size with the appropriate features."),Us=h(),K=t("p"),Q=r("This guide will show you how to:"),Vs=h(),T=t("ul"),U=t("li"),Ga=r("Reorder rows and split the dataset."),Ja=h(),W=t("li"),P=r("Rename and remove columns, and other common column operations."),Dt=h(),Hs=t("li"),At=r("Apply processing functions to each example in a dataset."),Tt=h(),Ys=t("li"),Pt=r("Concatenate datasets."),Vh=h(),el=t("li"),Hh=r("Apply a custom formatting transform."),Yh=h(),tl=t("li"),Wh=r("Save and export processed datasets."),cp=h(),qt=t("p"),Gh=r("Load the MRPC dataset from the GLUE benchmark to follow along with our examples:"),mp=h(),f(Ka.$$.fragment),fp=h(),f(Ws.$$.fragment),up=h(),us=t("h2"),Gs=t("a"),nl=t("span"),f(Qa.$$.fragment),Jh=h(),ll=t("span"),Kh=r("Sort, shuffle, select, split, and shard"),dp=h(),St=t("p"),Qh=r("There are several methods for rearranging the structure of a dataset. These methods are useful for selecting only the rows you want, creating train and test splits, and sharding very large datasets into smaller chunks."),gp=h(),ds=t("h3"),Js=t("a"),rl=t("span"),f(Xa.$$.fragment),Xh=h(),pl=t("span"),Zh=r("Sort"),_p=h(),Ks=t("p"),sc=r("Use "),Ct=t("a"),ac=r("Dataset.sort()"),ec=r(" to sort a columns values according to their numerical values. The provided column must be NumPy compatible."),jp=h(),f(Za.$$.fragment),bp=h(),gs=t("h3"),Qs=t("a"),ol=t("span"),f(se.$$.fragment),tc=h(),il=t("span"),nc=r("Shuffle"),vp=h(),V=t("p"),lc=r("The "),Nt=t("a"),rc=r("Dataset.shuffle()"),pc=r(" method randomly rearranges the values of a column. You can specify the "),hl=t("code"),oc=r("generator"),ic=r(" argument in this method to use a different "),cl=t("code"),hc=r("numpy.random.Generator"),cc=r(" if you want more control over the algorithm used to shuffle the dataset."),wp=h(),f(ae.$$.fragment),xp=h(),_s=t("h3"),Xs=t("a"),ml=t("span"),f(ee.$$.fragment),mc=h(),fl=t("span"),fc=r("Select and Filter"),$p=h(),X=t("p"),uc=r("There are two options for filtering rows in a dataset: "),zt=t("a"),dc=r("Dataset.select()"),gc=r(" and "),Ft=t("a"),_c=r("Dataset.filter()"),jc=r("."),yp=h(),Ot=t("ul"),Rt=t("li"),It=t("a"),bc=r("Dataset.select()"),vc=r(" returns rows according to a list of indices:"),kp=h(),f(te.$$.fragment),Ep=h(),Lt=t("ul"),Mt=t("li"),Bt=t("a"),wc=r("Dataset.filter()"),xc=r(" returns rows that match a specified condition:"),Dp=h(),f(ne.$$.fragment),Ap=h(),js=t("p"),Ut=t("a"),$c=r("Dataset.filter()"),yc=r(" can also filter by indices if you set "),ul=t("code"),kc=r("with_indices=True"),Ec=r(":"),Tp=h(),f(le.$$.fragment),Pp=h(),bs=t("h3"),Zs=t("a"),dl=t("span"),f(re.$$.fragment),Dc=h(),gl=t("span"),Ac=r("Split"),qp=h(),vs=t("p"),Vt=t("a"),Tc=r("Dataset.train_test_split()"),Pc=r(" creates train and test splits, if your dataset doesn\u2019t already have them. This allows you to adjust the relative proportions or absolute number of samples in each split. In the example below, use the "),_l=t("code"),qc=r("test_size"),Sc=r(" argument to create a test split that is 10% of the original dataset:"),Sp=h(),f(pe.$$.fragment),Cp=h(),sa=t("p"),Cc=r("The splits are shuffled by default, but you can set "),jl=t("code"),Nc=r("shuffle=False"),zc=r(" to prevent shuffling."),Np=h(),ws=t("h3"),aa=t("a"),bl=t("span"),f(oe.$$.fragment),Fc=h(),vl=t("span"),Oc=r("Shard"),zp=h(),H=t("p"),Rc=r("\u{1F917} Datasets supports sharding to divide a very large dataset into a predefined number of chunks. Specify the "),wl=t("code"),Ic=r("num_shards"),Lc=r(" argument in "),Ht=t("a"),Mc=r("Dataset.shard()"),Bc=r(" to determine the number of shards to split the dataset into. You will also need to provide the shard you want to return with the "),xl=t("code"),Uc=r("index"),Vc=r(" argument."),Fp=h(),ea=t("p"),Hc=r("For example, the "),ie=t("a"),Yc=r("imdb"),Wc=r(" dataset has 25000 examples:"),Op=h(),f(he.$$.fragment),Rp=h(),Yt=t("p"),Gc=r("After you shard the dataset into four chunks, the first shard only has 6250 examples:"),Ip=h(),f(ce.$$.fragment),Lp=h(),xs=t("h2"),ta=t("a"),$l=t("span"),f(me.$$.fragment),Jc=h(),yl=t("span"),Kc=r("Rename, remove, cast, and flatten"),Mp=h(),Wt=t("p"),Qc=r("The following methods allow you to modify the columns of a dataset. These methods are useful for renaming or removing columns, changing columns to a new set of features, and flattening nested column structures."),Bp=h(),$s=t("h3"),na=t("a"),kl=t("span"),f(fe.$$.fragment),Xc=h(),El=t("span"),Zc=r("Rename"),Up=h(),la=t("p"),sm=r("Use "),Gt=t("a"),am=r("Dataset.rename_column()"),em=r(" when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),Vp=h(),ra=t("p"),tm=r("Provide "),Jt=t("a"),nm=r("Dataset.rename_column()"),lm=r(" with the name of the original column, and the new column name:"),Hp=h(),f(ue.$$.fragment),Yp=h(),ys=t("h3"),pa=t("a"),Dl=t("span"),f(de.$$.fragment),rm=h(),Al=t("span"),pm=r("Remove"),Wp=h(),oa=t("p"),om=r("When you need to remove one or more columns, give "),Kt=t("a"),im=r("Dataset.remove_columns()"),hm=r(" the name of the column to remove. Remove more than one column by providing a list of column names:"),Gp=h(),f(ge.$$.fragment),Jp=h(),ks=t("h3"),ia=t("a"),Tl=t("span"),f(_e.$$.fragment),cm=h(),Pl=t("span"),mm=r("Cast"),Kp=h(),B=t("p"),Qt=t("a"),fm=r("Dataset.cast()"),um=r(" changes the feature type of one or more columns. This method takes your new "),ql=t("code"),dm=r("Features"),gm=r(" as its argument. The following sample code shows how to change the feature types of "),Sl=t("code"),_m=r("ClassLabel"),jm=r(" and "),Cl=t("code"),bm=r("Value"),vm=r(":"),Qp=h(),f(je.$$.fragment),Xp=h(),f(ha.$$.fragment),Zp=h(),ca=t("p"),wm=r("Use "),Xt=t("a"),xm=r("Dataset.cast_column()"),$m=r(" to change the feature type of just one column. Pass the column name and its new feature type as arguments:"),so=h(),f(be.$$.fragment),ao=h(),Es=t("h3"),ma=t("a"),Nl=t("span"),f(ve.$$.fragment),ym=h(),zl=t("span"),km=r("Flatten"),eo=h(),fa=t("p"),Em=r("Sometimes a column can be a nested structure of several types. Use "),Zt=t("a"),Dm=r("Dataset.flatten()"),Am=r(" to extract the subfields into their own separate columns. Take a look at the nested structure below from the SQuAD dataset:"),to=h(),f(we.$$.fragment),no=h(),F=t("p"),Tm=r("The "),Fl=t("code"),Pm=r("answers"),qm=r(" field contains two subfields: "),Ol=t("code"),Sm=r("text"),Cm=r(" and "),Rl=t("code"),Nm=r("answer_start"),zm=r(". Flatten them with "),sn=t("a"),Fm=r("Dataset.flatten()"),Om=r(":"),lo=h(),f(xe.$$.fragment),ro=h(),Z=t("p"),Rm=r("Notice how the subfields are now their own independent columns: "),Il=t("code"),Im=r("answers.text"),Lm=r(" and "),Ll=t("code"),Mm=r("answers.answer_start"),Bm=r("."),po=h(),Ds=t("h2"),ua=t("a"),Ml=t("span"),f($e.$$.fragment),Um=h(),Bl=t("span"),Vm=r("Align"),oo=h(),ss=t("p"),Hm=r("The "),an=t("a"),Ym=r("Dataset.align_labels_with_mapping()"),Wm=r(" function aligns a dataset label id with the label name. Not all \u{1F917} Transformers models follow the prescribed label mapping of the original dataset, especially for NLI dataset labels. For example, the "),ye=t("a"),Gm=r("MNLI"),Jm=r(" dataset uses the following label mapping:"),io=h(),f(ke.$$.fragment),ho=h(),en=t("p"),Km=r("To align the dataset label mapping with the mapping used by a model, create a dictionary of the label name and id to align on:"),co=h(),f(Ee.$$.fragment),mo=h(),da=t("p"),Qm=r("Pass the dictionary of the label mappings to the "),tn=t("a"),Xm=r("Dataset.align_labels_with_mapping()"),Zm=r(" function, and the column to align on:"),fo=h(),f(De.$$.fragment),uo=h(),nn=t("p"),sf=r("You can also use this function to assign a custom mapping of labels to ids."),go=h(),As=t("h2"),ga=t("a"),Ul=t("span"),f(Ae.$$.fragment),af=h(),Vl=t("span"),ef=r("Map"),_o=h(),as=t("p"),tf=r("Some of the more powerful applications of \u{1F917} Datasets come from using "),ln=t("a"),nf=r("Dataset.map()"),lf=r(". The primary purpose of "),rn=t("a"),rf=r("Dataset.map()"),pf=r(" is to speed up processing functions. It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),jo=h(),O=t("p"),of=r("In the following example, you will prefix each "),Hl=t("code"),hf=r("sentence1"),cf=r(" value in the dataset with "),Yl=t("code"),mf=r("'My sentence: '"),ff=r(". First, create a function that adds "),Wl=t("code"),uf=r("'My sentence: '"),df=r(" to the beginning of each sentence. The function needs to accept and output a "),Gl=t("code"),gf=r("dict"),_f=r(":"),bo=h(),f(Te.$$.fragment),vo=h(),_a=t("p"),jf=r("Next, apply this function to the dataset with "),pn=t("a"),bf=r("Dataset.map()"),vf=r(":"),wo=h(),f(Pe.$$.fragment),xo=h(),ja=t("p"),wf=r("Let\u2019s take a look at another example, except this time, you will remove a column with "),on=t("a"),xf=r("Dataset.map()"),$f=r(". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),$o=h(),es=t("p"),yf=r("Specify the column to remove with the "),Jl=t("code"),kf=r("remove_columns"),Ef=r(" argument in "),hn=t("a"),Df=r("Dataset.map()"),Af=r(":"),yo=h(),f(qe.$$.fragment),ko=h(),f(ba.$$.fragment),Eo=h(),ts=t("p"),Tf=r("You can also use "),cn=t("a"),Pf=r("Dataset.map()"),qf=r(" with indices if you set "),Kl=t("code"),Sf=r("with_indices=True"),Cf=r(". The example below adds the index to the beginning of each sentence:"),Do=h(),f(Se.$$.fragment),Ao=h(),q=t("p"),Nf=r("You can also use "),mn=t("a"),zf=r("Dataset.map()"),Ff=r(" with the rank of the process if you set "),Ql=t("code"),Of=r("with_rank=True"),Rf=r(". This is analogous to "),Xl=t("code"),If=r("with_indices"),Lf=r(". The "),Zl=t("code"),Mf=r("rank"),Bf=r(" argument in the mapped function goes after the "),sr=t("code"),Uf=r("index"),Vf=r(" one if it is already present. The main use-case for it is to parallelize your computation across several GPUs. This requires setting "),ar=t("code"),Hf=r('multiprocess.set_start_method("spawn")'),Yf=r(", without which you will receive a CUDA error: "),er=t("code"),Wf=r("RuntimeError: Cannot re-initialize CUDA in forked subprocess. To use CUDA with multiprocessing, you must use the 'spawn' start method"),Gf=r("."),To=h(),f(Ce.$$.fragment),Po=h(),Ts=t("h3"),va=t("a"),tr=t("span"),f(Ne.$$.fragment),Jf=h(),nr=t("span"),Kf=r("Multiprocessing"),qo=h(),ns=t("p"),Qf=r("Multiprocessing can significantly speed up processing by parallelizing the processes on your CPU. Set the "),lr=t("code"),Xf=r("num_proc"),Zf=r(" argument in "),fn=t("a"),su=r("Dataset.map()"),au=r(" to set the number of processes to use:"),So=h(),f(ze.$$.fragment),Co=h(),Ps=t("h3"),wa=t("a"),rr=t("span"),f(Fe.$$.fragment),eu=h(),pr=t("span"),tu=r("Batch processing"),No=h(),G=t("p"),un=t("a"),nu=r("Dataset.map()"),lu=r(" also supports working with batches of examples. Operate on batches by setting "),or=t("code"),ru=r("batched=True"),pu=r(". The default batch size is 1000, but you can adjust it with the "),ir=t("code"),ou=r("batch_size"),iu=r(" argument. This opens the door to many interesting applications such as tokenization, splitting long sentences into shorter chunks, and data augmentation."),zo=h(),qs=t("h4"),xa=t("a"),hr=t("span"),f(Oe.$$.fragment),hu=h(),cr=t("span"),cu=r("Tokenization"),Fo=h(),dn=t("p"),mu=r("One of the most obvious use-cases for batch processing is tokenization, which accepts batches of inputs."),Oo=h(),gn=t("p"),fu=r("First, load the tokenizer from the BERT model:"),Ro=h(),f(Re.$$.fragment),Io=h(),$a=t("p"),uu=r("Apply the tokenizer to batches of the "),mr=t("code"),du=r("sentence1"),gu=r(" field:"),Lo=h(),f(Ie.$$.fragment),Mo=h(),R=t("p"),_u=r("Now you have three new columns, "),fr=t("code"),ju=r("input_ids"),bu=r(", "),ur=t("code"),vu=r("token_type_ids"),wu=r(", "),dr=t("code"),xu=r("attention_mask"),$u=r(", that contain the encoded version of the "),gr=t("code"),yu=r("sentence1"),ku=r(" field."),Bo=h(),Ss=t("h4"),ya=t("a"),_r=t("span"),f(Le.$$.fragment),Eu=h(),jr=t("span"),Du=r("Split long examples"),Uo=h(),_n=t("p"),Au=r("When your examples are too long, you may want to split them into several smaller snippets. Begin by creating a function that:"),Vo=h(),ka=t("ol"),br=t("li"),Me=t("p"),Tu=r("Splits the "),vr=t("code"),Pu=r("sentence1"),qu=r(" field into snippets of 50 characters."),Su=h(),wr=t("li"),xr=t("p"),Cu=r("Stacks all the snippets together to create the new dataset."),Ho=h(),f(Be.$$.fragment),Yo=h(),Ea=t("p"),Nu=r("Apply the function with "),jn=t("a"),zu=r("Dataset.map()"),Fu=r(":"),Wo=h(),f(Ue.$$.fragment),Go=h(),bn=t("p"),Ou=r("Notice how the sentences are split into shorter chunks now, and there are more rows in the dataset."),Jo=h(),f(Ve.$$.fragment),Ko=h(),Cs=t("h4"),Da=t("a"),$r=t("span"),f(He.$$.fragment),Ru=h(),yr=t("span"),Iu=r("Data augmentation"),Qo=h(),vn=t("p"),Lu=r("With batch processing, you can even augment your dataset with additional examples. In the following example, you will generate additional words for a masked token in a sentence."),Xo=h(),ls=t("p"),Mu=r("Load the "),Ye=t("a"),Bu=r("RoBERTA"),Uu=r(" model for use in the \u{1F917} Transformer "),We=t("a"),Vu=r("FillMaskPipeline"),Hu=r(":"),Zo=h(),f(Ge.$$.fragment),si=h(),wn=t("p"),Yu=r("Create a function to randomly select a word to mask in the sentence. The function should also return the original sentence and the top two replacements generated by RoBERTA."),ai=h(),f(Je.$$.fragment),ei=h(),Aa=t("p"),Wu=r("Use "),xn=t("a"),Gu=r("Dataset.map()"),Ju=r(" to apply the function over the whole dataset:"),ti=h(),f(Ke.$$.fragment),ni=h(),I=t("p"),Ku=r("For each original sentence, RoBERTA augmented a random word with three alternatives. In the first sentence, the word "),kr=t("code"),Qu=r("distorting"),Xu=r(" is augmented with "),Er=t("code"),Zu=r("withholding"),sd=r(", "),Dr=t("code"),ad=r("suppressing"),ed=r(", and "),Ar=t("code"),td=r("destroying"),nd=r("."),li=h(),Ns=t("h3"),Ta=t("a"),Tr=t("span"),f(Qe.$$.fragment),ld=h(),Pr=t("span"),rd=r("Process multiple splits"),ri=h(),rs=t("p"),pd=r("Many datasets have splits that you can process simultaneously with "),$n=t("a"),od=r("DatasetDict.map()"),id=r(". For example, tokenize the "),qr=t("code"),hd=r("sentence1"),cd=r(" field in the train and test split by:"),pi=h(),f(Xe.$$.fragment),oi=h(),zs=t("h3"),Pa=t("a"),Sr=t("span"),f(Ze.$$.fragment),md=h(),Cr=t("span"),fd=r("Distributed usage"),ii=h(),ps=t("p"),ud=r("When you use "),yn=t("a"),dd=r("Dataset.map()"),gd=r(" in a distributed setting, you should also use "),st=t("a"),_d=r("torch.distributed.barrier"),jd=r(". This ensures the main process performs the mapping, while the other processes load the results, thereby avoiding duplicate work."),hi=h(),qa=t("p"),bd=r("The following example shows how you can use "),Nr=t("code"),vd=r("torch.distributed.barrier"),wd=r(" to synchronize the processes:"),ci=h(),f(at.$$.fragment),mi=h(),Fs=t("h2"),Sa=t("a"),zr=t("span"),f(et.$$.fragment),xd=h(),Fr=t("span"),$d=r("Concatenate"),fi=h(),Ca=t("p"),yd=r("Separate datasets can be concatenated if they share the same column types. Concatenate datasets with "),kn=t("a"),kd=r("concatenate_datasets()"),Ed=r(":"),ui=h(),f(tt.$$.fragment),di=h(),f(Na.$$.fragment),gi=h(),En=t("p"),Dd=r("You can also concatenate two datasets horizontally (axis=1) as long as they have the same number of rows:"),_i=h(),f(nt.$$.fragment),ji=h(),Os=t("h2"),za=t("a"),Or=t("span"),f(lt.$$.fragment),Ad=h(),Rr=t("span"),Td=r("Format"),bi=h(),os=t("p"),Pd=r("Set a dataset to a TensorFlow compatible format with "),Dn=t("a"),qd=r("Dataset.set_format()"),Sd=r(". Specify "),Ir=t("code"),Cd=r("type=tensorflow"),Nd=r(" and the columns that should be formatted:"),vi=h(),f(rt.$$.fragment),wi=h(),is=t("p"),zd=r("Then you can wrap the dataset with [`~datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset]. This method gives you more control over how to create a "),pt=t("a"),Fd=r("TensorFlow Dataset"),Od=r(". In the example below, the dataset is created "),Lr=t("code"),Rd=r("from_tensor_slices"),Id=r(":"),xi=h(),f(ot.$$.fragment),$i=h(),Rs=t("p"),An=t("a"),Ld=r("Dataset.with_format()"),Md=r(" provides an alternative method to set the format. This method will return a new "),Tn=t("a"),Bd=r("Dataset"),Ud=r(" object with your specified format:"),yi=h(),f(it.$$.fragment),ki=h(),f(Fa.$$.fragment),Ei=h(),Oa=t("p"),Vd=r("Use "),Pn=t("a"),Hd=r("Dataset.reset_format()"),Yd=r(" if you need to reset the dataset to the original format:"),Di=h(),f(ht.$$.fragment),Ai=h(),Is=t("h3"),Ra=t("a"),Mr=t("span"),f(ct.$$.fragment),Wd=h(),Br=t("span"),Gd=r("Format transform"),Ti=h(),mt=t("p"),qn=t("a"),Jd=r("Dataset.set_transform()"),Kd=r(" allows you to apply a custom formatting transform on-the-fly. This will replace any previously specified format. For example, you can use this method to tokenize and pad tokens on-the-fly:"),Pi=h(),f(ft.$$.fragment),qi=h(),Sn=t("p"),Qd=r("In this case, the tokenization is applied only when the examples are accessed."),Si=h(),Ls=t("h2"),Ia=t("a"),Ur=t("span"),f(ut.$$.fragment),Xd=h(),Vr=t("span"),Zd=r("Save"),Ci=h(),La=t("p"),sg=r("Once you are done processing your dataset, you can save and reuse it later with "),Cn=t("a"),ag=r("Dataset.save_to_disk()"),eg=r("."),Ni=h(),Nn=t("p"),tg=r("Save your dataset by providing the path to the directory you wish to save it to:"),zi=h(),f(dt.$$.fragment),Fi=h(),Ma=t("p"),ng=r("When you want to use your dataset again, use "),zn=t("a"),lg=r("load_from_disk()"),rg=r(" to reload it:"),Oi=h(),f(gt.$$.fragment),Ri=h(),f(Ba.$$.fragment),Ii=h(),Ms=t("h2"),Ua=t("a"),Hr=t("span"),f(_t.$$.fragment),pg=h(),Yr=t("span"),og=r("Export"),Li=h(),Fn=t("p"),ig=r("\u{1F917} Datasets supports exporting as well, so you can work with your dataset in other applications. The following table shows currently supported file formats you can export to:"),Mi=h(),Va=t("table"),Wr=t("thead"),jt=t("tr"),Gr=t("th"),hg=r("File type"),cg=h(),Jr=t("th"),mg=r("Export method"),fg=h(),J=t("tbody"),bt=t("tr"),Kr=t("td"),ug=r("CSV"),dg=h(),Qr=t("td"),On=t("a"),gg=r("Dataset.to_csv()"),_g=h(),vt=t("tr"),Xr=t("td"),jg=r("JSON"),bg=h(),Zr=t("td"),Rn=t("a"),vg=r("Dataset.to_json()"),wg=h(),wt=t("tr"),sp=t("td"),xg=r("Parquet"),$g=h(),ap=t("td"),In=t("a"),yg=r("Dataset.to_parquet()"),kg=h(),xt=t("tr"),ep=t("td"),Eg=r("In-memory Python object"),Dg=h(),$t=t("td"),Ln=t("a"),Ag=r("Dataset.to_pandas()"),Tg=r(" or "),Mn=t("a"),Pg=r("Dataset.to_dict()"),Bi=h(),Bn=t("p"),qg=r("For example, export your dataset to a CSV file like this:"),Ui=h(),f(yt.$$.fragment),this.h()},l(s){const o=Tb('[data-svelte="svelte-1phssyn"]',document.head);b=n(o,"META",{name:!0,content:!0}),o.forEach(e),k=c(s),v=n(s,"H1",{class:!0});var kt=l(v);$=n(kt,"A",{id:!0,class:!0,href:!0});var tp=l($);D=n(tp,"SPAN",{});var np=l(D);u(x.$$.fragment,np),np.forEach(e),tp.forEach(e),y=c(kt),A=n(kt,"SPAN",{});var lp=l(A);C=p(lp,"Process"),lp.forEach(e),kt.forEach(e),S=c(s),L=n(s,"P",{});var rp=l(L);M=p(rp,"\u{1F917} Datasets provides many tools for modifying the structure and content of a dataset. You can rearrange the order of rows or extract nested fields into their own columns. For more powerful processing applications, you can even alter the contents of a dataset by applying a function to the entire dataset to generate new rows and columns. These processing methods provide a lot of control and flexibility to mold your dataset into the desired shape and size with the appropriate features."),rp.forEach(e),Us=c(s),K=n(s,"P",{});var pp=l(K);Q=p(pp,"This guide will show you how to:"),pp.forEach(e),Vs=c(s),T=n(s,"UL",{});var Y=l(T);U=n(Y,"LI",{});var zg=l(U);Ga=p(zg,"Reorder rows and split the dataset."),zg.forEach(e),Ja=c(Y),W=n(Y,"LI",{});var Fg=l(W);P=p(Fg,"Rename and remove columns, and other common column operations."),Fg.forEach(e),Dt=c(Y),Hs=n(Y,"LI",{});var Og=l(Hs);At=p(Og,"Apply processing functions to each example in a dataset."),Og.forEach(e),Tt=c(Y),Ys=n(Y,"LI",{});var Rg=l(Ys);Pt=p(Rg,"Concatenate datasets."),Rg.forEach(e),Vh=c(Y),el=n(Y,"LI",{});var Ig=l(el);Hh=p(Ig,"Apply a custom formatting transform."),Ig.forEach(e),Yh=c(Y),tl=n(Y,"LI",{});var Lg=l(tl);Wh=p(Lg,"Save and export processed datasets."),Lg.forEach(e),Y.forEach(e),cp=c(s),qt=n(s,"P",{});var Mg=l(qt);Gh=p(Mg,"Load the MRPC dataset from the GLUE benchmark to follow along with our examples:"),Mg.forEach(e),mp=c(s),u(Ka.$$.fragment,s),fp=c(s),u(Ws.$$.fragment,s),up=c(s),us=n(s,"H2",{class:!0});var Hi=l(us);Gs=n(Hi,"A",{id:!0,class:!0,href:!0});var Bg=l(Gs);nl=n(Bg,"SPAN",{});var Ug=l(nl);u(Qa.$$.fragment,Ug),Ug.forEach(e),Bg.forEach(e),Jh=c(Hi),ll=n(Hi,"SPAN",{});var Vg=l(ll);Kh=p(Vg,"Sort, shuffle, select, split, and shard"),Vg.forEach(e),Hi.forEach(e),dp=c(s),St=n(s,"P",{});var Hg=l(St);Qh=p(Hg,"There are several methods for rearranging the structure of a dataset. These methods are useful for selecting only the rows you want, creating train and test splits, and sharding very large datasets into smaller chunks."),Hg.forEach(e),gp=c(s),ds=n(s,"H3",{class:!0});var Yi=l(ds);Js=n(Yi,"A",{id:!0,class:!0,href:!0});var Yg=l(Js);rl=n(Yg,"SPAN",{});var Wg=l(rl);u(Xa.$$.fragment,Wg),Wg.forEach(e),Yg.forEach(e),Xh=c(Yi),pl=n(Yi,"SPAN",{});var Gg=l(pl);Zh=p(Gg,"Sort"),Gg.forEach(e),Yi.forEach(e),_p=c(s),Ks=n(s,"P",{});var Wi=l(Ks);sc=p(Wi,"Use "),Ct=n(Wi,"A",{href:!0});var Jg=l(Ct);ac=p(Jg,"Dataset.sort()"),Jg.forEach(e),ec=p(Wi," to sort a columns values according to their numerical values. The provided column must be NumPy compatible."),Wi.forEach(e),jp=c(s),u(Za.$$.fragment,s),bp=c(s),gs=n(s,"H3",{class:!0});var Gi=l(gs);Qs=n(Gi,"A",{id:!0,class:!0,href:!0});var Kg=l(Qs);ol=n(Kg,"SPAN",{});var Qg=l(ol);u(se.$$.fragment,Qg),Qg.forEach(e),Kg.forEach(e),tc=c(Gi),il=n(Gi,"SPAN",{});var Xg=l(il);nc=p(Xg,"Shuffle"),Xg.forEach(e),Gi.forEach(e),vp=c(s),V=n(s,"P",{});var Ha=l(V);lc=p(Ha,"The "),Nt=n(Ha,"A",{href:!0});var Zg=l(Nt);rc=p(Zg,"Dataset.shuffle()"),Zg.forEach(e),pc=p(Ha," method randomly rearranges the values of a column. You can specify the "),hl=n(Ha,"CODE",{});var s_=l(hl);oc=p(s_,"generator"),s_.forEach(e),ic=p(Ha," argument in this method to use a different "),cl=n(Ha,"CODE",{});var a_=l(cl);hc=p(a_,"numpy.random.Generator"),a_.forEach(e),cc=p(Ha," if you want more control over the algorithm used to shuffle the dataset."),Ha.forEach(e),wp=c(s),u(ae.$$.fragment,s),xp=c(s),_s=n(s,"H3",{class:!0});var Ji=l(_s);Xs=n(Ji,"A",{id:!0,class:!0,href:!0});var e_=l(Xs);ml=n(e_,"SPAN",{});var t_=l(ml);u(ee.$$.fragment,t_),t_.forEach(e),e_.forEach(e),mc=c(Ji),fl=n(Ji,"SPAN",{});var n_=l(fl);fc=p(n_,"Select and Filter"),n_.forEach(e),Ji.forEach(e),$p=c(s),X=n(s,"P",{});var Un=l(X);uc=p(Un,"There are two options for filtering rows in a dataset: "),zt=n(Un,"A",{href:!0});var l_=l(zt);dc=p(l_,"Dataset.select()"),l_.forEach(e),gc=p(Un," and "),Ft=n(Un,"A",{href:!0});var r_=l(Ft);_c=p(r_,"Dataset.filter()"),r_.forEach(e),jc=p(Un,"."),Un.forEach(e),yp=c(s),Ot=n(s,"UL",{});var p_=l(Ot);Rt=n(p_,"LI",{});var Sg=l(Rt);It=n(Sg,"A",{href:!0});var o_=l(It);bc=p(o_,"Dataset.select()"),o_.forEach(e),vc=p(Sg," returns rows according to a list of indices:"),Sg.forEach(e),p_.forEach(e),kp=c(s),u(te.$$.fragment,s),Ep=c(s),Lt=n(s,"UL",{});var i_=l(Lt);Mt=n(i_,"LI",{});var Cg=l(Mt);Bt=n(Cg,"A",{href:!0});var h_=l(Bt);wc=p(h_,"Dataset.filter()"),h_.forEach(e),xc=p(Cg," returns rows that match a specified condition:"),Cg.forEach(e),i_.forEach(e),Dp=c(s),u(ne.$$.fragment,s),Ap=c(s),js=n(s,"P",{});var op=l(js);Ut=n(op,"A",{href:!0});var c_=l(Ut);$c=p(c_,"Dataset.filter()"),c_.forEach(e),yc=p(op," can also filter by indices if you set "),ul=n(op,"CODE",{});var m_=l(ul);kc=p(m_,"with_indices=True"),m_.forEach(e),Ec=p(op,":"),op.forEach(e),Tp=c(s),u(le.$$.fragment,s),Pp=c(s),bs=n(s,"H3",{class:!0});var Ki=l(bs);Zs=n(Ki,"A",{id:!0,class:!0,href:!0});var f_=l(Zs);dl=n(f_,"SPAN",{});var u_=l(dl);u(re.$$.fragment,u_),u_.forEach(e),f_.forEach(e),Dc=c(Ki),gl=n(Ki,"SPAN",{});var d_=l(gl);Ac=p(d_,"Split"),d_.forEach(e),Ki.forEach(e),qp=c(s),vs=n(s,"P",{});var ip=l(vs);Vt=n(ip,"A",{href:!0});var g_=l(Vt);Tc=p(g_,"Dataset.train_test_split()"),g_.forEach(e),Pc=p(ip," creates train and test splits, if your dataset doesn\u2019t already have them. This allows you to adjust the relative proportions or absolute number of samples in each split. In the example below, use the "),_l=n(ip,"CODE",{});var __=l(_l);qc=p(__,"test_size"),__.forEach(e),Sc=p(ip," argument to create a test split that is 10% of the original dataset:"),ip.forEach(e),Sp=c(s),u(pe.$$.fragment,s),Cp=c(s),sa=n(s,"P",{});var Qi=l(sa);Cc=p(Qi,"The splits are shuffled by default, but you can set "),jl=n(Qi,"CODE",{});var j_=l(jl);Nc=p(j_,"shuffle=False"),j_.forEach(e),zc=p(Qi," to prevent shuffling."),Qi.forEach(e),Np=c(s),ws=n(s,"H3",{class:!0});var Xi=l(ws);aa=n(Xi,"A",{id:!0,class:!0,href:!0});var b_=l(aa);bl=n(b_,"SPAN",{});var v_=l(bl);u(oe.$$.fragment,v_),v_.forEach(e),b_.forEach(e),Fc=c(Xi),vl=n(Xi,"SPAN",{});var w_=l(vl);Oc=p(w_,"Shard"),w_.forEach(e),Xi.forEach(e),zp=c(s),H=n(s,"P",{});var Ya=l(H);Rc=p(Ya,"\u{1F917} Datasets supports sharding to divide a very large dataset into a predefined number of chunks. Specify the "),wl=n(Ya,"CODE",{});var x_=l(wl);Ic=p(x_,"num_shards"),x_.forEach(e),Lc=p(Ya," argument in "),Ht=n(Ya,"A",{href:!0});var $_=l(Ht);Mc=p($_,"Dataset.shard()"),$_.forEach(e),Bc=p(Ya," to determine the number of shards to split the dataset into. You will also need to provide the shard you want to return with the "),xl=n(Ya,"CODE",{});var y_=l(xl);Uc=p(y_,"index"),y_.forEach(e),Vc=p(Ya," argument."),Ya.forEach(e),Fp=c(s),ea=n(s,"P",{});var Zi=l(ea);Hc=p(Zi,"For example, the "),ie=n(Zi,"A",{href:!0,rel:!0});var k_=l(ie);Yc=p(k_,"imdb"),k_.forEach(e),Wc=p(Zi," dataset has 25000 examples:"),Zi.forEach(e),Op=c(s),u(he.$$.fragment,s),Rp=c(s),Yt=n(s,"P",{});var E_=l(Yt);Gc=p(E_,"After you shard the dataset into four chunks, the first shard only has 6250 examples:"),E_.forEach(e),Ip=c(s),u(ce.$$.fragment,s),Lp=c(s),xs=n(s,"H2",{class:!0});var sh=l(xs);ta=n(sh,"A",{id:!0,class:!0,href:!0});var D_=l(ta);$l=n(D_,"SPAN",{});var A_=l($l);u(me.$$.fragment,A_),A_.forEach(e),D_.forEach(e),Jc=c(sh),yl=n(sh,"SPAN",{});var T_=l(yl);Kc=p(T_,"Rename, remove, cast, and flatten"),T_.forEach(e),sh.forEach(e),Mp=c(s),Wt=n(s,"P",{});var P_=l(Wt);Qc=p(P_,"The following methods allow you to modify the columns of a dataset. These methods are useful for renaming or removing columns, changing columns to a new set of features, and flattening nested column structures."),P_.forEach(e),Bp=c(s),$s=n(s,"H3",{class:!0});var ah=l($s);na=n(ah,"A",{id:!0,class:!0,href:!0});var q_=l(na);kl=n(q_,"SPAN",{});var S_=l(kl);u(fe.$$.fragment,S_),S_.forEach(e),q_.forEach(e),Xc=c(ah),El=n(ah,"SPAN",{});var C_=l(El);Zc=p(C_,"Rename"),C_.forEach(e),ah.forEach(e),Up=c(s),la=n(s,"P",{});var eh=l(la);sm=p(eh,"Use "),Gt=n(eh,"A",{href:!0});var N_=l(Gt);am=p(N_,"Dataset.rename_column()"),N_.forEach(e),em=p(eh," when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),eh.forEach(e),Vp=c(s),ra=n(s,"P",{});var th=l(ra);tm=p(th,"Provide "),Jt=n(th,"A",{href:!0});var z_=l(Jt);nm=p(z_,"Dataset.rename_column()"),z_.forEach(e),lm=p(th," with the name of the original column, and the new column name:"),th.forEach(e),Hp=c(s),u(ue.$$.fragment,s),Yp=c(s),ys=n(s,"H3",{class:!0});var nh=l(ys);pa=n(nh,"A",{id:!0,class:!0,href:!0});var F_=l(pa);Dl=n(F_,"SPAN",{});var O_=l(Dl);u(de.$$.fragment,O_),O_.forEach(e),F_.forEach(e),rm=c(nh),Al=n(nh,"SPAN",{});var R_=l(Al);pm=p(R_,"Remove"),R_.forEach(e),nh.forEach(e),Wp=c(s),oa=n(s,"P",{});var lh=l(oa);om=p(lh,"When you need to remove one or more columns, give "),Kt=n(lh,"A",{href:!0});var I_=l(Kt);im=p(I_,"Dataset.remove_columns()"),I_.forEach(e),hm=p(lh," the name of the column to remove. Remove more than one column by providing a list of column names:"),lh.forEach(e),Gp=c(s),u(ge.$$.fragment,s),Jp=c(s),ks=n(s,"H3",{class:!0});var rh=l(ks);ia=n(rh,"A",{id:!0,class:!0,href:!0});var L_=l(ia);Tl=n(L_,"SPAN",{});var M_=l(Tl);u(_e.$$.fragment,M_),M_.forEach(e),L_.forEach(e),cm=c(rh),Pl=n(rh,"SPAN",{});var B_=l(Pl);mm=p(B_,"Cast"),B_.forEach(e),rh.forEach(e),Kp=c(s),B=n(s,"P",{});var Bs=l(B);Qt=n(Bs,"A",{href:!0});var U_=l(Qt);fm=p(U_,"Dataset.cast()"),U_.forEach(e),um=p(Bs," changes the feature type of one or more columns. This method takes your new "),ql=n(Bs,"CODE",{});var V_=l(ql);dm=p(V_,"Features"),V_.forEach(e),gm=p(Bs," as its argument. The following sample code shows how to change the feature types of "),Sl=n(Bs,"CODE",{});var H_=l(Sl);_m=p(H_,"ClassLabel"),H_.forEach(e),jm=p(Bs," and "),Cl=n(Bs,"CODE",{});var Y_=l(Cl);bm=p(Y_,"Value"),Y_.forEach(e),vm=p(Bs,":"),Bs.forEach(e),Qp=c(s),u(je.$$.fragment,s),Xp=c(s),u(ha.$$.fragment,s),Zp=c(s),ca=n(s,"P",{});var ph=l(ca);wm=p(ph,"Use "),Xt=n(ph,"A",{href:!0});var W_=l(Xt);xm=p(W_,"Dataset.cast_column()"),W_.forEach(e),$m=p(ph," to change the feature type of just one column. Pass the column name and its new feature type as arguments:"),ph.forEach(e),so=c(s),u(be.$$.fragment,s),ao=c(s),Es=n(s,"H3",{class:!0});var oh=l(Es);ma=n(oh,"A",{id:!0,class:!0,href:!0});var G_=l(ma);Nl=n(G_,"SPAN",{});var J_=l(Nl);u(ve.$$.fragment,J_),J_.forEach(e),G_.forEach(e),ym=c(oh),zl=n(oh,"SPAN",{});var K_=l(zl);km=p(K_,"Flatten"),K_.forEach(e),oh.forEach(e),eo=c(s),fa=n(s,"P",{});var ih=l(fa);Em=p(ih,"Sometimes a column can be a nested structure of several types. Use "),Zt=n(ih,"A",{href:!0});var Q_=l(Zt);Dm=p(Q_,"Dataset.flatten()"),Q_.forEach(e),Am=p(ih," to extract the subfields into their own separate columns. Take a look at the nested structure below from the SQuAD dataset:"),ih.forEach(e),to=c(s),u(we.$$.fragment,s),no=c(s),F=n(s,"P",{});var hs=l(F);Tm=p(hs,"The "),Fl=n(hs,"CODE",{});var X_=l(Fl);Pm=p(X_,"answers"),X_.forEach(e),qm=p(hs," field contains two subfields: "),Ol=n(hs,"CODE",{});var Z_=l(Ol);Sm=p(Z_,"text"),Z_.forEach(e),Cm=p(hs," and "),Rl=n(hs,"CODE",{});var s2=l(Rl);Nm=p(s2,"answer_start"),s2.forEach(e),zm=p(hs,". Flatten them with "),sn=n(hs,"A",{href:!0});var a2=l(sn);Fm=p(a2,"Dataset.flatten()"),a2.forEach(e),Om=p(hs,":"),hs.forEach(e),lo=c(s),u(xe.$$.fragment,s),ro=c(s),Z=n(s,"P",{});var Vn=l(Z);Rm=p(Vn,"Notice how the subfields are now their own independent columns: "),Il=n(Vn,"CODE",{});var e2=l(Il);Im=p(e2,"answers.text"),e2.forEach(e),Lm=p(Vn," and "),Ll=n(Vn,"CODE",{});var t2=l(Ll);Mm=p(t2,"answers.answer_start"),t2.forEach(e),Bm=p(Vn,"."),Vn.forEach(e),po=c(s),Ds=n(s,"H2",{class:!0});var hh=l(Ds);ua=n(hh,"A",{id:!0,class:!0,href:!0});var n2=l(ua);Ml=n(n2,"SPAN",{});var l2=l(Ml);u($e.$$.fragment,l2),l2.forEach(e),n2.forEach(e),Um=c(hh),Bl=n(hh,"SPAN",{});var r2=l(Bl);Vm=p(r2,"Align"),r2.forEach(e),hh.forEach(e),oo=c(s),ss=n(s,"P",{});var Hn=l(ss);Hm=p(Hn,"The "),an=n(Hn,"A",{href:!0});var p2=l(an);Ym=p(p2,"Dataset.align_labels_with_mapping()"),p2.forEach(e),Wm=p(Hn," function aligns a dataset label id with the label name. Not all \u{1F917} Transformers models follow the prescribed label mapping of the original dataset, especially for NLI dataset labels. For example, the "),ye=n(Hn,"A",{href:!0,rel:!0});var o2=l(ye);Gm=p(o2,"MNLI"),o2.forEach(e),Jm=p(Hn," dataset uses the following label mapping:"),Hn.forEach(e),io=c(s),u(ke.$$.fragment,s),ho=c(s),en=n(s,"P",{});var i2=l(en);Km=p(i2,"To align the dataset label mapping with the mapping used by a model, create a dictionary of the label name and id to align on:"),i2.forEach(e),co=c(s),u(Ee.$$.fragment,s),mo=c(s),da=n(s,"P",{});var ch=l(da);Qm=p(ch,"Pass the dictionary of the label mappings to the "),tn=n(ch,"A",{href:!0});var h2=l(tn);Xm=p(h2,"Dataset.align_labels_with_mapping()"),h2.forEach(e),Zm=p(ch," function, and the column to align on:"),ch.forEach(e),fo=c(s),u(De.$$.fragment,s),uo=c(s),nn=n(s,"P",{});var c2=l(nn);sf=p(c2,"You can also use this function to assign a custom mapping of labels to ids."),c2.forEach(e),go=c(s),As=n(s,"H2",{class:!0});var mh=l(As);ga=n(mh,"A",{id:!0,class:!0,href:!0});var m2=l(ga);Ul=n(m2,"SPAN",{});var f2=l(Ul);u(Ae.$$.fragment,f2),f2.forEach(e),m2.forEach(e),af=c(mh),Vl=n(mh,"SPAN",{});var u2=l(Vl);ef=p(u2,"Map"),u2.forEach(e),mh.forEach(e),_o=c(s),as=n(s,"P",{});var Yn=l(as);tf=p(Yn,"Some of the more powerful applications of \u{1F917} Datasets come from using "),ln=n(Yn,"A",{href:!0});var d2=l(ln);nf=p(d2,"Dataset.map()"),d2.forEach(e),lf=p(Yn,". The primary purpose of "),rn=n(Yn,"A",{href:!0});var g2=l(rn);rf=p(g2,"Dataset.map()"),g2.forEach(e),pf=p(Yn," is to speed up processing functions. It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),Yn.forEach(e),jo=c(s),O=n(s,"P",{});var cs=l(O);of=p(cs,"In the following example, you will prefix each "),Hl=n(cs,"CODE",{});var _2=l(Hl);hf=p(_2,"sentence1"),_2.forEach(e),cf=p(cs," value in the dataset with "),Yl=n(cs,"CODE",{});var j2=l(Yl);mf=p(j2,"'My sentence: '"),j2.forEach(e),ff=p(cs,". First, create a function that adds "),Wl=n(cs,"CODE",{});var b2=l(Wl);uf=p(b2,"'My sentence: '"),b2.forEach(e),df=p(cs," to the beginning of each sentence. The function needs to accept and output a "),Gl=n(cs,"CODE",{});var v2=l(Gl);gf=p(v2,"dict"),v2.forEach(e),_f=p(cs,":"),cs.forEach(e),bo=c(s),u(Te.$$.fragment,s),vo=c(s),_a=n(s,"P",{});var fh=l(_a);jf=p(fh,"Next, apply this function to the dataset with "),pn=n(fh,"A",{href:!0});var w2=l(pn);bf=p(w2,"Dataset.map()"),w2.forEach(e),vf=p(fh,":"),fh.forEach(e),wo=c(s),u(Pe.$$.fragment,s),xo=c(s),ja=n(s,"P",{});var uh=l(ja);wf=p(uh,"Let\u2019s take a look at another example, except this time, you will remove a column with "),on=n(uh,"A",{href:!0});var x2=l(on);xf=p(x2,"Dataset.map()"),x2.forEach(e),$f=p(uh,". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),uh.forEach(e),$o=c(s),es=n(s,"P",{});var Wn=l(es);yf=p(Wn,"Specify the column to remove with the "),Jl=n(Wn,"CODE",{});var $2=l(Jl);kf=p($2,"remove_columns"),$2.forEach(e),Ef=p(Wn," argument in "),hn=n(Wn,"A",{href:!0});var y2=l(hn);Df=p(y2,"Dataset.map()"),y2.forEach(e),Af=p(Wn,":"),Wn.forEach(e),yo=c(s),u(qe.$$.fragment,s),ko=c(s),u(ba.$$.fragment,s),Eo=c(s),ts=n(s,"P",{});var Gn=l(ts);Tf=p(Gn,"You can also use "),cn=n(Gn,"A",{href:!0});var k2=l(cn);Pf=p(k2,"Dataset.map()"),k2.forEach(e),qf=p(Gn," with indices if you set "),Kl=n(Gn,"CODE",{});var E2=l(Kl);Sf=p(E2,"with_indices=True"),E2.forEach(e),Cf=p(Gn,". The example below adds the index to the beginning of each sentence:"),Gn.forEach(e),Do=c(s),u(Se.$$.fragment,s),Ao=c(s),q=n(s,"P",{});var N=l(q);Nf=p(N,"You can also use "),mn=n(N,"A",{href:!0});var D2=l(mn);zf=p(D2,"Dataset.map()"),D2.forEach(e),Ff=p(N," with the rank of the process if you set "),Ql=n(N,"CODE",{});var A2=l(Ql);Of=p(A2,"with_rank=True"),A2.forEach(e),Rf=p(N,". This is analogous to "),Xl=n(N,"CODE",{});var T2=l(Xl);If=p(T2,"with_indices"),T2.forEach(e),Lf=p(N,". The "),Zl=n(N,"CODE",{});var P2=l(Zl);Mf=p(P2,"rank"),P2.forEach(e),Bf=p(N," argument in the mapped function goes after the "),sr=n(N,"CODE",{});var q2=l(sr);Uf=p(q2,"index"),q2.forEach(e),Vf=p(N," one if it is already present. The main use-case for it is to parallelize your computation across several GPUs. This requires setting "),ar=n(N,"CODE",{});var S2=l(ar);Hf=p(S2,'multiprocess.set_start_method("spawn")'),S2.forEach(e),Yf=p(N,", without which you will receive a CUDA error: "),er=n(N,"CODE",{});var C2=l(er);Wf=p(C2,"RuntimeError: Cannot re-initialize CUDA in forked subprocess. To use CUDA with multiprocessing, you must use the 'spawn' start method"),C2.forEach(e),Gf=p(N,"."),N.forEach(e),To=c(s),u(Ce.$$.fragment,s),Po=c(s),Ts=n(s,"H3",{class:!0});var dh=l(Ts);va=n(dh,"A",{id:!0,class:!0,href:!0});var N2=l(va);tr=n(N2,"SPAN",{});var z2=l(tr);u(Ne.$$.fragment,z2),z2.forEach(e),N2.forEach(e),Jf=c(dh),nr=n(dh,"SPAN",{});var F2=l(nr);Kf=p(F2,"Multiprocessing"),F2.forEach(e),dh.forEach(e),qo=c(s),ns=n(s,"P",{});var Jn=l(ns);Qf=p(Jn,"Multiprocessing can significantly speed up processing by parallelizing the processes on your CPU. Set the "),lr=n(Jn,"CODE",{});var O2=l(lr);Xf=p(O2,"num_proc"),O2.forEach(e),Zf=p(Jn," argument in "),fn=n(Jn,"A",{href:!0});var R2=l(fn);su=p(R2,"Dataset.map()"),R2.forEach(e),au=p(Jn," to set the number of processes to use:"),Jn.forEach(e),So=c(s),u(ze.$$.fragment,s),Co=c(s),Ps=n(s,"H3",{class:!0});var gh=l(Ps);wa=n(gh,"A",{id:!0,class:!0,href:!0});var I2=l(wa);rr=n(I2,"SPAN",{});var L2=l(rr);u(Fe.$$.fragment,L2),L2.forEach(e),I2.forEach(e),eu=c(gh),pr=n(gh,"SPAN",{});var M2=l(pr);tu=p(M2,"Batch processing"),M2.forEach(e),gh.forEach(e),No=c(s),G=n(s,"P",{});var Et=l(G);un=n(Et,"A",{href:!0});var B2=l(un);nu=p(B2,"Dataset.map()"),B2.forEach(e),lu=p(Et," also supports working with batches of examples. Operate on batches by setting "),or=n(Et,"CODE",{});var U2=l(or);ru=p(U2,"batched=True"),U2.forEach(e),pu=p(Et,". The default batch size is 1000, but you can adjust it with the "),ir=n(Et,"CODE",{});var V2=l(ir);ou=p(V2,"batch_size"),V2.forEach(e),iu=p(Et," argument. This opens the door to many interesting applications such as tokenization, splitting long sentences into shorter chunks, and data augmentation."),Et.forEach(e),zo=c(s),qs=n(s,"H4",{class:!0});var _h=l(qs);xa=n(_h,"A",{id:!0,class:!0,href:!0});var H2=l(xa);hr=n(H2,"SPAN",{});var Y2=l(hr);u(Oe.$$.fragment,Y2),Y2.forEach(e),H2.forEach(e),hu=c(_h),cr=n(_h,"SPAN",{});var W2=l(cr);cu=p(W2,"Tokenization"),W2.forEach(e),_h.forEach(e),Fo=c(s),dn=n(s,"P",{});var G2=l(dn);mu=p(G2,"One of the most obvious use-cases for batch processing is tokenization, which accepts batches of inputs."),G2.forEach(e),Oo=c(s),gn=n(s,"P",{});var J2=l(gn);fu=p(J2,"First, load the tokenizer from the BERT model:"),J2.forEach(e),Ro=c(s),u(Re.$$.fragment,s),Io=c(s),$a=n(s,"P",{});var jh=l($a);uu=p(jh,"Apply the tokenizer to batches of the "),mr=n(jh,"CODE",{});var K2=l(mr);du=p(K2,"sentence1"),K2.forEach(e),gu=p(jh," field:"),jh.forEach(e),Lo=c(s),u(Ie.$$.fragment,s),Mo=c(s),R=n(s,"P",{});var ms=l(R);_u=p(ms,"Now you have three new columns, "),fr=n(ms,"CODE",{});var Q2=l(fr);ju=p(Q2,"input_ids"),Q2.forEach(e),bu=p(ms,", "),ur=n(ms,"CODE",{});var X2=l(ur);vu=p(X2,"token_type_ids"),X2.forEach(e),wu=p(ms,", "),dr=n(ms,"CODE",{});var Z2=l(dr);xu=p(Z2,"attention_mask"),Z2.forEach(e),$u=p(ms,", that contain the encoded version of the "),gr=n(ms,"CODE",{});var sj=l(gr);yu=p(sj,"sentence1"),sj.forEach(e),ku=p(ms," field."),ms.forEach(e),Bo=c(s),Ss=n(s,"H4",{class:!0});var bh=l(Ss);ya=n(bh,"A",{id:!0,class:!0,href:!0});var aj=l(ya);_r=n(aj,"SPAN",{});var ej=l(_r);u(Le.$$.fragment,ej),ej.forEach(e),aj.forEach(e),Eu=c(bh),jr=n(bh,"SPAN",{});var tj=l(jr);Du=p(tj,"Split long examples"),tj.forEach(e),bh.forEach(e),Uo=c(s),_n=n(s,"P",{});var nj=l(_n);Au=p(nj,"When your examples are too long, you may want to split them into several smaller snippets. Begin by creating a function that:"),nj.forEach(e),Vo=c(s),ka=n(s,"OL",{});var vh=l(ka);br=n(vh,"LI",{});var lj=l(br);Me=n(lj,"P",{});var wh=l(Me);Tu=p(wh,"Splits the "),vr=n(wh,"CODE",{});var rj=l(vr);Pu=p(rj,"sentence1"),rj.forEach(e),qu=p(wh," field into snippets of 50 characters."),wh.forEach(e),lj.forEach(e),Su=c(vh),wr=n(vh,"LI",{});var pj=l(wr);xr=n(pj,"P",{});var oj=l(xr);Cu=p(oj,"Stacks all the snippets together to create the new dataset."),oj.forEach(e),pj.forEach(e),vh.forEach(e),Ho=c(s),u(Be.$$.fragment,s),Yo=c(s),Ea=n(s,"P",{});var xh=l(Ea);Nu=p(xh,"Apply the function with "),jn=n(xh,"A",{href:!0});var ij=l(jn);zu=p(ij,"Dataset.map()"),ij.forEach(e),Fu=p(xh,":"),xh.forEach(e),Wo=c(s),u(Ue.$$.fragment,s),Go=c(s),bn=n(s,"P",{});var hj=l(bn);Ou=p(hj,"Notice how the sentences are split into shorter chunks now, and there are more rows in the dataset."),hj.forEach(e),Jo=c(s),u(Ve.$$.fragment,s),Ko=c(s),Cs=n(s,"H4",{class:!0});var $h=l(Cs);Da=n($h,"A",{id:!0,class:!0,href:!0});var cj=l(Da);$r=n(cj,"SPAN",{});var mj=l($r);u(He.$$.fragment,mj),mj.forEach(e),cj.forEach(e),Ru=c($h),yr=n($h,"SPAN",{});var fj=l(yr);Iu=p(fj,"Data augmentation"),fj.forEach(e),$h.forEach(e),Qo=c(s),vn=n(s,"P",{});var uj=l(vn);Lu=p(uj,"With batch processing, you can even augment your dataset with additional examples. In the following example, you will generate additional words for a masked token in a sentence."),uj.forEach(e),Xo=c(s),ls=n(s,"P",{});var Kn=l(ls);Mu=p(Kn,"Load the "),Ye=n(Kn,"A",{href:!0,rel:!0});var dj=l(Ye);Bu=p(dj,"RoBERTA"),dj.forEach(e),Uu=p(Kn," model for use in the \u{1F917} Transformer "),We=n(Kn,"A",{href:!0,rel:!0});var gj=l(We);Vu=p(gj,"FillMaskPipeline"),gj.forEach(e),Hu=p(Kn,":"),Kn.forEach(e),Zo=c(s),u(Ge.$$.fragment,s),si=c(s),wn=n(s,"P",{});var _j=l(wn);Yu=p(_j,"Create a function to randomly select a word to mask in the sentence. The function should also return the original sentence and the top two replacements generated by RoBERTA."),_j.forEach(e),ai=c(s),u(Je.$$.fragment,s),ei=c(s),Aa=n(s,"P",{});var yh=l(Aa);Wu=p(yh,"Use "),xn=n(yh,"A",{href:!0});var jj=l(xn);Gu=p(jj,"Dataset.map()"),jj.forEach(e),Ju=p(yh," to apply the function over the whole dataset:"),yh.forEach(e),ti=c(s),u(Ke.$$.fragment,s),ni=c(s),I=n(s,"P",{});var fs=l(I);Ku=p(fs,"For each original sentence, RoBERTA augmented a random word with three alternatives. In the first sentence, the word "),kr=n(fs,"CODE",{});var bj=l(kr);Qu=p(bj,"distorting"),bj.forEach(e),Xu=p(fs," is augmented with "),Er=n(fs,"CODE",{});var vj=l(Er);Zu=p(vj,"withholding"),vj.forEach(e),sd=p(fs,", "),Dr=n(fs,"CODE",{});var wj=l(Dr);ad=p(wj,"suppressing"),wj.forEach(e),ed=p(fs,", and "),Ar=n(fs,"CODE",{});var xj=l(Ar);td=p(xj,"destroying"),xj.forEach(e),nd=p(fs,"."),fs.forEach(e),li=c(s),Ns=n(s,"H3",{class:!0});var kh=l(Ns);Ta=n(kh,"A",{id:!0,class:!0,href:!0});var $j=l(Ta);Tr=n($j,"SPAN",{});var yj=l(Tr);u(Qe.$$.fragment,yj),yj.forEach(e),$j.forEach(e),ld=c(kh),Pr=n(kh,"SPAN",{});var kj=l(Pr);rd=p(kj,"Process multiple splits"),kj.forEach(e),kh.forEach(e),ri=c(s),rs=n(s,"P",{});var Qn=l(rs);pd=p(Qn,"Many datasets have splits that you can process simultaneously with "),$n=n(Qn,"A",{href:!0});var Ej=l($n);od=p(Ej,"DatasetDict.map()"),Ej.forEach(e),id=p(Qn,". For example, tokenize the "),qr=n(Qn,"CODE",{});var Dj=l(qr);hd=p(Dj,"sentence1"),Dj.forEach(e),cd=p(Qn," field in the train and test split by:"),Qn.forEach(e),pi=c(s),u(Xe.$$.fragment,s),oi=c(s),zs=n(s,"H3",{class:!0});var Eh=l(zs);Pa=n(Eh,"A",{id:!0,class:!0,href:!0});var Aj=l(Pa);Sr=n(Aj,"SPAN",{});var Tj=l(Sr);u(Ze.$$.fragment,Tj),Tj.forEach(e),Aj.forEach(e),md=c(Eh),Cr=n(Eh,"SPAN",{});var Pj=l(Cr);fd=p(Pj,"Distributed usage"),Pj.forEach(e),Eh.forEach(e),ii=c(s),ps=n(s,"P",{});var Xn=l(ps);ud=p(Xn,"When you use "),yn=n(Xn,"A",{href:!0});var qj=l(yn);dd=p(qj,"Dataset.map()"),qj.forEach(e),gd=p(Xn," in a distributed setting, you should also use "),st=n(Xn,"A",{href:!0,rel:!0});var Sj=l(st);_d=p(Sj,"torch.distributed.barrier"),Sj.forEach(e),jd=p(Xn,". This ensures the main process performs the mapping, while the other processes load the results, thereby avoiding duplicate work."),Xn.forEach(e),hi=c(s),qa=n(s,"P",{});var Dh=l(qa);bd=p(Dh,"The following example shows how you can use "),Nr=n(Dh,"CODE",{});var Cj=l(Nr);vd=p(Cj,"torch.distributed.barrier"),Cj.forEach(e),wd=p(Dh," to synchronize the processes:"),Dh.forEach(e),ci=c(s),u(at.$$.fragment,s),mi=c(s),Fs=n(s,"H2",{class:!0});var Ah=l(Fs);Sa=n(Ah,"A",{id:!0,class:!0,href:!0});var Nj=l(Sa);zr=n(Nj,"SPAN",{});var zj=l(zr);u(et.$$.fragment,zj),zj.forEach(e),Nj.forEach(e),xd=c(Ah),Fr=n(Ah,"SPAN",{});var Fj=l(Fr);$d=p(Fj,"Concatenate"),Fj.forEach(e),Ah.forEach(e),fi=c(s),Ca=n(s,"P",{});var Th=l(Ca);yd=p(Th,"Separate datasets can be concatenated if they share the same column types. Concatenate datasets with "),kn=n(Th,"A",{href:!0});var Oj=l(kn);kd=p(Oj,"concatenate_datasets()"),Oj.forEach(e),Ed=p(Th,":"),Th.forEach(e),ui=c(s),u(tt.$$.fragment,s),di=c(s),u(Na.$$.fragment,s),gi=c(s),En=n(s,"P",{});var Rj=l(En);Dd=p(Rj,"You can also concatenate two datasets horizontally (axis=1) as long as they have the same number of rows:"),Rj.forEach(e),_i=c(s),u(nt.$$.fragment,s),ji=c(s),Os=n(s,"H2",{class:!0});var Ph=l(Os);za=n(Ph,"A",{id:!0,class:!0,href:!0});var Ij=l(za);Or=n(Ij,"SPAN",{});var Lj=l(Or);u(lt.$$.fragment,Lj),Lj.forEach(e),Ij.forEach(e),Ad=c(Ph),Rr=n(Ph,"SPAN",{});var Mj=l(Rr);Td=p(Mj,"Format"),Mj.forEach(e),Ph.forEach(e),bi=c(s),os=n(s,"P",{});var Zn=l(os);Pd=p(Zn,"Set a dataset to a TensorFlow compatible format with "),Dn=n(Zn,"A",{href:!0});var Bj=l(Dn);qd=p(Bj,"Dataset.set_format()"),Bj.forEach(e),Sd=p(Zn,". Specify "),Ir=n(Zn,"CODE",{});var Uj=l(Ir);Cd=p(Uj,"type=tensorflow"),Uj.forEach(e),Nd=p(Zn," and the columns that should be formatted:"),Zn.forEach(e),vi=c(s),u(rt.$$.fragment,s),wi=c(s),is=n(s,"P",{});var sl=l(is);zd=p(sl,"Then you can wrap the dataset with [`~datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset]. This method gives you more control over how to create a "),pt=n(sl,"A",{href:!0,rel:!0});var Vj=l(pt);Fd=p(Vj,"TensorFlow Dataset"),Vj.forEach(e),Od=p(sl,". In the example below, the dataset is created "),Lr=n(sl,"CODE",{});var Hj=l(Lr);Rd=p(Hj,"from_tensor_slices"),Hj.forEach(e),Id=p(sl,":"),sl.forEach(e),xi=c(s),u(ot.$$.fragment,s),$i=c(s),Rs=n(s,"P",{});var hp=l(Rs);An=n(hp,"A",{href:!0});var Yj=l(An);Ld=p(Yj,"Dataset.with_format()"),Yj.forEach(e),Md=p(hp," provides an alternative method to set the format. This method will return a new "),Tn=n(hp,"A",{href:!0});var Wj=l(Tn);Bd=p(Wj,"Dataset"),Wj.forEach(e),Ud=p(hp," object with your specified format:"),hp.forEach(e),yi=c(s),u(it.$$.fragment,s),ki=c(s),u(Fa.$$.fragment,s),Ei=c(s),Oa=n(s,"P",{});var qh=l(Oa);Vd=p(qh,"Use "),Pn=n(qh,"A",{href:!0});var Gj=l(Pn);Hd=p(Gj,"Dataset.reset_format()"),Gj.forEach(e),Yd=p(qh," if you need to reset the dataset to the original format:"),qh.forEach(e),Di=c(s),u(ht.$$.fragment,s),Ai=c(s),Is=n(s,"H3",{class:!0});var Sh=l(Is);Ra=n(Sh,"A",{id:!0,class:!0,href:!0});var Jj=l(Ra);Mr=n(Jj,"SPAN",{});var Kj=l(Mr);u(ct.$$.fragment,Kj),Kj.forEach(e),Jj.forEach(e),Wd=c(Sh),Br=n(Sh,"SPAN",{});var Qj=l(Br);Gd=p(Qj,"Format transform"),Qj.forEach(e),Sh.forEach(e),Ti=c(s),mt=n(s,"P",{});var Ng=l(mt);qn=n(Ng,"A",{href:!0});var Xj=l(qn);Jd=p(Xj,"Dataset.set_transform()"),Xj.forEach(e),Kd=p(Ng," allows you to apply a custom formatting transform on-the-fly. This will replace any previously specified format. For example, you can use this method to tokenize and pad tokens on-the-fly:"),Ng.forEach(e),Pi=c(s),u(ft.$$.fragment,s),qi=c(s),Sn=n(s,"P",{});var Zj=l(Sn);Qd=p(Zj,"In this case, the tokenization is applied only when the examples are accessed."),Zj.forEach(e),Si=c(s),Ls=n(s,"H2",{class:!0});var Ch=l(Ls);Ia=n(Ch,"A",{id:!0,class:!0,href:!0});var sb=l(Ia);Ur=n(sb,"SPAN",{});var ab=l(Ur);u(ut.$$.fragment,ab),ab.forEach(e),sb.forEach(e),Xd=c(Ch),Vr=n(Ch,"SPAN",{});var eb=l(Vr);Zd=p(eb,"Save"),eb.forEach(e),Ch.forEach(e),Ci=c(s),La=n(s,"P",{});var Nh=l(La);sg=p(Nh,"Once you are done processing your dataset, you can save and reuse it later with "),Cn=n(Nh,"A",{href:!0});var tb=l(Cn);ag=p(tb,"Dataset.save_to_disk()"),tb.forEach(e),eg=p(Nh,"."),Nh.forEach(e),Ni=c(s),Nn=n(s,"P",{});var nb=l(Nn);tg=p(nb,"Save your dataset by providing the path to the directory you wish to save it to:"),nb.forEach(e),zi=c(s),u(dt.$$.fragment,s),Fi=c(s),Ma=n(s,"P",{});var zh=l(Ma);ng=p(zh,"When you want to use your dataset again, use "),zn=n(zh,"A",{href:!0});var lb=l(zn);lg=p(lb,"load_from_disk()"),lb.forEach(e),rg=p(zh," to reload it:"),zh.forEach(e),Oi=c(s),u(gt.$$.fragment,s),Ri=c(s),u(Ba.$$.fragment,s),Ii=c(s),Ms=n(s,"H2",{class:!0});var Fh=l(Ms);Ua=n(Fh,"A",{id:!0,class:!0,href:!0});var rb=l(Ua);Hr=n(rb,"SPAN",{});var pb=l(Hr);u(_t.$$.fragment,pb),pb.forEach(e),rb.forEach(e),pg=c(Fh),Yr=n(Fh,"SPAN",{});var ob=l(Yr);og=p(ob,"Export"),ob.forEach(e),Fh.forEach(e),Li=c(s),Fn=n(s,"P",{});var ib=l(Fn);ig=p(ib,"\u{1F917} Datasets supports exporting as well, so you can work with your dataset in other applications. The following table shows currently supported file formats you can export to:"),ib.forEach(e),Mi=c(s),Va=n(s,"TABLE",{});var Oh=l(Va);Wr=n(Oh,"THEAD",{});var hb=l(Wr);jt=n(hb,"TR",{});var Rh=l(jt);Gr=n(Rh,"TH",{});var cb=l(Gr);hg=p(cb,"File type"),cb.forEach(e),cg=c(Rh),Jr=n(Rh,"TH",{});var mb=l(Jr);mg=p(mb,"Export method"),mb.forEach(e),Rh.forEach(e),hb.forEach(e),fg=c(Oh),J=n(Oh,"TBODY",{});var Wa=l(J);bt=n(Wa,"TR",{});var Ih=l(bt);Kr=n(Ih,"TD",{});var fb=l(Kr);ug=p(fb,"CSV"),fb.forEach(e),dg=c(Ih),Qr=n(Ih,"TD",{});var ub=l(Qr);On=n(ub,"A",{href:!0});var db=l(On);gg=p(db,"Dataset.to_csv()"),db.forEach(e),ub.forEach(e),Ih.forEach(e),_g=c(Wa),vt=n(Wa,"TR",{});var Lh=l(vt);Xr=n(Lh,"TD",{});var gb=l(Xr);jg=p(gb,"JSON"),gb.forEach(e),bg=c(Lh),Zr=n(Lh,"TD",{});var _b=l(Zr);Rn=n(_b,"A",{href:!0});var jb=l(Rn);vg=p(jb,"Dataset.to_json()"),jb.forEach(e),_b.forEach(e),Lh.forEach(e),wg=c(Wa),wt=n(Wa,"TR",{});var Mh=l(wt);sp=n(Mh,"TD",{});var bb=l(sp);xg=p(bb,"Parquet"),bb.forEach(e),$g=c(Mh),ap=n(Mh,"TD",{});var vb=l(ap);In=n(vb,"A",{href:!0});var wb=l(In);yg=p(wb,"Dataset.to_parquet()"),wb.forEach(e),vb.forEach(e),Mh.forEach(e),kg=c(Wa),xt=n(Wa,"TR",{});var Bh=l(xt);ep=n(Bh,"TD",{});var xb=l(ep);Eg=p(xb,"In-memory Python object"),xb.forEach(e),Dg=c(Bh),$t=n(Bh,"TD",{});var Uh=l($t);Ln=n(Uh,"A",{href:!0});var $b=l(Ln);Ag=p($b,"Dataset.to_pandas()"),$b.forEach(e),Tg=p(Uh," or "),Mn=n(Uh,"A",{href:!0});var yb=l(Mn);Pg=p(yb,"Dataset.to_dict()"),yb.forEach(e),Uh.forEach(e),Bh.forEach(e),Wa.forEach(e),Oh.forEach(e),Bi=c(s),Bn=n(s,"P",{});var kb=l(Bn);qg=p(kb,"For example, export your dataset to a CSV file like this:"),kb.forEach(e),Ui=c(s),u(yt.$$.fragment,s),this.h()},h(){m(b,"name","hf:doc:metadata"),m(b,"content",JSON.stringify(Rb)),m($,"id","process"),m($,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m($,"href","#process"),m(v,"class","relative group"),m(Gs,"id","sort-shuffle-select-split-and-shard"),m(Gs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Gs,"href","#sort-shuffle-select-split-and-shard"),m(us,"class","relative group"),m(Js,"id","sort"),m(Js,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Js,"href","#sort"),m(ds,"class","relative group"),m(Ct,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.sort"),m(Qs,"id","shuffle"),m(Qs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Qs,"href","#shuffle"),m(gs,"class","relative group"),m(Nt,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.shuffle"),m(Xs,"id","select-and-filter"),m(Xs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Xs,"href","#select-and-filter"),m(_s,"class","relative group"),m(zt,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.select"),m(Ft,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.filter"),m(It,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.select"),m(Bt,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.filter"),m(Ut,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.filter"),m(Zs,"id","split"),m(Zs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Zs,"href","#split"),m(bs,"class","relative group"),m(Vt,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.train_test_split"),m(aa,"id","shard"),m(aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(aa,"href","#shard"),m(ws,"class","relative group"),m(Ht,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.shard"),m(ie,"href","https://huggingface.co/datasets/imdb"),m(ie,"rel","nofollow"),m(ta,"id","rename-remove-cast-and-flatten"),m(ta,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ta,"href","#rename-remove-cast-and-flatten"),m(xs,"class","relative group"),m(na,"id","rename"),m(na,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(na,"href","#rename"),m($s,"class","relative group"),m(Gt,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.rename_column"),m(Jt,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.rename_column"),m(pa,"id","remove"),m(pa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(pa,"href","#remove"),m(ys,"class","relative group"),m(Kt,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.remove_columns"),m(ia,"id","cast"),m(ia,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ia,"href","#cast"),m(ks,"class","relative group"),m(Qt,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.cast"),m(Xt,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.cast_column"),m(ma,"id","flatten"),m(ma,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ma,"href","#flatten"),m(Es,"class","relative group"),m(Zt,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.flatten"),m(sn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.flatten"),m(ua,"id","align"),m(ua,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ua,"href","#align"),m(Ds,"class","relative group"),m(an,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.align_labels_with_mapping"),m(ye,"href","https://huggingface.co/datasets/glue"),m(ye,"rel","nofollow"),m(tn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.align_labels_with_mapping"),m(ga,"id","map"),m(ga,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ga,"href","#map"),m(As,"class","relative group"),m(ln,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.map"),m(rn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.map"),m(pn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.map"),m(on,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.map"),m(hn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.map"),m(cn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.map"),m(mn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.map"),m(va,"id","multiprocessing"),m(va,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(va,"href","#multiprocessing"),m(Ts,"class","relative group"),m(fn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.map"),m(wa,"id","batch-processing"),m(wa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(wa,"href","#batch-processing"),m(Ps,"class","relative group"),m(un,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.map"),m(xa,"id","tokenization"),m(xa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(xa,"href","#tokenization"),m(qs,"class","relative group"),m(ya,"id","split-long-examples"),m(ya,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ya,"href","#split-long-examples"),m(Ss,"class","relative group"),m(jn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.map"),m(Da,"id","data-augmentation"),m(Da,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Da,"href","#data-augmentation"),m(Cs,"class","relative group"),m(Ye,"href","https://huggingface.co/roberta-base"),m(Ye,"rel","nofollow"),m(We,"href","https://huggingface.co/transformers/main_classes/pipelines#transformers.FillMaskPipeline"),m(We,"rel","nofollow"),m(xn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.map"),m(Ta,"id","process-multiple-splits"),m(Ta,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ta,"href","#process-multiple-splits"),m(Ns,"class","relative group"),m($n,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.DatasetDict.map"),m(Pa,"id","distributed-usage"),m(Pa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Pa,"href","#distributed-usage"),m(zs,"class","relative group"),m(yn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.map"),m(st,"href","https://pytorch.org/docs/stable/distributed?highlight=barrier#torch.distributed.barrier"),m(st,"rel","nofollow"),m(Sa,"id","concatenate"),m(Sa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Sa,"href","#concatenate"),m(Fs,"class","relative group"),m(kn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.concatenate_datasets"),m(za,"id","format"),m(za,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(za,"href","#format"),m(Os,"class","relative group"),m(Dn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.set_format"),m(pt,"href","https://www.tensorflow.org/api_docs/python/tf/data/Dataset"),m(pt,"rel","nofollow"),m(An,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.with_format"),m(Tn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset"),m(Pn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.reset_format"),m(Ra,"id","format-transform"),m(Ra,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ra,"href","#format-transform"),m(Is,"class","relative group"),m(qn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.set_transform"),m(Ia,"id","save"),m(Ia,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ia,"href","#save"),m(Ls,"class","relative group"),m(Cn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),m(zn,"href","/docs/datasets/pr_3999/en/package_reference/loading_methods#datasets.load_from_disk"),m(Ua,"id","export"),m(Ua,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ua,"href","#export"),m(Ms,"class","relative group"),m(On,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.to_csv"),m(Rn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.to_json"),m(In,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.to_parquet"),m(Ln,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.to_pandas"),m(Mn,"href","/docs/datasets/pr_3999/en/package_reference/main_classes#datasets.Dataset.to_dict")},m(s,o){a(document.head,b),i(s,k,o),i(s,v,o),a(v,$),a($,D),d(x,D,null),a(v,y),a(v,A),a(A,C),i(s,S,o),i(s,L,o),a(L,M),i(s,Us,o),i(s,K,o),a(K,Q),i(s,Vs,o),i(s,T,o),a(T,U),a(U,Ga),a(T,Ja),a(T,W),a(W,P),a(T,Dt),a(T,Hs),a(Hs,At),a(T,Tt),a(T,Ys),a(Ys,Pt),a(T,Vh),a(T,el),a(el,Hh),a(T,Yh),a(T,tl),a(tl,Wh),i(s,cp,o),i(s,qt,o),a(qt,Gh),i(s,mp,o),d(Ka,s,o),i(s,fp,o),d(Ws,s,o),i(s,up,o),i(s,us,o),a(us,Gs),a(Gs,nl),d(Qa,nl,null),a(us,Jh),a(us,ll),a(ll,Kh),i(s,dp,o),i(s,St,o),a(St,Qh),i(s,gp,o),i(s,ds,o),a(ds,Js),a(Js,rl),d(Xa,rl,null),a(ds,Xh),a(ds,pl),a(pl,Zh),i(s,_p,o),i(s,Ks,o),a(Ks,sc),a(Ks,Ct),a(Ct,ac),a(Ks,ec),i(s,jp,o),d(Za,s,o),i(s,bp,o),i(s,gs,o),a(gs,Qs),a(Qs,ol),d(se,ol,null),a(gs,tc),a(gs,il),a(il,nc),i(s,vp,o),i(s,V,o),a(V,lc),a(V,Nt),a(Nt,rc),a(V,pc),a(V,hl),a(hl,oc),a(V,ic),a(V,cl),a(cl,hc),a(V,cc),i(s,wp,o),d(ae,s,o),i(s,xp,o),i(s,_s,o),a(_s,Xs),a(Xs,ml),d(ee,ml,null),a(_s,mc),a(_s,fl),a(fl,fc),i(s,$p,o),i(s,X,o),a(X,uc),a(X,zt),a(zt,dc),a(X,gc),a(X,Ft),a(Ft,_c),a(X,jc),i(s,yp,o),i(s,Ot,o),a(Ot,Rt),a(Rt,It),a(It,bc),a(Rt,vc),i(s,kp,o),d(te,s,o),i(s,Ep,o),i(s,Lt,o),a(Lt,Mt),a(Mt,Bt),a(Bt,wc),a(Mt,xc),i(s,Dp,o),d(ne,s,o),i(s,Ap,o),i(s,js,o),a(js,Ut),a(Ut,$c),a(js,yc),a(js,ul),a(ul,kc),a(js,Ec),i(s,Tp,o),d(le,s,o),i(s,Pp,o),i(s,bs,o),a(bs,Zs),a(Zs,dl),d(re,dl,null),a(bs,Dc),a(bs,gl),a(gl,Ac),i(s,qp,o),i(s,vs,o),a(vs,Vt),a(Vt,Tc),a(vs,Pc),a(vs,_l),a(_l,qc),a(vs,Sc),i(s,Sp,o),d(pe,s,o),i(s,Cp,o),i(s,sa,o),a(sa,Cc),a(sa,jl),a(jl,Nc),a(sa,zc),i(s,Np,o),i(s,ws,o),a(ws,aa),a(aa,bl),d(oe,bl,null),a(ws,Fc),a(ws,vl),a(vl,Oc),i(s,zp,o),i(s,H,o),a(H,Rc),a(H,wl),a(wl,Ic),a(H,Lc),a(H,Ht),a(Ht,Mc),a(H,Bc),a(H,xl),a(xl,Uc),a(H,Vc),i(s,Fp,o),i(s,ea,o),a(ea,Hc),a(ea,ie),a(ie,Yc),a(ea,Wc),i(s,Op,o),d(he,s,o),i(s,Rp,o),i(s,Yt,o),a(Yt,Gc),i(s,Ip,o),d(ce,s,o),i(s,Lp,o),i(s,xs,o),a(xs,ta),a(ta,$l),d(me,$l,null),a(xs,Jc),a(xs,yl),a(yl,Kc),i(s,Mp,o),i(s,Wt,o),a(Wt,Qc),i(s,Bp,o),i(s,$s,o),a($s,na),a(na,kl),d(fe,kl,null),a($s,Xc),a($s,El),a(El,Zc),i(s,Up,o),i(s,la,o),a(la,sm),a(la,Gt),a(Gt,am),a(la,em),i(s,Vp,o),i(s,ra,o),a(ra,tm),a(ra,Jt),a(Jt,nm),a(ra,lm),i(s,Hp,o),d(ue,s,o),i(s,Yp,o),i(s,ys,o),a(ys,pa),a(pa,Dl),d(de,Dl,null),a(ys,rm),a(ys,Al),a(Al,pm),i(s,Wp,o),i(s,oa,o),a(oa,om),a(oa,Kt),a(Kt,im),a(oa,hm),i(s,Gp,o),d(ge,s,o),i(s,Jp,o),i(s,ks,o),a(ks,ia),a(ia,Tl),d(_e,Tl,null),a(ks,cm),a(ks,Pl),a(Pl,mm),i(s,Kp,o),i(s,B,o),a(B,Qt),a(Qt,fm),a(B,um),a(B,ql),a(ql,dm),a(B,gm),a(B,Sl),a(Sl,_m),a(B,jm),a(B,Cl),a(Cl,bm),a(B,vm),i(s,Qp,o),d(je,s,o),i(s,Xp,o),d(ha,s,o),i(s,Zp,o),i(s,ca,o),a(ca,wm),a(ca,Xt),a(Xt,xm),a(ca,$m),i(s,so,o),d(be,s,o),i(s,ao,o),i(s,Es,o),a(Es,ma),a(ma,Nl),d(ve,Nl,null),a(Es,ym),a(Es,zl),a(zl,km),i(s,eo,o),i(s,fa,o),a(fa,Em),a(fa,Zt),a(Zt,Dm),a(fa,Am),i(s,to,o),d(we,s,o),i(s,no,o),i(s,F,o),a(F,Tm),a(F,Fl),a(Fl,Pm),a(F,qm),a(F,Ol),a(Ol,Sm),a(F,Cm),a(F,Rl),a(Rl,Nm),a(F,zm),a(F,sn),a(sn,Fm),a(F,Om),i(s,lo,o),d(xe,s,o),i(s,ro,o),i(s,Z,o),a(Z,Rm),a(Z,Il),a(Il,Im),a(Z,Lm),a(Z,Ll),a(Ll,Mm),a(Z,Bm),i(s,po,o),i(s,Ds,o),a(Ds,ua),a(ua,Ml),d($e,Ml,null),a(Ds,Um),a(Ds,Bl),a(Bl,Vm),i(s,oo,o),i(s,ss,o),a(ss,Hm),a(ss,an),a(an,Ym),a(ss,Wm),a(ss,ye),a(ye,Gm),a(ss,Jm),i(s,io,o),d(ke,s,o),i(s,ho,o),i(s,en,o),a(en,Km),i(s,co,o),d(Ee,s,o),i(s,mo,o),i(s,da,o),a(da,Qm),a(da,tn),a(tn,Xm),a(da,Zm),i(s,fo,o),d(De,s,o),i(s,uo,o),i(s,nn,o),a(nn,sf),i(s,go,o),i(s,As,o),a(As,ga),a(ga,Ul),d(Ae,Ul,null),a(As,af),a(As,Vl),a(Vl,ef),i(s,_o,o),i(s,as,o),a(as,tf),a(as,ln),a(ln,nf),a(as,lf),a(as,rn),a(rn,rf),a(as,pf),i(s,jo,o),i(s,O,o),a(O,of),a(O,Hl),a(Hl,hf),a(O,cf),a(O,Yl),a(Yl,mf),a(O,ff),a(O,Wl),a(Wl,uf),a(O,df),a(O,Gl),a(Gl,gf),a(O,_f),i(s,bo,o),d(Te,s,o),i(s,vo,o),i(s,_a,o),a(_a,jf),a(_a,pn),a(pn,bf),a(_a,vf),i(s,wo,o),d(Pe,s,o),i(s,xo,o),i(s,ja,o),a(ja,wf),a(ja,on),a(on,xf),a(ja,$f),i(s,$o,o),i(s,es,o),a(es,yf),a(es,Jl),a(Jl,kf),a(es,Ef),a(es,hn),a(hn,Df),a(es,Af),i(s,yo,o),d(qe,s,o),i(s,ko,o),d(ba,s,o),i(s,Eo,o),i(s,ts,o),a(ts,Tf),a(ts,cn),a(cn,Pf),a(ts,qf),a(ts,Kl),a(Kl,Sf),a(ts,Cf),i(s,Do,o),d(Se,s,o),i(s,Ao,o),i(s,q,o),a(q,Nf),a(q,mn),a(mn,zf),a(q,Ff),a(q,Ql),a(Ql,Of),a(q,Rf),a(q,Xl),a(Xl,If),a(q,Lf),a(q,Zl),a(Zl,Mf),a(q,Bf),a(q,sr),a(sr,Uf),a(q,Vf),a(q,ar),a(ar,Hf),a(q,Yf),a(q,er),a(er,Wf),a(q,Gf),i(s,To,o),d(Ce,s,o),i(s,Po,o),i(s,Ts,o),a(Ts,va),a(va,tr),d(Ne,tr,null),a(Ts,Jf),a(Ts,nr),a(nr,Kf),i(s,qo,o),i(s,ns,o),a(ns,Qf),a(ns,lr),a(lr,Xf),a(ns,Zf),a(ns,fn),a(fn,su),a(ns,au),i(s,So,o),d(ze,s,o),i(s,Co,o),i(s,Ps,o),a(Ps,wa),a(wa,rr),d(Fe,rr,null),a(Ps,eu),a(Ps,pr),a(pr,tu),i(s,No,o),i(s,G,o),a(G,un),a(un,nu),a(G,lu),a(G,or),a(or,ru),a(G,pu),a(G,ir),a(ir,ou),a(G,iu),i(s,zo,o),i(s,qs,o),a(qs,xa),a(xa,hr),d(Oe,hr,null),a(qs,hu),a(qs,cr),a(cr,cu),i(s,Fo,o),i(s,dn,o),a(dn,mu),i(s,Oo,o),i(s,gn,o),a(gn,fu),i(s,Ro,o),d(Re,s,o),i(s,Io,o),i(s,$a,o),a($a,uu),a($a,mr),a(mr,du),a($a,gu),i(s,Lo,o),d(Ie,s,o),i(s,Mo,o),i(s,R,o),a(R,_u),a(R,fr),a(fr,ju),a(R,bu),a(R,ur),a(ur,vu),a(R,wu),a(R,dr),a(dr,xu),a(R,$u),a(R,gr),a(gr,yu),a(R,ku),i(s,Bo,o),i(s,Ss,o),a(Ss,ya),a(ya,_r),d(Le,_r,null),a(Ss,Eu),a(Ss,jr),a(jr,Du),i(s,Uo,o),i(s,_n,o),a(_n,Au),i(s,Vo,o),i(s,ka,o),a(ka,br),a(br,Me),a(Me,Tu),a(Me,vr),a(vr,Pu),a(Me,qu),a(ka,Su),a(ka,wr),a(wr,xr),a(xr,Cu),i(s,Ho,o),d(Be,s,o),i(s,Yo,o),i(s,Ea,o),a(Ea,Nu),a(Ea,jn),a(jn,zu),a(Ea,Fu),i(s,Wo,o),d(Ue,s,o),i(s,Go,o),i(s,bn,o),a(bn,Ou),i(s,Jo,o),d(Ve,s,o),i(s,Ko,o),i(s,Cs,o),a(Cs,Da),a(Da,$r),d(He,$r,null),a(Cs,Ru),a(Cs,yr),a(yr,Iu),i(s,Qo,o),i(s,vn,o),a(vn,Lu),i(s,Xo,o),i(s,ls,o),a(ls,Mu),a(ls,Ye),a(Ye,Bu),a(ls,Uu),a(ls,We),a(We,Vu),a(ls,Hu),i(s,Zo,o),d(Ge,s,o),i(s,si,o),i(s,wn,o),a(wn,Yu),i(s,ai,o),d(Je,s,o),i(s,ei,o),i(s,Aa,o),a(Aa,Wu),a(Aa,xn),a(xn,Gu),a(Aa,Ju),i(s,ti,o),d(Ke,s,o),i(s,ni,o),i(s,I,o),a(I,Ku),a(I,kr),a(kr,Qu),a(I,Xu),a(I,Er),a(Er,Zu),a(I,sd),a(I,Dr),a(Dr,ad),a(I,ed),a(I,Ar),a(Ar,td),a(I,nd),i(s,li,o),i(s,Ns,o),a(Ns,Ta),a(Ta,Tr),d(Qe,Tr,null),a(Ns,ld),a(Ns,Pr),a(Pr,rd),i(s,ri,o),i(s,rs,o),a(rs,pd),a(rs,$n),a($n,od),a(rs,id),a(rs,qr),a(qr,hd),a(rs,cd),i(s,pi,o),d(Xe,s,o),i(s,oi,o),i(s,zs,o),a(zs,Pa),a(Pa,Sr),d(Ze,Sr,null),a(zs,md),a(zs,Cr),a(Cr,fd),i(s,ii,o),i(s,ps,o),a(ps,ud),a(ps,yn),a(yn,dd),a(ps,gd),a(ps,st),a(st,_d),a(ps,jd),i(s,hi,o),i(s,qa,o),a(qa,bd),a(qa,Nr),a(Nr,vd),a(qa,wd),i(s,ci,o),d(at,s,o),i(s,mi,o),i(s,Fs,o),a(Fs,Sa),a(Sa,zr),d(et,zr,null),a(Fs,xd),a(Fs,Fr),a(Fr,$d),i(s,fi,o),i(s,Ca,o),a(Ca,yd),a(Ca,kn),a(kn,kd),a(Ca,Ed),i(s,ui,o),d(tt,s,o),i(s,di,o),d(Na,s,o),i(s,gi,o),i(s,En,o),a(En,Dd),i(s,_i,o),d(nt,s,o),i(s,ji,o),i(s,Os,o),a(Os,za),a(za,Or),d(lt,Or,null),a(Os,Ad),a(Os,Rr),a(Rr,Td),i(s,bi,o),i(s,os,o),a(os,Pd),a(os,Dn),a(Dn,qd),a(os,Sd),a(os,Ir),a(Ir,Cd),a(os,Nd),i(s,vi,o),d(rt,s,o),i(s,wi,o),i(s,is,o),a(is,zd),a(is,pt),a(pt,Fd),a(is,Od),a(is,Lr),a(Lr,Rd),a(is,Id),i(s,xi,o),d(ot,s,o),i(s,$i,o),i(s,Rs,o),a(Rs,An),a(An,Ld),a(Rs,Md),a(Rs,Tn),a(Tn,Bd),a(Rs,Ud),i(s,yi,o),d(it,s,o),i(s,ki,o),d(Fa,s,o),i(s,Ei,o),i(s,Oa,o),a(Oa,Vd),a(Oa,Pn),a(Pn,Hd),a(Oa,Yd),i(s,Di,o),d(ht,s,o),i(s,Ai,o),i(s,Is,o),a(Is,Ra),a(Ra,Mr),d(ct,Mr,null),a(Is,Wd),a(Is,Br),a(Br,Gd),i(s,Ti,o),i(s,mt,o),a(mt,qn),a(qn,Jd),a(mt,Kd),i(s,Pi,o),d(ft,s,o),i(s,qi,o),i(s,Sn,o),a(Sn,Qd),i(s,Si,o),i(s,Ls,o),a(Ls,Ia),a(Ia,Ur),d(ut,Ur,null),a(Ls,Xd),a(Ls,Vr),a(Vr,Zd),i(s,Ci,o),i(s,La,o),a(La,sg),a(La,Cn),a(Cn,ag),a(La,eg),i(s,Ni,o),i(s,Nn,o),a(Nn,tg),i(s,zi,o),d(dt,s,o),i(s,Fi,o),i(s,Ma,o),a(Ma,ng),a(Ma,zn),a(zn,lg),a(Ma,rg),i(s,Oi,o),d(gt,s,o),i(s,Ri,o),d(Ba,s,o),i(s,Ii,o),i(s,Ms,o),a(Ms,Ua),a(Ua,Hr),d(_t,Hr,null),a(Ms,pg),a(Ms,Yr),a(Yr,og),i(s,Li,o),i(s,Fn,o),a(Fn,ig),i(s,Mi,o),i(s,Va,o),a(Va,Wr),a(Wr,jt),a(jt,Gr),a(Gr,hg),a(jt,cg),a(jt,Jr),a(Jr,mg),a(Va,fg),a(Va,J),a(J,bt),a(bt,Kr),a(Kr,ug),a(bt,dg),a(bt,Qr),a(Qr,On),a(On,gg),a(J,_g),a(J,vt),a(vt,Xr),a(Xr,jg),a(vt,bg),a(vt,Zr),a(Zr,Rn),a(Rn,vg),a(J,wg),a(J,wt),a(wt,sp),a(sp,xg),a(wt,$g),a(wt,ap),a(ap,In),a(In,yg),a(J,kg),a(J,xt),a(xt,ep),a(ep,Eg),a(xt,Dg),a(xt,$t),a($t,Ln),a(Ln,Ag),a($t,Tg),a($t,Mn),a(Mn,Pg),i(s,Bi,o),i(s,Bn,o),a(Bn,qg),i(s,Ui,o),d(yt,s,o),Vi=!0},p(s,[o]){const kt={};o&2&&(kt.$$scope={dirty:o,ctx:s}),Ws.$set(kt);const tp={};o&2&&(tp.$$scope={dirty:o,ctx:s}),ha.$set(tp);const np={};o&2&&(np.$$scope={dirty:o,ctx:s}),ba.$set(np);const lp={};o&2&&(lp.$$scope={dirty:o,ctx:s}),Na.$set(lp);const rp={};o&2&&(rp.$$scope={dirty:o,ctx:s}),Fa.$set(rp);const pp={};o&2&&(pp.$$scope={dirty:o,ctx:s}),Ba.$set(pp)},i(s){Vi||(g(x.$$.fragment,s),g(Ka.$$.fragment,s),g(Ws.$$.fragment,s),g(Qa.$$.fragment,s),g(Xa.$$.fragment,s),g(Za.$$.fragment,s),g(se.$$.fragment,s),g(ae.$$.fragment,s),g(ee.$$.fragment,s),g(te.$$.fragment,s),g(ne.$$.fragment,s),g(le.$$.fragment,s),g(re.$$.fragment,s),g(pe.$$.fragment,s),g(oe.$$.fragment,s),g(he.$$.fragment,s),g(ce.$$.fragment,s),g(me.$$.fragment,s),g(fe.$$.fragment,s),g(ue.$$.fragment,s),g(de.$$.fragment,s),g(ge.$$.fragment,s),g(_e.$$.fragment,s),g(je.$$.fragment,s),g(ha.$$.fragment,s),g(be.$$.fragment,s),g(ve.$$.fragment,s),g(we.$$.fragment,s),g(xe.$$.fragment,s),g($e.$$.fragment,s),g(ke.$$.fragment,s),g(Ee.$$.fragment,s),g(De.$$.fragment,s),g(Ae.$$.fragment,s),g(Te.$$.fragment,s),g(Pe.$$.fragment,s),g(qe.$$.fragment,s),g(ba.$$.fragment,s),g(Se.$$.fragment,s),g(Ce.$$.fragment,s),g(Ne.$$.fragment,s),g(ze.$$.fragment,s),g(Fe.$$.fragment,s),g(Oe.$$.fragment,s),g(Re.$$.fragment,s),g(Ie.$$.fragment,s),g(Le.$$.fragment,s),g(Be.$$.fragment,s),g(Ue.$$.fragment,s),g(Ve.$$.fragment,s),g(He.$$.fragment,s),g(Ge.$$.fragment,s),g(Je.$$.fragment,s),g(Ke.$$.fragment,s),g(Qe.$$.fragment,s),g(Xe.$$.fragment,s),g(Ze.$$.fragment,s),g(at.$$.fragment,s),g(et.$$.fragment,s),g(tt.$$.fragment,s),g(Na.$$.fragment,s),g(nt.$$.fragment,s),g(lt.$$.fragment,s),g(rt.$$.fragment,s),g(ot.$$.fragment,s),g(it.$$.fragment,s),g(Fa.$$.fragment,s),g(ht.$$.fragment,s),g(ct.$$.fragment,s),g(ft.$$.fragment,s),g(ut.$$.fragment,s),g(dt.$$.fragment,s),g(gt.$$.fragment,s),g(Ba.$$.fragment,s),g(_t.$$.fragment,s),g(yt.$$.fragment,s),Vi=!0)},o(s){_(x.$$.fragment,s),_(Ka.$$.fragment,s),_(Ws.$$.fragment,s),_(Qa.$$.fragment,s),_(Xa.$$.fragment,s),_(Za.$$.fragment,s),_(se.$$.fragment,s),_(ae.$$.fragment,s),_(ee.$$.fragment,s),_(te.$$.fragment,s),_(ne.$$.fragment,s),_(le.$$.fragment,s),_(re.$$.fragment,s),_(pe.$$.fragment,s),_(oe.$$.fragment,s),_(he.$$.fragment,s),_(ce.$$.fragment,s),_(me.$$.fragment,s),_(fe.$$.fragment,s),_(ue.$$.fragment,s),_(de.$$.fragment,s),_(ge.$$.fragment,s),_(_e.$$.fragment,s),_(je.$$.fragment,s),_(ha.$$.fragment,s),_(be.$$.fragment,s),_(ve.$$.fragment,s),_(we.$$.fragment,s),_(xe.$$.fragment,s),_($e.$$.fragment,s),_(ke.$$.fragment,s),_(Ee.$$.fragment,s),_(De.$$.fragment,s),_(Ae.$$.fragment,s),_(Te.$$.fragment,s),_(Pe.$$.fragment,s),_(qe.$$.fragment,s),_(ba.$$.fragment,s),_(Se.$$.fragment,s),_(Ce.$$.fragment,s),_(Ne.$$.fragment,s),_(ze.$$.fragment,s),_(Fe.$$.fragment,s),_(Oe.$$.fragment,s),_(Re.$$.fragment,s),_(Ie.$$.fragment,s),_(Le.$$.fragment,s),_(Be.$$.fragment,s),_(Ue.$$.fragment,s),_(Ve.$$.fragment,s),_(He.$$.fragment,s),_(Ge.$$.fragment,s),_(Je.$$.fragment,s),_(Ke.$$.fragment,s),_(Qe.$$.fragment,s),_(Xe.$$.fragment,s),_(Ze.$$.fragment,s),_(at.$$.fragment,s),_(et.$$.fragment,s),_(tt.$$.fragment,s),_(Na.$$.fragment,s),_(nt.$$.fragment,s),_(lt.$$.fragment,s),_(rt.$$.fragment,s),_(ot.$$.fragment,s),_(it.$$.fragment,s),_(Fa.$$.fragment,s),_(ht.$$.fragment,s),_(ct.$$.fragment,s),_(ft.$$.fragment,s),_(ut.$$.fragment,s),_(dt.$$.fragment,s),_(gt.$$.fragment,s),_(Ba.$$.fragment,s),_(_t.$$.fragment,s),_(yt.$$.fragment,s),Vi=!1},d(s){e(b),s&&e(k),s&&e(v),j(x),s&&e(S),s&&e(L),s&&e(Us),s&&e(K),s&&e(Vs),s&&e(T),s&&e(cp),s&&e(qt),s&&e(mp),j(Ka,s),s&&e(fp),j(Ws,s),s&&e(up),s&&e(us),j(Qa),s&&e(dp),s&&e(St),s&&e(gp),s&&e(ds),j(Xa),s&&e(_p),s&&e(Ks),s&&e(jp),j(Za,s),s&&e(bp),s&&e(gs),j(se),s&&e(vp),s&&e(V),s&&e(wp),j(ae,s),s&&e(xp),s&&e(_s),j(ee),s&&e($p),s&&e(X),s&&e(yp),s&&e(Ot),s&&e(kp),j(te,s),s&&e(Ep),s&&e(Lt),s&&e(Dp),j(ne,s),s&&e(Ap),s&&e(js),s&&e(Tp),j(le,s),s&&e(Pp),s&&e(bs),j(re),s&&e(qp),s&&e(vs),s&&e(Sp),j(pe,s),s&&e(Cp),s&&e(sa),s&&e(Np),s&&e(ws),j(oe),s&&e(zp),s&&e(H),s&&e(Fp),s&&e(ea),s&&e(Op),j(he,s),s&&e(Rp),s&&e(Yt),s&&e(Ip),j(ce,s),s&&e(Lp),s&&e(xs),j(me),s&&e(Mp),s&&e(Wt),s&&e(Bp),s&&e($s),j(fe),s&&e(Up),s&&e(la),s&&e(Vp),s&&e(ra),s&&e(Hp),j(ue,s),s&&e(Yp),s&&e(ys),j(de),s&&e(Wp),s&&e(oa),s&&e(Gp),j(ge,s),s&&e(Jp),s&&e(ks),j(_e),s&&e(Kp),s&&e(B),s&&e(Qp),j(je,s),s&&e(Xp),j(ha,s),s&&e(Zp),s&&e(ca),s&&e(so),j(be,s),s&&e(ao),s&&e(Es),j(ve),s&&e(eo),s&&e(fa),s&&e(to),j(we,s),s&&e(no),s&&e(F),s&&e(lo),j(xe,s),s&&e(ro),s&&e(Z),s&&e(po),s&&e(Ds),j($e),s&&e(oo),s&&e(ss),s&&e(io),j(ke,s),s&&e(ho),s&&e(en),s&&e(co),j(Ee,s),s&&e(mo),s&&e(da),s&&e(fo),j(De,s),s&&e(uo),s&&e(nn),s&&e(go),s&&e(As),j(Ae),s&&e(_o),s&&e(as),s&&e(jo),s&&e(O),s&&e(bo),j(Te,s),s&&e(vo),s&&e(_a),s&&e(wo),j(Pe,s),s&&e(xo),s&&e(ja),s&&e($o),s&&e(es),s&&e(yo),j(qe,s),s&&e(ko),j(ba,s),s&&e(Eo),s&&e(ts),s&&e(Do),j(Se,s),s&&e(Ao),s&&e(q),s&&e(To),j(Ce,s),s&&e(Po),s&&e(Ts),j(Ne),s&&e(qo),s&&e(ns),s&&e(So),j(ze,s),s&&e(Co),s&&e(Ps),j(Fe),s&&e(No),s&&e(G),s&&e(zo),s&&e(qs),j(Oe),s&&e(Fo),s&&e(dn),s&&e(Oo),s&&e(gn),s&&e(Ro),j(Re,s),s&&e(Io),s&&e($a),s&&e(Lo),j(Ie,s),s&&e(Mo),s&&e(R),s&&e(Bo),s&&e(Ss),j(Le),s&&e(Uo),s&&e(_n),s&&e(Vo),s&&e(ka),s&&e(Ho),j(Be,s),s&&e(Yo),s&&e(Ea),s&&e(Wo),j(Ue,s),s&&e(Go),s&&e(bn),s&&e(Jo),j(Ve,s),s&&e(Ko),s&&e(Cs),j(He),s&&e(Qo),s&&e(vn),s&&e(Xo),s&&e(ls),s&&e(Zo),j(Ge,s),s&&e(si),s&&e(wn),s&&e(ai),j(Je,s),s&&e(ei),s&&e(Aa),s&&e(ti),j(Ke,s),s&&e(ni),s&&e(I),s&&e(li),s&&e(Ns),j(Qe),s&&e(ri),s&&e(rs),s&&e(pi),j(Xe,s),s&&e(oi),s&&e(zs),j(Ze),s&&e(ii),s&&e(ps),s&&e(hi),s&&e(qa),s&&e(ci),j(at,s),s&&e(mi),s&&e(Fs),j(et),s&&e(fi),s&&e(Ca),s&&e(ui),j(tt,s),s&&e(di),j(Na,s),s&&e(gi),s&&e(En),s&&e(_i),j(nt,s),s&&e(ji),s&&e(Os),j(lt),s&&e(bi),s&&e(os),s&&e(vi),j(rt,s),s&&e(wi),s&&e(is),s&&e(xi),j(ot,s),s&&e($i),s&&e(Rs),s&&e(yi),j(it,s),s&&e(ki),j(Fa,s),s&&e(Ei),s&&e(Oa),s&&e(Di),j(ht,s),s&&e(Ai),s&&e(Is),j(ct),s&&e(Ti),s&&e(mt),s&&e(Pi),j(ft,s),s&&e(qi),s&&e(Sn),s&&e(Si),s&&e(Ls),j(ut),s&&e(Ci),s&&e(La),s&&e(Ni),s&&e(Nn),s&&e(zi),j(dt,s),s&&e(Fi),s&&e(Ma),s&&e(Oi),j(gt,s),s&&e(Ri),j(Ba,s),s&&e(Ii),s&&e(Ms),j(_t),s&&e(Li),s&&e(Fn),s&&e(Mi),s&&e(Va),s&&e(Bi),s&&e(Bn),s&&e(Ui),j(yt,s)}}}const Rb={local:"process",sections:[{local:"sort-shuffle-select-split-and-shard",sections:[{local:"sort",title:"Sort"},{local:"shuffle",title:"Shuffle"},{local:"select-and-filter",title:"Select and Filter"},{local:"split",title:"Split"},{local:"shard",title:"Shard"}],title:"Sort, shuffle, select, split, and shard"},{local:"rename-remove-cast-and-flatten",sections:[{local:"rename",title:"Rename"},{local:"remove",title:"Remove"},{local:"cast",title:"Cast"},{local:"flatten",title:"Flatten"}],title:"Rename, remove, cast, and flatten"},{local:"align",title:"Align"},{local:"map",sections:[{local:"multiprocessing",title:"Multiprocessing"},{local:"batch-processing",sections:[{local:"tokenization",title:"Tokenization"},{local:"split-long-examples",title:"Split long examples"},{local:"data-augmentation",title:"Data augmentation"}],title:"Batch processing"},{local:"process-multiple-splits",title:"Process multiple splits"},{local:"distributed-usage",title:"Distributed usage"}],title:"Map"},{local:"concatenate",title:"Concatenate"},{local:"format",sections:[{local:"format-transform",title:"Format transform"}],title:"Format"},{local:"save",title:"Save"},{local:"export",title:"Export"}],title:"Process"};function Ib(z){return Pb(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Vb extends Eb{constructor(b){super();Db(this,b,Ib,Ob,Ab,{})}}export{Vb as default,Rb as metadata};
