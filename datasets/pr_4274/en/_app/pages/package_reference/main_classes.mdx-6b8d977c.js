import{S as gse,i as _se,s as bse,e as n,k as d,w as _,t as l,M as $se,c as r,d as a,m,a as o,x as b,h as i,b as j,F as e,g as D,y as $,q as x,o as v,B as y,v as xse,L as P}from"../../chunks/vendor-8138ceec.js";import{T as vse}from"../../chunks/Tip-12722dfc.js";import{D as E}from"../../chunks/Docstring-6fa3bd37.js";import{C as T}from"../../chunks/CodeBlock-fc89709f.js";import{I as Pt}from"../../chunks/IconCopyLink-2dd3a6ac.js";import{E as N}from"../../chunks/ExampleCodeBlock-25dbadc2.js";function yse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import DatasetInfo
ds_info = DatasetInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_info = DatasetInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function jse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function wse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
more_text = ds["text"]
ds.add_column(name="text_2", column=more_text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>more_text = ds[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_column(name=<span class="hljs-string">&quot;text_2&quot;</span>, column=more_text)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;text_2&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Dse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
new_review = {'label': 0, 'text': 'this movie is the absolute worst thing I have ever seen'}
ds = ds.add_item(new_review)
ds[-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>new_review = {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.add_item(new_review)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[-<span class="hljs-number">1</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function kse(k){let c,g,f,p,u;return p=new T({props:{code:"ds = Dataset.from_pandas(df)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_pandas(df)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ese(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data
MemoryMappedTable
text: string
label: int64
----
text: [[<span class="hljs-string">&quot;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&quot;</span>,<span class="hljs-string">&quot;the soundtrack alone is worth the price of admission .&quot;</span>,<span class="hljs-string">&quot;rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&quot;</span>,<span class="hljs-string">&quot;beneath the film&#x27;s obvious determination to shock at any cost lies considerable skill and determination , backed by sheer nerve .&quot;</span>,<span class="hljs-string">&quot;bielinsky is a filmmaker of impressive talent .&quot;</span>,<span class="hljs-string">&quot;so beautifully acted and directed , it&#x27;s clear that washington most certainly has a new career ahead of him if he so chooses .&quot;</span>,<span class="hljs-string">&quot;a visual spectacle full of stunning images and effects .&quot;</span>,<span class="hljs-string">&quot;a gentle and engrossing character study .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s enough to watch huppert scheming , with her small , intelligent eyes as steady as any noir villain , and to enjoy the perfectly pitched web of tension that chabrol spins .&quot;</span>,<span class="hljs-string">&quot;an engrossing portrait of uncompromising artists trying to create something original against the backdrop of a corporate music industry that only seems to care about the bottom line .&quot;</span>,...,<span class="hljs-string">&quot;ultimately , jane learns her place as a girl , softens up and loses some of the intensity that made her an interesting character to begin with .&quot;</span>,<span class="hljs-string">&quot;ah-nuld&#x27;s action hero days might be over .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s clear why deuces wild , which was shot two years ago , has been gathering dust on mgm&#x27;s shelf .&quot;</span>,<span class="hljs-string">&quot;feels like nothing quite so much as a middle-aged moviemaker&#x27;s attempt to surround himself with beautiful , half-naked women .&quot;</span>,<span class="hljs-string">&quot;when the precise nature of matthew&#x27;s predicament finally comes into sharp focus , the revelation fails to justify the build-up .&quot;</span>,<span class="hljs-string">&quot;this picture is murder by numbers , and as easy to be bored by as your abc&#x27;s , despite a few whopping shootouts .&quot;</span>,<span class="hljs-string">&quot;hilarious musical comedy though stymied by accents thick as mud .&quot;</span>,<span class="hljs-string">&quot;if you are into splatter movies , then you will probably have a reasonably good time with the salton sea .&quot;</span>,<span class="hljs-string">&quot;a dull , simple-minded and stereotypical tale of drugs , death and mind-numbing indifference on the inner-city streets .&quot;</span>,<span class="hljs-string">&quot;the feature-length stretch . . . strains the show&#x27;s concept .&quot;</span>]]
label: [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,...,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ise(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
[{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function qse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
<span class="hljs-number">2</span>`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Tse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
<span class="hljs-number">1066</span>`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Nse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Pse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
(<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Lse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.unique('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&#x27;label&#x27;</span>)
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ase(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
    num_rows: <span class="hljs-number">87599</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Fse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset, ClassLabel, Value
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
new_features = ds.features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ose(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Sse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.remove_columns('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&#x27;label&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Cse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_column('label', 'label_new')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function zse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
Dataset({
    features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Vse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq", split="validation")
ds.features
ds = ds.class_encode_column('answer')
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&#x27;answer&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Use(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.__len__`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.__len__
&lt;bound method Dataset.__len__ of Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})&gt;`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Mse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['text', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Rse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')
def encode(batch):
    return tokenizer(batch['text'], padding=True, truncation=True, return_tensors='pt')
ds.set_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&#x27;text&#x27;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">29353</span>,  <span class="hljs-number">2135</span>, <span class="hljs-number">15102</span>,  <span class="hljs-number">1996</span>,  <span class="hljs-number">9428</span>, <span class="hljs-number">20868</span>,  <span class="hljs-number">2890</span>,  <span class="hljs-number">8663</span>,  <span class="hljs-number">6895</span>,
         <span class="hljs-number">20470</span>,  <span class="hljs-number">2571</span>,  <span class="hljs-number">3663</span>,  <span class="hljs-number">2090</span>,  <span class="hljs-number">4603</span>,  <span class="hljs-number">3017</span>,  <span class="hljs-number">3008</span>,  <span class="hljs-number">1998</span>,  <span class="hljs-number">2037</span>, <span class="hljs-number">24211</span>,
         <span class="hljs-number">5637</span>,  <span class="hljs-number">1998</span>, <span class="hljs-number">11690</span>,  <span class="hljs-number">2336</span>,  <span class="hljs-number">1012</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Bse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format
ds.reset_format()
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Hse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Gse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example["text"], padding=True, truncation=True, return_tensors='pt')
ds = ds.with_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
         <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
         <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Wse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
<span class="hljs-number">10</span>`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Kse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds[0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the soundtrack alone is worth the price of admission .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Yse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Jse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.select(range(4))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.select(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">4</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Zse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]
sorted_ds = ds.sort('label')
sorted_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&#x27;label&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Xse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Qse(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds = ds.train_test_split(test_size=0.2, shuffle=True)

ds = ds.train_test_split(test_size=0.2, seed=42)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, shuffle=<span class="hljs-literal">True</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">852</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">214</span>
    })
})

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, seed=<span class="hljs-number">42</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ene(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds
ds.shard(num_shards=2, index=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shard(num_shards=<span class="hljs-number">2</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function tne(k){let c,g,f,p,u;return p=new T({props:{code:`ds_train = ds["train"].to_tf_dataset(
   columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'],
   shuffle=True,
   batch_size=16,
   collate_fn=data_collator,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds_train = ds[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>   columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
<span class="hljs-meta">... </span>   shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>   batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>   collate_fn=data_collator,
<span class="hljs-meta">... </span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ane(k){let c,g,f,p,u;return p=new T({props:{code:'dataset.push_to_hub("<organization>/<dataset_id>", split="evaluation")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;evaluation&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function sne(k){let c,g,f,p,u;return p=new T({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=n("p"),g=l("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function nne(k){let c,g;return c=new T({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:P,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function rne(k){let c,g,f,p,u;return p=new T({props:{code:'saved_ds = ds.save_to_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>saved_ds = ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function one(k){let c,g,f,p,u;return p=new T({props:{code:'ds = load_from_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function lne(k){let c,g,f,p,u;return p=new T({props:{code:'ds.to_csv("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_csv(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ine(k){let c,g,f,p,u;return p=new T({props:{code:"ds.to_pandas()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_pandas()'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function pne(k){let c,g,f,p,u;return p=new T({props:{code:"ds.to_dict()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_dict()'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function cne(k){let c,g,f,p,u;return p=new T({props:{code:'ds.to_json("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_json(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function dne(k){let c,g,f,p,u;return p=new T({props:{code:'ds.to_parquet("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_parquet(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function mne(k){let c,g,f,p,u;return p=new T({props:{code:`ds = datasets.load_dataset('crime_and_punish', split='train')
ds_with_embeddings = ds.map(lambda example: {'embeddings': embed(example['line']}))
ds_with_embeddings.add_faiss_index(column='embeddings')
# query
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples('embeddings', embed('my new query'), k=10)
# save index
ds_with_embeddings.save_faiss_index('embeddings', 'my_index.faiss')

ds = datasets.load_dataset('crime_and_punish', split='train')
# load index
ds.load_faiss_index('embeddings', 'my_index.faiss')
# query
scores, retrieved_examples = ds.get_nearest_examples('embeddings', embed('my new query'), k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># save index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function hne(k){let c,g,f,p,u;return p=new T({props:{code:`es_client = elasticsearch.Elasticsearch()
ds = datasets.load_dataset('crime_and_punish', split='train')
ds.add_elasticsearch_index(column='line', es_client=es_client, es_index_name="my_es_index")
scores, retrieved_examples = ds.get_nearest_examples('line', 'my new query', k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>es_client = elasticsearch.Elasticsearch()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function fne(k){let c,g,f,p,u;return p=new T({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),{c(){c=n("p"),g=l("Default config is:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Default config is:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function une(k){let c,g,f,p,u;return p=new T({props:{code:"ds = Dataset.from_csv('path/to/dataset.csv')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_csv(<span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function gne(k){let c,g,f,p,u;return p=new T({props:{code:"ds = Dataset.from_json('path/to/dataset.json')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_json(<span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function _ne(k){let c,g,f,p,u;return p=new T({props:{code:"ds = Dataset.from_parquet('path/to/dataset.parquet')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_parquet(<span class="hljs-string">&#x27;path/to/dataset.parquet&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function bne(k){let c,g,f,p,u;return p=new T({props:{code:"ds = Dataset.from_text('path/to/dataset.txt')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_text(<span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function $ne(k){let c,g,f,p,u;return p=new T({props:{code:`# dataset with mapping {'entailment': 0, 'neutral': 1, 'contradiction': 2}
ds = load_dataset("glue", "mnli", split="train")
# mapping to align with
label2id = {'CONTRADICTION': 0, 'NEUTRAL': 1, 'ENTAILMENT': 2}
ds_aligned = ds.align_labels_with_mapping(label2id, "label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mapping to align with</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function xne(k){let c,g,f,p,u;return p=new T({props:{code:"ds3 = concatenate_datasets([ds1, ds2])",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds3 = concatenate_datasets([ds1, ds2])'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function vne(k){let c,g,f,p,u;return p=new T({props:{code:`For regular datasets (map-style):

>>> from datasets import Dataset, interleave_datasets
>>> d1 = Dataset.from_dict({"a": [0, 1, 2]})
>>> d2 = Dataset.from_dict({"a": [10, 11, 12]})
>>> d3 = Dataset.from_dict({"a": [20, 21, 22]})
>>> dataset = interleave_datasets([d1, d2, d3])
>>> dataset["a"]
[0, 10, 20, 1, 11, 21, 2, 12, 22]
>>> dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
>>> dataset["a"]
[10, 0, 11, 1, 2, 20, 12]

For datasets in streaming mode (iterable):

>>> from datasets import load_dataset, interleave_datasets
>>> d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
>>> d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
>>> dataset = interleave_datasets([d1, d2])
>>> iterator = iter(dataset)
>>> next(iterator)
{'text': 'Mtendere Village was inspired by the vision...
>>> next(iterator)
{'text': "M\xE9dia de d\xE9bat d'id\xE9es, de culture...`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>]

For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function yne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function jne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
{<span class="hljs-string">&#x27;test&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-test.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;train&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-train.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function wne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">2</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Dne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">1066</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">8530</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">1066</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function kne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ene(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
{<span class="hljs-string">&#x27;test&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;train&#x27;</span>: (<span class="hljs-number">8530</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;validation&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ine(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.unique("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&quot;label&quot;</span>)
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function qne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">0</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Tne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds["train"][0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Nne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">4265</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Pne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]
sorted_ds = ds.sort("label")
sorted_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Lne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Ane(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Fne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format
ds.reset_format()
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function One(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds["train"].format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Sne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example['text'], truncation=True, padding=True, return_tensors="pt")
ds = ds.with_transform(encode)
ds["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">2067</span>,  <span class="hljs-number">1110</span>, <span class="hljs-number">17348</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1129</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">6880</span>,  <span class="hljs-number">1432</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1207</span>,   <span class="hljs-number">107</span>, <span class="hljs-number">14255</span>,  <span class="hljs-number">1389</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1105</span>,  <span class="hljs-number">1115</span>,  <span class="hljs-number">1119</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1280</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1294</span>,   <span class="hljs-number">170</span>, <span class="hljs-number">24194</span>,  <span class="hljs-number">1256</span>,  <span class="hljs-number">3407</span>,  <span class="hljs-number">1190</span>,
        <span class="hljs-number">170</span>, <span class="hljs-number">11791</span>,  <span class="hljs-number">5253</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1732</span>,  <span class="hljs-number">7200</span>, <span class="hljs-number">10947</span>, <span class="hljs-number">12606</span>,  <span class="hljs-number">2895</span>,   <span class="hljs-number">117</span>,
        <span class="hljs-number">179</span>,  <span class="hljs-number">7766</span>,   <span class="hljs-number">118</span>,   <span class="hljs-number">172</span>, <span class="hljs-number">15554</span>,  <span class="hljs-number">1181</span>,  <span class="hljs-number">3498</span>,  <span class="hljs-number">6961</span>,  <span class="hljs-number">3263</span>,  <span class="hljs-number">1137</span>,
        <span class="hljs-number">188</span>,  <span class="hljs-number">1566</span>,  <span class="hljs-number">7912</span>, <span class="hljs-number">14516</span>,  <span class="hljs-number">6997</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Cne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("squad")
ds["train"].features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">87599</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">10570</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function zne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Vne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Une(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.remove_columns("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Mne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_column("label", "label_new")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;label&quot;</span>, <span class="hljs-string">&quot;label_new&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Rne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Bne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq")
ds["train"].features
ds = ds.class_encode_column("answer")
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&quot;answer&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Hne(k){let c,g,f,p,u;return p=new T({props:{code:'dataset_dict.push_to_hub("<organization>/<dataset_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Gne(k){let c,g,f,p,u;return p=new T({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=n("p"),g=l("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Wne(k){let c,g;return c=new T({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:P,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Kne(k){let c,g,f,p,u;return p=new T({props:{code:"ds = load_from_disk('path/to/dataset/directory')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&#x27;path/to/dataset/directory&#x27;</span>)'}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Yne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_csv({'train': 'path/to/dataset.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_csv({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Jne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_json({'train': 'path/to/dataset.json'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_json({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Zne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_parquet({'train': 'path/to/dataset/parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_parquet({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset/parquet&#x27;</span>})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Xne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_text({'train': 'path/to/dataset.txt'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_text({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>})`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function Qne(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds = ds.remove_columns("label")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ere(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train", streaming=True)
ds.features
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">8000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function tre(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds.features
new_features = ds.features.copy()
new_features["label"] = ClassLabel(names=["bad", "good"])
new_features["text"] = Value("large_string")
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&quot;bad&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;text&quot;</span>] = Value(<span class="hljs-string">&quot;large_string&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function are(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function sre(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds.rename_column("text", "movie_review")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function nre(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&quot;it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function rre(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
shuffled_ds = ds.shuffle(seed=42)
list(shuffled_ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(shuffled_ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ore(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
small_ds = ds.take(2)
list(small_ds)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>small_ds = ds.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(small_ds)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function lre(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ire(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;Review: it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function pre(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
list(ds["train"].take(3))
ds = ds.shuffle(seed=42)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function cre(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
def encode(example):
    return tokenizer(examples["text"], truncation=True, padding="max_length")
ds = ds.map(encode, batched=True, remove_columns=["text"])
ds = ds.with_format("torch")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-string">&quot;max_length&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(encode, batched=<span class="hljs-literal">True</span>, remove_columns=[<span class="hljs-string">&quot;text&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>)`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function dre(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function mre(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function hre(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_column("text", "movie_review")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function fre(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_columns({"text": "movie_review", "label": "rating"})
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_columns({<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;movie_review&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;rating&quot;</span>})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;rating&#x27;</span>: <span class="hljs-number">1</span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function ure(k){let c,g,f,p,u,t,h,Zs,la,$r,Se;return{c(){c=n("p"),g=l("A "),f=n("a"),p=l("datasets.Sequence"),u=l(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=n("code"),h=l("list"),Zs=l(` instead of the
`),la=n("a"),$r=l("datasets.Sequence"),Se=l("."),this.h()},l($e){c=r($e,"P",{});var ne=o(c);g=i(ne,"A "),f=r(ne,"A",{href:!0});var ia=o(f);p=i(ia,"datasets.Sequence"),ia.forEach(a),u=i(ne,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=r(ne,"CODE",{});var Af=o(t);h=i(Af,"list"),Af.forEach(a),Zs=i(ne,` instead of the
`),la=r(ne,"A",{href:!0});var xr=o(la);$r=i(xr,"datasets.Sequence"),xr.forEach(a),Se=i(ne,"."),ne.forEach(a),this.h()},h(){j(f,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Sequence"),j(la,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Sequence")},m($e,ne){D($e,c,ne),e(c,g),e(c,f),e(f,p),e(c,u),e(c,t),e(t,h),e(c,Zs),e(c,la),e(la,$r),e(c,Se)},d($e){$e&&a(c)}}}function gre(k){let c,g,f,p,u;return p=new T({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function _re(k){let c,g,f,p,u;return p=new T({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function bre(k){let c,g,f,p,u;return p=new T({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': 'le chat',
        'de': 'die katze'
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function $re(k){let c,g,f,p,u;return p=new T({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': ['le chat', 'la chatte,']
        'de': 'die katze'
}
# Tensor returned :
{
        'language': ['en', 'de', 'fr', 'fr'],
        'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tensor returned :</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>{
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
<span class="hljs-meta">... </span>}`}}),{c(){c=n("p"),g=l("Example:"),f=d(),_(p.$$.fragment)},l(t){c=r(t,"P",{});var h=o(c);g=i(h,"Example:"),h.forEach(a),f=m(t),b(p.$$.fragment,t)},m(t,h){D(t,c,h),e(c,g),D(t,f,h),$(p,t,h),u=!0},p:P,i(t){u||(x(p.$$.fragment,t),u=!0)},o(t){v(p.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(p,t)}}}function xre(k){let c,g;return c=new T({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(anon=True)  # doctest: +SKIP
s3.ls('public-datasets/imdb/train')  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(anon=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;public-datasets/imdb/train&#x27;</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:P,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function vre(k){let c,g;return c=new T({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
s3.ls('my-private-datasets/imdb/train')  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;my-private-datasets/imdb/train&#x27;</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:P,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function yre(k){let c,g;return c=new T({props:{code:`import botocore
from datasets.filesystems import S3Filesystem
s3_session = botocore.session.Session(profile_name='my_profile_name')
s3 = S3FileSystem(session=s3_session)  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile_name=<span class="hljs-string">&#x27;my_profile_name&#x27;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(session=s3_session)  <span class="hljs-comment"># doctest: +SKIP</span>`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:P,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function jre(k){let c,g;return c=new T({props:{code:`from datasets import load_from_disk
from datasets.filesystems import S3Filesystem
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
dataset = load_from_disk('s3://my-private-datasets/imdb/train',fs=s3)  # doctest: +SKIP
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>,fs=s3)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:P,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function wre(k){let c,g;return c=new T({props:{code:`from datasets import load_dataset
from datasets.filesystems import S3Filesystem
dataset = load_dataset("imdb")
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
dataset.save_to_disk('s3://my-private-datasets/imdb/train',fs=s3)  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.save_to_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>,fs=s3)  <span class="hljs-comment"># doctest: +SKIP</span>`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,p){$(c,f,p),g=!0},p:P,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Dre(k){let c,g,f,p,u,t,h,Zs,la,$r,Se,$e,ne,ia,Af,xr,jD,U7,Z,cp,wD,Ab,DD,kD,Ff,Fb,ED,ID,qD,Ob,TD,ND,xe,dp,PD,mp,LD,Sb,AD,FD,OD,Cb,SD,CD,zb,zD,VD,vr,UD,pa,hp,MD,Xs,RD,Vb,BD,HD,Ub,GD,WD,KD,yr,M7,Qs,jr,Mb,fp,YD,Rb,JD,R7,wr,ZD,Of,XD,QD,B7,I,up,ek,Bb,tk,ak,Qe,gp,sk,Hb,nk,rk,Gb,Wb,ok,lk,Dr,ik,et,_p,pk,Kb,ck,dk,Yb,Jb,mk,hk,kr,fk,Er,bp,uk,Zb,gk,_k,Ir,$p,bk,Xb,$k,xk,ve,xp,vk,Lt,yk,Qb,jk,wk,e2,Dk,kk,Sf,Ek,Ik,qk,vp,Tk,t2,Nk,Pk,Lk,yp,Ak,a2,Fk,Ok,Sk,qr,Ck,Tr,jp,zk,At,Vk,s2,Uk,Mk,n2,Rk,Bk,Cf,Hk,Gk,Wk,ca,wp,Kk,r2,Yk,Jk,Nr,Zk,da,Dp,Xk,o2,Qk,eE,Pr,tE,ma,kp,aE,l2,sE,nE,Lr,rE,ha,Ep,oE,Ip,lE,Ar,iE,i2,pE,cE,dE,mE,Fr,hE,fa,qp,fE,p2,uE,gE,Or,_E,ua,Tp,bE,c2,$E,xE,Sr,vE,tt,Np,yE,d2,jE,wE,m2,DE,kE,Cr,EE,ga,Pp,IE,h2,qE,TE,zr,NE,_a,Lp,PE,f2,LE,AE,Vr,FE,ba,Ap,OE,u2,SE,CE,Ur,zE,at,Fp,VE,g2,UE,ME,en,RE,zf,BE,HE,_2,GE,WE,KE,Mr,YE,$a,Op,JE,b2,ZE,XE,Rr,QE,xa,Sp,e3,$2,t3,a3,Br,s3,va,Cp,n3,zp,r3,x2,o3,l3,i3,Hr,p3,ya,Vp,c3,v2,d3,m3,Gr,h3,ja,Up,f3,y2,u3,g3,Mp,_3,Vf,b3,$3,x3,Wr,Rp,v3,tn,y3,j2,j3,w3,w2,D3,k3,E3,ye,Bp,I3,Ce,q3,D2,T3,N3,k2,P3,L3,E2,A3,F3,Uf,O3,S3,C3,ze,z3,I2,V3,U3,q2,M3,R3,T2,B3,H3,N2,G3,W3,K3,P2,Y3,J3,Kr,Z3,wa,Hp,X3,st,Q3,L2,e5,t5,A2,a5,s5,Mf,n5,r5,Rf,o5,l5,Yr,i5,nt,Gp,p5,Wp,c5,F2,d5,m5,h5,Bf,f5,O2,u5,g5,Jr,_5,je,Kp,b5,Ft,$5,S2,x5,v5,C2,y5,j5,z2,w5,D5,k5,Yp,E5,Hf,I5,q5,T5,an,N5,Gf,P5,L5,V2,A5,F5,O5,Zr,S5,we,Jp,C5,sn,z5,U2,V5,U5,M2,M5,R5,B5,nn,H5,Wf,G5,W5,Kf,K5,Y5,J5,rn,Z5,Yf,X5,Q5,R2,e6,t6,a6,Xr,s6,Qr,Zp,n6,B2,r6,o6,rt,Xp,l6,H2,i6,p6,G2,c6,d6,eo,m6,De,Qp,h6,W2,f6,u6,ec,g6,K2,_6,b6,$6,on,Y2,x6,v6,J2,y6,j6,me,w6,Z2,D6,k6,X2,E6,I6,Q2,q6,T6,e$,N6,P6,t$,L6,A6,F6,to,O6,Da,tc,S6,a$,C6,z6,ao,V6,ka,ac,U6,s$,M6,R6,so,B6,ot,sc,H6,n$,G6,W6,r$,K6,Y6,no,J6,lt,nc,Z6,o$,X6,Q6,l$,e8,t8,ro,a8,it,rc,s8,H,n8,i$,r8,o8,p$,l8,i8,c$,p8,c8,d$,d8,m8,m$,h8,f8,h$,u8,g8,f$,_8,b8,$8,oc,x8,u$,v8,y8,j8,oo,w8,re,lc,D8,ln,k8,g$,E8,I8,_$,q8,T8,N8,b$,P8,L8,ic,A8,$$,F8,O8,S8,x$,C8,z8,lo,V8,Ea,pc,U8,v$,M8,R8,io,B8,pt,cc,H8,y$,G8,W8,Ot,K8,Jf,Y8,J8,Zf,Z8,X8,j$,Q8,eI,tI,po,aI,K,dc,sI,pn,nI,Xf,rI,oI,w$,lI,iI,pI,cn,cI,Qf,dI,mI,eu,hI,fI,uI,mc,gI,D$,_I,bI,$I,co,xI,mo,vI,ho,yI,Ia,hc,jI,St,wI,k$,DI,kI,tu,EI,II,E$,qI,TI,NI,fo,PI,uo,fc,LI,I$,AI,FI,qa,uc,OI,q$,SI,CI,go,zI,Ta,gc,VI,_c,UI,T$,MI,RI,BI,_o,HI,Na,bc,GI,N$,WI,KI,bo,YI,Pa,$c,JI,P$,ZI,XI,$o,QI,La,xc,e9,L$,t9,a9,xo,s9,ct,vc,n9,dn,r9,A$,o9,l9,F$,i9,p9,c9,O$,au,d9,yc,m9,h9,vo,f9,Aa,jc,u9,Ct,g9,S$,_9,b9,C$,$9,x9,z$,v9,y9,j9,V$,su,w9,wc,D9,k9,yo,Dc,E9,U$,I9,q9,Fa,kc,T9,M$,N9,P9,Ec,L9,R$,A9,F9,O9,Oa,Ic,S9,B$,C9,z9,jo,V9,Sa,qc,U9,H$,M9,R9,wo,B9,Do,Tc,H9,G$,G9,W9,ko,Nc,K9,W$,Y9,J9,Eo,Pc,Z9,K$,X9,Q9,Io,Lc,eq,Y$,tq,aq,qo,Ac,sq,J$,nq,rq,To,Fc,oq,Z$,lq,iq,No,Oc,pq,X$,cq,dq,Po,Sc,mq,nu,ru,hq,fq,uq,Lo,Cc,gq,ou,lu,_q,bq,$q,iu,zc,xq,pu,Vc,vq,cu,Uc,yq,du,Mc,jq,mu,Rc,wq,hu,Bc,Dq,fu,Hc,kq,uu,Gc,Eq,gu,Wc,Iq,_u,Kc,qq,bu,Yc,Tq,$u,Jc,Nq,xu,Zc,Pq,Ca,Xc,Lq,Q$,Aq,Fq,Ao,Oq,za,Qc,Sq,e1,Cq,zq,Fo,Vq,Va,ed,Uq,t1,Mq,Rq,Oo,Bq,Ua,td,Hq,a1,Gq,Wq,So,Kq,Ma,ad,Yq,mn,Jq,vu,Zq,Xq,yu,Qq,eT,tT,hn,aT,s1,sT,nT,n1,rT,oT,lT,Ra,sd,iT,nd,pT,r1,cT,dT,mT,Co,H7,zt,rd,hT,fn,fT,ju,uT,gT,wu,_T,bT,$T,zo,G7,X,od,xT,o1,vT,yT,un,jT,Du,wT,DT,ku,kT,ET,IT,Ve,qT,l1,TT,NT,i1,PT,LT,p1,AT,FT,c1,OT,ST,CT,d1,zT,VT,Vo,W7,he,ld,UT,m1,MT,RT,h1,BT,HT,f1,GT,WT,Ue,u1,KT,YT,g1,JT,ZT,_1,XT,QT,id,eN,Eu,tN,aN,sN,Vt,nN,Iu,rN,oN,b1,lN,iN,qu,pN,cN,K7,fe,pd,dN,$1,mN,hN,x1,fN,uN,v1,gN,_N,Me,y1,bN,$N,j1,xN,vN,w1,yN,jN,cd,wN,Tu,DN,kN,EN,Ut,IN,Nu,qN,TN,D1,NN,PN,Pu,LN,AN,Y7,ue,dd,FN,k1,ON,SN,E1,CN,zN,I1,VN,UN,Re,q1,MN,RN,T1,BN,HN,N1,GN,WN,md,KN,Lu,YN,JN,ZN,Mt,XN,Au,QN,eP,P1,tP,aP,Fu,sP,nP,J7,gn,Uo,L1,hd,rP,A1,oP,Z7,Mo,lP,F1,iP,pP,X7,L,fd,cP,O1,dP,mP,Ba,ud,hP,S1,fP,uP,Ro,gP,Ha,gd,_P,C1,bP,$P,Bo,xP,Ga,_d,vP,z1,yP,jP,Ho,wP,Wa,bd,DP,$d,kP,Go,EP,V1,IP,qP,TP,NP,Wo,PP,Ka,xd,LP,U1,AP,FP,Ko,OP,Ya,vd,SP,M1,CP,zP,Yo,VP,dt,yd,UP,R1,MP,RP,B1,BP,HP,Jo,GP,Ja,jd,WP,H1,KP,YP,Zo,JP,Za,wd,ZP,G1,XP,QP,Xo,eL,Xa,Dd,tL,W1,aL,sL,Qo,nL,mt,kd,rL,K1,oL,lL,Y1,iL,pL,el,cL,ke,Ed,dL,J1,mL,hL,Z1,fL,uL,X1,gL,_L,tl,bL,Ee,Id,$L,qd,xL,Q1,vL,yL,jL,Be,wL,ex,DL,kL,tx,EL,IL,ax,qL,TL,sx,NL,PL,LL,nx,AL,FL,al,OL,ht,Td,SL,Nd,CL,rx,zL,VL,UL,Ou,ML,ox,RL,BL,sl,HL,nl,Pd,GL,_n,WL,lx,KL,YL,ix,JL,ZL,XL,Ie,Ld,QL,Rt,eA,px,tA,aA,cx,sA,nA,dx,rA,oA,lA,Ad,iA,Su,pA,cA,dA,bn,mA,Cu,hA,fA,mx,uA,gA,_A,rl,bA,qe,Fd,$A,$n,xA,hx,vA,yA,fx,jA,wA,DA,xn,kA,zu,EA,IA,Vu,qA,TA,NA,vn,PA,ux,LA,AA,gx,FA,OA,SA,ol,CA,Qa,Od,zA,_x,VA,UA,ll,MA,ft,Sd,RA,bx,BA,HA,Bt,GA,Uu,WA,KA,$x,YA,JA,xx,ZA,XA,QA,il,eF,es,Cd,tF,vx,aF,sF,pl,nF,Te,zd,rF,yx,oF,lF,jx,iF,pF,yn,cF,Mu,dF,mF,wx,hF,fF,uF,cl,gF,Ne,Vd,_F,Dx,bF,$F,jn,xF,Ru,vF,yF,kx,jF,wF,DF,Ud,Ex,kF,EF,Ix,IF,qF,dl,TF,ts,Md,NF,qx,PF,LF,ml,AF,as,Rd,FF,Bd,OF,Tx,SF,CF,zF,hl,VF,Pe,Hd,UF,wn,MF,Nx,RF,BF,Px,HF,GF,WF,Lx,KF,YF,Ht,JF,Bu,ZF,XF,Hu,QF,eO,Ax,tO,aO,sO,fl,nO,oe,Gd,rO,Dn,oO,Gu,lO,iO,Fx,pO,cO,dO,kn,mO,Wu,hO,fO,Ku,uO,gO,_O,Wd,bO,Ox,$O,xO,vO,ul,yO,gl,jO,ss,Kd,wO,Gt,DO,Sx,kO,EO,Yu,IO,qO,Cx,TO,NO,PO,_l,LO,ns,Yd,AO,zx,FO,OO,bl,SO,rs,Jd,CO,Vx,zO,VO,$l,UO,os,Zd,MO,Ux,RO,BO,xl,HO,ls,Xd,GO,Mx,WO,KO,vl,YO,is,Qd,JO,En,ZO,Ju,XO,QO,Zu,eS,tS,aS,In,sS,Rx,nS,rS,Bx,oS,lS,Q7,Xu,ew,qn,yl,Hx,em,iS,Gx,pS,tw,jl,cS,Qu,dS,mS,aw,F,tm,hS,Wx,fS,uS,ps,am,gS,Kx,_S,bS,wl,$S,cs,sm,xS,Yx,vS,yS,Dl,jS,ds,nm,wS,Jx,DS,kS,kl,ES,eg,rm,IS,Le,om,qS,Zx,TS,NS,lm,PS,Xx,LS,AS,FS,Tn,Qx,OS,SS,ev,CS,zS,ge,VS,tv,US,MS,av,RS,BS,sv,HS,GS,nv,WS,KS,rv,YS,JS,ZS,El,XS,ms,im,QS,ov,eC,tC,Il,aC,hs,pm,sC,lv,nC,rC,ql,oC,le,cm,lC,iv,iC,pC,pv,cC,dC,dm,mC,cv,hC,fC,uC,Nn,gC,tg,_C,bC,ag,$C,xC,vC,Tl,yC,ut,mm,jC,hm,wC,dv,DC,kC,EC,mv,IC,qC,hv,fv,fm,uv,TC,NC,um,PC,fs,gm,LC,_m,AC,gv,FC,OC,SC,Nl,CC,Pl,bm,zC,sg,ng,VC,UC,MC,Ll,$m,RC,rg,og,BC,HC,GC,lg,xm,WC,ig,vm,KC,pg,ym,YC,cg,jm,JC,dg,wm,ZC,mg,Dm,XC,hg,km,QC,fg,Em,ez,ug,Im,tz,gg,qm,az,_g,Tm,sz,bg,Nm,nz,$g,Pm,sw,Pn,Al,_v,Lm,rz,bv,oz,nw,Fl,lz,$v,iz,pz,rw,U,Am,cz,Ae,Fm,dz,xv,mz,hz,Om,fz,vv,uz,gz,_z,Ln,yv,bz,$z,jv,xz,vz,_e,yz,wv,jz,wz,Dv,Dz,kz,kv,Ez,Iz,Ev,qz,Tz,Iv,Nz,Pz,Lz,Ol,Az,us,Sm,Fz,qv,Oz,Sz,Sl,Cz,ie,Cm,zz,Tv,Vz,Uz,Nv,Mz,Rz,zm,Bz,Pv,Hz,Gz,Wz,An,Kz,xg,Yz,Jz,vg,Zz,Xz,Qz,Cl,eV,gs,Vm,tV,Lv,aV,sV,zl,nV,_s,Um,rV,Av,oV,lV,Vl,iV,bs,Mm,pV,Fv,cV,dV,Ul,mV,gt,Rm,hV,Ov,fV,uV,Sv,gV,_V,Cv,zv,Bm,Vv,bV,$V,Hm,xV,$s,Gm,vV,Uv,yV,jV,Ml,wV,xs,Wm,DV,Mv,kV,EV,Rl,ow,Fn,Bl,Rv,Km,IV,Bv,qV,lw,z,Ym,TV,Hv,NV,PV,Jm,LV,Gv,AV,FV,OV,yg,Wv,SV,CV,zV,G,Kv,vs,VV,jg,UV,MV,Yv,RV,BV,Jv,HV,GV,Zv,Zm,WV,wg,KV,YV,JV,Xv,Xm,ZV,Qv,XV,QV,eU,Qm,He,tU,ey,aU,sU,Dg,nU,rU,ty,oU,lU,kg,iU,pU,cU,Hl,dU,ay,Ge,mU,Eg,hU,fU,Ig,uU,gU,qg,_U,bU,Tg,$U,xU,vU,sy,eh,yU,Ng,jU,wU,DU,ny,Wt,kU,Pg,EU,IU,ry,qU,TU,oy,NU,PU,LU,ly,Gl,Lg,AU,FU,Ag,OU,SU,CU,Wl,th,zU,iy,VU,UU,Kl,ah,MU,py,RU,BU,Yl,sh,HU,cy,GU,WU,Jl,nh,KU,dy,YU,JU,Zl,rh,ZU,my,XU,QU,Xl,oh,eM,hy,tM,aM,ys,lh,sM,fy,nM,rM,uy,oM,lM,Ql,ih,iM,gy,pM,cM,Fe,ph,dM,_y,mM,hM,by,fM,uM,Kt,gM,Fg,_M,bM,Og,$M,xM,Sg,vM,yM,jM,ei,wM,_t,ch,DM,$y,kM,EM,xy,IM,qM,ti,iw,On,dh,TM,vy,NM,pw,Q,mh,PM,yy,LM,AM,hh,FM,jy,OM,SM,CM,Sn,Cg,wy,zM,VM,UM,zg,Dy,MM,RM,BM,Vg,ky,HM,GM,WM,ai,fh,KM,Ey,YM,JM,si,uh,ZM,Iy,XM,cw,Yt,gh,QM,qy,eR,tR,Ty,aR,dw,ee,_h,sR,Ug,Ny,nR,rR,oR,Py,lR,iR,bh,pR,Ly,cR,dR,mR,ni,hR,ri,$h,fR,Ay,uR,mw,te,xh,gR,Mg,Fy,_R,bR,$R,Oy,xR,vR,Sy,yR,jR,oi,wR,li,vh,DR,Cy,kR,hw,yh,jh,fw,wh,Dh,uw,kh,Eh,gw,Ih,qh,_w,M,Th,ER,zy,IR,qR,Vy,TR,NR,Cn,Uy,Nh,PR,My,LR,AR,FR,zn,Ph,OR,Ry,SR,CR,zR,Lh,By,VR,UR,Hy,MR,RR,Gy,BR,HR,Vn,Ah,GR,Wy,WR,KR,YR,Un,Ky,JR,ZR,Yy,XR,QR,Jy,eB,tB,Zy,aB,sB,js,Fh,nB,Xy,rB,oB,Jt,Qy,lB,iB,ej,pB,cB,tj,dB,mB,aj,hB,fB,ii,Oh,uB,sj,gB,_B,pi,Sh,bB,nj,$B,xB,ci,Ch,vB,rj,yB,jB,di,zh,wB,oj,DB,bw,R,Vh,kB,lj,EB,IB,ij,qB,TB,Zt,pj,Uh,NB,cj,PB,LB,AB,Mn,Mh,FB,dj,OB,SB,CB,Rh,mj,zB,VB,hj,UB,MB,fj,RB,BB,uj,Bh,HB,gj,GB,WB,KB,_j,Hh,YB,bj,JB,ZB,XB,ws,Gh,QB,$j,eH,tH,We,xj,aH,sH,vj,nH,rH,yj,oH,lH,jj,iH,pH,wj,cH,dH,mi,Wh,mH,Dj,hH,fH,hi,Kh,uH,kj,gH,_H,fi,Yh,bH,Ej,$H,xH,ui,Jh,vH,Ij,yH,$w,Rn,gi,qj,Zh,jH,Tj,wH,xw,ae,Xh,DH,Nj,kH,EH,Rg,Pj,IH,qH,TH,Lj,NH,PH,_i,Qh,LH,ef,AH,Aj,FH,OH,SH,bi,tf,CH,Xt,zH,Fj,VH,UH,Oj,MH,RH,Sj,BH,HH,vw,Bn,$i,Cj,af,GH,zj,WH,yw,Ds,KH,Vj,YH,JH,Bg,ZH,XH,jw,se,sf,QH,Uj,eG,tG,xi,nf,aG,Mj,sG,nG,vi,rf,rG,Rj,oG,lG,ks,of,iG,Bj,pG,cG,Hj,dG,mG,yi,lf,hG,Gj,fG,ww,Hn,ji,Wj,pf,uG,Kj,gG,Dw,S,cf,_G,Yj,bG,$G,Jj,xG,vG,Qt,yG,Zj,jG,wG,Xj,DG,kG,Qj,EG,IG,qG,e0,TG,NG,t0,PG,LG,a0,AG,FG,bt,s0,OG,SG,df,CG,zG,n0,VG,UG,mf,MG,RG,BG,r0,HG,GG,o0,WG,KG,wi,YG,Gn,JG,l0,ZG,XG,i0,QG,eW,tW,Di,aW,ea,sW,p0,nW,rW,c0,oW,lW,d0,iW,pW,cW,ki,dW,Wn,mW,m0,hW,fW,h0,uW,gW,_W,Ei,bW,f0,$W,xW,Ii,vW,qi,Ti,u0,hf,yW,g0,jW,wW,W,DW,_0,kW,EW,b0,IW,qW,$0,TW,NW,x0,PW,LW,v0,AW,FW,y0,OW,SW,j0,CW,zW,kw,Kn,ff,VW,Yn,UW,w0,MW,RW,D0,BW,HW,Ew,Jn,uf,GW,k0,WW,Iw,Zn,Ni,E0,gf,KW,I0,YW,qw,Xn,_f,JW,q0,ZW,Tw;return t=new Pt({}),ia=new Pt({}),cp=new E({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:`<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.
**config_kwargs &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"task_templates"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/info.py#L87"}}),dp=new E({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/info.py#L241"}}),vr=new N({props:{anchor:"datasets.DatasetInfo.from_directory.example",$$slots:{default:[yse]},$$scope:{ctx:k}}}),hp=new E({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""},{name:"pretty_print",val:" = False"}],parametersDescription:[{anchor:"datasets.DatasetInfo.write_to_directory.dataset_info_dir",description:"<strong>dataset_info_dir</strong> (str) &#x2014; Destination directory.",name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.write_to_directory.pretty_print",description:"<strong>pretty_print</strong> (bool, default <code>False</code>) &#x2014; If True, the JSON will be pretty-printed with the indent level of 4.",name:"pretty_print"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/info.py#L182"}}),yr=new N({props:{anchor:"datasets.DatasetInfo.write_to_directory.example",$$slots:{default:[jse]},$$scope:{ctx:k}}}),fp=new Pt({}),up=new E({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L625"}}),gp=new E({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L4100",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Dr=new N({props:{anchor:"datasets.Dataset.add_column.example",$$slots:{default:[wse]},$$scope:{ctx:k}}}),_p=new E({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L4333",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),kr=new N({props:{anchor:"datasets.Dataset.add_item.example",$$slots:{default:[Dse]},$$scope:{ctx:k}}}),bp=new E({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L691",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),$p=new E({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L726",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),xp=new E({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L754",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),qr=new N({props:{anchor:"datasets.Dataset.from_pandas.example",$$slots:{default:[kse]},$$scope:{ctx:k}}}),jp=new E({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L806",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),wp=new E({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1205"}}),Nr=new N({props:{anchor:"datasets.Dataset.data.example",$$slots:{default:[Ese]},$$scope:{ctx:k}}}),Dp=new E({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1225"}}),Pr=new N({props:{anchor:"datasets.Dataset.cache_files.example",$$slots:{default:[Ise]},$$scope:{ctx:k}}}),kp=new E({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1243"}}),Lr=new N({props:{anchor:"datasets.Dataset.num_columns.example",$$slots:{default:[qse]},$$scope:{ctx:k}}}),Ep=new E({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1258"}}),Fr=new N({props:{anchor:"datasets.Dataset.num_rows.example",$$slots:{default:[Tse]},$$scope:{ctx:k}}}),qp=new E({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1275"}}),Or=new N({props:{anchor:"datasets.Dataset.column_names.example",$$slots:{default:[Nse]},$$scope:{ctx:k}}}),Tp=new E({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1290"}}),Sr=new N({props:{anchor:"datasets.Dataset.shape.example",$$slots:{default:[Pse]},$$scope:{ctx:k}}}),Np=new E({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>).',name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1307",returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),Cr=new N({props:{anchor:"datasets.Dataset.unique.example",$$slots:{default:[Lse]},$$scope:{ctx:k}}}),Pp=new E({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:""},{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1411",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),zr=new N({props:{anchor:"datasets.Dataset.flatten.example",$$slots:{default:[Ase]},$$scope:{ctx:k}}}),Lp=new E({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 10000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 10000"},{name:"num_proc",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1450",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Vr=new N({props:{anchor:"datasets.Dataset.cast.example",$$slots:{default:[Fse]},$$scope:{ctx:k}}}),Ap=new E({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1526",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ur=new N({props:{anchor:"datasets.Dataset.cast_column.example",$$slots:{default:[Ose]},$$scope:{ctx:k}}}),Fp=new E({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1563",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Mr=new N({props:{anchor:"datasets.Dataset.remove_columns.example",$$slots:{default:[Sse]},$$scope:{ctx:k}}}),Op=new E({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1611",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Rr=new N({props:{anchor:"datasets.Dataset.rename_column.example",$$slots:{default:[Cse]},$$scope:{ctx:k}}}),Sp=new E({props:{name:"rename_columns",anchor:"datasets.Dataset.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"},{name:"new_fingerprint",val:""}],parametersDescription:[{anchor:"datasets.Dataset.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1673",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Br=new N({props:{anchor:"datasets.Dataset.rename_columns.example",$$slots:{default:[zse]},$$scope:{ctx:k}}}),Cp=new E({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1337"}}),Hr=new N({props:{anchor:"datasets.Dataset.class_encode_column.example",$$slots:{default:[Vse]},$$scope:{ctx:k}}}),Vp=new E({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1737"}}),Gr=new N({props:{anchor:"datasets.Dataset.__len__.example",$$slots:{default:[Use]},$$scope:{ctx:k}}}),Up=new E({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1766"}}),Rp=new E({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1786"}}),Bp=new E({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1814"}}),Kr=new N({props:{anchor:"datasets.Dataset.set_format.example",$$slots:{default:[Mse]},$$scope:{ctx:k}}}),Hp=new E({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1915"}}),Yr=new N({props:{anchor:"datasets.Dataset.set_transform.example",$$slots:{default:[Rse]},$$scope:{ctx:k}}}),Gp=new E({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1886"}}),Jr=new N({props:{anchor:"datasets.Dataset.reset_format.example",$$slots:{default:[Bse]},$$scope:{ctx:k}}}),Kp=new E({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1955"}}),Zr=new N({props:{anchor:"datasets.Dataset.with_format.example",$$slots:{default:[Hse]},$$scope:{ctx:k}}}),Jp=new E({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L2003"}}),Xr=new N({props:{anchor:"datasets.Dataset.with_transform.example",$$slots:{default:[Gse]},$$scope:{ctx:k}}}),Zp=new E({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L2122"}}),Xp=new E({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L2128",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),eo=new N({props:{anchor:"datasets.Dataset.cleanup_cache_files.example",$$slots:{default:[Wse]},$$scope:{ctx:k}}}),Qp=new E({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Dict[str, Any], </em>extra_args) -&gt; Dict[str, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Dict[str, List], </em>extra_args) -&gt; Dict[str, List]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L2175"}}),to=new N({props:{anchor:"datasets.Dataset.map.example",$$slots:{default:[Kse]},$$scope:{ctx:k}}}),tc=new E({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L2784"}}),ao=new N({props:{anchor:"datasets.Dataset.filter.example",$$slots:{default:[Yse]},$$scope:{ctx:k}}}),ac=new E({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:"<strong>indices</strong> (sequence, iterable, ndarray or Series) &#x2014; List or 1D-array of integer indices for indexing.",name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L2958"}}),so=new N({props:{anchor:"datasets.Dataset.select.example",$$slots:{default:[Jse]},$$scope:{ctx:k}}}),sc=new E({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L3060"}}),no=new N({props:{anchor:"datasets.Dataset.sort.example",$$slots:{default:[Zse]},$$scope:{ctx:k}}}),nc=new E({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L3154"}}),ro=new N({props:{anchor:"datasets.Dataset.shuffle.example",$$slots:{default:[Xse]},$$scope:{ctx:k}}}),rc=new E({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L3246"}}),oo=new N({props:{anchor:"datasets.Dataset.train_test_split.example",$$slots:{default:[Qse]},$$scope:{ctx:k}}}),lc=new E({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L3467"}}),lo=new N({props:{anchor:"datasets.Dataset.shard.example",$$slots:{default:[ene]},$$scope:{ctx:k}}}),pc=new E({props:{name:"to_tf_dataset",anchor:"datasets.Dataset.to_tf_dataset",parameters:[{name:"columns",val:": typing.Union[str, typing.List[str]]"},{name:"batch_size",val:": int"},{name:"shuffle",val:": bool"},{name:"collate_fn",val:": typing.Callable"},{name:"drop_remainder",val:": bool = None"},{name:"collate_fn_args",val:": typing.Dict[str, typing.Any] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str]] = None"},{name:"dummy_labels",val:": bool = False"},{name:"prefetch",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>) &#x2014; Dataset column(s) to load in the tf.data.Dataset. In general,
only columns that the model can use as input should be included here (numeric data only).`,name:"columns"},{anchor:"datasets.Dataset.to_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.
shuffle(<code>bool</code>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"batch_size"},{anchor:"datasets.Dataset.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>None</code>) &#x2014; Drop the last incomplete batch when loading. If not provided,
defaults to the same setting as shuffle.
collate_fn(<code>Callable</code>) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"drop_remainder(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.Dataset.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case it is
not necessary to actually pass the labels here, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.Dataset.to_tf_dataset.dummy_labels",description:`<strong>dummy_labels</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If no <em>label_cols</em> are set, output an array of &#x201C;dummy&#x201D; labels
with each batch. This can avoid problems with <em>fit()</em> or <em>train_on_batch()</em> that expect labels to be
a Tensor or np.ndarray, but should (hopefully) not be necessary with our standard train_step().`,name:"dummy_labels"},{anchor:"datasets.Dataset.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L306",returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),io=new N({props:{anchor:"datasets.Dataset.to_tf_dataset.example",$$slots:{default:[tne]},$$scope:{ctx:k}}}),cc=new E({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '500MB'"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;5MB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L4009"}}),po=new N({props:{anchor:"datasets.Dataset.push_to_hub.example",$$slots:{default:[ane]},$$scope:{ctx:k}}}),dc=new E({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1016"}}),co=new N({props:{anchor:"datasets.Dataset.save_to_disk.example",$$slots:{default:[sne]},$$scope:{ctx:k}}}),mo=new N({props:{anchor:"datasets.Dataset.save_to_disk.example-2",$$slots:{default:[nne]},$$scope:{ctx:k}}}),ho=new N({props:{anchor:"datasets.Dataset.save_to_disk.example-3",$$slots:{default:[rne]},$$scope:{ctx:k}}}),hc=new E({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L1138",returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),fo=new N({props:{anchor:"datasets.Dataset.load_from_disk.example",$$slots:{default:[one]},$$scope:{ctx:k}}}),fc=new E({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L2889"}}),uc=new E({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.
to_csv_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L3623",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),go=new N({props:{anchor:"datasets.Dataset.to_csv.example",$$slots:{default:[lne]},$$scope:{ctx:k}}}),gc=new E({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L3736",returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),_o=new N({props:{anchor:"datasets.Dataset.to_pandas.example",$$slots:{default:[ine]},$$scope:{ctx:k}}}),bc=new E({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L3656",returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),bo=new N({props:{anchor:"datasets.Dataset.to_dict.example",$$slots:{default:[pne]},$$scope:{ctx:k}}}),$c=new E({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code>
**to_json_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.</li>
</ul>`,name:"lines"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L3691",returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),$o=new N({props:{anchor:"datasets.Dataset.to_json.example",$$slots:{default:[cne]},$$scope:{ctx:k}}}),xc=new E({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_parquet.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_parquet.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.
parquet_writer_kwargs &#x2014; Parameters to pass to PyArrow&#x2019;s <code>pyarrow.parquet.ParquetWriter</code>`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L3773",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),xo=new N({props:{anchor:"datasets.Dataset.to_parquet.example",$$slots:{default:[dne]},$$scope:{ctx:k}}}),vc=new E({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L4138"}}),vo=new N({props:{anchor:"datasets.Dataset.add_faiss_index.example",$$slots:{default:[mne]},$$scope:{ctx:k}}}),jc=new E({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L4211"}}),Dc=new E({props:{name:"save_faiss_index",anchor:"datasets.Dataset.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],parametersDescription:[{anchor:"datasets.Dataset.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/search.py#L509"}}),kc=new E({props:{name:"load_faiss_index",anchor:"datasets.Dataset.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, typing.List[int], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.Dataset.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.Dataset.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/search.py#L522"}}),Ic=new E({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.search">Dataset.search()</a>.
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.
Default config is:`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L4263"}}),jo=new N({props:{anchor:"datasets.Dataset.add_elasticsearch_index.example",$$slots:{default:[hne]},$$scope:{ctx:k}}}),qc=new E({props:{name:"load_elasticsearch_index",anchor:"datasets.Dataset.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/search.py#L600"}}),wo=new N({props:{anchor:"datasets.Dataset.load_elasticsearch_index.example",$$slots:{default:[fne]},$$scope:{ctx:k}}}),Tc=new E({props:{name:"list_indexes",anchor:"datasets.Dataset.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/search.py#L422"}}),Nc=new E({props:{name:"get_index",anchor:"datasets.Dataset.get_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/search.py#L426",returnType:`
<p><code>BaseIndex</code></p>
`}}),Pc=new E({props:{name:"drop_index",anchor:"datasets.Dataset.drop_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/search.py#L644"}}),Lc=new E({props:{name:"search",anchor:"datasets.Dataset.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/search.py#L652",returnDescription:`
<p>The retrieval scores of the retrieved examples.
indices (<code>List[List[int]]</code>): The indices of the retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[List[float]</code>)</p>
`}}),Ac=new E({props:{name:"search_batch",anchor:"datasets.Dataset.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/search.py#L667",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_indices (<code>List[List[int]]</code>): The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<code>List[List[float]</code>)</p>
`}}),Fc=new E({props:{name:"get_nearest_examples",anchor:"datasets.Dataset.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/search.py#L682",returnDescription:`
<p>The retrieval scores of the retrieved examples.
examples (<code>dict</code>): The retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[float]</code>)</p>
`}}),Oc=new E({props:{name:"get_nearest_examples_batch",anchor:"datasets.Dataset.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/search.py#L701",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_examples (<em>List[dict]</em>): The retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<em>List[List[float]</em>)</p>
`}}),Sc=new E({props:{name:"info",anchor:"datasets.Dataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L145"}}),Cc=new E({props:{name:"split",anchor:"datasets.Dataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L150"}}),zc=new E({props:{name:"builder_name",anchor:"datasets.Dataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L155"}}),Vc=new E({props:{name:"citation",anchor:"datasets.Dataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L159"}}),Uc=new E({props:{name:"config_name",anchor:"datasets.Dataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L163"}}),Mc=new E({props:{name:"dataset_size",anchor:"datasets.Dataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L167"}}),Rc=new E({props:{name:"description",anchor:"datasets.Dataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L171"}}),Bc=new E({props:{name:"download_checksums",anchor:"datasets.Dataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L175"}}),Hc=new E({props:{name:"download_size",anchor:"datasets.Dataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L179"}}),Gc=new E({props:{name:"features",anchor:"datasets.Dataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L183"}}),Wc=new E({props:{name:"homepage",anchor:"datasets.Dataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L187"}}),Kc=new E({props:{name:"license",anchor:"datasets.Dataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L191"}}),Yc=new E({props:{name:"size_in_bytes",anchor:"datasets.Dataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L195"}}),Jc=new E({props:{name:"supervised_keys",anchor:"datasets.Dataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L199"}}),Zc=new E({props:{name:"version",anchor:"datasets.Dataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L207"}}),Xc=new E({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L845",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ao=new N({props:{anchor:"datasets.Dataset.from_csv.example",$$slots:{default:[une]},$$scope:{ctx:k}}}),Qc=new E({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:`<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"field"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L880",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Fo=new N({props:{anchor:"datasets.Dataset.from_json.example",$$slots:{default:[gne]},$$scope:{ctx:k}}}),ed=new E({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L923",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Oo=new N({props:{anchor:"datasets.Dataset.from_parquet.example",$$slots:{default:[_ne]},$$scope:{ctx:k}}}),td=new E({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L968",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),So=new N({props:{anchor:"datasets.Dataset.from_text.example",$$slots:{default:[bne]},$$scope:{ctx:k}}}),ad=new E({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L2048"}}),sd=new E({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L4384"}}),Co=new N({props:{anchor:"datasets.Dataset.align_labels_with_mapping.example",$$slots:{default:[$ne]},$$scope:{ctx:k}}}),rd=new E({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L4438"}}),zo=new N({props:{anchor:"datasets.concatenate_datasets.example",$$slots:{default:[xne]},$$scope:{ctx:k}}}),od=new E({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructued by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.
**kwargs &#x2014; For map-style datasets:
Keyword arguments to be passed to <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.select">Dataset.select()</a> when selecting the indices used to interleave the datasets.`,name:"seed"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/combine.py#L20",returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Vo=new N({props:{anchor:"datasets.interleave_datasets.example",$$slots:{default:[vne]},$$scope:{ctx:k}}}),ld=new E({props:{name:"datasets.enable_caching",anchor:"datasets.enable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/fingerprint.py#L96"}}),pd=new E({props:{name:"datasets.disable_caching",anchor:"datasets.disable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/fingerprint.py#L117"}}),dd=new E({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/fingerprint.py#L162"}}),hd=new Pt({}),fd=new E({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L32"}}),ud=new E({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L54"}}),Ro=new N({props:{anchor:"datasets.DatasetDict.data.example",$$slots:{default:[yne]},$$scope:{ctx:k}}}),gd=new E({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L69"}}),Bo=new N({props:{anchor:"datasets.DatasetDict.cache_files.example",$$slots:{default:[jne]},$$scope:{ctx:k}}}),_d=new E({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L87"}}),Ho=new N({props:{anchor:"datasets.DatasetDict.num_columns.example",$$slots:{default:[wne]},$$scope:{ctx:k}}}),bd=new E({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L103"}}),Wo=new N({props:{anchor:"datasets.DatasetDict.num_rows.example",$$slots:{default:[Dne]},$$scope:{ctx:k}}}),xd=new E({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L119"}}),Ko=new N({props:{anchor:"datasets.DatasetDict.column_names.example",$$slots:{default:[kne]},$$scope:{ctx:k}}}),vd=new E({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L137"}}),Yo=new N({props:{anchor:"datasets.DatasetDict.shape.example",$$slots:{default:[Ene]},$$scope:{ctx:k}}}),yd=new E({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L185",returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),Jo=new N({props:{anchor:"datasets.DatasetDict.unique.example",$$slots:{default:[Ine]},$$scope:{ctx:k}}}),jd=new E({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L209",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),Zo=new N({props:{anchor:"datasets.DatasetDict.cleanup_cache_files.example",$$slots:{default:[qne]},$$scope:{ctx:k}}}),wd=new E({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], indices: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L674"}}),Xo=new N({props:{anchor:"datasets.DatasetDict.map.example",$$slots:{default:[Tne]},$$scope:{ctx:k}}}),Dd=new E({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L786"}}),Qo=new N({props:{anchor:"datasets.DatasetDict.filter.example",$$slots:{default:[Nne]},$$scope:{ctx:k}}}),kd=new E({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L876"}}),el=new N({props:{anchor:"datasets.DatasetDict.sort.example",$$slots:{default:[Pne]},$$scope:{ctx:k}}}),Ed=new E({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (the seed argument has priority over seeds if both arguments are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L944"}}),tl=new N({props:{anchor:"datasets.DatasetDict.shuffle.example",$$slots:{default:[Lne]},$$scope:{ctx:k}}}),Id=new E({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L476"}}),al=new N({props:{anchor:"datasets.DatasetDict.set_format.example",$$slots:{default:[Ane]},$$scope:{ctx:k}}}),Td=new E({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L518"}}),sl=new N({props:{anchor:"datasets.DatasetDict.reset_format.example",$$slots:{default:[Fne]},$$scope:{ctx:k}}}),Pd=new E({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L443"}}),Ld=new E({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L574"}}),rl=new N({props:{anchor:"datasets.DatasetDict.with_format.example",$$slots:{default:[One]},$$scope:{ctx:k}}}),Fd=new E({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L623"}}),ol=new N({props:{anchor:"datasets.DatasetDict.with_transform.example",$$slots:{default:[Sne]},$$scope:{ctx:k}}}),Od=new E({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L153"}}),ll=new N({props:{anchor:"datasets.DatasetDict.flatten.example",$$slots:{default:[Cne]},$$scope:{ctx:k}}}),Sd=new E({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L233"}}),il=new N({props:{anchor:"datasets.DatasetDict.cast.example",$$slots:{default:[zne]},$$scope:{ctx:k}}}),Cd=new E({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L267",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),pl=new N({props:{anchor:"datasets.DatasetDict.cast_column.example",$$slots:{default:[Vne]},$$scope:{ctx:k}}}),zd=new E({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L294"}}),cl=new N({props:{anchor:"datasets.DatasetDict.remove_columns.example",$$slots:{default:[Une]},$$scope:{ctx:k}}}),Vd=new E({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L332"}}),dl=new N({props:{anchor:"datasets.DatasetDict.rename_column.example",$$slots:{default:[Mne]},$$scope:{ctx:k}}}),Md=new E({props:{name:"rename_columns",anchor:"datasets.DatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L375",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),ml=new N({props:{anchor:"datasets.DatasetDict.rename_columns.example",$$slots:{default:[Rne]},$$scope:{ctx:k}}}),Rd=new E({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L412"}}),hl=new N({props:{anchor:"datasets.DatasetDict.class_encode_column.example",$$slots:{default:[Bne]},$$scope:{ctx:k}}}),Hd=new E({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"max_shard_size",val:": typing.Union[int, str] = '500MB'"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <code>&lt;user&gt;/&lt;dataset_name&gt;</code> or
<code>&lt;org&gt;/&lt;dataset_name&gt;</code>. Also accepts <code>&lt;dataset_name&gt;</code>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;500MB&#x201D;</em> or <em>&#x201C;1GB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1275"}}),fl=new N({props:{anchor:"datasets.DatasetDict.push_to_hub.example",$$slots:{default:[Hne]},$$scope:{ctx:k}}}),Gd=new E({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1020"}}),ul=new N({props:{anchor:"datasets.DatasetDict.save_to_disk.example",$$slots:{default:[Gne]},$$scope:{ctx:k}}}),gl=new N({props:{anchor:"datasets.DatasetDict.save_to_disk.example-2",$$slots:{default:[Wne]},$$scope:{ctx:k}}}),Kd=new E({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1068",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),_l=new N({props:{anchor:"datasets.DatasetDict.load_from_disk.example",$$slots:{default:[Kne]},$$scope:{ctx:k}}}),Yd=new E({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1115",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),bl=new N({props:{anchor:"datasets.DatasetDict.from_csv.example",$$slots:{default:[Yne]},$$scope:{ctx:k}}}),Jd=new E({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1149",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),$l=new N({props:{anchor:"datasets.DatasetDict.from_json.example",$$slots:{default:[Jne]},$$scope:{ctx:k}}}),Zd=new E({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1183",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),xl=new N({props:{anchor:"datasets.DatasetDict.from_parquet.example",$$slots:{default:[Zne]},$$scope:{ctx:k}}}),Xd=new E({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1226",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),vl=new N({props:{anchor:"datasets.DatasetDict.from_text.example",$$slots:{default:[Xne]},$$scope:{ctx:k}}}),Qd=new E({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1260"}}),em=new Pt({}),tm=new E({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/iterable_dataset.py#L456"}}),am=new E({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/iterable_dataset.py#L910",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),wl=new N({props:{anchor:"datasets.IterableDataset.remove_columns.example",$$slots:{default:[Qne]},$$scope:{ctx:k}}}),sm=new E({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/iterable_dataset.py#L936",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Dl=new N({props:{anchor:"datasets.IterableDataset.cast_column.example",$$slots:{default:[ere]},$$scope:{ctx:k}}}),nm=new E({props:{name:"cast",anchor:"datasets.IterableDataset.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/iterable_dataset.py#L983",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),kl=new N({props:{anchor:"datasets.IterableDataset.cast.example",$$slots:{default:[tre]},$$scope:{ctx:k}}}),rm=new E({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/iterable_dataset.py#L500"}}),om=new E({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/iterable_dataset.py#L536"}}),El=new N({props:{anchor:"datasets.IterableDataset.map.example",$$slots:{default:[are]},$$scope:{ctx:k}}}),im=new E({props:{name:"rename_column",anchor:"datasets.IterableDataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/iterable_dataset.py#L842",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Il=new N({props:{anchor:"datasets.IterableDataset.rename_column.example",$$slots:{default:[sre]},$$scope:{ctx:k}}}),pm=new E({props:{name:"filter",anchor:"datasets.IterableDataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDataset.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/iterable_dataset.py#L629"}}),ql=new N({props:{anchor:"datasets.IterableDataset.filter.example",$$slots:{default:[nre]},$$scope:{ctx:k}}}),cm=new E({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/iterable_dataset.py#L695"}}),Tl=new N({props:{anchor:"datasets.IterableDataset.shuffle.example",$$slots:{default:[rre]},$$scope:{ctx:k}}}),mm=new E({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/iterable_dataset.py#L760"}}),um=new T({props:{code:"",highlighted:""}}),gm=new E({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/iterable_dataset.py#L795"}}),Nl=new N({props:{anchor:"datasets.IterableDataset.take.example",$$slots:{default:[ore]},$$scope:{ctx:k}}}),bm=new E({props:{name:"info",anchor:"datasets.IterableDataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L145"}}),$m=new E({props:{name:"split",anchor:"datasets.IterableDataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L150"}}),xm=new E({props:{name:"builder_name",anchor:"datasets.IterableDataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L155"}}),vm=new E({props:{name:"citation",anchor:"datasets.IterableDataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L159"}}),ym=new E({props:{name:"config_name",anchor:"datasets.IterableDataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L163"}}),jm=new E({props:{name:"dataset_size",anchor:"datasets.IterableDataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L167"}}),wm=new E({props:{name:"description",anchor:"datasets.IterableDataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L171"}}),Dm=new E({props:{name:"download_checksums",anchor:"datasets.IterableDataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L175"}}),km=new E({props:{name:"download_size",anchor:"datasets.IterableDataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L179"}}),Em=new E({props:{name:"features",anchor:"datasets.IterableDataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L183"}}),Im=new E({props:{name:"homepage",anchor:"datasets.IterableDataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L187"}}),qm=new E({props:{name:"license",anchor:"datasets.IterableDataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L191"}}),Tm=new E({props:{name:"size_in_bytes",anchor:"datasets.IterableDataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L195"}}),Nm=new E({props:{name:"supervised_keys",anchor:"datasets.IterableDataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L199"}}),Pm=new E({props:{name:"version",anchor:"datasets.IterableDataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/arrow_dataset.py#L207"}}),Lm=new Pt({}),Am=new E({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1375"}}),Fm=new E({props:{name:"map",anchor:"datasets.IterableDatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDatasetDict.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1405"}}),Ol=new N({props:{anchor:"datasets.IterableDatasetDict.map.example",$$slots:{default:[lre]},$$scope:{ctx:k}}}),Sm=new E({props:{name:"filter",anchor:"datasets.IterableDatasetDict.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDatasetDict.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1483"}}),Sl=new N({props:{anchor:"datasets.IterableDatasetDict.filter.example",$$slots:{default:[ire]},$$scope:{ctx:k}}}),Cm=new E({props:{name:"shuffle",anchor:"datasets.IterableDatasetDict.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDatasetDict.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDatasetDict.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1537"}}),Cl=new N({props:{anchor:"datasets.IterableDatasetDict.shuffle.example",$$slots:{default:[pre]},$$scope:{ctx:k}}}),Vm=new E({props:{name:"with_format",anchor:"datasets.IterableDatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional, default None) &#x2014; if set to &#x201C;torch&#x201D;, the returned dataset
will be a subclass of torch.utils.data.IterableDataset to be used in a DataLoader`,name:"type"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1376"}}),zl=new N({props:{anchor:"datasets.IterableDatasetDict.with_format.example",$$slots:{default:[cre]},$$scope:{ctx:k}}}),Um=new E({props:{name:"cast",anchor:"datasets.IterableDatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1703",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Vl=new N({props:{anchor:"datasets.IterableDatasetDict.cast.example",$$slots:{default:[dre]},$$scope:{ctx:k}}}),Mm=new E({props:{name:"cast_column",anchor:"datasets.IterableDatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1674",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Ul=new N({props:{anchor:"datasets.IterableDatasetDict.cast_column.example",$$slots:{default:[mre]},$$scope:{ctx:k}}}),Rm=new E({props:{name:"remove_columns",anchor:"datasets.IterableDatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1650",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Hm=new T({props:{code:"",highlighted:""}}),Gm=new E({props:{name:"rename_column",anchor:"datasets.IterableDatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1592",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Ml=new N({props:{anchor:"datasets.IterableDatasetDict.rename_column.example",$$slots:{default:[hre]},$$scope:{ctx:k}}}),Wm=new E({props:{name:"rename_columns",anchor:"datasets.IterableDatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/dataset_dict.py#L1623",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Rl=new N({props:{anchor:"datasets.IterableDatasetDict.rename_columns.example",$$slots:{default:[fre]},$$scope:{ctx:k}}}),Km=new Pt({}),Ym=new E({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L1240"}}),Hl=new vse({props:{$$slots:{default:[ure]},$$scope:{ctx:k}}}),th=new E({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L1446",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),ah=new E({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L1428",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),sh=new E({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L1412",returnDescription:`
<p><code>list[Any]</code></p>
`}}),nh=new E({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"}],parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L1393",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),rh=new E({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L1375",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),oh=new E({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L1362",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),lh=new E({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L1516",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),ih=new E({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L1311",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),ph=new E({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L1331",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),ei=new N({props:{anchor:"datasets.Features.from_dict.example",$$slots:{default:[gre]},$$scope:{ctx:k}}}),ch=new E({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L1455",returnType:`
<p><a
  href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),ti=new N({props:{anchor:"datasets.Features.reorder_fields_as.example",$$slots:{default:[_re]},$$scope:{ctx:k}}}),dh=new E({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L911"}}),mh=new E({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": int = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L781"}}),fh=new E({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L866"}}),uh=new E({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L837"}}),gh=new E({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L402"}}),_h=new E({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/translation.py#L12"}}),ni=new N({props:{anchor:"datasets.Translation.example",$$slots:{default:[bre]},$$scope:{ctx:k}}}),$h=new E({props:{name:"flatten",anchor:"datasets.Translation.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/translation.py#L46"}}),xh=new E({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/translation.py#L54"}}),oi=new N({props:{anchor:"datasets.TranslationVariableLanguages.example",$$slots:{default:[$re]},$$scope:{ctx:k}}}),vh=new E({props:{name:"flatten",anchor:"datasets.TranslationVariableLanguages.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/translation.py#L123"}}),jh=new E({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L478"}}),Dh=new E({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L487"}}),Eh=new E({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L496"}}),qh=new E({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/features.py#L505"}}),Th=new E({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/audio.py#L19"}}),Fh=new E({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/audio.py#L133",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Oh=new E({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"}],parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/audio.py#L90",returnDescription:`
<p>dict</p>
`}}),Sh=new E({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/audio.py#L166",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Ch=new E({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/audio.py#L59",returnType:`
<p><code>dict</code></p>
`}}),zh=new E({props:{name:"flatten",anchor:"datasets.Audio.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/audio.py#L122"}}),Vh=new E({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/image.py#L26"}}),Gh=new E({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/image.py#L140",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Wh=new E({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"}],parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/image.py#L90",returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),Kh=new E({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/image.py#L189",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Yh=new E({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/image.py#L56",returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),Jh=new E({props:{name:"flatten",anchor:"datasets.Image.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/features/image.py#L127"}}),Zh=new Pt({}),Xh=new E({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/info.py#L317"}}),Qh=new E({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/info.py#L364"}}),tf=new E({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""},{name:"pretty_print",val:" = False"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/info.py#L352"}}),af=new Pt({}),sf=new E({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/metric.py#L138"}}),nf=new E({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/metric.py#L490"}}),rf=new E({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/metric.py#L451"}}),of=new E({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/metric.py#L388",returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),lf=new E({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.utils.download_manager.DownloadManager] = None"}],parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/metric.py#L565"}}),pf=new Pt({}),cf=new E({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/filesystems/s3filesystem.py#L6"}}),wi=new N({props:{anchor:"datasets.filesystems.S3FileSystem.example",$$slots:{default:[xre]},$$scope:{ctx:k}}}),Di=new N({props:{anchor:"datasets.filesystems.S3FileSystem.example-2",$$slots:{default:[vre]},$$scope:{ctx:k}}}),ki=new N({props:{anchor:"datasets.filesystems.S3FileSystem.example-3",$$slots:{default:[yre]},$$scope:{ctx:k}}}),Ei=new N({props:{anchor:"datasets.filesystems.S3FileSystem.example-4",$$slots:{default:[jre]},$$scope:{ctx:k}}}),Ii=new N({props:{anchor:"datasets.filesystems.S3FileSystem.example-5",$$slots:{default:[wre]},$$scope:{ctx:k}}}),hf=new Pt({}),ff=new E({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/filesystems/__init__.py#L28"}}),uf=new E({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/filesystems/__init__.py#L40"}}),gf=new Pt({}),_f=new E({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/r_4274/src/datasets/fingerprint.py#L212"}}),{c(){c=n("meta"),g=d(),f=n("h1"),p=n("a"),u=n("span"),_(t.$$.fragment),h=d(),Zs=n("span"),la=l("Main classes"),$r=d(),Se=n("h2"),$e=n("a"),ne=n("span"),_(ia.$$.fragment),Af=d(),xr=n("span"),jD=l("DatasetInfo"),U7=d(),Z=n("div"),_(cp.$$.fragment),wD=d(),Ab=n("p"),DD=l("Information about a dataset."),kD=d(),Ff=n("p"),Fb=n("em"),ED=l("DatasetInfo"),ID=l(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),qD=d(),Ob=n("p"),TD=l("Note: Not all fields are known on construction and may be updated later."),ND=d(),xe=n("div"),_(dp.$$.fragment),PD=d(),mp=n("p"),LD=l("Create DatasetInfo from the JSON file in "),Sb=n("code"),AD=l("dataset_info_dir"),FD=l("."),OD=d(),Cb=n("p"),SD=l(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),CD=d(),zb=n("p"),zD=l("This will overwrite all previous metadata."),VD=d(),_(vr.$$.fragment),UD=d(),pa=n("div"),_(hp.$$.fragment),MD=d(),Xs=n("p"),RD=l("Write "),Vb=n("em"),BD=l("DatasetInfo"),HD=l(" and license (if present) as JSON files to "),Ub=n("em"),GD=l("dataset_info_dir"),WD=l("."),KD=d(),_(yr.$$.fragment),M7=d(),Qs=n("h2"),jr=n("a"),Mb=n("span"),_(fp.$$.fragment),YD=d(),Rb=n("span"),JD=l("Dataset"),R7=d(),wr=n("p"),ZD=l("The base class "),Of=n("a"),XD=l("Dataset"),QD=l(" implements a Dataset backed by an Apache Arrow table."),B7=d(),I=n("div"),_(up.$$.fragment),ek=d(),Bb=n("p"),tk=l("A Dataset backed by an Arrow table."),ak=d(),Qe=n("div"),_(gp.$$.fragment),sk=d(),Hb=n("p"),nk=l("Add column to Dataset."),rk=d(),Gb=n("p"),Wb=n("em"),ok=l("New in version 1.7."),lk=d(),_(Dr.$$.fragment),ik=d(),et=n("div"),_(_p.$$.fragment),pk=d(),Kb=n("p"),ck=l("Add item to Dataset."),dk=d(),Yb=n("p"),Jb=n("em"),mk=l("New in version 1.7."),hk=d(),_(kr.$$.fragment),fk=d(),Er=n("div"),_(bp.$$.fragment),uk=d(),Zb=n("p"),gk=l("Instantiate a Dataset backed by an Arrow table at filename."),_k=d(),Ir=n("div"),_($p.$$.fragment),bk=d(),Xb=n("p"),$k=l("Instantiate a Dataset backed by an Arrow buffer."),xk=d(),ve=n("div"),_(xp.$$.fragment),vk=d(),Lt=n("p"),yk=l("Convert "),Qb=n("code"),jk=l("pandas.DataFrame"),wk=l(" to a "),e2=n("code"),Dk=l("pyarrow.Table"),kk=l(" to create a "),Sf=n("a"),Ek=l("Dataset"),Ik=l("."),qk=d(),vp=n("p"),Tk=l(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),t2=n("em"),Nk=l("object"),Pk=l(", we need to guess the datatype by looking at the Python objects in this Series."),Lk=d(),yp=n("p"),Ak=l("Be aware that Series of the "),a2=n("em"),Fk=l("object"),Ok=l(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),Sk=d(),_(qr.$$.fragment),Ck=d(),Tr=n("div"),_(jp.$$.fragment),zk=d(),At=n("p"),Vk=l("Convert "),s2=n("code"),Uk=l("dict"),Mk=l(" to a "),n2=n("code"),Rk=l("pyarrow.Table"),Bk=l(" to create a "),Cf=n("a"),Hk=l("Dataset"),Gk=l("."),Wk=d(),ca=n("div"),_(wp.$$.fragment),Kk=d(),r2=n("p"),Yk=l("The Apache Arrow table backing the dataset."),Jk=d(),_(Nr.$$.fragment),Zk=d(),da=n("div"),_(Dp.$$.fragment),Xk=d(),o2=n("p"),Qk=l("The cache files containing the Apache Arrow table backing the dataset."),eE=d(),_(Pr.$$.fragment),tE=d(),ma=n("div"),_(kp.$$.fragment),aE=d(),l2=n("p"),sE=l("Number of columns in the dataset."),nE=d(),_(Lr.$$.fragment),rE=d(),ha=n("div"),_(Ep.$$.fragment),oE=d(),Ip=n("p"),lE=l("Number of rows in the dataset (same as "),Ar=n("a"),iE=l("Dataset."),i2=n("strong"),pE=l("len"),cE=l("()"),dE=l(")."),mE=d(),_(Fr.$$.fragment),hE=d(),fa=n("div"),_(qp.$$.fragment),fE=d(),p2=n("p"),uE=l("Names of the columns in the dataset."),gE=d(),_(Or.$$.fragment),_E=d(),ua=n("div"),_(Tp.$$.fragment),bE=d(),c2=n("p"),$E=l("Shape of the dataset (number of columns, number of rows)."),xE=d(),_(Sr.$$.fragment),vE=d(),tt=n("div"),_(Np.$$.fragment),yE=d(),d2=n("p"),jE=l("Return a list of the unique elements in a column."),wE=d(),m2=n("p"),DE=l("This is implemented in the low-level backend and as such, very fast."),kE=d(),_(Cr.$$.fragment),EE=d(),ga=n("div"),_(Pp.$$.fragment),IE=d(),h2=n("p"),qE=l(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),TE=d(),_(zr.$$.fragment),NE=d(),_a=n("div"),_(Lp.$$.fragment),PE=d(),f2=n("p"),LE=l("Cast the dataset to a new set of features."),AE=d(),_(Vr.$$.fragment),FE=d(),ba=n("div"),_(Ap.$$.fragment),OE=d(),u2=n("p"),SE=l("Cast column to feature for decoding."),CE=d(),_(Ur.$$.fragment),zE=d(),at=n("div"),_(Fp.$$.fragment),VE=d(),g2=n("p"),UE=l("Remove one or several column(s) in the dataset and the features associated to them."),ME=d(),en=n("p"),RE=l("You can also remove a column using "),zf=n("a"),BE=l("Dataset.map()"),HE=l(" with "),_2=n("em"),GE=l("remove_columns"),WE=l(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),KE=d(),_(Mr.$$.fragment),YE=d(),$a=n("div"),_(Op.$$.fragment),JE=d(),b2=n("p"),ZE=l(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),XE=d(),_(Rr.$$.fragment),QE=d(),xa=n("div"),_(Sp.$$.fragment),e3=d(),$2=n("p"),t3=l(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),a3=d(),_(Br.$$.fragment),s3=d(),va=n("div"),_(Cp.$$.fragment),n3=d(),zp=n("p"),r3=l("Casts the given column as :obj:"),x2=n("code"),o3=l("datasets.features.ClassLabel"),l3=l(" and updates the table."),i3=d(),_(Hr.$$.fragment),p3=d(),ya=n("div"),_(Vp.$$.fragment),c3=d(),v2=n("p"),d3=l("Number of rows in the dataset."),m3=d(),_(Gr.$$.fragment),h3=d(),ja=n("div"),_(Up.$$.fragment),f3=d(),y2=n("p"),u3=l("Iterate through the examples."),g3=d(),Mp=n("p"),_3=l("If a formatting is set with "),Vf=n("a"),b3=l("Dataset.set_format()"),$3=l(` rows will be returned with the
selected format.`),x3=d(),Wr=n("div"),_(Rp.$$.fragment),v3=d(),tn=n("p"),y3=l("To be used in a "),j2=n("code"),j3=l("with"),w3=l(" statement. Set "),w2=n("code"),D3=l("__getitem__"),k3=l(" return format (type and columns)."),E3=d(),ye=n("div"),_(Bp.$$.fragment),I3=d(),Ce=n("p"),q3=l("Set "),D2=n("strong"),T3=l("getitem"),N3=l(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),k2=n("code"),P3=l("type"),L3=l(" (for example \u201Cnumpy\u201D) is used to format batches when using "),E2=n("strong"),A3=l("getitem"),F3=l(`.
It\u2019s also possible to use custom transforms for formatting using `),Uf=n("a"),O3=l("datasets.Dataset.set_transform()"),S3=l("."),C3=d(),ze=n("p"),z3=l("It is possible to call "),I2=n("code"),V3=l("map"),U3=l(" after calling "),q2=n("code"),M3=l("set_format"),R3=l(". Since "),T2=n("code"),B3=l("map"),H3=l(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),N2=n("code"),G3=l("map"),W3=l(" on a dataset to add a new column, then this column will be formatted:"),K3=d(),P2=n("p"),Y3=l("new formatted columns = (all columns - previously unformatted columns)"),J3=d(),_(Kr.$$.fragment),Z3=d(),wa=n("div"),_(Hp.$$.fragment),X3=d(),st=n("p"),Q3=l("Set "),L2=n("strong"),e5=l("getitem"),t5=l(" return format using this transform. The transform is applied on-the-fly on batches when "),A2=n("strong"),a5=l("getitem"),s5=l(` is called.
As `),Mf=n("a"),n5=l("datasets.Dataset.set_format()"),r5=l(", this can be reset using "),Rf=n("a"),o5=l("datasets.Dataset.reset_format()"),l5=d(),_(Yr.$$.fragment),i5=d(),nt=n("div"),_(Gp.$$.fragment),p5=d(),Wp=n("p"),c5=l("Reset "),F2=n("strong"),d5=l("getitem"),m5=l(" return format to python objects and all columns."),h5=d(),Bf=n("p"),f5=l("Same as "),O2=n("code"),u5=l("self.set_format()"),g5=d(),_(Jr.$$.fragment),_5=d(),je=n("div"),_(Kp.$$.fragment),b5=d(),Ft=n("p"),$5=l("Set "),S2=n("strong"),x5=l("getitem"),v5=l(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),C2=n("code"),y5=l("type"),j5=l(" (for example \u201Cnumpy\u201D) is used to format batches when using "),z2=n("strong"),w5=l("getitem"),D5=l("."),k5=d(),Yp=n("p"),E5=l("It\u2019s also possible to use custom transforms for formatting using "),Hf=n("a"),I5=l("datasets.Dataset.with_transform()"),q5=l("."),T5=d(),an=n("p"),N5=l("Contrary to "),Gf=n("a"),P5=l("datasets.Dataset.set_format()"),L5=l(", "),V2=n("code"),A5=l("with_format"),F5=l(" returns a new Dataset object."),O5=d(),_(Zr.$$.fragment),S5=d(),we=n("div"),_(Jp.$$.fragment),C5=d(),sn=n("p"),z5=l("Set "),U2=n("strong"),V5=l("getitem"),U5=l(" return format using this transform. The transform is applied on-the-fly on batches when "),M2=n("strong"),M5=l("getitem"),R5=l(" is called."),B5=d(),nn=n("p"),H5=l("As "),Wf=n("a"),G5=l("datasets.Dataset.set_format()"),W5=l(", this can be reset using "),Kf=n("a"),K5=l("datasets.Dataset.reset_format()"),Y5=l("."),J5=d(),rn=n("p"),Z5=l("Contrary to "),Yf=n("a"),X5=l("datasets.Dataset.set_transform()"),Q5=l(", "),R2=n("code"),e6=l("with_transform"),t6=l(" returns a new Dataset object."),a6=d(),_(Xr.$$.fragment),s6=d(),Qr=n("div"),_(Zp.$$.fragment),n6=d(),B2=n("p"),r6=l("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),o6=d(),rt=n("div"),_(Xp.$$.fragment),l6=d(),H2=n("p"),i6=l(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),p6=d(),G2=n("p"),c6=l("Be careful when running this command that no other process is currently using other cache files."),d6=d(),_(eo.$$.fragment),m6=d(),De=n("div"),_(Qp.$$.fragment),h6=d(),W2=n("p"),f6=l(`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),u6=d(),ec=n("p"),g6=l("You can specify whether the function should be batched or not with the "),K2=n("code"),_6=l("batched"),b6=l(" parameter:"),$6=d(),on=n("ul"),Y2=n("li"),x6=l(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),v6=d(),J2=n("li"),y6=l(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),j6=d(),me=n("li"),w6=l("If batched is True and batch_size is "),Z2=n("code"),D6=l("n"),k6=l(" > 1, then the function takes a batch of "),X2=n("code"),E6=l("n"),I6=l(" examples as input and can return a batch with "),Q2=n("code"),q6=l("n"),T6=l(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),e$=n("code"),N6=l("n"),P6=l(` examples.
A batch is a dictionary, e.g. a batch of `),t$=n("code"),L6=l("n"),A6=l(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),F6=d(),_(to.$$.fragment),O6=d(),Da=n("div"),_(tc.$$.fragment),S6=d(),a$=n("p"),C6=l(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),z6=d(),_(ao.$$.fragment),V6=d(),ka=n("div"),_(ac.$$.fragment),U6=d(),s$=n("p"),M6=l("Create a new dataset with rows selected following the list/array of indices."),R6=d(),_(so.$$.fragment),B6=d(),ot=n("div"),_(sc.$$.fragment),H6=d(),n$=n("p"),G6=l("Create a new dataset sorted according to a column."),W6=d(),r$=n("p"),K6=l(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),Y6=d(),_(no.$$.fragment),J6=d(),lt=n("div"),_(nc.$$.fragment),Z6=d(),o$=n("p"),X6=l("Create a new Dataset where the rows are shuffled."),Q6=d(),l$=n("p"),e8=l(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),t8=d(),_(ro.$$.fragment),a8=d(),it=n("div"),_(rc.$$.fragment),s8=d(),H=n("p"),n8=l("Return a dictionary ("),i$=n("code"),r8=l("datasets.DatsetDict"),o8=l(") with two random train and test subsets ("),p$=n("em"),l8=l("train"),i8=l(" and "),c$=n("em"),p8=l("test"),c8=d(),d$=n("code"),d8=l("Dataset"),m8=l(` splits).
Splits are created from the dataset according to `),m$=n("em"),h8=l("test_size"),f8=l(", "),h$=n("em"),u8=l("train_size"),g8=l(" and "),f$=n("em"),_8=l("shuffle"),b8=l("."),$8=d(),oc=n("p"),x8=l("This method is similar to scikit-learn "),u$=n("em"),v8=l("train_test_split"),y8=l(" with the omission of the stratified options."),j8=d(),_(oo.$$.fragment),w8=d(),re=n("div"),_(lc.$$.fragment),D8=d(),ln=n("p"),k8=l("Return the "),g$=n("em"),E8=l("index"),I8=l("-nth shard from dataset split into "),_$=n("em"),q8=l("num_shards"),T8=l(" pieces."),N8=d(),b$=n("p"),P8=l(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),L8=d(),ic=n("p"),A8=l(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),$$=n("em"),F8=l("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),O8=l(` will return
a dataset with the same order as the original.`),S8=d(),x$=n("p"),C8=l(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),z8=d(),_(lo.$$.fragment),V8=d(),Ea=n("div"),_(pc.$$.fragment),U8=d(),v$=n("p"),M8=l(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),R8=d(),_(io.$$.fragment),B8=d(),pt=n("div"),_(cc.$$.fragment),H8=d(),y$=n("p"),G8=l(`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),W8=d(),Ot=n("p"),K8=l("The resulting Parquet files are self-contained by default: if your dataset contains "),Jf=n("a"),Y8=l("Image"),J8=l(" or "),Zf=n("a"),Z8=l("Audio"),X8=l(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),j$=n("em"),Q8=l("embed_external_files"),eI=l(" to False."),tI=d(),_(po.$$.fragment),aI=d(),K=n("div"),_(dc.$$.fragment),sI=d(),pn=n("p"),nI=l("Saves a dataset to a dataset directory, or in a filesystem using either "),Xf=n("a"),rI=l("S3FileSystem"),oI=l(` or
any implementation of `),w$=n("code"),lI=l("fsspec.spec.AbstractFileSystem"),iI=l("."),pI=d(),cn=n("p"),cI=l("For "),Qf=n("a"),dI=l("Image"),mI=l(" and "),eu=n("a"),hI=l("Audio"),fI=l(" data:"),uI=d(),mc=n("p"),gI=l(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),D$=n("em"),_I=l("read()"),bI=l(" those files first."),$I=d(),_(co.$$.fragment),xI=d(),_(mo.$$.fragment),vI=d(),_(ho.$$.fragment),yI=d(),Ia=n("div"),_(hc.$$.fragment),jI=d(),St=n("p"),wI=l("Loads a dataset that was previously saved using "),k$=n("code"),DI=l("save_to_disk"),kI=l(` from a dataset directory, or from a
filesystem using either `),tu=n("a"),EI=l("S3FileSystem"),II=l(` or any implementation of
`),E$=n("code"),qI=l("fsspec.spec.AbstractFileSystem"),TI=l("."),NI=d(),_(fo.$$.fragment),PI=d(),uo=n("div"),_(fc.$$.fragment),LI=d(),I$=n("p"),AI=l("Create and cache a new Dataset by flattening the indices mapping."),FI=d(),qa=n("div"),_(uc.$$.fragment),OI=d(),q$=n("p"),SI=l("Exports the dataset to csv"),CI=d(),_(go.$$.fragment),zI=d(),Ta=n("div"),_(gc.$$.fragment),VI=d(),_c=n("p"),UI=l("Returns the dataset as a "),T$=n("code"),MI=l("pandas.DataFrame"),RI=l(". Can also return a generator for large datasets."),BI=d(),_(_o.$$.fragment),HI=d(),Na=n("div"),_(bc.$$.fragment),GI=d(),N$=n("p"),WI=l("Returns the dataset as a Python dict. Can also return a generator for large datasets."),KI=d(),_(bo.$$.fragment),YI=d(),Pa=n("div"),_($c.$$.fragment),JI=d(),P$=n("p"),ZI=l("Export the dataset to JSON Lines or JSON."),XI=d(),_($o.$$.fragment),QI=d(),La=n("div"),_(xc.$$.fragment),e9=d(),L$=n("p"),t9=l("Exports the dataset to parquet"),a9=d(),_(xo.$$.fragment),s9=d(),ct=n("div"),_(vc.$$.fragment),n9=d(),dn=n("p"),r9=l(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),A$=n("code"),o9=l("device"),l9=l(" if you want to run it on GPU ("),F$=n("code"),i9=l("device"),p9=l(` must be the GPU index).
You can find more information about Faiss here:`),c9=d(),O$=n("ul"),au=n("li"),d9=l("For "),yc=n("a"),m9=l("string factory"),h9=d(),_(vo.$$.fragment),f9=d(),Aa=n("div"),_(jc.$$.fragment),u9=d(),Ct=n("p"),g9=l(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),S$=n("em"),_9=l("external_arrays"),b9=l(`.
You can specify `),C$=n("em"),$9=l("device"),x9=l(" if you want to run it on GPU ("),z$=n("em"),v9=l("device"),y9=l(` must be the GPU index).
You can find more information about Faiss here:`),j9=d(),V$=n("ul"),su=n("li"),w9=l("For "),wc=n("a"),D9=l("string factory"),k9=d(),yo=n("div"),_(Dc.$$.fragment),E9=d(),U$=n("p"),I9=l("Save a FaissIndex on disk."),q9=d(),Fa=n("div"),_(kc.$$.fragment),T9=d(),M$=n("p"),N9=l("Load a FaissIndex from disk."),P9=d(),Ec=n("p"),L9=l(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),R$=n("em"),A9=l(".get_index(index_name).faiss_index"),F9=l(" to make it fit your needs."),O9=d(),Oa=n("div"),_(Ic.$$.fragment),S9=d(),B$=n("p"),C9=l("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),z9=d(),_(jo.$$.fragment),V9=d(),Sa=n("div"),_(qc.$$.fragment),U9=d(),H$=n("p"),M9=l("Load an existing text index using ElasticSearch for fast retrieval."),R9=d(),_(wo.$$.fragment),B9=d(),Do=n("div"),_(Tc.$$.fragment),H9=d(),G$=n("p"),G9=l("List the colindex_nameumns/identifiers of all the attached indexes."),W9=d(),ko=n("div"),_(Nc.$$.fragment),K9=d(),W$=n("p"),Y9=l("List the index_name/identifiers of all the attached indexes."),J9=d(),Eo=n("div"),_(Pc.$$.fragment),Z9=d(),K$=n("p"),X9=l("Drop the index with the specified column."),Q9=d(),Io=n("div"),_(Lc.$$.fragment),eq=d(),Y$=n("p"),tq=l("Find the nearest examples indices in the dataset to the query."),aq=d(),qo=n("div"),_(Ac.$$.fragment),sq=d(),J$=n("p"),nq=l("Find the nearest examples indices in the dataset to the query."),rq=d(),To=n("div"),_(Fc.$$.fragment),oq=d(),Z$=n("p"),lq=l("Find the nearest examples in the dataset to the query."),iq=d(),No=n("div"),_(Oc.$$.fragment),pq=d(),X$=n("p"),cq=l("Find the nearest examples in the dataset to the query."),dq=d(),Po=n("div"),_(Sc.$$.fragment),mq=d(),nu=n("p"),ru=n("a"),hq=l("datasets.DatasetInfo"),fq=l(" object containing all the metadata in the dataset."),uq=d(),Lo=n("div"),_(Cc.$$.fragment),gq=d(),ou=n("p"),lu=n("a"),_q=l("datasets.NamedSplit"),bq=l(" object corresponding to a named dataset split."),$q=d(),iu=n("div"),_(zc.$$.fragment),xq=d(),pu=n("div"),_(Vc.$$.fragment),vq=d(),cu=n("div"),_(Uc.$$.fragment),yq=d(),du=n("div"),_(Mc.$$.fragment),jq=d(),mu=n("div"),_(Rc.$$.fragment),wq=d(),hu=n("div"),_(Bc.$$.fragment),Dq=d(),fu=n("div"),_(Hc.$$.fragment),kq=d(),uu=n("div"),_(Gc.$$.fragment),Eq=d(),gu=n("div"),_(Wc.$$.fragment),Iq=d(),_u=n("div"),_(Kc.$$.fragment),qq=d(),bu=n("div"),_(Yc.$$.fragment),Tq=d(),$u=n("div"),_(Jc.$$.fragment),Nq=d(),xu=n("div"),_(Zc.$$.fragment),Pq=d(),Ca=n("div"),_(Xc.$$.fragment),Lq=d(),Q$=n("p"),Aq=l("Create Dataset from CSV file(s)."),Fq=d(),_(Ao.$$.fragment),Oq=d(),za=n("div"),_(Qc.$$.fragment),Sq=d(),e1=n("p"),Cq=l("Create Dataset from JSON or JSON Lines file(s)."),zq=d(),_(Fo.$$.fragment),Vq=d(),Va=n("div"),_(ed.$$.fragment),Uq=d(),t1=n("p"),Mq=l("Create Dataset from Parquet file(s)."),Rq=d(),_(Oo.$$.fragment),Bq=d(),Ua=n("div"),_(td.$$.fragment),Hq=d(),a1=n("p"),Gq=l("Create Dataset from text file(s)."),Wq=d(),_(So.$$.fragment),Kq=d(),Ma=n("div"),_(ad.$$.fragment),Yq=d(),mn=n("p"),Jq=l("Prepare a dataset for the given task by casting the dataset\u2019s "),vu=n("a"),Zq=l("Features"),Xq=l(" to standardized column names and types as detailed in "),yu=n("a"),Qq=l("datasets.tasks"),eT=l("."),tT=d(),hn=n("p"),aT=l("Casts "),s1=n("code"),sT=l("datasets.DatasetInfo.features"),nT=l(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),n1=n("code"),rT=l("datasets.DatasetInfo.task_templates"),oT=l(" after casting."),lT=d(),Ra=n("div"),_(sd.$$.fragment),iT=d(),nd=n("p"),pT=l("Align the dataset\u2019s label ID and label name mapping to match an input "),r1=n("code"),cT=l("label2id"),dT=l(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),mT=d(),_(Co.$$.fragment),H7=d(),zt=n("div"),_(rd.$$.fragment),hT=d(),fn=n("p"),fT=l("Converts a list of "),ju=n("a"),uT=l("Dataset"),gT=l(" with the same schema into a single "),wu=n("a"),_T=l("Dataset"),bT=l("."),$T=d(),_(zo.$$.fragment),G7=d(),X=n("div"),_(od.$$.fragment),xT=d(),o1=n("p"),vT=l(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),yT=d(),un=n("p"),jT=l("You can use this function on a list of "),Du=n("a"),wT=l("Dataset"),DT=l(" objects, or on a list of "),ku=n("a"),kT=l("IterableDataset"),ET=l(" objects."),IT=d(),Ve=n("p"),qT=l("If "),l1=n("code"),TT=l("probabilities"),NT=l(" is "),i1=n("code"),PT=l("None"),LT=l(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),p1=n("code"),AT=l("probabilities"),FT=l(" is not "),c1=n("code"),OT=l("None"),ST=l(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),CT=d(),d1=n("p"),zT=l("The resulting dataset ends when one of the source datasets runs out of examples."),VT=d(),_(Vo.$$.fragment),W7=d(),he=n("div"),_(ld.$$.fragment),UT=d(),m1=n("p"),MT=l(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),RT=d(),h1=n("p"),BT=l(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),HT=d(),f1=n("p"),GT=l(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),WT=d(),Ue=n("ul"),u1=n("li"),KT=l("cache files are always recreated"),YT=d(),g1=n("li"),JT=l("cache files are written to a temporary directory that is deleted when session closes"),ZT=d(),_1=n("li"),XT=l("cache files are named using a random hash instead of the dataset fingerprint"),QT=d(),id=n("li"),eN=l("use "),Eu=n("a"),tN=l("datasets.Dataset.save_to_disk()"),aN=l(" to save a transformed dataset or it will be deleted when session closes"),sN=d(),Vt=n("li"),nN=l("caching doesn\u2019t affect "),Iu=n("a"),rN=l("datasets.load_dataset()"),oN=l(`. If you want to regenerate a dataset from scratch you should use
the `),b1=n("code"),lN=l("download_mode"),iN=l(" parameter in "),qu=n("a"),pN=l("datasets.load_dataset()"),cN=l("."),K7=d(),fe=n("div"),_(pd.$$.fragment),dN=d(),$1=n("p"),mN=l(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),hN=d(),x1=n("p"),fN=l(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),uN=d(),v1=n("p"),gN=l(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),_N=d(),Me=n("ul"),y1=n("li"),bN=l("cache files are always recreated"),$N=d(),j1=n("li"),xN=l("cache files are written to a temporary directory that is deleted when session closes"),vN=d(),w1=n("li"),yN=l("cache files are named using a random hash instead of the dataset fingerprint"),jN=d(),cd=n("li"),wN=l("use "),Tu=n("a"),DN=l("datasets.Dataset.save_to_disk()"),kN=l(" to save a transformed dataset or it will be deleted when session closes"),EN=d(),Ut=n("li"),IN=l("caching doesn\u2019t affect "),Nu=n("a"),qN=l("datasets.load_dataset()"),TN=l(`. If you want to regenerate a dataset from scratch you should use
the `),D1=n("code"),NN=l("download_mode"),PN=l(" parameter in "),Pu=n("a"),LN=l("datasets.load_dataset()"),AN=l("."),Y7=d(),ue=n("div"),_(dd.$$.fragment),FN=d(),k1=n("p"),ON=l(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),SN=d(),E1=n("p"),CN=l(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),zN=d(),I1=n("p"),VN=l(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),UN=d(),Re=n("ul"),q1=n("li"),MN=l("cache files are always recreated"),RN=d(),T1=n("li"),BN=l("cache files are written to a temporary directory that is deleted when session closes"),HN=d(),N1=n("li"),GN=l("cache files are named using a random hash instead of the dataset fingerprint"),WN=d(),md=n("li"),KN=l("use "),Lu=n("a"),YN=l("datasets.Dataset.save_to_disk()"),JN=l(" to save a transformed dataset or it will be deleted when session closes"),ZN=d(),Mt=n("li"),XN=l("caching doesn\u2019t affect "),Au=n("a"),QN=l("datasets.load_dataset()"),eP=l(`. If you want to regenerate a dataset from scratch you should use
the `),P1=n("code"),tP=l("download_mode"),aP=l(" parameter in "),Fu=n("a"),sP=l("datasets.load_dataset()"),nP=l("."),J7=d(),gn=n("h2"),Uo=n("a"),L1=n("span"),_(hd.$$.fragment),rP=d(),A1=n("span"),oP=l("DatasetDict"),Z7=d(),Mo=n("p"),lP=l("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),F1=n("code"),iP=l("Dataset"),pP=l(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),X7=d(),L=n("div"),_(fd.$$.fragment),cP=d(),O1=n("p"),dP=l("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),mP=d(),Ba=n("div"),_(ud.$$.fragment),hP=d(),S1=n("p"),fP=l("The Apache Arrow tables backing each split."),uP=d(),_(Ro.$$.fragment),gP=d(),Ha=n("div"),_(gd.$$.fragment),_P=d(),C1=n("p"),bP=l("The cache files containing the Apache Arrow table backing each split."),$P=d(),_(Bo.$$.fragment),xP=d(),Ga=n("div"),_(_d.$$.fragment),vP=d(),z1=n("p"),yP=l("Number of columns in each split of the dataset."),jP=d(),_(Ho.$$.fragment),wP=d(),Wa=n("div"),_(bd.$$.fragment),DP=d(),$d=n("p"),kP=l("Number of rows in each split of the dataset (same as "),Go=n("a"),EP=l("datasets.Dataset."),V1=n("strong"),IP=l("len"),qP=l("()"),TP=l(")."),NP=d(),_(Wo.$$.fragment),PP=d(),Ka=n("div"),_(xd.$$.fragment),LP=d(),U1=n("p"),AP=l("Names of the columns in each split of the dataset."),FP=d(),_(Ko.$$.fragment),OP=d(),Ya=n("div"),_(vd.$$.fragment),SP=d(),M1=n("p"),CP=l("Shape of each split of the dataset (number of columns, number of rows)."),zP=d(),_(Yo.$$.fragment),VP=d(),dt=n("div"),_(yd.$$.fragment),UP=d(),R1=n("p"),MP=l("Return a list of the unique elements in a column for each split."),RP=d(),B1=n("p"),BP=l("This is implemented in the low-level backend and as such, very fast."),HP=d(),_(Jo.$$.fragment),GP=d(),Ja=n("div"),_(jd.$$.fragment),WP=d(),H1=n("p"),KP=l(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),YP=d(),_(Zo.$$.fragment),JP=d(),Za=n("div"),_(wd.$$.fragment),ZP=d(),G1=n("p"),XP=l(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),QP=d(),_(Xo.$$.fragment),eL=d(),Xa=n("div"),_(Dd.$$.fragment),tL=d(),W1=n("p"),aL=l(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),sL=d(),_(Qo.$$.fragment),nL=d(),mt=n("div"),_(kd.$$.fragment),rL=d(),K1=n("p"),oL=l(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),lL=d(),Y1=n("p"),iL=l(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),pL=d(),_(el.$$.fragment),cL=d(),ke=n("div"),_(Ed.$$.fragment),dL=d(),J1=n("p"),mL=l("Create a new Dataset where the rows are shuffled."),hL=d(),Z1=n("p"),fL=l("The transformation is applied to all the datasets of the dataset dictionary."),uL=d(),X1=n("p"),gL=l(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),_L=d(),_(tl.$$.fragment),bL=d(),Ee=n("div"),_(Id.$$.fragment),$L=d(),qd=n("p"),xL=l("Set "),Q1=n("code"),vL=l("__getitem__"),yL=l(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),jL=d(),Be=n("p"),wL=l("It is possible to call "),ex=n("code"),DL=l("map"),kL=l(" after calling "),tx=n("code"),EL=l("set_format"),IL=l(". Since "),ax=n("code"),qL=l("map"),TL=l(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),sx=n("code"),NL=l("map"),PL=l(" on a dataset to add a new column, then this column will be formatted:"),LL=d(),nx=n("p"),AL=l("new formatted columns = (all columns - previously unformatted columns)"),FL=d(),_(al.$$.fragment),OL=d(),ht=n("div"),_(Td.$$.fragment),SL=d(),Nd=n("p"),CL=l("Reset "),rx=n("code"),zL=l("__getitem__"),VL=l(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),UL=d(),Ou=n("p"),ML=l("Same as "),ox=n("code"),RL=l("self.set_format()"),BL=d(),_(sl.$$.fragment),HL=d(),nl=n("div"),_(Pd.$$.fragment),GL=d(),_n=n("p"),WL=l("To be used in a "),lx=n("em"),KL=l("with"),YL=l(" statement. Set "),ix=n("code"),JL=l("__getitem__"),ZL=l(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),XL=d(),Ie=n("div"),_(Ld.$$.fragment),QL=d(),Rt=n("p"),eA=l("Set "),px=n("code"),tA=l("__getitem__"),aA=l(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),cx=n("code"),sA=l("type"),nA=l(" (for example \u201Cnumpy\u201D) is used to format batches when using "),dx=n("code"),rA=l("__getitem__"),oA=l(`.
The format is set for every dataset in the dataset dictionary`),lA=d(),Ad=n("p"),iA=l("It\u2019s also possible to use custom transforms for formatting using "),Su=n("a"),pA=l("datasets.Dataset.with_transform()"),cA=l("."),dA=d(),bn=n("p"),mA=l("Contrary to "),Cu=n("a"),hA=l("datasets.DatasetDict.set_format()"),fA=l(", "),mx=n("code"),uA=l("with_format"),gA=l(" returns a new DatasetDict object with new Dataset objects."),_A=d(),_(rl.$$.fragment),bA=d(),qe=n("div"),_(Fd.$$.fragment),$A=d(),$n=n("p"),xA=l("Set "),hx=n("code"),vA=l("__getitem__"),yA=l(" return format using this transform. The transform is applied on-the-fly on batches when "),fx=n("code"),jA=l("__getitem__"),wA=l(` is called.
The transform is set for every dataset in the dataset dictionary`),DA=d(),xn=n("p"),kA=l("As "),zu=n("a"),EA=l("datasets.Dataset.set_format()"),IA=l(", this can be reset using "),Vu=n("a"),qA=l("datasets.Dataset.reset_format()"),TA=l("."),NA=d(),vn=n("p"),PA=l("Contrary to "),ux=n("code"),LA=l("datasets.DatasetDict.set_transform()"),AA=l(", "),gx=n("code"),FA=l("with_transform"),OA=l(" returns a new DatasetDict object with new Dataset objects."),SA=d(),_(ol.$$.fragment),CA=d(),Qa=n("div"),_(Od.$$.fragment),zA=d(),_x=n("p"),VA=l(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),UA=d(),_(ll.$$.fragment),MA=d(),ft=n("div"),_(Sd.$$.fragment),RA=d(),bx=n("p"),BA=l(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),HA=d(),Bt=n("p"),GA=l("You can also remove a column using "),Uu=n("a"),WA=l("Dataset.map()"),KA=l(" with "),$x=n("em"),YA=l("feature"),JA=l(" but "),xx=n("code"),ZA=l("cast_"),XA=l(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),QA=d(),_(il.$$.fragment),eF=d(),es=n("div"),_(Cd.$$.fragment),tF=d(),vx=n("p"),aF=l("Cast column to feature for decoding."),sF=d(),_(pl.$$.fragment),nF=d(),Te=n("div"),_(zd.$$.fragment),rF=d(),yx=n("p"),oF=l(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),lF=d(),jx=n("p"),iF=l("The transformation is applied to all the splits of the dataset dictionary."),pF=d(),yn=n("p"),cF=l("You can also remove a column using "),Mu=n("a"),dF=l("Dataset.map()"),mF=l(" with "),wx=n("em"),hF=l("remove_columns"),fF=l(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),uF=d(),_(cl.$$.fragment),gF=d(),Ne=n("div"),_(Vd.$$.fragment),_F=d(),Dx=n("p"),bF=l(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),$F=d(),jn=n("p"),xF=l("You can also rename a column using "),Ru=n("a"),vF=l("Dataset.map()"),yF=l(" with "),kx=n("em"),jF=l("remove_columns"),wF=l(" but the present method:"),DF=d(),Ud=n("ul"),Ex=n("li"),kF=l("takes care of moving the original features under the new column name."),EF=d(),Ix=n("li"),IF=l("doesn\u2019t copy the data to a new dataset and is thus much faster."),qF=d(),_(dl.$$.fragment),TF=d(),ts=n("div"),_(Md.$$.fragment),NF=d(),qx=n("p"),PF=l(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),LF=d(),_(ml.$$.fragment),AF=d(),as=n("div"),_(Rd.$$.fragment),FF=d(),Bd=n("p"),OF=l("Casts the given column as :obj:"),Tx=n("code"),SF=l("datasets.features.ClassLabel"),CF=l(" and updates the tables."),zF=d(),_(hl.$$.fragment),VF=d(),Pe=n("div"),_(Hd.$$.fragment),UF=d(),wn=n("p"),MF=l("Pushes the "),Nx=n("code"),RF=l("DatasetDict"),BF=l(` to the hub as a Parquet dataset.
The `),Px=n("code"),HF=l("DatasetDict"),GF=l(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),WF=d(),Lx=n("p"),KF=l("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),YF=d(),Ht=n("p"),JF=l("The resulting Parquet files are self-contained by default: if your dataset contains "),Bu=n("a"),ZF=l("Image"),XF=l(" or "),Hu=n("a"),QF=l("Audio"),eO=l(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),Ax=n("em"),tO=l("embed_external_files"),aO=l(" to False."),sO=d(),_(fl.$$.fragment),nO=d(),oe=n("div"),_(Gd.$$.fragment),rO=d(),Dn=n("p"),oO=l("Saves a dataset dict to a filesystem using either "),Gu=n("a"),lO=l("S3FileSystem"),iO=l(` or
`),Fx=n("code"),pO=l("fsspec.spec.AbstractFileSystem"),cO=l("."),dO=d(),kn=n("p"),mO=l("For "),Wu=n("a"),hO=l("Image"),fO=l(" and "),Ku=n("a"),uO=l("Audio"),gO=l(" data:"),_O=d(),Wd=n("p"),bO=l(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),Ox=n("em"),$O=l("read()"),xO=l(" those files first."),vO=d(),_(ul.$$.fragment),yO=d(),_(gl.$$.fragment),jO=d(),ss=n("div"),_(Kd.$$.fragment),wO=d(),Gt=n("p"),DO=l("Load a dataset that was previously saved using "),Sx=n("code"),kO=l("save_to_disk"),EO=l(` from a filesystem using either
`),Yu=n("a"),IO=l("S3FileSystem"),qO=l(" or "),Cx=n("code"),TO=l("fsspec.spec.AbstractFileSystem"),NO=l("."),PO=d(),_(_l.$$.fragment),LO=d(),ns=n("div"),_(Yd.$$.fragment),AO=d(),zx=n("p"),FO=l("Create DatasetDict from CSV file(s)."),OO=d(),_(bl.$$.fragment),SO=d(),rs=n("div"),_(Jd.$$.fragment),CO=d(),Vx=n("p"),zO=l("Create DatasetDict from JSON Lines file(s)."),VO=d(),_($l.$$.fragment),UO=d(),os=n("div"),_(Zd.$$.fragment),MO=d(),Ux=n("p"),RO=l("Create DatasetDict from Parquet file(s)."),BO=d(),_(xl.$$.fragment),HO=d(),ls=n("div"),_(Xd.$$.fragment),GO=d(),Mx=n("p"),WO=l("Create DatasetDict from text file(s)."),KO=d(),_(vl.$$.fragment),YO=d(),is=n("div"),_(Qd.$$.fragment),JO=d(),En=n("p"),ZO=l("Prepare a dataset for the given task by casting the dataset\u2019s "),Ju=n("a"),XO=l("Features"),QO=l(" to standardized column names and types as detailed in "),Zu=n("a"),eS=l("datasets.tasks"),tS=l("."),aS=d(),In=n("p"),sS=l("Casts "),Rx=n("code"),nS=l("datasets.DatasetInfo.features"),rS=l(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Bx=n("code"),oS=l("datasets.DatasetInfo.task_templates"),lS=l(" after casting."),Q7=d(),Xu=n("a"),ew=d(),qn=n("h2"),yl=n("a"),Hx=n("span"),_(em.$$.fragment),iS=d(),Gx=n("span"),pS=l("IterableDataset"),tw=d(),jl=n("p"),cS=l("The base class "),Qu=n("a"),dS=l("IterableDataset"),mS=l(" implements an iterable Dataset backed by python generators."),aw=d(),F=n("div"),_(tm.$$.fragment),hS=d(),Wx=n("p"),fS=l("A Dataset backed by an iterable."),uS=d(),ps=n("div"),_(am.$$.fragment),gS=d(),Kx=n("p"),_S=l(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),bS=d(),_(wl.$$.fragment),$S=d(),cs=n("div"),_(sm.$$.fragment),xS=d(),Yx=n("p"),vS=l("Cast column to feature for decoding."),yS=d(),_(Dl.$$.fragment),jS=d(),ds=n("div"),_(nm.$$.fragment),wS=d(),Jx=n("p"),DS=l("Cast the dataset to a new set of features."),kS=d(),_(kl.$$.fragment),ES=d(),eg=n("div"),_(rm.$$.fragment),IS=d(),Le=n("div"),_(om.$$.fragment),qS=d(),Zx=n("p"),TS=l(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),NS=d(),lm=n("p"),PS=l("You can specify whether the function should be batched or not with the "),Xx=n("code"),LS=l("batched"),AS=l(" parameter:"),FS=d(),Tn=n("ul"),Qx=n("li"),OS=l(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),SS=d(),ev=n("li"),CS=l(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),zS=d(),ge=n("li"),VS=l("If batched is True and batch_size is "),tv=n("code"),US=l("n"),MS=l(" > 1, then the function takes a batch of "),av=n("code"),RS=l("n"),BS=l(" examples as input and can return a batch with "),sv=n("code"),HS=l("n"),GS=l(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),nv=n("code"),WS=l("n"),KS=l(` examples.
A batch is a dictionary, e.g. a batch of `),rv=n("code"),YS=l("n"),JS=l(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),ZS=d(),_(El.$$.fragment),XS=d(),ms=n("div"),_(im.$$.fragment),QS=d(),ov=n("p"),eC=l(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),tC=d(),_(Il.$$.fragment),aC=d(),hs=n("div"),_(pm.$$.fragment),sC=d(),lv=n("p"),nC=l(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),rC=d(),_(ql.$$.fragment),oC=d(),le=n("div"),_(cm.$$.fragment),lC=d(),iv=n("p"),iC=l("Randomly shuffles the elements of this dataset."),pC=d(),pv=n("p"),cC=l(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),dC=d(),dm=n("p"),mC=l("For instance, if your dataset contains 10,000 elements but "),cv=n("code"),hC=l("buffer_size"),fC=l(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),uC=d(),Nn=n("p"),gC=l(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),tg=n("a"),_C=l("datasets.IterableDataset.skip()"),bC=l(" or "),ag=n("a"),$C=l("datasets.IterableDataset.take()"),xC=l(`
then the order of the shards is kept unchanged.`),vC=d(),_(Tl.$$.fragment),yC=d(),ut=n("div"),_(mm.$$.fragment),jC=d(),hm=n("p"),wC=l("Create a new IterableDataset that skips the first "),dv=n("code"),DC=l("n"),kC=l(" elements."),EC=d(),mv=n("p"),IC=l("Example:"),qC=d(),hv=n("blockquote"),fv=n("blockquote"),fm=n("blockquote"),uv=n("p"),TC=l(`from datasets import load_dataset
ds = load_dataset(\u201Crotten_tomatoes\u201D, split=\u201Ctrain\u201D, streaming=True)
list(ds.take(3))
[{\u2018label\u2019: 1,
\u2018text\u2019: \u2018the rock is destined to be the 21st century\u2019s new \u201D conan \u201D and that he\u2019s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .\u2019},
{\u2018label\u2019: 1,
\u2018text\u2019: \u2018the gorgeously elaborate continuation of \u201D the lord of the rings \u201D trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson\u2019s expanded vision of j . r . r . tolkien\u2019s middle-earth .\u2019},
{\u2018label\u2019: 1, \u2018text\u2019: \u2018effective but too-tepid biopic\u2019}]
ds = ds.skip(1)
list(ds.take(3))
[{\u2018label\u2019: 1,
\u2018text\u2019: \u2018the gorgeously elaborate continuation of \u201D the lord of the rings \u201D trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson\u2019s expanded vision of j . r . r . tolkien\u2019s middle-earth .\u2019},
{\u2018label\u2019: 1, \u2018text\u2019: \u2018effective but too-tepid biopic\u2019},
{\u2018label\u2019: 1,
\u2018text\u2019: \u2018if you sometimes like to go to the movies to have fun , wasabi is a good place to start .\u2018}]`),NC=d(),_(um.$$.fragment),PC=d(),fs=n("div"),_(gm.$$.fragment),LC=d(),_m=n("p"),AC=l("Create a new IterableDataset with only the first "),gv=n("code"),FC=l("n"),OC=l(" elements."),SC=d(),_(Nl.$$.fragment),CC=d(),Pl=n("div"),_(bm.$$.fragment),zC=d(),sg=n("p"),ng=n("a"),VC=l("datasets.DatasetInfo"),UC=l(" object containing all the metadata in the dataset."),MC=d(),Ll=n("div"),_($m.$$.fragment),RC=d(),rg=n("p"),og=n("a"),BC=l("datasets.NamedSplit"),HC=l(" object corresponding to a named dataset split."),GC=d(),lg=n("div"),_(xm.$$.fragment),WC=d(),ig=n("div"),_(vm.$$.fragment),KC=d(),pg=n("div"),_(ym.$$.fragment),YC=d(),cg=n("div"),_(jm.$$.fragment),JC=d(),dg=n("div"),_(wm.$$.fragment),ZC=d(),mg=n("div"),_(Dm.$$.fragment),XC=d(),hg=n("div"),_(km.$$.fragment),QC=d(),fg=n("div"),_(Em.$$.fragment),ez=d(),ug=n("div"),_(Im.$$.fragment),tz=d(),gg=n("div"),_(qm.$$.fragment),az=d(),_g=n("div"),_(Tm.$$.fragment),sz=d(),bg=n("div"),_(Nm.$$.fragment),nz=d(),$g=n("div"),_(Pm.$$.fragment),sw=d(),Pn=n("h2"),Al=n("a"),_v=n("span"),_(Lm.$$.fragment),rz=d(),bv=n("span"),oz=l("IterableDatasetDict[[datasets.IterableDatasetDict]]"),nw=d(),Fl=n("p"),lz=l("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),$v=n("code"),iz=l("IterableDataset"),pz=l(" objects as values."),rw=d(),U=n("div"),_(Am.$$.fragment),cz=d(),Ae=n("div"),_(Fm.$$.fragment),dz=d(),xv=n("p"),mz=l(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),hz=d(),Om=n("p"),fz=l("You can specify whether the function should be batched or not with the "),vv=n("code"),uz=l("batched"),gz=l(" parameter:"),_z=d(),Ln=n("ul"),yv=n("li"),bz=l(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),$z=d(),jv=n("li"),xz=l(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),vz=d(),_e=n("li"),yz=l("If batched is True and batch_size is "),wv=n("code"),jz=l("n"),wz=l(" > 1, then the function takes a batch of "),Dv=n("code"),Dz=l("n"),kz=l(" examples as input and can return a batch with "),kv=n("code"),Ez=l("n"),Iz=l(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Ev=n("code"),qz=l("n"),Tz=l(` examples.
A batch is a dictionary, e.g. a batch of `),Iv=n("code"),Nz=l("n"),Pz=l(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Lz=d(),_(Ol.$$.fragment),Az=d(),us=n("div"),_(Sm.$$.fragment),Fz=d(),qv=n("p"),Oz=l(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),Sz=d(),_(Sl.$$.fragment),Cz=d(),ie=n("div"),_(Cm.$$.fragment),zz=d(),Tv=n("p"),Vz=l(`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),Uz=d(),Nv=n("p"),Mz=l(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),Rz=d(),zm=n("p"),Bz=l("For instance, if your dataset contains 10,000 elements but "),Pv=n("code"),Hz=l("buffer_size"),Gz=l(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),Wz=d(),An=n("p"),Kz=l(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),xg=n("a"),Yz=l("datasets.IterableDataset.skip()"),Jz=l(" or "),vg=n("a"),Zz=l("datasets.IterableDataset.take()"),Xz=l(`
then the order of the shards is kept unchanged.`),Qz=d(),_(Cl.$$.fragment),eV=d(),gs=n("div"),_(Vm.$$.fragment),tV=d(),Lv=n("p"),aV=l(`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),sV=d(),_(zl.$$.fragment),nV=d(),_s=n("div"),_(Um.$$.fragment),rV=d(),Av=n("p"),oV=l(`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),lV=d(),_(Vl.$$.fragment),iV=d(),bs=n("div"),_(Mm.$$.fragment),pV=d(),Fv=n("p"),cV=l(`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),dV=d(),_(Ul.$$.fragment),mV=d(),gt=n("div"),_(Rm.$$.fragment),hV=d(),Ov=n("p"),fV=l(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),uV=d(),Sv=n("p"),gV=l("Example:"),_V=d(),Cv=n("blockquote"),zv=n("blockquote"),Bm=n("blockquote"),Vv=n("p"),bV=l(`from datasets import load_dataset
ds = load_dataset(\u201Crotten_tomatoes\u201D, streaming=True)
ds = ds.remove_columns(\u201Clabel\u201D)
next(iter(ds[\u201Ctrain\u201D]))
{\u2018text\u2019: \u2018the rock is destined to be the 21st century\u2019s new \u201D conan \u201D and that he\u2019s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .\u2018}`),$V=d(),_(Hm.$$.fragment),xV=d(),$s=n("div"),_(Gm.$$.fragment),vV=d(),Uv=n("p"),yV=l(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),jV=d(),_(Ml.$$.fragment),wV=d(),xs=n("div"),_(Wm.$$.fragment),DV=d(),Mv=n("p"),kV=l(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),EV=d(),_(Rl.$$.fragment),ow=d(),Fn=n("h2"),Bl=n("a"),Rv=n("span"),_(Km.$$.fragment),IV=d(),Bv=n("span"),qV=l("Features"),lw=d(),z=n("div"),_(Ym.$$.fragment),TV=d(),Hv=n("p"),NV=l("A special dictionary that defines the internal structure of a dataset."),PV=d(),Jm=n("p"),LV=l("Instantiated with a dictionary of type "),Gv=n("code"),AV=l("dict[str, FieldType]"),FV=l(`, where keys are the desired column names,
and values are the type of that column.`),OV=d(),yg=n("p"),Wv=n("code"),SV=l("FieldType"),CV=l(" can be one of the following:"),zV=d(),G=n("ul"),Kv=n("li"),vs=n("p"),VV=l("a "),jg=n("a"),UV=l("datasets.Value"),MV=l(" feature specifies a single typed value, e.g. "),Yv=n("code"),RV=l("int64"),BV=l(" or "),Jv=n("code"),HV=l("string"),GV=d(),Zv=n("li"),Zm=n("p"),WV=l("a "),wg=n("a"),KV=l("datasets.ClassLabel"),YV=l(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),JV=d(),Xv=n("li"),Xm=n("p"),ZV=l("a python "),Qv=n("code"),XV=l("dict"),QV=l(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),eU=d(),Qm=n("li"),He=n("p"),tU=l("a python "),ey=n("code"),aU=l("list"),sU=l(" or a "),Dg=n("a"),nU=l("datasets.Sequence"),rU=l(` specifies that the field contains a list of objects. The python
`),ty=n("code"),oU=l("list"),lU=l(" or "),kg=n("a"),iU=l("datasets.Sequence"),pU=l(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),cU=d(),_(Hl.$$.fragment),dU=d(),ay=n("li"),Ge=n("p"),mU=l("a "),Eg=n("a"),hU=l("Array2D"),fU=l(", "),Ig=n("a"),uU=l("Array3D"),gU=l(", "),qg=n("a"),_U=l("Array4D"),bU=l(" or "),Tg=n("a"),$U=l("Array5D"),xU=l(" feature for multidimensional arrays"),vU=d(),sy=n("li"),eh=n("p"),yU=l("an "),Ng=n("a"),jU=l("Audio"),wU=l(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),DU=d(),ny=n("li"),Wt=n("p"),kU=l("an "),Pg=n("a"),EU=l("Image"),IU=l(" feature to store the absolute path to an image file, an "),ry=n("code"),qU=l("np.ndarray"),TU=l(" object, a "),oy=n("code"),NU=l("PIL.Image.Image"),PU=l(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),LU=d(),ly=n("li"),Gl=n("p"),Lg=n("a"),AU=l("datasets.Translation"),FU=l(" and "),Ag=n("a"),OU=l("datasets.TranslationVariableLanguages"),SU=l(", the two features specific to Machine Translation"),CU=d(),Wl=n("div"),_(th.$$.fragment),zU=d(),iy=n("p"),VU=l("Make a deep copy of Features."),UU=d(),Kl=n("div"),_(ah.$$.fragment),MU=d(),py=n("p"),RU=l("Decode batch with custom feature decoding."),BU=d(),Yl=n("div"),_(sh.$$.fragment),HU=d(),cy=n("p"),GU=l("Decode column with custom feature decoding."),WU=d(),Jl=n("div"),_(nh.$$.fragment),KU=d(),dy=n("p"),YU=l("Decode example with custom feature decoding."),JU=d(),Zl=n("div"),_(rh.$$.fragment),ZU=d(),my=n("p"),XU=l("Encode batch into a format for Arrow."),QU=d(),Xl=n("div"),_(oh.$$.fragment),eM=d(),hy=n("p"),tM=l("Encode example into a format for Arrow."),aM=d(),ys=n("div"),_(lh.$$.fragment),sM=d(),fy=n("p"),nM=l(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),rM=d(),uy=n("p"),oM=l(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),lM=d(),Ql=n("div"),_(ih.$$.fragment),iM=d(),gy=n("p"),pM=l(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),cM=d(),Fe=n("div"),_(ph.$$.fragment),dM=d(),_y=n("p"),mM=l("Construct Features from dict."),hM=d(),by=n("p"),fM=l(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),uM=d(),Kt=n("p"),gM=l(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),Fg=n("a"),_M=l("DatasetInfo"),bM=l(` that was dumped to a JSON object. This acts as an analogue to
`),Og=n("a"),$M=l("Features.from_arrow_schema()"),xM=l(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),Sg=n("a"),vM=l("Value"),yM=l(" automatically performs."),jM=d(),_(ei.$$.fragment),wM=d(),_t=n("div"),_(ch.$$.fragment),DM=d(),$y=n("p"),kM=l("Reorder Features fields to match the field order of other Features."),EM=d(),xy=n("p"),IM=l(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),qM=d(),_(ti.$$.fragment),iw=d(),On=n("div"),_(dh.$$.fragment),TM=d(),vy=n("p"),NM=l(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),pw=d(),Q=n("div"),_(mh.$$.fragment),PM=d(),yy=n("p"),LM=l("Feature type for integer class labels."),AM=d(),hh=n("p"),FM=l("There are 3 ways to define a "),jy=n("em"),OM=l("ClassLabel"),SM=l(", which correspond to the 3 arguments:"),CM=d(),Sn=n("ul"),Cg=n("li"),wy=n("em"),zM=l("num_classes"),VM=l(": Create 0 to (num_classes-1) labels."),UM=d(),zg=n("li"),Dy=n("em"),MM=l("names"),RM=l(": List of label strings."),BM=d(),Vg=n("li"),ky=n("em"),HM=l("names_file"),GM=l(": File containing the list of labels."),WM=d(),ai=n("div"),_(fh.$$.fragment),KM=d(),Ey=n("p"),YM=l("Conversion integer => class name string."),JM=d(),si=n("div"),_(uh.$$.fragment),ZM=d(),Iy=n("p"),XM=l("Conversion class name string => integer."),cw=d(),Yt=n("div"),_(gh.$$.fragment),QM=d(),qy=n("p"),eR=l("The Value dtypes are as follows:"),tR=d(),Ty=n("p"),aR=l(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),dw=d(),ee=n("div"),_(_h.$$.fragment),sR=d(),Ug=n("p"),Ny=n("code"),nR=l("FeatureConnector"),rR=l(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),oR=d(),Py=n("p"),lR=l(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),iR=d(),bh=n("p"),pR=l("Output: A dictionary mapping string language codes to translations as "),Ly=n("code"),cR=l("Text"),dR=l(`
features.`),mR=d(),_(ni.$$.fragment),hR=d(),ri=n("div"),_($h.$$.fragment),fR=d(),Ay=n("p"),uR=l("Flatten the Translation feature into a dictionary."),mw=d(),te=n("div"),_(xh.$$.fragment),gR=d(),Mg=n("p"),Fy=n("code"),_R=l("FeatureConnector"),bR=l(` for translations with variable languages per example.
Here for compatiblity with tfds.`),$R=d(),Oy=n("p"),xR=l(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),vR=d(),Sy=n("p"),yR=l(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),jR=d(),_(oi.$$.fragment),wR=d(),li=n("div"),_(vh.$$.fragment),DR=d(),Cy=n("p"),kR=l("Flatten the TranslationVariableLanguages feature into a dictionary."),hw=d(),yh=n("div"),_(jh.$$.fragment),fw=d(),wh=n("div"),_(Dh.$$.fragment),uw=d(),kh=n("div"),_(Eh.$$.fragment),gw=d(),Ih=n("div"),_(qh.$$.fragment),_w=d(),M=n("div"),_(Th.$$.fragment),ER=d(),zy=n("p"),IR=l("Audio Feature to extract audio data from an audio file."),qR=d(),Vy=n("p"),TR=l("Input: The Audio feature accepts as input:"),NR=d(),Cn=n("ul"),Uy=n("li"),Nh=n("p"),PR=l("A "),My=n("code"),LR=l("str"),AR=l(": Absolute path to the audio file (i.e. random access is allowed)."),FR=d(),zn=n("li"),Ph=n("p"),OR=l("A "),Ry=n("code"),SR=l("dict"),CR=l(" with the keys:"),zR=d(),Lh=n("ul"),By=n("li"),VR=l("path: String with relative path of the audio file to the archive file."),UR=d(),Hy=n("li"),MR=l("bytes: Bytes content of the audio file."),RR=d(),Gy=n("p"),BR=l("This is useful for archived files with sequential access."),HR=d(),Vn=n("li"),Ah=n("p"),GR=l("A "),Wy=n("code"),WR=l("dict"),KR=l(" with the keys:"),YR=d(),Un=n("ul"),Ky=n("li"),JR=l("path: String with relative path of the audio file to the archive file."),ZR=d(),Yy=n("li"),XR=l("array: Array containing the audio sample"),QR=d(),Jy=n("li"),eB=l("sampling_rate: Integer corresponding to the samping rate of the audio sample."),tB=d(),Zy=n("p"),aB=l("This is useful for archived files with sequential access."),sB=d(),js=n("div"),_(Fh.$$.fragment),nB=d(),Xy=n("p"),rB=l(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),oB=d(),Jt=n("ul"),Qy=n("li"),lB=l("pa.string() - it must contain the \u201Cpath\u201D data"),iB=d(),ej=n("li"),pB=l("pa.struct({\u201Cbytes\u201D: pa.binary()})"),cB=d(),tj=n("li"),dB=l("pa.struct({\u201Cpath\u201D: pa.string()})"),mB=d(),aj=n("li"),hB=l("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),fB=d(),ii=n("div"),_(Oh.$$.fragment),uB=d(),sj=n("p"),gB=l("Decode example audio file into audio data."),_B=d(),pi=n("div"),_(Sh.$$.fragment),bB=d(),nj=n("p"),$B=l("Embed audio files into the Arrow array."),xB=d(),ci=n("div"),_(Ch.$$.fragment),vB=d(),rj=n("p"),yB=l("Encode example into a format for Arrow."),jB=d(),di=n("div"),_(zh.$$.fragment),wB=d(),oj=n("p"),DB=l("If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),bw=d(),R=n("div"),_(Vh.$$.fragment),kB=d(),lj=n("p"),EB=l("Image feature to read image data from an image file."),IB=d(),ij=n("p"),qB=l("Input: The Image feature accepts as input:"),TB=d(),Zt=n("ul"),pj=n("li"),Uh=n("p"),NB=l("A "),cj=n("code"),PB=l("str"),LB=l(": Absolute path to the image file (i.e. random access is allowed)."),AB=d(),Mn=n("li"),Mh=n("p"),FB=l("A "),dj=n("code"),OB=l("dict"),SB=l(" with the keys:"),CB=d(),Rh=n("ul"),mj=n("li"),zB=l("path: String with relative path of the image file to the archive file."),VB=d(),hj=n("li"),UB=l("bytes: Bytes of the image file."),MB=d(),fj=n("p"),RB=l("This is useful for archived files with sequential access."),BB=d(),uj=n("li"),Bh=n("p"),HB=l("An "),gj=n("code"),GB=l("np.ndarray"),WB=l(": NumPy array representing an image."),KB=d(),_j=n("li"),Hh=n("p"),YB=l("A "),bj=n("code"),JB=l("PIL.Image.Image"),ZB=l(": PIL image object."),XB=d(),ws=n("div"),_(Gh.$$.fragment),QB=d(),$j=n("p"),eH=l(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),tH=d(),We=n("ul"),xj=n("li"),aH=l("pa.string() - it must contain the \u201Cpath\u201D data"),sH=d(),vj=n("li"),nH=l("pa.struct({\u201Cbytes\u201D: pa.binary()})"),rH=d(),yj=n("li"),oH=l("pa.struct({\u201Cpath\u201D: pa.string()})"),lH=d(),jj=n("li"),iH=l("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),pH=d(),wj=n("li"),cH=l("pa.list(*) - it must contain the image array data"),dH=d(),mi=n("div"),_(Wh.$$.fragment),mH=d(),Dj=n("p"),hH=l("Decode example image file into image data."),fH=d(),hi=n("div"),_(Kh.$$.fragment),uH=d(),kj=n("p"),gH=l("Embed image files into the Arrow array."),_H=d(),fi=n("div"),_(Yh.$$.fragment),bH=d(),Ej=n("p"),$H=l("Encode example into a format for Arrow."),xH=d(),ui=n("div"),_(Jh.$$.fragment),vH=d(),Ij=n("p"),yH=l("If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),$w=d(),Rn=n("h2"),gi=n("a"),qj=n("span"),_(Zh.$$.fragment),jH=d(),Tj=n("span"),wH=l("MetricInfo"),xw=d(),ae=n("div"),_(Xh.$$.fragment),DH=d(),Nj=n("p"),kH=l("Information about a metric."),EH=d(),Rg=n("p"),Pj=n("code"),IH=l("MetricInfo"),qH=l(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),TH=d(),Lj=n("p"),NH=l("Note: Not all fields are known on construction and may be updated later."),PH=d(),_i=n("div"),_(Qh.$$.fragment),LH=d(),ef=n("p"),AH=l("Create MetricInfo from the JSON file in "),Aj=n("code"),FH=l("metric_info_dir"),OH=l("."),SH=d(),bi=n("div"),_(tf.$$.fragment),CH=d(),Xt=n("p"),zH=l("Write "),Fj=n("code"),VH=l("MetricInfo"),UH=l(" as JSON to "),Oj=n("code"),MH=l("metric_info_dir"),RH=l(`.
Also save the license separately in LICENCE.
If `),Sj=n("code"),BH=l("pretty_print"),HH=l(" is True, the JSON will be pretty-printed with the indent level of 4."),vw=d(),Bn=n("h2"),$i=n("a"),Cj=n("span"),_(af.$$.fragment),GH=d(),zj=n("span"),WH=l("Metric"),yw=d(),Ds=n("p"),KH=l("The base class "),Vj=n("code"),YH=l("Metric"),JH=l(" implements a Metric backed by one or several "),Bg=n("a"),ZH=l("Dataset"),XH=l("."),jw=d(),se=n("div"),_(sf.$$.fragment),QH=d(),Uj=n("p"),eG=l("A Metric is the base class and common API for all metrics."),tG=d(),xi=n("div"),_(nf.$$.fragment),aG=d(),Mj=n("p"),sG=l("Add one prediction and reference for the metric\u2019s stack."),nG=d(),vi=n("div"),_(rf.$$.fragment),rG=d(),Rj=n("p"),oG=l("Add a batch of predictions and references for the metric\u2019s stack."),lG=d(),ks=n("div"),_(of.$$.fragment),iG=d(),Bj=n("p"),pG=l("Compute the metrics."),cG=d(),Hj=n("p"),dG=l("Usage of positional arguments is not allowed to prevent mistakes."),mG=d(),yi=n("div"),_(lf.$$.fragment),hG=d(),Gj=n("p"),fG=l("Downloads and prepares dataset for reading."),ww=d(),Hn=n("h2"),ji=n("a"),Wj=n("span"),_(pf.$$.fragment),uG=d(),Kj=n("span"),gG=l("Filesystems"),Dw=d(),S=n("div"),_(cf.$$.fragment),_G=d(),Yj=n("p"),bG=l("Access S3 as if it were a file system."),$G=d(),Jj=n("p"),xG=l(`This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3
storage.`),vG=d(),Qt=n("p"),yG=l("Provide credentials either explicitly ("),Zj=n("code"),jG=l("key="),wG=l(", "),Xj=n("code"),DG=l("secret="),kG=l(`) or depend
on boto\u2019s credential methods. See botocore documentation for more
information. If no credentials are available, use `),Qj=n("code"),EG=l("anon=True"),IG=l("."),qG=d(),e0=n("p"),TG=l("The following parameters are passed on to fsspec:"),NG=d(),t0=n("p"),PG=l(`skip_instance_cache: to control reuse of instances
use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings`),LG=d(),a0=n("p"),AG=l("."),FG=d(),bt=n("p"),s0=n("code"),OG=l("datasets.filesystems.S3FileSystem"),SG=l(" is a subclass of s3fs.S3FileSystem]("),df=n("a"),CG=l("https://s3fs.readthedocs.io/en/latest/api.html"),zG=l(`), which is a known
implementation of `),n0=n("code"),VG=l("fsspec"),UG=l(". Filesystem Spec "),mf=n("a"),MG=l("FSSPEC"),RG=l(` is a project to
unify various projects and classes to work with remote filesystems
and file-system-like abstractions using a standard pythonic interface.`),BG=d(),r0=n("p"),HG=l("Examples:"),GG=d(),o0=n("p"),WG=l("Listing files from public s3 bucket."),KG=d(),_(wi.$$.fragment),YG=d(),Gn=n("p"),JG=l("Listing files from private s3 bucket using "),l0=n("code"),ZG=l("aws_access_key_id"),XG=l(" and "),i0=n("code"),QG=l("aws_secret_access_key"),eW=l("."),tW=d(),_(Di.$$.fragment),aW=d(),ea=n("p"),sW=l("Using "),p0=n("code"),nW=l("S3Filesystem"),rW=l(" with "),c0=n("code"),oW=l("botocore.session.Session"),lW=l(" and custom "),d0=n("code"),iW=l("aws_profile"),pW=l("."),cW=d(),_(ki.$$.fragment),dW=d(),Wn=n("p"),mW=l("Loading dataset from s3 using "),m0=n("code"),hW=l("S3Filesystem"),fW=l(" and "),h0=n("code"),uW=l("load_from_disk()"),gW=l("."),_W=d(),_(Ei.$$.fragment),bW=d(),f0=n("p"),$W=l("Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>."),xW=d(),_(Ii.$$.fragment),vW=d(),qi=n("h2"),Ti=n("a"),u0=n("span"),_(hf.$$.fragment),yW=d(),g0=n("span"),jW=l("Parameters"),wW=d(),W=n("p"),DW=l(`anon : bool (False)
Whether to use anonymous connection (public buckets only). If False,
uses the key/secret given, or boto\u2019s credential resolver (client_kwargs,
environment, variables, config files, EC2 IAM server, in that order)
key : string (None)
If not anonymous, use this access key ID, if specified
secret : string (None)
If not anonymous, use this secret access key, if specified
token : string (None)
If not anonymous, use this security token, if specified
use_ssl : bool (True)
Whether to use SSL in connections to S3; may be faster without, but
insecure. If `),_0=n("code"),kW=l("use_ssl"),EW=l(" is also set in "),b0=n("code"),IW=l("client_kwargs"),qW=l(`,
the value set in `),$0=n("code"),TW=l("client_kwargs"),NW=l(` will take priority.
s3_additional_kwargs : dict of parameters that are used when calling s3 api
methods. Typically used for things like \u201CServerSideEncryption\u201D.
client_kwargs : dict of parameters for the botocore client
requester_pays : bool (False)
If RequesterPays buckets are supported.
default_block_size: int (None)
If given, the default block size value used for `),x0=n("code"),PW=l("open()"),LW=l(`, if no
specific value is given at all time. The built-in default is 5MB.
default_fill_cache : Bool (True)
Whether to use cache filling with open by default. Refer to
`),v0=n("code"),AW=l("S3File.open"),FW=l(`.
default_cache_type : string (\u2018bytes\u2019)
If given, the default cache_type value used for `),y0=n("code"),OW=l("open()"),SW=l(`. Set to \u201Cnone\u201D
if no caching is desired. See fsspec\u2019s documentation for other available
cache_type values. Default cache_type is \u2018bytes\u2019.
version_aware : bool (False)
Whether to support bucket versioning.  If enable this will require the
user to have the necessary IAM permissions for dealing with versioned
objects.
cache_regions : bool (False)
Whether to cache bucket regions or not. Whenever a new bucket is used,
it will first find out which region it belongs and then use the client
for that region.
config_kwargs : dict of parameters passed to `),j0=n("code"),CW=l("botocore.client.Config"),zW=l(`
kwargs : other parameters for core session
session : aiobotocore AioSession object to be used for all connections.
This session will be used inplace of creating a new session inside S3FileSystem.
For example: aiobotocore.session.AioSession(profile=\u2018test_user\u2019)`),kw=d(),Kn=n("div"),_(ff.$$.fragment),VW=d(),Yn=n("p"),UW=l("preprocesses "),w0=n("em"),MW=l("dataset_path"),RW=l(" and removes remote filesystem (e.g. removing "),D0=n("code"),BW=l("s3://"),HW=l(")"),Ew=d(),Jn=n("div"),_(uf.$$.fragment),GW=d(),k0=n("p"),WW=l("Validates if filesystem has remote protocol."),Iw=d(),Zn=n("h2"),Ni=n("a"),E0=n("span"),_(gf.$$.fragment),KW=d(),I0=n("span"),YW=l("Fingerprint"),qw=d(),Xn=n("div"),_(_f.$$.fragment),JW=d(),q0=n("p"),ZW=l("Hasher that accepts python objects as inputs."),this.h()},l(s){const w=$se('[data-svelte="svelte-1phssyn"]',document.head);c=r(w,"META",{name:!0,content:!0}),w.forEach(a),g=m(s),f=r(s,"H1",{class:!0});var bf=o(f);p=r(bf,"A",{id:!0,class:!0,href:!0});var T0=o(p);u=r(T0,"SPAN",{});var N0=o(u);b(t.$$.fragment,N0),N0.forEach(a),T0.forEach(a),h=m(bf),Zs=r(bf,"SPAN",{});var P0=o(Zs);la=i(P0,"Main classes"),P0.forEach(a),bf.forEach(a),$r=m(s),Se=r(s,"H2",{class:!0});var $f=o(Se);$e=r($f,"A",{id:!0,class:!0,href:!0});var L0=o($e);ne=r(L0,"SPAN",{});var A0=o(ne);b(ia.$$.fragment,A0),A0.forEach(a),L0.forEach(a),Af=m($f),xr=r($f,"SPAN",{});var F0=o(xr);jD=i(F0,"DatasetInfo"),F0.forEach(a),$f.forEach(a),U7=m(s),Z=r(s,"DIV",{class:!0});var be=o(Z);b(cp.$$.fragment,be),wD=m(be),Ab=r(be,"P",{});var O0=o(Ab);DD=i(O0,"Information about a dataset."),O0.forEach(a),kD=m(be),Ff=r(be,"P",{});var Hg=o(Ff);Fb=r(Hg,"EM",{});var S0=o(Fb);ED=i(S0,"DatasetInfo"),S0.forEach(a),ID=i(Hg,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Hg.forEach(a),qD=m(be),Ob=r(be,"P",{});var C0=o(Ob);TD=i(C0,"Note: Not all fields are known on construction and may be updated later."),C0.forEach(a),ND=m(be),xe=r(be,"DIV",{class:!0});var Ke=o(xe);b(dp.$$.fragment,Ke),PD=m(Ke),mp=r(Ke,"P",{});var xf=o(mp);LD=i(xf,"Create DatasetInfo from the JSON file in "),Sb=r(xf,"CODE",{});var z0=o(Sb);AD=i(z0,"dataset_info_dir"),z0.forEach(a),FD=i(xf,"."),xf.forEach(a),OD=m(Ke),Cb=r(Ke,"P",{});var V0=o(Cb);SD=i(V0,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),V0.forEach(a),CD=m(Ke),zb=r(Ke,"P",{});var U0=o(zb);zD=i(U0,"This will overwrite all previous metadata."),U0.forEach(a),VD=m(Ke),b(vr.$$.fragment,Ke),Ke.forEach(a),UD=m(be),pa=r(be,"DIV",{class:!0});var Qn=o(pa);b(hp.$$.fragment,Qn),MD=m(Qn),Xs=r(Qn,"P",{});var er=o(Xs);RD=i(er,"Write "),Vb=r(er,"EM",{});var M0=o(Vb);BD=i(M0,"DatasetInfo"),M0.forEach(a),HD=i(er," and license (if present) as JSON files to "),Ub=r(er,"EM",{});var R0=o(Ub);GD=i(R0,"dataset_info_dir"),R0.forEach(a),WD=i(er,"."),er.forEach(a),KD=m(Qn),b(yr.$$.fragment,Qn),Qn.forEach(a),be.forEach(a),M7=m(s),Qs=r(s,"H2",{class:!0});var vf=o(Qs);jr=r(vf,"A",{id:!0,class:!0,href:!0});var B0=o(jr);Mb=r(B0,"SPAN",{});var H0=o(Mb);b(fp.$$.fragment,H0),H0.forEach(a),B0.forEach(a),YD=m(vf),Rb=r(vf,"SPAN",{});var G0=o(Rb);JD=i(G0,"Dataset"),G0.forEach(a),vf.forEach(a),R7=m(s),wr=r(s,"P",{});var yf=o(wr);ZD=i(yf,"The base class "),Of=r(yf,"A",{href:!0});var W0=o(Of);XD=i(W0,"Dataset"),W0.forEach(a),QD=i(yf," implements a Dataset backed by an Apache Arrow table."),yf.forEach(a),B7=m(s),I=r(s,"DIV",{class:!0});var q=o(I);b(up.$$.fragment,q),ek=m(q),Bb=r(q,"P",{});var K0=o(Bb);tk=i(K0,"A Dataset backed by an Arrow table."),K0.forEach(a),ak=m(q),Qe=r(q,"DIV",{class:!0});var ta=o(Qe);b(gp.$$.fragment,ta),sk=m(ta),Hb=r(ta,"P",{});var Y0=o(Hb);nk=i(Y0,"Add column to Dataset."),Y0.forEach(a),rk=m(ta),Gb=r(ta,"P",{});var J0=o(Gb);Wb=r(J0,"EM",{});var Z0=o(Wb);ok=i(Z0,"New in version 1.7."),Z0.forEach(a),J0.forEach(a),lk=m(ta),b(Dr.$$.fragment,ta),ta.forEach(a),ik=m(q),et=r(q,"DIV",{class:!0});var aa=o(et);b(_p.$$.fragment,aa),pk=m(aa),Kb=r(aa,"P",{});var X0=o(Kb);ck=i(X0,"Add item to Dataset."),X0.forEach(a),dk=m(aa),Yb=r(aa,"P",{});var Q0=o(Yb);Jb=r(Q0,"EM",{});var e7=o(Jb);mk=i(e7,"New in version 1.7."),e7.forEach(a),Q0.forEach(a),hk=m(aa),b(kr.$$.fragment,aa),aa.forEach(a),fk=m(q),Er=r(q,"DIV",{class:!0});var jf=o(Er);b(bp.$$.fragment,jf),uk=m(jf),Zb=r(jf,"P",{});var t7=o(Zb);gk=i(t7,"Instantiate a Dataset backed by an Arrow table at filename."),t7.forEach(a),jf.forEach(a),_k=m(q),Ir=r(q,"DIV",{class:!0});var wf=o(Ir);b($p.$$.fragment,wf),bk=m(wf),Xb=r(wf,"P",{});var a7=o(Xb);$k=i(a7,"Instantiate a Dataset backed by an Arrow buffer."),a7.forEach(a),wf.forEach(a),xk=m(q),ve=r(q,"DIV",{class:!0});var Ye=o(ve);b(xp.$$.fragment,Ye),vk=m(Ye),Lt=r(Ye,"P",{});var sa=o(Lt);yk=i(sa,"Convert "),Qb=r(sa,"CODE",{});var s7=o(Qb);jk=i(s7,"pandas.DataFrame"),s7.forEach(a),wk=i(sa," to a "),e2=r(sa,"CODE",{});var n7=o(e2);Dk=i(n7,"pyarrow.Table"),n7.forEach(a),kk=i(sa," to create a "),Sf=r(sa,"A",{href:!0});var r7=o(Sf);Ek=i(r7,"Dataset"),r7.forEach(a),Ik=i(sa,"."),sa.forEach(a),qk=m(Ye),vp=r(Ye,"P",{});var Df=o(vp);Tk=i(Df,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),t2=r(Df,"EM",{});var o7=o(t2);Nk=i(o7,"object"),o7.forEach(a),Pk=i(Df,", we need to guess the datatype by looking at the Python objects in this Series."),Df.forEach(a),Lk=m(Ye),yp=r(Ye,"P",{});var kf=o(yp);Ak=i(kf,"Be aware that Series of the "),a2=r(kf,"EM",{});var l7=o(a2);Fk=i(l7,"object"),l7.forEach(a),Ok=i(kf,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),kf.forEach(a),Sk=m(Ye),b(qr.$$.fragment,Ye),Ye.forEach(a),Ck=m(q),Tr=r(q,"DIV",{class:!0});var Ef=o(Tr);b(jp.$$.fragment,Ef),zk=m(Ef),At=r(Ef,"P",{});var na=o(At);Vk=i(na,"Convert "),s2=r(na,"CODE",{});var i7=o(s2);Uk=i(i7,"dict"),i7.forEach(a),Mk=i(na," to a "),n2=r(na,"CODE",{});var p7=o(n2);Rk=i(p7,"pyarrow.Table"),p7.forEach(a),Bk=i(na," to create a "),Cf=r(na,"A",{href:!0});var c7=o(Cf);Hk=i(c7,"Dataset"),c7.forEach(a),Gk=i(na,"."),na.forEach(a),Ef.forEach(a),Wk=m(q),ca=r(q,"DIV",{class:!0});var tr=o(ca);b(wp.$$.fragment,tr),Kk=m(tr),r2=r(tr,"P",{});var d7=o(r2);Yk=i(d7,"The Apache Arrow table backing the dataset."),d7.forEach(a),Jk=m(tr),b(Nr.$$.fragment,tr),tr.forEach(a),Zk=m(q),da=r(q,"DIV",{class:!0});var ar=o(da);b(Dp.$$.fragment,ar),Xk=m(ar),o2=r(ar,"P",{});var m7=o(o2);Qk=i(m7,"The cache files containing the Apache Arrow table backing the dataset."),m7.forEach(a),eE=m(ar),b(Pr.$$.fragment,ar),ar.forEach(a),tE=m(q),ma=r(q,"DIV",{class:!0});var sr=o(ma);b(kp.$$.fragment,sr),aE=m(sr),l2=r(sr,"P",{});var h7=o(l2);sE=i(h7,"Number of columns in the dataset."),h7.forEach(a),nE=m(sr),b(Lr.$$.fragment,sr),sr.forEach(a),rE=m(q),ha=r(q,"DIV",{class:!0});var nr=o(ha);b(Ep.$$.fragment,nr),oE=m(nr),Ip=r(nr,"P",{});var If=o(Ip);lE=i(If,"Number of rows in the dataset (same as "),Ar=r(If,"A",{href:!0});var qf=o(Ar);iE=i(qf,"Dataset."),i2=r(qf,"STRONG",{});var f7=o(i2);pE=i(f7,"len"),f7.forEach(a),cE=i(qf,"()"),qf.forEach(a),dE=i(If,")."),If.forEach(a),mE=m(nr),b(Fr.$$.fragment,nr),nr.forEach(a),hE=m(q),fa=r(q,"DIV",{class:!0});var rr=o(fa);b(qp.$$.fragment,rr),fE=m(rr),p2=r(rr,"P",{});var u7=o(p2);uE=i(u7,"Names of the columns in the dataset."),u7.forEach(a),gE=m(rr),b(Or.$$.fragment,rr),rr.forEach(a),_E=m(q),ua=r(q,"DIV",{class:!0});var or=o(ua);b(Tp.$$.fragment,or),bE=m(or),c2=r(or,"P",{});var g7=o(c2);$E=i(g7,"Shape of the dataset (number of columns, number of rows)."),g7.forEach(a),xE=m(or),b(Sr.$$.fragment,or),or.forEach(a),vE=m(q),tt=r(q,"DIV",{class:!0});var ra=o(tt);b(Np.$$.fragment,ra),yE=m(ra),d2=r(ra,"P",{});var _7=o(d2);jE=i(_7,"Return a list of the unique elements in a column."),_7.forEach(a),wE=m(ra),m2=r(ra,"P",{});var b7=o(m2);DE=i(b7,"This is implemented in the low-level backend and as such, very fast."),b7.forEach(a),kE=m(ra),b(Cr.$$.fragment,ra),ra.forEach(a),EE=m(q),ga=r(q,"DIV",{class:!0});var lr=o(ga);b(Pp.$$.fragment,lr),IE=m(lr),h2=r(lr,"P",{});var $7=o(h2);qE=i($7,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),$7.forEach(a),TE=m(lr),b(zr.$$.fragment,lr),lr.forEach(a),NE=m(q),_a=r(q,"DIV",{class:!0});var ir=o(_a);b(Lp.$$.fragment,ir),PE=m(ir),f2=r(ir,"P",{});var x7=o(f2);LE=i(x7,"Cast the dataset to a new set of features."),x7.forEach(a),AE=m(ir),b(Vr.$$.fragment,ir),ir.forEach(a),FE=m(q),ba=r(q,"DIV",{class:!0});var pr=o(ba);b(Ap.$$.fragment,pr),OE=m(pr),u2=r(pr,"P",{});var v7=o(u2);SE=i(v7,"Cast column to feature for decoding."),v7.forEach(a),CE=m(pr),b(Ur.$$.fragment,pr),pr.forEach(a),zE=m(q),at=r(q,"DIV",{class:!0});var oa=o(at);b(Fp.$$.fragment,oa),VE=m(oa),g2=r(oa,"P",{});var y7=o(g2);UE=i(y7,"Remove one or several column(s) in the dataset and the features associated to them."),y7.forEach(a),ME=m(oa),en=r(oa,"P",{});var cr=o(en);RE=i(cr,"You can also remove a column using "),zf=r(cr,"A",{href:!0});var j7=o(zf);BE=i(j7,"Dataset.map()"),j7.forEach(a),HE=i(cr," with "),_2=r(cr,"EM",{});var w7=o(_2);GE=i(w7,"remove_columns"),w7.forEach(a),WE=i(cr,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),cr.forEach(a),KE=m(oa),b(Mr.$$.fragment,oa),oa.forEach(a),YE=m(q),$a=r(q,"DIV",{class:!0});var dr=o($a);b(Op.$$.fragment,dr),JE=m(dr),b2=r(dr,"P",{});var D7=o(b2);ZE=i(D7,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),D7.forEach(a),XE=m(dr),b(Rr.$$.fragment,dr),dr.forEach(a),QE=m(q),xa=r(q,"DIV",{class:!0});var mr=o(xa);b(Sp.$$.fragment,mr),e3=m(mr),$2=r(mr,"P",{});var k7=o($2);t3=i(k7,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),k7.forEach(a),a3=m(mr),b(Br.$$.fragment,mr),mr.forEach(a),s3=m(q),va=r(q,"DIV",{class:!0});var hr=o(va);b(Cp.$$.fragment,hr),n3=m(hr),zp=r(hr,"P",{});var Tf=o(zp);r3=i(Tf,"Casts the given column as :obj:"),x2=r(Tf,"CODE",{});var E7=o(x2);o3=i(E7,"datasets.features.ClassLabel"),E7.forEach(a),l3=i(Tf," and updates the table."),Tf.forEach(a),i3=m(hr),b(Hr.$$.fragment,hr),hr.forEach(a),p3=m(q),ya=r(q,"DIV",{class:!0});var fr=o(ya);b(Vp.$$.fragment,fr),c3=m(fr),v2=r(fr,"P",{});var I7=o(v2);d3=i(I7,"Number of rows in the dataset."),I7.forEach(a),m3=m(fr),b(Gr.$$.fragment,fr),fr.forEach(a),h3=m(q),ja=r(q,"DIV",{class:!0});var ur=o(ja);b(Up.$$.fragment,ur),f3=m(ur),y2=r(ur,"P",{});var q7=o(y2);u3=i(q7,"Iterate through the examples."),q7.forEach(a),g3=m(ur),Mp=r(ur,"P",{});var Nf=o(Mp);_3=i(Nf,"If a formatting is set with "),Vf=r(Nf,"A",{href:!0});var T7=o(Vf);b3=i(T7,"Dataset.set_format()"),T7.forEach(a),$3=i(Nf,` rows will be returned with the
selected format.`),Nf.forEach(a),ur.forEach(a),x3=m(q),Wr=r(q,"DIV",{class:!0});var Pf=o(Wr);b(Rp.$$.fragment,Pf),v3=m(Pf),tn=r(Pf,"P",{});var gr=o(tn);y3=i(gr,"To be used in a "),j2=r(gr,"CODE",{});var N7=o(j2);j3=i(N7,"with"),N7.forEach(a),w3=i(gr," statement. Set "),w2=r(gr,"CODE",{});var P7=o(w2);D3=i(P7,"__getitem__"),P7.forEach(a),k3=i(gr," return format (type and columns)."),gr.forEach(a),Pf.forEach(a),E3=m(q),ye=r(q,"DIV",{class:!0});var Je=o(ye);b(Bp.$$.fragment,Je),I3=m(Je),Ce=r(Je,"P",{});var Ze=o(Ce);q3=i(Ze,"Set "),D2=r(Ze,"STRONG",{});var L7=o(D2);T3=i(L7,"getitem"),L7.forEach(a),N3=i(Ze,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),k2=r(Ze,"CODE",{});var A7=o(k2);P3=i(A7,"type"),A7.forEach(a),L3=i(Ze," (for example \u201Cnumpy\u201D) is used to format batches when using "),E2=r(Ze,"STRONG",{});var F7=o(E2);A3=i(F7,"getitem"),F7.forEach(a),F3=i(Ze,`.
It\u2019s also possible to use custom transforms for formatting using `),Uf=r(Ze,"A",{href:!0});var O7=o(Uf);O3=i(O7,"datasets.Dataset.set_transform()"),O7.forEach(a),S3=i(Ze,"."),Ze.forEach(a),C3=m(Je),ze=r(Je,"P",{});var Xe=o(ze);z3=i(Xe,"It is possible to call "),I2=r(Xe,"CODE",{});var S7=o(I2);V3=i(S7,"map"),S7.forEach(a),U3=i(Xe," after calling "),q2=r(Xe,"CODE",{});var C7=o(q2);M3=i(C7,"set_format"),C7.forEach(a),R3=i(Xe,". Since "),T2=r(Xe,"CODE",{});var z7=o(T2);B3=i(z7,"map"),z7.forEach(a),H3=i(Xe,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),N2=r(Xe,"CODE",{});var hK=o(N2);G3=i(hK,"map"),hK.forEach(a),W3=i(Xe," on a dataset to add a new column, then this column will be formatted:"),Xe.forEach(a),K3=m(Je),P2=r(Je,"P",{});var fK=o(P2);Y3=i(fK,"new formatted columns = (all columns - previously unformatted columns)"),fK.forEach(a),J3=m(Je),b(Kr.$$.fragment,Je),Je.forEach(a),Z3=m(q),wa=r(q,"DIV",{class:!0});var Gg=o(wa);b(Hp.$$.fragment,Gg),X3=m(Gg),st=r(Gg,"P",{});var _r=o(st);Q3=i(_r,"Set "),L2=r(_r,"STRONG",{});var uK=o(L2);e5=i(uK,"getitem"),uK.forEach(a),t5=i(_r," return format using this transform. The transform is applied on-the-fly on batches when "),A2=r(_r,"STRONG",{});var gK=o(A2);a5=i(gK,"getitem"),gK.forEach(a),s5=i(_r,` is called.
As `),Mf=r(_r,"A",{href:!0});var _K=o(Mf);n5=i(_K,"datasets.Dataset.set_format()"),_K.forEach(a),r5=i(_r,", this can be reset using "),Rf=r(_r,"A",{href:!0});var bK=o(Rf);o5=i(bK,"datasets.Dataset.reset_format()"),bK.forEach(a),_r.forEach(a),l5=m(Gg),b(Yr.$$.fragment,Gg),Gg.forEach(a),i5=m(q),nt=r(q,"DIV",{class:!0});var Pi=o(nt);b(Gp.$$.fragment,Pi),p5=m(Pi),Wp=r(Pi,"P",{});var Nw=o(Wp);c5=i(Nw,"Reset "),F2=r(Nw,"STRONG",{});var $K=o(F2);d5=i($K,"getitem"),$K.forEach(a),m5=i(Nw," return format to python objects and all columns."),Nw.forEach(a),h5=m(Pi),Bf=r(Pi,"P",{});var XW=o(Bf);f5=i(XW,"Same as "),O2=r(XW,"CODE",{});var xK=o(O2);u5=i(xK,"self.set_format()"),xK.forEach(a),XW.forEach(a),g5=m(Pi),b(Jr.$$.fragment,Pi),Pi.forEach(a),_5=m(q),je=r(q,"DIV",{class:!0});var Es=o(je);b(Kp.$$.fragment,Es),b5=m(Es),Ft=r(Es,"P",{});var Li=o(Ft);$5=i(Li,"Set "),S2=r(Li,"STRONG",{});var vK=o(S2);x5=i(vK,"getitem"),vK.forEach(a),v5=i(Li,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),C2=r(Li,"CODE",{});var yK=o(C2);y5=i(yK,"type"),yK.forEach(a),j5=i(Li," (for example \u201Cnumpy\u201D) is used to format batches when using "),z2=r(Li,"STRONG",{});var jK=o(z2);w5=i(jK,"getitem"),jK.forEach(a),D5=i(Li,"."),Li.forEach(a),k5=m(Es),Yp=r(Es,"P",{});var Pw=o(Yp);E5=i(Pw,"It\u2019s also possible to use custom transforms for formatting using "),Hf=r(Pw,"A",{href:!0});var wK=o(Hf);I5=i(wK,"datasets.Dataset.with_transform()"),wK.forEach(a),q5=i(Pw,"."),Pw.forEach(a),T5=m(Es),an=r(Es,"P",{});var Wg=o(an);N5=i(Wg,"Contrary to "),Gf=r(Wg,"A",{href:!0});var DK=o(Gf);P5=i(DK,"datasets.Dataset.set_format()"),DK.forEach(a),L5=i(Wg,", "),V2=r(Wg,"CODE",{});var kK=o(V2);A5=i(kK,"with_format"),kK.forEach(a),F5=i(Wg," returns a new Dataset object."),Wg.forEach(a),O5=m(Es),b(Zr.$$.fragment,Es),Es.forEach(a),S5=m(q),we=r(q,"DIV",{class:!0});var Is=o(we);b(Jp.$$.fragment,Is),C5=m(Is),sn=r(Is,"P",{});var Kg=o(sn);z5=i(Kg,"Set "),U2=r(Kg,"STRONG",{});var EK=o(U2);V5=i(EK,"getitem"),EK.forEach(a),U5=i(Kg," return format using this transform. The transform is applied on-the-fly on batches when "),M2=r(Kg,"STRONG",{});var IK=o(M2);M5=i(IK,"getitem"),IK.forEach(a),R5=i(Kg," is called."),Kg.forEach(a),B5=m(Is),nn=r(Is,"P",{});var Yg=o(nn);H5=i(Yg,"As "),Wf=r(Yg,"A",{href:!0});var qK=o(Wf);G5=i(qK,"datasets.Dataset.set_format()"),qK.forEach(a),W5=i(Yg,", this can be reset using "),Kf=r(Yg,"A",{href:!0});var TK=o(Kf);K5=i(TK,"datasets.Dataset.reset_format()"),TK.forEach(a),Y5=i(Yg,"."),Yg.forEach(a),J5=m(Is),rn=r(Is,"P",{});var Jg=o(rn);Z5=i(Jg,"Contrary to "),Yf=r(Jg,"A",{href:!0});var NK=o(Yf);X5=i(NK,"datasets.Dataset.set_transform()"),NK.forEach(a),Q5=i(Jg,", "),R2=r(Jg,"CODE",{});var PK=o(R2);e6=i(PK,"with_transform"),PK.forEach(a),t6=i(Jg," returns a new Dataset object."),Jg.forEach(a),a6=m(Is),b(Xr.$$.fragment,Is),Is.forEach(a),s6=m(q),Qr=r(q,"DIV",{class:!0});var Lw=o(Qr);b(Zp.$$.fragment,Lw),n6=m(Lw),B2=r(Lw,"P",{});var LK=o(B2);r6=i(LK,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),LK.forEach(a),Lw.forEach(a),o6=m(q),rt=r(q,"DIV",{class:!0});var Ai=o(rt);b(Xp.$$.fragment,Ai),l6=m(Ai),H2=r(Ai,"P",{});var AK=o(H2);i6=i(AK,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),AK.forEach(a),p6=m(Ai),G2=r(Ai,"P",{});var FK=o(G2);c6=i(FK,"Be careful when running this command that no other process is currently using other cache files."),FK.forEach(a),d6=m(Ai),b(eo.$$.fragment,Ai),Ai.forEach(a),m6=m(q),De=r(q,"DIV",{class:!0});var qs=o(De);b(Qp.$$.fragment,qs),h6=m(qs),W2=r(qs,"P",{});var OK=o(W2);f6=i(OK,`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),OK.forEach(a),u6=m(qs),ec=r(qs,"P",{});var Aw=o(ec);g6=i(Aw,"You can specify whether the function should be batched or not with the "),K2=r(Aw,"CODE",{});var SK=o(K2);_6=i(SK,"batched"),SK.forEach(a),b6=i(Aw," parameter:"),Aw.forEach(a),$6=m(qs),on=r(qs,"UL",{});var Zg=o(on);Y2=r(Zg,"LI",{});var CK=o(Y2);x6=i(CK,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),CK.forEach(a),v6=m(Zg),J2=r(Zg,"LI",{});var zK=o(J2);y6=i(zK,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),zK.forEach(a),j6=m(Zg),me=r(Zg,"LI",{});var $t=o(me);w6=i($t,"If batched is True and batch_size is "),Z2=r($t,"CODE",{});var VK=o(Z2);D6=i(VK,"n"),VK.forEach(a),k6=i($t," > 1, then the function takes a batch of "),X2=r($t,"CODE",{});var UK=o(X2);E6=i(UK,"n"),UK.forEach(a),I6=i($t," examples as input and can return a batch with "),Q2=r($t,"CODE",{});var MK=o(Q2);q6=i(MK,"n"),MK.forEach(a),T6=i($t,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),e$=r($t,"CODE",{});var RK=o(e$);N6=i(RK,"n"),RK.forEach(a),P6=i($t,` examples.
A batch is a dictionary, e.g. a batch of `),t$=r($t,"CODE",{});var BK=o(t$);L6=i(BK,"n"),BK.forEach(a),A6=i($t," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),$t.forEach(a),Zg.forEach(a),F6=m(qs),b(to.$$.fragment,qs),qs.forEach(a),O6=m(q),Da=r(q,"DIV",{class:!0});var Xg=o(Da);b(tc.$$.fragment,Xg),S6=m(Xg),a$=r(Xg,"P",{});var HK=o(a$);C6=i(HK,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),HK.forEach(a),z6=m(Xg),b(ao.$$.fragment,Xg),Xg.forEach(a),V6=m(q),ka=r(q,"DIV",{class:!0});var Qg=o(ka);b(ac.$$.fragment,Qg),U6=m(Qg),s$=r(Qg,"P",{});var GK=o(s$);M6=i(GK,"Create a new dataset with rows selected following the list/array of indices."),GK.forEach(a),R6=m(Qg),b(so.$$.fragment,Qg),Qg.forEach(a),B6=m(q),ot=r(q,"DIV",{class:!0});var Fi=o(ot);b(sc.$$.fragment,Fi),H6=m(Fi),n$=r(Fi,"P",{});var WK=o(n$);G6=i(WK,"Create a new dataset sorted according to a column."),WK.forEach(a),W6=m(Fi),r$=r(Fi,"P",{});var KK=o(r$);K6=i(KK,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),KK.forEach(a),Y6=m(Fi),b(no.$$.fragment,Fi),Fi.forEach(a),J6=m(q),lt=r(q,"DIV",{class:!0});var Oi=o(lt);b(nc.$$.fragment,Oi),Z6=m(Oi),o$=r(Oi,"P",{});var YK=o(o$);X6=i(YK,"Create a new Dataset where the rows are shuffled."),YK.forEach(a),Q6=m(Oi),l$=r(Oi,"P",{});var JK=o(l$);e8=i(JK,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),JK.forEach(a),t8=m(Oi),b(ro.$$.fragment,Oi),Oi.forEach(a),a8=m(q),it=r(q,"DIV",{class:!0});var Si=o(it);b(rc.$$.fragment,Si),s8=m(Si),H=r(Si,"P",{});var pe=o(H);n8=i(pe,"Return a dictionary ("),i$=r(pe,"CODE",{});var ZK=o(i$);r8=i(ZK,"datasets.DatsetDict"),ZK.forEach(a),o8=i(pe,") with two random train and test subsets ("),p$=r(pe,"EM",{});var XK=o(p$);l8=i(XK,"train"),XK.forEach(a),i8=i(pe," and "),c$=r(pe,"EM",{});var QK=o(c$);p8=i(QK,"test"),QK.forEach(a),c8=m(pe),d$=r(pe,"CODE",{});var eY=o(d$);d8=i(eY,"Dataset"),eY.forEach(a),m8=i(pe,` splits).
Splits are created from the dataset according to `),m$=r(pe,"EM",{});var tY=o(m$);h8=i(tY,"test_size"),tY.forEach(a),f8=i(pe,", "),h$=r(pe,"EM",{});var aY=o(h$);u8=i(aY,"train_size"),aY.forEach(a),g8=i(pe," and "),f$=r(pe,"EM",{});var sY=o(f$);_8=i(sY,"shuffle"),sY.forEach(a),b8=i(pe,"."),pe.forEach(a),$8=m(Si),oc=r(Si,"P",{});var Fw=o(oc);x8=i(Fw,"This method is similar to scikit-learn "),u$=r(Fw,"EM",{});var nY=o(u$);v8=i(nY,"train_test_split"),nY.forEach(a),y8=i(Fw," with the omission of the stratified options."),Fw.forEach(a),j8=m(Si),b(oo.$$.fragment,Si),Si.forEach(a),w8=m(q),re=r(q,"DIV",{class:!0});var xt=o(re);b(lc.$$.fragment,xt),D8=m(xt),ln=r(xt,"P",{});var e_=o(ln);k8=i(e_,"Return the "),g$=r(e_,"EM",{});var rY=o(g$);E8=i(rY,"index"),rY.forEach(a),I8=i(e_,"-nth shard from dataset split into "),_$=r(e_,"EM",{});var oY=o(_$);q8=i(oY,"num_shards"),oY.forEach(a),T8=i(e_," pieces."),e_.forEach(a),N8=m(xt),b$=r(xt,"P",{});var lY=o(b$);P8=i(lY,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),lY.forEach(a),L8=m(xt),ic=r(xt,"P",{});var Ow=o(ic);A8=i(Ow,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),$$=r(Ow,"EM",{});var iY=o($$);F8=i(iY,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),iY.forEach(a),O8=i(Ow,` will return
a dataset with the same order as the original.`),Ow.forEach(a),S8=m(xt),x$=r(xt,"P",{});var pY=o(x$);C8=i(pY,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),pY.forEach(a),z8=m(xt),b(lo.$$.fragment,xt),xt.forEach(a),V8=m(q),Ea=r(q,"DIV",{class:!0});var t_=o(Ea);b(pc.$$.fragment,t_),U8=m(t_),v$=r(t_,"P",{});var cY=o(v$);M8=i(cY,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),cY.forEach(a),R8=m(t_),b(io.$$.fragment,t_),t_.forEach(a),B8=m(q),pt=r(q,"DIV",{class:!0});var Ci=o(pt);b(cc.$$.fragment,Ci),H8=m(Ci),y$=r(Ci,"P",{});var dY=o(y$);G8=i(dY,`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),dY.forEach(a),W8=m(Ci),Ot=r(Ci,"P",{});var zi=o(Ot);K8=i(zi,"The resulting Parquet files are self-contained by default: if your dataset contains "),Jf=r(zi,"A",{href:!0});var mY=o(Jf);Y8=i(mY,"Image"),mY.forEach(a),J8=i(zi," or "),Zf=r(zi,"A",{href:!0});var hY=o(Zf);Z8=i(hY,"Audio"),hY.forEach(a),X8=i(zi,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),j$=r(zi,"EM",{});var fY=o(j$);Q8=i(fY,"embed_external_files"),fY.forEach(a),eI=i(zi," to False."),zi.forEach(a),tI=m(Ci),b(po.$$.fragment,Ci),Ci.forEach(a),aI=m(q),K=r(q,"DIV",{class:!0});var Oe=o(K);b(dc.$$.fragment,Oe),sI=m(Oe),pn=r(Oe,"P",{});var a_=o(pn);nI=i(a_,"Saves a dataset to a dataset directory, or in a filesystem using either "),Xf=r(a_,"A",{href:!0});var uY=o(Xf);rI=i(uY,"S3FileSystem"),uY.forEach(a),oI=i(a_,` or
any implementation of `),w$=r(a_,"CODE",{});var gY=o(w$);lI=i(gY,"fsspec.spec.AbstractFileSystem"),gY.forEach(a),iI=i(a_,"."),a_.forEach(a),pI=m(Oe),cn=r(Oe,"P",{});var s_=o(cn);cI=i(s_,"For "),Qf=r(s_,"A",{href:!0});var _Y=o(Qf);dI=i(_Y,"Image"),_Y.forEach(a),mI=i(s_," and "),eu=r(s_,"A",{href:!0});var bY=o(eu);hI=i(bY,"Audio"),bY.forEach(a),fI=i(s_," data:"),s_.forEach(a),uI=m(Oe),mc=r(Oe,"P",{});var Sw=o(mc);gI=i(Sw,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),D$=r(Sw,"EM",{});var $Y=o(D$);_I=i($Y,"read()"),$Y.forEach(a),bI=i(Sw," those files first."),Sw.forEach(a),$I=m(Oe),b(co.$$.fragment,Oe),xI=m(Oe),b(mo.$$.fragment,Oe),vI=m(Oe),b(ho.$$.fragment,Oe),Oe.forEach(a),yI=m(q),Ia=r(q,"DIV",{class:!0});var n_=o(Ia);b(hc.$$.fragment,n_),jI=m(n_),St=r(n_,"P",{});var Vi=o(St);wI=i(Vi,"Loads a dataset that was previously saved using "),k$=r(Vi,"CODE",{});var xY=o(k$);DI=i(xY,"save_to_disk"),xY.forEach(a),kI=i(Vi,` from a dataset directory, or from a
filesystem using either `),tu=r(Vi,"A",{href:!0});var vY=o(tu);EI=i(vY,"S3FileSystem"),vY.forEach(a),II=i(Vi,` or any implementation of
`),E$=r(Vi,"CODE",{});var yY=o(E$);qI=i(yY,"fsspec.spec.AbstractFileSystem"),yY.forEach(a),TI=i(Vi,"."),Vi.forEach(a),NI=m(n_),b(fo.$$.fragment,n_),n_.forEach(a),PI=m(q),uo=r(q,"DIV",{class:!0});var Cw=o(uo);b(fc.$$.fragment,Cw),LI=m(Cw),I$=r(Cw,"P",{});var jY=o(I$);AI=i(jY,"Create and cache a new Dataset by flattening the indices mapping."),jY.forEach(a),Cw.forEach(a),FI=m(q),qa=r(q,"DIV",{class:!0});var r_=o(qa);b(uc.$$.fragment,r_),OI=m(r_),q$=r(r_,"P",{});var wY=o(q$);SI=i(wY,"Exports the dataset to csv"),wY.forEach(a),CI=m(r_),b(go.$$.fragment,r_),r_.forEach(a),zI=m(q),Ta=r(q,"DIV",{class:!0});var o_=o(Ta);b(gc.$$.fragment,o_),VI=m(o_),_c=r(o_,"P",{});var zw=o(_c);UI=i(zw,"Returns the dataset as a "),T$=r(zw,"CODE",{});var DY=o(T$);MI=i(DY,"pandas.DataFrame"),DY.forEach(a),RI=i(zw,". Can also return a generator for large datasets."),zw.forEach(a),BI=m(o_),b(_o.$$.fragment,o_),o_.forEach(a),HI=m(q),Na=r(q,"DIV",{class:!0});var l_=o(Na);b(bc.$$.fragment,l_),GI=m(l_),N$=r(l_,"P",{});var kY=o(N$);WI=i(kY,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),kY.forEach(a),KI=m(l_),b(bo.$$.fragment,l_),l_.forEach(a),YI=m(q),Pa=r(q,"DIV",{class:!0});var i_=o(Pa);b($c.$$.fragment,i_),JI=m(i_),P$=r(i_,"P",{});var EY=o(P$);ZI=i(EY,"Export the dataset to JSON Lines or JSON."),EY.forEach(a),XI=m(i_),b($o.$$.fragment,i_),i_.forEach(a),QI=m(q),La=r(q,"DIV",{class:!0});var p_=o(La);b(xc.$$.fragment,p_),e9=m(p_),L$=r(p_,"P",{});var IY=o(L$);t9=i(IY,"Exports the dataset to parquet"),IY.forEach(a),a9=m(p_),b(xo.$$.fragment,p_),p_.forEach(a),s9=m(q),ct=r(q,"DIV",{class:!0});var Ui=o(ct);b(vc.$$.fragment,Ui),n9=m(Ui),dn=r(Ui,"P",{});var c_=o(dn);r9=i(c_,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),A$=r(c_,"CODE",{});var qY=o(A$);o9=i(qY,"device"),qY.forEach(a),l9=i(c_," if you want to run it on GPU ("),F$=r(c_,"CODE",{});var TY=o(F$);i9=i(TY,"device"),TY.forEach(a),p9=i(c_,` must be the GPU index).
You can find more information about Faiss here:`),c_.forEach(a),c9=m(Ui),O$=r(Ui,"UL",{});var NY=o(O$);au=r(NY,"LI",{});var QW=o(au);d9=i(QW,"For "),yc=r(QW,"A",{href:!0,rel:!0});var PY=o(yc);m9=i(PY,"string factory"),PY.forEach(a),QW.forEach(a),NY.forEach(a),h9=m(Ui),b(vo.$$.fragment,Ui),Ui.forEach(a),f9=m(q),Aa=r(q,"DIV",{class:!0});var d_=o(Aa);b(jc.$$.fragment,d_),u9=m(d_),Ct=r(d_,"P",{});var Mi=o(Ct);g9=i(Mi,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),S$=r(Mi,"EM",{});var LY=o(S$);_9=i(LY,"external_arrays"),LY.forEach(a),b9=i(Mi,`.
You can specify `),C$=r(Mi,"EM",{});var AY=o(C$);$9=i(AY,"device"),AY.forEach(a),x9=i(Mi," if you want to run it on GPU ("),z$=r(Mi,"EM",{});var FY=o(z$);v9=i(FY,"device"),FY.forEach(a),y9=i(Mi,` must be the GPU index).
You can find more information about Faiss here:`),Mi.forEach(a),j9=m(d_),V$=r(d_,"UL",{});var OY=o(V$);su=r(OY,"LI",{});var eK=o(su);w9=i(eK,"For "),wc=r(eK,"A",{href:!0,rel:!0});var SY=o(wc);D9=i(SY,"string factory"),SY.forEach(a),eK.forEach(a),OY.forEach(a),d_.forEach(a),k9=m(q),yo=r(q,"DIV",{class:!0});var Vw=o(yo);b(Dc.$$.fragment,Vw),E9=m(Vw),U$=r(Vw,"P",{});var CY=o(U$);I9=i(CY,"Save a FaissIndex on disk."),CY.forEach(a),Vw.forEach(a),q9=m(q),Fa=r(q,"DIV",{class:!0});var m_=o(Fa);b(kc.$$.fragment,m_),T9=m(m_),M$=r(m_,"P",{});var zY=o(M$);N9=i(zY,"Load a FaissIndex from disk."),zY.forEach(a),P9=m(m_),Ec=r(m_,"P",{});var Uw=o(Ec);L9=i(Uw,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),R$=r(Uw,"EM",{});var VY=o(R$);A9=i(VY,".get_index(index_name).faiss_index"),VY.forEach(a),F9=i(Uw," to make it fit your needs."),Uw.forEach(a),m_.forEach(a),O9=m(q),Oa=r(q,"DIV",{class:!0});var h_=o(Oa);b(Ic.$$.fragment,h_),S9=m(h_),B$=r(h_,"P",{});var UY=o(B$);C9=i(UY,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),UY.forEach(a),z9=m(h_),b(jo.$$.fragment,h_),h_.forEach(a),V9=m(q),Sa=r(q,"DIV",{class:!0});var f_=o(Sa);b(qc.$$.fragment,f_),U9=m(f_),H$=r(f_,"P",{});var MY=o(H$);M9=i(MY,"Load an existing text index using ElasticSearch for fast retrieval."),MY.forEach(a),R9=m(f_),b(wo.$$.fragment,f_),f_.forEach(a),B9=m(q),Do=r(q,"DIV",{class:!0});var Mw=o(Do);b(Tc.$$.fragment,Mw),H9=m(Mw),G$=r(Mw,"P",{});var RY=o(G$);G9=i(RY,"List the colindex_nameumns/identifiers of all the attached indexes."),RY.forEach(a),Mw.forEach(a),W9=m(q),ko=r(q,"DIV",{class:!0});var Rw=o(ko);b(Nc.$$.fragment,Rw),K9=m(Rw),W$=r(Rw,"P",{});var BY=o(W$);Y9=i(BY,"List the index_name/identifiers of all the attached indexes."),BY.forEach(a),Rw.forEach(a),J9=m(q),Eo=r(q,"DIV",{class:!0});var Bw=o(Eo);b(Pc.$$.fragment,Bw),Z9=m(Bw),K$=r(Bw,"P",{});var HY=o(K$);X9=i(HY,"Drop the index with the specified column."),HY.forEach(a),Bw.forEach(a),Q9=m(q),Io=r(q,"DIV",{class:!0});var Hw=o(Io);b(Lc.$$.fragment,Hw),eq=m(Hw),Y$=r(Hw,"P",{});var GY=o(Y$);tq=i(GY,"Find the nearest examples indices in the dataset to the query."),GY.forEach(a),Hw.forEach(a),aq=m(q),qo=r(q,"DIV",{class:!0});var Gw=o(qo);b(Ac.$$.fragment,Gw),sq=m(Gw),J$=r(Gw,"P",{});var WY=o(J$);nq=i(WY,"Find the nearest examples indices in the dataset to the query."),WY.forEach(a),Gw.forEach(a),rq=m(q),To=r(q,"DIV",{class:!0});var Ww=o(To);b(Fc.$$.fragment,Ww),oq=m(Ww),Z$=r(Ww,"P",{});var KY=o(Z$);lq=i(KY,"Find the nearest examples in the dataset to the query."),KY.forEach(a),Ww.forEach(a),iq=m(q),No=r(q,"DIV",{class:!0});var Kw=o(No);b(Oc.$$.fragment,Kw),pq=m(Kw),X$=r(Kw,"P",{});var YY=o(X$);cq=i(YY,"Find the nearest examples in the dataset to the query."),YY.forEach(a),Kw.forEach(a),dq=m(q),Po=r(q,"DIV",{class:!0});var Yw=o(Po);b(Sc.$$.fragment,Yw),mq=m(Yw),nu=r(Yw,"P",{});var tK=o(nu);ru=r(tK,"A",{href:!0});var JY=o(ru);hq=i(JY,"datasets.DatasetInfo"),JY.forEach(a),fq=i(tK," object containing all the metadata in the dataset."),tK.forEach(a),Yw.forEach(a),uq=m(q),Lo=r(q,"DIV",{class:!0});var Jw=o(Lo);b(Cc.$$.fragment,Jw),gq=m(Jw),ou=r(Jw,"P",{});var aK=o(ou);lu=r(aK,"A",{href:!0});var ZY=o(lu);_q=i(ZY,"datasets.NamedSplit"),ZY.forEach(a),bq=i(aK," object corresponding to a named dataset split."),aK.forEach(a),Jw.forEach(a),$q=m(q),iu=r(q,"DIV",{class:!0});var XY=o(iu);b(zc.$$.fragment,XY),XY.forEach(a),xq=m(q),pu=r(q,"DIV",{class:!0});var QY=o(pu);b(Vc.$$.fragment,QY),QY.forEach(a),vq=m(q),cu=r(q,"DIV",{class:!0});var eJ=o(cu);b(Uc.$$.fragment,eJ),eJ.forEach(a),yq=m(q),du=r(q,"DIV",{class:!0});var tJ=o(du);b(Mc.$$.fragment,tJ),tJ.forEach(a),jq=m(q),mu=r(q,"DIV",{class:!0});var aJ=o(mu);b(Rc.$$.fragment,aJ),aJ.forEach(a),wq=m(q),hu=r(q,"DIV",{class:!0});var sJ=o(hu);b(Bc.$$.fragment,sJ),sJ.forEach(a),Dq=m(q),fu=r(q,"DIV",{class:!0});var nJ=o(fu);b(Hc.$$.fragment,nJ),nJ.forEach(a),kq=m(q),uu=r(q,"DIV",{class:!0});var rJ=o(uu);b(Gc.$$.fragment,rJ),rJ.forEach(a),Eq=m(q),gu=r(q,"DIV",{class:!0});var oJ=o(gu);b(Wc.$$.fragment,oJ),oJ.forEach(a),Iq=m(q),_u=r(q,"DIV",{class:!0});var lJ=o(_u);b(Kc.$$.fragment,lJ),lJ.forEach(a),qq=m(q),bu=r(q,"DIV",{class:!0});var iJ=o(bu);b(Yc.$$.fragment,iJ),iJ.forEach(a),Tq=m(q),$u=r(q,"DIV",{class:!0});var pJ=o($u);b(Jc.$$.fragment,pJ),pJ.forEach(a),Nq=m(q),xu=r(q,"DIV",{class:!0});var cJ=o(xu);b(Zc.$$.fragment,cJ),cJ.forEach(a),Pq=m(q),Ca=r(q,"DIV",{class:!0});var u_=o(Ca);b(Xc.$$.fragment,u_),Lq=m(u_),Q$=r(u_,"P",{});var dJ=o(Q$);Aq=i(dJ,"Create Dataset from CSV file(s)."),dJ.forEach(a),Fq=m(u_),b(Ao.$$.fragment,u_),u_.forEach(a),Oq=m(q),za=r(q,"DIV",{class:!0});var g_=o(za);b(Qc.$$.fragment,g_),Sq=m(g_),e1=r(g_,"P",{});var mJ=o(e1);Cq=i(mJ,"Create Dataset from JSON or JSON Lines file(s)."),mJ.forEach(a),zq=m(g_),b(Fo.$$.fragment,g_),g_.forEach(a),Vq=m(q),Va=r(q,"DIV",{class:!0});var __=o(Va);b(ed.$$.fragment,__),Uq=m(__),t1=r(__,"P",{});var hJ=o(t1);Mq=i(hJ,"Create Dataset from Parquet file(s)."),hJ.forEach(a),Rq=m(__),b(Oo.$$.fragment,__),__.forEach(a),Bq=m(q),Ua=r(q,"DIV",{class:!0});var b_=o(Ua);b(td.$$.fragment,b_),Hq=m(b_),a1=r(b_,"P",{});var fJ=o(a1);Gq=i(fJ,"Create Dataset from text file(s)."),fJ.forEach(a),Wq=m(b_),b(So.$$.fragment,b_),b_.forEach(a),Kq=m(q),Ma=r(q,"DIV",{class:!0});var $_=o(Ma);b(ad.$$.fragment,$_),Yq=m($_),mn=r($_,"P",{});var x_=o(mn);Jq=i(x_,"Prepare a dataset for the given task by casting the dataset\u2019s "),vu=r(x_,"A",{href:!0});var uJ=o(vu);Zq=i(uJ,"Features"),uJ.forEach(a),Xq=i(x_," to standardized column names and types as detailed in "),yu=r(x_,"A",{href:!0});var gJ=o(yu);Qq=i(gJ,"datasets.tasks"),gJ.forEach(a),eT=i(x_,"."),x_.forEach(a),tT=m($_),hn=r($_,"P",{});var v_=o(hn);aT=i(v_,"Casts "),s1=r(v_,"CODE",{});var _J=o(s1);sT=i(_J,"datasets.DatasetInfo.features"),_J.forEach(a),nT=i(v_," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),n1=r(v_,"CODE",{});var bJ=o(n1);rT=i(bJ,"datasets.DatasetInfo.task_templates"),bJ.forEach(a),oT=i(v_," after casting."),v_.forEach(a),$_.forEach(a),lT=m(q),Ra=r(q,"DIV",{class:!0});var y_=o(Ra);b(sd.$$.fragment,y_),iT=m(y_),nd=r(y_,"P",{});var Zw=o(nd);pT=i(Zw,"Align the dataset\u2019s label ID and label name mapping to match an input "),r1=r(Zw,"CODE",{});var $J=o(r1);cT=i($J,"label2id"),$J.forEach(a),dT=i(Zw,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),Zw.forEach(a),mT=m(y_),b(Co.$$.fragment,y_),y_.forEach(a),q.forEach(a),H7=m(s),zt=r(s,"DIV",{class:!0});var j_=o(zt);b(rd.$$.fragment,j_),hT=m(j_),fn=r(j_,"P",{});var w_=o(fn);fT=i(w_,"Converts a list of "),ju=r(w_,"A",{href:!0});var xJ=o(ju);uT=i(xJ,"Dataset"),xJ.forEach(a),gT=i(w_," with the same schema into a single "),wu=r(w_,"A",{href:!0});var vJ=o(wu);_T=i(vJ,"Dataset"),vJ.forEach(a),bT=i(w_,"."),w_.forEach(a),$T=m(j_),b(zo.$$.fragment,j_),j_.forEach(a),G7=m(s),X=r(s,"DIV",{class:!0});var vt=o(X);b(od.$$.fragment,vt),xT=m(vt),o1=r(vt,"P",{});var yJ=o(o1);vT=i(yJ,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),yJ.forEach(a),yT=m(vt),un=r(vt,"P",{});var D_=o(un);jT=i(D_,"You can use this function on a list of "),Du=r(D_,"A",{href:!0});var jJ=o(Du);wT=i(jJ,"Dataset"),jJ.forEach(a),DT=i(D_," objects, or on a list of "),ku=r(D_,"A",{href:!0});var wJ=o(ku);kT=i(wJ,"IterableDataset"),wJ.forEach(a),ET=i(D_," objects."),D_.forEach(a),IT=m(vt),Ve=r(vt,"P",{});var Ts=o(Ve);qT=i(Ts,"If "),l1=r(Ts,"CODE",{});var DJ=o(l1);TT=i(DJ,"probabilities"),DJ.forEach(a),NT=i(Ts," is "),i1=r(Ts,"CODE",{});var kJ=o(i1);PT=i(kJ,"None"),kJ.forEach(a),LT=i(Ts,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),p1=r(Ts,"CODE",{});var EJ=o(p1);AT=i(EJ,"probabilities"),EJ.forEach(a),FT=i(Ts," is not "),c1=r(Ts,"CODE",{});var IJ=o(c1);OT=i(IJ,"None"),IJ.forEach(a),ST=i(Ts,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),Ts.forEach(a),CT=m(vt),d1=r(vt,"P",{});var qJ=o(d1);zT=i(qJ,"The resulting dataset ends when one of the source datasets runs out of examples."),qJ.forEach(a),VT=m(vt),b(Vo.$$.fragment,vt),vt.forEach(a),W7=m(s),he=r(s,"DIV",{class:!0});var Ns=o(he);b(ld.$$.fragment,Ns),UT=m(Ns),m1=r(Ns,"P",{});var TJ=o(m1);MT=i(TJ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),TJ.forEach(a),RT=m(Ns),h1=r(Ns,"P",{});var NJ=o(h1);BT=i(NJ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),NJ.forEach(a),HT=m(Ns),f1=r(Ns,"P",{});var PJ=o(f1);GT=i(PJ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),PJ.forEach(a),WT=m(Ns),Ue=r(Ns,"UL",{});var Ps=o(Ue);u1=r(Ps,"LI",{});var LJ=o(u1);KT=i(LJ,"cache files are always recreated"),LJ.forEach(a),YT=m(Ps),g1=r(Ps,"LI",{});var AJ=o(g1);JT=i(AJ,"cache files are written to a temporary directory that is deleted when session closes"),AJ.forEach(a),ZT=m(Ps),_1=r(Ps,"LI",{});var FJ=o(_1);XT=i(FJ,"cache files are named using a random hash instead of the dataset fingerprint"),FJ.forEach(a),QT=m(Ps),id=r(Ps,"LI",{});var Xw=o(id);eN=i(Xw,"use "),Eu=r(Xw,"A",{href:!0});var OJ=o(Eu);tN=i(OJ,"datasets.Dataset.save_to_disk()"),OJ.forEach(a),aN=i(Xw," to save a transformed dataset or it will be deleted when session closes"),Xw.forEach(a),sN=m(Ps),Vt=r(Ps,"LI",{});var Ri=o(Vt);nN=i(Ri,"caching doesn\u2019t affect "),Iu=r(Ri,"A",{href:!0});var SJ=o(Iu);rN=i(SJ,"datasets.load_dataset()"),SJ.forEach(a),oN=i(Ri,`. If you want to regenerate a dataset from scratch you should use
the `),b1=r(Ri,"CODE",{});var CJ=o(b1);lN=i(CJ,"download_mode"),CJ.forEach(a),iN=i(Ri," parameter in "),qu=r(Ri,"A",{href:!0});var zJ=o(qu);pN=i(zJ,"datasets.load_dataset()"),zJ.forEach(a),cN=i(Ri,"."),Ri.forEach(a),Ps.forEach(a),Ns.forEach(a),K7=m(s),fe=r(s,"DIV",{class:!0});var Ls=o(fe);b(pd.$$.fragment,Ls),dN=m(Ls),$1=r(Ls,"P",{});var VJ=o($1);mN=i(VJ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),VJ.forEach(a),hN=m(Ls),x1=r(Ls,"P",{});var UJ=o(x1);fN=i(UJ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),UJ.forEach(a),uN=m(Ls),v1=r(Ls,"P",{});var MJ=o(v1);gN=i(MJ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),MJ.forEach(a),_N=m(Ls),Me=r(Ls,"UL",{});var As=o(Me);y1=r(As,"LI",{});var RJ=o(y1);bN=i(RJ,"cache files are always recreated"),RJ.forEach(a),$N=m(As),j1=r(As,"LI",{});var BJ=o(j1);xN=i(BJ,"cache files are written to a temporary directory that is deleted when session closes"),BJ.forEach(a),vN=m(As),w1=r(As,"LI",{});var HJ=o(w1);yN=i(HJ,"cache files are named using a random hash instead of the dataset fingerprint"),HJ.forEach(a),jN=m(As),cd=r(As,"LI",{});var Qw=o(cd);wN=i(Qw,"use "),Tu=r(Qw,"A",{href:!0});var GJ=o(Tu);DN=i(GJ,"datasets.Dataset.save_to_disk()"),GJ.forEach(a),kN=i(Qw," to save a transformed dataset or it will be deleted when session closes"),Qw.forEach(a),EN=m(As),Ut=r(As,"LI",{});var Bi=o(Ut);IN=i(Bi,"caching doesn\u2019t affect "),Nu=r(Bi,"A",{href:!0});var WJ=o(Nu);qN=i(WJ,"datasets.load_dataset()"),WJ.forEach(a),TN=i(Bi,`. If you want to regenerate a dataset from scratch you should use
the `),D1=r(Bi,"CODE",{});var KJ=o(D1);NN=i(KJ,"download_mode"),KJ.forEach(a),PN=i(Bi," parameter in "),Pu=r(Bi,"A",{href:!0});var YJ=o(Pu);LN=i(YJ,"datasets.load_dataset()"),YJ.forEach(a),AN=i(Bi,"."),Bi.forEach(a),As.forEach(a),Ls.forEach(a),Y7=m(s),ue=r(s,"DIV",{class:!0});var Fs=o(ue);b(dd.$$.fragment,Fs),FN=m(Fs),k1=r(Fs,"P",{});var JJ=o(k1);ON=i(JJ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),JJ.forEach(a),SN=m(Fs),E1=r(Fs,"P",{});var ZJ=o(E1);CN=i(ZJ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),ZJ.forEach(a),zN=m(Fs),I1=r(Fs,"P",{});var XJ=o(I1);VN=i(XJ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),XJ.forEach(a),UN=m(Fs),Re=r(Fs,"UL",{});var Os=o(Re);q1=r(Os,"LI",{});var QJ=o(q1);MN=i(QJ,"cache files are always recreated"),QJ.forEach(a),RN=m(Os),T1=r(Os,"LI",{});var eZ=o(T1);BN=i(eZ,"cache files are written to a temporary directory that is deleted when session closes"),eZ.forEach(a),HN=m(Os),N1=r(Os,"LI",{});var tZ=o(N1);GN=i(tZ,"cache files are named using a random hash instead of the dataset fingerprint"),tZ.forEach(a),WN=m(Os),md=r(Os,"LI",{});var e4=o(md);KN=i(e4,"use "),Lu=r(e4,"A",{href:!0});var aZ=o(Lu);YN=i(aZ,"datasets.Dataset.save_to_disk()"),aZ.forEach(a),JN=i(e4," to save a transformed dataset or it will be deleted when session closes"),e4.forEach(a),ZN=m(Os),Mt=r(Os,"LI",{});var Hi=o(Mt);XN=i(Hi,"caching doesn\u2019t affect "),Au=r(Hi,"A",{href:!0});var sZ=o(Au);QN=i(sZ,"datasets.load_dataset()"),sZ.forEach(a),eP=i(Hi,`. If you want to regenerate a dataset from scratch you should use
the `),P1=r(Hi,"CODE",{});var nZ=o(P1);tP=i(nZ,"download_mode"),nZ.forEach(a),aP=i(Hi," parameter in "),Fu=r(Hi,"A",{href:!0});var rZ=o(Fu);sP=i(rZ,"datasets.load_dataset()"),rZ.forEach(a),nP=i(Hi,"."),Hi.forEach(a),Os.forEach(a),Fs.forEach(a),J7=m(s),gn=r(s,"H2",{class:!0});var t4=o(gn);Uo=r(t4,"A",{id:!0,class:!0,href:!0});var oZ=o(Uo);L1=r(oZ,"SPAN",{});var lZ=o(L1);b(hd.$$.fragment,lZ),lZ.forEach(a),oZ.forEach(a),rP=m(t4),A1=r(t4,"SPAN",{});var iZ=o(A1);oP=i(iZ,"DatasetDict"),iZ.forEach(a),t4.forEach(a),Z7=m(s),Mo=r(s,"P",{});var a4=o(Mo);lP=i(a4,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),F1=r(a4,"CODE",{});var pZ=o(F1);iP=i(pZ,"Dataset"),pZ.forEach(a),pP=i(a4,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),a4.forEach(a),X7=m(s),L=r(s,"DIV",{class:!0});var A=o(L);b(fd.$$.fragment,A),cP=m(A),O1=r(A,"P",{});var cZ=o(O1);dP=i(cZ,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),cZ.forEach(a),mP=m(A),Ba=r(A,"DIV",{class:!0});var k_=o(Ba);b(ud.$$.fragment,k_),hP=m(k_),S1=r(k_,"P",{});var dZ=o(S1);fP=i(dZ,"The Apache Arrow tables backing each split."),dZ.forEach(a),uP=m(k_),b(Ro.$$.fragment,k_),k_.forEach(a),gP=m(A),Ha=r(A,"DIV",{class:!0});var E_=o(Ha);b(gd.$$.fragment,E_),_P=m(E_),C1=r(E_,"P",{});var mZ=o(C1);bP=i(mZ,"The cache files containing the Apache Arrow table backing each split."),mZ.forEach(a),$P=m(E_),b(Bo.$$.fragment,E_),E_.forEach(a),xP=m(A),Ga=r(A,"DIV",{class:!0});var I_=o(Ga);b(_d.$$.fragment,I_),vP=m(I_),z1=r(I_,"P",{});var hZ=o(z1);yP=i(hZ,"Number of columns in each split of the dataset."),hZ.forEach(a),jP=m(I_),b(Ho.$$.fragment,I_),I_.forEach(a),wP=m(A),Wa=r(A,"DIV",{class:!0});var q_=o(Wa);b(bd.$$.fragment,q_),DP=m(q_),$d=r(q_,"P",{});var s4=o($d);kP=i(s4,"Number of rows in each split of the dataset (same as "),Go=r(s4,"A",{href:!0});var n4=o(Go);EP=i(n4,"datasets.Dataset."),V1=r(n4,"STRONG",{});var fZ=o(V1);IP=i(fZ,"len"),fZ.forEach(a),qP=i(n4,"()"),n4.forEach(a),TP=i(s4,")."),s4.forEach(a),NP=m(q_),b(Wo.$$.fragment,q_),q_.forEach(a),PP=m(A),Ka=r(A,"DIV",{class:!0});var T_=o(Ka);b(xd.$$.fragment,T_),LP=m(T_),U1=r(T_,"P",{});var uZ=o(U1);AP=i(uZ,"Names of the columns in each split of the dataset."),uZ.forEach(a),FP=m(T_),b(Ko.$$.fragment,T_),T_.forEach(a),OP=m(A),Ya=r(A,"DIV",{class:!0});var N_=o(Ya);b(vd.$$.fragment,N_),SP=m(N_),M1=r(N_,"P",{});var gZ=o(M1);CP=i(gZ,"Shape of each split of the dataset (number of columns, number of rows)."),gZ.forEach(a),zP=m(N_),b(Yo.$$.fragment,N_),N_.forEach(a),VP=m(A),dt=r(A,"DIV",{class:!0});var Gi=o(dt);b(yd.$$.fragment,Gi),UP=m(Gi),R1=r(Gi,"P",{});var _Z=o(R1);MP=i(_Z,"Return a list of the unique elements in a column for each split."),_Z.forEach(a),RP=m(Gi),B1=r(Gi,"P",{});var bZ=o(B1);BP=i(bZ,"This is implemented in the low-level backend and as such, very fast."),bZ.forEach(a),HP=m(Gi),b(Jo.$$.fragment,Gi),Gi.forEach(a),GP=m(A),Ja=r(A,"DIV",{class:!0});var P_=o(Ja);b(jd.$$.fragment,P_),WP=m(P_),H1=r(P_,"P",{});var $Z=o(H1);KP=i($Z,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),$Z.forEach(a),YP=m(P_),b(Zo.$$.fragment,P_),P_.forEach(a),JP=m(A),Za=r(A,"DIV",{class:!0});var L_=o(Za);b(wd.$$.fragment,L_),ZP=m(L_),G1=r(L_,"P",{});var xZ=o(G1);XP=i(xZ,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),xZ.forEach(a),QP=m(L_),b(Xo.$$.fragment,L_),L_.forEach(a),eL=m(A),Xa=r(A,"DIV",{class:!0});var A_=o(Xa);b(Dd.$$.fragment,A_),tL=m(A_),W1=r(A_,"P",{});var vZ=o(W1);aL=i(vZ,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),vZ.forEach(a),sL=m(A_),b(Qo.$$.fragment,A_),A_.forEach(a),nL=m(A),mt=r(A,"DIV",{class:!0});var Wi=o(mt);b(kd.$$.fragment,Wi),rL=m(Wi),K1=r(Wi,"P",{});var yZ=o(K1);oL=i(yZ,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),yZ.forEach(a),lL=m(Wi),Y1=r(Wi,"P",{});var jZ=o(Y1);iL=i(jZ,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),jZ.forEach(a),pL=m(Wi),b(el.$$.fragment,Wi),Wi.forEach(a),cL=m(A),ke=r(A,"DIV",{class:!0});var Ss=o(ke);b(Ed.$$.fragment,Ss),dL=m(Ss),J1=r(Ss,"P",{});var wZ=o(J1);mL=i(wZ,"Create a new Dataset where the rows are shuffled."),wZ.forEach(a),hL=m(Ss),Z1=r(Ss,"P",{});var DZ=o(Z1);fL=i(DZ,"The transformation is applied to all the datasets of the dataset dictionary."),DZ.forEach(a),uL=m(Ss),X1=r(Ss,"P",{});var kZ=o(X1);gL=i(kZ,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),kZ.forEach(a),_L=m(Ss),b(tl.$$.fragment,Ss),Ss.forEach(a),bL=m(A),Ee=r(A,"DIV",{class:!0});var Cs=o(Ee);b(Id.$$.fragment,Cs),$L=m(Cs),qd=r(Cs,"P",{});var r4=o(qd);xL=i(r4,"Set "),Q1=r(r4,"CODE",{});var EZ=o(Q1);vL=i(EZ,"__getitem__"),EZ.forEach(a),yL=i(r4,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),r4.forEach(a),jL=m(Cs),Be=r(Cs,"P",{});var zs=o(Be);wL=i(zs,"It is possible to call "),ex=r(zs,"CODE",{});var IZ=o(ex);DL=i(IZ,"map"),IZ.forEach(a),kL=i(zs," after calling "),tx=r(zs,"CODE",{});var qZ=o(tx);EL=i(qZ,"set_format"),qZ.forEach(a),IL=i(zs,". Since "),ax=r(zs,"CODE",{});var TZ=o(ax);qL=i(TZ,"map"),TZ.forEach(a),TL=i(zs,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),sx=r(zs,"CODE",{});var NZ=o(sx);NL=i(NZ,"map"),NZ.forEach(a),PL=i(zs," on a dataset to add a new column, then this column will be formatted:"),zs.forEach(a),LL=m(Cs),nx=r(Cs,"P",{});var PZ=o(nx);AL=i(PZ,"new formatted columns = (all columns - previously unformatted columns)"),PZ.forEach(a),FL=m(Cs),b(al.$$.fragment,Cs),Cs.forEach(a),OL=m(A),ht=r(A,"DIV",{class:!0});var Ki=o(ht);b(Td.$$.fragment,Ki),SL=m(Ki),Nd=r(Ki,"P",{});var o4=o(Nd);CL=i(o4,"Reset "),rx=r(o4,"CODE",{});var LZ=o(rx);zL=i(LZ,"__getitem__"),LZ.forEach(a),VL=i(o4,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),o4.forEach(a),UL=m(Ki),Ou=r(Ki,"P",{});var sK=o(Ou);ML=i(sK,"Same as "),ox=r(sK,"CODE",{});var AZ=o(ox);RL=i(AZ,"self.set_format()"),AZ.forEach(a),sK.forEach(a),BL=m(Ki),b(sl.$$.fragment,Ki),Ki.forEach(a),HL=m(A),nl=r(A,"DIV",{class:!0});var l4=o(nl);b(Pd.$$.fragment,l4),GL=m(l4),_n=r(l4,"P",{});var F_=o(_n);WL=i(F_,"To be used in a "),lx=r(F_,"EM",{});var FZ=o(lx);KL=i(FZ,"with"),FZ.forEach(a),YL=i(F_," statement. Set "),ix=r(F_,"CODE",{});var OZ=o(ix);JL=i(OZ,"__getitem__"),OZ.forEach(a),ZL=i(F_,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),F_.forEach(a),l4.forEach(a),XL=m(A),Ie=r(A,"DIV",{class:!0});var Vs=o(Ie);b(Ld.$$.fragment,Vs),QL=m(Vs),Rt=r(Vs,"P",{});var Yi=o(Rt);eA=i(Yi,"Set "),px=r(Yi,"CODE",{});var SZ=o(px);tA=i(SZ,"__getitem__"),SZ.forEach(a),aA=i(Yi,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),cx=r(Yi,"CODE",{});var CZ=o(cx);sA=i(CZ,"type"),CZ.forEach(a),nA=i(Yi," (for example \u201Cnumpy\u201D) is used to format batches when using "),dx=r(Yi,"CODE",{});var zZ=o(dx);rA=i(zZ,"__getitem__"),zZ.forEach(a),oA=i(Yi,`.
The format is set for every dataset in the dataset dictionary`),Yi.forEach(a),lA=m(Vs),Ad=r(Vs,"P",{});var i4=o(Ad);iA=i(i4,"It\u2019s also possible to use custom transforms for formatting using "),Su=r(i4,"A",{href:!0});var VZ=o(Su);pA=i(VZ,"datasets.Dataset.with_transform()"),VZ.forEach(a),cA=i(i4,"."),i4.forEach(a),dA=m(Vs),bn=r(Vs,"P",{});var O_=o(bn);mA=i(O_,"Contrary to "),Cu=r(O_,"A",{href:!0});var UZ=o(Cu);hA=i(UZ,"datasets.DatasetDict.set_format()"),UZ.forEach(a),fA=i(O_,", "),mx=r(O_,"CODE",{});var MZ=o(mx);uA=i(MZ,"with_format"),MZ.forEach(a),gA=i(O_," returns a new DatasetDict object with new Dataset objects."),O_.forEach(a),_A=m(Vs),b(rl.$$.fragment,Vs),Vs.forEach(a),bA=m(A),qe=r(A,"DIV",{class:!0});var Us=o(qe);b(Fd.$$.fragment,Us),$A=m(Us),$n=r(Us,"P",{});var S_=o($n);xA=i(S_,"Set "),hx=r(S_,"CODE",{});var RZ=o(hx);vA=i(RZ,"__getitem__"),RZ.forEach(a),yA=i(S_," return format using this transform. The transform is applied on-the-fly on batches when "),fx=r(S_,"CODE",{});var BZ=o(fx);jA=i(BZ,"__getitem__"),BZ.forEach(a),wA=i(S_,` is called.
The transform is set for every dataset in the dataset dictionary`),S_.forEach(a),DA=m(Us),xn=r(Us,"P",{});var C_=o(xn);kA=i(C_,"As "),zu=r(C_,"A",{href:!0});var HZ=o(zu);EA=i(HZ,"datasets.Dataset.set_format()"),HZ.forEach(a),IA=i(C_,", this can be reset using "),Vu=r(C_,"A",{href:!0});var GZ=o(Vu);qA=i(GZ,"datasets.Dataset.reset_format()"),GZ.forEach(a),TA=i(C_,"."),C_.forEach(a),NA=m(Us),vn=r(Us,"P",{});var z_=o(vn);PA=i(z_,"Contrary to "),ux=r(z_,"CODE",{});var WZ=o(ux);LA=i(WZ,"datasets.DatasetDict.set_transform()"),WZ.forEach(a),AA=i(z_,", "),gx=r(z_,"CODE",{});var KZ=o(gx);FA=i(KZ,"with_transform"),KZ.forEach(a),OA=i(z_," returns a new DatasetDict object with new Dataset objects."),z_.forEach(a),SA=m(Us),b(ol.$$.fragment,Us),Us.forEach(a),CA=m(A),Qa=r(A,"DIV",{class:!0});var V_=o(Qa);b(Od.$$.fragment,V_),zA=m(V_),_x=r(V_,"P",{});var YZ=o(_x);VA=i(YZ,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),YZ.forEach(a),UA=m(V_),b(ll.$$.fragment,V_),V_.forEach(a),MA=m(A),ft=r(A,"DIV",{class:!0});var Ji=o(ft);b(Sd.$$.fragment,Ji),RA=m(Ji),bx=r(Ji,"P",{});var JZ=o(bx);BA=i(JZ,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),JZ.forEach(a),HA=m(Ji),Bt=r(Ji,"P",{});var Zi=o(Bt);GA=i(Zi,"You can also remove a column using "),Uu=r(Zi,"A",{href:!0});var ZZ=o(Uu);WA=i(ZZ,"Dataset.map()"),ZZ.forEach(a),KA=i(Zi," with "),$x=r(Zi,"EM",{});var XZ=o($x);YA=i(XZ,"feature"),XZ.forEach(a),JA=i(Zi," but "),xx=r(Zi,"CODE",{});var QZ=o(xx);ZA=i(QZ,"cast_"),QZ.forEach(a),XA=i(Zi,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Zi.forEach(a),QA=m(Ji),b(il.$$.fragment,Ji),Ji.forEach(a),eF=m(A),es=r(A,"DIV",{class:!0});var U_=o(es);b(Cd.$$.fragment,U_),tF=m(U_),vx=r(U_,"P",{});var eX=o(vx);aF=i(eX,"Cast column to feature for decoding."),eX.forEach(a),sF=m(U_),b(pl.$$.fragment,U_),U_.forEach(a),nF=m(A),Te=r(A,"DIV",{class:!0});var Ms=o(Te);b(zd.$$.fragment,Ms),rF=m(Ms),yx=r(Ms,"P",{});var tX=o(yx);oF=i(tX,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),tX.forEach(a),lF=m(Ms),jx=r(Ms,"P",{});var aX=o(jx);iF=i(aX,"The transformation is applied to all the splits of the dataset dictionary."),aX.forEach(a),pF=m(Ms),yn=r(Ms,"P",{});var M_=o(yn);cF=i(M_,"You can also remove a column using "),Mu=r(M_,"A",{href:!0});var sX=o(Mu);dF=i(sX,"Dataset.map()"),sX.forEach(a),mF=i(M_," with "),wx=r(M_,"EM",{});var nX=o(wx);hF=i(nX,"remove_columns"),nX.forEach(a),fF=i(M_,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),M_.forEach(a),uF=m(Ms),b(cl.$$.fragment,Ms),Ms.forEach(a),gF=m(A),Ne=r(A,"DIV",{class:!0});var Rs=o(Ne);b(Vd.$$.fragment,Rs),_F=m(Rs),Dx=r(Rs,"P",{});var rX=o(Dx);bF=i(rX,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),rX.forEach(a),$F=m(Rs),jn=r(Rs,"P",{});var R_=o(jn);xF=i(R_,"You can also rename a column using "),Ru=r(R_,"A",{href:!0});var oX=o(Ru);vF=i(oX,"Dataset.map()"),oX.forEach(a),yF=i(R_," with "),kx=r(R_,"EM",{});var lX=o(kx);jF=i(lX,"remove_columns"),lX.forEach(a),wF=i(R_," but the present method:"),R_.forEach(a),DF=m(Rs),Ud=r(Rs,"UL",{});var p4=o(Ud);Ex=r(p4,"LI",{});var iX=o(Ex);kF=i(iX,"takes care of moving the original features under the new column name."),iX.forEach(a),EF=m(p4),Ix=r(p4,"LI",{});var pX=o(Ix);IF=i(pX,"doesn\u2019t copy the data to a new dataset and is thus much faster."),pX.forEach(a),p4.forEach(a),qF=m(Rs),b(dl.$$.fragment,Rs),Rs.forEach(a),TF=m(A),ts=r(A,"DIV",{class:!0});var B_=o(ts);b(Md.$$.fragment,B_),NF=m(B_),qx=r(B_,"P",{});var cX=o(qx);PF=i(cX,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),cX.forEach(a),LF=m(B_),b(ml.$$.fragment,B_),B_.forEach(a),AF=m(A),as=r(A,"DIV",{class:!0});var H_=o(as);b(Rd.$$.fragment,H_),FF=m(H_),Bd=r(H_,"P",{});var c4=o(Bd);OF=i(c4,"Casts the given column as :obj:"),Tx=r(c4,"CODE",{});var dX=o(Tx);SF=i(dX,"datasets.features.ClassLabel"),dX.forEach(a),CF=i(c4," and updates the tables."),c4.forEach(a),zF=m(H_),b(hl.$$.fragment,H_),H_.forEach(a),VF=m(A),Pe=r(A,"DIV",{class:!0});var Bs=o(Pe);b(Hd.$$.fragment,Bs),UF=m(Bs),wn=r(Bs,"P",{});var G_=o(wn);MF=i(G_,"Pushes the "),Nx=r(G_,"CODE",{});var mX=o(Nx);RF=i(mX,"DatasetDict"),mX.forEach(a),BF=i(G_,` to the hub as a Parquet dataset.
The `),Px=r(G_,"CODE",{});var hX=o(Px);HF=i(hX,"DatasetDict"),hX.forEach(a),GF=i(G_," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),G_.forEach(a),WF=m(Bs),Lx=r(Bs,"P",{});var fX=o(Lx);KF=i(fX,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),fX.forEach(a),YF=m(Bs),Ht=r(Bs,"P",{});var Xi=o(Ht);JF=i(Xi,"The resulting Parquet files are self-contained by default: if your dataset contains "),Bu=r(Xi,"A",{href:!0});var uX=o(Bu);ZF=i(uX,"Image"),uX.forEach(a),XF=i(Xi," or "),Hu=r(Xi,"A",{href:!0});var gX=o(Hu);QF=i(gX,"Audio"),gX.forEach(a),eO=i(Xi,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),Ax=r(Xi,"EM",{});var _X=o(Ax);tO=i(_X,"embed_external_files"),_X.forEach(a),aO=i(Xi," to False."),Xi.forEach(a),sO=m(Bs),b(fl.$$.fragment,Bs),Bs.forEach(a),nO=m(A),oe=r(A,"DIV",{class:!0});var yt=o(oe);b(Gd.$$.fragment,yt),rO=m(yt),Dn=r(yt,"P",{});var W_=o(Dn);oO=i(W_,"Saves a dataset dict to a filesystem using either "),Gu=r(W_,"A",{href:!0});var bX=o(Gu);lO=i(bX,"S3FileSystem"),bX.forEach(a),iO=i(W_,` or
`),Fx=r(W_,"CODE",{});var $X=o(Fx);pO=i($X,"fsspec.spec.AbstractFileSystem"),$X.forEach(a),cO=i(W_,"."),W_.forEach(a),dO=m(yt),kn=r(yt,"P",{});var K_=o(kn);mO=i(K_,"For "),Wu=r(K_,"A",{href:!0});var xX=o(Wu);hO=i(xX,"Image"),xX.forEach(a),fO=i(K_," and "),Ku=r(K_,"A",{href:!0});var vX=o(Ku);uO=i(vX,"Audio"),vX.forEach(a),gO=i(K_," data:"),K_.forEach(a),_O=m(yt),Wd=r(yt,"P",{});var d4=o(Wd);bO=i(d4,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),Ox=r(d4,"EM",{});var yX=o(Ox);$O=i(yX,"read()"),yX.forEach(a),xO=i(d4," those files first."),d4.forEach(a),vO=m(yt),b(ul.$$.fragment,yt),yO=m(yt),b(gl.$$.fragment,yt),yt.forEach(a),jO=m(A),ss=r(A,"DIV",{class:!0});var Y_=o(ss);b(Kd.$$.fragment,Y_),wO=m(Y_),Gt=r(Y_,"P",{});var Qi=o(Gt);DO=i(Qi,"Load a dataset that was previously saved using "),Sx=r(Qi,"CODE",{});var jX=o(Sx);kO=i(jX,"save_to_disk"),jX.forEach(a),EO=i(Qi,` from a filesystem using either
`),Yu=r(Qi,"A",{href:!0});var wX=o(Yu);IO=i(wX,"S3FileSystem"),wX.forEach(a),qO=i(Qi," or "),Cx=r(Qi,"CODE",{});var DX=o(Cx);TO=i(DX,"fsspec.spec.AbstractFileSystem"),DX.forEach(a),NO=i(Qi,"."),Qi.forEach(a),PO=m(Y_),b(_l.$$.fragment,Y_),Y_.forEach(a),LO=m(A),ns=r(A,"DIV",{class:!0});var J_=o(ns);b(Yd.$$.fragment,J_),AO=m(J_),zx=r(J_,"P",{});var kX=o(zx);FO=i(kX,"Create DatasetDict from CSV file(s)."),kX.forEach(a),OO=m(J_),b(bl.$$.fragment,J_),J_.forEach(a),SO=m(A),rs=r(A,"DIV",{class:!0});var Z_=o(rs);b(Jd.$$.fragment,Z_),CO=m(Z_),Vx=r(Z_,"P",{});var EX=o(Vx);zO=i(EX,"Create DatasetDict from JSON Lines file(s)."),EX.forEach(a),VO=m(Z_),b($l.$$.fragment,Z_),Z_.forEach(a),UO=m(A),os=r(A,"DIV",{class:!0});var X_=o(os);b(Zd.$$.fragment,X_),MO=m(X_),Ux=r(X_,"P",{});var IX=o(Ux);RO=i(IX,"Create DatasetDict from Parquet file(s)."),IX.forEach(a),BO=m(X_),b(xl.$$.fragment,X_),X_.forEach(a),HO=m(A),ls=r(A,"DIV",{class:!0});var Q_=o(ls);b(Xd.$$.fragment,Q_),GO=m(Q_),Mx=r(Q_,"P",{});var qX=o(Mx);WO=i(qX,"Create DatasetDict from text file(s)."),qX.forEach(a),KO=m(Q_),b(vl.$$.fragment,Q_),Q_.forEach(a),YO=m(A),is=r(A,"DIV",{class:!0});var eb=o(is);b(Qd.$$.fragment,eb),JO=m(eb),En=r(eb,"P",{});var tb=o(En);ZO=i(tb,"Prepare a dataset for the given task by casting the dataset\u2019s "),Ju=r(tb,"A",{href:!0});var TX=o(Ju);XO=i(TX,"Features"),TX.forEach(a),QO=i(tb," to standardized column names and types as detailed in "),Zu=r(tb,"A",{href:!0});var NX=o(Zu);eS=i(NX,"datasets.tasks"),NX.forEach(a),tS=i(tb,"."),tb.forEach(a),aS=m(eb),In=r(eb,"P",{});var ab=o(In);sS=i(ab,"Casts "),Rx=r(ab,"CODE",{});var PX=o(Rx);nS=i(PX,"datasets.DatasetInfo.features"),PX.forEach(a),rS=i(ab," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Bx=r(ab,"CODE",{});var LX=o(Bx);oS=i(LX,"datasets.DatasetInfo.task_templates"),LX.forEach(a),lS=i(ab," after casting."),ab.forEach(a),eb.forEach(a),A.forEach(a),Q7=m(s),Xu=r(s,"A",{id:!0}),o(Xu).forEach(a),ew=m(s),qn=r(s,"H2",{class:!0});var m4=o(qn);yl=r(m4,"A",{id:!0,class:!0,href:!0});var AX=o(yl);Hx=r(AX,"SPAN",{});var FX=o(Hx);b(em.$$.fragment,FX),FX.forEach(a),AX.forEach(a),iS=m(m4),Gx=r(m4,"SPAN",{});var OX=o(Gx);pS=i(OX,"IterableDataset"),OX.forEach(a),m4.forEach(a),tw=m(s),jl=r(s,"P",{});var h4=o(jl);cS=i(h4,"The base class "),Qu=r(h4,"A",{href:!0});var SX=o(Qu);dS=i(SX,"IterableDataset"),SX.forEach(a),mS=i(h4," implements an iterable Dataset backed by python generators."),h4.forEach(a),aw=m(s),F=r(s,"DIV",{class:!0});var O=o(F);b(tm.$$.fragment,O),hS=m(O),Wx=r(O,"P",{});var CX=o(Wx);fS=i(CX,"A Dataset backed by an iterable."),CX.forEach(a),uS=m(O),ps=r(O,"DIV",{class:!0});var sb=o(ps);b(am.$$.fragment,sb),gS=m(sb),Kx=r(sb,"P",{});var zX=o(Kx);_S=i(zX,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),zX.forEach(a),bS=m(sb),b(wl.$$.fragment,sb),sb.forEach(a),$S=m(O),cs=r(O,"DIV",{class:!0});var nb=o(cs);b(sm.$$.fragment,nb),xS=m(nb),Yx=r(nb,"P",{});var VX=o(Yx);vS=i(VX,"Cast column to feature for decoding."),VX.forEach(a),yS=m(nb),b(Dl.$$.fragment,nb),nb.forEach(a),jS=m(O),ds=r(O,"DIV",{class:!0});var rb=o(ds);b(nm.$$.fragment,rb),wS=m(rb),Jx=r(rb,"P",{});var UX=o(Jx);DS=i(UX,"Cast the dataset to a new set of features."),UX.forEach(a),kS=m(rb),b(kl.$$.fragment,rb),rb.forEach(a),ES=m(O),eg=r(O,"DIV",{class:!0});var MX=o(eg);b(rm.$$.fragment,MX),MX.forEach(a),IS=m(O),Le=r(O,"DIV",{class:!0});var Hs=o(Le);b(om.$$.fragment,Hs),qS=m(Hs),Zx=r(Hs,"P",{});var RX=o(Zx);TS=i(RX,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),RX.forEach(a),NS=m(Hs),lm=r(Hs,"P",{});var f4=o(lm);PS=i(f4,"You can specify whether the function should be batched or not with the "),Xx=r(f4,"CODE",{});var BX=o(Xx);LS=i(BX,"batched"),BX.forEach(a),AS=i(f4," parameter:"),f4.forEach(a),FS=m(Hs),Tn=r(Hs,"UL",{});var ob=o(Tn);Qx=r(ob,"LI",{});var HX=o(Qx);OS=i(HX,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),HX.forEach(a),SS=m(ob),ev=r(ob,"LI",{});var GX=o(ev);CS=i(GX,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),GX.forEach(a),zS=m(ob),ge=r(ob,"LI",{});var jt=o(ge);VS=i(jt,"If batched is True and batch_size is "),tv=r(jt,"CODE",{});var WX=o(tv);US=i(WX,"n"),WX.forEach(a),MS=i(jt," > 1, then the function takes a batch of "),av=r(jt,"CODE",{});var KX=o(av);RS=i(KX,"n"),KX.forEach(a),BS=i(jt," examples as input and can return a batch with "),sv=r(jt,"CODE",{});var YX=o(sv);HS=i(YX,"n"),YX.forEach(a),GS=i(jt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),nv=r(jt,"CODE",{});var JX=o(nv);WS=i(JX,"n"),JX.forEach(a),KS=i(jt,` examples.
A batch is a dictionary, e.g. a batch of `),rv=r(jt,"CODE",{});var ZX=o(rv);YS=i(ZX,"n"),ZX.forEach(a),JS=i(jt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),jt.forEach(a),ob.forEach(a),ZS=m(Hs),b(El.$$.fragment,Hs),Hs.forEach(a),XS=m(O),ms=r(O,"DIV",{class:!0});var lb=o(ms);b(im.$$.fragment,lb),QS=m(lb),ov=r(lb,"P",{});var XX=o(ov);eC=i(XX,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),XX.forEach(a),tC=m(lb),b(Il.$$.fragment,lb),lb.forEach(a),aC=m(O),hs=r(O,"DIV",{class:!0});var ib=o(hs);b(pm.$$.fragment,ib),sC=m(ib),lv=r(ib,"P",{});var QX=o(lv);nC=i(QX,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),QX.forEach(a),rC=m(ib),b(ql.$$.fragment,ib),ib.forEach(a),oC=m(O),le=r(O,"DIV",{class:!0});var wt=o(le);b(cm.$$.fragment,wt),lC=m(wt),iv=r(wt,"P",{});var eQ=o(iv);iC=i(eQ,"Randomly shuffles the elements of this dataset."),eQ.forEach(a),pC=m(wt),pv=r(wt,"P",{});var tQ=o(pv);cC=i(tQ,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),tQ.forEach(a),dC=m(wt),dm=r(wt,"P",{});var u4=o(dm);mC=i(u4,"For instance, if your dataset contains 10,000 elements but "),cv=r(u4,"CODE",{});var aQ=o(cv);hC=i(aQ,"buffer_size"),aQ.forEach(a),fC=i(u4,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),u4.forEach(a),uC=m(wt),Nn=r(wt,"P",{});var pb=o(Nn);gC=i(pb,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),tg=r(pb,"A",{href:!0});var sQ=o(tg);_C=i(sQ,"datasets.IterableDataset.skip()"),sQ.forEach(a),bC=i(pb," or "),ag=r(pb,"A",{href:!0});var nQ=o(ag);$C=i(nQ,"datasets.IterableDataset.take()"),nQ.forEach(a),xC=i(pb,`
then the order of the shards is kept unchanged.`),pb.forEach(a),vC=m(wt),b(Tl.$$.fragment,wt),wt.forEach(a),yC=m(O),ut=r(O,"DIV",{class:!0});var ep=o(ut);b(mm.$$.fragment,ep),jC=m(ep),hm=r(ep,"P",{});var g4=o(hm);wC=i(g4,"Create a new IterableDataset that skips the first "),dv=r(g4,"CODE",{});var rQ=o(dv);DC=i(rQ,"n"),rQ.forEach(a),kC=i(g4," elements."),g4.forEach(a),EC=m(ep),mv=r(ep,"P",{});var oQ=o(mv);IC=i(oQ,"Example:"),oQ.forEach(a),qC=m(ep),hv=r(ep,"BLOCKQUOTE",{});var lQ=o(hv);fv=r(lQ,"BLOCKQUOTE",{});var iQ=o(fv);fm=r(iQ,"BLOCKQUOTE",{});var _4=o(fm);uv=r(_4,"P",{});var pQ=o(uv);TC=i(pQ,`from datasets import load_dataset
ds = load_dataset(\u201Crotten_tomatoes\u201D, split=\u201Ctrain\u201D, streaming=True)
list(ds.take(3))
[{\u2018label\u2019: 1,
\u2018text\u2019: \u2018the rock is destined to be the 21st century\u2019s new \u201D conan \u201D and that he\u2019s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .\u2019},
{\u2018label\u2019: 1,
\u2018text\u2019: \u2018the gorgeously elaborate continuation of \u201D the lord of the rings \u201D trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson\u2019s expanded vision of j . r . r . tolkien\u2019s middle-earth .\u2019},
{\u2018label\u2019: 1, \u2018text\u2019: \u2018effective but too-tepid biopic\u2019}]
ds = ds.skip(1)
list(ds.take(3))
[{\u2018label\u2019: 1,
\u2018text\u2019: \u2018the gorgeously elaborate continuation of \u201D the lord of the rings \u201D trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson\u2019s expanded vision of j . r . r . tolkien\u2019s middle-earth .\u2019},
{\u2018label\u2019: 1, \u2018text\u2019: \u2018effective but too-tepid biopic\u2019},
{\u2018label\u2019: 1,
\u2018text\u2019: \u2018if you sometimes like to go to the movies to have fun , wasabi is a good place to start .\u2018}]`),pQ.forEach(a),NC=m(_4),b(um.$$.fragment,_4),_4.forEach(a),iQ.forEach(a),lQ.forEach(a),ep.forEach(a),PC=m(O),fs=r(O,"DIV",{class:!0});var cb=o(fs);b(gm.$$.fragment,cb),LC=m(cb),_m=r(cb,"P",{});var b4=o(_m);AC=i(b4,"Create a new IterableDataset with only the first "),gv=r(b4,"CODE",{});var cQ=o(gv);FC=i(cQ,"n"),cQ.forEach(a),OC=i(b4," elements."),b4.forEach(a),SC=m(cb),b(Nl.$$.fragment,cb),cb.forEach(a),CC=m(O),Pl=r(O,"DIV",{class:!0});var $4=o(Pl);b(bm.$$.fragment,$4),zC=m($4),sg=r($4,"P",{});var nK=o(sg);ng=r(nK,"A",{href:!0});var dQ=o(ng);VC=i(dQ,"datasets.DatasetInfo"),dQ.forEach(a),UC=i(nK," object containing all the metadata in the dataset."),nK.forEach(a),$4.forEach(a),MC=m(O),Ll=r(O,"DIV",{class:!0});var x4=o(Ll);b($m.$$.fragment,x4),RC=m(x4),rg=r(x4,"P",{});var rK=o(rg);og=r(rK,"A",{href:!0});var mQ=o(og);BC=i(mQ,"datasets.NamedSplit"),mQ.forEach(a),HC=i(rK," object corresponding to a named dataset split."),rK.forEach(a),x4.forEach(a),GC=m(O),lg=r(O,"DIV",{class:!0});var hQ=o(lg);b(xm.$$.fragment,hQ),hQ.forEach(a),WC=m(O),ig=r(O,"DIV",{class:!0});var fQ=o(ig);b(vm.$$.fragment,fQ),fQ.forEach(a),KC=m(O),pg=r(O,"DIV",{class:!0});var uQ=o(pg);b(ym.$$.fragment,uQ),uQ.forEach(a),YC=m(O),cg=r(O,"DIV",{class:!0});var gQ=o(cg);b(jm.$$.fragment,gQ),gQ.forEach(a),JC=m(O),dg=r(O,"DIV",{class:!0});var _Q=o(dg);b(wm.$$.fragment,_Q),_Q.forEach(a),ZC=m(O),mg=r(O,"DIV",{class:!0});var bQ=o(mg);b(Dm.$$.fragment,bQ),bQ.forEach(a),XC=m(O),hg=r(O,"DIV",{class:!0});var $Q=o(hg);b(km.$$.fragment,$Q),$Q.forEach(a),QC=m(O),fg=r(O,"DIV",{class:!0});var xQ=o(fg);b(Em.$$.fragment,xQ),xQ.forEach(a),ez=m(O),ug=r(O,"DIV",{class:!0});var vQ=o(ug);b(Im.$$.fragment,vQ),vQ.forEach(a),tz=m(O),gg=r(O,"DIV",{class:!0});var yQ=o(gg);b(qm.$$.fragment,yQ),yQ.forEach(a),az=m(O),_g=r(O,"DIV",{class:!0});var jQ=o(_g);b(Tm.$$.fragment,jQ),jQ.forEach(a),sz=m(O),bg=r(O,"DIV",{class:!0});var wQ=o(bg);b(Nm.$$.fragment,wQ),wQ.forEach(a),nz=m(O),$g=r(O,"DIV",{class:!0});var DQ=o($g);b(Pm.$$.fragment,DQ),DQ.forEach(a),O.forEach(a),sw=m(s),Pn=r(s,"H2",{class:!0});var v4=o(Pn);Al=r(v4,"A",{id:!0,class:!0,href:!0});var kQ=o(Al);_v=r(kQ,"SPAN",{});var EQ=o(_v);b(Lm.$$.fragment,EQ),EQ.forEach(a),kQ.forEach(a),rz=m(v4),bv=r(v4,"SPAN",{});var IQ=o(bv);oz=i(IQ,"IterableDatasetDict[[datasets.IterableDatasetDict]]"),IQ.forEach(a),v4.forEach(a),nw=m(s),Fl=r(s,"P",{});var y4=o(Fl);lz=i(y4,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),$v=r(y4,"CODE",{});var qQ=o($v);iz=i(qQ,"IterableDataset"),qQ.forEach(a),pz=i(y4," objects as values."),y4.forEach(a),rw=m(s),U=r(s,"DIV",{class:!0});var B=o(U);b(Am.$$.fragment,B),cz=m(B),Ae=r(B,"DIV",{class:!0});var Gs=o(Ae);b(Fm.$$.fragment,Gs),dz=m(Gs),xv=r(Gs,"P",{});var TQ=o(xv);mz=i(TQ,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),TQ.forEach(a),hz=m(Gs),Om=r(Gs,"P",{});var j4=o(Om);fz=i(j4,"You can specify whether the function should be batched or not with the "),vv=r(j4,"CODE",{});var NQ=o(vv);uz=i(NQ,"batched"),NQ.forEach(a),gz=i(j4," parameter:"),j4.forEach(a),_z=m(Gs),Ln=r(Gs,"UL",{});var db=o(Ln);yv=r(db,"LI",{});var PQ=o(yv);bz=i(PQ,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),PQ.forEach(a),$z=m(db),jv=r(db,"LI",{});var LQ=o(jv);xz=i(LQ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),LQ.forEach(a),vz=m(db),_e=r(db,"LI",{});var Dt=o(_e);yz=i(Dt,"If batched is True and batch_size is "),wv=r(Dt,"CODE",{});var AQ=o(wv);jz=i(AQ,"n"),AQ.forEach(a),wz=i(Dt," > 1, then the function takes a batch of "),Dv=r(Dt,"CODE",{});var FQ=o(Dv);Dz=i(FQ,"n"),FQ.forEach(a),kz=i(Dt," examples as input and can return a batch with "),kv=r(Dt,"CODE",{});var OQ=o(kv);Ez=i(OQ,"n"),OQ.forEach(a),Iz=i(Dt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Ev=r(Dt,"CODE",{});var SQ=o(Ev);qz=i(SQ,"n"),SQ.forEach(a),Tz=i(Dt,` examples.
A batch is a dictionary, e.g. a batch of `),Iv=r(Dt,"CODE",{});var CQ=o(Iv);Nz=i(CQ,"n"),CQ.forEach(a),Pz=i(Dt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Dt.forEach(a),db.forEach(a),Lz=m(Gs),b(Ol.$$.fragment,Gs),Gs.forEach(a),Az=m(B),us=r(B,"DIV",{class:!0});var mb=o(us);b(Sm.$$.fragment,mb),Fz=m(mb),qv=r(mb,"P",{});var zQ=o(qv);Oz=i(zQ,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),zQ.forEach(a),Sz=m(mb),b(Sl.$$.fragment,mb),mb.forEach(a),Cz=m(B),ie=r(B,"DIV",{class:!0});var kt=o(ie);b(Cm.$$.fragment,kt),zz=m(kt),Tv=r(kt,"P",{});var VQ=o(Tv);Vz=i(VQ,`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),VQ.forEach(a),Uz=m(kt),Nv=r(kt,"P",{});var UQ=o(Nv);Mz=i(UQ,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),UQ.forEach(a),Rz=m(kt),zm=r(kt,"P",{});var w4=o(zm);Bz=i(w4,"For instance, if your dataset contains 10,000 elements but "),Pv=r(w4,"CODE",{});var MQ=o(Pv);Hz=i(MQ,"buffer_size"),MQ.forEach(a),Gz=i(w4,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),w4.forEach(a),Wz=m(kt),An=r(kt,"P",{});var hb=o(An);Kz=i(hb,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),xg=r(hb,"A",{href:!0});var RQ=o(xg);Yz=i(RQ,"datasets.IterableDataset.skip()"),RQ.forEach(a),Jz=i(hb," or "),vg=r(hb,"A",{href:!0});var BQ=o(vg);Zz=i(BQ,"datasets.IterableDataset.take()"),BQ.forEach(a),Xz=i(hb,`
then the order of the shards is kept unchanged.`),hb.forEach(a),Qz=m(kt),b(Cl.$$.fragment,kt),kt.forEach(a),eV=m(B),gs=r(B,"DIV",{class:!0});var fb=o(gs);b(Vm.$$.fragment,fb),tV=m(fb),Lv=r(fb,"P",{});var HQ=o(Lv);aV=i(HQ,`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),HQ.forEach(a),sV=m(fb),b(zl.$$.fragment,fb),fb.forEach(a),nV=m(B),_s=r(B,"DIV",{class:!0});var ub=o(_s);b(Um.$$.fragment,ub),rV=m(ub),Av=r(ub,"P",{});var GQ=o(Av);oV=i(GQ,`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),GQ.forEach(a),lV=m(ub),b(Vl.$$.fragment,ub),ub.forEach(a),iV=m(B),bs=r(B,"DIV",{class:!0});var gb=o(bs);b(Mm.$$.fragment,gb),pV=m(gb),Fv=r(gb,"P",{});var WQ=o(Fv);cV=i(WQ,`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),WQ.forEach(a),dV=m(gb),b(Ul.$$.fragment,gb),gb.forEach(a),mV=m(B),gt=r(B,"DIV",{class:!0});var tp=o(gt);b(Rm.$$.fragment,tp),hV=m(tp),Ov=r(tp,"P",{});var KQ=o(Ov);fV=i(KQ,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),KQ.forEach(a),uV=m(tp),Sv=r(tp,"P",{});var YQ=o(Sv);gV=i(YQ,"Example:"),YQ.forEach(a),_V=m(tp),Cv=r(tp,"BLOCKQUOTE",{});var JQ=o(Cv);zv=r(JQ,"BLOCKQUOTE",{});var ZQ=o(zv);Bm=r(ZQ,"BLOCKQUOTE",{});var D4=o(Bm);Vv=r(D4,"P",{});var XQ=o(Vv);bV=i(XQ,`from datasets import load_dataset
ds = load_dataset(\u201Crotten_tomatoes\u201D, streaming=True)
ds = ds.remove_columns(\u201Clabel\u201D)
next(iter(ds[\u201Ctrain\u201D]))
{\u2018text\u2019: \u2018the rock is destined to be the 21st century\u2019s new \u201D conan \u201D and that he\u2019s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .\u2018}`),XQ.forEach(a),$V=m(D4),b(Hm.$$.fragment,D4),D4.forEach(a),ZQ.forEach(a),JQ.forEach(a),tp.forEach(a),xV=m(B),$s=r(B,"DIV",{class:!0});var _b=o($s);b(Gm.$$.fragment,_b),vV=m(_b),Uv=r(_b,"P",{});var QQ=o(Uv);yV=i(QQ,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),QQ.forEach(a),jV=m(_b),b(Ml.$$.fragment,_b),_b.forEach(a),wV=m(B),xs=r(B,"DIV",{class:!0});var bb=o(xs);b(Wm.$$.fragment,bb),DV=m(bb),Mv=r(bb,"P",{});var eee=o(Mv);kV=i(eee,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),eee.forEach(a),EV=m(bb),b(Rl.$$.fragment,bb),bb.forEach(a),B.forEach(a),ow=m(s),Fn=r(s,"H2",{class:!0});var k4=o(Fn);Bl=r(k4,"A",{id:!0,class:!0,href:!0});var tee=o(Bl);Rv=r(tee,"SPAN",{});var aee=o(Rv);b(Km.$$.fragment,aee),aee.forEach(a),tee.forEach(a),IV=m(k4),Bv=r(k4,"SPAN",{});var see=o(Bv);qV=i(see,"Features"),see.forEach(a),k4.forEach(a),lw=m(s),z=r(s,"DIV",{class:!0});var V=o(z);b(Ym.$$.fragment,V),TV=m(V),Hv=r(V,"P",{});var nee=o(Hv);NV=i(nee,"A special dictionary that defines the internal structure of a dataset."),nee.forEach(a),PV=m(V),Jm=r(V,"P",{});var E4=o(Jm);LV=i(E4,"Instantiated with a dictionary of type "),Gv=r(E4,"CODE",{});var ree=o(Gv);AV=i(ree,"dict[str, FieldType]"),ree.forEach(a),FV=i(E4,`, where keys are the desired column names,
and values are the type of that column.`),E4.forEach(a),OV=m(V),yg=r(V,"P",{});var oK=o(yg);Wv=r(oK,"CODE",{});var oee=o(Wv);SV=i(oee,"FieldType"),oee.forEach(a),CV=i(oK," can be one of the following:"),oK.forEach(a),zV=m(V),G=r(V,"UL",{});var ce=o(G);Kv=r(ce,"LI",{});var lee=o(Kv);vs=r(lee,"P",{});var Lf=o(vs);VV=i(Lf,"a "),jg=r(Lf,"A",{href:!0});var iee=o(jg);UV=i(iee,"datasets.Value"),iee.forEach(a),MV=i(Lf," feature specifies a single typed value, e.g. "),Yv=r(Lf,"CODE",{});var pee=o(Yv);RV=i(pee,"int64"),pee.forEach(a),BV=i(Lf," or "),Jv=r(Lf,"CODE",{});var cee=o(Jv);HV=i(cee,"string"),cee.forEach(a),Lf.forEach(a),lee.forEach(a),GV=m(ce),Zv=r(ce,"LI",{});var dee=o(Zv);Zm=r(dee,"P",{});var I4=o(Zm);WV=i(I4,"a "),wg=r(I4,"A",{href:!0});var mee=o(wg);KV=i(mee,"datasets.ClassLabel"),mee.forEach(a),YV=i(I4,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),I4.forEach(a),dee.forEach(a),JV=m(ce),Xv=r(ce,"LI",{});var hee=o(Xv);Xm=r(hee,"P",{});var q4=o(Xm);ZV=i(q4,"a python "),Qv=r(q4,"CODE",{});var fee=o(Qv);XV=i(fee,"dict"),fee.forEach(a),QV=i(q4,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),q4.forEach(a),hee.forEach(a),eU=m(ce),Qm=r(ce,"LI",{});var T4=o(Qm);He=r(T4,"P",{});var Ws=o(He);tU=i(Ws,"a python "),ey=r(Ws,"CODE",{});var uee=o(ey);aU=i(uee,"list"),uee.forEach(a),sU=i(Ws," or a "),Dg=r(Ws,"A",{href:!0});var gee=o(Dg);nU=i(gee,"datasets.Sequence"),gee.forEach(a),rU=i(Ws,` specifies that the field contains a list of objects. The python
`),ty=r(Ws,"CODE",{});var _ee=o(ty);oU=i(_ee,"list"),_ee.forEach(a),lU=i(Ws," or "),kg=r(Ws,"A",{href:!0});var bee=o(kg);iU=i(bee,"datasets.Sequence"),bee.forEach(a),pU=i(Ws,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),Ws.forEach(a),cU=m(T4),b(Hl.$$.fragment,T4),T4.forEach(a),dU=m(ce),ay=r(ce,"LI",{});var $ee=o(ay);Ge=r($ee,"P",{});var Ks=o(Ge);mU=i(Ks,"a "),Eg=r(Ks,"A",{href:!0});var xee=o(Eg);hU=i(xee,"Array2D"),xee.forEach(a),fU=i(Ks,", "),Ig=r(Ks,"A",{href:!0});var vee=o(Ig);uU=i(vee,"Array3D"),vee.forEach(a),gU=i(Ks,", "),qg=r(Ks,"A",{href:!0});var yee=o(qg);_U=i(yee,"Array4D"),yee.forEach(a),bU=i(Ks," or "),Tg=r(Ks,"A",{href:!0});var jee=o(Tg);$U=i(jee,"Array5D"),jee.forEach(a),xU=i(Ks," feature for multidimensional arrays"),Ks.forEach(a),$ee.forEach(a),vU=m(ce),sy=r(ce,"LI",{});var wee=o(sy);eh=r(wee,"P",{});var N4=o(eh);yU=i(N4,"an "),Ng=r(N4,"A",{href:!0});var Dee=o(Ng);jU=i(Dee,"Audio"),Dee.forEach(a),wU=i(N4,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),N4.forEach(a),wee.forEach(a),DU=m(ce),ny=r(ce,"LI",{});var kee=o(ny);Wt=r(kee,"P",{});var ap=o(Wt);kU=i(ap,"an "),Pg=r(ap,"A",{href:!0});var Eee=o(Pg);EU=i(Eee,"Image"),Eee.forEach(a),IU=i(ap," feature to store the absolute path to an image file, an "),ry=r(ap,"CODE",{});var Iee=o(ry);qU=i(Iee,"np.ndarray"),Iee.forEach(a),TU=i(ap," object, a "),oy=r(ap,"CODE",{});var qee=o(oy);NU=i(qee,"PIL.Image.Image"),qee.forEach(a),PU=i(ap,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),ap.forEach(a),kee.forEach(a),LU=m(ce),ly=r(ce,"LI",{});var Tee=o(ly);Gl=r(Tee,"P",{});var V7=o(Gl);Lg=r(V7,"A",{href:!0});var Nee=o(Lg);AU=i(Nee,"datasets.Translation"),Nee.forEach(a),FU=i(V7," and "),Ag=r(V7,"A",{href:!0});var Pee=o(Ag);OU=i(Pee,"datasets.TranslationVariableLanguages"),Pee.forEach(a),SU=i(V7,", the two features specific to Machine Translation"),V7.forEach(a),Tee.forEach(a),ce.forEach(a),CU=m(V),Wl=r(V,"DIV",{class:!0});var P4=o(Wl);b(th.$$.fragment,P4),zU=m(P4),iy=r(P4,"P",{});var Lee=o(iy);VU=i(Lee,"Make a deep copy of Features."),Lee.forEach(a),P4.forEach(a),UU=m(V),Kl=r(V,"DIV",{class:!0});var L4=o(Kl);b(ah.$$.fragment,L4),MU=m(L4),py=r(L4,"P",{});var Aee=o(py);RU=i(Aee,"Decode batch with custom feature decoding."),Aee.forEach(a),L4.forEach(a),BU=m(V),Yl=r(V,"DIV",{class:!0});var A4=o(Yl);b(sh.$$.fragment,A4),HU=m(A4),cy=r(A4,"P",{});var Fee=o(cy);GU=i(Fee,"Decode column with custom feature decoding."),Fee.forEach(a),A4.forEach(a),WU=m(V),Jl=r(V,"DIV",{class:!0});var F4=o(Jl);b(nh.$$.fragment,F4),KU=m(F4),dy=r(F4,"P",{});var Oee=o(dy);YU=i(Oee,"Decode example with custom feature decoding."),Oee.forEach(a),F4.forEach(a),JU=m(V),Zl=r(V,"DIV",{class:!0});var O4=o(Zl);b(rh.$$.fragment,O4),ZU=m(O4),my=r(O4,"P",{});var See=o(my);XU=i(See,"Encode batch into a format for Arrow."),See.forEach(a),O4.forEach(a),QU=m(V),Xl=r(V,"DIV",{class:!0});var S4=o(Xl);b(oh.$$.fragment,S4),eM=m(S4),hy=r(S4,"P",{});var Cee=o(hy);tM=i(Cee,"Encode example into a format for Arrow."),Cee.forEach(a),S4.forEach(a),aM=m(V),ys=r(V,"DIV",{class:!0});var $b=o(ys);b(lh.$$.fragment,$b),sM=m($b),fy=r($b,"P",{});var zee=o(fy);nM=i(zee,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),zee.forEach(a),rM=m($b),uy=r($b,"P",{});var Vee=o(uy);oM=i(Vee,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),Vee.forEach(a),$b.forEach(a),lM=m(V),Ql=r(V,"DIV",{class:!0});var C4=o(Ql);b(ih.$$.fragment,C4),iM=m(C4),gy=r(C4,"P",{});var Uee=o(gy);pM=i(Uee,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),Uee.forEach(a),C4.forEach(a),cM=m(V),Fe=r(V,"DIV",{class:!0});var Ys=o(Fe);b(ph.$$.fragment,Ys),dM=m(Ys),_y=r(Ys,"P",{});var Mee=o(_y);mM=i(Mee,"Construct Features from dict."),Mee.forEach(a),hM=m(Ys),by=r(Ys,"P",{});var Ree=o(by);fM=i(Ree,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),Ree.forEach(a),uM=m(Ys),Kt=r(Ys,"P",{});var sp=o(Kt);gM=i(sp,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),Fg=r(sp,"A",{href:!0});var Bee=o(Fg);_M=i(Bee,"DatasetInfo"),Bee.forEach(a),bM=i(sp,` that was dumped to a JSON object. This acts as an analogue to
`),Og=r(sp,"A",{href:!0});var Hee=o(Og);$M=i(Hee,"Features.from_arrow_schema()"),Hee.forEach(a),xM=i(sp,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),Sg=r(sp,"A",{href:!0});var Gee=o(Sg);vM=i(Gee,"Value"),Gee.forEach(a),yM=i(sp," automatically performs."),sp.forEach(a),jM=m(Ys),b(ei.$$.fragment,Ys),Ys.forEach(a),wM=m(V),_t=r(V,"DIV",{class:!0});var np=o(_t);b(ch.$$.fragment,np),DM=m(np),$y=r(np,"P",{});var Wee=o($y);kM=i(Wee,"Reorder Features fields to match the field order of other Features."),Wee.forEach(a),EM=m(np),xy=r(np,"P",{});var Kee=o(xy);IM=i(Kee,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),Kee.forEach(a),qM=m(np),b(ti.$$.fragment,np),np.forEach(a),V.forEach(a),iw=m(s),On=r(s,"DIV",{class:!0});var z4=o(On);b(dh.$$.fragment,z4),TM=m(z4),vy=r(z4,"P",{});var Yee=o(vy);NM=i(Yee,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),Yee.forEach(a),z4.forEach(a),pw=m(s),Q=r(s,"DIV",{class:!0});var Et=o(Q);b(mh.$$.fragment,Et),PM=m(Et),yy=r(Et,"P",{});var Jee=o(yy);LM=i(Jee,"Feature type for integer class labels."),Jee.forEach(a),AM=m(Et),hh=r(Et,"P",{});var V4=o(hh);FM=i(V4,"There are 3 ways to define a "),jy=r(V4,"EM",{});var Zee=o(jy);OM=i(Zee,"ClassLabel"),Zee.forEach(a),SM=i(V4,", which correspond to the 3 arguments:"),V4.forEach(a),CM=m(Et),Sn=r(Et,"UL",{});var xb=o(Sn);Cg=r(xb,"LI",{});var lK=o(Cg);wy=r(lK,"EM",{});var Xee=o(wy);zM=i(Xee,"num_classes"),Xee.forEach(a),VM=i(lK,": Create 0 to (num_classes-1) labels."),lK.forEach(a),UM=m(xb),zg=r(xb,"LI",{});var iK=o(zg);Dy=r(iK,"EM",{});var Qee=o(Dy);MM=i(Qee,"names"),Qee.forEach(a),RM=i(iK,": List of label strings."),iK.forEach(a),BM=m(xb),Vg=r(xb,"LI",{});var pK=o(Vg);ky=r(pK,"EM",{});var ete=o(ky);HM=i(ete,"names_file"),ete.forEach(a),GM=i(pK,": File containing the list of labels."),pK.forEach(a),xb.forEach(a),WM=m(Et),ai=r(Et,"DIV",{class:!0});var U4=o(ai);b(fh.$$.fragment,U4),KM=m(U4),Ey=r(U4,"P",{});var tte=o(Ey);YM=i(tte,"Conversion integer => class name string."),tte.forEach(a),U4.forEach(a),JM=m(Et),si=r(Et,"DIV",{class:!0});var M4=o(si);b(uh.$$.fragment,M4),ZM=m(M4),Iy=r(M4,"P",{});var ate=o(Iy);XM=i(ate,"Conversion class name string => integer."),ate.forEach(a),M4.forEach(a),Et.forEach(a),cw=m(s),Yt=r(s,"DIV",{class:!0});var vb=o(Yt);b(gh.$$.fragment,vb),QM=m(vb),qy=r(vb,"P",{});var ste=o(qy);eR=i(ste,"The Value dtypes are as follows:"),ste.forEach(a),tR=m(vb),Ty=r(vb,"P",{});var nte=o(Ty);aR=i(nte,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),nte.forEach(a),vb.forEach(a),dw=m(s),ee=r(s,"DIV",{class:!0});var It=o(ee);b(_h.$$.fragment,It),sR=m(It),Ug=r(It,"P",{});var cK=o(Ug);Ny=r(cK,"CODE",{});var rte=o(Ny);nR=i(rte,"FeatureConnector"),rte.forEach(a),rR=i(cK,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),cK.forEach(a),oR=m(It),Py=r(It,"P",{});var ote=o(Py);lR=i(ote,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),ote.forEach(a),iR=m(It),bh=r(It,"P",{});var R4=o(bh);pR=i(R4,"Output: A dictionary mapping string language codes to translations as "),Ly=r(R4,"CODE",{});var lte=o(Ly);cR=i(lte,"Text"),lte.forEach(a),dR=i(R4,`
features.`),R4.forEach(a),mR=m(It),b(ni.$$.fragment,It),hR=m(It),ri=r(It,"DIV",{class:!0});var B4=o(ri);b($h.$$.fragment,B4),fR=m(B4),Ay=r(B4,"P",{});var ite=o(Ay);uR=i(ite,"Flatten the Translation feature into a dictionary."),ite.forEach(a),B4.forEach(a),It.forEach(a),mw=m(s),te=r(s,"DIV",{class:!0});var qt=o(te);b(xh.$$.fragment,qt),gR=m(qt),Mg=r(qt,"P",{});var dK=o(Mg);Fy=r(dK,"CODE",{});var pte=o(Fy);_R=i(pte,"FeatureConnector"),pte.forEach(a),bR=i(dK,` for translations with variable languages per example.
Here for compatiblity with tfds.`),dK.forEach(a),$R=m(qt),Oy=r(qt,"P",{});var cte=o(Oy);xR=i(cte,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),cte.forEach(a),vR=m(qt),Sy=r(qt,"P",{});var dte=o(Sy);yR=i(dte,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),dte.forEach(a),jR=m(qt),b(oi.$$.fragment,qt),wR=m(qt),li=r(qt,"DIV",{class:!0});var H4=o(li);b(vh.$$.fragment,H4),DR=m(H4),Cy=r(H4,"P",{});var mte=o(Cy);kR=i(mte,"Flatten the TranslationVariableLanguages feature into a dictionary."),mte.forEach(a),H4.forEach(a),qt.forEach(a),hw=m(s),yh=r(s,"DIV",{class:!0});var hte=o(yh);b(jh.$$.fragment,hte),hte.forEach(a),fw=m(s),wh=r(s,"DIV",{class:!0});var fte=o(wh);b(Dh.$$.fragment,fte),fte.forEach(a),uw=m(s),kh=r(s,"DIV",{class:!0});var ute=o(kh);b(Eh.$$.fragment,ute),ute.forEach(a),gw=m(s),Ih=r(s,"DIV",{class:!0});var gte=o(Ih);b(qh.$$.fragment,gte),gte.forEach(a),_w=m(s),M=r(s,"DIV",{class:!0});var Y=o(M);b(Th.$$.fragment,Y),ER=m(Y),zy=r(Y,"P",{});var _te=o(zy);IR=i(_te,"Audio Feature to extract audio data from an audio file."),_te.forEach(a),qR=m(Y),Vy=r(Y,"P",{});var bte=o(Vy);TR=i(bte,"Input: The Audio feature accepts as input:"),bte.forEach(a),NR=m(Y),Cn=r(Y,"UL",{});var yb=o(Cn);Uy=r(yb,"LI",{});var $te=o(Uy);Nh=r($te,"P",{});var G4=o(Nh);PR=i(G4,"A "),My=r(G4,"CODE",{});var xte=o(My);LR=i(xte,"str"),xte.forEach(a),AR=i(G4,": Absolute path to the audio file (i.e. random access is allowed)."),G4.forEach(a),$te.forEach(a),FR=m(yb),zn=r(yb,"LI",{});var jb=o(zn);Ph=r(jb,"P",{});var W4=o(Ph);OR=i(W4,"A "),Ry=r(W4,"CODE",{});var vte=o(Ry);SR=i(vte,"dict"),vte.forEach(a),CR=i(W4," with the keys:"),W4.forEach(a),zR=m(jb),Lh=r(jb,"UL",{});var K4=o(Lh);By=r(K4,"LI",{});var yte=o(By);VR=i(yte,"path: String with relative path of the audio file to the archive file."),yte.forEach(a),UR=m(K4),Hy=r(K4,"LI",{});var jte=o(Hy);MR=i(jte,"bytes: Bytes content of the audio file."),jte.forEach(a),K4.forEach(a),RR=m(jb),Gy=r(jb,"P",{});var wte=o(Gy);BR=i(wte,"This is useful for archived files with sequential access."),wte.forEach(a),jb.forEach(a),HR=m(yb),Vn=r(yb,"LI",{});var wb=o(Vn);Ah=r(wb,"P",{});var Y4=o(Ah);GR=i(Y4,"A "),Wy=r(Y4,"CODE",{});var Dte=o(Wy);WR=i(Dte,"dict"),Dte.forEach(a),KR=i(Y4," with the keys:"),Y4.forEach(a),YR=m(wb),Un=r(wb,"UL",{});var Db=o(Un);Ky=r(Db,"LI",{});var kte=o(Ky);JR=i(kte,"path: String with relative path of the audio file to the archive file."),kte.forEach(a),ZR=m(Db),Yy=r(Db,"LI",{});var Ete=o(Yy);XR=i(Ete,"array: Array containing the audio sample"),Ete.forEach(a),QR=m(Db),Jy=r(Db,"LI",{});var Ite=o(Jy);eB=i(Ite,"sampling_rate: Integer corresponding to the samping rate of the audio sample."),Ite.forEach(a),Db.forEach(a),tB=m(wb),Zy=r(wb,"P",{});var qte=o(Zy);aB=i(qte,"This is useful for archived files with sequential access."),qte.forEach(a),wb.forEach(a),yb.forEach(a),sB=m(Y),js=r(Y,"DIV",{class:!0});var kb=o(js);b(Fh.$$.fragment,kb),nB=m(kb),Xy=r(kb,"P",{});var Tte=o(Xy);rB=i(Tte,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),Tte.forEach(a),oB=m(kb),Jt=r(kb,"UL",{});var rp=o(Jt);Qy=r(rp,"LI",{});var Nte=o(Qy);lB=i(Nte,"pa.string() - it must contain the \u201Cpath\u201D data"),Nte.forEach(a),iB=m(rp),ej=r(rp,"LI",{});var Pte=o(ej);pB=i(Pte,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),Pte.forEach(a),cB=m(rp),tj=r(rp,"LI",{});var Lte=o(tj);dB=i(Lte,"pa.struct({\u201Cpath\u201D: pa.string()})"),Lte.forEach(a),mB=m(rp),aj=r(rp,"LI",{});var Ate=o(aj);hB=i(Ate,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),Ate.forEach(a),rp.forEach(a),kb.forEach(a),fB=m(Y),ii=r(Y,"DIV",{class:!0});var J4=o(ii);b(Oh.$$.fragment,J4),uB=m(J4),sj=r(J4,"P",{});var Fte=o(sj);gB=i(Fte,"Decode example audio file into audio data."),Fte.forEach(a),J4.forEach(a),_B=m(Y),pi=r(Y,"DIV",{class:!0});var Z4=o(pi);b(Sh.$$.fragment,Z4),bB=m(Z4),nj=r(Z4,"P",{});var Ote=o(nj);$B=i(Ote,"Embed audio files into the Arrow array."),Ote.forEach(a),Z4.forEach(a),xB=m(Y),ci=r(Y,"DIV",{class:!0});var X4=o(ci);b(Ch.$$.fragment,X4),vB=m(X4),rj=r(X4,"P",{});var Ste=o(rj);yB=i(Ste,"Encode example into a format for Arrow."),Ste.forEach(a),X4.forEach(a),jB=m(Y),di=r(Y,"DIV",{class:!0});var Q4=o(di);b(zh.$$.fragment,Q4),wB=m(Q4),oj=r(Q4,"P",{});var Cte=o(oj);DB=i(Cte,"If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),Cte.forEach(a),Q4.forEach(a),Y.forEach(a),bw=m(s),R=r(s,"DIV",{class:!0});var J=o(R);b(Vh.$$.fragment,J),kB=m(J),lj=r(J,"P",{});var zte=o(lj);EB=i(zte,"Image feature to read image data from an image file."),zte.forEach(a),IB=m(J),ij=r(J,"P",{});var Vte=o(ij);qB=i(Vte,"Input: The Image feature accepts as input:"),Vte.forEach(a),TB=m(J),Zt=r(J,"UL",{});var op=o(Zt);pj=r(op,"LI",{});var Ute=o(pj);Uh=r(Ute,"P",{});var eD=o(Uh);NB=i(eD,"A "),cj=r(eD,"CODE",{});var Mte=o(cj);PB=i(Mte,"str"),Mte.forEach(a),LB=i(eD,": Absolute path to the image file (i.e. random access is allowed)."),eD.forEach(a),Ute.forEach(a),AB=m(op),Mn=r(op,"LI",{});var Eb=o(Mn);Mh=r(Eb,"P",{});var tD=o(Mh);FB=i(tD,"A "),dj=r(tD,"CODE",{});var Rte=o(dj);OB=i(Rte,"dict"),Rte.forEach(a),SB=i(tD," with the keys:"),tD.forEach(a),CB=m(Eb),Rh=r(Eb,"UL",{});var aD=o(Rh);mj=r(aD,"LI",{});var Bte=o(mj);zB=i(Bte,"path: String with relative path of the image file to the archive file."),Bte.forEach(a),VB=m(aD),hj=r(aD,"LI",{});var Hte=o(hj);UB=i(Hte,"bytes: Bytes of the image file."),Hte.forEach(a),aD.forEach(a),MB=m(Eb),fj=r(Eb,"P",{});var Gte=o(fj);RB=i(Gte,"This is useful for archived files with sequential access."),Gte.forEach(a),Eb.forEach(a),BB=m(op),uj=r(op,"LI",{});var Wte=o(uj);Bh=r(Wte,"P",{});var sD=o(Bh);HB=i(sD,"An "),gj=r(sD,"CODE",{});var Kte=o(gj);GB=i(Kte,"np.ndarray"),Kte.forEach(a),WB=i(sD,": NumPy array representing an image."),sD.forEach(a),Wte.forEach(a),KB=m(op),_j=r(op,"LI",{});var Yte=o(_j);Hh=r(Yte,"P",{});var nD=o(Hh);YB=i(nD,"A "),bj=r(nD,"CODE",{});var Jte=o(bj);JB=i(Jte,"PIL.Image.Image"),Jte.forEach(a),ZB=i(nD,": PIL image object."),nD.forEach(a),Yte.forEach(a),op.forEach(a),XB=m(J),ws=r(J,"DIV",{class:!0});var Ib=o(ws);b(Gh.$$.fragment,Ib),QB=m(Ib),$j=r(Ib,"P",{});var Zte=o($j);eH=i(Zte,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),Zte.forEach(a),tH=m(Ib),We=r(Ib,"UL",{});var Js=o(We);xj=r(Js,"LI",{});var Xte=o(xj);aH=i(Xte,"pa.string() - it must contain the \u201Cpath\u201D data"),Xte.forEach(a),sH=m(Js),vj=r(Js,"LI",{});var Qte=o(vj);nH=i(Qte,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),Qte.forEach(a),rH=m(Js),yj=r(Js,"LI",{});var eae=o(yj);oH=i(eae,"pa.struct({\u201Cpath\u201D: pa.string()})"),eae.forEach(a),lH=m(Js),jj=r(Js,"LI",{});var tae=o(jj);iH=i(tae,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),tae.forEach(a),pH=m(Js),wj=r(Js,"LI",{});var aae=o(wj);cH=i(aae,"pa.list(*) - it must contain the image array data"),aae.forEach(a),Js.forEach(a),Ib.forEach(a),dH=m(J),mi=r(J,"DIV",{class:!0});var rD=o(mi);b(Wh.$$.fragment,rD),mH=m(rD),Dj=r(rD,"P",{});var sae=o(Dj);hH=i(sae,"Decode example image file into image data."),sae.forEach(a),rD.forEach(a),fH=m(J),hi=r(J,"DIV",{class:!0});var oD=o(hi);b(Kh.$$.fragment,oD),uH=m(oD),kj=r(oD,"P",{});var nae=o(kj);gH=i(nae,"Embed image files into the Arrow array."),nae.forEach(a),oD.forEach(a),_H=m(J),fi=r(J,"DIV",{class:!0});var lD=o(fi);b(Yh.$$.fragment,lD),bH=m(lD),Ej=r(lD,"P",{});var rae=o(Ej);$H=i(rae,"Encode example into a format for Arrow."),rae.forEach(a),lD.forEach(a),xH=m(J),ui=r(J,"DIV",{class:!0});var iD=o(ui);b(Jh.$$.fragment,iD),vH=m(iD),Ij=r(iD,"P",{});var oae=o(Ij);yH=i(oae,"If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),oae.forEach(a),iD.forEach(a),J.forEach(a),$w=m(s),Rn=r(s,"H2",{class:!0});var pD=o(Rn);gi=r(pD,"A",{id:!0,class:!0,href:!0});var lae=o(gi);qj=r(lae,"SPAN",{});var iae=o(qj);b(Zh.$$.fragment,iae),iae.forEach(a),lae.forEach(a),jH=m(pD),Tj=r(pD,"SPAN",{});var pae=o(Tj);wH=i(pae,"MetricInfo"),pae.forEach(a),pD.forEach(a),xw=m(s),ae=r(s,"DIV",{class:!0});var Tt=o(ae);b(Xh.$$.fragment,Tt),DH=m(Tt),Nj=r(Tt,"P",{});var cae=o(Nj);kH=i(cae,"Information about a metric."),cae.forEach(a),EH=m(Tt),Rg=r(Tt,"P",{});var mK=o(Rg);Pj=r(mK,"CODE",{});var dae=o(Pj);IH=i(dae,"MetricInfo"),dae.forEach(a),qH=i(mK,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),mK.forEach(a),TH=m(Tt),Lj=r(Tt,"P",{});var mae=o(Lj);NH=i(mae,"Note: Not all fields are known on construction and may be updated later."),mae.forEach(a),PH=m(Tt),_i=r(Tt,"DIV",{class:!0});var cD=o(_i);b(Qh.$$.fragment,cD),LH=m(cD),ef=r(cD,"P",{});var dD=o(ef);AH=i(dD,"Create MetricInfo from the JSON file in "),Aj=r(dD,"CODE",{});var hae=o(Aj);FH=i(hae,"metric_info_dir"),hae.forEach(a),OH=i(dD,"."),dD.forEach(a),cD.forEach(a),SH=m(Tt),bi=r(Tt,"DIV",{class:!0});var mD=o(bi);b(tf.$$.fragment,mD),CH=m(mD),Xt=r(mD,"P",{});var lp=o(Xt);zH=i(lp,"Write "),Fj=r(lp,"CODE",{});var fae=o(Fj);VH=i(fae,"MetricInfo"),fae.forEach(a),UH=i(lp," as JSON to "),Oj=r(lp,"CODE",{});var uae=o(Oj);MH=i(uae,"metric_info_dir"),uae.forEach(a),RH=i(lp,`.
Also save the license separately in LICENCE.
If `),Sj=r(lp,"CODE",{});var gae=o(Sj);BH=i(gae,"pretty_print"),gae.forEach(a),HH=i(lp," is True, the JSON will be pretty-printed with the indent level of 4."),lp.forEach(a),mD.forEach(a),Tt.forEach(a),vw=m(s),Bn=r(s,"H2",{class:!0});var hD=o(Bn);$i=r(hD,"A",{id:!0,class:!0,href:!0});var _ae=o($i);Cj=r(_ae,"SPAN",{});var bae=o(Cj);b(af.$$.fragment,bae),bae.forEach(a),_ae.forEach(a),GH=m(hD),zj=r(hD,"SPAN",{});var $ae=o(zj);WH=i($ae,"Metric"),$ae.forEach(a),hD.forEach(a),yw=m(s),Ds=r(s,"P",{});var qb=o(Ds);KH=i(qb,"The base class "),Vj=r(qb,"CODE",{});var xae=o(Vj);YH=i(xae,"Metric"),xae.forEach(a),JH=i(qb," implements a Metric backed by one or several "),Bg=r(qb,"A",{href:!0});var vae=o(Bg);ZH=i(vae,"Dataset"),vae.forEach(a),XH=i(qb,"."),qb.forEach(a),jw=m(s),se=r(s,"DIV",{class:!0});var Nt=o(se);b(sf.$$.fragment,Nt),QH=m(Nt),Uj=r(Nt,"P",{});var yae=o(Uj);eG=i(yae,"A Metric is the base class and common API for all metrics."),yae.forEach(a),tG=m(Nt),xi=r(Nt,"DIV",{class:!0});var fD=o(xi);b(nf.$$.fragment,fD),aG=m(fD),Mj=r(fD,"P",{});var jae=o(Mj);sG=i(jae,"Add one prediction and reference for the metric\u2019s stack."),jae.forEach(a),fD.forEach(a),nG=m(Nt),vi=r(Nt,"DIV",{class:!0});var uD=o(vi);b(rf.$$.fragment,uD),rG=m(uD),Rj=r(uD,"P",{});var wae=o(Rj);oG=i(wae,"Add a batch of predictions and references for the metric\u2019s stack."),wae.forEach(a),uD.forEach(a),lG=m(Nt),ks=r(Nt,"DIV",{class:!0});var Tb=o(ks);b(of.$$.fragment,Tb),iG=m(Tb),Bj=r(Tb,"P",{});var Dae=o(Bj);pG=i(Dae,"Compute the metrics."),Dae.forEach(a),cG=m(Tb),Hj=r(Tb,"P",{});var kae=o(Hj);dG=i(kae,"Usage of positional arguments is not allowed to prevent mistakes."),kae.forEach(a),Tb.forEach(a),mG=m(Nt),yi=r(Nt,"DIV",{class:!0});var gD=o(yi);b(lf.$$.fragment,gD),hG=m(gD),Gj=r(gD,"P",{});var Eae=o(Gj);fG=i(Eae,"Downloads and prepares dataset for reading."),Eae.forEach(a),gD.forEach(a),Nt.forEach(a),ww=m(s),Hn=r(s,"H2",{class:!0});var _D=o(Hn);ji=r(_D,"A",{id:!0,class:!0,href:!0});var Iae=o(ji);Wj=r(Iae,"SPAN",{});var qae=o(Wj);b(pf.$$.fragment,qae),qae.forEach(a),Iae.forEach(a),uG=m(_D),Kj=r(_D,"SPAN",{});var Tae=o(Kj);gG=i(Tae,"Filesystems"),Tae.forEach(a),_D.forEach(a),Dw=m(s),S=r(s,"DIV",{class:!0});var C=o(S);b(cf.$$.fragment,C),_G=m(C),Yj=r(C,"P",{});var Nae=o(Yj);bG=i(Nae,"Access S3 as if it were a file system."),Nae.forEach(a),$G=m(C),Jj=r(C,"P",{});var Pae=o(Jj);xG=i(Pae,`This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3
storage.`),Pae.forEach(a),vG=m(C),Qt=r(C,"P",{});var ip=o(Qt);yG=i(ip,"Provide credentials either explicitly ("),Zj=r(ip,"CODE",{});var Lae=o(Zj);jG=i(Lae,"key="),Lae.forEach(a),wG=i(ip,", "),Xj=r(ip,"CODE",{});var Aae=o(Xj);DG=i(Aae,"secret="),Aae.forEach(a),kG=i(ip,`) or depend
on boto\u2019s credential methods. See botocore documentation for more
information. If no credentials are available, use `),Qj=r(ip,"CODE",{});var Fae=o(Qj);EG=i(Fae,"anon=True"),Fae.forEach(a),IG=i(ip,"."),ip.forEach(a),qG=m(C),e0=r(C,"P",{});var Oae=o(e0);TG=i(Oae,"The following parameters are passed on to fsspec:"),Oae.forEach(a),NG=m(C),t0=r(C,"P",{});var Sae=o(t0);PG=i(Sae,`skip_instance_cache: to control reuse of instances
use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings`),Sae.forEach(a),LG=m(C),a0=r(C,"P",{});var Cae=o(a0);AG=i(Cae,"."),Cae.forEach(a),FG=m(C),bt=r(C,"P",{});var br=o(bt);s0=r(br,"CODE",{});var zae=o(s0);OG=i(zae,"datasets.filesystems.S3FileSystem"),zae.forEach(a),SG=i(br," is a subclass of s3fs.S3FileSystem]("),df=r(br,"A",{href:!0,rel:!0});var Vae=o(df);CG=i(Vae,"https://s3fs.readthedocs.io/en/latest/api.html"),Vae.forEach(a),zG=i(br,`), which is a known
implementation of `),n0=r(br,"CODE",{});var Uae=o(n0);VG=i(Uae,"fsspec"),Uae.forEach(a),UG=i(br,". Filesystem Spec "),mf=r(br,"A",{href:!0,rel:!0});var Mae=o(mf);MG=i(Mae,"FSSPEC"),Mae.forEach(a),RG=i(br,` is a project to
unify various projects and classes to work with remote filesystems
and file-system-like abstractions using a standard pythonic interface.`),br.forEach(a),BG=m(C),r0=r(C,"P",{});var Rae=o(r0);HG=i(Rae,"Examples:"),Rae.forEach(a),GG=m(C),o0=r(C,"P",{});var Bae=o(o0);WG=i(Bae,"Listing files from public s3 bucket."),Bae.forEach(a),KG=m(C),b(wi.$$.fragment,C),YG=m(C),Gn=r(C,"P",{});var Nb=o(Gn);JG=i(Nb,"Listing files from private s3 bucket using "),l0=r(Nb,"CODE",{});var Hae=o(l0);ZG=i(Hae,"aws_access_key_id"),Hae.forEach(a),XG=i(Nb," and "),i0=r(Nb,"CODE",{});var Gae=o(i0);QG=i(Gae,"aws_secret_access_key"),Gae.forEach(a),eW=i(Nb,"."),Nb.forEach(a),tW=m(C),b(Di.$$.fragment,C),aW=m(C),ea=r(C,"P",{});var pp=o(ea);sW=i(pp,"Using "),p0=r(pp,"CODE",{});var Wae=o(p0);nW=i(Wae,"S3Filesystem"),Wae.forEach(a),rW=i(pp," with "),c0=r(pp,"CODE",{});var Kae=o(c0);oW=i(Kae,"botocore.session.Session"),Kae.forEach(a),lW=i(pp," and custom "),d0=r(pp,"CODE",{});var Yae=o(d0);iW=i(Yae,"aws_profile"),Yae.forEach(a),pW=i(pp,"."),pp.forEach(a),cW=m(C),b(ki.$$.fragment,C),dW=m(C),Wn=r(C,"P",{});var Pb=o(Wn);mW=i(Pb,"Loading dataset from s3 using "),m0=r(Pb,"CODE",{});var Jae=o(m0);hW=i(Jae,"S3Filesystem"),Jae.forEach(a),fW=i(Pb," and "),h0=r(Pb,"CODE",{});var Zae=o(h0);uW=i(Zae,"load_from_disk()"),Zae.forEach(a),gW=i(Pb,"."),Pb.forEach(a),_W=m(C),b(Ei.$$.fragment,C),bW=m(C),f0=r(C,"P",{});var Xae=o(f0);$W=i(Xae,"Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>."),Xae.forEach(a),xW=m(C),b(Ii.$$.fragment,C),vW=m(C),qi=r(C,"H2",{class:!0});var bD=o(qi);Ti=r(bD,"A",{id:!0,class:!0,href:!0});var Qae=o(Ti);u0=r(Qae,"SPAN",{});var ese=o(u0);b(hf.$$.fragment,ese),ese.forEach(a),Qae.forEach(a),yW=m(bD),g0=r(bD,"SPAN",{});var tse=o(g0);jW=i(tse,"Parameters"),tse.forEach(a),bD.forEach(a),wW=m(C),W=r(C,"P",{});var de=o(W);DW=i(de,`anon : bool (False)
Whether to use anonymous connection (public buckets only). If False,
uses the key/secret given, or boto\u2019s credential resolver (client_kwargs,
environment, variables, config files, EC2 IAM server, in that order)
key : string (None)
If not anonymous, use this access key ID, if specified
secret : string (None)
If not anonymous, use this secret access key, if specified
token : string (None)
If not anonymous, use this security token, if specified
use_ssl : bool (True)
Whether to use SSL in connections to S3; may be faster without, but
insecure. If `),_0=r(de,"CODE",{});var ase=o(_0);kW=i(ase,"use_ssl"),ase.forEach(a),EW=i(de," is also set in "),b0=r(de,"CODE",{});var sse=o(b0);IW=i(sse,"client_kwargs"),sse.forEach(a),qW=i(de,`,
the value set in `),$0=r(de,"CODE",{});var nse=o($0);TW=i(nse,"client_kwargs"),nse.forEach(a),NW=i(de,` will take priority.
s3_additional_kwargs : dict of parameters that are used when calling s3 api
methods. Typically used for things like \u201CServerSideEncryption\u201D.
client_kwargs : dict of parameters for the botocore client
requester_pays : bool (False)
If RequesterPays buckets are supported.
default_block_size: int (None)
If given, the default block size value used for `),x0=r(de,"CODE",{});var rse=o(x0);PW=i(rse,"open()"),rse.forEach(a),LW=i(de,`, if no
specific value is given at all time. The built-in default is 5MB.
default_fill_cache : Bool (True)
Whether to use cache filling with open by default. Refer to
`),v0=r(de,"CODE",{});var ose=o(v0);AW=i(ose,"S3File.open"),ose.forEach(a),FW=i(de,`.
default_cache_type : string (\u2018bytes\u2019)
If given, the default cache_type value used for `),y0=r(de,"CODE",{});var lse=o(y0);OW=i(lse,"open()"),lse.forEach(a),SW=i(de,`. Set to \u201Cnone\u201D
if no caching is desired. See fsspec\u2019s documentation for other available
cache_type values. Default cache_type is \u2018bytes\u2019.
version_aware : bool (False)
Whether to support bucket versioning.  If enable this will require the
user to have the necessary IAM permissions for dealing with versioned
objects.
cache_regions : bool (False)
Whether to cache bucket regions or not. Whenever a new bucket is used,
it will first find out which region it belongs and then use the client
for that region.
config_kwargs : dict of parameters passed to `),j0=r(de,"CODE",{});var ise=o(j0);CW=i(ise,"botocore.client.Config"),ise.forEach(a),zW=i(de,`
kwargs : other parameters for core session
session : aiobotocore AioSession object to be used for all connections.
This session will be used inplace of creating a new session inside S3FileSystem.
For example: aiobotocore.session.AioSession(profile=\u2018test_user\u2019)`),de.forEach(a),C.forEach(a),kw=m(s),Kn=r(s,"DIV",{class:!0});var $D=o(Kn);b(ff.$$.fragment,$D),VW=m($D),Yn=r($D,"P",{});var Lb=o(Yn);UW=i(Lb,"preprocesses "),w0=r(Lb,"EM",{});var pse=o(w0);MW=i(pse,"dataset_path"),pse.forEach(a),RW=i(Lb," and removes remote filesystem (e.g. removing "),D0=r(Lb,"CODE",{});var cse=o(D0);BW=i(cse,"s3://"),cse.forEach(a),HW=i(Lb,")"),Lb.forEach(a),$D.forEach(a),Ew=m(s),Jn=r(s,"DIV",{class:!0});var xD=o(Jn);b(uf.$$.fragment,xD),GW=m(xD),k0=r(xD,"P",{});var dse=o(k0);WW=i(dse,"Validates if filesystem has remote protocol."),dse.forEach(a),xD.forEach(a),Iw=m(s),Zn=r(s,"H2",{class:!0});var vD=o(Zn);Ni=r(vD,"A",{id:!0,class:!0,href:!0});var mse=o(Ni);E0=r(mse,"SPAN",{});var hse=o(E0);b(gf.$$.fragment,hse),hse.forEach(a),mse.forEach(a),KW=m(vD),I0=r(vD,"SPAN",{});var fse=o(I0);YW=i(fse,"Fingerprint"),fse.forEach(a),vD.forEach(a),qw=m(s),Xn=r(s,"DIV",{class:!0});var yD=o(Xn);b(_f.$$.fragment,yD),JW=m(yD),q0=r(yD,"P",{});var use=o(q0);ZW=i(use,"Hasher that accepts python objects as inputs."),use.forEach(a),yD.forEach(a),this.h()},h(){j(c,"name","hf:doc:metadata"),j(c,"content",JSON.stringify(kre)),j(p,"id","main-classes"),j(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(p,"href","#main-classes"),j(f,"class","relative group"),j($e,"id","datasets.DatasetInfo"),j($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j($e,"href","#datasets.DatasetInfo"),j(Se,"class","relative group"),j(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(jr,"id","datasets.Dataset"),j(jr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(jr,"href","#datasets.Dataset"),j(Qs,"class","relative group"),j(Of,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"),j(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Sf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"),j(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Cf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"),j(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ar,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.__len__"),j(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(zf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.map"),j(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Vf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.set_format"),j(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Uf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.set_transform"),j(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Mf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.set_format"),j(Rf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.reset_format"),j(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Hf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.with_transform"),j(Gf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.set_format"),j(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Wf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.set_format"),j(Kf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.reset_format"),j(Yf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.set_transform"),j(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Jf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Image"),j(Zf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Audio"),j(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Xf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),j(Qf,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Image"),j(eu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Audio"),j(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(tu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),j(Ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(La,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(yc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),j(yc,"rel","nofollow"),j(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(wc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),j(wc,"rel","nofollow"),j(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ru,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetInfo"),j(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(lu,"href","/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.NamedSplit"),j(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(iu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(cu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(du,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(mu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(hu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(uu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(gu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_u,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(bu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j($u,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(vu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features"),j(yu,"href","/docs/datasets/package_reference/task_templates"),j(Ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ju,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"),j(wu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"),j(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Du,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"),j(ku,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDataset"),j(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Eu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),j(Iu,"href","/docs/datasets/pr_4274/en/package_reference/loading_methods#datasets.load_dataset"),j(qu,"href","/docs/datasets/pr_4274/en/package_reference/loading_methods#datasets.load_dataset"),j(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Tu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),j(Nu,"href","/docs/datasets/pr_4274/en/package_reference/loading_methods#datasets.load_dataset"),j(Pu,"href","/docs/datasets/pr_4274/en/package_reference/loading_methods#datasets.load_dataset"),j(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Lu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),j(Au,"href","/docs/datasets/pr_4274/en/package_reference/loading_methods#datasets.load_dataset"),j(Fu,"href","/docs/datasets/pr_4274/en/package_reference/loading_methods#datasets.load_dataset"),j(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Uo,"id","datasets.DatasetDict"),j(Uo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Uo,"href","#datasets.DatasetDict"),j(gn,"class","relative group"),j(Ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Go,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.__len__"),j(Wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(nl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Su,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.with_transform"),j(Cu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetDict.set_format"),j(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(zu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.set_format"),j(Vu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.reset_format"),j(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Uu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.map"),j(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Mu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.map"),j(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ru,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset.map"),j(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(as,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Bu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Image"),j(Hu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Audio"),j(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Gu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),j(Wu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Image"),j(Ku,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Audio"),j(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Yu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),j(ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ns,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(rs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ju,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features"),j(Zu,"href","/docs/datasets/package_reference/task_templates"),j(is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Xu,"id","package_reference_features"),j(yl,"id","datasets.IterableDataset"),j(yl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(yl,"href","#datasets.IterableDataset"),j(qn,"class","relative group"),j(Qu,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDataset"),j(ps,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(tg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDataset.skip"),j(ag,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDataset.take"),j(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ng,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetInfo"),j(Pl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(og,"href","/docs/datasets/pr_4274/en/package_reference/builder_classes#datasets.NamedSplit"),j(Ll,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(lg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(mg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(hg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(gg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(bg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j($g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Al,"id","iterabledatasetdict[[datasets.iterabledatasetdict]]"),j(Al,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Al,"href","#iterabledatasetdict[[datasets.iterabledatasetdict]]"),j(Pn,"class","relative group"),j(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDataset.skip"),j(vg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.IterableDataset.take"),j(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Bl,"id","datasets.Features"),j(Bl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Bl,"href","#datasets.Features"),j(Fn,"class","relative group"),j(jg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Value"),j(wg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.ClassLabel"),j(Dg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Sequence"),j(kg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Sequence"),j(Eg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Array2D"),j(Ig,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Array3D"),j(qg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Array4D"),j(Tg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Array5D"),j(Ng,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Audio"),j(Pg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Image"),j(Lg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Translation"),j(Ag,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),j(Wl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Kl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Yl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Jl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Zl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Xl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ql,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Fg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.DatasetInfo"),j(Og,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),j(Sg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Value"),j(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(On,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ai,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(si,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ri,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(li,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(wh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ih,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ii,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(pi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(di,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(mi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(hi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(fi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ui,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(gi,"id","datasets.MetricInfo"),j(gi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(gi,"href","#datasets.MetricInfo"),j(Rn,"class","relative group"),j(_i,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(bi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j($i,"id","datasets.Metric"),j($i,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j($i,"href","#datasets.Metric"),j(Bn,"class","relative group"),j(Bg,"href","/docs/datasets/pr_4274/en/package_reference/main_classes#datasets.Dataset"),j(xi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(vi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(yi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(ji,"id","datasets.filesystems.S3FileSystem"),j(ji,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(ji,"href","#datasets.filesystems.S3FileSystem"),j(Hn,"class","relative group"),j(df,"href","https://s3fs.readthedocs.io/en/latest/api.html"),j(df,"rel","nofollow"),j(mf,"href","https://filesystem-spec.readthedocs.io/en/latest/?badge=latest"),j(mf,"rel","nofollow"),j(Ti,"id","parameters"),j(Ti,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Ti,"href","#parameters"),j(qi,"class","relative group"),j(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Kn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Jn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),j(Ni,"id","datasets.fingerprint.Hasher"),j(Ni,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),j(Ni,"href","#datasets.fingerprint.Hasher"),j(Zn,"class","relative group"),j(Xn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(s,w){e(document.head,c),D(s,g,w),D(s,f,w),e(f,p),e(p,u),$(t,u,null),e(f,h),e(f,Zs),e(Zs,la),D(s,$r,w),D(s,Se,w),e(Se,$e),e($e,ne),$(ia,ne,null),e(Se,Af),e(Se,xr),e(xr,jD),D(s,U7,w),D(s,Z,w),$(cp,Z,null),e(Z,wD),e(Z,Ab),e(Ab,DD),e(Z,kD),e(Z,Ff),e(Ff,Fb),e(Fb,ED),e(Ff,ID),e(Z,qD),e(Z,Ob),e(Ob,TD),e(Z,ND),e(Z,xe),$(dp,xe,null),e(xe,PD),e(xe,mp),e(mp,LD),e(mp,Sb),e(Sb,AD),e(mp,FD),e(xe,OD),e(xe,Cb),e(Cb,SD),e(xe,CD),e(xe,zb),e(zb,zD),e(xe,VD),$(vr,xe,null),e(Z,UD),e(Z,pa),$(hp,pa,null),e(pa,MD),e(pa,Xs),e(Xs,RD),e(Xs,Vb),e(Vb,BD),e(Xs,HD),e(Xs,Ub),e(Ub,GD),e(Xs,WD),e(pa,KD),$(yr,pa,null),D(s,M7,w),D(s,Qs,w),e(Qs,jr),e(jr,Mb),$(fp,Mb,null),e(Qs,YD),e(Qs,Rb),e(Rb,JD),D(s,R7,w),D(s,wr,w),e(wr,ZD),e(wr,Of),e(Of,XD),e(wr,QD),D(s,B7,w),D(s,I,w),$(up,I,null),e(I,ek),e(I,Bb),e(Bb,tk),e(I,ak),e(I,Qe),$(gp,Qe,null),e(Qe,sk),e(Qe,Hb),e(Hb,nk),e(Qe,rk),e(Qe,Gb),e(Gb,Wb),e(Wb,ok),e(Qe,lk),$(Dr,Qe,null),e(I,ik),e(I,et),$(_p,et,null),e(et,pk),e(et,Kb),e(Kb,ck),e(et,dk),e(et,Yb),e(Yb,Jb),e(Jb,mk),e(et,hk),$(kr,et,null),e(I,fk),e(I,Er),$(bp,Er,null),e(Er,uk),e(Er,Zb),e(Zb,gk),e(I,_k),e(I,Ir),$($p,Ir,null),e(Ir,bk),e(Ir,Xb),e(Xb,$k),e(I,xk),e(I,ve),$(xp,ve,null),e(ve,vk),e(ve,Lt),e(Lt,yk),e(Lt,Qb),e(Qb,jk),e(Lt,wk),e(Lt,e2),e(e2,Dk),e(Lt,kk),e(Lt,Sf),e(Sf,Ek),e(Lt,Ik),e(ve,qk),e(ve,vp),e(vp,Tk),e(vp,t2),e(t2,Nk),e(vp,Pk),e(ve,Lk),e(ve,yp),e(yp,Ak),e(yp,a2),e(a2,Fk),e(yp,Ok),e(ve,Sk),$(qr,ve,null),e(I,Ck),e(I,Tr),$(jp,Tr,null),e(Tr,zk),e(Tr,At),e(At,Vk),e(At,s2),e(s2,Uk),e(At,Mk),e(At,n2),e(n2,Rk),e(At,Bk),e(At,Cf),e(Cf,Hk),e(At,Gk),e(I,Wk),e(I,ca),$(wp,ca,null),e(ca,Kk),e(ca,r2),e(r2,Yk),e(ca,Jk),$(Nr,ca,null),e(I,Zk),e(I,da),$(Dp,da,null),e(da,Xk),e(da,o2),e(o2,Qk),e(da,eE),$(Pr,da,null),e(I,tE),e(I,ma),$(kp,ma,null),e(ma,aE),e(ma,l2),e(l2,sE),e(ma,nE),$(Lr,ma,null),e(I,rE),e(I,ha),$(Ep,ha,null),e(ha,oE),e(ha,Ip),e(Ip,lE),e(Ip,Ar),e(Ar,iE),e(Ar,i2),e(i2,pE),e(Ar,cE),e(Ip,dE),e(ha,mE),$(Fr,ha,null),e(I,hE),e(I,fa),$(qp,fa,null),e(fa,fE),e(fa,p2),e(p2,uE),e(fa,gE),$(Or,fa,null),e(I,_E),e(I,ua),$(Tp,ua,null),e(ua,bE),e(ua,c2),e(c2,$E),e(ua,xE),$(Sr,ua,null),e(I,vE),e(I,tt),$(Np,tt,null),e(tt,yE),e(tt,d2),e(d2,jE),e(tt,wE),e(tt,m2),e(m2,DE),e(tt,kE),$(Cr,tt,null),e(I,EE),e(I,ga),$(Pp,ga,null),e(ga,IE),e(ga,h2),e(h2,qE),e(ga,TE),$(zr,ga,null),e(I,NE),e(I,_a),$(Lp,_a,null),e(_a,PE),e(_a,f2),e(f2,LE),e(_a,AE),$(Vr,_a,null),e(I,FE),e(I,ba),$(Ap,ba,null),e(ba,OE),e(ba,u2),e(u2,SE),e(ba,CE),$(Ur,ba,null),e(I,zE),e(I,at),$(Fp,at,null),e(at,VE),e(at,g2),e(g2,UE),e(at,ME),e(at,en),e(en,RE),e(en,zf),e(zf,BE),e(en,HE),e(en,_2),e(_2,GE),e(en,WE),e(at,KE),$(Mr,at,null),e(I,YE),e(I,$a),$(Op,$a,null),e($a,JE),e($a,b2),e(b2,ZE),e($a,XE),$(Rr,$a,null),e(I,QE),e(I,xa),$(Sp,xa,null),e(xa,e3),e(xa,$2),e($2,t3),e(xa,a3),$(Br,xa,null),e(I,s3),e(I,va),$(Cp,va,null),e(va,n3),e(va,zp),e(zp,r3),e(zp,x2),e(x2,o3),e(zp,l3),e(va,i3),$(Hr,va,null),e(I,p3),e(I,ya),$(Vp,ya,null),e(ya,c3),e(ya,v2),e(v2,d3),e(ya,m3),$(Gr,ya,null),e(I,h3),e(I,ja),$(Up,ja,null),e(ja,f3),e(ja,y2),e(y2,u3),e(ja,g3),e(ja,Mp),e(Mp,_3),e(Mp,Vf),e(Vf,b3),e(Mp,$3),e(I,x3),e(I,Wr),$(Rp,Wr,null),e(Wr,v3),e(Wr,tn),e(tn,y3),e(tn,j2),e(j2,j3),e(tn,w3),e(tn,w2),e(w2,D3),e(tn,k3),e(I,E3),e(I,ye),$(Bp,ye,null),e(ye,I3),e(ye,Ce),e(Ce,q3),e(Ce,D2),e(D2,T3),e(Ce,N3),e(Ce,k2),e(k2,P3),e(Ce,L3),e(Ce,E2),e(E2,A3),e(Ce,F3),e(Ce,Uf),e(Uf,O3),e(Ce,S3),e(ye,C3),e(ye,ze),e(ze,z3),e(ze,I2),e(I2,V3),e(ze,U3),e(ze,q2),e(q2,M3),e(ze,R3),e(ze,T2),e(T2,B3),e(ze,H3),e(ze,N2),e(N2,G3),e(ze,W3),e(ye,K3),e(ye,P2),e(P2,Y3),e(ye,J3),$(Kr,ye,null),e(I,Z3),e(I,wa),$(Hp,wa,null),e(wa,X3),e(wa,st),e(st,Q3),e(st,L2),e(L2,e5),e(st,t5),e(st,A2),e(A2,a5),e(st,s5),e(st,Mf),e(Mf,n5),e(st,r5),e(st,Rf),e(Rf,o5),e(wa,l5),$(Yr,wa,null),e(I,i5),e(I,nt),$(Gp,nt,null),e(nt,p5),e(nt,Wp),e(Wp,c5),e(Wp,F2),e(F2,d5),e(Wp,m5),e(nt,h5),e(nt,Bf),e(Bf,f5),e(Bf,O2),e(O2,u5),e(nt,g5),$(Jr,nt,null),e(I,_5),e(I,je),$(Kp,je,null),e(je,b5),e(je,Ft),e(Ft,$5),e(Ft,S2),e(S2,x5),e(Ft,v5),e(Ft,C2),e(C2,y5),e(Ft,j5),e(Ft,z2),e(z2,w5),e(Ft,D5),e(je,k5),e(je,Yp),e(Yp,E5),e(Yp,Hf),e(Hf,I5),e(Yp,q5),e(je,T5),e(je,an),e(an,N5),e(an,Gf),e(Gf,P5),e(an,L5),e(an,V2),e(V2,A5),e(an,F5),e(je,O5),$(Zr,je,null),e(I,S5),e(I,we),$(Jp,we,null),e(we,C5),e(we,sn),e(sn,z5),e(sn,U2),e(U2,V5),e(sn,U5),e(sn,M2),e(M2,M5),e(sn,R5),e(we,B5),e(we,nn),e(nn,H5),e(nn,Wf),e(Wf,G5),e(nn,W5),e(nn,Kf),e(Kf,K5),e(nn,Y5),e(we,J5),e(we,rn),e(rn,Z5),e(rn,Yf),e(Yf,X5),e(rn,Q5),e(rn,R2),e(R2,e6),e(rn,t6),e(we,a6),$(Xr,we,null),e(I,s6),e(I,Qr),$(Zp,Qr,null),e(Qr,n6),e(Qr,B2),e(B2,r6),e(I,o6),e(I,rt),$(Xp,rt,null),e(rt,l6),e(rt,H2),e(H2,i6),e(rt,p6),e(rt,G2),e(G2,c6),e(rt,d6),$(eo,rt,null),e(I,m6),e(I,De),$(Qp,De,null),e(De,h6),e(De,W2),e(W2,f6),e(De,u6),e(De,ec),e(ec,g6),e(ec,K2),e(K2,_6),e(ec,b6),e(De,$6),e(De,on),e(on,Y2),e(Y2,x6),e(on,v6),e(on,J2),e(J2,y6),e(on,j6),e(on,me),e(me,w6),e(me,Z2),e(Z2,D6),e(me,k6),e(me,X2),e(X2,E6),e(me,I6),e(me,Q2),e(Q2,q6),e(me,T6),e(me,e$),e(e$,N6),e(me,P6),e(me,t$),e(t$,L6),e(me,A6),e(De,F6),$(to,De,null),e(I,O6),e(I,Da),$(tc,Da,null),e(Da,S6),e(Da,a$),e(a$,C6),e(Da,z6),$(ao,Da,null),e(I,V6),e(I,ka),$(ac,ka,null),e(ka,U6),e(ka,s$),e(s$,M6),e(ka,R6),$(so,ka,null),e(I,B6),e(I,ot),$(sc,ot,null),e(ot,H6),e(ot,n$),e(n$,G6),e(ot,W6),e(ot,r$),e(r$,K6),e(ot,Y6),$(no,ot,null),e(I,J6),e(I,lt),$(nc,lt,null),e(lt,Z6),e(lt,o$),e(o$,X6),e(lt,Q6),e(lt,l$),e(l$,e8),e(lt,t8),$(ro,lt,null),e(I,a8),e(I,it),$(rc,it,null),e(it,s8),e(it,H),e(H,n8),e(H,i$),e(i$,r8),e(H,o8),e(H,p$),e(p$,l8),e(H,i8),e(H,c$),e(c$,p8),e(H,c8),e(H,d$),e(d$,d8),e(H,m8),e(H,m$),e(m$,h8),e(H,f8),e(H,h$),e(h$,u8),e(H,g8),e(H,f$),e(f$,_8),e(H,b8),e(it,$8),e(it,oc),e(oc,x8),e(oc,u$),e(u$,v8),e(oc,y8),e(it,j8),$(oo,it,null),e(I,w8),e(I,re),$(lc,re,null),e(re,D8),e(re,ln),e(ln,k8),e(ln,g$),e(g$,E8),e(ln,I8),e(ln,_$),e(_$,q8),e(ln,T8),e(re,N8),e(re,b$),e(b$,P8),e(re,L8),e(re,ic),e(ic,A8),e(ic,$$),e($$,F8),e(ic,O8),e(re,S8),e(re,x$),e(x$,C8),e(re,z8),$(lo,re,null),e(I,V8),e(I,Ea),$(pc,Ea,null),e(Ea,U8),e(Ea,v$),e(v$,M8),e(Ea,R8),$(io,Ea,null),e(I,B8),e(I,pt),$(cc,pt,null),e(pt,H8),e(pt,y$),e(y$,G8),e(pt,W8),e(pt,Ot),e(Ot,K8),e(Ot,Jf),e(Jf,Y8),e(Ot,J8),e(Ot,Zf),e(Zf,Z8),e(Ot,X8),e(Ot,j$),e(j$,Q8),e(Ot,eI),e(pt,tI),$(po,pt,null),e(I,aI),e(I,K),$(dc,K,null),e(K,sI),e(K,pn),e(pn,nI),e(pn,Xf),e(Xf,rI),e(pn,oI),e(pn,w$),e(w$,lI),e(pn,iI),e(K,pI),e(K,cn),e(cn,cI),e(cn,Qf),e(Qf,dI),e(cn,mI),e(cn,eu),e(eu,hI),e(cn,fI),e(K,uI),e(K,mc),e(mc,gI),e(mc,D$),e(D$,_I),e(mc,bI),e(K,$I),$(co,K,null),e(K,xI),$(mo,K,null),e(K,vI),$(ho,K,null),e(I,yI),e(I,Ia),$(hc,Ia,null),e(Ia,jI),e(Ia,St),e(St,wI),e(St,k$),e(k$,DI),e(St,kI),e(St,tu),e(tu,EI),e(St,II),e(St,E$),e(E$,qI),e(St,TI),e(Ia,NI),$(fo,Ia,null),e(I,PI),e(I,uo),$(fc,uo,null),e(uo,LI),e(uo,I$),e(I$,AI),e(I,FI),e(I,qa),$(uc,qa,null),e(qa,OI),e(qa,q$),e(q$,SI),e(qa,CI),$(go,qa,null),e(I,zI),e(I,Ta),$(gc,Ta,null),e(Ta,VI),e(Ta,_c),e(_c,UI),e(_c,T$),e(T$,MI),e(_c,RI),e(Ta,BI),$(_o,Ta,null),e(I,HI),e(I,Na),$(bc,Na,null),e(Na,GI),e(Na,N$),e(N$,WI),e(Na,KI),$(bo,Na,null),e(I,YI),e(I,Pa),$($c,Pa,null),e(Pa,JI),e(Pa,P$),e(P$,ZI),e(Pa,XI),$($o,Pa,null),e(I,QI),e(I,La),$(xc,La,null),e(La,e9),e(La,L$),e(L$,t9),e(La,a9),$(xo,La,null),e(I,s9),e(I,ct),$(vc,ct,null),e(ct,n9),e(ct,dn),e(dn,r9),e(dn,A$),e(A$,o9),e(dn,l9),e(dn,F$),e(F$,i9),e(dn,p9),e(ct,c9),e(ct,O$),e(O$,au),e(au,d9),e(au,yc),e(yc,m9),e(ct,h9),$(vo,ct,null),e(I,f9),e(I,Aa),$(jc,Aa,null),e(Aa,u9),e(Aa,Ct),e(Ct,g9),e(Ct,S$),e(S$,_9),e(Ct,b9),e(Ct,C$),e(C$,$9),e(Ct,x9),e(Ct,z$),e(z$,v9),e(Ct,y9),e(Aa,j9),e(Aa,V$),e(V$,su),e(su,w9),e(su,wc),e(wc,D9),e(I,k9),e(I,yo),$(Dc,yo,null),e(yo,E9),e(yo,U$),e(U$,I9),e(I,q9),e(I,Fa),$(kc,Fa,null),e(Fa,T9),e(Fa,M$),e(M$,N9),e(Fa,P9),e(Fa,Ec),e(Ec,L9),e(Ec,R$),e(R$,A9),e(Ec,F9),e(I,O9),e(I,Oa),$(Ic,Oa,null),e(Oa,S9),e(Oa,B$),e(B$,C9),e(Oa,z9),$(jo,Oa,null),e(I,V9),e(I,Sa),$(qc,Sa,null),e(Sa,U9),e(Sa,H$),e(H$,M9),e(Sa,R9),$(wo,Sa,null),e(I,B9),e(I,Do),$(Tc,Do,null),e(Do,H9),e(Do,G$),e(G$,G9),e(I,W9),e(I,ko),$(Nc,ko,null),e(ko,K9),e(ko,W$),e(W$,Y9),e(I,J9),e(I,Eo),$(Pc,Eo,null),e(Eo,Z9),e(Eo,K$),e(K$,X9),e(I,Q9),e(I,Io),$(Lc,Io,null),e(Io,eq),e(Io,Y$),e(Y$,tq),e(I,aq),e(I,qo),$(Ac,qo,null),e(qo,sq),e(qo,J$),e(J$,nq),e(I,rq),e(I,To),$(Fc,To,null),e(To,oq),e(To,Z$),e(Z$,lq),e(I,iq),e(I,No),$(Oc,No,null),e(No,pq),e(No,X$),e(X$,cq),e(I,dq),e(I,Po),$(Sc,Po,null),e(Po,mq),e(Po,nu),e(nu,ru),e(ru,hq),e(nu,fq),e(I,uq),e(I,Lo),$(Cc,Lo,null),e(Lo,gq),e(Lo,ou),e(ou,lu),e(lu,_q),e(ou,bq),e(I,$q),e(I,iu),$(zc,iu,null),e(I,xq),e(I,pu),$(Vc,pu,null),e(I,vq),e(I,cu),$(Uc,cu,null),e(I,yq),e(I,du),$(Mc,du,null),e(I,jq),e(I,mu),$(Rc,mu,null),e(I,wq),e(I,hu),$(Bc,hu,null),e(I,Dq),e(I,fu),$(Hc,fu,null),e(I,kq),e(I,uu),$(Gc,uu,null),e(I,Eq),e(I,gu),$(Wc,gu,null),e(I,Iq),e(I,_u),$(Kc,_u,null),e(I,qq),e(I,bu),$(Yc,bu,null),e(I,Tq),e(I,$u),$(Jc,$u,null),e(I,Nq),e(I,xu),$(Zc,xu,null),e(I,Pq),e(I,Ca),$(Xc,Ca,null),e(Ca,Lq),e(Ca,Q$),e(Q$,Aq),e(Ca,Fq),$(Ao,Ca,null),e(I,Oq),e(I,za),$(Qc,za,null),e(za,Sq),e(za,e1),e(e1,Cq),e(za,zq),$(Fo,za,null),e(I,Vq),e(I,Va),$(ed,Va,null),e(Va,Uq),e(Va,t1),e(t1,Mq),e(Va,Rq),$(Oo,Va,null),e(I,Bq),e(I,Ua),$(td,Ua,null),e(Ua,Hq),e(Ua,a1),e(a1,Gq),e(Ua,Wq),$(So,Ua,null),e(I,Kq),e(I,Ma),$(ad,Ma,null),e(Ma,Yq),e(Ma,mn),e(mn,Jq),e(mn,vu),e(vu,Zq),e(mn,Xq),e(mn,yu),e(yu,Qq),e(mn,eT),e(Ma,tT),e(Ma,hn),e(hn,aT),e(hn,s1),e(s1,sT),e(hn,nT),e(hn,n1),e(n1,rT),e(hn,oT),e(I,lT),e(I,Ra),$(sd,Ra,null),e(Ra,iT),e(Ra,nd),e(nd,pT),e(nd,r1),e(r1,cT),e(nd,dT),e(Ra,mT),$(Co,Ra,null),D(s,H7,w),D(s,zt,w),$(rd,zt,null),e(zt,hT),e(zt,fn),e(fn,fT),e(fn,ju),e(ju,uT),e(fn,gT),e(fn,wu),e(wu,_T),e(fn,bT),e(zt,$T),$(zo,zt,null),D(s,G7,w),D(s,X,w),$(od,X,null),e(X,xT),e(X,o1),e(o1,vT),e(X,yT),e(X,un),e(un,jT),e(un,Du),e(Du,wT),e(un,DT),e(un,ku),e(ku,kT),e(un,ET),e(X,IT),e(X,Ve),e(Ve,qT),e(Ve,l1),e(l1,TT),e(Ve,NT),e(Ve,i1),e(i1,PT),e(Ve,LT),e(Ve,p1),e(p1,AT),e(Ve,FT),e(Ve,c1),e(c1,OT),e(Ve,ST),e(X,CT),e(X,d1),e(d1,zT),e(X,VT),$(Vo,X,null),D(s,W7,w),D(s,he,w),$(ld,he,null),e(he,UT),e(he,m1),e(m1,MT),e(he,RT),e(he,h1),e(h1,BT),e(he,HT),e(he,f1),e(f1,GT),e(he,WT),e(he,Ue),e(Ue,u1),e(u1,KT),e(Ue,YT),e(Ue,g1),e(g1,JT),e(Ue,ZT),e(Ue,_1),e(_1,XT),e(Ue,QT),e(Ue,id),e(id,eN),e(id,Eu),e(Eu,tN),e(id,aN),e(Ue,sN),e(Ue,Vt),e(Vt,nN),e(Vt,Iu),e(Iu,rN),e(Vt,oN),e(Vt,b1),e(b1,lN),e(Vt,iN),e(Vt,qu),e(qu,pN),e(Vt,cN),D(s,K7,w),D(s,fe,w),$(pd,fe,null),e(fe,dN),e(fe,$1),e($1,mN),e(fe,hN),e(fe,x1),e(x1,fN),e(fe,uN),e(fe,v1),e(v1,gN),e(fe,_N),e(fe,Me),e(Me,y1),e(y1,bN),e(Me,$N),e(Me,j1),e(j1,xN),e(Me,vN),e(Me,w1),e(w1,yN),e(Me,jN),e(Me,cd),e(cd,wN),e(cd,Tu),e(Tu,DN),e(cd,kN),e(Me,EN),e(Me,Ut),e(Ut,IN),e(Ut,Nu),e(Nu,qN),e(Ut,TN),e(Ut,D1),e(D1,NN),e(Ut,PN),e(Ut,Pu),e(Pu,LN),e(Ut,AN),D(s,Y7,w),D(s,ue,w),$(dd,ue,null),e(ue,FN),e(ue,k1),e(k1,ON),e(ue,SN),e(ue,E1),e(E1,CN),e(ue,zN),e(ue,I1),e(I1,VN),e(ue,UN),e(ue,Re),e(Re,q1),e(q1,MN),e(Re,RN),e(Re,T1),e(T1,BN),e(Re,HN),e(Re,N1),e(N1,GN),e(Re,WN),e(Re,md),e(md,KN),e(md,Lu),e(Lu,YN),e(md,JN),e(Re,ZN),e(Re,Mt),e(Mt,XN),e(Mt,Au),e(Au,QN),e(Mt,eP),e(Mt,P1),e(P1,tP),e(Mt,aP),e(Mt,Fu),e(Fu,sP),e(Mt,nP),D(s,J7,w),D(s,gn,w),e(gn,Uo),e(Uo,L1),$(hd,L1,null),e(gn,rP),e(gn,A1),e(A1,oP),D(s,Z7,w),D(s,Mo,w),e(Mo,lP),e(Mo,F1),e(F1,iP),e(Mo,pP),D(s,X7,w),D(s,L,w),$(fd,L,null),e(L,cP),e(L,O1),e(O1,dP),e(L,mP),e(L,Ba),$(ud,Ba,null),e(Ba,hP),e(Ba,S1),e(S1,fP),e(Ba,uP),$(Ro,Ba,null),e(L,gP),e(L,Ha),$(gd,Ha,null),e(Ha,_P),e(Ha,C1),e(C1,bP),e(Ha,$P),$(Bo,Ha,null),e(L,xP),e(L,Ga),$(_d,Ga,null),e(Ga,vP),e(Ga,z1),e(z1,yP),e(Ga,jP),$(Ho,Ga,null),e(L,wP),e(L,Wa),$(bd,Wa,null),e(Wa,DP),e(Wa,$d),e($d,kP),e($d,Go),e(Go,EP),e(Go,V1),e(V1,IP),e(Go,qP),e($d,TP),e(Wa,NP),$(Wo,Wa,null),e(L,PP),e(L,Ka),$(xd,Ka,null),e(Ka,LP),e(Ka,U1),e(U1,AP),e(Ka,FP),$(Ko,Ka,null),e(L,OP),e(L,Ya),$(vd,Ya,null),e(Ya,SP),e(Ya,M1),e(M1,CP),e(Ya,zP),$(Yo,Ya,null),e(L,VP),e(L,dt),$(yd,dt,null),e(dt,UP),e(dt,R1),e(R1,MP),e(dt,RP),e(dt,B1),e(B1,BP),e(dt,HP),$(Jo,dt,null),e(L,GP),e(L,Ja),$(jd,Ja,null),e(Ja,WP),e(Ja,H1),e(H1,KP),e(Ja,YP),$(Zo,Ja,null),e(L,JP),e(L,Za),$(wd,Za,null),e(Za,ZP),e(Za,G1),e(G1,XP),e(Za,QP),$(Xo,Za,null),e(L,eL),e(L,Xa),$(Dd,Xa,null),e(Xa,tL),e(Xa,W1),e(W1,aL),e(Xa,sL),$(Qo,Xa,null),e(L,nL),e(L,mt),$(kd,mt,null),e(mt,rL),e(mt,K1),e(K1,oL),e(mt,lL),e(mt,Y1),e(Y1,iL),e(mt,pL),$(el,mt,null),e(L,cL),e(L,ke),$(Ed,ke,null),e(ke,dL),e(ke,J1),e(J1,mL),e(ke,hL),e(ke,Z1),e(Z1,fL),e(ke,uL),e(ke,X1),e(X1,gL),e(ke,_L),$(tl,ke,null),e(L,bL),e(L,Ee),$(Id,Ee,null),e(Ee,$L),e(Ee,qd),e(qd,xL),e(qd,Q1),e(Q1,vL),e(qd,yL),e(Ee,jL),e(Ee,Be),e(Be,wL),e(Be,ex),e(ex,DL),e(Be,kL),e(Be,tx),e(tx,EL),e(Be,IL),e(Be,ax),e(ax,qL),e(Be,TL),e(Be,sx),e(sx,NL),e(Be,PL),e(Ee,LL),e(Ee,nx),e(nx,AL),e(Ee,FL),$(al,Ee,null),e(L,OL),e(L,ht),$(Td,ht,null),e(ht,SL),e(ht,Nd),e(Nd,CL),e(Nd,rx),e(rx,zL),e(Nd,VL),e(ht,UL),e(ht,Ou),e(Ou,ML),e(Ou,ox),e(ox,RL),e(ht,BL),$(sl,ht,null),e(L,HL),e(L,nl),$(Pd,nl,null),e(nl,GL),e(nl,_n),e(_n,WL),e(_n,lx),e(lx,KL),e(_n,YL),e(_n,ix),e(ix,JL),e(_n,ZL),e(L,XL),e(L,Ie),$(Ld,Ie,null),e(Ie,QL),e(Ie,Rt),e(Rt,eA),e(Rt,px),e(px,tA),e(Rt,aA),e(Rt,cx),e(cx,sA),e(Rt,nA),e(Rt,dx),e(dx,rA),e(Rt,oA),e(Ie,lA),e(Ie,Ad),e(Ad,iA),e(Ad,Su),e(Su,pA),e(Ad,cA),e(Ie,dA),e(Ie,bn),e(bn,mA),e(bn,Cu),e(Cu,hA),e(bn,fA),e(bn,mx),e(mx,uA),e(bn,gA),e(Ie,_A),$(rl,Ie,null),e(L,bA),e(L,qe),$(Fd,qe,null),e(qe,$A),e(qe,$n),e($n,xA),e($n,hx),e(hx,vA),e($n,yA),e($n,fx),e(fx,jA),e($n,wA),e(qe,DA),e(qe,xn),e(xn,kA),e(xn,zu),e(zu,EA),e(xn,IA),e(xn,Vu),e(Vu,qA),e(xn,TA),e(qe,NA),e(qe,vn),e(vn,PA),e(vn,ux),e(ux,LA),e(vn,AA),e(vn,gx),e(gx,FA),e(vn,OA),e(qe,SA),$(ol,qe,null),e(L,CA),e(L,Qa),$(Od,Qa,null),e(Qa,zA),e(Qa,_x),e(_x,VA),e(Qa,UA),$(ll,Qa,null),e(L,MA),e(L,ft),$(Sd,ft,null),e(ft,RA),e(ft,bx),e(bx,BA),e(ft,HA),e(ft,Bt),e(Bt,GA),e(Bt,Uu),e(Uu,WA),e(Bt,KA),e(Bt,$x),e($x,YA),e(Bt,JA),e(Bt,xx),e(xx,ZA),e(Bt,XA),e(ft,QA),$(il,ft,null),e(L,eF),e(L,es),$(Cd,es,null),e(es,tF),e(es,vx),e(vx,aF),e(es,sF),$(pl,es,null),e(L,nF),e(L,Te),$(zd,Te,null),e(Te,rF),e(Te,yx),e(yx,oF),e(Te,lF),e(Te,jx),e(jx,iF),e(Te,pF),e(Te,yn),e(yn,cF),e(yn,Mu),e(Mu,dF),e(yn,mF),e(yn,wx),e(wx,hF),e(yn,fF),e(Te,uF),$(cl,Te,null),e(L,gF),e(L,Ne),$(Vd,Ne,null),e(Ne,_F),e(Ne,Dx),e(Dx,bF),e(Ne,$F),e(Ne,jn),e(jn,xF),e(jn,Ru),e(Ru,vF),e(jn,yF),e(jn,kx),e(kx,jF),e(jn,wF),e(Ne,DF),e(Ne,Ud),e(Ud,Ex),e(Ex,kF),e(Ud,EF),e(Ud,Ix),e(Ix,IF),e(Ne,qF),$(dl,Ne,null),e(L,TF),e(L,ts),$(Md,ts,null),e(ts,NF),e(ts,qx),e(qx,PF),e(ts,LF),$(ml,ts,null),e(L,AF),e(L,as),$(Rd,as,null),e(as,FF),e(as,Bd),e(Bd,OF),e(Bd,Tx),e(Tx,SF),e(Bd,CF),e(as,zF),$(hl,as,null),e(L,VF),e(L,Pe),$(Hd,Pe,null),e(Pe,UF),e(Pe,wn),e(wn,MF),e(wn,Nx),e(Nx,RF),e(wn,BF),e(wn,Px),e(Px,HF),e(wn,GF),e(Pe,WF),e(Pe,Lx),e(Lx,KF),e(Pe,YF),e(Pe,Ht),e(Ht,JF),e(Ht,Bu),e(Bu,ZF),e(Ht,XF),e(Ht,Hu),e(Hu,QF),e(Ht,eO),e(Ht,Ax),e(Ax,tO),e(Ht,aO),e(Pe,sO),$(fl,Pe,null),e(L,nO),e(L,oe),$(Gd,oe,null),e(oe,rO),e(oe,Dn),e(Dn,oO),e(Dn,Gu),e(Gu,lO),e(Dn,iO),e(Dn,Fx),e(Fx,pO),e(Dn,cO),e(oe,dO),e(oe,kn),e(kn,mO),e(kn,Wu),e(Wu,hO),e(kn,fO),e(kn,Ku),e(Ku,uO),e(kn,gO),e(oe,_O),e(oe,Wd),e(Wd,bO),e(Wd,Ox),e(Ox,$O),e(Wd,xO),e(oe,vO),$(ul,oe,null),e(oe,yO),$(gl,oe,null),e(L,jO),e(L,ss),$(Kd,ss,null),e(ss,wO),e(ss,Gt),e(Gt,DO),e(Gt,Sx),e(Sx,kO),e(Gt,EO),e(Gt,Yu),e(Yu,IO),e(Gt,qO),e(Gt,Cx),e(Cx,TO),e(Gt,NO),e(ss,PO),$(_l,ss,null),e(L,LO),e(L,ns),$(Yd,ns,null),e(ns,AO),e(ns,zx),e(zx,FO),e(ns,OO),$(bl,ns,null),e(L,SO),e(L,rs),$(Jd,rs,null),e(rs,CO),e(rs,Vx),e(Vx,zO),e(rs,VO),$($l,rs,null),e(L,UO),e(L,os),$(Zd,os,null),e(os,MO),e(os,Ux),e(Ux,RO),e(os,BO),$(xl,os,null),e(L,HO),e(L,ls),$(Xd,ls,null),e(ls,GO),e(ls,Mx),e(Mx,WO),e(ls,KO),$(vl,ls,null),e(L,YO),e(L,is),$(Qd,is,null),e(is,JO),e(is,En),e(En,ZO),e(En,Ju),e(Ju,XO),e(En,QO),e(En,Zu),e(Zu,eS),e(En,tS),e(is,aS),e(is,In),e(In,sS),e(In,Rx),e(Rx,nS),e(In,rS),e(In,Bx),e(Bx,oS),e(In,lS),D(s,Q7,w),D(s,Xu,w),D(s,ew,w),D(s,qn,w),e(qn,yl),e(yl,Hx),$(em,Hx,null),e(qn,iS),e(qn,Gx),e(Gx,pS),D(s,tw,w),D(s,jl,w),e(jl,cS),e(jl,Qu),e(Qu,dS),e(jl,mS),D(s,aw,w),D(s,F,w),$(tm,F,null),e(F,hS),e(F,Wx),e(Wx,fS),e(F,uS),e(F,ps),$(am,ps,null),e(ps,gS),e(ps,Kx),e(Kx,_S),e(ps,bS),$(wl,ps,null),e(F,$S),e(F,cs),$(sm,cs,null),e(cs,xS),e(cs,Yx),e(Yx,vS),e(cs,yS),$(Dl,cs,null),e(F,jS),e(F,ds),$(nm,ds,null),e(ds,wS),e(ds,Jx),e(Jx,DS),e(ds,kS),$(kl,ds,null),e(F,ES),e(F,eg),$(rm,eg,null),e(F,IS),e(F,Le),$(om,Le,null),e(Le,qS),e(Le,Zx),e(Zx,TS),e(Le,NS),e(Le,lm),e(lm,PS),e(lm,Xx),e(Xx,LS),e(lm,AS),e(Le,FS),e(Le,Tn),e(Tn,Qx),e(Qx,OS),e(Tn,SS),e(Tn,ev),e(ev,CS),e(Tn,zS),e(Tn,ge),e(ge,VS),e(ge,tv),e(tv,US),e(ge,MS),e(ge,av),e(av,RS),e(ge,BS),e(ge,sv),e(sv,HS),e(ge,GS),e(ge,nv),e(nv,WS),e(ge,KS),e(ge,rv),e(rv,YS),e(ge,JS),e(Le,ZS),$(El,Le,null),e(F,XS),e(F,ms),$(im,ms,null),e(ms,QS),e(ms,ov),e(ov,eC),e(ms,tC),$(Il,ms,null),e(F,aC),e(F,hs),$(pm,hs,null),e(hs,sC),e(hs,lv),e(lv,nC),e(hs,rC),$(ql,hs,null),e(F,oC),e(F,le),$(cm,le,null),e(le,lC),e(le,iv),e(iv,iC),e(le,pC),e(le,pv),e(pv,cC),e(le,dC),e(le,dm),e(dm,mC),e(dm,cv),e(cv,hC),e(dm,fC),e(le,uC),e(le,Nn),e(Nn,gC),e(Nn,tg),e(tg,_C),e(Nn,bC),e(Nn,ag),e(ag,$C),e(Nn,xC),e(le,vC),$(Tl,le,null),e(F,yC),e(F,ut),$(mm,ut,null),e(ut,jC),e(ut,hm),e(hm,wC),e(hm,dv),e(dv,DC),e(hm,kC),e(ut,EC),e(ut,mv),e(mv,IC),e(ut,qC),e(ut,hv),e(hv,fv),e(fv,fm),e(fm,uv),e(uv,TC),e(fm,NC),$(um,fm,null),e(F,PC),e(F,fs),$(gm,fs,null),e(fs,LC),e(fs,_m),e(_m,AC),e(_m,gv),e(gv,FC),e(_m,OC),e(fs,SC),$(Nl,fs,null),e(F,CC),e(F,Pl),$(bm,Pl,null),e(Pl,zC),e(Pl,sg),e(sg,ng),e(ng,VC),e(sg,UC),e(F,MC),e(F,Ll),$($m,Ll,null),e(Ll,RC),e(Ll,rg),e(rg,og),e(og,BC),e(rg,HC),e(F,GC),e(F,lg),$(xm,lg,null),e(F,WC),e(F,ig),$(vm,ig,null),e(F,KC),e(F,pg),$(ym,pg,null),e(F,YC),e(F,cg),$(jm,cg,null),e(F,JC),e(F,dg),$(wm,dg,null),e(F,ZC),e(F,mg),$(Dm,mg,null),e(F,XC),e(F,hg),$(km,hg,null),e(F,QC),e(F,fg),$(Em,fg,null),e(F,ez),e(F,ug),$(Im,ug,null),e(F,tz),e(F,gg),$(qm,gg,null),e(F,az),e(F,_g),$(Tm,_g,null),e(F,sz),e(F,bg),$(Nm,bg,null),e(F,nz),e(F,$g),$(Pm,$g,null),D(s,sw,w),D(s,Pn,w),e(Pn,Al),e(Al,_v),$(Lm,_v,null),e(Pn,rz),e(Pn,bv),e(bv,oz),D(s,nw,w),D(s,Fl,w),e(Fl,lz),e(Fl,$v),e($v,iz),e(Fl,pz),D(s,rw,w),D(s,U,w),$(Am,U,null),e(U,cz),e(U,Ae),$(Fm,Ae,null),e(Ae,dz),e(Ae,xv),e(xv,mz),e(Ae,hz),e(Ae,Om),e(Om,fz),e(Om,vv),e(vv,uz),e(Om,gz),e(Ae,_z),e(Ae,Ln),e(Ln,yv),e(yv,bz),e(Ln,$z),e(Ln,jv),e(jv,xz),e(Ln,vz),e(Ln,_e),e(_e,yz),e(_e,wv),e(wv,jz),e(_e,wz),e(_e,Dv),e(Dv,Dz),e(_e,kz),e(_e,kv),e(kv,Ez),e(_e,Iz),e(_e,Ev),e(Ev,qz),e(_e,Tz),e(_e,Iv),e(Iv,Nz),e(_e,Pz),e(Ae,Lz),$(Ol,Ae,null),e(U,Az),e(U,us),$(Sm,us,null),e(us,Fz),e(us,qv),e(qv,Oz),e(us,Sz),$(Sl,us,null),e(U,Cz),e(U,ie),$(Cm,ie,null),e(ie,zz),e(ie,Tv),e(Tv,Vz),e(ie,Uz),e(ie,Nv),e(Nv,Mz),e(ie,Rz),e(ie,zm),e(zm,Bz),e(zm,Pv),e(Pv,Hz),e(zm,Gz),e(ie,Wz),e(ie,An),e(An,Kz),e(An,xg),e(xg,Yz),e(An,Jz),e(An,vg),e(vg,Zz),e(An,Xz),e(ie,Qz),$(Cl,ie,null),e(U,eV),e(U,gs),$(Vm,gs,null),e(gs,tV),e(gs,Lv),e(Lv,aV),e(gs,sV),$(zl,gs,null),e(U,nV),e(U,_s),$(Um,_s,null),e(_s,rV),e(_s,Av),e(Av,oV),e(_s,lV),$(Vl,_s,null),e(U,iV),e(U,bs),$(Mm,bs,null),e(bs,pV),e(bs,Fv),e(Fv,cV),e(bs,dV),$(Ul,bs,null),e(U,mV),e(U,gt),$(Rm,gt,null),e(gt,hV),e(gt,Ov),e(Ov,fV),e(gt,uV),e(gt,Sv),e(Sv,gV),e(gt,_V),e(gt,Cv),e(Cv,zv),e(zv,Bm),e(Bm,Vv),e(Vv,bV),e(Bm,$V),$(Hm,Bm,null),e(U,xV),e(U,$s),$(Gm,$s,null),e($s,vV),e($s,Uv),e(Uv,yV),e($s,jV),$(Ml,$s,null),e(U,wV),e(U,xs),$(Wm,xs,null),e(xs,DV),e(xs,Mv),e(Mv,kV),e(xs,EV),$(Rl,xs,null),D(s,ow,w),D(s,Fn,w),e(Fn,Bl),e(Bl,Rv),$(Km,Rv,null),e(Fn,IV),e(Fn,Bv),e(Bv,qV),D(s,lw,w),D(s,z,w),$(Ym,z,null),e(z,TV),e(z,Hv),e(Hv,NV),e(z,PV),e(z,Jm),e(Jm,LV),e(Jm,Gv),e(Gv,AV),e(Jm,FV),e(z,OV),e(z,yg),e(yg,Wv),e(Wv,SV),e(yg,CV),e(z,zV),e(z,G),e(G,Kv),e(Kv,vs),e(vs,VV),e(vs,jg),e(jg,UV),e(vs,MV),e(vs,Yv),e(Yv,RV),e(vs,BV),e(vs,Jv),e(Jv,HV),e(G,GV),e(G,Zv),e(Zv,Zm),e(Zm,WV),e(Zm,wg),e(wg,KV),e(Zm,YV),e(G,JV),e(G,Xv),e(Xv,Xm),e(Xm,ZV),e(Xm,Qv),e(Qv,XV),e(Xm,QV),e(G,eU),e(G,Qm),e(Qm,He),e(He,tU),e(He,ey),e(ey,aU),e(He,sU),e(He,Dg),e(Dg,nU),e(He,rU),e(He,ty),e(ty,oU),e(He,lU),e(He,kg),e(kg,iU),e(He,pU),e(Qm,cU),$(Hl,Qm,null),e(G,dU),e(G,ay),e(ay,Ge),e(Ge,mU),e(Ge,Eg),e(Eg,hU),e(Ge,fU),e(Ge,Ig),e(Ig,uU),e(Ge,gU),e(Ge,qg),e(qg,_U),e(Ge,bU),e(Ge,Tg),e(Tg,$U),e(Ge,xU),e(G,vU),e(G,sy),e(sy,eh),e(eh,yU),e(eh,Ng),e(Ng,jU),e(eh,wU),e(G,DU),e(G,ny),e(ny,Wt),e(Wt,kU),e(Wt,Pg),e(Pg,EU),e(Wt,IU),e(Wt,ry),e(ry,qU),e(Wt,TU),e(Wt,oy),e(oy,NU),e(Wt,PU),e(G,LU),e(G,ly),e(ly,Gl),e(Gl,Lg),e(Lg,AU),e(Gl,FU),e(Gl,Ag),e(Ag,OU),e(Gl,SU),e(z,CU),e(z,Wl),$(th,Wl,null),e(Wl,zU),e(Wl,iy),e(iy,VU),e(z,UU),e(z,Kl),$(ah,Kl,null),e(Kl,MU),e(Kl,py),e(py,RU),e(z,BU),e(z,Yl),$(sh,Yl,null),e(Yl,HU),e(Yl,cy),e(cy,GU),e(z,WU),e(z,Jl),$(nh,Jl,null),e(Jl,KU),e(Jl,dy),e(dy,YU),e(z,JU),e(z,Zl),$(rh,Zl,null),e(Zl,ZU),e(Zl,my),e(my,XU),e(z,QU),e(z,Xl),$(oh,Xl,null),e(Xl,eM),e(Xl,hy),e(hy,tM),e(z,aM),e(z,ys),$(lh,ys,null),e(ys,sM),e(ys,fy),e(fy,nM),e(ys,rM),e(ys,uy),e(uy,oM),e(z,lM),e(z,Ql),$(ih,Ql,null),e(Ql,iM),e(Ql,gy),e(gy,pM),e(z,cM),e(z,Fe),$(ph,Fe,null),e(Fe,dM),e(Fe,_y),e(_y,mM),e(Fe,hM),e(Fe,by),e(by,fM),e(Fe,uM),e(Fe,Kt),e(Kt,gM),e(Kt,Fg),e(Fg,_M),e(Kt,bM),e(Kt,Og),e(Og,$M),e(Kt,xM),e(Kt,Sg),e(Sg,vM),e(Kt,yM),e(Fe,jM),$(ei,Fe,null),e(z,wM),e(z,_t),$(ch,_t,null),e(_t,DM),e(_t,$y),e($y,kM),e(_t,EM),e(_t,xy),e(xy,IM),e(_t,qM),$(ti,_t,null),D(s,iw,w),D(s,On,w),$(dh,On,null),e(On,TM),e(On,vy),e(vy,NM),D(s,pw,w),D(s,Q,w),$(mh,Q,null),e(Q,PM),e(Q,yy),e(yy,LM),e(Q,AM),e(Q,hh),e(hh,FM),e(hh,jy),e(jy,OM),e(hh,SM),e(Q,CM),e(Q,Sn),e(Sn,Cg),e(Cg,wy),e(wy,zM),e(Cg,VM),e(Sn,UM),e(Sn,zg),e(zg,Dy),e(Dy,MM),e(zg,RM),e(Sn,BM),e(Sn,Vg),e(Vg,ky),e(ky,HM),e(Vg,GM),e(Q,WM),e(Q,ai),$(fh,ai,null),e(ai,KM),e(ai,Ey),e(Ey,YM),e(Q,JM),e(Q,si),$(uh,si,null),e(si,ZM),e(si,Iy),e(Iy,XM),D(s,cw,w),D(s,Yt,w),$(gh,Yt,null),e(Yt,QM),e(Yt,qy),e(qy,eR),e(Yt,tR),e(Yt,Ty),e(Ty,aR),D(s,dw,w),D(s,ee,w),$(_h,ee,null),e(ee,sR),e(ee,Ug),e(Ug,Ny),e(Ny,nR),e(Ug,rR),e(ee,oR),e(ee,Py),e(Py,lR),e(ee,iR),e(ee,bh),e(bh,pR),e(bh,Ly),e(Ly,cR),e(bh,dR),e(ee,mR),$(ni,ee,null),e(ee,hR),e(ee,ri),$($h,ri,null),e(ri,fR),e(ri,Ay),e(Ay,uR),D(s,mw,w),D(s,te,w),$(xh,te,null),e(te,gR),e(te,Mg),e(Mg,Fy),e(Fy,_R),e(Mg,bR),e(te,$R),e(te,Oy),e(Oy,xR),e(te,vR),e(te,Sy),e(Sy,yR),e(te,jR),$(oi,te,null),e(te,wR),e(te,li),$(vh,li,null),e(li,DR),e(li,Cy),e(Cy,kR),D(s,hw,w),D(s,yh,w),$(jh,yh,null),D(s,fw,w),D(s,wh,w),$(Dh,wh,null),D(s,uw,w),D(s,kh,w),$(Eh,kh,null),D(s,gw,w),D(s,Ih,w),$(qh,Ih,null),D(s,_w,w),D(s,M,w),$(Th,M,null),e(M,ER),e(M,zy),e(zy,IR),e(M,qR),e(M,Vy),e(Vy,TR),e(M,NR),e(M,Cn),e(Cn,Uy),e(Uy,Nh),e(Nh,PR),e(Nh,My),e(My,LR),e(Nh,AR),e(Cn,FR),e(Cn,zn),e(zn,Ph),e(Ph,OR),e(Ph,Ry),e(Ry,SR),e(Ph,CR),e(zn,zR),e(zn,Lh),e(Lh,By),e(By,VR),e(Lh,UR),e(Lh,Hy),e(Hy,MR),e(zn,RR),e(zn,Gy),e(Gy,BR),e(Cn,HR),e(Cn,Vn),e(Vn,Ah),e(Ah,GR),e(Ah,Wy),e(Wy,WR),e(Ah,KR),e(Vn,YR),e(Vn,Un),e(Un,Ky),e(Ky,JR),e(Un,ZR),e(Un,Yy),e(Yy,XR),e(Un,QR),e(Un,Jy),e(Jy,eB),e(Vn,tB),e(Vn,Zy),e(Zy,aB),e(M,sB),e(M,js),$(Fh,js,null),e(js,nB),e(js,Xy),e(Xy,rB),e(js,oB),e(js,Jt),e(Jt,Qy),e(Qy,lB),e(Jt,iB),e(Jt,ej),e(ej,pB),e(Jt,cB),e(Jt,tj),e(tj,dB),e(Jt,mB),e(Jt,aj),e(aj,hB),e(M,fB),e(M,ii),$(Oh,ii,null),e(ii,uB),e(ii,sj),e(sj,gB),e(M,_B),e(M,pi),$(Sh,pi,null),e(pi,bB),e(pi,nj),e(nj,$B),e(M,xB),e(M,ci),$(Ch,ci,null),e(ci,vB),e(ci,rj),e(rj,yB),e(M,jB),e(M,di),$(zh,di,null),e(di,wB),e(di,oj),e(oj,DB),D(s,bw,w),D(s,R,w),$(Vh,R,null),e(R,kB),e(R,lj),e(lj,EB),e(R,IB),e(R,ij),e(ij,qB),e(R,TB),e(R,Zt),e(Zt,pj),e(pj,Uh),e(Uh,NB),e(Uh,cj),e(cj,PB),e(Uh,LB),e(Zt,AB),e(Zt,Mn),e(Mn,Mh),e(Mh,FB),e(Mh,dj),e(dj,OB),e(Mh,SB),e(Mn,CB),e(Mn,Rh),e(Rh,mj),e(mj,zB),e(Rh,VB),e(Rh,hj),e(hj,UB),e(Mn,MB),e(Mn,fj),e(fj,RB),e(Zt,BB),e(Zt,uj),e(uj,Bh),e(Bh,HB),e(Bh,gj),e(gj,GB),e(Bh,WB),e(Zt,KB),e(Zt,_j),e(_j,Hh),e(Hh,YB),e(Hh,bj),e(bj,JB),e(Hh,ZB),e(R,XB),e(R,ws),$(Gh,ws,null),e(ws,QB),e(ws,$j),e($j,eH),e(ws,tH),e(ws,We),e(We,xj),e(xj,aH),e(We,sH),e(We,vj),e(vj,nH),e(We,rH),e(We,yj),e(yj,oH),e(We,lH),e(We,jj),e(jj,iH),e(We,pH),e(We,wj),e(wj,cH),e(R,dH),e(R,mi),$(Wh,mi,null),e(mi,mH),e(mi,Dj),e(Dj,hH),e(R,fH),e(R,hi),$(Kh,hi,null),e(hi,uH),e(hi,kj),e(kj,gH),e(R,_H),e(R,fi),$(Yh,fi,null),e(fi,bH),e(fi,Ej),e(Ej,$H),e(R,xH),e(R,ui),$(Jh,ui,null),e(ui,vH),e(ui,Ij),e(Ij,yH),D(s,$w,w),D(s,Rn,w),e(Rn,gi),e(gi,qj),$(Zh,qj,null),e(Rn,jH),e(Rn,Tj),e(Tj,wH),D(s,xw,w),D(s,ae,w),$(Xh,ae,null),e(ae,DH),e(ae,Nj),e(Nj,kH),e(ae,EH),e(ae,Rg),e(Rg,Pj),e(Pj,IH),e(Rg,qH),e(ae,TH),e(ae,Lj),e(Lj,NH),e(ae,PH),e(ae,_i),$(Qh,_i,null),e(_i,LH),e(_i,ef),e(ef,AH),e(ef,Aj),e(Aj,FH),e(ef,OH),e(ae,SH),e(ae,bi),$(tf,bi,null),e(bi,CH),e(bi,Xt),e(Xt,zH),e(Xt,Fj),e(Fj,VH),e(Xt,UH),e(Xt,Oj),e(Oj,MH),e(Xt,RH),e(Xt,Sj),e(Sj,BH),e(Xt,HH),D(s,vw,w),D(s,Bn,w),e(Bn,$i),e($i,Cj),$(af,Cj,null),e(Bn,GH),e(Bn,zj),e(zj,WH),D(s,yw,w),D(s,Ds,w),e(Ds,KH),e(Ds,Vj),e(Vj,YH),e(Ds,JH),e(Ds,Bg),e(Bg,ZH),e(Ds,XH),D(s,jw,w),D(s,se,w),$(sf,se,null),e(se,QH),e(se,Uj),e(Uj,eG),e(se,tG),e(se,xi),$(nf,xi,null),e(xi,aG),e(xi,Mj),e(Mj,sG),e(se,nG),e(se,vi),$(rf,vi,null),e(vi,rG),e(vi,Rj),e(Rj,oG),e(se,lG),e(se,ks),$(of,ks,null),e(ks,iG),e(ks,Bj),e(Bj,pG),e(ks,cG),e(ks,Hj),e(Hj,dG),e(se,mG),e(se,yi),$(lf,yi,null),e(yi,hG),e(yi,Gj),e(Gj,fG),D(s,ww,w),D(s,Hn,w),e(Hn,ji),e(ji,Wj),$(pf,Wj,null),e(Hn,uG),e(Hn,Kj),e(Kj,gG),D(s,Dw,w),D(s,S,w),$(cf,S,null),e(S,_G),e(S,Yj),e(Yj,bG),e(S,$G),e(S,Jj),e(Jj,xG),e(S,vG),e(S,Qt),e(Qt,yG),e(Qt,Zj),e(Zj,jG),e(Qt,wG),e(Qt,Xj),e(Xj,DG),e(Qt,kG),e(Qt,Qj),e(Qj,EG),e(Qt,IG),e(S,qG),e(S,e0),e(e0,TG),e(S,NG),e(S,t0),e(t0,PG),e(S,LG),e(S,a0),e(a0,AG),e(S,FG),e(S,bt),e(bt,s0),e(s0,OG),e(bt,SG),e(bt,df),e(df,CG),e(bt,zG),e(bt,n0),e(n0,VG),e(bt,UG),e(bt,mf),e(mf,MG),e(bt,RG),e(S,BG),e(S,r0),e(r0,HG),e(S,GG),e(S,o0),e(o0,WG),e(S,KG),$(wi,S,null),e(S,YG),e(S,Gn),e(Gn,JG),e(Gn,l0),e(l0,ZG),e(Gn,XG),e(Gn,i0),e(i0,QG),e(Gn,eW),e(S,tW),$(Di,S,null),e(S,aW),e(S,ea),e(ea,sW),e(ea,p0),e(p0,nW),e(ea,rW),e(ea,c0),e(c0,oW),e(ea,lW),e(ea,d0),e(d0,iW),e(ea,pW),e(S,cW),$(ki,S,null),e(S,dW),e(S,Wn),e(Wn,mW),e(Wn,m0),e(m0,hW),e(Wn,fW),e(Wn,h0),e(h0,uW),e(Wn,gW),e(S,_W),$(Ei,S,null),e(S,bW),e(S,f0),e(f0,$W),e(S,xW),$(Ii,S,null),e(S,vW),e(S,qi),e(qi,Ti),e(Ti,u0),$(hf,u0,null),e(qi,yW),e(qi,g0),e(g0,jW),e(S,wW),e(S,W),e(W,DW),e(W,_0),e(_0,kW),e(W,EW),e(W,b0),e(b0,IW),e(W,qW),e(W,$0),e($0,TW),e(W,NW),e(W,x0),e(x0,PW),e(W,LW),e(W,v0),e(v0,AW),e(W,FW),e(W,y0),e(y0,OW),e(W,SW),e(W,j0),e(j0,CW),e(W,zW),D(s,kw,w),D(s,Kn,w),$(ff,Kn,null),e(Kn,VW),e(Kn,Yn),e(Yn,UW),e(Yn,w0),e(w0,MW),e(Yn,RW),e(Yn,D0),e(D0,BW),e(Yn,HW),D(s,Ew,w),D(s,Jn,w),$(uf,Jn,null),e(Jn,GW),e(Jn,k0),e(k0,WW),D(s,Iw,w),D(s,Zn,w),e(Zn,Ni),e(Ni,E0),$(gf,E0,null),e(Zn,KW),e(Zn,I0),e(I0,YW),D(s,qw,w),D(s,Xn,w),$(_f,Xn,null),e(Xn,JW),e(Xn,q0),e(q0,ZW),Tw=!0},p(s,[w]){const bf={};w&2&&(bf.$$scope={dirty:w,ctx:s}),vr.$set(bf);const T0={};w&2&&(T0.$$scope={dirty:w,ctx:s}),yr.$set(T0);const N0={};w&2&&(N0.$$scope={dirty:w,ctx:s}),Dr.$set(N0);const P0={};w&2&&(P0.$$scope={dirty:w,ctx:s}),kr.$set(P0);const $f={};w&2&&($f.$$scope={dirty:w,ctx:s}),qr.$set($f);const L0={};w&2&&(L0.$$scope={dirty:w,ctx:s}),Nr.$set(L0);const A0={};w&2&&(A0.$$scope={dirty:w,ctx:s}),Pr.$set(A0);const F0={};w&2&&(F0.$$scope={dirty:w,ctx:s}),Lr.$set(F0);const be={};w&2&&(be.$$scope={dirty:w,ctx:s}),Fr.$set(be);const O0={};w&2&&(O0.$$scope={dirty:w,ctx:s}),Or.$set(O0);const Hg={};w&2&&(Hg.$$scope={dirty:w,ctx:s}),Sr.$set(Hg);const S0={};w&2&&(S0.$$scope={dirty:w,ctx:s}),Cr.$set(S0);const C0={};w&2&&(C0.$$scope={dirty:w,ctx:s}),zr.$set(C0);const Ke={};w&2&&(Ke.$$scope={dirty:w,ctx:s}),Vr.$set(Ke);const xf={};w&2&&(xf.$$scope={dirty:w,ctx:s}),Ur.$set(xf);const z0={};w&2&&(z0.$$scope={dirty:w,ctx:s}),Mr.$set(z0);const V0={};w&2&&(V0.$$scope={dirty:w,ctx:s}),Rr.$set(V0);const U0={};w&2&&(U0.$$scope={dirty:w,ctx:s}),Br.$set(U0);const Qn={};w&2&&(Qn.$$scope={dirty:w,ctx:s}),Hr.$set(Qn);const er={};w&2&&(er.$$scope={dirty:w,ctx:s}),Gr.$set(er);const M0={};w&2&&(M0.$$scope={dirty:w,ctx:s}),Kr.$set(M0);const R0={};w&2&&(R0.$$scope={dirty:w,ctx:s}),Yr.$set(R0);const vf={};w&2&&(vf.$$scope={dirty:w,ctx:s}),Jr.$set(vf);const B0={};w&2&&(B0.$$scope={dirty:w,ctx:s}),Zr.$set(B0);const H0={};w&2&&(H0.$$scope={dirty:w,ctx:s}),Xr.$set(H0);const G0={};w&2&&(G0.$$scope={dirty:w,ctx:s}),eo.$set(G0);const yf={};w&2&&(yf.$$scope={dirty:w,ctx:s}),to.$set(yf);const W0={};w&2&&(W0.$$scope={dirty:w,ctx:s}),ao.$set(W0);const q={};w&2&&(q.$$scope={dirty:w,ctx:s}),so.$set(q);const K0={};w&2&&(K0.$$scope={dirty:w,ctx:s}),no.$set(K0);const ta={};w&2&&(ta.$$scope={dirty:w,ctx:s}),ro.$set(ta);const Y0={};w&2&&(Y0.$$scope={dirty:w,ctx:s}),oo.$set(Y0);const J0={};w&2&&(J0.$$scope={dirty:w,ctx:s}),lo.$set(J0);const Z0={};w&2&&(Z0.$$scope={dirty:w,ctx:s}),io.$set(Z0);const aa={};w&2&&(aa.$$scope={dirty:w,ctx:s}),po.$set(aa);const X0={};w&2&&(X0.$$scope={dirty:w,ctx:s}),co.$set(X0);const Q0={};w&2&&(Q0.$$scope={dirty:w,ctx:s}),mo.$set(Q0);const e7={};w&2&&(e7.$$scope={dirty:w,ctx:s}),ho.$set(e7);const jf={};w&2&&(jf.$$scope={dirty:w,ctx:s}),fo.$set(jf);const t7={};w&2&&(t7.$$scope={dirty:w,ctx:s}),go.$set(t7);const wf={};w&2&&(wf.$$scope={dirty:w,ctx:s}),_o.$set(wf);const a7={};w&2&&(a7.$$scope={dirty:w,ctx:s}),bo.$set(a7);const Ye={};w&2&&(Ye.$$scope={dirty:w,ctx:s}),$o.$set(Ye);const sa={};w&2&&(sa.$$scope={dirty:w,ctx:s}),xo.$set(sa);const s7={};w&2&&(s7.$$scope={dirty:w,ctx:s}),vo.$set(s7);const n7={};w&2&&(n7.$$scope={dirty:w,ctx:s}),jo.$set(n7);const r7={};w&2&&(r7.$$scope={dirty:w,ctx:s}),wo.$set(r7);const Df={};w&2&&(Df.$$scope={dirty:w,ctx:s}),Ao.$set(Df);const o7={};w&2&&(o7.$$scope={dirty:w,ctx:s}),Fo.$set(o7);const kf={};w&2&&(kf.$$scope={dirty:w,ctx:s}),Oo.$set(kf);const l7={};w&2&&(l7.$$scope={dirty:w,ctx:s}),So.$set(l7);const Ef={};w&2&&(Ef.$$scope={dirty:w,ctx:s}),Co.$set(Ef);const na={};w&2&&(na.$$scope={dirty:w,ctx:s}),zo.$set(na);const i7={};w&2&&(i7.$$scope={dirty:w,ctx:s}),Vo.$set(i7);const p7={};w&2&&(p7.$$scope={dirty:w,ctx:s}),Ro.$set(p7);const c7={};w&2&&(c7.$$scope={dirty:w,ctx:s}),Bo.$set(c7);const tr={};w&2&&(tr.$$scope={dirty:w,ctx:s}),Ho.$set(tr);const d7={};w&2&&(d7.$$scope={dirty:w,ctx:s}),Wo.$set(d7);const ar={};w&2&&(ar.$$scope={dirty:w,ctx:s}),Ko.$set(ar);const m7={};w&2&&(m7.$$scope={dirty:w,ctx:s}),Yo.$set(m7);const sr={};w&2&&(sr.$$scope={dirty:w,ctx:s}),Jo.$set(sr);const h7={};w&2&&(h7.$$scope={dirty:w,ctx:s}),Zo.$set(h7);const nr={};w&2&&(nr.$$scope={dirty:w,ctx:s}),Xo.$set(nr);const If={};w&2&&(If.$$scope={dirty:w,ctx:s}),Qo.$set(If);const qf={};w&2&&(qf.$$scope={dirty:w,ctx:s}),el.$set(qf);const f7={};w&2&&(f7.$$scope={dirty:w,ctx:s}),tl.$set(f7);const rr={};w&2&&(rr.$$scope={dirty:w,ctx:s}),al.$set(rr);const u7={};w&2&&(u7.$$scope={dirty:w,ctx:s}),sl.$set(u7);const or={};w&2&&(or.$$scope={dirty:w,ctx:s}),rl.$set(or);const g7={};w&2&&(g7.$$scope={dirty:w,ctx:s}),ol.$set(g7);const ra={};w&2&&(ra.$$scope={dirty:w,ctx:s}),ll.$set(ra);const _7={};w&2&&(_7.$$scope={dirty:w,ctx:s}),il.$set(_7);const b7={};w&2&&(b7.$$scope={dirty:w,ctx:s}),pl.$set(b7);const lr={};w&2&&(lr.$$scope={dirty:w,ctx:s}),cl.$set(lr);const $7={};w&2&&($7.$$scope={dirty:w,ctx:s}),dl.$set($7);const ir={};w&2&&(ir.$$scope={dirty:w,ctx:s}),ml.$set(ir);const x7={};w&2&&(x7.$$scope={dirty:w,ctx:s}),hl.$set(x7);const pr={};w&2&&(pr.$$scope={dirty:w,ctx:s}),fl.$set(pr);const v7={};w&2&&(v7.$$scope={dirty:w,ctx:s}),ul.$set(v7);const oa={};w&2&&(oa.$$scope={dirty:w,ctx:s}),gl.$set(oa);const y7={};w&2&&(y7.$$scope={dirty:w,ctx:s}),_l.$set(y7);const cr={};w&2&&(cr.$$scope={dirty:w,ctx:s}),bl.$set(cr);const j7={};w&2&&(j7.$$scope={dirty:w,ctx:s}),$l.$set(j7);const w7={};w&2&&(w7.$$scope={dirty:w,ctx:s}),xl.$set(w7);const dr={};w&2&&(dr.$$scope={dirty:w,ctx:s}),vl.$set(dr);const D7={};w&2&&(D7.$$scope={dirty:w,ctx:s}),wl.$set(D7);const mr={};w&2&&(mr.$$scope={dirty:w,ctx:s}),Dl.$set(mr);const k7={};w&2&&(k7.$$scope={dirty:w,ctx:s}),kl.$set(k7);const hr={};w&2&&(hr.$$scope={dirty:w,ctx:s}),El.$set(hr);const Tf={};w&2&&(Tf.$$scope={dirty:w,ctx:s}),Il.$set(Tf);const E7={};w&2&&(E7.$$scope={dirty:w,ctx:s}),ql.$set(E7);const fr={};w&2&&(fr.$$scope={dirty:w,ctx:s}),Tl.$set(fr);const I7={};w&2&&(I7.$$scope={dirty:w,ctx:s}),Nl.$set(I7);const ur={};w&2&&(ur.$$scope={dirty:w,ctx:s}),Ol.$set(ur);const q7={};w&2&&(q7.$$scope={dirty:w,ctx:s}),Sl.$set(q7);const Nf={};w&2&&(Nf.$$scope={dirty:w,ctx:s}),Cl.$set(Nf);const T7={};w&2&&(T7.$$scope={dirty:w,ctx:s}),zl.$set(T7);const Pf={};w&2&&(Pf.$$scope={dirty:w,ctx:s}),Vl.$set(Pf);const gr={};w&2&&(gr.$$scope={dirty:w,ctx:s}),Ul.$set(gr);const N7={};w&2&&(N7.$$scope={dirty:w,ctx:s}),Ml.$set(N7);const P7={};w&2&&(P7.$$scope={dirty:w,ctx:s}),Rl.$set(P7);const Je={};w&2&&(Je.$$scope={dirty:w,ctx:s}),Hl.$set(Je);const Ze={};w&2&&(Ze.$$scope={dirty:w,ctx:s}),ei.$set(Ze);const L7={};w&2&&(L7.$$scope={dirty:w,ctx:s}),ti.$set(L7);const A7={};w&2&&(A7.$$scope={dirty:w,ctx:s}),ni.$set(A7);const F7={};w&2&&(F7.$$scope={dirty:w,ctx:s}),oi.$set(F7);const O7={};w&2&&(O7.$$scope={dirty:w,ctx:s}),wi.$set(O7);const Xe={};w&2&&(Xe.$$scope={dirty:w,ctx:s}),Di.$set(Xe);const S7={};w&2&&(S7.$$scope={dirty:w,ctx:s}),ki.$set(S7);const C7={};w&2&&(C7.$$scope={dirty:w,ctx:s}),Ei.$set(C7);const z7={};w&2&&(z7.$$scope={dirty:w,ctx:s}),Ii.$set(z7)},i(s){Tw||(x(t.$$.fragment,s),x(ia.$$.fragment,s),x(cp.$$.fragment,s),x(dp.$$.fragment,s),x(vr.$$.fragment,s),x(hp.$$.fragment,s),x(yr.$$.fragment,s),x(fp.$$.fragment,s),x(up.$$.fragment,s),x(gp.$$.fragment,s),x(Dr.$$.fragment,s),x(_p.$$.fragment,s),x(kr.$$.fragment,s),x(bp.$$.fragment,s),x($p.$$.fragment,s),x(xp.$$.fragment,s),x(qr.$$.fragment,s),x(jp.$$.fragment,s),x(wp.$$.fragment,s),x(Nr.$$.fragment,s),x(Dp.$$.fragment,s),x(Pr.$$.fragment,s),x(kp.$$.fragment,s),x(Lr.$$.fragment,s),x(Ep.$$.fragment,s),x(Fr.$$.fragment,s),x(qp.$$.fragment,s),x(Or.$$.fragment,s),x(Tp.$$.fragment,s),x(Sr.$$.fragment,s),x(Np.$$.fragment,s),x(Cr.$$.fragment,s),x(Pp.$$.fragment,s),x(zr.$$.fragment,s),x(Lp.$$.fragment,s),x(Vr.$$.fragment,s),x(Ap.$$.fragment,s),x(Ur.$$.fragment,s),x(Fp.$$.fragment,s),x(Mr.$$.fragment,s),x(Op.$$.fragment,s),x(Rr.$$.fragment,s),x(Sp.$$.fragment,s),x(Br.$$.fragment,s),x(Cp.$$.fragment,s),x(Hr.$$.fragment,s),x(Vp.$$.fragment,s),x(Gr.$$.fragment,s),x(Up.$$.fragment,s),x(Rp.$$.fragment,s),x(Bp.$$.fragment,s),x(Kr.$$.fragment,s),x(Hp.$$.fragment,s),x(Yr.$$.fragment,s),x(Gp.$$.fragment,s),x(Jr.$$.fragment,s),x(Kp.$$.fragment,s),x(Zr.$$.fragment,s),x(Jp.$$.fragment,s),x(Xr.$$.fragment,s),x(Zp.$$.fragment,s),x(Xp.$$.fragment,s),x(eo.$$.fragment,s),x(Qp.$$.fragment,s),x(to.$$.fragment,s),x(tc.$$.fragment,s),x(ao.$$.fragment,s),x(ac.$$.fragment,s),x(so.$$.fragment,s),x(sc.$$.fragment,s),x(no.$$.fragment,s),x(nc.$$.fragment,s),x(ro.$$.fragment,s),x(rc.$$.fragment,s),x(oo.$$.fragment,s),x(lc.$$.fragment,s),x(lo.$$.fragment,s),x(pc.$$.fragment,s),x(io.$$.fragment,s),x(cc.$$.fragment,s),x(po.$$.fragment,s),x(dc.$$.fragment,s),x(co.$$.fragment,s),x(mo.$$.fragment,s),x(ho.$$.fragment,s),x(hc.$$.fragment,s),x(fo.$$.fragment,s),x(fc.$$.fragment,s),x(uc.$$.fragment,s),x(go.$$.fragment,s),x(gc.$$.fragment,s),x(_o.$$.fragment,s),x(bc.$$.fragment,s),x(bo.$$.fragment,s),x($c.$$.fragment,s),x($o.$$.fragment,s),x(xc.$$.fragment,s),x(xo.$$.fragment,s),x(vc.$$.fragment,s),x(vo.$$.fragment,s),x(jc.$$.fragment,s),x(Dc.$$.fragment,s),x(kc.$$.fragment,s),x(Ic.$$.fragment,s),x(jo.$$.fragment,s),x(qc.$$.fragment,s),x(wo.$$.fragment,s),x(Tc.$$.fragment,s),x(Nc.$$.fragment,s),x(Pc.$$.fragment,s),x(Lc.$$.fragment,s),x(Ac.$$.fragment,s),x(Fc.$$.fragment,s),x(Oc.$$.fragment,s),x(Sc.$$.fragment,s),x(Cc.$$.fragment,s),x(zc.$$.fragment,s),x(Vc.$$.fragment,s),x(Uc.$$.fragment,s),x(Mc.$$.fragment,s),x(Rc.$$.fragment,s),x(Bc.$$.fragment,s),x(Hc.$$.fragment,s),x(Gc.$$.fragment,s),x(Wc.$$.fragment,s),x(Kc.$$.fragment,s),x(Yc.$$.fragment,s),x(Jc.$$.fragment,s),x(Zc.$$.fragment,s),x(Xc.$$.fragment,s),x(Ao.$$.fragment,s),x(Qc.$$.fragment,s),x(Fo.$$.fragment,s),x(ed.$$.fragment,s),x(Oo.$$.fragment,s),x(td.$$.fragment,s),x(So.$$.fragment,s),x(ad.$$.fragment,s),x(sd.$$.fragment,s),x(Co.$$.fragment,s),x(rd.$$.fragment,s),x(zo.$$.fragment,s),x(od.$$.fragment,s),x(Vo.$$.fragment,s),x(ld.$$.fragment,s),x(pd.$$.fragment,s),x(dd.$$.fragment,s),x(hd.$$.fragment,s),x(fd.$$.fragment,s),x(ud.$$.fragment,s),x(Ro.$$.fragment,s),x(gd.$$.fragment,s),x(Bo.$$.fragment,s),x(_d.$$.fragment,s),x(Ho.$$.fragment,s),x(bd.$$.fragment,s),x(Wo.$$.fragment,s),x(xd.$$.fragment,s),x(Ko.$$.fragment,s),x(vd.$$.fragment,s),x(Yo.$$.fragment,s),x(yd.$$.fragment,s),x(Jo.$$.fragment,s),x(jd.$$.fragment,s),x(Zo.$$.fragment,s),x(wd.$$.fragment,s),x(Xo.$$.fragment,s),x(Dd.$$.fragment,s),x(Qo.$$.fragment,s),x(kd.$$.fragment,s),x(el.$$.fragment,s),x(Ed.$$.fragment,s),x(tl.$$.fragment,s),x(Id.$$.fragment,s),x(al.$$.fragment,s),x(Td.$$.fragment,s),x(sl.$$.fragment,s),x(Pd.$$.fragment,s),x(Ld.$$.fragment,s),x(rl.$$.fragment,s),x(Fd.$$.fragment,s),x(ol.$$.fragment,s),x(Od.$$.fragment,s),x(ll.$$.fragment,s),x(Sd.$$.fragment,s),x(il.$$.fragment,s),x(Cd.$$.fragment,s),x(pl.$$.fragment,s),x(zd.$$.fragment,s),x(cl.$$.fragment,s),x(Vd.$$.fragment,s),x(dl.$$.fragment,s),x(Md.$$.fragment,s),x(ml.$$.fragment,s),x(Rd.$$.fragment,s),x(hl.$$.fragment,s),x(Hd.$$.fragment,s),x(fl.$$.fragment,s),x(Gd.$$.fragment,s),x(ul.$$.fragment,s),x(gl.$$.fragment,s),x(Kd.$$.fragment,s),x(_l.$$.fragment,s),x(Yd.$$.fragment,s),x(bl.$$.fragment,s),x(Jd.$$.fragment,s),x($l.$$.fragment,s),x(Zd.$$.fragment,s),x(xl.$$.fragment,s),x(Xd.$$.fragment,s),x(vl.$$.fragment,s),x(Qd.$$.fragment,s),x(em.$$.fragment,s),x(tm.$$.fragment,s),x(am.$$.fragment,s),x(wl.$$.fragment,s),x(sm.$$.fragment,s),x(Dl.$$.fragment,s),x(nm.$$.fragment,s),x(kl.$$.fragment,s),x(rm.$$.fragment,s),x(om.$$.fragment,s),x(El.$$.fragment,s),x(im.$$.fragment,s),x(Il.$$.fragment,s),x(pm.$$.fragment,s),x(ql.$$.fragment,s),x(cm.$$.fragment,s),x(Tl.$$.fragment,s),x(mm.$$.fragment,s),x(um.$$.fragment,s),x(gm.$$.fragment,s),x(Nl.$$.fragment,s),x(bm.$$.fragment,s),x($m.$$.fragment,s),x(xm.$$.fragment,s),x(vm.$$.fragment,s),x(ym.$$.fragment,s),x(jm.$$.fragment,s),x(wm.$$.fragment,s),x(Dm.$$.fragment,s),x(km.$$.fragment,s),x(Em.$$.fragment,s),x(Im.$$.fragment,s),x(qm.$$.fragment,s),x(Tm.$$.fragment,s),x(Nm.$$.fragment,s),x(Pm.$$.fragment,s),x(Lm.$$.fragment,s),x(Am.$$.fragment,s),x(Fm.$$.fragment,s),x(Ol.$$.fragment,s),x(Sm.$$.fragment,s),x(Sl.$$.fragment,s),x(Cm.$$.fragment,s),x(Cl.$$.fragment,s),x(Vm.$$.fragment,s),x(zl.$$.fragment,s),x(Um.$$.fragment,s),x(Vl.$$.fragment,s),x(Mm.$$.fragment,s),x(Ul.$$.fragment,s),x(Rm.$$.fragment,s),x(Hm.$$.fragment,s),x(Gm.$$.fragment,s),x(Ml.$$.fragment,s),x(Wm.$$.fragment,s),x(Rl.$$.fragment,s),x(Km.$$.fragment,s),x(Ym.$$.fragment,s),x(Hl.$$.fragment,s),x(th.$$.fragment,s),x(ah.$$.fragment,s),x(sh.$$.fragment,s),x(nh.$$.fragment,s),x(rh.$$.fragment,s),x(oh.$$.fragment,s),x(lh.$$.fragment,s),x(ih.$$.fragment,s),x(ph.$$.fragment,s),x(ei.$$.fragment,s),x(ch.$$.fragment,s),x(ti.$$.fragment,s),x(dh.$$.fragment,s),x(mh.$$.fragment,s),x(fh.$$.fragment,s),x(uh.$$.fragment,s),x(gh.$$.fragment,s),x(_h.$$.fragment,s),x(ni.$$.fragment,s),x($h.$$.fragment,s),x(xh.$$.fragment,s),x(oi.$$.fragment,s),x(vh.$$.fragment,s),x(jh.$$.fragment,s),x(Dh.$$.fragment,s),x(Eh.$$.fragment,s),x(qh.$$.fragment,s),x(Th.$$.fragment,s),x(Fh.$$.fragment,s),x(Oh.$$.fragment,s),x(Sh.$$.fragment,s),x(Ch.$$.fragment,s),x(zh.$$.fragment,s),x(Vh.$$.fragment,s),x(Gh.$$.fragment,s),x(Wh.$$.fragment,s),x(Kh.$$.fragment,s),x(Yh.$$.fragment,s),x(Jh.$$.fragment,s),x(Zh.$$.fragment,s),x(Xh.$$.fragment,s),x(Qh.$$.fragment,s),x(tf.$$.fragment,s),x(af.$$.fragment,s),x(sf.$$.fragment,s),x(nf.$$.fragment,s),x(rf.$$.fragment,s),x(of.$$.fragment,s),x(lf.$$.fragment,s),x(pf.$$.fragment,s),x(cf.$$.fragment,s),x(wi.$$.fragment,s),x(Di.$$.fragment,s),x(ki.$$.fragment,s),x(Ei.$$.fragment,s),x(Ii.$$.fragment,s),x(hf.$$.fragment,s),x(ff.$$.fragment,s),x(uf.$$.fragment,s),x(gf.$$.fragment,s),x(_f.$$.fragment,s),Tw=!0)},o(s){v(t.$$.fragment,s),v(ia.$$.fragment,s),v(cp.$$.fragment,s),v(dp.$$.fragment,s),v(vr.$$.fragment,s),v(hp.$$.fragment,s),v(yr.$$.fragment,s),v(fp.$$.fragment,s),v(up.$$.fragment,s),v(gp.$$.fragment,s),v(Dr.$$.fragment,s),v(_p.$$.fragment,s),v(kr.$$.fragment,s),v(bp.$$.fragment,s),v($p.$$.fragment,s),v(xp.$$.fragment,s),v(qr.$$.fragment,s),v(jp.$$.fragment,s),v(wp.$$.fragment,s),v(Nr.$$.fragment,s),v(Dp.$$.fragment,s),v(Pr.$$.fragment,s),v(kp.$$.fragment,s),v(Lr.$$.fragment,s),v(Ep.$$.fragment,s),v(Fr.$$.fragment,s),v(qp.$$.fragment,s),v(Or.$$.fragment,s),v(Tp.$$.fragment,s),v(Sr.$$.fragment,s),v(Np.$$.fragment,s),v(Cr.$$.fragment,s),v(Pp.$$.fragment,s),v(zr.$$.fragment,s),v(Lp.$$.fragment,s),v(Vr.$$.fragment,s),v(Ap.$$.fragment,s),v(Ur.$$.fragment,s),v(Fp.$$.fragment,s),v(Mr.$$.fragment,s),v(Op.$$.fragment,s),v(Rr.$$.fragment,s),v(Sp.$$.fragment,s),v(Br.$$.fragment,s),v(Cp.$$.fragment,s),v(Hr.$$.fragment,s),v(Vp.$$.fragment,s),v(Gr.$$.fragment,s),v(Up.$$.fragment,s),v(Rp.$$.fragment,s),v(Bp.$$.fragment,s),v(Kr.$$.fragment,s),v(Hp.$$.fragment,s),v(Yr.$$.fragment,s),v(Gp.$$.fragment,s),v(Jr.$$.fragment,s),v(Kp.$$.fragment,s),v(Zr.$$.fragment,s),v(Jp.$$.fragment,s),v(Xr.$$.fragment,s),v(Zp.$$.fragment,s),v(Xp.$$.fragment,s),v(eo.$$.fragment,s),v(Qp.$$.fragment,s),v(to.$$.fragment,s),v(tc.$$.fragment,s),v(ao.$$.fragment,s),v(ac.$$.fragment,s),v(so.$$.fragment,s),v(sc.$$.fragment,s),v(no.$$.fragment,s),v(nc.$$.fragment,s),v(ro.$$.fragment,s),v(rc.$$.fragment,s),v(oo.$$.fragment,s),v(lc.$$.fragment,s),v(lo.$$.fragment,s),v(pc.$$.fragment,s),v(io.$$.fragment,s),v(cc.$$.fragment,s),v(po.$$.fragment,s),v(dc.$$.fragment,s),v(co.$$.fragment,s),v(mo.$$.fragment,s),v(ho.$$.fragment,s),v(hc.$$.fragment,s),v(fo.$$.fragment,s),v(fc.$$.fragment,s),v(uc.$$.fragment,s),v(go.$$.fragment,s),v(gc.$$.fragment,s),v(_o.$$.fragment,s),v(bc.$$.fragment,s),v(bo.$$.fragment,s),v($c.$$.fragment,s),v($o.$$.fragment,s),v(xc.$$.fragment,s),v(xo.$$.fragment,s),v(vc.$$.fragment,s),v(vo.$$.fragment,s),v(jc.$$.fragment,s),v(Dc.$$.fragment,s),v(kc.$$.fragment,s),v(Ic.$$.fragment,s),v(jo.$$.fragment,s),v(qc.$$.fragment,s),v(wo.$$.fragment,s),v(Tc.$$.fragment,s),v(Nc.$$.fragment,s),v(Pc.$$.fragment,s),v(Lc.$$.fragment,s),v(Ac.$$.fragment,s),v(Fc.$$.fragment,s),v(Oc.$$.fragment,s),v(Sc.$$.fragment,s),v(Cc.$$.fragment,s),v(zc.$$.fragment,s),v(Vc.$$.fragment,s),v(Uc.$$.fragment,s),v(Mc.$$.fragment,s),v(Rc.$$.fragment,s),v(Bc.$$.fragment,s),v(Hc.$$.fragment,s),v(Gc.$$.fragment,s),v(Wc.$$.fragment,s),v(Kc.$$.fragment,s),v(Yc.$$.fragment,s),v(Jc.$$.fragment,s),v(Zc.$$.fragment,s),v(Xc.$$.fragment,s),v(Ao.$$.fragment,s),v(Qc.$$.fragment,s),v(Fo.$$.fragment,s),v(ed.$$.fragment,s),v(Oo.$$.fragment,s),v(td.$$.fragment,s),v(So.$$.fragment,s),v(ad.$$.fragment,s),v(sd.$$.fragment,s),v(Co.$$.fragment,s),v(rd.$$.fragment,s),v(zo.$$.fragment,s),v(od.$$.fragment,s),v(Vo.$$.fragment,s),v(ld.$$.fragment,s),v(pd.$$.fragment,s),v(dd.$$.fragment,s),v(hd.$$.fragment,s),v(fd.$$.fragment,s),v(ud.$$.fragment,s),v(Ro.$$.fragment,s),v(gd.$$.fragment,s),v(Bo.$$.fragment,s),v(_d.$$.fragment,s),v(Ho.$$.fragment,s),v(bd.$$.fragment,s),v(Wo.$$.fragment,s),v(xd.$$.fragment,s),v(Ko.$$.fragment,s),v(vd.$$.fragment,s),v(Yo.$$.fragment,s),v(yd.$$.fragment,s),v(Jo.$$.fragment,s),v(jd.$$.fragment,s),v(Zo.$$.fragment,s),v(wd.$$.fragment,s),v(Xo.$$.fragment,s),v(Dd.$$.fragment,s),v(Qo.$$.fragment,s),v(kd.$$.fragment,s),v(el.$$.fragment,s),v(Ed.$$.fragment,s),v(tl.$$.fragment,s),v(Id.$$.fragment,s),v(al.$$.fragment,s),v(Td.$$.fragment,s),v(sl.$$.fragment,s),v(Pd.$$.fragment,s),v(Ld.$$.fragment,s),v(rl.$$.fragment,s),v(Fd.$$.fragment,s),v(ol.$$.fragment,s),v(Od.$$.fragment,s),v(ll.$$.fragment,s),v(Sd.$$.fragment,s),v(il.$$.fragment,s),v(Cd.$$.fragment,s),v(pl.$$.fragment,s),v(zd.$$.fragment,s),v(cl.$$.fragment,s),v(Vd.$$.fragment,s),v(dl.$$.fragment,s),v(Md.$$.fragment,s),v(ml.$$.fragment,s),v(Rd.$$.fragment,s),v(hl.$$.fragment,s),v(Hd.$$.fragment,s),v(fl.$$.fragment,s),v(Gd.$$.fragment,s),v(ul.$$.fragment,s),v(gl.$$.fragment,s),v(Kd.$$.fragment,s),v(_l.$$.fragment,s),v(Yd.$$.fragment,s),v(bl.$$.fragment,s),v(Jd.$$.fragment,s),v($l.$$.fragment,s),v(Zd.$$.fragment,s),v(xl.$$.fragment,s),v(Xd.$$.fragment,s),v(vl.$$.fragment,s),v(Qd.$$.fragment,s),v(em.$$.fragment,s),v(tm.$$.fragment,s),v(am.$$.fragment,s),v(wl.$$.fragment,s),v(sm.$$.fragment,s),v(Dl.$$.fragment,s),v(nm.$$.fragment,s),v(kl.$$.fragment,s),v(rm.$$.fragment,s),v(om.$$.fragment,s),v(El.$$.fragment,s),v(im.$$.fragment,s),v(Il.$$.fragment,s),v(pm.$$.fragment,s),v(ql.$$.fragment,s),v(cm.$$.fragment,s),v(Tl.$$.fragment,s),v(mm.$$.fragment,s),v(um.$$.fragment,s),v(gm.$$.fragment,s),v(Nl.$$.fragment,s),v(bm.$$.fragment,s),v($m.$$.fragment,s),v(xm.$$.fragment,s),v(vm.$$.fragment,s),v(ym.$$.fragment,s),v(jm.$$.fragment,s),v(wm.$$.fragment,s),v(Dm.$$.fragment,s),v(km.$$.fragment,s),v(Em.$$.fragment,s),v(Im.$$.fragment,s),v(qm.$$.fragment,s),v(Tm.$$.fragment,s),v(Nm.$$.fragment,s),v(Pm.$$.fragment,s),v(Lm.$$.fragment,s),v(Am.$$.fragment,s),v(Fm.$$.fragment,s),v(Ol.$$.fragment,s),v(Sm.$$.fragment,s),v(Sl.$$.fragment,s),v(Cm.$$.fragment,s),v(Cl.$$.fragment,s),v(Vm.$$.fragment,s),v(zl.$$.fragment,s),v(Um.$$.fragment,s),v(Vl.$$.fragment,s),v(Mm.$$.fragment,s),v(Ul.$$.fragment,s),v(Rm.$$.fragment,s),v(Hm.$$.fragment,s),v(Gm.$$.fragment,s),v(Ml.$$.fragment,s),v(Wm.$$.fragment,s),v(Rl.$$.fragment,s),v(Km.$$.fragment,s),v(Ym.$$.fragment,s),v(Hl.$$.fragment,s),v(th.$$.fragment,s),v(ah.$$.fragment,s),v(sh.$$.fragment,s),v(nh.$$.fragment,s),v(rh.$$.fragment,s),v(oh.$$.fragment,s),v(lh.$$.fragment,s),v(ih.$$.fragment,s),v(ph.$$.fragment,s),v(ei.$$.fragment,s),v(ch.$$.fragment,s),v(ti.$$.fragment,s),v(dh.$$.fragment,s),v(mh.$$.fragment,s),v(fh.$$.fragment,s),v(uh.$$.fragment,s),v(gh.$$.fragment,s),v(_h.$$.fragment,s),v(ni.$$.fragment,s),v($h.$$.fragment,s),v(xh.$$.fragment,s),v(oi.$$.fragment,s),v(vh.$$.fragment,s),v(jh.$$.fragment,s),v(Dh.$$.fragment,s),v(Eh.$$.fragment,s),v(qh.$$.fragment,s),v(Th.$$.fragment,s),v(Fh.$$.fragment,s),v(Oh.$$.fragment,s),v(Sh.$$.fragment,s),v(Ch.$$.fragment,s),v(zh.$$.fragment,s),v(Vh.$$.fragment,s),v(Gh.$$.fragment,s),v(Wh.$$.fragment,s),v(Kh.$$.fragment,s),v(Yh.$$.fragment,s),v(Jh.$$.fragment,s),v(Zh.$$.fragment,s),v(Xh.$$.fragment,s),v(Qh.$$.fragment,s),v(tf.$$.fragment,s),v(af.$$.fragment,s),v(sf.$$.fragment,s),v(nf.$$.fragment,s),v(rf.$$.fragment,s),v(of.$$.fragment,s),v(lf.$$.fragment,s),v(pf.$$.fragment,s),v(cf.$$.fragment,s),v(wi.$$.fragment,s),v(Di.$$.fragment,s),v(ki.$$.fragment,s),v(Ei.$$.fragment,s),v(Ii.$$.fragment,s),v(hf.$$.fragment,s),v(ff.$$.fragment,s),v(uf.$$.fragment,s),v(gf.$$.fragment,s),v(_f.$$.fragment,s),Tw=!1},d(s){a(c),s&&a(g),s&&a(f),y(t),s&&a($r),s&&a(Se),y(ia),s&&a(U7),s&&a(Z),y(cp),y(dp),y(vr),y(hp),y(yr),s&&a(M7),s&&a(Qs),y(fp),s&&a(R7),s&&a(wr),s&&a(B7),s&&a(I),y(up),y(gp),y(Dr),y(_p),y(kr),y(bp),y($p),y(xp),y(qr),y(jp),y(wp),y(Nr),y(Dp),y(Pr),y(kp),y(Lr),y(Ep),y(Fr),y(qp),y(Or),y(Tp),y(Sr),y(Np),y(Cr),y(Pp),y(zr),y(Lp),y(Vr),y(Ap),y(Ur),y(Fp),y(Mr),y(Op),y(Rr),y(Sp),y(Br),y(Cp),y(Hr),y(Vp),y(Gr),y(Up),y(Rp),y(Bp),y(Kr),y(Hp),y(Yr),y(Gp),y(Jr),y(Kp),y(Zr),y(Jp),y(Xr),y(Zp),y(Xp),y(eo),y(Qp),y(to),y(tc),y(ao),y(ac),y(so),y(sc),y(no),y(nc),y(ro),y(rc),y(oo),y(lc),y(lo),y(pc),y(io),y(cc),y(po),y(dc),y(co),y(mo),y(ho),y(hc),y(fo),y(fc),y(uc),y(go),y(gc),y(_o),y(bc),y(bo),y($c),y($o),y(xc),y(xo),y(vc),y(vo),y(jc),y(Dc),y(kc),y(Ic),y(jo),y(qc),y(wo),y(Tc),y(Nc),y(Pc),y(Lc),y(Ac),y(Fc),y(Oc),y(Sc),y(Cc),y(zc),y(Vc),y(Uc),y(Mc),y(Rc),y(Bc),y(Hc),y(Gc),y(Wc),y(Kc),y(Yc),y(Jc),y(Zc),y(Xc),y(Ao),y(Qc),y(Fo),y(ed),y(Oo),y(td),y(So),y(ad),y(sd),y(Co),s&&a(H7),s&&a(zt),y(rd),y(zo),s&&a(G7),s&&a(X),y(od),y(Vo),s&&a(W7),s&&a(he),y(ld),s&&a(K7),s&&a(fe),y(pd),s&&a(Y7),s&&a(ue),y(dd),s&&a(J7),s&&a(gn),y(hd),s&&a(Z7),s&&a(Mo),s&&a(X7),s&&a(L),y(fd),y(ud),y(Ro),y(gd),y(Bo),y(_d),y(Ho),y(bd),y(Wo),y(xd),y(Ko),y(vd),y(Yo),y(yd),y(Jo),y(jd),y(Zo),y(wd),y(Xo),y(Dd),y(Qo),y(kd),y(el),y(Ed),y(tl),y(Id),y(al),y(Td),y(sl),y(Pd),y(Ld),y(rl),y(Fd),y(ol),y(Od),y(ll),y(Sd),y(il),y(Cd),y(pl),y(zd),y(cl),y(Vd),y(dl),y(Md),y(ml),y(Rd),y(hl),y(Hd),y(fl),y(Gd),y(ul),y(gl),y(Kd),y(_l),y(Yd),y(bl),y(Jd),y($l),y(Zd),y(xl),y(Xd),y(vl),y(Qd),s&&a(Q7),s&&a(Xu),s&&a(ew),s&&a(qn),y(em),s&&a(tw),s&&a(jl),s&&a(aw),s&&a(F),y(tm),y(am),y(wl),y(sm),y(Dl),y(nm),y(kl),y(rm),y(om),y(El),y(im),y(Il),y(pm),y(ql),y(cm),y(Tl),y(mm),y(um),y(gm),y(Nl),y(bm),y($m),y(xm),y(vm),y(ym),y(jm),y(wm),y(Dm),y(km),y(Em),y(Im),y(qm),y(Tm),y(Nm),y(Pm),s&&a(sw),s&&a(Pn),y(Lm),s&&a(nw),s&&a(Fl),s&&a(rw),s&&a(U),y(Am),y(Fm),y(Ol),y(Sm),y(Sl),y(Cm),y(Cl),y(Vm),y(zl),y(Um),y(Vl),y(Mm),y(Ul),y(Rm),y(Hm),y(Gm),y(Ml),y(Wm),y(Rl),s&&a(ow),s&&a(Fn),y(Km),s&&a(lw),s&&a(z),y(Ym),y(Hl),y(th),y(ah),y(sh),y(nh),y(rh),y(oh),y(lh),y(ih),y(ph),y(ei),y(ch),y(ti),s&&a(iw),s&&a(On),y(dh),s&&a(pw),s&&a(Q),y(mh),y(fh),y(uh),s&&a(cw),s&&a(Yt),y(gh),s&&a(dw),s&&a(ee),y(_h),y(ni),y($h),s&&a(mw),s&&a(te),y(xh),y(oi),y(vh),s&&a(hw),s&&a(yh),y(jh),s&&a(fw),s&&a(wh),y(Dh),s&&a(uw),s&&a(kh),y(Eh),s&&a(gw),s&&a(Ih),y(qh),s&&a(_w),s&&a(M),y(Th),y(Fh),y(Oh),y(Sh),y(Ch),y(zh),s&&a(bw),s&&a(R),y(Vh),y(Gh),y(Wh),y(Kh),y(Yh),y(Jh),s&&a($w),s&&a(Rn),y(Zh),s&&a(xw),s&&a(ae),y(Xh),y(Qh),y(tf),s&&a(vw),s&&a(Bn),y(af),s&&a(yw),s&&a(Ds),s&&a(jw),s&&a(se),y(sf),y(nf),y(rf),y(of),y(lf),s&&a(ww),s&&a(Hn),y(pf),s&&a(Dw),s&&a(S),y(cf),y(wi),y(Di),y(ki),y(Ei),y(Ii),y(hf),s&&a(kw),s&&a(Kn),y(ff),s&&a(Ew),s&&a(Jn),y(uf),s&&a(Iw),s&&a(Zn),y(gf),s&&a(qw),s&&a(Xn),y(_f)}}}const kre={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function Ere(k){return xse(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Are extends gse{constructor(c){super();_se(this,c,Ere,Dre,bse,{})}}export{Are as default,kre as metadata};
