import{S as bc,i as Ec,s as kc,e as o,k as h,w as u,t as r,M as jc,c as s,d as a,m as c,a as l,x as m,h as i,b as f,N as qc,F as t,g as p,y as g,L as Pc,q as d,o as _,B as y,v as Ac}from"../chunks/vendor-d3924577.js";import{I as $}from"../chunks/IconCopyLink-f94c3d80.js";import{C as v}from"../chunks/CodeBlock-ff545b14.js";function Cc(mp){let O,Ho,No,Oo,L,ae,ha,Oe,Gl,ca,Fl,Lo,I,oe,fa,Le,Ul,ua,Ml,Io,Ie,ma,Bl,Yl,To,se,Te,zl,ga,Wl,Jl,Kl,Ge,Ql,da,Vl,Xl,Go,T,le,_a,Fe,Zl,ya,er,Fo,re,tr,va,ar,or,Uo,E,$a,sr,lr,wa,rr,ir,ba,nr,pr,Ea,hr,Mo,G,ie,ka,Ue,cr,ja,fr,Bo,C,ur,Ot,mr,gr,qa,dr,_r,Yo,ne,yr,Me,vr,$r,zo,Lt,It,gp,Wo,Be,Jo,pe,wr,Tt,br,Er,Ko,Ye,Qo,F,he,Pa,ze,kr,Aa,jr,Vo,Gt,qr,Xo,We,Zo,U,ce,Ca,Je,Pr,xa,Ar,es,x,Cr,Ft,xr,Rr,Ra,Sr,Dr,ts,Ke,as,M,fe,Sa,Qe,Hr,Da,Nr,os,ue,Or,Ut,Lr,Ir,ss,k,Tr,Mt,Gr,Fr,Ha,Ur,Mr,Na,Br,Yr,ls,Ve,rs,me,zr,Oa,Wr,Jr,is,Xe,ns,B,ge,La,Ze,Kr,Ia,Qr,ps,Bt,Vr,hs,et,cs,Y,de,Ta,tt,Xr,Ga,Zr,fs,b,ei,Yt,ti,ai,zt,oi,si,at,li,ri,Wt,ii,ni,us,z,_e,Fa,ot,pi,Ua,hi,ms,R,ci,Ma,fi,ui,Ba,mi,gi,gs,st,ds,W,Ya,di,_i,za,yi,vi,_s,lt,ys,S,$i,Wa,wi,bi,Jt,Ei,ki,vs,rt,$s,J,ye,Ja,it,ji,Ka,qi,ws,ve,Pi,Kt,Ai,Ci,bs,nt,Es,K,$e,Qa,pt,xi,Va,Ri,ks,Qt,Si,js,D,ht,Xa,Di,Hi,ct,Ni,Q,ft,Oi,Za,Li,Ii,Ti,ut,Gi,Vt,eo,Fi,Ui,Mi,mt,gt,Bi,Xt,Yi,zi,Wi,dt,qs,H,Ji,to,Ki,Qi,ao,Vi,Xi,Ps,_t,As,V,we,oo,yt,Zi,so,en,Cs,j,tn,lo,an,on,ro,sn,ln,io,rn,nn,xs,vt,Rs,X,be,no,$t,pn,po,hn,Ss,Ee,cn,ho,fn,un,Ds,wt,Hs,ke,mn,co,gn,dn,Ns,bt,Os,Z,je,fo,Et,_n,uo,yn,Ls,q,vn,mo,$n,wn,go,bn,En,_o,kn,jn,Is,P,kt,qn,yo,Pn,An,Cn,jt,xn,vo,Rn,Sn,Dn,$o,Hn,Nn,qt,On,wo,Ln,In,Ts,Pt,Gs,Zt,Tn,Fs,At,Us,qe,Gn,bo,Fn,Un,Ms,Ct,Bs,Pe,Mn,Eo,Bn,Yn,Ys,xt,zs,Ae,zn,ko,Wn,Jn,Ws,Rt,Js,ee,Ce,jo,St,Kn,qo,Qn,Ks,w,Vn,ea,Xn,Zn,Po,ep,tp,Ao,ap,op,Co,sp,lp,xo,rp,ip,Qs,Dt,Vs,te,xe,Ro,Ht,np,So,pp,Xs,ta,hp,Zs,Nt,el,aa,cp,tl;return Oe=new $({}),Le=new $({}),Fe=new $({}),Ue=new $({}),Be=new v({props:{code:`from huggingface_hub import list_models

list_models()

list_models(filter="text-classification")

list_models(filter=("languages:ru", "pytorch"))

list_models(filter="dataset:common_voice")

list_models(filter="spacy")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> list_models

<span class="hljs-comment"># List all models.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models()

<span class="hljs-comment"># List only text classification models.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;text-classification&quot;</span>)

<span class="hljs-comment"># List only Russian models compatible with PyTorch.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models(<span class="hljs-built_in">filter</span>=(<span class="hljs-string">&quot;languages:ru&quot;</span>, <span class="hljs-string">&quot;pytorch&quot;</span>))

<span class="hljs-comment"># List only the models trained on the &quot;common_voice&quot; dataset.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;dataset:common_voice&quot;</span>)

<span class="hljs-comment"># List only the models from the spaCy library.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;spacy&quot;</span>)`}}),Ye=new v({props:{code:`from huggingface_hub import list_datasets

list_datasets(filter="task_categories:text-classification")

list_datasets(filter=("languages:ru", "task_ids:language-modeling"))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> list_datasets

<span class="hljs-comment"># List only text classification datasets.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_datasets(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;task_categories:text-classification&quot;</span>)

<span class="hljs-comment"># List only datasets in Russian for language modeling.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_datasets(<span class="hljs-built_in">filter</span>=(<span class="hljs-string">&quot;languages:ru&quot;</span>, <span class="hljs-string">&quot;task_ids:language-modeling&quot;</span>))`}}),ze=new $({}),We=new v({props:{code:`from huggingface_hub import model_info, dataset_info

model_info("distilbert-base-uncased")

dataset_info("glue")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> model_info, dataset_info

<span class="hljs-comment"># Get metadata of a single model.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model_info(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)

<span class="hljs-comment"># Get metadata of a single dataset.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_info(<span class="hljs-string">&quot;glue&quot;</span>)`}}),Je=new $({}),Ke=new v({props:{code:`from huggingface_hub import create_repo
create_repo("test-model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(<span class="hljs-string">&quot;test-model&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-model&#x27;</span>`}}),Qe=new $({}),Ve=new v({props:{code:`from huggingface_hub import get_full_repo_name, delete_repo
name = get_full_repo_name(repo_name)
delete_repo(repo_id=name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> get_full_repo_name, delete_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>name = get_full_repo_name(repo_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=name)`}}),Xe=new v({props:{code:'delete_repo(repo_id=REPO_NAME, repo_type="dataset")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=REPO_NAME, repo_type=<span class="hljs-string">&quot;dataset&quot;</span>)'}}),Ze=new $({}),et=new v({props:{code:`from huggingface_hub import update_repo_visibility
update_repo_visibility(name=REPO_NAME, private=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> update_repo_visibility
<span class="hljs-meta">&gt;&gt;&gt; </span>update_repo_visibility(name=REPO_NAME, private=<span class="hljs-literal">True</span>)`}}),tt=new $({}),ot=new $({}),st=new v({props:{code:'repo = Repository(local_dir="w2v2", clone_from="facebook/wav2vec2-large-960h-lv60")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;w2v2&quot;</span>, clone_from=<span class="hljs-string">&quot;facebook/wav2vec2-large-960h-lv60&quot;</span>)'}}),lt=new v({props:{code:'repo = Repository(local_dir="huggingface-hub", clone_from="https://github.com/huggingface/huggingface_hub")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;huggingface-hub&quot;</span>, clone_from=<span class="hljs-string">&quot;https://github.com/huggingface/huggingface_hub&quot;</span>)'}}),rt=new v({props:{code:`repo_url = create_repo(repo_id="repo_name")
repo = Repository(local_dir="repo_local_path", clone_from=repo_url)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo_url = create_repo(repo_id=<span class="hljs-string">&quot;repo_name&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;repo_local_path&quot;</span>, clone_from=repo_url)`}}),it=new $({}),nt=new v({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="<path>/<to>/<folder>")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;&lt;path&gt;/&lt;to&gt;/&lt;folder&gt;&quot;</span>)`}}),pt=new $({}),ct=new v({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),ut=new v({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),dt=new v({props:{code:'repo = Repository(local_dir="my-model", clone_from="<user>/<model_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;my-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;model_id&gt;&quot;</span>)'}}),_t=new v({props:{code:`repo = Repository(
  "my-dataset", 
  clone_from="<user>/<dataset_id>", 
  use_auth_token=True, 
  repo_type="dataset",
  git_user="MyName",
  git_email="me@cool.mail"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;my-dataset&quot;</span>, 
<span class="hljs-meta">... </span>  clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;dataset_id&gt;&quot;</span>, 
<span class="hljs-meta">... </span>  use_auth_token=<span class="hljs-literal">True</span>, 
<span class="hljs-meta">... </span>  repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>  git_user=<span class="hljs-string">&quot;MyName&quot;</span>,
<span class="hljs-meta">... </span>  git_email=<span class="hljs-string">&quot;me@cool.mail&quot;</span>
<span class="hljs-meta">... </span>)`}}),yt=new $({}),vt=new v({props:{code:`repo = Repository(local_dir="huggingface-hub", clone_from="<user>/<dataset_id>", revision='branch1')
repo.git_checkout("branch2")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;huggingface-hub&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;dataset_id&gt;&quot;</span>, revision=<span class="hljs-string">&#x27;branch1&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_checkout(<span class="hljs-string">&quot;branch2&quot;</span>)`}}),$t=new $({}),wt=new v({props:{code:"repo.git_pull()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()'}}),bt=new v({props:{code:"repo.git_pull(rebase=True)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull(rebase=<span class="hljs-literal">True</span>)'}}),Et=new $({}),Pt=new v({props:{code:`with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),At=new v({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),Ct=new v({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),xt=new v({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status
<span class="hljs-comment"># -&gt; -1 indicates the push is ongoing.</span>
<span class="hljs-comment"># -&gt; 0 indicates the push has completed successfully.</span>
<span class="hljs-comment"># -&gt; Non-zero code indicates the error code if there was an error.</span>`}}),Rt=new v({props:{code:`# Inspect an error.
>>> last_command.stderr

# Check whether a push is completed or ongoing.
>>> last_command.is_done

# Check whether a push command has errored.
>>> last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),St=new $({}),Dt=new v({props:{code:`repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),Ht=new $({}),Nt=new v({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),{c(){O=o("meta"),Ho=h(),No=o("hr"),Oo=h(),L=o("h2"),ae=o("a"),ha=o("span"),u(Oe.$$.fragment),Gl=h(),ca=o("span"),Fl=r("title: How to create repositories and upload files to the Hub"),Lo=h(),I=o("h1"),oe=o("a"),fa=o("span"),u(Le.$$.fragment),Ul=h(),ua=o("span"),Ml=r("How to integrate upstream utilities in your library"),Io=h(),Ie=o("p"),ma=o("em"),Bl=r("Upstream"),Yl=r(" utilities allow you to publish files to the Hub from your library. This guide will show you how to:"),To=h(),se=o("ul"),Te=o("li"),zl=r("Use the repository-management methods available in the "),ga=o("code"),Wl=r("huggingface_hub"),Jl=r(" package."),Kl=h(),Ge=o("li"),Ql=r("Use the "),da=o("code"),Vl=r("Repository"),Xl=r(" class to handle files and version control a repository with Git-like commands."),Go=h(),T=o("h2"),le=o("a"),_a=o("span"),u(Fe.$$.fragment),Zl=h(),ya=o("span"),er=r("huggingface_hub repository-management methods"),Fo=h(),re=o("p"),tr=r("The "),va=o("code"),ar=r("huggingface_hub"),or=r(" package offers high-level methods that wraps around HTTP requests. There are many valuable tasks you can accomplish with it, including:"),Uo=h(),E=o("ul"),$a=o("li"),sr=r("List and filter models and datasets."),lr=h(),wa=o("li"),rr=r("Inspect model or dataset metadata."),ir=h(),ba=o("li"),nr=r("Delete a repository."),pr=h(),Ea=o("li"),hr=r("Change the visibility of a repository."),Mo=h(),G=o("h3"),ie=o("a"),ka=o("span"),u(Ue.$$.fragment),cr=h(),ja=o("span"),fr=r("List and filter"),Bo=h(),C=o("p"),ur=r("It can be helpful for users to see a list of available models and filter them according to a specific language or library. This can be especially useful for library and organization owners who want to view all their models. Use the "),Ot=o("a"),mr=r("list_models()"),gr=r(" function with the "),qa=o("code"),dr=r("filter"),_r=r(" parameter to search for specific models."),Yo=h(),ne=o("p"),yr=r("You can view all the available filters on the left of the "),Me=o("a"),vr=r("model Hub"),$r=r("."),zo=h(),Lt=o("p"),It=o("img"),Wo=h(),u(Be.$$.fragment),Jo=h(),pe=o("p"),wr=r("Explore available public datasets with "),Tt=o("a"),br=r("list_datasets()"),Er=r(":"),Ko=h(),u(Ye.$$.fragment),Qo=h(),F=o("h3"),he=o("a"),Pa=o("span"),u(ze.$$.fragment),kr=h(),Aa=o("span"),jr=r("Inspect model or dataset metadata"),Vo=h(),Gt=o("p"),qr=r("Get important information about a model or dataset as shown below:"),Xo=h(),u(We.$$.fragment),Zo=h(),U=o("h3"),ce=o("a"),Ca=o("span"),u(Je.$$.fragment),Pr=h(),xa=o("span"),Ar=r("Create a repository"),es=h(),x=o("p"),Cr=r("Create a repository with "),Ft=o("a"),xr=r("create_repo()"),Rr=r(" and give it a name with the "),Ra=o("code"),Sr=r("name"),Dr=r(" parameter."),ts=h(),u(Ke.$$.fragment),as=h(),M=o("h3"),fe=o("a"),Sa=o("span"),u(Qe.$$.fragment),Hr=h(),Da=o("span"),Nr=r("Delete a repository"),os=h(),ue=o("p"),Or=r("Delete a repository with "),Ut=o("a"),Lr=r("delete_repo()"),Ir=r(". Make sure you are certain you want to delete a repository because this is an irreversible process!"),ss=h(),k=o("p"),Tr=r("Pass the full repository ID to "),Mt=o("a"),Gr=r("delete_repo()"),Fr=r(". The full repository ID looks like "),Ha=o("code"),Ur=r("{username_or_org}/{repo_name}"),Mr=r(", and you can retrieve it with "),Na=o("code"),Br=r("get_full_repo_name()"),Yr=r(" as shown below:"),ls=h(),u(Ve.$$.fragment),rs=h(),me=o("p"),zr=r("Delete a dataset repository by adding the "),Oa=o("code"),Wr=r("repo_type"),Jr=r(" parameter:"),is=h(),u(Xe.$$.fragment),ns=h(),B=o("h3"),ge=o("a"),La=o("span"),u(Ze.$$.fragment),Kr=h(),Ia=o("span"),Qr=r("Change repository visibility"),ps=h(),Bt=o("p"),Vr=r("A repository can be public or private. A private repository is only visible to you or members of the organization in which the repository is located. Change a repository to private as shown in the following:"),hs=h(),u(et.$$.fragment),cs=h(),Y=o("h2"),de=o("a"),Ta=o("span"),u(tt.$$.fragment),Xr=h(),Ga=o("span"),Zr=r("Repository"),fs=h(),b=o("p"),ei=r("The "),Yt=o("a"),ti=r("Repository"),ai=r(" class allows you to push models or other repositories to the Hub. "),zt=o("a"),oi=r("Repository"),si=r(" is a wrapper over Git and Git-LFS methods, so make sure you have Git-LFS installed (see "),at=o("a"),li=r("here"),ri=r(" for installation instructions) and set up before you begin. The "),Wt=o("a"),ii=r("Repository"),ni=r(" class should feel familiar if you are already familiar with common Git commands."),us=h(),z=o("h3"),_e=o("a"),Fa=o("span"),u(ot.$$.fragment),pi=h(),Ua=o("span"),hi=r("Clone a repository"),ms=h(),R=o("p"),ci=r("The "),Ma=o("code"),fi=r("clone_from"),ui=r(" parameter clones a repository from a Hugging Face model ID to a directory specified by the "),Ba=o("code"),mi=r("local_dir"),gi=r(" argument:"),gs=h(),u(st.$$.fragment),ds=h(),W=o("p"),Ya=o("code"),di=r("clone_from"),_i=r(" can also clone a repository from a specified directory using a URL (if you are working offline, this parameter should be "),za=o("code"),yi=r("None"),vi=r("):"),_s=h(),u(lt.$$.fragment),ys=h(),S=o("p"),$i=r("Easily combine the "),Wa=o("code"),wi=r("clone_from"),bi=r(" parameter with "),Jt=o("a"),Ei=r("create_repo()"),ki=r(" to create and clone a repository:"),vs=h(),u(rt.$$.fragment),$s=h(),J=o("h3"),ye=o("a"),Ja=o("span"),u(it.$$.fragment),ji=h(),Ka=o("span"),qi=r("Using a local clone"),ws=h(),ve=o("p"),Pi=r("Instantiate a "),Kt=o("a"),Ai=r("Repository"),Ci=r(" object with a path to a local Git clone or repository:"),bs=h(),u(nt.$$.fragment),Es=h(),K=o("h3"),$e=o("a"),Qa=o("span"),u(pt.$$.fragment),xi=h(),Va=o("span"),Ri=r("Commit and push to a cloned repository"),ks=h(),Qt=o("p"),Si=r("If you want to commit or push to a cloned repository that belongs to you or your organizations:"),js=h(),D=o("ol"),ht=o("li"),Xa=o("p"),Di=r("Log in to your Hugging Face account with the following command:"),Hi=h(),u(ct.$$.fragment),Ni=h(),Q=o("li"),ft=o("p"),Oi=r("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Za=o("code"),Li=r("notebook_login()"),Ii=r(":"),Ti=h(),u(ut.$$.fragment),Gi=h(),Vt=o("p"),eo=o("code"),Fi=r("notebook_login()"),Ui=r(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),Mi=h(),mt=o("li"),gt=o("p"),Bi=r("Instantiate a "),Xt=o("a"),Yi=r("Repository"),zi=r(" class:"),Wi=h(),u(dt.$$.fragment),qs=h(),H=o("p"),Ji=r("You can also attribute a Git username and email to a cloned repository by specifying the "),to=o("code"),Ki=r("git_user"),Qi=r(" and "),ao=o("code"),Vi=r("git_email"),Xi=r(" parameters. When users commit to that repository, Git will be aware of the commit author."),Ps=h(),u(_t.$$.fragment),As=h(),V=o("h3"),we=o("a"),oo=o("span"),u(yt.$$.fragment),Zi=h(),so=o("span"),en=r("Branch"),Cs=h(),j=o("p"),tn=r("Switch between branches with "),lo=o("code"),an=r("git_checkout"),on=r(". For example, if you want to switch from "),ro=o("code"),sn=r("branch1"),ln=r(" to "),io=o("code"),rn=r("branch2"),nn=r(":"),xs=h(),u(vt.$$.fragment),Rs=h(),X=o("h3"),be=o("a"),no=o("span"),u($t.$$.fragment),pn=h(),po=o("span"),hn=r("Pull"),Ss=h(),Ee=o("p"),cn=r("Update a current local branch with "),ho=o("code"),fn=r("git_pull"),un=r(":"),Ds=h(),u(wt.$$.fragment),Hs=h(),ke=o("p"),mn=r("Set "),co=o("code"),gn=r("rebase=True"),dn=r(" if you want your local commits to occur after your branch is updated with the new commits from the remote:"),Ns=h(),u(bt.$$.fragment),Os=h(),Z=o("h3"),je=o("a"),fo=o("span"),u(Et.$$.fragment),_n=h(),uo=o("span"),yn=r("commit context manager"),Ls=h(),q=o("p"),vn=r("The "),mo=o("code"),$n=r("commit"),wn=r(" context manager is a simple utility that handles four of the most common Git commands: pull, add, commit, and push. "),go=o("code"),bn=r("git-lfs"),En=r(" automatically tracks any file larger than 10MB. In the following example, the "),_o=o("code"),kn=r("commit"),jn=r(" context manager:"),Is=h(),P=o("ol"),kt=o("li"),qn=r("Pulls from the "),yo=o("code"),Pn=r("text-files"),An=r(" repository."),Cn=h(),jt=o("li"),xn=r("Adds a change made to "),vo=o("code"),Rn=r("file.txt"),Sn=r("."),Dn=h(),$o=o("li"),Hn=r("Commits the change."),Nn=h(),qt=o("li"),On=r("Pushes the change to the "),wo=o("code"),Ln=r("text-files"),In=r(" repository."),Ts=h(),u(Pt.$$.fragment),Gs=h(),Zt=o("p"),Tn=r("Here is another example of how to save and upload a file to a repository:"),Fs=h(),u(At.$$.fragment),Us=h(),qe=o("p"),Gn=r("Set "),bo=o("code"),Fn=r("blocking=False"),Un=r(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),Ms=h(),u(Ct.$$.fragment),Bs=h(),Pe=o("p"),Mn=r("You can check the status of your push with the "),Eo=o("code"),Bn=r("command_queue"),Yn=r(" property:"),Ys=h(),u(xt.$$.fragment),zs=h(),Ae=o("p"),zn=r("When "),ko=o("code"),Wn=r("blocking=False"),Jn=r(", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Ws=h(),u(Rt.$$.fragment),Js=h(),ee=o("h3"),Ce=o("a"),jo=o("span"),u(St.$$.fragment),Kn=h(),qo=o("span"),Qn=r("push_to_hub"),Ks=h(),w=o("p"),Vn=r("The "),ea=o("a"),Xn=r("Repository"),Zn=r(" class also has a "),Po=o("code"),ep=r("push_to_hub"),tp=r(" utility to add files, make a commit, and push them to a repository. Unlike the "),Ao=o("code"),ap=r("commit"),op=r(" context manager, "),Co=o("code"),sp=r("push_to_hub"),lp=r(" requires you to pull from a repository first, save the files, and then call "),xo=o("code"),rp=r("push_to_hub"),ip=r("."),Qs=h(),u(Dt.$$.fragment),Vs=h(),te=o("h2"),xe=o("a"),Ro=o("span"),u(Ht.$$.fragment),np=h(),So=o("span"),pp=r("Upload very large files"),Xs=h(),ta=o("p"),hp=r("For huge files (>5GB), you need to install a custom transfer agent for Git-LFS:"),Zs=h(),u(Nt.$$.fragment),el=h(),aa=o("p"),cp=r("You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),this.h()},l(e){const n=jc('[data-svelte="svelte-1phssyn"]',document.head);O=s(n,"META",{name:!0,content:!0}),n.forEach(a),Ho=c(e),No=s(e,"HR",{}),Oo=c(e),L=s(e,"H2",{class:!0});var al=l(L);ae=s(al,"A",{id:!0,class:!0,href:!0});var dp=l(ae);ha=s(dp,"SPAN",{});var _p=l(ha);m(Oe.$$.fragment,_p),_p.forEach(a),dp.forEach(a),Gl=c(al),ca=s(al,"SPAN",{});var yp=l(ca);Fl=i(yp,"title: How to create repositories and upload files to the Hub"),yp.forEach(a),al.forEach(a),Lo=c(e),I=s(e,"H1",{class:!0});var ol=l(I);oe=s(ol,"A",{id:!0,class:!0,href:!0});var vp=l(oe);fa=s(vp,"SPAN",{});var $p=l(fa);m(Le.$$.fragment,$p),$p.forEach(a),vp.forEach(a),Ul=c(ol),ua=s(ol,"SPAN",{});var wp=l(ua);Ml=i(wp,"How to integrate upstream utilities in your library"),wp.forEach(a),ol.forEach(a),Io=c(e),Ie=s(e,"P",{});var fp=l(Ie);ma=s(fp,"EM",{});var bp=l(ma);Bl=i(bp,"Upstream"),bp.forEach(a),Yl=i(fp," utilities allow you to publish files to the Hub from your library. This guide will show you how to:"),fp.forEach(a),To=c(e),se=s(e,"UL",{});var sl=l(se);Te=s(sl,"LI",{});var ll=l(Te);zl=i(ll,"Use the repository-management methods available in the "),ga=s(ll,"CODE",{});var Ep=l(ga);Wl=i(Ep,"huggingface_hub"),Ep.forEach(a),Jl=i(ll," package."),ll.forEach(a),Kl=c(sl),Ge=s(sl,"LI",{});var rl=l(Ge);Ql=i(rl,"Use the "),da=s(rl,"CODE",{});var kp=l(da);Vl=i(kp,"Repository"),kp.forEach(a),Xl=i(rl," class to handle files and version control a repository with Git-like commands."),rl.forEach(a),sl.forEach(a),Go=c(e),T=s(e,"H2",{class:!0});var il=l(T);le=s(il,"A",{id:!0,class:!0,href:!0});var jp=l(le);_a=s(jp,"SPAN",{});var qp=l(_a);m(Fe.$$.fragment,qp),qp.forEach(a),jp.forEach(a),Zl=c(il),ya=s(il,"SPAN",{});var Pp=l(ya);er=i(Pp,"huggingface_hub repository-management methods"),Pp.forEach(a),il.forEach(a),Fo=c(e),re=s(e,"P",{});var nl=l(re);tr=i(nl,"The "),va=s(nl,"CODE",{});var Ap=l(va);ar=i(Ap,"huggingface_hub"),Ap.forEach(a),or=i(nl," package offers high-level methods that wraps around HTTP requests. There are many valuable tasks you can accomplish with it, including:"),nl.forEach(a),Uo=c(e),E=s(e,"UL",{});var Re=l(E);$a=s(Re,"LI",{});var Cp=l($a);sr=i(Cp,"List and filter models and datasets."),Cp.forEach(a),lr=c(Re),wa=s(Re,"LI",{});var xp=l(wa);rr=i(xp,"Inspect model or dataset metadata."),xp.forEach(a),ir=c(Re),ba=s(Re,"LI",{});var Rp=l(ba);nr=i(Rp,"Delete a repository."),Rp.forEach(a),pr=c(Re),Ea=s(Re,"LI",{});var Sp=l(Ea);hr=i(Sp,"Change the visibility of a repository."),Sp.forEach(a),Re.forEach(a),Mo=c(e),G=s(e,"H3",{class:!0});var pl=l(G);ie=s(pl,"A",{id:!0,class:!0,href:!0});var Dp=l(ie);ka=s(Dp,"SPAN",{});var Hp=l(ka);m(Ue.$$.fragment,Hp),Hp.forEach(a),Dp.forEach(a),cr=c(pl),ja=s(pl,"SPAN",{});var Np=l(ja);fr=i(Np,"List and filter"),Np.forEach(a),pl.forEach(a),Bo=c(e),C=s(e,"P",{});var oa=l(C);ur=i(oa,"It can be helpful for users to see a list of available models and filter them according to a specific language or library. This can be especially useful for library and organization owners who want to view all their models. Use the "),Ot=s(oa,"A",{href:!0});var Op=l(Ot);mr=i(Op,"list_models()"),Op.forEach(a),gr=i(oa," function with the "),qa=s(oa,"CODE",{});var Lp=l(qa);dr=i(Lp,"filter"),Lp.forEach(a),_r=i(oa," parameter to search for specific models."),oa.forEach(a),Yo=c(e),ne=s(e,"P",{});var hl=l(ne);yr=i(hl,"You can view all the available filters on the left of the "),Me=s(hl,"A",{href:!0,rel:!0});var Ip=l(Me);vr=i(Ip,"model Hub"),Ip.forEach(a),$r=i(hl,"."),hl.forEach(a),zo=c(e),Lt=s(e,"P",{});var Tp=l(Lt);It=s(Tp,"IMG",{src:!0,alt:!0}),Tp.forEach(a),Wo=c(e),m(Be.$$.fragment,e),Jo=c(e),pe=s(e,"P",{});var cl=l(pe);wr=i(cl,"Explore available public datasets with "),Tt=s(cl,"A",{href:!0});var Gp=l(Tt);br=i(Gp,"list_datasets()"),Gp.forEach(a),Er=i(cl,":"),cl.forEach(a),Ko=c(e),m(Ye.$$.fragment,e),Qo=c(e),F=s(e,"H3",{class:!0});var fl=l(F);he=s(fl,"A",{id:!0,class:!0,href:!0});var Fp=l(he);Pa=s(Fp,"SPAN",{});var Up=l(Pa);m(ze.$$.fragment,Up),Up.forEach(a),Fp.forEach(a),kr=c(fl),Aa=s(fl,"SPAN",{});var Mp=l(Aa);jr=i(Mp,"Inspect model or dataset metadata"),Mp.forEach(a),fl.forEach(a),Vo=c(e),Gt=s(e,"P",{});var Bp=l(Gt);qr=i(Bp,"Get important information about a model or dataset as shown below:"),Bp.forEach(a),Xo=c(e),m(We.$$.fragment,e),Zo=c(e),U=s(e,"H3",{class:!0});var ul=l(U);ce=s(ul,"A",{id:!0,class:!0,href:!0});var Yp=l(ce);Ca=s(Yp,"SPAN",{});var zp=l(Ca);m(Je.$$.fragment,zp),zp.forEach(a),Yp.forEach(a),Pr=c(ul),xa=s(ul,"SPAN",{});var Wp=l(xa);Ar=i(Wp,"Create a repository"),Wp.forEach(a),ul.forEach(a),es=c(e),x=s(e,"P",{});var sa=l(x);Cr=i(sa,"Create a repository with "),Ft=s(sa,"A",{href:!0});var Jp=l(Ft);xr=i(Jp,"create_repo()"),Jp.forEach(a),Rr=i(sa," and give it a name with the "),Ra=s(sa,"CODE",{});var Kp=l(Ra);Sr=i(Kp,"name"),Kp.forEach(a),Dr=i(sa," parameter."),sa.forEach(a),ts=c(e),m(Ke.$$.fragment,e),as=c(e),M=s(e,"H3",{class:!0});var ml=l(M);fe=s(ml,"A",{id:!0,class:!0,href:!0});var Qp=l(fe);Sa=s(Qp,"SPAN",{});var Vp=l(Sa);m(Qe.$$.fragment,Vp),Vp.forEach(a),Qp.forEach(a),Hr=c(ml),Da=s(ml,"SPAN",{});var Xp=l(Da);Nr=i(Xp,"Delete a repository"),Xp.forEach(a),ml.forEach(a),os=c(e),ue=s(e,"P",{});var gl=l(ue);Or=i(gl,"Delete a repository with "),Ut=s(gl,"A",{href:!0});var Zp=l(Ut);Lr=i(Zp,"delete_repo()"),Zp.forEach(a),Ir=i(gl,". Make sure you are certain you want to delete a repository because this is an irreversible process!"),gl.forEach(a),ss=c(e),k=s(e,"P",{});var Se=l(k);Tr=i(Se,"Pass the full repository ID to "),Mt=s(Se,"A",{href:!0});var eh=l(Mt);Gr=i(eh,"delete_repo()"),eh.forEach(a),Fr=i(Se,". The full repository ID looks like "),Ha=s(Se,"CODE",{});var th=l(Ha);Ur=i(th,"{username_or_org}/{repo_name}"),th.forEach(a),Mr=i(Se,", and you can retrieve it with "),Na=s(Se,"CODE",{});var ah=l(Na);Br=i(ah,"get_full_repo_name()"),ah.forEach(a),Yr=i(Se," as shown below:"),Se.forEach(a),ls=c(e),m(Ve.$$.fragment,e),rs=c(e),me=s(e,"P",{});var dl=l(me);zr=i(dl,"Delete a dataset repository by adding the "),Oa=s(dl,"CODE",{});var oh=l(Oa);Wr=i(oh,"repo_type"),oh.forEach(a),Jr=i(dl," parameter:"),dl.forEach(a),is=c(e),m(Xe.$$.fragment,e),ns=c(e),B=s(e,"H3",{class:!0});var _l=l(B);ge=s(_l,"A",{id:!0,class:!0,href:!0});var sh=l(ge);La=s(sh,"SPAN",{});var lh=l(La);m(Ze.$$.fragment,lh),lh.forEach(a),sh.forEach(a),Kr=c(_l),Ia=s(_l,"SPAN",{});var rh=l(Ia);Qr=i(rh,"Change repository visibility"),rh.forEach(a),_l.forEach(a),ps=c(e),Bt=s(e,"P",{});var ih=l(Bt);Vr=i(ih,"A repository can be public or private. A private repository is only visible to you or members of the organization in which the repository is located. Change a repository to private as shown in the following:"),ih.forEach(a),hs=c(e),m(et.$$.fragment,e),cs=c(e),Y=s(e,"H2",{class:!0});var yl=l(Y);de=s(yl,"A",{id:!0,class:!0,href:!0});var nh=l(de);Ta=s(nh,"SPAN",{});var ph=l(Ta);m(tt.$$.fragment,ph),ph.forEach(a),nh.forEach(a),Xr=c(yl),Ga=s(yl,"SPAN",{});var hh=l(Ga);Zr=i(hh,"Repository"),hh.forEach(a),yl.forEach(a),fs=c(e),b=s(e,"P",{});var N=l(b);ei=i(N,"The "),Yt=s(N,"A",{href:!0});var ch=l(Yt);ti=i(ch,"Repository"),ch.forEach(a),ai=i(N," class allows you to push models or other repositories to the Hub. "),zt=s(N,"A",{href:!0});var fh=l(zt);oi=i(fh,"Repository"),fh.forEach(a),si=i(N," is a wrapper over Git and Git-LFS methods, so make sure you have Git-LFS installed (see "),at=s(N,"A",{href:!0,rel:!0});var uh=l(at);li=i(uh,"here"),uh.forEach(a),ri=i(N," for installation instructions) and set up before you begin. The "),Wt=s(N,"A",{href:!0});var mh=l(Wt);ii=i(mh,"Repository"),mh.forEach(a),ni=i(N," class should feel familiar if you are already familiar with common Git commands."),N.forEach(a),us=c(e),z=s(e,"H3",{class:!0});var vl=l(z);_e=s(vl,"A",{id:!0,class:!0,href:!0});var gh=l(_e);Fa=s(gh,"SPAN",{});var dh=l(Fa);m(ot.$$.fragment,dh),dh.forEach(a),gh.forEach(a),pi=c(vl),Ua=s(vl,"SPAN",{});var _h=l(Ua);hi=i(_h,"Clone a repository"),_h.forEach(a),vl.forEach(a),ms=c(e),R=s(e,"P",{});var la=l(R);ci=i(la,"The "),Ma=s(la,"CODE",{});var yh=l(Ma);fi=i(yh,"clone_from"),yh.forEach(a),ui=i(la," parameter clones a repository from a Hugging Face model ID to a directory specified by the "),Ba=s(la,"CODE",{});var vh=l(Ba);mi=i(vh,"local_dir"),vh.forEach(a),gi=i(la," argument:"),la.forEach(a),gs=c(e),m(st.$$.fragment,e),ds=c(e),W=s(e,"P",{});var Do=l(W);Ya=s(Do,"CODE",{});var $h=l(Ya);di=i($h,"clone_from"),$h.forEach(a),_i=i(Do," can also clone a repository from a specified directory using a URL (if you are working offline, this parameter should be "),za=s(Do,"CODE",{});var wh=l(za);yi=i(wh,"None"),wh.forEach(a),vi=i(Do,"):"),Do.forEach(a),_s=c(e),m(lt.$$.fragment,e),ys=c(e),S=s(e,"P",{});var ra=l(S);$i=i(ra,"Easily combine the "),Wa=s(ra,"CODE",{});var bh=l(Wa);wi=i(bh,"clone_from"),bh.forEach(a),bi=i(ra," parameter with "),Jt=s(ra,"A",{href:!0});var Eh=l(Jt);Ei=i(Eh,"create_repo()"),Eh.forEach(a),ki=i(ra," to create and clone a repository:"),ra.forEach(a),vs=c(e),m(rt.$$.fragment,e),$s=c(e),J=s(e,"H3",{class:!0});var $l=l(J);ye=s($l,"A",{id:!0,class:!0,href:!0});var kh=l(ye);Ja=s(kh,"SPAN",{});var jh=l(Ja);m(it.$$.fragment,jh),jh.forEach(a),kh.forEach(a),ji=c($l),Ka=s($l,"SPAN",{});var qh=l(Ka);qi=i(qh,"Using a local clone"),qh.forEach(a),$l.forEach(a),ws=c(e),ve=s(e,"P",{});var wl=l(ve);Pi=i(wl,"Instantiate a "),Kt=s(wl,"A",{href:!0});var Ph=l(Kt);Ai=i(Ph,"Repository"),Ph.forEach(a),Ci=i(wl," object with a path to a local Git clone or repository:"),wl.forEach(a),bs=c(e),m(nt.$$.fragment,e),Es=c(e),K=s(e,"H3",{class:!0});var bl=l(K);$e=s(bl,"A",{id:!0,class:!0,href:!0});var Ah=l($e);Qa=s(Ah,"SPAN",{});var Ch=l(Qa);m(pt.$$.fragment,Ch),Ch.forEach(a),Ah.forEach(a),xi=c(bl),Va=s(bl,"SPAN",{});var xh=l(Va);Ri=i(xh,"Commit and push to a cloned repository"),xh.forEach(a),bl.forEach(a),ks=c(e),Qt=s(e,"P",{});var Rh=l(Qt);Si=i(Rh,"If you want to commit or push to a cloned repository that belongs to you or your organizations:"),Rh.forEach(a),js=c(e),D=s(e,"OL",{});var ia=l(D);ht=s(ia,"LI",{});var El=l(ht);Xa=s(El,"P",{});var Sh=l(Xa);Di=i(Sh,"Log in to your Hugging Face account with the following command:"),Sh.forEach(a),Hi=c(El),m(ct.$$.fragment,El),El.forEach(a),Ni=c(ia),Q=s(ia,"LI",{});var na=l(Q);ft=s(na,"P",{});var kl=l(ft);Oi=i(kl,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Za=s(kl,"CODE",{});var Dh=l(Za);Li=i(Dh,"notebook_login()"),Dh.forEach(a),Ii=i(kl,":"),kl.forEach(a),Ti=c(na),m(ut.$$.fragment,na),Gi=c(na),Vt=s(na,"P",{});var up=l(Vt);eo=s(up,"CODE",{});var Hh=l(eo);Fi=i(Hh,"notebook_login()"),Hh.forEach(a),Ui=i(up," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),up.forEach(a),na.forEach(a),Mi=c(ia),mt=s(ia,"LI",{});var jl=l(mt);gt=s(jl,"P",{});var ql=l(gt);Bi=i(ql,"Instantiate a "),Xt=s(ql,"A",{href:!0});var Nh=l(Xt);Yi=i(Nh,"Repository"),Nh.forEach(a),zi=i(ql," class:"),ql.forEach(a),Wi=c(jl),m(dt.$$.fragment,jl),jl.forEach(a),ia.forEach(a),qs=c(e),H=s(e,"P",{});var pa=l(H);Ji=i(pa,"You can also attribute a Git username and email to a cloned repository by specifying the "),to=s(pa,"CODE",{});var Oh=l(to);Ki=i(Oh,"git_user"),Oh.forEach(a),Qi=i(pa," and "),ao=s(pa,"CODE",{});var Lh=l(ao);Vi=i(Lh,"git_email"),Lh.forEach(a),Xi=i(pa," parameters. When users commit to that repository, Git will be aware of the commit author."),pa.forEach(a),Ps=c(e),m(_t.$$.fragment,e),As=c(e),V=s(e,"H3",{class:!0});var Pl=l(V);we=s(Pl,"A",{id:!0,class:!0,href:!0});var Ih=l(we);oo=s(Ih,"SPAN",{});var Th=l(oo);m(yt.$$.fragment,Th),Th.forEach(a),Ih.forEach(a),Zi=c(Pl),so=s(Pl,"SPAN",{});var Gh=l(so);en=i(Gh,"Branch"),Gh.forEach(a),Pl.forEach(a),Cs=c(e),j=s(e,"P",{});var De=l(j);tn=i(De,"Switch between branches with "),lo=s(De,"CODE",{});var Fh=l(lo);an=i(Fh,"git_checkout"),Fh.forEach(a),on=i(De,". For example, if you want to switch from "),ro=s(De,"CODE",{});var Uh=l(ro);sn=i(Uh,"branch1"),Uh.forEach(a),ln=i(De," to "),io=s(De,"CODE",{});var Mh=l(io);rn=i(Mh,"branch2"),Mh.forEach(a),nn=i(De,":"),De.forEach(a),xs=c(e),m(vt.$$.fragment,e),Rs=c(e),X=s(e,"H3",{class:!0});var Al=l(X);be=s(Al,"A",{id:!0,class:!0,href:!0});var Bh=l(be);no=s(Bh,"SPAN",{});var Yh=l(no);m($t.$$.fragment,Yh),Yh.forEach(a),Bh.forEach(a),pn=c(Al),po=s(Al,"SPAN",{});var zh=l(po);hn=i(zh,"Pull"),zh.forEach(a),Al.forEach(a),Ss=c(e),Ee=s(e,"P",{});var Cl=l(Ee);cn=i(Cl,"Update a current local branch with "),ho=s(Cl,"CODE",{});var Wh=l(ho);fn=i(Wh,"git_pull"),Wh.forEach(a),un=i(Cl,":"),Cl.forEach(a),Ds=c(e),m(wt.$$.fragment,e),Hs=c(e),ke=s(e,"P",{});var xl=l(ke);mn=i(xl,"Set "),co=s(xl,"CODE",{});var Jh=l(co);gn=i(Jh,"rebase=True"),Jh.forEach(a),dn=i(xl," if you want your local commits to occur after your branch is updated with the new commits from the remote:"),xl.forEach(a),Ns=c(e),m(bt.$$.fragment,e),Os=c(e),Z=s(e,"H3",{class:!0});var Rl=l(Z);je=s(Rl,"A",{id:!0,class:!0,href:!0});var Kh=l(je);fo=s(Kh,"SPAN",{});var Qh=l(fo);m(Et.$$.fragment,Qh),Qh.forEach(a),Kh.forEach(a),_n=c(Rl),uo=s(Rl,"SPAN",{});var Vh=l(uo);yn=i(Vh,"commit context manager"),Vh.forEach(a),Rl.forEach(a),Ls=c(e),q=s(e,"P",{});var He=l(q);vn=i(He,"The "),mo=s(He,"CODE",{});var Xh=l(mo);$n=i(Xh,"commit"),Xh.forEach(a),wn=i(He," context manager is a simple utility that handles four of the most common Git commands: pull, add, commit, and push. "),go=s(He,"CODE",{});var Zh=l(go);bn=i(Zh,"git-lfs"),Zh.forEach(a),En=i(He," automatically tracks any file larger than 10MB. In the following example, the "),_o=s(He,"CODE",{});var ec=l(_o);kn=i(ec,"commit"),ec.forEach(a),jn=i(He," context manager:"),He.forEach(a),Is=c(e),P=s(e,"OL",{});var Ne=l(P);kt=s(Ne,"LI",{});var Sl=l(kt);qn=i(Sl,"Pulls from the "),yo=s(Sl,"CODE",{});var tc=l(yo);Pn=i(tc,"text-files"),tc.forEach(a),An=i(Sl," repository."),Sl.forEach(a),Cn=c(Ne),jt=s(Ne,"LI",{});var Dl=l(jt);xn=i(Dl,"Adds a change made to "),vo=s(Dl,"CODE",{});var ac=l(vo);Rn=i(ac,"file.txt"),ac.forEach(a),Sn=i(Dl,"."),Dl.forEach(a),Dn=c(Ne),$o=s(Ne,"LI",{});var oc=l($o);Hn=i(oc,"Commits the change."),oc.forEach(a),Nn=c(Ne),qt=s(Ne,"LI",{});var Hl=l(qt);On=i(Hl,"Pushes the change to the "),wo=s(Hl,"CODE",{});var sc=l(wo);Ln=i(sc,"text-files"),sc.forEach(a),In=i(Hl," repository."),Hl.forEach(a),Ne.forEach(a),Ts=c(e),m(Pt.$$.fragment,e),Gs=c(e),Zt=s(e,"P",{});var lc=l(Zt);Tn=i(lc,"Here is another example of how to save and upload a file to a repository:"),lc.forEach(a),Fs=c(e),m(At.$$.fragment,e),Us=c(e),qe=s(e,"P",{});var Nl=l(qe);Gn=i(Nl,"Set "),bo=s(Nl,"CODE",{});var rc=l(bo);Fn=i(rc,"blocking=False"),rc.forEach(a),Un=i(Nl," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),Nl.forEach(a),Ms=c(e),m(Ct.$$.fragment,e),Bs=c(e),Pe=s(e,"P",{});var Ol=l(Pe);Mn=i(Ol,"You can check the status of your push with the "),Eo=s(Ol,"CODE",{});var ic=l(Eo);Bn=i(ic,"command_queue"),ic.forEach(a),Yn=i(Ol," property:"),Ol.forEach(a),Ys=c(e),m(xt.$$.fragment,e),zs=c(e),Ae=s(e,"P",{});var Ll=l(Ae);zn=i(Ll,"When "),ko=s(Ll,"CODE",{});var nc=l(ko);Wn=i(nc,"blocking=False"),nc.forEach(a),Jn=i(Ll,", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Ll.forEach(a),Ws=c(e),m(Rt.$$.fragment,e),Js=c(e),ee=s(e,"H3",{class:!0});var Il=l(ee);Ce=s(Il,"A",{id:!0,class:!0,href:!0});var pc=l(Ce);jo=s(pc,"SPAN",{});var hc=l(jo);m(St.$$.fragment,hc),hc.forEach(a),pc.forEach(a),Kn=c(Il),qo=s(Il,"SPAN",{});var cc=l(qo);Qn=i(cc,"push_to_hub"),cc.forEach(a),Il.forEach(a),Ks=c(e),w=s(e,"P",{});var A=l(w);Vn=i(A,"The "),ea=s(A,"A",{href:!0});var fc=l(ea);Xn=i(fc,"Repository"),fc.forEach(a),Zn=i(A," class also has a "),Po=s(A,"CODE",{});var uc=l(Po);ep=i(uc,"push_to_hub"),uc.forEach(a),tp=i(A," utility to add files, make a commit, and push them to a repository. Unlike the "),Ao=s(A,"CODE",{});var mc=l(Ao);ap=i(mc,"commit"),mc.forEach(a),op=i(A," context manager, "),Co=s(A,"CODE",{});var gc=l(Co);sp=i(gc,"push_to_hub"),gc.forEach(a),lp=i(A," requires you to pull from a repository first, save the files, and then call "),xo=s(A,"CODE",{});var dc=l(xo);rp=i(dc,"push_to_hub"),dc.forEach(a),ip=i(A,"."),A.forEach(a),Qs=c(e),m(Dt.$$.fragment,e),Vs=c(e),te=s(e,"H2",{class:!0});var Tl=l(te);xe=s(Tl,"A",{id:!0,class:!0,href:!0});var _c=l(xe);Ro=s(_c,"SPAN",{});var yc=l(Ro);m(Ht.$$.fragment,yc),yc.forEach(a),_c.forEach(a),np=c(Tl),So=s(Tl,"SPAN",{});var vc=l(So);pp=i(vc,"Upload very large files"),vc.forEach(a),Tl.forEach(a),Xs=c(e),ta=s(e,"P",{});var $c=l(ta);hp=i($c,"For huge files (>5GB), you need to install a custom transfer agent for Git-LFS:"),$c.forEach(a),Zs=c(e),m(Nt.$$.fragment,e),el=c(e),aa=s(e,"P",{});var wc=l(aa);cp=i(wc,"You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),wc.forEach(a),this.h()},h(){f(O,"name","hf:doc:metadata"),f(O,"content",JSON.stringify(xc)),f(ae,"id","title:-how-to-create-repositories-and-upload-files-to-the-hub"),f(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ae,"href","#title:-how-to-create-repositories-and-upload-files-to-the-hub"),f(L,"class","relative group"),f(oe,"id","how-to-integrate-upstream-utilities-in-your-library"),f(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(oe,"href","#how-to-integrate-upstream-utilities-in-your-library"),f(I,"class","relative group"),f(le,"id","huggingfacehub-repositorymanagement-methods"),f(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(le,"href","#huggingfacehub-repositorymanagement-methods"),f(T,"class","relative group"),f(ie,"id","list-and-filter"),f(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ie,"href","#list-and-filter"),f(G,"class","relative group"),f(Ot,"href","/docs/huggingface_hub/pr_352/en/package_reference/hf_api#huggingface_hub.HfApi.list_models"),f(Me,"href","http://hf.co/models"),f(Me,"rel","nofollow"),qc(It.src,gp="/docs/assets/hub/hub_filters.png")||f(It,"src",gp),f(It,"alt","/docs/assets/hub/hub_filters.png"),f(Tt,"href","/docs/huggingface_hub/pr_352/en/package_reference/hf_api#huggingface_hub.HfApi.list_datasets"),f(he,"id","inspect-model-or-dataset-metadata"),f(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(he,"href","#inspect-model-or-dataset-metadata"),f(F,"class","relative group"),f(ce,"id","create-a-repository"),f(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ce,"href","#create-a-repository"),f(U,"class","relative group"),f(Ft,"href","/docs/huggingface_hub/pr_352/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo"),f(fe,"id","delete-a-repository"),f(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(fe,"href","#delete-a-repository"),f(M,"class","relative group"),f(Ut,"href","/docs/huggingface_hub/pr_352/en/package_reference/hf_api#huggingface_hub.HfApi.delete_repo"),f(Mt,"href","/docs/huggingface_hub/pr_352/en/package_reference/hf_api#huggingface_hub.HfApi.delete_repo"),f(ge,"id","change-repository-visibility"),f(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ge,"href","#change-repository-visibility"),f(B,"class","relative group"),f(de,"id","repository"),f(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(de,"href","#repository"),f(Y,"class","relative group"),f(Yt,"href","/docs/huggingface_hub/pr_352/en/package_reference/repository#huggingface_hub.Repository"),f(zt,"href","/docs/huggingface_hub/pr_352/en/package_reference/repository#huggingface_hub.Repository"),f(at,"href","https://git-lfs.github.com/"),f(at,"rel","nofollow"),f(Wt,"href","/docs/huggingface_hub/pr_352/en/package_reference/repository#huggingface_hub.Repository"),f(_e,"id","clone-a-repository"),f(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(_e,"href","#clone-a-repository"),f(z,"class","relative group"),f(Jt,"href","/docs/huggingface_hub/pr_352/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo"),f(ye,"id","using-a-local-clone"),f(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ye,"href","#using-a-local-clone"),f(J,"class","relative group"),f(Kt,"href","/docs/huggingface_hub/pr_352/en/package_reference/repository#huggingface_hub.Repository"),f($e,"id","commit-and-push-to-a-cloned-repository"),f($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f($e,"href","#commit-and-push-to-a-cloned-repository"),f(K,"class","relative group"),f(Xt,"href","/docs/huggingface_hub/pr_352/en/package_reference/repository#huggingface_hub.Repository"),f(we,"id","branch"),f(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(we,"href","#branch"),f(V,"class","relative group"),f(be,"id","pull"),f(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(be,"href","#pull"),f(X,"class","relative group"),f(je,"id","commit-context-manager"),f(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(je,"href","#commit-context-manager"),f(Z,"class","relative group"),f(Ce,"id","pushtohub"),f(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ce,"href","#pushtohub"),f(ee,"class","relative group"),f(ea,"href","/docs/huggingface_hub/pr_352/en/package_reference/repository#huggingface_hub.Repository"),f(xe,"id","upload-very-large-files"),f(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(xe,"href","#upload-very-large-files"),f(te,"class","relative group")},m(e,n){t(document.head,O),p(e,Ho,n),p(e,No,n),p(e,Oo,n),p(e,L,n),t(L,ae),t(ae,ha),g(Oe,ha,null),t(L,Gl),t(L,ca),t(ca,Fl),p(e,Lo,n),p(e,I,n),t(I,oe),t(oe,fa),g(Le,fa,null),t(I,Ul),t(I,ua),t(ua,Ml),p(e,Io,n),p(e,Ie,n),t(Ie,ma),t(ma,Bl),t(Ie,Yl),p(e,To,n),p(e,se,n),t(se,Te),t(Te,zl),t(Te,ga),t(ga,Wl),t(Te,Jl),t(se,Kl),t(se,Ge),t(Ge,Ql),t(Ge,da),t(da,Vl),t(Ge,Xl),p(e,Go,n),p(e,T,n),t(T,le),t(le,_a),g(Fe,_a,null),t(T,Zl),t(T,ya),t(ya,er),p(e,Fo,n),p(e,re,n),t(re,tr),t(re,va),t(va,ar),t(re,or),p(e,Uo,n),p(e,E,n),t(E,$a),t($a,sr),t(E,lr),t(E,wa),t(wa,rr),t(E,ir),t(E,ba),t(ba,nr),t(E,pr),t(E,Ea),t(Ea,hr),p(e,Mo,n),p(e,G,n),t(G,ie),t(ie,ka),g(Ue,ka,null),t(G,cr),t(G,ja),t(ja,fr),p(e,Bo,n),p(e,C,n),t(C,ur),t(C,Ot),t(Ot,mr),t(C,gr),t(C,qa),t(qa,dr),t(C,_r),p(e,Yo,n),p(e,ne,n),t(ne,yr),t(ne,Me),t(Me,vr),t(ne,$r),p(e,zo,n),p(e,Lt,n),t(Lt,It),p(e,Wo,n),g(Be,e,n),p(e,Jo,n),p(e,pe,n),t(pe,wr),t(pe,Tt),t(Tt,br),t(pe,Er),p(e,Ko,n),g(Ye,e,n),p(e,Qo,n),p(e,F,n),t(F,he),t(he,Pa),g(ze,Pa,null),t(F,kr),t(F,Aa),t(Aa,jr),p(e,Vo,n),p(e,Gt,n),t(Gt,qr),p(e,Xo,n),g(We,e,n),p(e,Zo,n),p(e,U,n),t(U,ce),t(ce,Ca),g(Je,Ca,null),t(U,Pr),t(U,xa),t(xa,Ar),p(e,es,n),p(e,x,n),t(x,Cr),t(x,Ft),t(Ft,xr),t(x,Rr),t(x,Ra),t(Ra,Sr),t(x,Dr),p(e,ts,n),g(Ke,e,n),p(e,as,n),p(e,M,n),t(M,fe),t(fe,Sa),g(Qe,Sa,null),t(M,Hr),t(M,Da),t(Da,Nr),p(e,os,n),p(e,ue,n),t(ue,Or),t(ue,Ut),t(Ut,Lr),t(ue,Ir),p(e,ss,n),p(e,k,n),t(k,Tr),t(k,Mt),t(Mt,Gr),t(k,Fr),t(k,Ha),t(Ha,Ur),t(k,Mr),t(k,Na),t(Na,Br),t(k,Yr),p(e,ls,n),g(Ve,e,n),p(e,rs,n),p(e,me,n),t(me,zr),t(me,Oa),t(Oa,Wr),t(me,Jr),p(e,is,n),g(Xe,e,n),p(e,ns,n),p(e,B,n),t(B,ge),t(ge,La),g(Ze,La,null),t(B,Kr),t(B,Ia),t(Ia,Qr),p(e,ps,n),p(e,Bt,n),t(Bt,Vr),p(e,hs,n),g(et,e,n),p(e,cs,n),p(e,Y,n),t(Y,de),t(de,Ta),g(tt,Ta,null),t(Y,Xr),t(Y,Ga),t(Ga,Zr),p(e,fs,n),p(e,b,n),t(b,ei),t(b,Yt),t(Yt,ti),t(b,ai),t(b,zt),t(zt,oi),t(b,si),t(b,at),t(at,li),t(b,ri),t(b,Wt),t(Wt,ii),t(b,ni),p(e,us,n),p(e,z,n),t(z,_e),t(_e,Fa),g(ot,Fa,null),t(z,pi),t(z,Ua),t(Ua,hi),p(e,ms,n),p(e,R,n),t(R,ci),t(R,Ma),t(Ma,fi),t(R,ui),t(R,Ba),t(Ba,mi),t(R,gi),p(e,gs,n),g(st,e,n),p(e,ds,n),p(e,W,n),t(W,Ya),t(Ya,di),t(W,_i),t(W,za),t(za,yi),t(W,vi),p(e,_s,n),g(lt,e,n),p(e,ys,n),p(e,S,n),t(S,$i),t(S,Wa),t(Wa,wi),t(S,bi),t(S,Jt),t(Jt,Ei),t(S,ki),p(e,vs,n),g(rt,e,n),p(e,$s,n),p(e,J,n),t(J,ye),t(ye,Ja),g(it,Ja,null),t(J,ji),t(J,Ka),t(Ka,qi),p(e,ws,n),p(e,ve,n),t(ve,Pi),t(ve,Kt),t(Kt,Ai),t(ve,Ci),p(e,bs,n),g(nt,e,n),p(e,Es,n),p(e,K,n),t(K,$e),t($e,Qa),g(pt,Qa,null),t(K,xi),t(K,Va),t(Va,Ri),p(e,ks,n),p(e,Qt,n),t(Qt,Si),p(e,js,n),p(e,D,n),t(D,ht),t(ht,Xa),t(Xa,Di),t(ht,Hi),g(ct,ht,null),t(D,Ni),t(D,Q),t(Q,ft),t(ft,Oi),t(ft,Za),t(Za,Li),t(ft,Ii),t(Q,Ti),g(ut,Q,null),t(Q,Gi),t(Q,Vt),t(Vt,eo),t(eo,Fi),t(Vt,Ui),t(D,Mi),t(D,mt),t(mt,gt),t(gt,Bi),t(gt,Xt),t(Xt,Yi),t(gt,zi),t(mt,Wi),g(dt,mt,null),p(e,qs,n),p(e,H,n),t(H,Ji),t(H,to),t(to,Ki),t(H,Qi),t(H,ao),t(ao,Vi),t(H,Xi),p(e,Ps,n),g(_t,e,n),p(e,As,n),p(e,V,n),t(V,we),t(we,oo),g(yt,oo,null),t(V,Zi),t(V,so),t(so,en),p(e,Cs,n),p(e,j,n),t(j,tn),t(j,lo),t(lo,an),t(j,on),t(j,ro),t(ro,sn),t(j,ln),t(j,io),t(io,rn),t(j,nn),p(e,xs,n),g(vt,e,n),p(e,Rs,n),p(e,X,n),t(X,be),t(be,no),g($t,no,null),t(X,pn),t(X,po),t(po,hn),p(e,Ss,n),p(e,Ee,n),t(Ee,cn),t(Ee,ho),t(ho,fn),t(Ee,un),p(e,Ds,n),g(wt,e,n),p(e,Hs,n),p(e,ke,n),t(ke,mn),t(ke,co),t(co,gn),t(ke,dn),p(e,Ns,n),g(bt,e,n),p(e,Os,n),p(e,Z,n),t(Z,je),t(je,fo),g(Et,fo,null),t(Z,_n),t(Z,uo),t(uo,yn),p(e,Ls,n),p(e,q,n),t(q,vn),t(q,mo),t(mo,$n),t(q,wn),t(q,go),t(go,bn),t(q,En),t(q,_o),t(_o,kn),t(q,jn),p(e,Is,n),p(e,P,n),t(P,kt),t(kt,qn),t(kt,yo),t(yo,Pn),t(kt,An),t(P,Cn),t(P,jt),t(jt,xn),t(jt,vo),t(vo,Rn),t(jt,Sn),t(P,Dn),t(P,$o),t($o,Hn),t(P,Nn),t(P,qt),t(qt,On),t(qt,wo),t(wo,Ln),t(qt,In),p(e,Ts,n),g(Pt,e,n),p(e,Gs,n),p(e,Zt,n),t(Zt,Tn),p(e,Fs,n),g(At,e,n),p(e,Us,n),p(e,qe,n),t(qe,Gn),t(qe,bo),t(bo,Fn),t(qe,Un),p(e,Ms,n),g(Ct,e,n),p(e,Bs,n),p(e,Pe,n),t(Pe,Mn),t(Pe,Eo),t(Eo,Bn),t(Pe,Yn),p(e,Ys,n),g(xt,e,n),p(e,zs,n),p(e,Ae,n),t(Ae,zn),t(Ae,ko),t(ko,Wn),t(Ae,Jn),p(e,Ws,n),g(Rt,e,n),p(e,Js,n),p(e,ee,n),t(ee,Ce),t(Ce,jo),g(St,jo,null),t(ee,Kn),t(ee,qo),t(qo,Qn),p(e,Ks,n),p(e,w,n),t(w,Vn),t(w,ea),t(ea,Xn),t(w,Zn),t(w,Po),t(Po,ep),t(w,tp),t(w,Ao),t(Ao,ap),t(w,op),t(w,Co),t(Co,sp),t(w,lp),t(w,xo),t(xo,rp),t(w,ip),p(e,Qs,n),g(Dt,e,n),p(e,Vs,n),p(e,te,n),t(te,xe),t(xe,Ro),g(Ht,Ro,null),t(te,np),t(te,So),t(So,pp),p(e,Xs,n),p(e,ta,n),t(ta,hp),p(e,Zs,n),g(Nt,e,n),p(e,el,n),p(e,aa,n),t(aa,cp),tl=!0},p:Pc,i(e){tl||(d(Oe.$$.fragment,e),d(Le.$$.fragment,e),d(Fe.$$.fragment,e),d(Ue.$$.fragment,e),d(Be.$$.fragment,e),d(Ye.$$.fragment,e),d(ze.$$.fragment,e),d(We.$$.fragment,e),d(Je.$$.fragment,e),d(Ke.$$.fragment,e),d(Qe.$$.fragment,e),d(Ve.$$.fragment,e),d(Xe.$$.fragment,e),d(Ze.$$.fragment,e),d(et.$$.fragment,e),d(tt.$$.fragment,e),d(ot.$$.fragment,e),d(st.$$.fragment,e),d(lt.$$.fragment,e),d(rt.$$.fragment,e),d(it.$$.fragment,e),d(nt.$$.fragment,e),d(pt.$$.fragment,e),d(ct.$$.fragment,e),d(ut.$$.fragment,e),d(dt.$$.fragment,e),d(_t.$$.fragment,e),d(yt.$$.fragment,e),d(vt.$$.fragment,e),d($t.$$.fragment,e),d(wt.$$.fragment,e),d(bt.$$.fragment,e),d(Et.$$.fragment,e),d(Pt.$$.fragment,e),d(At.$$.fragment,e),d(Ct.$$.fragment,e),d(xt.$$.fragment,e),d(Rt.$$.fragment,e),d(St.$$.fragment,e),d(Dt.$$.fragment,e),d(Ht.$$.fragment,e),d(Nt.$$.fragment,e),tl=!0)},o(e){_(Oe.$$.fragment,e),_(Le.$$.fragment,e),_(Fe.$$.fragment,e),_(Ue.$$.fragment,e),_(Be.$$.fragment,e),_(Ye.$$.fragment,e),_(ze.$$.fragment,e),_(We.$$.fragment,e),_(Je.$$.fragment,e),_(Ke.$$.fragment,e),_(Qe.$$.fragment,e),_(Ve.$$.fragment,e),_(Xe.$$.fragment,e),_(Ze.$$.fragment,e),_(et.$$.fragment,e),_(tt.$$.fragment,e),_(ot.$$.fragment,e),_(st.$$.fragment,e),_(lt.$$.fragment,e),_(rt.$$.fragment,e),_(it.$$.fragment,e),_(nt.$$.fragment,e),_(pt.$$.fragment,e),_(ct.$$.fragment,e),_(ut.$$.fragment,e),_(dt.$$.fragment,e),_(_t.$$.fragment,e),_(yt.$$.fragment,e),_(vt.$$.fragment,e),_($t.$$.fragment,e),_(wt.$$.fragment,e),_(bt.$$.fragment,e),_(Et.$$.fragment,e),_(Pt.$$.fragment,e),_(At.$$.fragment,e),_(Ct.$$.fragment,e),_(xt.$$.fragment,e),_(Rt.$$.fragment,e),_(St.$$.fragment,e),_(Dt.$$.fragment,e),_(Ht.$$.fragment,e),_(Nt.$$.fragment,e),tl=!1},d(e){a(O),e&&a(Ho),e&&a(No),e&&a(Oo),e&&a(L),y(Oe),e&&a(Lo),e&&a(I),y(Le),e&&a(Io),e&&a(Ie),e&&a(To),e&&a(se),e&&a(Go),e&&a(T),y(Fe),e&&a(Fo),e&&a(re),e&&a(Uo),e&&a(E),e&&a(Mo),e&&a(G),y(Ue),e&&a(Bo),e&&a(C),e&&a(Yo),e&&a(ne),e&&a(zo),e&&a(Lt),e&&a(Wo),y(Be,e),e&&a(Jo),e&&a(pe),e&&a(Ko),y(Ye,e),e&&a(Qo),e&&a(F),y(ze),e&&a(Vo),e&&a(Gt),e&&a(Xo),y(We,e),e&&a(Zo),e&&a(U),y(Je),e&&a(es),e&&a(x),e&&a(ts),y(Ke,e),e&&a(as),e&&a(M),y(Qe),e&&a(os),e&&a(ue),e&&a(ss),e&&a(k),e&&a(ls),y(Ve,e),e&&a(rs),e&&a(me),e&&a(is),y(Xe,e),e&&a(ns),e&&a(B),y(Ze),e&&a(ps),e&&a(Bt),e&&a(hs),y(et,e),e&&a(cs),e&&a(Y),y(tt),e&&a(fs),e&&a(b),e&&a(us),e&&a(z),y(ot),e&&a(ms),e&&a(R),e&&a(gs),y(st,e),e&&a(ds),e&&a(W),e&&a(_s),y(lt,e),e&&a(ys),e&&a(S),e&&a(vs),y(rt,e),e&&a($s),e&&a(J),y(it),e&&a(ws),e&&a(ve),e&&a(bs),y(nt,e),e&&a(Es),e&&a(K),y(pt),e&&a(ks),e&&a(Qt),e&&a(js),e&&a(D),y(ct),y(ut),y(dt),e&&a(qs),e&&a(H),e&&a(Ps),y(_t,e),e&&a(As),e&&a(V),y(yt),e&&a(Cs),e&&a(j),e&&a(xs),y(vt,e),e&&a(Rs),e&&a(X),y($t),e&&a(Ss),e&&a(Ee),e&&a(Ds),y(wt,e),e&&a(Hs),e&&a(ke),e&&a(Ns),y(bt,e),e&&a(Os),e&&a(Z),y(Et),e&&a(Ls),e&&a(q),e&&a(Is),e&&a(P),e&&a(Ts),y(Pt,e),e&&a(Gs),e&&a(Zt),e&&a(Fs),y(At,e),e&&a(Us),e&&a(qe),e&&a(Ms),y(Ct,e),e&&a(Bs),e&&a(Pe),e&&a(Ys),y(xt,e),e&&a(zs),e&&a(Ae),e&&a(Ws),y(Rt,e),e&&a(Js),e&&a(ee),y(St),e&&a(Ks),e&&a(w),e&&a(Qs),y(Dt,e),e&&a(Vs),e&&a(te),y(Ht),e&&a(Xs),e&&a(ta),e&&a(Zs),y(Nt,e),e&&a(el),e&&a(aa)}}}const xc={local:"how-to-integrate-upstream-utilities-in-your-library",sections:[{local:"huggingfacehub-repositorymanagement-methods",sections:[{local:"list-and-filter",title:"List and filter"},{local:"inspect-model-or-dataset-metadata",title:"Inspect model or dataset metadata"},{local:"create-a-repository",title:"Create a repository"},{local:"delete-a-repository",title:"Delete a repository"},{local:"change-repository-visibility",title:"Change repository visibility"}],title:"huggingface_hub repository-management methods"},{local:"repository",sections:[{local:"clone-a-repository",title:"Clone a repository"},{local:"using-a-local-clone",title:"Using a local clone"},{local:"commit-and-push-to-a-cloned-repository",title:"Commit and push to a cloned repository"},{local:"branch",title:"Branch"},{local:"pull",title:"Pull"},{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"}],title:"Repository "},{local:"upload-very-large-files",title:"Upload very large files"}],title:"How to integrate upstream utilities in your library"};function Rc(mp){return Ac(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Nc extends bc{constructor(O){super();Ec(this,O,Rc,Cc,kc,{})}}export{Nc as default,xc as metadata};
