import{S as eg,i as tg,s as og,e as r,k as c,w as u,t as s,M as rg,c as n,d as o,m as l,a,x as d,h as i,b as p,F as e,g as $,y as f,L as ng,q as m,o as _,B as b}from"../../chunks/vendor-7b1da053.js";import{D as y}from"../../chunks/Docstring-f1352b16.js";import{C as ag}from"../../chunks/CodeBlock-5f39b59e.js";import{I as kn}from"../../chunks/IconCopyLink-d24e9a6f.js";function sg(Dn){let F,It,E,O,Mt,He,xn,Wt,Rn,yr,k,Tn,Bt,Pn,In,Gt,On,Cn,zt,Ln,Fn,$r,re,Nn,Jt,Vn,Hn,wr,A,ne,Kt,je,jn,Se,Sn,Qt,An,qn,Er,g,Ae,Un,Xt,Mn,Wn,Yt,Bn,Gn,D,qe,zn,Zt,Jn,Kn,q,Qn,eo,Xn,Yn,to,Zn,ea,ta,x,oo,oa,ra,ro,na,aa,no,sa,ia,ao,ca,la,ga,ae,Ue,ha,so,pa,ua,R,Me,da,io,fa,ma,co,_a,ba,lo,va,ya,se,We,$a,go,wa,Ea,ie,Be,ka,U,Da,ho,xa,Ra,po,Ta,Pa,Ia,N,Ge,Oa,uo,Ca,La,fo,Fa,Na,T,ze,Va,M,Ha,mo,ja,Sa,_o,Aa,qa,Ua,bo,Ma,Wa,Je,Ba,ce,Ke,Ga,vo,za,Ja,V,Qe,Ka,yo,Qa,Xa,C,Ya,$o,Za,es,wo,ts,os,Eo,rs,ns,as,H,Xe,ss,ko,is,cs,W,ls,Do,gs,hs,xo,ps,us,ds,le,Ye,fs,Ro,ms,_s,ge,Ze,bs,To,vs,ys,he,et,$s,Ot,ws,Po,Es,ks,pe,tt,Ds,Io,xs,Rs,ue,ot,Ts,Oo,Ps,Is,de,rt,Os,Co,Cs,Ls,j,nt,Fs,Lo,Ns,Vs,B,Hs,Fo,js,Ss,No,As,qs,Us,fe,at,Ms,Vo,Ws,Bs,me,st,Gs,Ho,zs,Js,_e,it,Ks,jo,Qs,Xs,be,ct,Ys,So,Zs,ei,S,lt,ti,Ao,oi,ri,L,ni,qo,ai,si,Uo,ii,ci,Mo,li,gi,hi,ve,gt,pi,Wo,ui,di,ye,ht,fi,Bo,mi,_i,$e,pt,bi,Go,vi,yi,we,ut,$i,zo,wi,Ei,Ee,dt,ki,Jo,Di,kr,G,ke,Ko,ft,xi,Qo,Ri,Dr,z,mt,Ti,Xo,Pi,xr,J,_t,Ii,Yo,Oi,Rr,K,bt,Ci,Zo,Li,Tr,Q,vt,Fi,er,Ni,Pr,X,yt,Vi,tr,Hi,Ir,Y,$t,ji,or,Si,Or,Z,wt,Ai,rr,qi,Cr,ee,De,nr,Et,Ui,ar,Mi,Lr,xe,Wi,sr,Bi,Gi,Fr,P,ir,cr,zi,Ji,lr,gr,Ki,Qi,hr,pr,Xi,Yi,kt,Zi,ur,ec,tc,Nr,Ct,oc,Vr,w,Dt,rc,dr,nc,ac,fr,sc,ic,Re,xt,cc,mr,lc,gc,Te,Rt,hc,_r,pc,uc,Pe,Tt,dc,br,fc,Hr,te,Pt,mc,vr,_c,jr;return He=new kn({}),je=new kn({}),Ae=new y({props:{name:"class huggingface_hub.Repository",anchor:"huggingface_hub.Repository",parameters:[{name:"local_dir",val:": str"},{name:"clone_from",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"use_auth_token",val:": typing.Union[bool, str] = True"},{name:"git_user",val:": typing.Optional[str] = None"},{name:"git_email",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"private",val:": bool = False"},{name:"skip_lfs_files",val:": bool = False"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L411"}}),qe=new y({props:{name:"__init__",anchor:"huggingface_hub.Repository.__init__",parameters:[{name:"local_dir",val:": str"},{name:"clone_from",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"use_auth_token",val:": typing.Union[bool, str] = True"},{name:"git_user",val:": typing.Optional[str] = None"},{name:"git_email",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"private",val:": bool = False"},{name:"skip_lfs_files",val:": bool = False"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L421",parametersDescription:[{anchor:"huggingface_hub.Repository.__init__.local_dir",description:`<strong>local_dir</strong> (<code>str</code>) &#x2014;
path (e.g. <code>&apos;my_trained_model/&apos;</code>) to the local directory, where the <code>Repository</code> will be initalized.`,name:"local_dir"},{anchor:"huggingface_hub.Repository.__init__.clone_from",description:`<strong>clone_from</strong> (<code>str</code>, <em>optional</em>) &#x2014;
repository url (e.g. <code>&apos;https://huggingface.co/philschmid/playground-tests&apos;</code>).`,name:"clone_from"},{anchor:"huggingface_hub.Repository.__init__.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
To set when creating a repo: et to &#x201C;dataset&#x201D; or &#x201C;space&#x201D; if creating a dataset or space, default is model.`,name:"repo_type"},{anchor:"huggingface_hub.Repository.__init__.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
huggingface_token can be extract from <code>HfApi().login(username, password)</code> and is used to authenticate against the hub
(useful from Google Colab for instance).`,name:"use_auth_token"},{anchor:"huggingface_hub.Repository.__init__.git_user",description:`<strong>git_user</strong> (<code>str</code>, <em>optional</em>) &#x2014;
will override the <code>git config user.name</code> for committing and pushing files to the hub.`,name:"git_user"},{anchor:"huggingface_hub.Repository.__init__.git_email",description:`<strong>git_email</strong> (<code>str</code>, <em>optional</em>) &#x2014;
will override the <code>git config user.email</code> for committing and pushing files to the hub.`,name:"git_email"},{anchor:"huggingface_hub.Repository.__init__.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Revision to checkout after initializing the repository. If the revision doesn&#x2019;t exist, a
branch will be created with that revision name from the default branch&#x2019;s current HEAD.`,name:"revision"},{anchor:"huggingface_hub.Repository.__init__.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
whether the repository is private or not.`,name:"private"},{anchor:"huggingface_hub.Repository.__init__.skip_lfs_files",description:`<strong>skip_lfs_files</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
whether to skip git-LFS files or not.`,name:"skip_lfs_files"}]}}),Ue=new y({props:{name:"current_branch",anchor:"huggingface_hub.Repository.current_branch",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L516",returnDescription:`
<p>Current checked out branch.</p>
`,returnType:`
<p><code>str</code></p>
`}}),Me=new y({props:{name:"add_tag",anchor:"huggingface_hub.Repository.add_tag",parameters:[{name:"tag_name",val:": str"},{name:"message",val:": str = None"},{name:"remote",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1330",parametersDescription:[{anchor:"huggingface_hub.Repository.add_tag.tag_name",description:`<strong>tag_name</strong> (<code>str</code>) &#x2014;
The name of the tag to be added.`,name:"tag_name"},{anchor:"huggingface_hub.Repository.add_tag.message",description:`<strong>message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The message that accompanies the tag. The tag will turn into an annotated tag if a message
is passed.`,name:"message"},{anchor:"huggingface_hub.Repository.add_tag.remote",description:`<strong>remote</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The remote on which to add the tag.`,name:"remote"}]}}),We=new y({props:{name:"auto_track_large_files",anchor:"huggingface_hub.Repository.auto_track_large_files",parameters:[{name:"pattern",val:": typing.Optional[str] = '.'"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L947",parametersDescription:[{anchor:"huggingface_hub.Repository.auto_track_large_files.pattern",description:`<strong>pattern</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201D;.&#x201C;) &#x2014;
The pattern with which to track files that are above 10MBs.`,name:"pattern"}],returnDescription:`
<p>List of filenames that are now tracked due to their size.</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),Be=new y({props:{name:"check_git_versions",anchor:"huggingface_hub.Repository.check_git_versions",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L539"}}),Ge=new y({props:{name:"clone_from",anchor:"huggingface_hub.Repository.clone_from",parameters:[{name:"repo_url",val:": str"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L575",parametersDescription:[{anchor:"huggingface_hub.Repository.clone_from.repo_url",description:`<strong>repo_url</strong> (<code>str</code>) &#x2014;
The URL from which to clone the repository`,name:"repo_url"},{anchor:"huggingface_hub.Repository.clone_from.use_auth_token",description:`<strong>use_auth_token</strong> (<code>Union[str, bool]</code>, <em>optional</em>) &#x2014;
Whether to use the authentication token. It can be:<ul>
<li>a string which is the token itself</li>
<li><code>False</code>, which would not use the authentication token</li>
<li><code>True</code>, which would fetch the authentication token from the local folder and use it (you should
be logged in for this to work).</li>
<li><code>None</code>, which would retrieve the value of <code>self.huggingface_token</code>.</li>
</ul>`,name:"use_auth_token"}]}}),ze=new y({props:{name:"commit",anchor:"huggingface_hub.Repository.commit",parameters:[{name:"commit_message",val:": str"},{name:"branch",val:": typing.Optional[str] = None"},{name:"track_large_files",val:": typing.Optional[bool] = True"},{name:"blocking",val:": typing.Optional[bool] = True"},{name:"auto_lfs_prune",val:": typing.Optional[bool] = False"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1431",parametersDescription:[{anchor:"huggingface_hub.Repository.commit.commit_message",description:`<strong>commit_message</strong> (<code>str</code>) &#x2014;
Message to use for the commit.`,name:"commit_message"},{anchor:"huggingface_hub.Repository.commit.branch",description:`<strong>branch</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The branch on which the commit will appear. This branch will be checked-out before any operation.`,name:"branch"},{anchor:"huggingface_hub.Repository.commit.track_large_files",description:`<strong>track_large_files</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to automatically track large files or not. Will do so by default.`,name:"track_large_files"},{anchor:"huggingface_hub.Repository.commit.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the <code>git push</code> has finished.`,name:"blocking"},{anchor:"huggingface_hub.Repository.commit.auto_lfs_prune",description:`<strong>auto_lfs_prune</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to automatically prune files once they have been pushed to the remote.`,name:"auto_lfs_prune"}]}}),Je=new ag({props:{code:`with Repository("text-files", clone_from="<user>/text-files", use_auth_token=True).commit("My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))

import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit("My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),Ke=new y({props:{name:"delete_tag",anchor:"huggingface_hub.Repository.delete_tag",parameters:[{name:"tag_name",val:": str"},{name:"remote",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1279",parametersDescription:[{anchor:"huggingface_hub.Repository.delete_tag.tag_name",description:`<strong>tag_name</strong> (<code>str</code>) &#x2014;
The tag name to delete.`,name:"tag_name"},{anchor:"huggingface_hub.Repository.delete_tag.remote",description:`<strong>remote</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The remote on which to delete the tag.`,name:"remote"}],returnDescription:`
<p><code>True</code> if deleted, <code>False</code> if the tag didn\u2019t exist.
If remote is not passed, will just be updated locally</p>
`,returnType:`
<p><code>bool</code></p>
`}}),Qe=new y({props:{name:"git_add",anchor:"huggingface_hub.Repository.git_add",parameters:[{name:"pattern",val:": typing.Optional[str] = '.'"},{name:"auto_lfs_track",val:": typing.Optional[bool] = False"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1037",parametersDescription:[{anchor:"huggingface_hub.Repository.git_add.pattern",description:`<strong>pattern</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201D;.&#x201C;) &#x2014;
The pattern with which to add files to staging.`,name:"pattern"},{anchor:"huggingface_hub.Repository.git_add.auto_lfs_track",description:`<strong>auto_lfs_track</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to automatically track large files with git-lfs. Any file over 10MB in size will be
automatically tracked.`,name:"auto_lfs_track"}]}}),Xe=new y({props:{name:"git_checkout",anchor:"huggingface_hub.Repository.git_checkout",parameters:[{name:"revision",val:": str"},{name:"create_branch_ok",val:": typing.Optional[bool] = False"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1188",parametersDescription:[{anchor:"huggingface_hub.Repository.git_checkout.revision",description:`<strong>revision</strong> (<code>str</code>) &#x2014;
The revision to checkout.`,name:"revision"},{anchor:"huggingface_hub.Repository.git_checkout.create_branch_ok",description:`<strong>create_branch_ok</strong> (<code>str</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether creating a branch named with the <code>revision</code> passed at the current checked-out reference
if <code>revision</code> isn&#x2019;t an existing revision is allowed.`,name:"create_branch_ok"}]}}),Ye=new y({props:{name:"git_commit",anchor:"huggingface_hub.Repository.git_commit",parameters:[{name:"commit_message",val:": str = 'commit files to HF hub'"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1073",parametersDescription:[{anchor:"huggingface_hub.Repository.git_commit.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;commit files to HF hub&#x201D;) &#x2014;
The message attributed to the commit.`,name:"commit_message"}]}}),Ze=new y({props:{name:"git_config_username_and_email",anchor:"huggingface_hub.Repository.git_config_username_and_email",parameters:[{name:"git_user",val:": typing.Optional[str] = None"},{name:"git_email",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L718",parametersDescription:[{anchor:"huggingface_hub.Repository.git_config_username_and_email.git_user",description:`<strong>git_user</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The username to register through <code>git</code>.`,name:"git_user"},{anchor:"huggingface_hub.Repository.git_config_username_and_email.git_email",description:`<strong>git_email</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The email to register through <code>git</code>.`,name:"git_email"}]}}),et=new y({props:{name:"git_credential_helper_store",anchor:"huggingface_hub.Repository.git_credential_helper_store",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L752"}}),tt=new y({props:{name:"git_head_commit_url",anchor:"huggingface_hub.Repository.git_head_commit_url",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L810",returnDescription:`
<p>The URL to the current checked-out commit.</p>
`,returnType:`
<p><code>str</code></p>
`}}),ot=new y({props:{name:"git_head_hash",anchor:"huggingface_hub.Repository.git_head_hash",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L768",returnDescription:`
<p>The current checked out commit SHA.</p>
`,returnType:`
<p><code>str</code></p>
`}}),rt=new y({props:{name:"git_pull",anchor:"huggingface_hub.Repository.git_pull",parameters:[{name:"rebase",val:": typing.Optional[bool] = False"},{name:"lfs",val:": typing.Optional[bool] = False"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1008",parametersDescription:[{anchor:"huggingface_hub.Repository.git_pull.rebase",description:`<strong>rebase</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to rebase the current branch on top of the upstream branch after fetching.`,name:"rebase"},{anchor:"huggingface_hub.Repository.git_pull.lfs",description:`<strong>lfs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to fetch the LFS files too. This option only changes the behavior when a repository
was cloned without fetching the LFS files; calling <code>repo.git_pull(lfs=True)</code> will then fetch
the LFS file from the remote repository.`,name:"lfs"}]}}),nt=new y({props:{name:"git_push",anchor:"huggingface_hub.Repository.git_push",parameters:[{name:"upstream",val:": typing.Optional[str] = None"},{name:"blocking",val:": typing.Optional[bool] = True"},{name:"auto_lfs_prune",val:": typing.Optional[bool] = False"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1097",parametersDescription:[{anchor:"huggingface_hub.Repository.git_push.upstream",description:`<strong>upstream</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Upstream to which this should push. If not specified, will push
to the lastly defined upstream or to the default one (<code>origin main</code>).`,name:"upstream"},{anchor:"huggingface_hub.Repository.git_push.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the push has finished.
Setting this to <code>False</code> will return an <code>CommandInProgress</code> object
which has an <code>is_done</code> property. This property will be set to
<code>True</code> when the push is finished.`,name:"blocking"},{anchor:"huggingface_hub.Repository.git_push.auto_lfs_prune",description:`<strong>auto_lfs_prune</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to automatically prune files once they have been pushed to the remote.`,name:"auto_lfs_prune"}]}}),at=new y({props:{name:"git_remote_url",anchor:"huggingface_hub.Repository.git_remote_url",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L788",returnDescription:`
<p>The URL of the <code>origin</code> remote.</p>
`,returnType:`
<p><code>str</code></p>
`}}),st=new y({props:{name:"is_repo_clean",anchor:"huggingface_hub.Repository.is_repo_clean",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1377",returnDescription:`
<p><code>True</code> if the git status is clean, <code>False</code> otherwise.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),it=new y({props:{name:"lfs_enable_largefiles",anchor:"huggingface_hub.Repository.lfs_enable_largefiles",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L923"}}),ct=new y({props:{name:"lfs_prune",anchor:"huggingface_hub.Repository.lfs_prune",parameters:[{name:"recent",val:" = False"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L982",parametersDescription:[{anchor:"huggingface_hub.Repository.lfs_prune.recent",description:`<strong>recent</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to prune files even if they were referenced by recent commits. See the following <a href="https://github.com/git-lfs/git-lfs/blob/f3d43f0428a84fc4f1e5405b76b5a73ec2437e65/docs/man/git-lfs-prune.1.ronn#recent-files" rel="nofollow">link</a>
for more information.`,name:"recent"}]}}),lt=new y({props:{name:"lfs_track",anchor:"huggingface_hub.Repository.lfs_track",parameters:[{name:"patterns",val:": typing.Union[str, typing.List[str]]"},{name:"filename",val:": typing.Optional[bool] = False"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L868",parametersDescription:[{anchor:"huggingface_hub.Repository.lfs_track.patterns",description:`<strong>patterns</strong> (<code>Union[str, List[str]]</code>) &#x2014;
The pattern, or list of patterns, to track with git-lfs.`,name:"patterns"},{anchor:"huggingface_hub.Repository.lfs_track.filename",description:`<strong>filename</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use the patterns as literal filenames.`,name:"filename"}]}}),gt=new y({props:{name:"lfs_untrack",anchor:"huggingface_hub.Repository.lfs_untrack",parameters:[{name:"patterns",val:": typing.Union[str, typing.List[str]]"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L900",parametersDescription:[{anchor:"huggingface_hub.Repository.lfs_untrack.patterns",description:`<strong>patterns</strong> (<code>Union[str, List[str]]</code>) &#x2014;
The pattern, or list of patterns, to untrack with git-lfs.`,name:"patterns"}]}}),ht=new y({props:{name:"list_deleted_files",anchor:"huggingface_hub.Repository.list_deleted_files",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L824",returnDescription:`
<p>A list of files that have been deleted in the working directory or index.</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),pt=new y({props:{name:"push_to_hub",anchor:"huggingface_hub.Repository.push_to_hub",parameters:[{name:"commit_message",val:": typing.Optional[str] = 'commit files to HF hub'"},{name:"blocking",val:": typing.Optional[bool] = True"},{name:"clean_ok",val:": typing.Optional[bool] = True"},{name:"auto_lfs_prune",val:": typing.Optional[bool] = False"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1398",parametersDescription:[{anchor:"huggingface_hub.Repository.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>) &#x2014;
Message to use for the commit.`,name:"commit_message"},{anchor:"huggingface_hub.Repository.push_to_hub.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the <code>git push</code> has finished.`,name:"blocking"},{anchor:"huggingface_hub.Repository.push_to_hub.clean_ok",description:`<strong>clean_ok</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If True, this function will return None if the repo is untouched.
Default behavior is to fail because the git command fails.`,name:"clean_ok"},{anchor:"huggingface_hub.Repository.push_to_hub.auto_lfs_prune",description:`<strong>auto_lfs_prune</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to automatically prune files once they have been pushed to the remote.`,name:"auto_lfs_prune"}]}}),ut=new y({props:{name:"tag_exists",anchor:"huggingface_hub.Repository.tag_exists",parameters:[{name:"tag_name",val:": str"},{name:"remote",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1235",parametersDescription:[{anchor:"huggingface_hub.Repository.tag_exists.tag_name",description:`<strong>tag_name</strong> (<code>str</code>) &#x2014;
The name of the tag to check.`,name:"tag_name"},{anchor:"huggingface_hub.Repository.tag_exists.remote",description:`<strong>remote</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether to check if the tag exists on a remote. This parameter should be the identifier
of the remote.`,name:"remote"}],returnDescription:`
<p>\`Whether the tag exists.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),dt=new y({props:{name:"wait_for_commands",anchor:"huggingface_hub.Repository.wait_for_commands",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1548"}}),ft=new kn({}),mt=new y({props:{name:"huggingface_hub.repository.is_git_repo",anchor:"huggingface_hub.repository.is_git_repo",parameters:[{name:"folder",val:": typing.Union[str, pathlib.Path]"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L101",parametersDescription:[{anchor:"huggingface_hub.repository.is_git_repo.folder",description:`<strong>folder</strong> (<code>str</code>) &#x2014;
The folder in which to run the command.`,name:"folder"}],returnDescription:`
<p><code>True</code> if the repository is part of a repository, <code>False</code> otherwise.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),_t=new y({props:{name:"huggingface_hub.repository.is_local_clone",anchor:"huggingface_hub.repository.is_local_clone",parameters:[{name:"folder",val:": typing.Union[str, pathlib.Path]"},{name:"remote_url",val:": str"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L119",parametersDescription:[{anchor:"huggingface_hub.repository.is_local_clone.folder",description:`<strong>folder</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The folder in which to run the command.`,name:"folder"},{anchor:"huggingface_hub.repository.is_local_clone.remote_url",description:`<strong>remote_url</strong> (<code>str</code>) &#x2014;
The url of a git repository.`,name:"remote_url"}],returnDescription:`
<p><code>True</code> if the repository is a local clone of the remote repository specified, <code>False</code> otherwise.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),bt=new y({props:{name:"huggingface_hub.repository.is_tracked_with_lfs",anchor:"huggingface_hub.repository.is_tracked_with_lfs",parameters:[{name:"filename",val:": typing.Union[str, pathlib.Path]"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L150",parametersDescription:[{anchor:"huggingface_hub.repository.is_tracked_with_lfs.filename",description:`<strong>filename</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The filename to check.`,name:"filename"}],returnDescription:`
<p><code>True</code> if the file passed is tracked with git-lfs, <code>False</code> otherwise.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),vt=new y({props:{name:"huggingface_hub.repository.is_git_ignored",anchor:"huggingface_hub.repository.is_git_ignored",parameters:[{name:"filename",val:": typing.Union[str, pathlib.Path]"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L193",parametersDescription:[{anchor:"huggingface_hub.repository.is_git_ignored.filename",description:`<strong>filename</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The filename to check.`,name:"filename"}],returnDescription:`
<p><code>True</code> if the file passed is ignored by <code>git</code>, <code>False</code> otherwise.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),yt=new y({props:{name:"huggingface_hub.repository.files_to_be_staged",anchor:"huggingface_hub.repository.files_to_be_staged",parameters:[{name:"pattern",val:": str"},{name:"folder",val:": typing.Union[str, pathlib.Path]"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L223",parametersDescription:[{anchor:"huggingface_hub.repository.files_to_be_staged.pattern",description:`<strong>pattern</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The pattern of filenames to check. Put <code>.</code> to get all files.`,name:"pattern"},{anchor:"huggingface_hub.repository.files_to_be_staged.folder",description:`<strong>folder</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The folder in which to run the command.`,name:"folder"}],returnDescription:`
<p>List of files that are to be staged.</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),$t=new y({props:{name:"huggingface_hub.repository.is_tracked_upstream",anchor:"huggingface_hub.repository.is_tracked_upstream",parameters:[{name:"folder",val:": typing.Union[str, pathlib.Path]"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L255",parametersDescription:[{anchor:"huggingface_hub.repository.is_tracked_upstream.folder",description:`<strong>folder</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The folder in which to run the command.`,name:"folder"}],returnDescription:`
<p><code>True</code> if the current checked-out branch is tracked upstream, <code>False</code> otherwise.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),wt=new y({props:{name:"huggingface_hub.repository.commits_to_push",anchor:"huggingface_hub.repository.commits_to_push",parameters:[{name:"folder",val:": typing.Union[str, pathlib.Path]"},{name:"upstream",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L284",parametersDescription:[{anchor:"huggingface_hub.repository.commits_to_push.folder",description:`<strong>folder</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The folder in which to run the command.`,name:"folder"},{anchor:"huggingface_hub.repository.commits_to_push.upstream",description:"<strong>upstream</strong> (<code>str</code>, <em>optional</em>) &#x2014;",name:"upstream"},{anchor:"huggingface_hub.repository.commits_to_push.The",description:"<strong>The</strong> name of the upstream repository with which the comparison should be made. &#x2014;",name:"The"}],returnDescription:`
<p>Number of commits that would be pushed upstream were a <code>git push</code> to proceed.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Et=new kn({}),Dt=new y({props:{name:"class huggingface_hub.Repository",anchor:"huggingface_hub.Repository",parameters:[{name:"local_dir",val:": str"},{name:"clone_from",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"use_auth_token",val:": typing.Union[bool, str] = True"},{name:"git_user",val:": typing.Optional[str] = None"},{name:"git_email",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"private",val:": bool = False"},{name:"skip_lfs_files",val:": bool = False"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L411"}}),xt=new y({props:{name:"commands_failed",anchor:"huggingface_hub.Repository.commands_failed",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1534"}}),Rt=new y({props:{name:"commands_in_progress",anchor:"huggingface_hub.Repository.commands_in_progress",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1541"}}),Tt=new y({props:{name:"wait_for_commands",anchor:"huggingface_hub.Repository.wait_for_commands",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L1548"}}),Pt=new y({props:{name:"class huggingface_hub.repository.CommandInProgress",anchor:"huggingface_hub.repository.CommandInProgress",parameters:[{name:"title",val:": str"},{name:"is_done_method",val:": typing.Callable"},{name:"status_method",val:": typing.Callable"},{name:"process",val:": Popen"},{name:"post_method",val:": typing.Optional[typing.Callable] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_7/src/huggingface_hub/repository.py#L25"}}),{c(){F=r("meta"),It=c(),E=r("h1"),O=r("a"),Mt=r("span"),u(He.$$.fragment),xn=c(),Wt=r("span"),Rn=s("Managing local and online repositories"),yr=c(),k=r("p"),Tn=s("The "),Bt=r("code"),Pn=s("Repository"),In=s(" class is a helper class that wraps "),Gt=r("code"),On=s("git"),Cn=s(" and "),zt=r("code"),Ln=s("git-lfs"),Fn=s(` commands. It provides tooling adapted
for managing repositories which can be very large.`),$r=c(),re=r("p"),Nn=s("It is the recommended tool as soon as any "),Jt=r("code"),Vn=s("git"),Hn=s(` operation is involved, or when collaboration will be a point
of focus with the repository itself.`),wr=c(),A=r("h2"),ne=r("a"),Kt=r("span"),u(je.$$.fragment),jn=c(),Se=r("span"),Sn=s("The "),Qt=r("code"),An=s("Repository"),qn=s(" class"),Er=c(),g=r("div"),u(Ae.$$.fragment),Un=c(),Xt=r("p"),Mn=s("Helper class to wrap the git and git-lfs commands."),Wn=c(),Yt=r("p"),Bn=s(`The aim is to facilitate interacting with huggingface.co hosted model or dataset repos,
though not a lot here (if any) is actually specific to huggingface.co.`),Gn=c(),D=r("div"),u(qe.$$.fragment),zn=c(),Zt=r("p"),Jn=s("Instantiate a local clone of a git repo."),Kn=c(),q=r("p"),Qn=s("If specifying a "),eo=r("code"),Xn=s("clone_from"),Yn=s(`, it will clone an existing remote repository, for instance one
that was previously created using `),to=r("code"),Zn=s("HfApi().create_repo(repo_id=repo_name)"),ea=s("."),ta=c(),x=r("p"),oo=r("code"),oa=s("Repository"),ra=s(" uses the local git credentials by default, but if required, the "),ro=r("code"),na=s("huggingface_token"),aa=s(`
as well as the git `),no=r("code"),sa=s("user"),ia=s(" and the "),ao=r("code"),ca=s("email"),la=s(" can be explicitly specified."),ga=c(),ae=r("div"),u(Ue.$$.fragment),ha=c(),so=r("p"),pa=s("Returns the current checked out branch."),ua=c(),R=r("div"),u(Me.$$.fragment),da=c(),io=r("p"),fa=s("Add a tag at the current head and push it"),ma=c(),co=r("p"),_a=s("If remote is None, will just be updated locally"),ba=c(),lo=r("p"),va=s(`If no message is provided, the tag will be lightweight.
if a message is provided, the tag will be annotated.`),ya=c(),se=r("div"),u(We.$$.fragment),$a=c(),go=r("p"),wa=s("Automatically track large files (files that weigh more than 10MBs) with git-lfs."),Ea=c(),ie=r("div"),u(Be.$$.fragment),ka=c(),U=r("p"),Da=s("Checks that "),ho=r("code"),xa=s("git"),Ra=s(" and "),po=r("code"),Ta=s("git-lfs"),Pa=s(" can be run."),Ia=c(),N=r("div"),u(Ge.$$.fragment),Oa=c(),uo=r("p"),Ca=s("Clone from a remote. If the folder already exists, will try to clone the repository within it."),La=c(),fo=r("p"),Fa=s("If this folder is a git repository with linked history, will try to update the repository."),Na=c(),T=r("div"),u(ze.$$.fragment),Va=c(),M=r("p"),Ha=s(`Context manager utility to handle committing to a repository. This automatically tracks large files (>10Mb)
with git-lfs. Set the `),mo=r("code"),ja=s("track_large_files"),Sa=s(" argument to "),_o=r("code"),Aa=s("False"),qa=s(" if you wish to ignore that behavior."),Ua=c(),bo=r("p"),Ma=s("Examples:"),Wa=c(),u(Je.$$.fragment),Ba=c(),ce=r("div"),u(Ke.$$.fragment),Ga=c(),vo=r("p"),za=s("Delete a tag, both local and remote, if it exists"),Ja=c(),V=r("div"),u(Qe.$$.fragment),Ka=c(),yo=r("p"),Qa=s("git add"),Xa=c(),C=r("p"),Ya=s("Setting the "),$o=r("code"),Za=s("auto_lfs_track"),es=s(" parameter to "),wo=r("code"),ts=s("True"),os=s(` will automatically track files that are larger
than 10MB with `),Eo=r("code"),rs=s("git-lfs"),ns=s("."),as=c(),H=r("div"),u(Xe.$$.fragment),ss=c(),ko=r("p"),is=s("git checkout a given revision"),cs=c(),W=r("p"),ls=s("Specifying "),Do=r("code"),gs=s("create_branch_ok"),hs=s(" to "),xo=r("code"),ps=s("True"),us=s(` will create the branch to the given revision if that revision
doesn\u2019t exist.`),ds=c(),le=r("div"),u(Ye.$$.fragment),fs=c(),Ro=r("p"),ms=s("git commit"),_s=c(),ge=r("div"),u(Ze.$$.fragment),bs=c(),To=r("p"),vs=s("Sets git username and email (only in the current repo)."),ys=c(),he=r("div"),u(et.$$.fragment),$s=c(),Ot=r("p"),ws=s("Sets the git credential helper to "),Po=r("code"),Es=s("store"),ks=c(),pe=r("div"),u(tt.$$.fragment),Ds=c(),Io=r("p"),xs=s(`Get URL to last commit on HEAD. We assume it\u2019s been pushed, and the url scheme is
the same one as for GitHub or HuggingFace.`),Rs=c(),ue=r("div"),u(ot.$$.fragment),Ts=c(),Oo=r("p"),Ps=s("Get commit sha on top of HEAD."),Is=c(),de=r("div"),u(rt.$$.fragment),Os=c(),Co=r("p"),Cs=s("git pull"),Ls=c(),j=r("div"),u(nt.$$.fragment),Fs=c(),Lo=r("p"),Ns=s("git push"),Vs=c(),B=r("p"),Hs=s("If used without setting "),Fo=r("code"),js=s("blocking"),Ss=s(`, will return url to commit on remote repo.
If used with `),No=r("code"),As=s("blocking=True"),qs=s(`, will return a tuple containing the url to commit
and the command object to follow for information about the process.`),Us=c(),fe=r("div"),u(at.$$.fragment),Ms=c(),Vo=r("p"),Ws=s("Get URL to origin remote."),Bs=c(),me=r("div"),u(st.$$.fragment),Gs=c(),Ho=r("p"),zs=s("Return whether or not the git status is clean or not"),Js=c(),_e=r("div"),u(it.$$.fragment),Ks=c(),jo=r("p"),Qs=s("HF-specific. This enables upload support of files >5GB."),Xs=c(),be=r("div"),u(ct.$$.fragment),Ys=c(),So=r("p"),Zs=s("git lfs prune"),ei=c(),S=r("div"),u(lt.$$.fragment),ti=c(),Ao=r("p"),oi=s("Tell git-lfs to track files according to a pattern."),ri=c(),L=r("p"),ni=s("Setting the "),qo=r("code"),ai=s("filename"),si=s(" argument to "),Uo=r("code"),ii=s("True"),ci=s(` will treat the arguments as literal filenames,
not as patterns. Any special glob characters in the filename will be escaped when
writing to the `),Mo=r("code"),li=s(".gitattributes"),gi=s(" file."),hi=c(),ve=r("div"),u(gt.$$.fragment),pi=c(),Wo=r("p"),ui=s("Tell git-lfs to untrack those files."),di=c(),ye=r("div"),u(ht.$$.fragment),fi=c(),Bo=r("p"),mi=s("Returns a list of the files that are deleted in the working directory or index."),_i=c(),$e=r("div"),u(pt.$$.fragment),bi=c(),Go=r("p"),vi=s(`Helper to add, commit, and push files to remote repository on the HuggingFace Hub.
Will automatically track large files (>10MB).`),yi=c(),we=r("div"),u(ut.$$.fragment),$i=c(),zo=r("p"),wi=s("Check if a tag exists or not."),Ei=c(),Ee=r("div"),u(dt.$$.fragment),ki=c(),Jo=r("p"),Di=s("Blocking method: blocks all subsequent execution until all commands have been processed."),kr=c(),G=r("h2"),ke=r("a"),Ko=r("span"),u(ft.$$.fragment),xi=c(),Qo=r("span"),Ri=s("Helper methods"),Dr=c(),z=r("div"),u(mt.$$.fragment),Ti=c(),Xo=r("p"),Pi=s("Check if the folder is the root or part of a git repository"),xr=c(),J=r("div"),u(_t.$$.fragment),Ii=c(),Yo=r("p"),Oi=s("Check if the folder is a local clone of the remote_url"),Rr=c(),K=r("div"),u(bt.$$.fragment),Ci=c(),Zo=r("p"),Li=s("Check if the file passed is tracked with git-lfs."),Tr=c(),Q=r("div"),u(vt.$$.fragment),Fi=c(),er=r("p"),Ni=s("Check if file is git-ignored. Supports nested .gitignore files."),Pr=c(),X=r("div"),u(yt.$$.fragment),Vi=c(),tr=r("p"),Hi=s("Returns a list of filenames that are to be staged."),Ir=c(),Y=r("div"),u($t.$$.fragment),ji=c(),or=r("p"),Si=s("Check if the current checked-out branch is tracked upstream."),Or=c(),Z=r("div"),u(wt.$$.fragment),Ai=c(),rr=r("p"),qi=s("Check the number of commits that would be pushed upstream"),Cr=c(),ee=r("h2"),De=r("a"),nr=r("span"),u(Et.$$.fragment),Ui=c(),ar=r("span"),Mi=s("Following asynchronous commands"),Lr=c(),xe=r("p"),Wi=s("The "),sr=r("code"),Bi=s("Repository"),Gi=s(" utility offers several methods which can be launched asynchronously:"),Fr=c(),P=r("ul"),ir=r("li"),cr=r("code"),zi=s("git_push"),Ji=c(),lr=r("li"),gr=r("code"),Ki=s("git_pull"),Qi=c(),hr=r("li"),pr=r("code"),Xi=s("push_to_hub"),Yi=c(),kt=r("li"),Zi=s("The "),ur=r("code"),ec=s("commit"),tc=s(" context manager"),Nr=c(),Ct=r("p"),oc=s("See below for utilities to manage such asynchronous methods."),Vr=c(),w=r("div"),u(Dt.$$.fragment),rc=c(),dr=r("p"),nc=s("Helper class to wrap the git and git-lfs commands."),ac=c(),fr=r("p"),sc=s(`The aim is to facilitate interacting with huggingface.co hosted model or dataset repos,
though not a lot here (if any) is actually specific to huggingface.co.`),ic=c(),Re=r("div"),u(xt.$$.fragment),cc=c(),mr=r("p"),lc=s("Returns the asynchronous commands that failed."),gc=c(),Te=r("div"),u(Rt.$$.fragment),hc=c(),_r=r("p"),pc=s("Returns the asynchronous commands that are currently in progress."),uc=c(),Pe=r("div"),u(Tt.$$.fragment),dc=c(),br=r("p"),fc=s("Blocking method: blocks all subsequent execution until all commands have been processed."),Hr=c(),te=r("div"),u(Pt.$$.fragment),mc=c(),vr=r("p"),_c=s("Utility to follow commands launched asynchronously."),this.h()},l(t){const v=rg('[data-svelte="svelte-1phssyn"]',document.head);F=n(v,"META",{name:!0,content:!0}),v.forEach(o),It=l(t),E=n(t,"H1",{class:!0});var Sr=a(E);O=n(Sr,"A",{id:!0,class:!0,href:!0});var vc=a(O);Mt=n(vc,"SPAN",{});var yc=a(Mt);d(He.$$.fragment,yc),yc.forEach(o),vc.forEach(o),xn=l(Sr),Wt=n(Sr,"SPAN",{});var $c=a(Wt);Rn=i($c,"Managing local and online repositories"),$c.forEach(o),Sr.forEach(o),yr=l(t),k=n(t,"P",{});var Ie=a(k);Tn=i(Ie,"The "),Bt=n(Ie,"CODE",{});var wc=a(Bt);Pn=i(wc,"Repository"),wc.forEach(o),In=i(Ie," class is a helper class that wraps "),Gt=n(Ie,"CODE",{});var Ec=a(Gt);On=i(Ec,"git"),Ec.forEach(o),Cn=i(Ie," and "),zt=n(Ie,"CODE",{});var kc=a(zt);Ln=i(kc,"git-lfs"),kc.forEach(o),Fn=i(Ie,` commands. It provides tooling adapted
for managing repositories which can be very large.`),Ie.forEach(o),$r=l(t),re=n(t,"P",{});var Ar=a(re);Nn=i(Ar,"It is the recommended tool as soon as any "),Jt=n(Ar,"CODE",{});var Dc=a(Jt);Vn=i(Dc,"git"),Dc.forEach(o),Hn=i(Ar,` operation is involved, or when collaboration will be a point
of focus with the repository itself.`),Ar.forEach(o),wr=l(t),A=n(t,"H2",{class:!0});var qr=a(A);ne=n(qr,"A",{id:!0,class:!0,href:!0});var xc=a(ne);Kt=n(xc,"SPAN",{});var Rc=a(Kt);d(je.$$.fragment,Rc),Rc.forEach(o),xc.forEach(o),jn=l(qr),Se=n(qr,"SPAN",{});var Ur=a(Se);Sn=i(Ur,"The "),Qt=n(Ur,"CODE",{});var Tc=a(Qt);An=i(Tc,"Repository"),Tc.forEach(o),qn=i(Ur," class"),Ur.forEach(o),qr.forEach(o),Er=l(t),g=n(t,"DIV",{class:!0});var h=a(g);d(Ae.$$.fragment,h),Un=l(h),Xt=n(h,"P",{});var Pc=a(Xt);Mn=i(Pc,"Helper class to wrap the git and git-lfs commands."),Pc.forEach(o),Wn=l(h),Yt=n(h,"P",{});var Ic=a(Yt);Bn=i(Ic,`The aim is to facilitate interacting with huggingface.co hosted model or dataset repos,
though not a lot here (if any) is actually specific to huggingface.co.`),Ic.forEach(o),Gn=l(h),D=n(h,"DIV",{class:!0});var Oe=a(D);d(qe.$$.fragment,Oe),zn=l(Oe),Zt=n(Oe,"P",{});var Oc=a(Zt);Jn=i(Oc,"Instantiate a local clone of a git repo."),Oc.forEach(o),Kn=l(Oe),q=n(Oe,"P",{});var Lt=a(q);Qn=i(Lt,"If specifying a "),eo=n(Lt,"CODE",{});var Cc=a(eo);Xn=i(Cc,"clone_from"),Cc.forEach(o),Yn=i(Lt,`, it will clone an existing remote repository, for instance one
that was previously created using `),to=n(Lt,"CODE",{});var Lc=a(to);Zn=i(Lc,"HfApi().create_repo(repo_id=repo_name)"),Lc.forEach(o),ea=i(Lt,"."),Lt.forEach(o),ta=l(Oe),x=n(Oe,"P",{});var oe=a(x);oo=n(oe,"CODE",{});var Fc=a(oo);oa=i(Fc,"Repository"),Fc.forEach(o),ra=i(oe," uses the local git credentials by default, but if required, the "),ro=n(oe,"CODE",{});var Nc=a(ro);na=i(Nc,"huggingface_token"),Nc.forEach(o),aa=i(oe,`
as well as the git `),no=n(oe,"CODE",{});var Vc=a(no);sa=i(Vc,"user"),Vc.forEach(o),ia=i(oe," and the "),ao=n(oe,"CODE",{});var Hc=a(ao);ca=i(Hc,"email"),Hc.forEach(o),la=i(oe," can be explicitly specified."),oe.forEach(o),Oe.forEach(o),ga=l(h),ae=n(h,"DIV",{class:!0});var Mr=a(ae);d(Ue.$$.fragment,Mr),ha=l(Mr),so=n(Mr,"P",{});var jc=a(so);pa=i(jc,"Returns the current checked out branch."),jc.forEach(o),Mr.forEach(o),ua=l(h),R=n(h,"DIV",{class:!0});var Ce=a(R);d(Me.$$.fragment,Ce),da=l(Ce),io=n(Ce,"P",{});var Sc=a(io);fa=i(Sc,"Add a tag at the current head and push it"),Sc.forEach(o),ma=l(Ce),co=n(Ce,"P",{});var Ac=a(co);_a=i(Ac,"If remote is None, will just be updated locally"),Ac.forEach(o),ba=l(Ce),lo=n(Ce,"P",{});var qc=a(lo);va=i(qc,`If no message is provided, the tag will be lightweight.
if a message is provided, the tag will be annotated.`),qc.forEach(o),Ce.forEach(o),ya=l(h),se=n(h,"DIV",{class:!0});var Wr=a(se);d(We.$$.fragment,Wr),$a=l(Wr),go=n(Wr,"P",{});var Uc=a(go);wa=i(Uc,"Automatically track large files (files that weigh more than 10MBs) with git-lfs."),Uc.forEach(o),Wr.forEach(o),Ea=l(h),ie=n(h,"DIV",{class:!0});var Br=a(ie);d(Be.$$.fragment,Br),ka=l(Br),U=n(Br,"P",{});var Ft=a(U);Da=i(Ft,"Checks that "),ho=n(Ft,"CODE",{});var Mc=a(ho);xa=i(Mc,"git"),Mc.forEach(o),Ra=i(Ft," and "),po=n(Ft,"CODE",{});var Wc=a(po);Ta=i(Wc,"git-lfs"),Wc.forEach(o),Pa=i(Ft," can be run."),Ft.forEach(o),Br.forEach(o),Ia=l(h),N=n(h,"DIV",{class:!0});var Nt=a(N);d(Ge.$$.fragment,Nt),Oa=l(Nt),uo=n(Nt,"P",{});var Bc=a(uo);Ca=i(Bc,"Clone from a remote. If the folder already exists, will try to clone the repository within it."),Bc.forEach(o),La=l(Nt),fo=n(Nt,"P",{});var Gc=a(fo);Fa=i(Gc,"If this folder is a git repository with linked history, will try to update the repository."),Gc.forEach(o),Nt.forEach(o),Na=l(h),T=n(h,"DIV",{class:!0});var Le=a(T);d(ze.$$.fragment,Le),Va=l(Le),M=n(Le,"P",{});var Vt=a(M);Ha=i(Vt,`Context manager utility to handle committing to a repository. This automatically tracks large files (>10Mb)
with git-lfs. Set the `),mo=n(Vt,"CODE",{});var zc=a(mo);ja=i(zc,"track_large_files"),zc.forEach(o),Sa=i(Vt," argument to "),_o=n(Vt,"CODE",{});var Jc=a(_o);Aa=i(Jc,"False"),Jc.forEach(o),qa=i(Vt," if you wish to ignore that behavior."),Vt.forEach(o),Ua=l(Le),bo=n(Le,"P",{});var Kc=a(bo);Ma=i(Kc,"Examples:"),Kc.forEach(o),Wa=l(Le),d(Je.$$.fragment,Le),Le.forEach(o),Ba=l(h),ce=n(h,"DIV",{class:!0});var Gr=a(ce);d(Ke.$$.fragment,Gr),Ga=l(Gr),vo=n(Gr,"P",{});var Qc=a(vo);za=i(Qc,"Delete a tag, both local and remote, if it exists"),Qc.forEach(o),Gr.forEach(o),Ja=l(h),V=n(h,"DIV",{class:!0});var Ht=a(V);d(Qe.$$.fragment,Ht),Ka=l(Ht),yo=n(Ht,"P",{});var Xc=a(yo);Qa=i(Xc,"git add"),Xc.forEach(o),Xa=l(Ht),C=n(Ht,"P",{});var Fe=a(C);Ya=i(Fe,"Setting the "),$o=n(Fe,"CODE",{});var Yc=a($o);Za=i(Yc,"auto_lfs_track"),Yc.forEach(o),es=i(Fe," parameter to "),wo=n(Fe,"CODE",{});var Zc=a(wo);ts=i(Zc,"True"),Zc.forEach(o),os=i(Fe,` will automatically track files that are larger
than 10MB with `),Eo=n(Fe,"CODE",{});var el=a(Eo);rs=i(el,"git-lfs"),el.forEach(o),ns=i(Fe,"."),Fe.forEach(o),Ht.forEach(o),as=l(h),H=n(h,"DIV",{class:!0});var jt=a(H);d(Xe.$$.fragment,jt),ss=l(jt),ko=n(jt,"P",{});var tl=a(ko);is=i(tl,"git checkout a given revision"),tl.forEach(o),cs=l(jt),W=n(jt,"P",{});var St=a(W);ls=i(St,"Specifying "),Do=n(St,"CODE",{});var ol=a(Do);gs=i(ol,"create_branch_ok"),ol.forEach(o),hs=i(St," to "),xo=n(St,"CODE",{});var rl=a(xo);ps=i(rl,"True"),rl.forEach(o),us=i(St,` will create the branch to the given revision if that revision
doesn\u2019t exist.`),St.forEach(o),jt.forEach(o),ds=l(h),le=n(h,"DIV",{class:!0});var zr=a(le);d(Ye.$$.fragment,zr),fs=l(zr),Ro=n(zr,"P",{});var nl=a(Ro);ms=i(nl,"git commit"),nl.forEach(o),zr.forEach(o),_s=l(h),ge=n(h,"DIV",{class:!0});var Jr=a(ge);d(Ze.$$.fragment,Jr),bs=l(Jr),To=n(Jr,"P",{});var al=a(To);vs=i(al,"Sets git username and email (only in the current repo)."),al.forEach(o),Jr.forEach(o),ys=l(h),he=n(h,"DIV",{class:!0});var Kr=a(he);d(et.$$.fragment,Kr),$s=l(Kr),Ot=n(Kr,"P",{});var bc=a(Ot);ws=i(bc,"Sets the git credential helper to "),Po=n(bc,"CODE",{});var sl=a(Po);Es=i(sl,"store"),sl.forEach(o),bc.forEach(o),Kr.forEach(o),ks=l(h),pe=n(h,"DIV",{class:!0});var Qr=a(pe);d(tt.$$.fragment,Qr),Ds=l(Qr),Io=n(Qr,"P",{});var il=a(Io);xs=i(il,`Get URL to last commit on HEAD. We assume it\u2019s been pushed, and the url scheme is
the same one as for GitHub or HuggingFace.`),il.forEach(o),Qr.forEach(o),Rs=l(h),ue=n(h,"DIV",{class:!0});var Xr=a(ue);d(ot.$$.fragment,Xr),Ts=l(Xr),Oo=n(Xr,"P",{});var cl=a(Oo);Ps=i(cl,"Get commit sha on top of HEAD."),cl.forEach(o),Xr.forEach(o),Is=l(h),de=n(h,"DIV",{class:!0});var Yr=a(de);d(rt.$$.fragment,Yr),Os=l(Yr),Co=n(Yr,"P",{});var ll=a(Co);Cs=i(ll,"git pull"),ll.forEach(o),Yr.forEach(o),Ls=l(h),j=n(h,"DIV",{class:!0});var At=a(j);d(nt.$$.fragment,At),Fs=l(At),Lo=n(At,"P",{});var gl=a(Lo);Ns=i(gl,"git push"),gl.forEach(o),Vs=l(At),B=n(At,"P",{});var qt=a(B);Hs=i(qt,"If used without setting "),Fo=n(qt,"CODE",{});var hl=a(Fo);js=i(hl,"blocking"),hl.forEach(o),Ss=i(qt,`, will return url to commit on remote repo.
If used with `),No=n(qt,"CODE",{});var pl=a(No);As=i(pl,"blocking=True"),pl.forEach(o),qs=i(qt,`, will return a tuple containing the url to commit
and the command object to follow for information about the process.`),qt.forEach(o),At.forEach(o),Us=l(h),fe=n(h,"DIV",{class:!0});var Zr=a(fe);d(at.$$.fragment,Zr),Ms=l(Zr),Vo=n(Zr,"P",{});var ul=a(Vo);Ws=i(ul,"Get URL to origin remote."),ul.forEach(o),Zr.forEach(o),Bs=l(h),me=n(h,"DIV",{class:!0});var en=a(me);d(st.$$.fragment,en),Gs=l(en),Ho=n(en,"P",{});var dl=a(Ho);zs=i(dl,"Return whether or not the git status is clean or not"),dl.forEach(o),en.forEach(o),Js=l(h),_e=n(h,"DIV",{class:!0});var tn=a(_e);d(it.$$.fragment,tn),Ks=l(tn),jo=n(tn,"P",{});var fl=a(jo);Qs=i(fl,"HF-specific. This enables upload support of files >5GB."),fl.forEach(o),tn.forEach(o),Xs=l(h),be=n(h,"DIV",{class:!0});var on=a(be);d(ct.$$.fragment,on),Ys=l(on),So=n(on,"P",{});var ml=a(So);Zs=i(ml,"git lfs prune"),ml.forEach(o),on.forEach(o),ei=l(h),S=n(h,"DIV",{class:!0});var Ut=a(S);d(lt.$$.fragment,Ut),ti=l(Ut),Ao=n(Ut,"P",{});var _l=a(Ao);oi=i(_l,"Tell git-lfs to track files according to a pattern."),_l.forEach(o),ri=l(Ut),L=n(Ut,"P",{});var Ne=a(L);ni=i(Ne,"Setting the "),qo=n(Ne,"CODE",{});var bl=a(qo);ai=i(bl,"filename"),bl.forEach(o),si=i(Ne," argument to "),Uo=n(Ne,"CODE",{});var vl=a(Uo);ii=i(vl,"True"),vl.forEach(o),ci=i(Ne,` will treat the arguments as literal filenames,
not as patterns. Any special glob characters in the filename will be escaped when
writing to the `),Mo=n(Ne,"CODE",{});var yl=a(Mo);li=i(yl,".gitattributes"),yl.forEach(o),gi=i(Ne," file."),Ne.forEach(o),Ut.forEach(o),hi=l(h),ve=n(h,"DIV",{class:!0});var rn=a(ve);d(gt.$$.fragment,rn),pi=l(rn),Wo=n(rn,"P",{});var $l=a(Wo);ui=i($l,"Tell git-lfs to untrack those files."),$l.forEach(o),rn.forEach(o),di=l(h),ye=n(h,"DIV",{class:!0});var nn=a(ye);d(ht.$$.fragment,nn),fi=l(nn),Bo=n(nn,"P",{});var wl=a(Bo);mi=i(wl,"Returns a list of the files that are deleted in the working directory or index."),wl.forEach(o),nn.forEach(o),_i=l(h),$e=n(h,"DIV",{class:!0});var an=a($e);d(pt.$$.fragment,an),bi=l(an),Go=n(an,"P",{});var El=a(Go);vi=i(El,`Helper to add, commit, and push files to remote repository on the HuggingFace Hub.
Will automatically track large files (>10MB).`),El.forEach(o),an.forEach(o),yi=l(h),we=n(h,"DIV",{class:!0});var sn=a(we);d(ut.$$.fragment,sn),$i=l(sn),zo=n(sn,"P",{});var kl=a(zo);wi=i(kl,"Check if a tag exists or not."),kl.forEach(o),sn.forEach(o),Ei=l(h),Ee=n(h,"DIV",{class:!0});var cn=a(Ee);d(dt.$$.fragment,cn),ki=l(cn),Jo=n(cn,"P",{});var Dl=a(Jo);Di=i(Dl,"Blocking method: blocks all subsequent execution until all commands have been processed."),Dl.forEach(o),cn.forEach(o),h.forEach(o),kr=l(t),G=n(t,"H2",{class:!0});var ln=a(G);ke=n(ln,"A",{id:!0,class:!0,href:!0});var xl=a(ke);Ko=n(xl,"SPAN",{});var Rl=a(Ko);d(ft.$$.fragment,Rl),Rl.forEach(o),xl.forEach(o),xi=l(ln),Qo=n(ln,"SPAN",{});var Tl=a(Qo);Ri=i(Tl,"Helper methods"),Tl.forEach(o),ln.forEach(o),Dr=l(t),z=n(t,"DIV",{class:!0});var gn=a(z);d(mt.$$.fragment,gn),Ti=l(gn),Xo=n(gn,"P",{});var Pl=a(Xo);Pi=i(Pl,"Check if the folder is the root or part of a git repository"),Pl.forEach(o),gn.forEach(o),xr=l(t),J=n(t,"DIV",{class:!0});var hn=a(J);d(_t.$$.fragment,hn),Ii=l(hn),Yo=n(hn,"P",{});var Il=a(Yo);Oi=i(Il,"Check if the folder is a local clone of the remote_url"),Il.forEach(o),hn.forEach(o),Rr=l(t),K=n(t,"DIV",{class:!0});var pn=a(K);d(bt.$$.fragment,pn),Ci=l(pn),Zo=n(pn,"P",{});var Ol=a(Zo);Li=i(Ol,"Check if the file passed is tracked with git-lfs."),Ol.forEach(o),pn.forEach(o),Tr=l(t),Q=n(t,"DIV",{class:!0});var un=a(Q);d(vt.$$.fragment,un),Fi=l(un),er=n(un,"P",{});var Cl=a(er);Ni=i(Cl,"Check if file is git-ignored. Supports nested .gitignore files."),Cl.forEach(o),un.forEach(o),Pr=l(t),X=n(t,"DIV",{class:!0});var dn=a(X);d(yt.$$.fragment,dn),Vi=l(dn),tr=n(dn,"P",{});var Ll=a(tr);Hi=i(Ll,"Returns a list of filenames that are to be staged."),Ll.forEach(o),dn.forEach(o),Ir=l(t),Y=n(t,"DIV",{class:!0});var fn=a(Y);d($t.$$.fragment,fn),ji=l(fn),or=n(fn,"P",{});var Fl=a(or);Si=i(Fl,"Check if the current checked-out branch is tracked upstream."),Fl.forEach(o),fn.forEach(o),Or=l(t),Z=n(t,"DIV",{class:!0});var mn=a(Z);d(wt.$$.fragment,mn),Ai=l(mn),rr=n(mn,"P",{});var Nl=a(rr);qi=i(Nl,"Check the number of commits that would be pushed upstream"),Nl.forEach(o),mn.forEach(o),Cr=l(t),ee=n(t,"H2",{class:!0});var _n=a(ee);De=n(_n,"A",{id:!0,class:!0,href:!0});var Vl=a(De);nr=n(Vl,"SPAN",{});var Hl=a(nr);d(Et.$$.fragment,Hl),Hl.forEach(o),Vl.forEach(o),Ui=l(_n),ar=n(_n,"SPAN",{});var jl=a(ar);Mi=i(jl,"Following asynchronous commands"),jl.forEach(o),_n.forEach(o),Lr=l(t),xe=n(t,"P",{});var bn=a(xe);Wi=i(bn,"The "),sr=n(bn,"CODE",{});var Sl=a(sr);Bi=i(Sl,"Repository"),Sl.forEach(o),Gi=i(bn," utility offers several methods which can be launched asynchronously:"),bn.forEach(o),Fr=l(t),P=n(t,"UL",{});var Ve=a(P);ir=n(Ve,"LI",{});var Al=a(ir);cr=n(Al,"CODE",{});var ql=a(cr);zi=i(ql,"git_push"),ql.forEach(o),Al.forEach(o),Ji=l(Ve),lr=n(Ve,"LI",{});var Ul=a(lr);gr=n(Ul,"CODE",{});var Ml=a(gr);Ki=i(Ml,"git_pull"),Ml.forEach(o),Ul.forEach(o),Qi=l(Ve),hr=n(Ve,"LI",{});var Wl=a(hr);pr=n(Wl,"CODE",{});var Bl=a(pr);Xi=i(Bl,"push_to_hub"),Bl.forEach(o),Wl.forEach(o),Yi=l(Ve),kt=n(Ve,"LI",{});var vn=a(kt);Zi=i(vn,"The "),ur=n(vn,"CODE",{});var Gl=a(ur);ec=i(Gl,"commit"),Gl.forEach(o),tc=i(vn," context manager"),vn.forEach(o),Ve.forEach(o),Nr=l(t),Ct=n(t,"P",{});var zl=a(Ct);oc=i(zl,"See below for utilities to manage such asynchronous methods."),zl.forEach(o),Vr=l(t),w=n(t,"DIV",{class:!0});var I=a(w);d(Dt.$$.fragment,I),rc=l(I),dr=n(I,"P",{});var Jl=a(dr);nc=i(Jl,"Helper class to wrap the git and git-lfs commands."),Jl.forEach(o),ac=l(I),fr=n(I,"P",{});var Kl=a(fr);sc=i(Kl,`The aim is to facilitate interacting with huggingface.co hosted model or dataset repos,
though not a lot here (if any) is actually specific to huggingface.co.`),Kl.forEach(o),ic=l(I),Re=n(I,"DIV",{class:!0});var yn=a(Re);d(xt.$$.fragment,yn),cc=l(yn),mr=n(yn,"P",{});var Ql=a(mr);lc=i(Ql,"Returns the asynchronous commands that failed."),Ql.forEach(o),yn.forEach(o),gc=l(I),Te=n(I,"DIV",{class:!0});var $n=a(Te);d(Rt.$$.fragment,$n),hc=l($n),_r=n($n,"P",{});var Xl=a(_r);pc=i(Xl,"Returns the asynchronous commands that are currently in progress."),Xl.forEach(o),$n.forEach(o),uc=l(I),Pe=n(I,"DIV",{class:!0});var wn=a(Pe);d(Tt.$$.fragment,wn),dc=l(wn),br=n(wn,"P",{});var Yl=a(br);fc=i(Yl,"Blocking method: blocks all subsequent execution until all commands have been processed."),Yl.forEach(o),wn.forEach(o),I.forEach(o),Hr=l(t),te=n(t,"DIV",{class:!0});var En=a(te);d(Pt.$$.fragment,En),mc=l(En),vr=n(En,"P",{});var Zl=a(vr);_c=i(Zl,"Utility to follow commands launched asynchronously."),Zl.forEach(o),En.forEach(o),this.h()},h(){p(F,"name","hf:doc:metadata"),p(F,"content",JSON.stringify(ig)),p(O,"id","managing-local-and-online-repositories"),p(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(O,"href","#managing-local-and-online-repositories"),p(E,"class","relative group"),p(ne,"id","huggingface_hub.Repository"),p(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ne,"href","#huggingface_hub.Repository"),p(A,"class","relative group"),p(D,"class","docstring"),p(ae,"class","docstring"),p(R,"class","docstring"),p(se,"class","docstring"),p(ie,"class","docstring"),p(N,"class","docstring"),p(T,"class","docstring"),p(ce,"class","docstring"),p(V,"class","docstring"),p(H,"class","docstring"),p(le,"class","docstring"),p(ge,"class","docstring"),p(he,"class","docstring"),p(pe,"class","docstring"),p(ue,"class","docstring"),p(de,"class","docstring"),p(j,"class","docstring"),p(fe,"class","docstring"),p(me,"class","docstring"),p(_e,"class","docstring"),p(be,"class","docstring"),p(S,"class","docstring"),p(ve,"class","docstring"),p(ye,"class","docstring"),p($e,"class","docstring"),p(we,"class","docstring"),p(Ee,"class","docstring"),p(g,"class","docstring"),p(ke,"id","huggingface_hub.repository.is_git_repo"),p(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ke,"href","#huggingface_hub.repository.is_git_repo"),p(G,"class","relative group"),p(z,"class","docstring"),p(J,"class","docstring"),p(K,"class","docstring"),p(Q,"class","docstring"),p(X,"class","docstring"),p(Y,"class","docstring"),p(Z,"class","docstring"),p(De,"id","huggingface_hub.Repository"),p(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(De,"href","#huggingface_hub.Repository"),p(ee,"class","relative group"),p(Re,"class","docstring"),p(Te,"class","docstring"),p(Pe,"class","docstring"),p(w,"class","docstring"),p(te,"class","docstring")},m(t,v){e(document.head,F),$(t,It,v),$(t,E,v),e(E,O),e(O,Mt),f(He,Mt,null),e(E,xn),e(E,Wt),e(Wt,Rn),$(t,yr,v),$(t,k,v),e(k,Tn),e(k,Bt),e(Bt,Pn),e(k,In),e(k,Gt),e(Gt,On),e(k,Cn),e(k,zt),e(zt,Ln),e(k,Fn),$(t,$r,v),$(t,re,v),e(re,Nn),e(re,Jt),e(Jt,Vn),e(re,Hn),$(t,wr,v),$(t,A,v),e(A,ne),e(ne,Kt),f(je,Kt,null),e(A,jn),e(A,Se),e(Se,Sn),e(Se,Qt),e(Qt,An),e(Se,qn),$(t,Er,v),$(t,g,v),f(Ae,g,null),e(g,Un),e(g,Xt),e(Xt,Mn),e(g,Wn),e(g,Yt),e(Yt,Bn),e(g,Gn),e(g,D),f(qe,D,null),e(D,zn),e(D,Zt),e(Zt,Jn),e(D,Kn),e(D,q),e(q,Qn),e(q,eo),e(eo,Xn),e(q,Yn),e(q,to),e(to,Zn),e(q,ea),e(D,ta),e(D,x),e(x,oo),e(oo,oa),e(x,ra),e(x,ro),e(ro,na),e(x,aa),e(x,no),e(no,sa),e(x,ia),e(x,ao),e(ao,ca),e(x,la),e(g,ga),e(g,ae),f(Ue,ae,null),e(ae,ha),e(ae,so),e(so,pa),e(g,ua),e(g,R),f(Me,R,null),e(R,da),e(R,io),e(io,fa),e(R,ma),e(R,co),e(co,_a),e(R,ba),e(R,lo),e(lo,va),e(g,ya),e(g,se),f(We,se,null),e(se,$a),e(se,go),e(go,wa),e(g,Ea),e(g,ie),f(Be,ie,null),e(ie,ka),e(ie,U),e(U,Da),e(U,ho),e(ho,xa),e(U,Ra),e(U,po),e(po,Ta),e(U,Pa),e(g,Ia),e(g,N),f(Ge,N,null),e(N,Oa),e(N,uo),e(uo,Ca),e(N,La),e(N,fo),e(fo,Fa),e(g,Na),e(g,T),f(ze,T,null),e(T,Va),e(T,M),e(M,Ha),e(M,mo),e(mo,ja),e(M,Sa),e(M,_o),e(_o,Aa),e(M,qa),e(T,Ua),e(T,bo),e(bo,Ma),e(T,Wa),f(Je,T,null),e(g,Ba),e(g,ce),f(Ke,ce,null),e(ce,Ga),e(ce,vo),e(vo,za),e(g,Ja),e(g,V),f(Qe,V,null),e(V,Ka),e(V,yo),e(yo,Qa),e(V,Xa),e(V,C),e(C,Ya),e(C,$o),e($o,Za),e(C,es),e(C,wo),e(wo,ts),e(C,os),e(C,Eo),e(Eo,rs),e(C,ns),e(g,as),e(g,H),f(Xe,H,null),e(H,ss),e(H,ko),e(ko,is),e(H,cs),e(H,W),e(W,ls),e(W,Do),e(Do,gs),e(W,hs),e(W,xo),e(xo,ps),e(W,us),e(g,ds),e(g,le),f(Ye,le,null),e(le,fs),e(le,Ro),e(Ro,ms),e(g,_s),e(g,ge),f(Ze,ge,null),e(ge,bs),e(ge,To),e(To,vs),e(g,ys),e(g,he),f(et,he,null),e(he,$s),e(he,Ot),e(Ot,ws),e(Ot,Po),e(Po,Es),e(g,ks),e(g,pe),f(tt,pe,null),e(pe,Ds),e(pe,Io),e(Io,xs),e(g,Rs),e(g,ue),f(ot,ue,null),e(ue,Ts),e(ue,Oo),e(Oo,Ps),e(g,Is),e(g,de),f(rt,de,null),e(de,Os),e(de,Co),e(Co,Cs),e(g,Ls),e(g,j),f(nt,j,null),e(j,Fs),e(j,Lo),e(Lo,Ns),e(j,Vs),e(j,B),e(B,Hs),e(B,Fo),e(Fo,js),e(B,Ss),e(B,No),e(No,As),e(B,qs),e(g,Us),e(g,fe),f(at,fe,null),e(fe,Ms),e(fe,Vo),e(Vo,Ws),e(g,Bs),e(g,me),f(st,me,null),e(me,Gs),e(me,Ho),e(Ho,zs),e(g,Js),e(g,_e),f(it,_e,null),e(_e,Ks),e(_e,jo),e(jo,Qs),e(g,Xs),e(g,be),f(ct,be,null),e(be,Ys),e(be,So),e(So,Zs),e(g,ei),e(g,S),f(lt,S,null),e(S,ti),e(S,Ao),e(Ao,oi),e(S,ri),e(S,L),e(L,ni),e(L,qo),e(qo,ai),e(L,si),e(L,Uo),e(Uo,ii),e(L,ci),e(L,Mo),e(Mo,li),e(L,gi),e(g,hi),e(g,ve),f(gt,ve,null),e(ve,pi),e(ve,Wo),e(Wo,ui),e(g,di),e(g,ye),f(ht,ye,null),e(ye,fi),e(ye,Bo),e(Bo,mi),e(g,_i),e(g,$e),f(pt,$e,null),e($e,bi),e($e,Go),e(Go,vi),e(g,yi),e(g,we),f(ut,we,null),e(we,$i),e(we,zo),e(zo,wi),e(g,Ei),e(g,Ee),f(dt,Ee,null),e(Ee,ki),e(Ee,Jo),e(Jo,Di),$(t,kr,v),$(t,G,v),e(G,ke),e(ke,Ko),f(ft,Ko,null),e(G,xi),e(G,Qo),e(Qo,Ri),$(t,Dr,v),$(t,z,v),f(mt,z,null),e(z,Ti),e(z,Xo),e(Xo,Pi),$(t,xr,v),$(t,J,v),f(_t,J,null),e(J,Ii),e(J,Yo),e(Yo,Oi),$(t,Rr,v),$(t,K,v),f(bt,K,null),e(K,Ci),e(K,Zo),e(Zo,Li),$(t,Tr,v),$(t,Q,v),f(vt,Q,null),e(Q,Fi),e(Q,er),e(er,Ni),$(t,Pr,v),$(t,X,v),f(yt,X,null),e(X,Vi),e(X,tr),e(tr,Hi),$(t,Ir,v),$(t,Y,v),f($t,Y,null),e(Y,ji),e(Y,or),e(or,Si),$(t,Or,v),$(t,Z,v),f(wt,Z,null),e(Z,Ai),e(Z,rr),e(rr,qi),$(t,Cr,v),$(t,ee,v),e(ee,De),e(De,nr),f(Et,nr,null),e(ee,Ui),e(ee,ar),e(ar,Mi),$(t,Lr,v),$(t,xe,v),e(xe,Wi),e(xe,sr),e(sr,Bi),e(xe,Gi),$(t,Fr,v),$(t,P,v),e(P,ir),e(ir,cr),e(cr,zi),e(P,Ji),e(P,lr),e(lr,gr),e(gr,Ki),e(P,Qi),e(P,hr),e(hr,pr),e(pr,Xi),e(P,Yi),e(P,kt),e(kt,Zi),e(kt,ur),e(ur,ec),e(kt,tc),$(t,Nr,v),$(t,Ct,v),e(Ct,oc),$(t,Vr,v),$(t,w,v),f(Dt,w,null),e(w,rc),e(w,dr),e(dr,nc),e(w,ac),e(w,fr),e(fr,sc),e(w,ic),e(w,Re),f(xt,Re,null),e(Re,cc),e(Re,mr),e(mr,lc),e(w,gc),e(w,Te),f(Rt,Te,null),e(Te,hc),e(Te,_r),e(_r,pc),e(w,uc),e(w,Pe),f(Tt,Pe,null),e(Pe,dc),e(Pe,br),e(br,fc),$(t,Hr,v),$(t,te,v),f(Pt,te,null),e(te,mc),e(te,vr),e(vr,_c),jr=!0},p:ng,i(t){jr||(m(He.$$.fragment,t),m(je.$$.fragment,t),m(Ae.$$.fragment,t),m(qe.$$.fragment,t),m(Ue.$$.fragment,t),m(Me.$$.fragment,t),m(We.$$.fragment,t),m(Be.$$.fragment,t),m(Ge.$$.fragment,t),m(ze.$$.fragment,t),m(Je.$$.fragment,t),m(Ke.$$.fragment,t),m(Qe.$$.fragment,t),m(Xe.$$.fragment,t),m(Ye.$$.fragment,t),m(Ze.$$.fragment,t),m(et.$$.fragment,t),m(tt.$$.fragment,t),m(ot.$$.fragment,t),m(rt.$$.fragment,t),m(nt.$$.fragment,t),m(at.$$.fragment,t),m(st.$$.fragment,t),m(it.$$.fragment,t),m(ct.$$.fragment,t),m(lt.$$.fragment,t),m(gt.$$.fragment,t),m(ht.$$.fragment,t),m(pt.$$.fragment,t),m(ut.$$.fragment,t),m(dt.$$.fragment,t),m(ft.$$.fragment,t),m(mt.$$.fragment,t),m(_t.$$.fragment,t),m(bt.$$.fragment,t),m(vt.$$.fragment,t),m(yt.$$.fragment,t),m($t.$$.fragment,t),m(wt.$$.fragment,t),m(Et.$$.fragment,t),m(Dt.$$.fragment,t),m(xt.$$.fragment,t),m(Rt.$$.fragment,t),m(Tt.$$.fragment,t),m(Pt.$$.fragment,t),jr=!0)},o(t){_(He.$$.fragment,t),_(je.$$.fragment,t),_(Ae.$$.fragment,t),_(qe.$$.fragment,t),_(Ue.$$.fragment,t),_(Me.$$.fragment,t),_(We.$$.fragment,t),_(Be.$$.fragment,t),_(Ge.$$.fragment,t),_(ze.$$.fragment,t),_(Je.$$.fragment,t),_(Ke.$$.fragment,t),_(Qe.$$.fragment,t),_(Xe.$$.fragment,t),_(Ye.$$.fragment,t),_(Ze.$$.fragment,t),_(et.$$.fragment,t),_(tt.$$.fragment,t),_(ot.$$.fragment,t),_(rt.$$.fragment,t),_(nt.$$.fragment,t),_(at.$$.fragment,t),_(st.$$.fragment,t),_(it.$$.fragment,t),_(ct.$$.fragment,t),_(lt.$$.fragment,t),_(gt.$$.fragment,t),_(ht.$$.fragment,t),_(pt.$$.fragment,t),_(ut.$$.fragment,t),_(dt.$$.fragment,t),_(ft.$$.fragment,t),_(mt.$$.fragment,t),_(_t.$$.fragment,t),_(bt.$$.fragment,t),_(vt.$$.fragment,t),_(yt.$$.fragment,t),_($t.$$.fragment,t),_(wt.$$.fragment,t),_(Et.$$.fragment,t),_(Dt.$$.fragment,t),_(xt.$$.fragment,t),_(Rt.$$.fragment,t),_(Tt.$$.fragment,t),_(Pt.$$.fragment,t),jr=!1},d(t){o(F),t&&o(It),t&&o(E),b(He),t&&o(yr),t&&o(k),t&&o($r),t&&o(re),t&&o(wr),t&&o(A),b(je),t&&o(Er),t&&o(g),b(Ae),b(qe),b(Ue),b(Me),b(We),b(Be),b(Ge),b(ze),b(Je),b(Ke),b(Qe),b(Xe),b(Ye),b(Ze),b(et),b(tt),b(ot),b(rt),b(nt),b(at),b(st),b(it),b(ct),b(lt),b(gt),b(ht),b(pt),b(ut),b(dt),t&&o(kr),t&&o(G),b(ft),t&&o(Dr),t&&o(z),b(mt),t&&o(xr),t&&o(J),b(_t),t&&o(Rr),t&&o(K),b(bt),t&&o(Tr),t&&o(Q),b(vt),t&&o(Pr),t&&o(X),b(yt),t&&o(Ir),t&&o(Y),b($t),t&&o(Or),t&&o(Z),b(wt),t&&o(Cr),t&&o(ee),b(Et),t&&o(Lr),t&&o(xe),t&&o(Fr),t&&o(P),t&&o(Nr),t&&o(Ct),t&&o(Vr),t&&o(w),b(Dt),b(xt),b(Rt),b(Tt),t&&o(Hr),t&&o(te),b(Pt)}}}const ig={local:"managing-local-and-online-repositories",sections:[{local:"huggingface_hub.Repository",title:"The `Repository` class"},{local:"huggingface_hub.repository.is_git_repo",title:"Helper methods"},{local:"huggingface_hub.Repository",title:"Following asynchronous commands"}],title:"Managing local and online repositories"};function cg(Dn,F,It){let{fw:E}=F;return Dn.$$set=O=>{"fw"in O&&It(0,E=O.fw)},[E]}class ug extends eg{constructor(F){super();tg(this,F,cg,sg,og,{fw:0})}}export{ug as default,ig as metadata};
