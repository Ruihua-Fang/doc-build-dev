import{S as Ms,i as Ws,s as Js,e as s,k as h,w as g,t as a,M as Gs,c as n,d as t,m as f,a as r,x as m,h as l,b as p,N as Ys,F as o,g as d,y as v,L as zs,q as y,o as b,B as E}from"../chunks/vendor-7b1da053.js";import{I as Ho}from"../chunks/IconCopyLink-d24e9a6f.js";import{C as N}from"../chunks/CodeBlock-5f39b59e.js";function Ks(Et){let O,ge,Q,V,L,B,Oe,X,$t,De,xt,So,U,M,Ce,Z,jt,Pe,kt,Ao,W,qt,He,Ot,Dt,No,D,Se,Ct,Pt,Ae,Ht,St,Ne,At,Lo,R,J,Le,ee,Nt,Ue,Lt,Uo,C,Ut,Re,Rt,Tt,Te,It,Ft,Ro,me,ve,Cl,To,oe,Io,ye,Bt,Fo,be,Mt,Bo,te,Mo,ae,Ie,Wt,Jt,Wo,le,Jo,P,Gt,Fe,Yt,zt,Be,Kt,Qt,Go,se,Yo,T,G,Me,ne,Vt,We,Xt,zo,k,Je,Zt,ea,Ge,oa,ta,Ye,aa,la,Ko,H,sa,ze,na,ra,Ke,ia,da,Qo,re,Vo,_,Qe,ha,fa,Ve,pa,ca,Xe,ua,_a,Ze,wa,ga,eo,ma,va,oo,ya,ba,Xo,ie,Zo,I,Y,to,de,Ea,ao,$a,et,F,lo,xa,ja,so,ka,qa,ot,Ee,Oa,tt,he,at,q,no,Da,Ca,ro,Pa,Ha,io,Sa,Aa,lt,fe,st,S,Na,ho,La,Ua,fo,Ra,Ta,nt,c,Ia,po,Fa,Ba,co,Ma,Wa,uo,Ja,Ga,_o,Ya,za,wo,Ka,Qa,go,Va,Xa,mo,Za,el,pe,vo,ol,tl,rt,z,al,yo,ll,sl,it,ce,dt,w,nl,bo,rl,il,Eo,dl,hl,$o,fl,pl,xo,cl,ul,jo,_l,wl,ht,ue,ft,K,gl,ko,ml,vl,pt,$,yl,qo,bl,El,Oo,$l,xl,Do,jl,kl,Co,ql,Ol,ct;return X=new Ho({}),Z=new Ho({}),ee=new Ho({}),oe=new N({props:{code:`from huggingface_hub import hf_hub_url
hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/arxiv-nlp/resolve/main/config.json&#x27;</span>`}}),te=new N({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="877b84a8f93f2d619faa2a6e514a32beef88ab0a")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;877b84a8f93f2d619faa2a6e514a32beef88ab0a&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/arxiv-nlp/resolve/877b84a8f93f2d619faa2a6e514a32beef88ab0a/config.json&#x27;</span>`}}),le=new N({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="main")',highlighted:'hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)'}}),se=new N({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="v1.0")',highlighted:'hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;v1.0&quot;</span>)'}}),ne=new Ho({}),re=new N({props:{code:`from huggingface_hub import hf_hub_url, cached_download
config_file_url = hf_hub_url("lysandre/arxiv-nlp", filename="config.json")
cached_download(config_file_url)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url, cached_download
<span class="hljs-meta">&gt;&gt;&gt; </span>config_file_url = hf_hub_url(<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>cached_download(config_file_url)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/bc0e8cc2f8271b322304e8bb84b3b7580701d53a335ab2d75da19c249e2eeebb.066dae6fdb1e2b8cce60c35cc0f78ed1451d9b341c78de19f3ad469d10a8cbb1&#x27;</span>`}}),ie=new N({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)`}}),de=new Ho({}),he=new N({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/lysandre__arxiv-nlp.894a9adde21d9a3e3843e6d5aeaaf01875c7fade&#x27;</span>`}}),fe=new N({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", revision="main")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)`}}),ce=new N({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", allow_regex="*.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, allow_regex=<span class="hljs-string">&quot;*.json&quot;</span>)`}}),ue=new N({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", ignore_regex=["*.msgpack", "*.h5"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, ignore_regex=[<span class="hljs-string">&quot;*.msgpack&quot;</span>, <span class="hljs-string">&quot;*.h5&quot;</span>])`}}),{c(){O=s("meta"),ge=h(),Q=s("hr"),V=h(),L=s("h2"),B=s("a"),Oe=s("span"),g(X.$$.fragment),$t=h(),De=s("span"),xt=a("title: How to download files from the Hub"),So=h(),U=s("h1"),M=s("a"),Ce=s("span"),g(Z.$$.fragment),jt=h(),Pe=s("span"),kt=a("How to integrate downstream utilities in your library"),Ao=h(),W=s("p"),qt=a("Utilities that allow your library to download files from the Hub are referred to as "),He=s("em"),Ot=a("downstream"),Dt=a(" utilities. This guide introduces additional downstream utilities you can integrate with your library, or use separately on their own. You will learn how to:"),No=h(),D=s("ul"),Se=s("li"),Ct=a("Retrieve a URL to download."),Pt=h(),Ae=s("li"),Ht=a("Download a file and cache it on your disk."),St=h(),Ne=s("li"),At=a("Download all the files in a repository."),Lo=h(),R=s("h2"),J=s("a"),Le=s("span"),g(ee.$$.fragment),Nt=h(),Ue=s("span"),Lt=a("hf_hub_url"),Uo=h(),C=s("p"),Ut=a("Use "),Re=s("code"),Rt=a("hf_hub_url"),Tt=a(" to retrieve the URL of a specific file to download by providing a "),Te=s("code"),It=a("filename"),Ft=a("."),Ro=h(),me=s("p"),ve=s("img"),To=h(),g(oe.$$.fragment),Io=h(),ye=s("p"),Bt=a("Specify a particular file version by providing the file revision. The file revision can be a branch, a tag, or a commit hash."),Fo=h(),be=s("p"),Mt=a("When using the commit hash, it must be the full-length hash instead of a 7-character commit hash:"),Bo=h(),g(te.$$.fragment),Mo=h(),ae=s("p"),Ie=s("code"),Wt=a("hf_hub_url"),Jt=a(" can also use the branch name to specify a file revision:"),Wo=h(),g(le.$$.fragment),Jo=h(),P=s("p"),Gt=a("Specify a file revision with a tag identifier. For example, if you want "),Fe=s("code"),Yt=a("v1.0"),zt=a(" of the "),Be=s("code"),Kt=a("config.json"),Qt=a(" file:"),Go=h(),g(se.$$.fragment),Yo=h(),T=s("h2"),G=s("a"),Me=s("span"),g(ne.$$.fragment),Vt=h(),We=s("span"),Xt=a("cached_download"),zo=h(),k=s("p"),Je=s("code"),Zt=a("cached_download"),ea=a(" is useful for downloading and caching a file on your local disk. Once stored in your cache, you don\u2019t have to redownload the file the next time you use it. "),Ge=s("code"),oa=a("cached_download"),ta=a(" is a hands-free solution for staying up to date with new file versions. When a downloaded file is updated in the remote repository, "),Ye=s("code"),aa=a("cached_download"),la=a(" will automatically download and store it for you."),Ko=h(),H=s("p"),sa=a("Begin by retrieving your file URL with "),ze=s("code"),na=a("hf_hub_url"),ra=a(", and then pass the specified URL to "),Ke=s("code"),ia=a("cached_download"),da=a(" to download the file:"),Qo=h(),g(re.$$.fragment),Vo=h(),_=s("p"),Qe=s("code"),ha=a("hf_hub_url"),fa=a(" and "),Ve=s("code"),pa=a("cached_download"),ca=a(" work hand in hand to download a file. This is precisely how "),Xe=s("code"),ua=a("hf_hub_download"),_a=a(" from the tutorial works! "),Ze=s("code"),wa=a("hf_hub_download"),ga=a(" is simply a wrapper that calls both "),eo=s("code"),ma=a("hf_hub_url"),va=a(" and "),oo=s("code"),ya=a("cached_download"),ba=a("."),Xo=h(),g(ie.$$.fragment),Zo=h(),I=s("h2"),Y=s("a"),to=s("span"),g(de.$$.fragment),Ea=h(),ao=s("span"),$a=a("snapshot_download"),et=h(),F=s("p"),lo=s("code"),xa=a("snapshot_download"),ja=a(" downloads an entire repository at a given revision. Like "),so=s("code"),ka=a("cached_download"),qa=a(", all downloaded files are cached on your local disk. However, even if only a single file is updated, the entire repository will be redownloaded."),ot=h(),Ee=s("p"),Oa=a("Download a whole repository as shown in the following:"),tt=h(),g(he.$$.fragment),at=h(),q=s("p"),no=s("code"),Da=a("snapshot_download"),Ca=a(" downloads the latest revision by default. If you want a specific repository revision, use the "),ro=s("code"),Pa=a("revision"),Ha=a(" parameter as shown with "),io=s("code"),Sa=a("hf_hub_url"),Aa=a("."),lt=h(),g(fe.$$.fragment),st=h(),S=s("p"),Na=a("In general, it is usually better to manually download files with "),ho=s("code"),La=a("hf_hub_download"),Ua=a(" (if you already know the file name) to avoid re-downloading an entire repository. "),fo=s("code"),Ra=a("snapshot_download"),Ta=a(" is helpful when your library\u2019s downloading utility is a helper, and unaware of which files need to be downloaded."),nt=h(),c=s("p"),Ia=a("However, you don\u2019t want to always download the contents of an entire repository with "),po=s("code"),Fa=a("snapshot_download"),Ba=a(". Even if you don\u2019t know the file name and only know the file type, you can download specific files with "),co=s("code"),Ma=a("allow_regex"),Wa=a(" and "),uo=s("code"),Ja=a("ignore_regex"),Ga=a(`.
use of the `),_o=s("code"),Ya=a("allow_regex"),za=a(" and "),wo=s("code"),Ka=a("ignore_regex"),Qa=a(` arguments to specify
which files shall be downloaded.
`),go=s("code"),Va=a("allow_regex"),Xa=a(" and "),mo=s("code"),Za=a("ignore_regex"),el=a(` accept either a single regex or a list of regexes.
The regex matching is based on `),pe=s("a"),vo=s("code"),ol=a("fnmatch"),tl=a(" which means it provides support for Unix shell-style wildcards."),rt=h(),z=s("p"),al=a("For example, you can use "),yo=s("code"),ll=a("allow_regex"),sl=a(" to only download JSON configuration files:"),it=h(),g(ce.$$.fragment),dt=h(),w=s("p"),nl=a("On the other hand, "),bo=s("code"),rl=a("ignore_regex"),il=a(" can be used to exclude certain files from being downloaded. The following example ignores the "),Eo=s("code"),dl=a(".msgpack"),hl=a(" and "),$o=s("code"),fl=a(".h5"),pl=a(` file extensions:
or `),xo=s("code"),cl=a(".h5"),ul=a(" extensions, you could make use of "),jo=s("code"),_l=a("ignore_regex"),wl=a(":"),ht=h(),g(ue.$$.fragment),ft=h(),K=s("p"),gl=a(`Passing a regex can be especially useful when repositories contain files that
are never expected to be downloaded by `),ko=s("code"),ml=a("snapshot_download"),vl=a("."),pt=h(),$=s("p"),yl=a("Note that passing "),qo=s("code"),bl=a("allow_regex"),El=a(" or "),Oo=s("code"),$l=a("ignore_regex"),xl=a(" does "),Do=s("strong"),jl=a("not"),kl=a(` prevent
`),Co=s("code"),ql=a("snapshot_download"),Ol=a(` from re-downloading the entire model repository if an ignored
file is changed.`),this.h()},l(e){const i=Gs('[data-svelte="svelte-1phssyn"]',document.head);O=n(i,"META",{name:!0,content:!0}),i.forEach(t),ge=f(e),Q=n(e,"HR",{}),V=f(e),L=n(e,"H2",{class:!0});var ut=r(L);B=n(ut,"A",{id:!0,class:!0,href:!0});var Pl=r(B);Oe=n(Pl,"SPAN",{});var Hl=r(Oe);m(X.$$.fragment,Hl),Hl.forEach(t),Pl.forEach(t),$t=f(ut),De=n(ut,"SPAN",{});var Sl=r(De);xt=l(Sl,"title: How to download files from the Hub"),Sl.forEach(t),ut.forEach(t),So=f(e),U=n(e,"H1",{class:!0});var _t=r(U);M=n(_t,"A",{id:!0,class:!0,href:!0});var Al=r(M);Ce=n(Al,"SPAN",{});var Nl=r(Ce);m(Z.$$.fragment,Nl),Nl.forEach(t),Al.forEach(t),jt=f(_t),Pe=n(_t,"SPAN",{});var Ll=r(Pe);kt=l(Ll,"How to integrate downstream utilities in your library"),Ll.forEach(t),_t.forEach(t),Ao=f(e),W=n(e,"P",{});var wt=r(W);qt=l(wt,"Utilities that allow your library to download files from the Hub are referred to as "),He=n(wt,"EM",{});var Ul=r(He);Ot=l(Ul,"downstream"),Ul.forEach(t),Dt=l(wt," utilities. This guide introduces additional downstream utilities you can integrate with your library, or use separately on their own. You will learn how to:"),wt.forEach(t),No=f(e),D=n(e,"UL",{});var $e=r(D);Se=n($e,"LI",{});var Rl=r(Se);Ct=l(Rl,"Retrieve a URL to download."),Rl.forEach(t),Pt=f($e),Ae=n($e,"LI",{});var Tl=r(Ae);Ht=l(Tl,"Download a file and cache it on your disk."),Tl.forEach(t),St=f($e),Ne=n($e,"LI",{});var Il=r(Ne);At=l(Il,"Download all the files in a repository."),Il.forEach(t),$e.forEach(t),Lo=f(e),R=n(e,"H2",{class:!0});var gt=r(R);J=n(gt,"A",{id:!0,class:!0,href:!0});var Fl=r(J);Le=n(Fl,"SPAN",{});var Bl=r(Le);m(ee.$$.fragment,Bl),Bl.forEach(t),Fl.forEach(t),Nt=f(gt),Ue=n(gt,"SPAN",{});var Ml=r(Ue);Lt=l(Ml,"hf_hub_url"),Ml.forEach(t),gt.forEach(t),Uo=f(e),C=n(e,"P",{});var xe=r(C);Ut=l(xe,"Use "),Re=n(xe,"CODE",{});var Wl=r(Re);Rt=l(Wl,"hf_hub_url"),Wl.forEach(t),Tt=l(xe," to retrieve the URL of a specific file to download by providing a "),Te=n(xe,"CODE",{});var Jl=r(Te);It=l(Jl,"filename"),Jl.forEach(t),Ft=l(xe,"."),xe.forEach(t),Ro=f(e),me=n(e,"P",{});var Gl=r(me);ve=n(Gl,"IMG",{src:!0,alt:!0}),Gl.forEach(t),To=f(e),m(oe.$$.fragment,e),Io=f(e),ye=n(e,"P",{});var Yl=r(ye);Bt=l(Yl,"Specify a particular file version by providing the file revision. The file revision can be a branch, a tag, or a commit hash."),Yl.forEach(t),Fo=f(e),be=n(e,"P",{});var zl=r(be);Mt=l(zl,"When using the commit hash, it must be the full-length hash instead of a 7-character commit hash:"),zl.forEach(t),Bo=f(e),m(te.$$.fragment,e),Mo=f(e),ae=n(e,"P",{});var Dl=r(ae);Ie=n(Dl,"CODE",{});var Kl=r(Ie);Wt=l(Kl,"hf_hub_url"),Kl.forEach(t),Jt=l(Dl," can also use the branch name to specify a file revision:"),Dl.forEach(t),Wo=f(e),m(le.$$.fragment,e),Jo=f(e),P=n(e,"P",{});var je=r(P);Gt=l(je,"Specify a file revision with a tag identifier. For example, if you want "),Fe=n(je,"CODE",{});var Ql=r(Fe);Yt=l(Ql,"v1.0"),Ql.forEach(t),zt=l(je," of the "),Be=n(je,"CODE",{});var Vl=r(Be);Kt=l(Vl,"config.json"),Vl.forEach(t),Qt=l(je," file:"),je.forEach(t),Go=f(e),m(se.$$.fragment,e),Yo=f(e),T=n(e,"H2",{class:!0});var mt=r(T);G=n(mt,"A",{id:!0,class:!0,href:!0});var Xl=r(G);Me=n(Xl,"SPAN",{});var Zl=r(Me);m(ne.$$.fragment,Zl),Zl.forEach(t),Xl.forEach(t),Vt=f(mt),We=n(mt,"SPAN",{});var es=r(We);Xt=l(es,"cached_download"),es.forEach(t),mt.forEach(t),zo=f(e),k=n(e,"P",{});var _e=r(k);Je=n(_e,"CODE",{});var os=r(Je);Zt=l(os,"cached_download"),os.forEach(t),ea=l(_e," is useful for downloading and caching a file on your local disk. Once stored in your cache, you don\u2019t have to redownload the file the next time you use it. "),Ge=n(_e,"CODE",{});var ts=r(Ge);oa=l(ts,"cached_download"),ts.forEach(t),ta=l(_e," is a hands-free solution for staying up to date with new file versions. When a downloaded file is updated in the remote repository, "),Ye=n(_e,"CODE",{});var as=r(Ye);aa=l(as,"cached_download"),as.forEach(t),la=l(_e," will automatically download and store it for you."),_e.forEach(t),Ko=f(e),H=n(e,"P",{});var ke=r(H);sa=l(ke,"Begin by retrieving your file URL with "),ze=n(ke,"CODE",{});var ls=r(ze);na=l(ls,"hf_hub_url"),ls.forEach(t),ra=l(ke,", and then pass the specified URL to "),Ke=n(ke,"CODE",{});var ss=r(Ke);ia=l(ss,"cached_download"),ss.forEach(t),da=l(ke," to download the file:"),ke.forEach(t),Qo=f(e),m(re.$$.fragment,e),Vo=f(e),_=n(e,"P",{});var x=r(_);Qe=n(x,"CODE",{});var ns=r(Qe);ha=l(ns,"hf_hub_url"),ns.forEach(t),fa=l(x," and "),Ve=n(x,"CODE",{});var rs=r(Ve);pa=l(rs,"cached_download"),rs.forEach(t),ca=l(x," work hand in hand to download a file. This is precisely how "),Xe=n(x,"CODE",{});var is=r(Xe);ua=l(is,"hf_hub_download"),is.forEach(t),_a=l(x," from the tutorial works! "),Ze=n(x,"CODE",{});var ds=r(Ze);wa=l(ds,"hf_hub_download"),ds.forEach(t),ga=l(x," is simply a wrapper that calls both "),eo=n(x,"CODE",{});var hs=r(eo);ma=l(hs,"hf_hub_url"),hs.forEach(t),va=l(x," and "),oo=n(x,"CODE",{});var fs=r(oo);ya=l(fs,"cached_download"),fs.forEach(t),ba=l(x,"."),x.forEach(t),Xo=f(e),m(ie.$$.fragment,e),Zo=f(e),I=n(e,"H2",{class:!0});var vt=r(I);Y=n(vt,"A",{id:!0,class:!0,href:!0});var ps=r(Y);to=n(ps,"SPAN",{});var cs=r(to);m(de.$$.fragment,cs),cs.forEach(t),ps.forEach(t),Ea=f(vt),ao=n(vt,"SPAN",{});var us=r(ao);$a=l(us,"snapshot_download"),us.forEach(t),vt.forEach(t),et=f(e),F=n(e,"P",{});var Po=r(F);lo=n(Po,"CODE",{});var _s=r(lo);xa=l(_s,"snapshot_download"),_s.forEach(t),ja=l(Po," downloads an entire repository at a given revision. Like "),so=n(Po,"CODE",{});var ws=r(so);ka=l(ws,"cached_download"),ws.forEach(t),qa=l(Po,", all downloaded files are cached on your local disk. However, even if only a single file is updated, the entire repository will be redownloaded."),Po.forEach(t),ot=f(e),Ee=n(e,"P",{});var gs=r(Ee);Oa=l(gs,"Download a whole repository as shown in the following:"),gs.forEach(t),tt=f(e),m(he.$$.fragment,e),at=f(e),q=n(e,"P",{});var we=r(q);no=n(we,"CODE",{});var ms=r(no);Da=l(ms,"snapshot_download"),ms.forEach(t),Ca=l(we," downloads the latest revision by default. If you want a specific repository revision, use the "),ro=n(we,"CODE",{});var vs=r(ro);Pa=l(vs,"revision"),vs.forEach(t),Ha=l(we," parameter as shown with "),io=n(we,"CODE",{});var ys=r(io);Sa=l(ys,"hf_hub_url"),ys.forEach(t),Aa=l(we,"."),we.forEach(t),lt=f(e),m(fe.$$.fragment,e),st=f(e),S=n(e,"P",{});var qe=r(S);Na=l(qe,"In general, it is usually better to manually download files with "),ho=n(qe,"CODE",{});var bs=r(ho);La=l(bs,"hf_hub_download"),bs.forEach(t),Ua=l(qe," (if you already know the file name) to avoid re-downloading an entire repository. "),fo=n(qe,"CODE",{});var Es=r(fo);Ra=l(Es,"snapshot_download"),Es.forEach(t),Ta=l(qe," is helpful when your library\u2019s downloading utility is a helper, and unaware of which files need to be downloaded."),qe.forEach(t),nt=f(e),c=n(e,"P",{});var u=r(c);Ia=l(u,"However, you don\u2019t want to always download the contents of an entire repository with "),po=n(u,"CODE",{});var $s=r(po);Fa=l($s,"snapshot_download"),$s.forEach(t),Ba=l(u,". Even if you don\u2019t know the file name and only know the file type, you can download specific files with "),co=n(u,"CODE",{});var xs=r(co);Ma=l(xs,"allow_regex"),xs.forEach(t),Wa=l(u," and "),uo=n(u,"CODE",{});var js=r(uo);Ja=l(js,"ignore_regex"),js.forEach(t),Ga=l(u,`.
use of the `),_o=n(u,"CODE",{});var ks=r(_o);Ya=l(ks,"allow_regex"),ks.forEach(t),za=l(u," and "),wo=n(u,"CODE",{});var qs=r(wo);Ka=l(qs,"ignore_regex"),qs.forEach(t),Qa=l(u,` arguments to specify
which files shall be downloaded.
`),go=n(u,"CODE",{});var Os=r(go);Va=l(Os,"allow_regex"),Os.forEach(t),Xa=l(u," and "),mo=n(u,"CODE",{});var Ds=r(mo);Za=l(Ds,"ignore_regex"),Ds.forEach(t),el=l(u,` accept either a single regex or a list of regexes.
The regex matching is based on `),pe=n(u,"A",{href:!0,rel:!0});var Cs=r(pe);vo=n(Cs,"CODE",{});var Ps=r(vo);ol=l(Ps,"fnmatch"),Ps.forEach(t),Cs.forEach(t),tl=l(u," which means it provides support for Unix shell-style wildcards."),u.forEach(t),rt=f(e),z=n(e,"P",{});var yt=r(z);al=l(yt,"For example, you can use "),yo=n(yt,"CODE",{});var Hs=r(yo);ll=l(Hs,"allow_regex"),Hs.forEach(t),sl=l(yt," to only download JSON configuration files:"),yt.forEach(t),it=f(e),m(ce.$$.fragment,e),dt=f(e),w=n(e,"P",{});var j=r(w);nl=l(j,"On the other hand, "),bo=n(j,"CODE",{});var Ss=r(bo);rl=l(Ss,"ignore_regex"),Ss.forEach(t),il=l(j," can be used to exclude certain files from being downloaded. The following example ignores the "),Eo=n(j,"CODE",{});var As=r(Eo);dl=l(As,".msgpack"),As.forEach(t),hl=l(j," and "),$o=n(j,"CODE",{});var Ns=r($o);fl=l(Ns,".h5"),Ns.forEach(t),pl=l(j,` file extensions:
or `),xo=n(j,"CODE",{});var Ls=r(xo);cl=l(Ls,".h5"),Ls.forEach(t),ul=l(j," extensions, you could make use of "),jo=n(j,"CODE",{});var Us=r(jo);_l=l(Us,"ignore_regex"),Us.forEach(t),wl=l(j,":"),j.forEach(t),ht=f(e),m(ue.$$.fragment,e),ft=f(e),K=n(e,"P",{});var bt=r(K);gl=l(bt,`Passing a regex can be especially useful when repositories contain files that
are never expected to be downloaded by `),ko=n(bt,"CODE",{});var Rs=r(ko);ml=l(Rs,"snapshot_download"),Rs.forEach(t),vl=l(bt,"."),bt.forEach(t),pt=f(e),$=n(e,"P",{});var A=r($);yl=l(A,"Note that passing "),qo=n(A,"CODE",{});var Ts=r(qo);bl=l(Ts,"allow_regex"),Ts.forEach(t),El=l(A," or "),Oo=n(A,"CODE",{});var Is=r(Oo);$l=l(Is,"ignore_regex"),Is.forEach(t),xl=l(A," does "),Do=n(A,"STRONG",{});var Fs=r(Do);jl=l(Fs,"not"),Fs.forEach(t),kl=l(A,` prevent
`),Co=n(A,"CODE",{});var Bs=r(Co);ql=l(Bs,"snapshot_download"),Bs.forEach(t),Ol=l(A,` from re-downloading the entire model repository if an ignored
file is changed.`),A.forEach(t),this.h()},h(){p(O,"name","hf:doc:metadata"),p(O,"content",JSON.stringify(Qs)),p(B,"id","title:-how-to-download-files-from-the-hub"),p(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(B,"href","#title:-how-to-download-files-from-the-hub"),p(L,"class","relative group"),p(M,"id","how-to-integrate-downstream-utilities-in-your-library"),p(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(M,"href","#how-to-integrate-downstream-utilities-in-your-library"),p(U,"class","relative group"),p(J,"id","hfhuburl"),p(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(J,"href","#hfhuburl"),p(R,"class","relative group"),Ys(ve.src,Cl="/docs/assets/hub/repo.png")||p(ve,"src",Cl),p(ve,"alt","/docs/assets/hub/repo.png"),p(G,"id","cacheddownload"),p(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(G,"href","#cacheddownload"),p(T,"class","relative group"),p(Y,"id","snapshotdownload"),p(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Y,"href","#snapshotdownload"),p(I,"class","relative group"),p(pe,"href","https://docs.python.org/3/library/fnmatch.html"),p(pe,"rel","nofollow")},m(e,i){o(document.head,O),d(e,ge,i),d(e,Q,i),d(e,V,i),d(e,L,i),o(L,B),o(B,Oe),v(X,Oe,null),o(L,$t),o(L,De),o(De,xt),d(e,So,i),d(e,U,i),o(U,M),o(M,Ce),v(Z,Ce,null),o(U,jt),o(U,Pe),o(Pe,kt),d(e,Ao,i),d(e,W,i),o(W,qt),o(W,He),o(He,Ot),o(W,Dt),d(e,No,i),d(e,D,i),o(D,Se),o(Se,Ct),o(D,Pt),o(D,Ae),o(Ae,Ht),o(D,St),o(D,Ne),o(Ne,At),d(e,Lo,i),d(e,R,i),o(R,J),o(J,Le),v(ee,Le,null),o(R,Nt),o(R,Ue),o(Ue,Lt),d(e,Uo,i),d(e,C,i),o(C,Ut),o(C,Re),o(Re,Rt),o(C,Tt),o(C,Te),o(Te,It),o(C,Ft),d(e,Ro,i),d(e,me,i),o(me,ve),d(e,To,i),v(oe,e,i),d(e,Io,i),d(e,ye,i),o(ye,Bt),d(e,Fo,i),d(e,be,i),o(be,Mt),d(e,Bo,i),v(te,e,i),d(e,Mo,i),d(e,ae,i),o(ae,Ie),o(Ie,Wt),o(ae,Jt),d(e,Wo,i),v(le,e,i),d(e,Jo,i),d(e,P,i),o(P,Gt),o(P,Fe),o(Fe,Yt),o(P,zt),o(P,Be),o(Be,Kt),o(P,Qt),d(e,Go,i),v(se,e,i),d(e,Yo,i),d(e,T,i),o(T,G),o(G,Me),v(ne,Me,null),o(T,Vt),o(T,We),o(We,Xt),d(e,zo,i),d(e,k,i),o(k,Je),o(Je,Zt),o(k,ea),o(k,Ge),o(Ge,oa),o(k,ta),o(k,Ye),o(Ye,aa),o(k,la),d(e,Ko,i),d(e,H,i),o(H,sa),o(H,ze),o(ze,na),o(H,ra),o(H,Ke),o(Ke,ia),o(H,da),d(e,Qo,i),v(re,e,i),d(e,Vo,i),d(e,_,i),o(_,Qe),o(Qe,ha),o(_,fa),o(_,Ve),o(Ve,pa),o(_,ca),o(_,Xe),o(Xe,ua),o(_,_a),o(_,Ze),o(Ze,wa),o(_,ga),o(_,eo),o(eo,ma),o(_,va),o(_,oo),o(oo,ya),o(_,ba),d(e,Xo,i),v(ie,e,i),d(e,Zo,i),d(e,I,i),o(I,Y),o(Y,to),v(de,to,null),o(I,Ea),o(I,ao),o(ao,$a),d(e,et,i),d(e,F,i),o(F,lo),o(lo,xa),o(F,ja),o(F,so),o(so,ka),o(F,qa),d(e,ot,i),d(e,Ee,i),o(Ee,Oa),d(e,tt,i),v(he,e,i),d(e,at,i),d(e,q,i),o(q,no),o(no,Da),o(q,Ca),o(q,ro),o(ro,Pa),o(q,Ha),o(q,io),o(io,Sa),o(q,Aa),d(e,lt,i),v(fe,e,i),d(e,st,i),d(e,S,i),o(S,Na),o(S,ho),o(ho,La),o(S,Ua),o(S,fo),o(fo,Ra),o(S,Ta),d(e,nt,i),d(e,c,i),o(c,Ia),o(c,po),o(po,Fa),o(c,Ba),o(c,co),o(co,Ma),o(c,Wa),o(c,uo),o(uo,Ja),o(c,Ga),o(c,_o),o(_o,Ya),o(c,za),o(c,wo),o(wo,Ka),o(c,Qa),o(c,go),o(go,Va),o(c,Xa),o(c,mo),o(mo,Za),o(c,el),o(c,pe),o(pe,vo),o(vo,ol),o(c,tl),d(e,rt,i),d(e,z,i),o(z,al),o(z,yo),o(yo,ll),o(z,sl),d(e,it,i),v(ce,e,i),d(e,dt,i),d(e,w,i),o(w,nl),o(w,bo),o(bo,rl),o(w,il),o(w,Eo),o(Eo,dl),o(w,hl),o(w,$o),o($o,fl),o(w,pl),o(w,xo),o(xo,cl),o(w,ul),o(w,jo),o(jo,_l),o(w,wl),d(e,ht,i),v(ue,e,i),d(e,ft,i),d(e,K,i),o(K,gl),o(K,ko),o(ko,ml),o(K,vl),d(e,pt,i),d(e,$,i),o($,yl),o($,qo),o(qo,bl),o($,El),o($,Oo),o(Oo,$l),o($,xl),o($,Do),o(Do,jl),o($,kl),o($,Co),o(Co,ql),o($,Ol),ct=!0},p:zs,i(e){ct||(y(X.$$.fragment,e),y(Z.$$.fragment,e),y(ee.$$.fragment,e),y(oe.$$.fragment,e),y(te.$$.fragment,e),y(le.$$.fragment,e),y(se.$$.fragment,e),y(ne.$$.fragment,e),y(re.$$.fragment,e),y(ie.$$.fragment,e),y(de.$$.fragment,e),y(he.$$.fragment,e),y(fe.$$.fragment,e),y(ce.$$.fragment,e),y(ue.$$.fragment,e),ct=!0)},o(e){b(X.$$.fragment,e),b(Z.$$.fragment,e),b(ee.$$.fragment,e),b(oe.$$.fragment,e),b(te.$$.fragment,e),b(le.$$.fragment,e),b(se.$$.fragment,e),b(ne.$$.fragment,e),b(re.$$.fragment,e),b(ie.$$.fragment,e),b(de.$$.fragment,e),b(he.$$.fragment,e),b(fe.$$.fragment,e),b(ce.$$.fragment,e),b(ue.$$.fragment,e),ct=!1},d(e){t(O),e&&t(ge),e&&t(Q),e&&t(V),e&&t(L),E(X),e&&t(So),e&&t(U),E(Z),e&&t(Ao),e&&t(W),e&&t(No),e&&t(D),e&&t(Lo),e&&t(R),E(ee),e&&t(Uo),e&&t(C),e&&t(Ro),e&&t(me),e&&t(To),E(oe,e),e&&t(Io),e&&t(ye),e&&t(Fo),e&&t(be),e&&t(Bo),E(te,e),e&&t(Mo),e&&t(ae),e&&t(Wo),E(le,e),e&&t(Jo),e&&t(P),e&&t(Go),E(se,e),e&&t(Yo),e&&t(T),E(ne),e&&t(zo),e&&t(k),e&&t(Ko),e&&t(H),e&&t(Qo),E(re,e),e&&t(Vo),e&&t(_),e&&t(Xo),E(ie,e),e&&t(Zo),e&&t(I),E(de),e&&t(et),e&&t(F),e&&t(ot),e&&t(Ee),e&&t(tt),E(he,e),e&&t(at),e&&t(q),e&&t(lt),E(fe,e),e&&t(st),e&&t(S),e&&t(nt),e&&t(c),e&&t(rt),e&&t(z),e&&t(it),E(ce,e),e&&t(dt),e&&t(w),e&&t(ht),E(ue,e),e&&t(ft),e&&t(K),e&&t(pt),e&&t($)}}}const Qs={local:"how-to-integrate-downstream-utilities-in-your-library",sections:[{local:"hfhuburl",title:"hf_hub_url"},{local:"cacheddownload",title:"cached_download"},{local:"snapshotdownload",title:"snapshot_download"}],title:"How to integrate downstream utilities in your library"};function Vs(Et,O,ge){let{fw:Q}=O;return Et.$$set=V=>{"fw"in V&&ge(0,Q=V.fw)},[Q]}class on extends Ms{constructor(O){super();Ws(this,O,Vs,Ks,Js,{fw:0})}}export{on as default,Qs as metadata};
