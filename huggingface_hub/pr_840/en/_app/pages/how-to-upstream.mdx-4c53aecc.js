import{S as ps,i as ms,s as us,e as l,k as c,w as g,t as s,M as fs,c as r,d as o,m as p,a as n,x as w,h as a,b as m,F as t,g as h,y,L as ds,q as v,o as $,B as b,v as _s}from"../chunks/vendor-d3924577.js";import{I as gt}from"../chunks/IconCopyLink-f94c3d80.js";import{C as se}from"../chunks/CodeBlock-ff545b14.js";function gs(So){let k,Ae,j,P,he,T,wt,ce,yt,De,S,vt,pe,$t,bt,Fe,E,N,Et,me,kt,jt,xt,M,qt,ue,Ct,Pt,St,U,Ht,B,Ot,Lt,Ge,x,H,fe,R,At,de,Dt,Ie,f,Ft,_e,Gt,It,ge,Tt,Nt,we,Mt,Ut,Te,d,Y,Bt,ye,Rt,Yt,Wt,W,zt,ve,Jt,Kt,Qt,$e,Vt,Xt,z,Zt,be,eo,to,Ne,J,Me,ae,oo,Ue,K,Be,O,so,Ee,ao,lo,Re,Q,Ye,L,ro,ke,no,io,We,V,ze,A,ho,je,co,po,Je,X,Ke,q,D,xe,Z,mo,qe,uo,Qe,u,fo,le,_o,go,Ce,wo,yo,Pe,vo,$o,Se,bo,Eo,He,ko,jo,Ve,ee,Xe,C,F,Oe,te,xo,Le,qo,Ze,re,Co,et,oe,tt,ne,Po,ot;return T=new gt({}),R=new gt({}),J=new se({props:{code:`with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),K=new se({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),Q=new se({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),V=new se({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status
<span class="hljs-comment"># -&gt; -1 indicates the push is ongoing.</span>
<span class="hljs-comment"># -&gt; 0 indicates the push has completed successfully.</span>
<span class="hljs-comment"># -&gt; Non-zero code indicates the error code if there was an error.</span>`}}),X=new se({props:{code:`# Inspect an error.
>>> last_command.stderr

# Check whether a push is completed or ongoing.
>>> last_command.is_done

# Check whether a push command has errored.
>>> last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),Z=new gt({}),ee=new se({props:{code:`repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),te=new gt({}),oe=new se({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),{c(){k=l("meta"),Ae=c(),j=l("h1"),P=l("a"),he=l("span"),g(T.$$.fragment),wt=c(),ce=l("span"),yt=s("How to upload files to the Hub"),De=c(),S=l("p"),vt=s("Sharing your files and work is a very important aspect of the Hub. The "),pe=l("code"),$t=s("huggingface_hub"),bt=s(" uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library so it is more convenient for your users to interact with the Hub. This guide will show you how to:"),Fe=c(),E=l("ul"),N=l("li"),Et=s("Push files with a "),me=l("code"),kt=s("commit"),jt=s(" context manager."),xt=c(),M=l("li"),qt=s("Push files with the "),ue=l("code"),Ct=s("push_to_hub"),Pt=s(" function."),St=c(),U=l("li"),Ht=s("Upload very large files with "),B=l("a"),Ot=s("Git LFS"),Lt=s("."),Ge=c(),x=l("h2"),H=l("a"),fe=l("span"),g(R.$$.fragment),At=c(),de=l("span"),Dt=s("commit context manager"),Ie=c(),f=l("p"),Ft=s("The "),_e=l("code"),Gt=s("commit"),It=s(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),ge=l("code"),Tt=s("git-lfs"),Nt=s(" automatically tracks any file larger than 10MB. In the following example, the "),we=l("code"),Mt=s("commit"),Ut=s(" context manager:"),Te=c(),d=l("ol"),Y=l("li"),Bt=s("Pulls from the "),ye=l("code"),Rt=s("text-files"),Yt=s(" repository."),Wt=c(),W=l("li"),zt=s("Adds a change made to "),ve=l("code"),Jt=s("file.txt"),Kt=s("."),Qt=c(),$e=l("li"),Vt=s("Commits the change."),Xt=c(),z=l("li"),Zt=s("Pushes the change to the "),be=l("code"),eo=s("text-files"),to=s(" repository."),Ne=c(),g(J.$$.fragment),Me=c(),ae=l("p"),oo=s("Here is another example of how to save and upload a file to a repository:"),Ue=c(),g(K.$$.fragment),Be=c(),O=l("p"),so=s("Set "),Ee=l("code"),ao=s("blocking=False"),lo=s(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),Re=c(),g(Q.$$.fragment),Ye=c(),L=l("p"),ro=s("You can check the status of your push with the "),ke=l("code"),no=s("command_queue"),io=s(" method:"),We=c(),g(V.$$.fragment),ze=c(),A=l("p"),ho=s("When "),je=l("code"),co=s("blocking=False"),po=s(", commands are tracked, and your script will only exit when all pushes are completed even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Je=c(),g(X.$$.fragment),Ke=c(),q=l("h2"),D=l("a"),xe=l("span"),g(Z.$$.fragment),mo=c(),qe=l("span"),uo=s("push_to_hub"),Qe=c(),u=l("p"),fo=s("The "),le=l("a"),_o=s("Repository"),go=s(" class also has a "),Ce=l("code"),wo=s("push_to_hub"),yo=s(" function to add files, make a commit, and push them to a repository. Unlike the "),Pe=l("code"),vo=s("commit"),$o=s(" context manager, "),Se=l("code"),bo=s("push_to_hub"),Eo=s(" requires you to pull from a repository first, save the files, and then call "),He=l("code"),ko=s("push_to_hub"),jo=s("."),Ve=c(),g(ee.$$.fragment),Xe=c(),C=l("h2"),F=l("a"),Oe=l("span"),g(te.$$.fragment),xo=c(),Le=l("span"),qo=s("Upload with Git LFS"),Ze=c(),re=l("p"),Co=s("For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),et=c(),g(oe.$$.fragment),tt=c(),ne=l("p"),Po=s("You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),this.h()},l(e){const i=fs('[data-svelte="svelte-1phssyn"]',document.head);k=r(i,"META",{name:!0,content:!0}),i.forEach(o),Ae=p(e),j=r(e,"H1",{class:!0});var st=n(j);P=r(st,"A",{id:!0,class:!0,href:!0});var Ho=n(P);he=r(Ho,"SPAN",{});var Oo=n(he);w(T.$$.fragment,Oo),Oo.forEach(o),Ho.forEach(o),wt=p(st),ce=r(st,"SPAN",{});var Lo=n(ce);yt=a(Lo,"How to upload files to the Hub"),Lo.forEach(o),st.forEach(o),De=p(e),S=r(e,"P",{});var at=n(S);vt=a(at,"Sharing your files and work is a very important aspect of the Hub. The "),pe=r(at,"CODE",{});var Ao=n(pe);$t=a(Ao,"huggingface_hub"),Ao.forEach(o),bt=a(at," uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library so it is more convenient for your users to interact with the Hub. This guide will show you how to:"),at.forEach(o),Fe=p(e),E=r(e,"UL",{});var ie=n(E);N=r(ie,"LI",{});var lt=n(N);Et=a(lt,"Push files with a "),me=r(lt,"CODE",{});var Do=n(me);kt=a(Do,"commit"),Do.forEach(o),jt=a(lt," context manager."),lt.forEach(o),xt=p(ie),M=r(ie,"LI",{});var rt=n(M);qt=a(rt,"Push files with the "),ue=r(rt,"CODE",{});var Fo=n(ue);Ct=a(Fo,"push_to_hub"),Fo.forEach(o),Pt=a(rt," function."),rt.forEach(o),St=p(ie),U=r(ie,"LI",{});var nt=n(U);Ht=a(nt,"Upload very large files with "),B=r(nt,"A",{href:!0,rel:!0});var Go=n(B);Ot=a(Go,"Git LFS"),Go.forEach(o),Lt=a(nt,"."),nt.forEach(o),ie.forEach(o),Ge=p(e),x=r(e,"H2",{class:!0});var it=n(x);H=r(it,"A",{id:!0,class:!0,href:!0});var Io=n(H);fe=r(Io,"SPAN",{});var To=n(fe);w(R.$$.fragment,To),To.forEach(o),Io.forEach(o),At=p(it),de=r(it,"SPAN",{});var No=n(de);Dt=a(No,"commit context manager"),No.forEach(o),it.forEach(o),Ie=p(e),f=r(e,"P",{});var G=n(f);Ft=a(G,"The "),_e=r(G,"CODE",{});var Mo=n(_e);Gt=a(Mo,"commit"),Mo.forEach(o),It=a(G," context manager handles four of the most common Git commands: pull, add, commit, and push. "),ge=r(G,"CODE",{});var Uo=n(ge);Tt=a(Uo,"git-lfs"),Uo.forEach(o),Nt=a(G," automatically tracks any file larger than 10MB. In the following example, the "),we=r(G,"CODE",{});var Bo=n(we);Mt=a(Bo,"commit"),Bo.forEach(o),Ut=a(G," context manager:"),G.forEach(o),Te=p(e),d=r(e,"OL",{});var I=n(d);Y=r(I,"LI",{});var ht=n(Y);Bt=a(ht,"Pulls from the "),ye=r(ht,"CODE",{});var Ro=n(ye);Rt=a(Ro,"text-files"),Ro.forEach(o),Yt=a(ht," repository."),ht.forEach(o),Wt=p(I),W=r(I,"LI",{});var ct=n(W);zt=a(ct,"Adds a change made to "),ve=r(ct,"CODE",{});var Yo=n(ve);Jt=a(Yo,"file.txt"),Yo.forEach(o),Kt=a(ct,"."),ct.forEach(o),Qt=p(I),$e=r(I,"LI",{});var Wo=n($e);Vt=a(Wo,"Commits the change."),Wo.forEach(o),Xt=p(I),z=r(I,"LI",{});var pt=n(z);Zt=a(pt,"Pushes the change to the "),be=r(pt,"CODE",{});var zo=n(be);eo=a(zo,"text-files"),zo.forEach(o),to=a(pt," repository."),pt.forEach(o),I.forEach(o),Ne=p(e),w(J.$$.fragment,e),Me=p(e),ae=r(e,"P",{});var Jo=n(ae);oo=a(Jo,"Here is another example of how to save and upload a file to a repository:"),Jo.forEach(o),Ue=p(e),w(K.$$.fragment,e),Be=p(e),O=r(e,"P",{});var mt=n(O);so=a(mt,"Set "),Ee=r(mt,"CODE",{});var Ko=n(Ee);ao=a(Ko,"blocking=False"),Ko.forEach(o),lo=a(mt," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),mt.forEach(o),Re=p(e),w(Q.$$.fragment,e),Ye=p(e),L=r(e,"P",{});var ut=n(L);ro=a(ut,"You can check the status of your push with the "),ke=r(ut,"CODE",{});var Qo=n(ke);no=a(Qo,"command_queue"),Qo.forEach(o),io=a(ut," method:"),ut.forEach(o),We=p(e),w(V.$$.fragment,e),ze=p(e),A=r(e,"P",{});var ft=n(A);ho=a(ft,"When "),je=r(ft,"CODE",{});var Vo=n(je);co=a(Vo,"blocking=False"),Vo.forEach(o),po=a(ft,", commands are tracked, and your script will only exit when all pushes are completed even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),ft.forEach(o),Je=p(e),w(X.$$.fragment,e),Ke=p(e),q=r(e,"H2",{class:!0});var dt=n(q);D=r(dt,"A",{id:!0,class:!0,href:!0});var Xo=n(D);xe=r(Xo,"SPAN",{});var Zo=n(xe);w(Z.$$.fragment,Zo),Zo.forEach(o),Xo.forEach(o),mo=p(dt),qe=r(dt,"SPAN",{});var es=n(qe);uo=a(es,"push_to_hub"),es.forEach(o),dt.forEach(o),Qe=p(e),u=r(e,"P",{});var _=n(u);fo=a(_,"The "),le=r(_,"A",{href:!0});var ts=n(le);_o=a(ts,"Repository"),ts.forEach(o),go=a(_," class also has a "),Ce=r(_,"CODE",{});var os=n(Ce);wo=a(os,"push_to_hub"),os.forEach(o),yo=a(_," function to add files, make a commit, and push them to a repository. Unlike the "),Pe=r(_,"CODE",{});var ss=n(Pe);vo=a(ss,"commit"),ss.forEach(o),$o=a(_," context manager, "),Se=r(_,"CODE",{});var as=n(Se);bo=a(as,"push_to_hub"),as.forEach(o),Eo=a(_," requires you to pull from a repository first, save the files, and then call "),He=r(_,"CODE",{});var ls=n(He);ko=a(ls,"push_to_hub"),ls.forEach(o),jo=a(_,"."),_.forEach(o),Ve=p(e),w(ee.$$.fragment,e),Xe=p(e),C=r(e,"H2",{class:!0});var _t=n(C);F=r(_t,"A",{id:!0,class:!0,href:!0});var rs=n(F);Oe=r(rs,"SPAN",{});var ns=n(Oe);w(te.$$.fragment,ns),ns.forEach(o),rs.forEach(o),xo=p(_t),Le=r(_t,"SPAN",{});var is=n(Le);qo=a(is,"Upload with Git LFS"),is.forEach(o),_t.forEach(o),Ze=p(e),re=r(e,"P",{});var hs=n(re);Co=a(hs,"For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),hs.forEach(o),et=p(e),w(oe.$$.fragment,e),tt=p(e),ne=r(e,"P",{});var cs=n(ne);Po=a(cs,"You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),cs.forEach(o),this.h()},h(){m(k,"name","hf:doc:metadata"),m(k,"content",JSON.stringify(ws)),m(P,"id","how-to-upload-files-to-the-hub"),m(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(P,"href","#how-to-upload-files-to-the-hub"),m(j,"class","relative group"),m(B,"href","https://git-lfs.github.com/"),m(B,"rel","nofollow"),m(H,"id","commit-context-manager"),m(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(H,"href","#commit-context-manager"),m(x,"class","relative group"),m(D,"id","pushtohub"),m(D,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(D,"href","#pushtohub"),m(q,"class","relative group"),m(le,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),m(F,"id","upload-with-git-lfs"),m(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(F,"href","#upload-with-git-lfs"),m(C,"class","relative group")},m(e,i){t(document.head,k),h(e,Ae,i),h(e,j,i),t(j,P),t(P,he),y(T,he,null),t(j,wt),t(j,ce),t(ce,yt),h(e,De,i),h(e,S,i),t(S,vt),t(S,pe),t(pe,$t),t(S,bt),h(e,Fe,i),h(e,E,i),t(E,N),t(N,Et),t(N,me),t(me,kt),t(N,jt),t(E,xt),t(E,M),t(M,qt),t(M,ue),t(ue,Ct),t(M,Pt),t(E,St),t(E,U),t(U,Ht),t(U,B),t(B,Ot),t(U,Lt),h(e,Ge,i),h(e,x,i),t(x,H),t(H,fe),y(R,fe,null),t(x,At),t(x,de),t(de,Dt),h(e,Ie,i),h(e,f,i),t(f,Ft),t(f,_e),t(_e,Gt),t(f,It),t(f,ge),t(ge,Tt),t(f,Nt),t(f,we),t(we,Mt),t(f,Ut),h(e,Te,i),h(e,d,i),t(d,Y),t(Y,Bt),t(Y,ye),t(ye,Rt),t(Y,Yt),t(d,Wt),t(d,W),t(W,zt),t(W,ve),t(ve,Jt),t(W,Kt),t(d,Qt),t(d,$e),t($e,Vt),t(d,Xt),t(d,z),t(z,Zt),t(z,be),t(be,eo),t(z,to),h(e,Ne,i),y(J,e,i),h(e,Me,i),h(e,ae,i),t(ae,oo),h(e,Ue,i),y(K,e,i),h(e,Be,i),h(e,O,i),t(O,so),t(O,Ee),t(Ee,ao),t(O,lo),h(e,Re,i),y(Q,e,i),h(e,Ye,i),h(e,L,i),t(L,ro),t(L,ke),t(ke,no),t(L,io),h(e,We,i),y(V,e,i),h(e,ze,i),h(e,A,i),t(A,ho),t(A,je),t(je,co),t(A,po),h(e,Je,i),y(X,e,i),h(e,Ke,i),h(e,q,i),t(q,D),t(D,xe),y(Z,xe,null),t(q,mo),t(q,qe),t(qe,uo),h(e,Qe,i),h(e,u,i),t(u,fo),t(u,le),t(le,_o),t(u,go),t(u,Ce),t(Ce,wo),t(u,yo),t(u,Pe),t(Pe,vo),t(u,$o),t(u,Se),t(Se,bo),t(u,Eo),t(u,He),t(He,ko),t(u,jo),h(e,Ve,i),y(ee,e,i),h(e,Xe,i),h(e,C,i),t(C,F),t(F,Oe),y(te,Oe,null),t(C,xo),t(C,Le),t(Le,qo),h(e,Ze,i),h(e,re,i),t(re,Co),h(e,et,i),y(oe,e,i),h(e,tt,i),h(e,ne,i),t(ne,Po),ot=!0},p:ds,i(e){ot||(v(T.$$.fragment,e),v(R.$$.fragment,e),v(J.$$.fragment,e),v(K.$$.fragment,e),v(Q.$$.fragment,e),v(V.$$.fragment,e),v(X.$$.fragment,e),v(Z.$$.fragment,e),v(ee.$$.fragment,e),v(te.$$.fragment,e),v(oe.$$.fragment,e),ot=!0)},o(e){$(T.$$.fragment,e),$(R.$$.fragment,e),$(J.$$.fragment,e),$(K.$$.fragment,e),$(Q.$$.fragment,e),$(V.$$.fragment,e),$(X.$$.fragment,e),$(Z.$$.fragment,e),$(ee.$$.fragment,e),$(te.$$.fragment,e),$(oe.$$.fragment,e),ot=!1},d(e){o(k),e&&o(Ae),e&&o(j),b(T),e&&o(De),e&&o(S),e&&o(Fe),e&&o(E),e&&o(Ge),e&&o(x),b(R),e&&o(Ie),e&&o(f),e&&o(Te),e&&o(d),e&&o(Ne),b(J,e),e&&o(Me),e&&o(ae),e&&o(Ue),b(K,e),e&&o(Be),e&&o(O),e&&o(Re),b(Q,e),e&&o(Ye),e&&o(L),e&&o(We),b(V,e),e&&o(ze),e&&o(A),e&&o(Je),b(X,e),e&&o(Ke),e&&o(q),b(Z),e&&o(Qe),e&&o(u),e&&o(Ve),b(ee,e),e&&o(Xe),e&&o(C),b(te),e&&o(Ze),e&&o(re),e&&o(et),b(oe,e),e&&o(tt),e&&o(ne)}}}const ws={local:"how-to-upload-files-to-the-hub",sections:[{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"},{local:"upload-with-git-lfs",title:"Upload with Git LFS"}],title:"How to upload files to the Hub"};function ys(So){return _s(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Es extends ps{constructor(k){super();ms(this,k,ys,gs,us,{})}}export{Es as default,ws as metadata};
