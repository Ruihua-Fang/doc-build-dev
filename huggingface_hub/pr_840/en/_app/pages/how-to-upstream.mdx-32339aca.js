import{S as ma,i as da,s as ga,e as l,k as p,w as m,t as s,M as _a,c as r,d as o,m as c,a as i,x as d,h as a,b as u,F as t,g as h,y as g,L as ya,q as _,o as y,B as w,v as wa}from"../chunks/vendor-d3924577.js";import{I as Jt}from"../chunks/IconCopyLink-f94c3d80.js";import{C as k}from"../chunks/CodeBlock-ff545b14.js";function va(xs){let x,et,q,L,qe,B,zt,Pe,Kt,tt,O,Qt,Ce,Vt,Xt,ot,E,Y,Zt,He,eo,to,oo,W,so,me,ao,lo,ro,J,io,z,no,ho,st,de,po,at,A,K,Se,co,uo,Q,fo,P,V,mo,Le,go,_o,yo,X,wo,ge,Oe,vo,$o,lt,C,F,Ae,Z,bo,Fe,ko,rt,v,Eo,De,jo,xo,Ge,qo,Po,Ie,Co,Ho,it,$,ee,So,Te,Lo,Oo,Ao,te,Fo,Ne,Do,Go,Io,Re,To,No,oe,Ro,Ue,Uo,Mo,nt,se,ht,_e,Bo,pt,ae,ct,D,Yo,Me,Wo,Jo,ut,le,ft,G,zo,Be,Ko,Qo,mt,re,dt,I,Vo,Ye,Xo,Zo,gt,ie,_t,H,T,We,ne,es,Je,ts,yt,f,os,ye,ss,as,we,ls,rs,ze,is,ns,ve,hs,ps,$e,cs,us,wt,he,vt,j,fs,Ke,ms,ds,Qe,gs,_s,$t,pe,bt,N,ys,Ve,ws,vs,kt,ce,Et,S,R,Xe,ue,$s,Ze,bs,jt,be,ks,xt,fe,qt,ke,Es,Pt;return B=new Jt({}),Q=new k({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),X=new k({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),Z=new Jt({}),se=new k({props:{code:`with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),ae=new k({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),le=new k({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),re=new k({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status
<span class="hljs-comment"># -&gt; -1 indicates the push is ongoing.</span>
<span class="hljs-comment"># -&gt; 0 indicates the push has completed successfully.</span>
<span class="hljs-comment"># -&gt; Non-zero code indicates the error code if there was an error.</span>`}}),ie=new k({props:{code:`# Inspect an error.
>>> last_command.stderr

# Check whether a push is completed or ongoing.
>>> last_command.is_done

# Check whether a push command has errored.
>>> last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),ne=new Jt({}),he=new k({props:{code:`repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),pe=new k({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),ce=new k({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),ue=new Jt({}),fe=new k({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),{c(){x=l("meta"),et=p(),q=l("h1"),L=l("a"),qe=l("span"),m(B.$$.fragment),zt=p(),Pe=l("span"),Kt=s("Upload files to the Hub"),tt=p(),O=l("p"),Qt=s("Sharing your files and work is a very important aspect of the Hub. The "),Ce=l("code"),Vt=s("huggingface_hub"),Xt=s(" uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library so it is more convenient for your users to interact with the Hub. This guide will show you how to:"),ot=p(),E=l("ul"),Y=l("li"),Zt=s("Push files with a "),He=l("code"),eo=s("commit"),to=s(" context manager."),oo=p(),W=l("li"),so=s("Push files with the "),me=l("a"),ao=s("push_to_hub()"),lo=s(" function."),ro=p(),J=l("li"),io=s("Upload very large files with "),z=l("a"),no=s("Git LFS"),ho=s("."),st=p(),de=l("p"),po=s("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),at=p(),A=l("ol"),K=l("li"),Se=l("p"),co=s("Log in to your Hugging Face account with the following command:"),uo=p(),m(Q.$$.fragment),fo=p(),P=l("li"),V=l("p"),mo=s("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Le=l("code"),go=s("notebook_login()"),_o=s(":"),yo=p(),m(X.$$.fragment),wo=p(),ge=l("p"),Oe=l("code"),vo=s("notebook_login()"),$o=s(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),lt=p(),C=l("h2"),F=l("a"),Ae=l("span"),m(Z.$$.fragment),bo=p(),Fe=l("span"),ko=s("commit context manager"),rt=p(),v=l("p"),Eo=s("The "),De=l("code"),jo=s("commit"),xo=s(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),Ge=l("code"),qo=s("git-lfs"),Po=s(" automatically tracks any file larger than 10MB. In the following example, the "),Ie=l("code"),Co=s("commit"),Ho=s(" context manager:"),it=p(),$=l("ol"),ee=l("li"),So=s("Pulls from the "),Te=l("code"),Lo=s("text-files"),Oo=s(" repository."),Ao=p(),te=l("li"),Fo=s("Adds a change made to "),Ne=l("code"),Do=s("file.txt"),Go=s("."),Io=p(),Re=l("li"),To=s("Commits the change."),No=p(),oe=l("li"),Ro=s("Pushes the change to the "),Ue=l("code"),Uo=s("text-files"),Mo=s(" repository."),nt=p(),m(se.$$.fragment),ht=p(),_e=l("p"),Bo=s("Here is another example of how to save and upload a file to a repository:"),pt=p(),m(ae.$$.fragment),ct=p(),D=l("p"),Yo=s("Set "),Me=l("code"),Wo=s("blocking=False"),Jo=s(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),ut=p(),m(le.$$.fragment),ft=p(),G=l("p"),zo=s("You can check the status of your push with the "),Be=l("code"),Ko=s("command_queue"),Qo=s(" method:"),mt=p(),m(re.$$.fragment),dt=p(),I=l("p"),Vo=s("When "),Ye=l("code"),Xo=s("blocking=False"),Zo=s(", commands are tracked, and your script will only exit when all pushes are completed even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),gt=p(),m(ie.$$.fragment),_t=p(),H=l("h2"),T=l("a"),We=l("span"),m(ne.$$.fragment),es=p(),Je=l("span"),ts=s("push_to_hub"),yt=p(),f=l("p"),os=s("The "),ye=l("a"),ss=s("Repository"),as=s(" class also has a "),we=l("a"),ls=s("push_to_hub()"),rs=s(" function to add files, make a commit, and push them to a repository. Unlike the "),ze=l("code"),is=s("commit"),ns=s(" context manager, "),ve=l("a"),hs=s("push_to_hub()"),ps=s(" requires you to pull from a repository first, save the files, and then call "),$e=l("a"),cs=s("push_to_hub()"),us=s("."),wt=p(),m(he.$$.fragment),vt=p(),j=l("p"),fs=s("However, if you aren\u2019t ready to push a file yet, you can still use "),Ke=l("code"),ms=s("git_add"),ds=s(" and "),Qe=l("code"),gs=s("git_commit"),_s=s(" to add and commit your file:"),$t=p(),m(pe.$$.fragment),bt=p(),N=l("p"),ys=s("Once you\u2019re ready, you can push your file to your repository with "),Ve=l("code"),ws=s("git_push"),vs=s(":"),kt=p(),m(ce.$$.fragment),Et=p(),S=l("h2"),R=l("a"),Xe=l("span"),m(ue.$$.fragment),$s=p(),Ze=l("span"),bs=s("Upload with Git LFS"),jt=p(),be=l("p"),ks=s("For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),xt=p(),m(fe.$$.fragment),qt=p(),ke=l("p"),Es=s("You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),this.h()},l(e){const n=_a('[data-svelte="svelte-1phssyn"]',document.head);x=r(n,"META",{name:!0,content:!0}),n.forEach(o),et=c(e),q=r(e,"H1",{class:!0});var Ct=i(q);L=r(Ct,"A",{id:!0,class:!0,href:!0});var qs=i(L);qe=r(qs,"SPAN",{});var Ps=i(qe);d(B.$$.fragment,Ps),Ps.forEach(o),qs.forEach(o),zt=c(Ct),Pe=r(Ct,"SPAN",{});var Cs=i(Pe);Kt=a(Cs,"Upload files to the Hub"),Cs.forEach(o),Ct.forEach(o),tt=c(e),O=r(e,"P",{});var Ht=i(O);Qt=a(Ht,"Sharing your files and work is a very important aspect of the Hub. The "),Ce=r(Ht,"CODE",{});var Hs=i(Ce);Vt=a(Hs,"huggingface_hub"),Hs.forEach(o),Xt=a(Ht," uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library so it is more convenient for your users to interact with the Hub. This guide will show you how to:"),Ht.forEach(o),ot=c(e),E=r(e,"UL",{});var Ee=i(E);Y=r(Ee,"LI",{});var St=i(Y);Zt=a(St,"Push files with a "),He=r(St,"CODE",{});var Ss=i(He);eo=a(Ss,"commit"),Ss.forEach(o),to=a(St," context manager."),St.forEach(o),oo=c(Ee),W=r(Ee,"LI",{});var Lt=i(W);so=a(Lt,"Push files with the "),me=r(Lt,"A",{href:!0});var Ls=i(me);ao=a(Ls,"push_to_hub()"),Ls.forEach(o),lo=a(Lt," function."),Lt.forEach(o),ro=c(Ee),J=r(Ee,"LI",{});var Ot=i(J);io=a(Ot,"Upload very large files with "),z=r(Ot,"A",{href:!0,rel:!0});var Os=i(z);no=a(Os,"Git LFS"),Os.forEach(o),ho=a(Ot,"."),Ot.forEach(o),Ee.forEach(o),st=c(e),de=r(e,"P",{});var As=i(de);po=a(As,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),As.forEach(o),at=c(e),A=r(e,"OL",{});var At=i(A);K=r(At,"LI",{});var Ft=i(K);Se=r(Ft,"P",{});var Fs=i(Se);co=a(Fs,"Log in to your Hugging Face account with the following command:"),Fs.forEach(o),uo=c(Ft),d(Q.$$.fragment,Ft),Ft.forEach(o),fo=c(At),P=r(At,"LI",{});var je=i(P);V=r(je,"P",{});var Dt=i(V);mo=a(Dt,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Le=r(Dt,"CODE",{});var Ds=i(Le);go=a(Ds,"notebook_login()"),Ds.forEach(o),_o=a(Dt,":"),Dt.forEach(o),yo=c(je),d(X.$$.fragment,je),wo=c(je),ge=r(je,"P",{});var js=i(ge);Oe=r(js,"CODE",{});var Gs=i(Oe);vo=a(Gs,"notebook_login()"),Gs.forEach(o),$o=a(js," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),js.forEach(o),je.forEach(o),At.forEach(o),lt=c(e),C=r(e,"H2",{class:!0});var Gt=i(C);F=r(Gt,"A",{id:!0,class:!0,href:!0});var Is=i(F);Ae=r(Is,"SPAN",{});var Ts=i(Ae);d(Z.$$.fragment,Ts),Ts.forEach(o),Is.forEach(o),bo=c(Gt),Fe=r(Gt,"SPAN",{});var Ns=i(Fe);ko=a(Ns,"commit context manager"),Ns.forEach(o),Gt.forEach(o),rt=c(e),v=r(e,"P",{});var U=i(v);Eo=a(U,"The "),De=r(U,"CODE",{});var Rs=i(De);jo=a(Rs,"commit"),Rs.forEach(o),xo=a(U," context manager handles four of the most common Git commands: pull, add, commit, and push. "),Ge=r(U,"CODE",{});var Us=i(Ge);qo=a(Us,"git-lfs"),Us.forEach(o),Po=a(U," automatically tracks any file larger than 10MB. In the following example, the "),Ie=r(U,"CODE",{});var Ms=i(Ie);Co=a(Ms,"commit"),Ms.forEach(o),Ho=a(U," context manager:"),U.forEach(o),it=c(e),$=r(e,"OL",{});var M=i($);ee=r(M,"LI",{});var It=i(ee);So=a(It,"Pulls from the "),Te=r(It,"CODE",{});var Bs=i(Te);Lo=a(Bs,"text-files"),Bs.forEach(o),Oo=a(It," repository."),It.forEach(o),Ao=c(M),te=r(M,"LI",{});var Tt=i(te);Fo=a(Tt,"Adds a change made to "),Ne=r(Tt,"CODE",{});var Ys=i(Ne);Do=a(Ys,"file.txt"),Ys.forEach(o),Go=a(Tt,"."),Tt.forEach(o),Io=c(M),Re=r(M,"LI",{});var Ws=i(Re);To=a(Ws,"Commits the change."),Ws.forEach(o),No=c(M),oe=r(M,"LI",{});var Nt=i(oe);Ro=a(Nt,"Pushes the change to the "),Ue=r(Nt,"CODE",{});var Js=i(Ue);Uo=a(Js,"text-files"),Js.forEach(o),Mo=a(Nt," repository."),Nt.forEach(o),M.forEach(o),nt=c(e),d(se.$$.fragment,e),ht=c(e),_e=r(e,"P",{});var zs=i(_e);Bo=a(zs,"Here is another example of how to save and upload a file to a repository:"),zs.forEach(o),pt=c(e),d(ae.$$.fragment,e),ct=c(e),D=r(e,"P",{});var Rt=i(D);Yo=a(Rt,"Set "),Me=r(Rt,"CODE",{});var Ks=i(Me);Wo=a(Ks,"blocking=False"),Ks.forEach(o),Jo=a(Rt," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),Rt.forEach(o),ut=c(e),d(le.$$.fragment,e),ft=c(e),G=r(e,"P",{});var Ut=i(G);zo=a(Ut,"You can check the status of your push with the "),Be=r(Ut,"CODE",{});var Qs=i(Be);Ko=a(Qs,"command_queue"),Qs.forEach(o),Qo=a(Ut," method:"),Ut.forEach(o),mt=c(e),d(re.$$.fragment,e),dt=c(e),I=r(e,"P",{});var Mt=i(I);Vo=a(Mt,"When "),Ye=r(Mt,"CODE",{});var Vs=i(Ye);Xo=a(Vs,"blocking=False"),Vs.forEach(o),Zo=a(Mt,", commands are tracked, and your script will only exit when all pushes are completed even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Mt.forEach(o),gt=c(e),d(ie.$$.fragment,e),_t=c(e),H=r(e,"H2",{class:!0});var Bt=i(H);T=r(Bt,"A",{id:!0,class:!0,href:!0});var Xs=i(T);We=r(Xs,"SPAN",{});var Zs=i(We);d(ne.$$.fragment,Zs),Zs.forEach(o),Xs.forEach(o),es=c(Bt),Je=r(Bt,"SPAN",{});var ea=i(Je);ts=a(ea,"push_to_hub"),ea.forEach(o),Bt.forEach(o),yt=c(e),f=r(e,"P",{});var b=i(f);os=a(b,"The "),ye=r(b,"A",{href:!0});var ta=i(ye);ss=a(ta,"Repository"),ta.forEach(o),as=a(b," class also has a "),we=r(b,"A",{href:!0});var oa=i(we);ls=a(oa,"push_to_hub()"),oa.forEach(o),rs=a(b," function to add files, make a commit, and push them to a repository. Unlike the "),ze=r(b,"CODE",{});var sa=i(ze);is=a(sa,"commit"),sa.forEach(o),ns=a(b," context manager, "),ve=r(b,"A",{href:!0});var aa=i(ve);hs=a(aa,"push_to_hub()"),aa.forEach(o),ps=a(b," requires you to pull from a repository first, save the files, and then call "),$e=r(b,"A",{href:!0});var la=i($e);cs=a(la,"push_to_hub()"),la.forEach(o),us=a(b,"."),b.forEach(o),wt=c(e),d(he.$$.fragment,e),vt=c(e),j=r(e,"P",{});var xe=i(j);fs=a(xe,"However, if you aren\u2019t ready to push a file yet, you can still use "),Ke=r(xe,"CODE",{});var ra=i(Ke);ms=a(ra,"git_add"),ra.forEach(o),ds=a(xe," and "),Qe=r(xe,"CODE",{});var ia=i(Qe);gs=a(ia,"git_commit"),ia.forEach(o),_s=a(xe," to add and commit your file:"),xe.forEach(o),$t=c(e),d(pe.$$.fragment,e),bt=c(e),N=r(e,"P",{});var Yt=i(N);ys=a(Yt,"Once you\u2019re ready, you can push your file to your repository with "),Ve=r(Yt,"CODE",{});var na=i(Ve);ws=a(na,"git_push"),na.forEach(o),vs=a(Yt,":"),Yt.forEach(o),kt=c(e),d(ce.$$.fragment,e),Et=c(e),S=r(e,"H2",{class:!0});var Wt=i(S);R=r(Wt,"A",{id:!0,class:!0,href:!0});var ha=i(R);Xe=r(ha,"SPAN",{});var pa=i(Xe);d(ue.$$.fragment,pa),pa.forEach(o),ha.forEach(o),$s=c(Wt),Ze=r(Wt,"SPAN",{});var ca=i(Ze);bs=a(ca,"Upload with Git LFS"),ca.forEach(o),Wt.forEach(o),jt=c(e),be=r(e,"P",{});var ua=i(be);ks=a(ua,"For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),ua.forEach(o),xt=c(e),d(fe.$$.fragment,e),qt=c(e),ke=r(e,"P",{});var fa=i(ke);Es=a(fa,"You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),fa.forEach(o),this.h()},h(){u(x,"name","hf:doc:metadata"),u(x,"content",JSON.stringify($a)),u(L,"id","upload-files-to-the-hub"),u(L,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(L,"href","#upload-files-to-the-hub"),u(q,"class","relative group"),u(me,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(z,"href","https://git-lfs.github.com/"),u(z,"rel","nofollow"),u(F,"id","commit-context-manager"),u(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(F,"href","#commit-context-manager"),u(C,"class","relative group"),u(T,"id","pushtohub"),u(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(T,"href","#pushtohub"),u(H,"class","relative group"),u(ye,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),u(we,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(ve,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u($e,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(R,"id","upload-with-git-lfs"),u(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(R,"href","#upload-with-git-lfs"),u(S,"class","relative group")},m(e,n){t(document.head,x),h(e,et,n),h(e,q,n),t(q,L),t(L,qe),g(B,qe,null),t(q,zt),t(q,Pe),t(Pe,Kt),h(e,tt,n),h(e,O,n),t(O,Qt),t(O,Ce),t(Ce,Vt),t(O,Xt),h(e,ot,n),h(e,E,n),t(E,Y),t(Y,Zt),t(Y,He),t(He,eo),t(Y,to),t(E,oo),t(E,W),t(W,so),t(W,me),t(me,ao),t(W,lo),t(E,ro),t(E,J),t(J,io),t(J,z),t(z,no),t(J,ho),h(e,st,n),h(e,de,n),t(de,po),h(e,at,n),h(e,A,n),t(A,K),t(K,Se),t(Se,co),t(K,uo),g(Q,K,null),t(A,fo),t(A,P),t(P,V),t(V,mo),t(V,Le),t(Le,go),t(V,_o),t(P,yo),g(X,P,null),t(P,wo),t(P,ge),t(ge,Oe),t(Oe,vo),t(ge,$o),h(e,lt,n),h(e,C,n),t(C,F),t(F,Ae),g(Z,Ae,null),t(C,bo),t(C,Fe),t(Fe,ko),h(e,rt,n),h(e,v,n),t(v,Eo),t(v,De),t(De,jo),t(v,xo),t(v,Ge),t(Ge,qo),t(v,Po),t(v,Ie),t(Ie,Co),t(v,Ho),h(e,it,n),h(e,$,n),t($,ee),t(ee,So),t(ee,Te),t(Te,Lo),t(ee,Oo),t($,Ao),t($,te),t(te,Fo),t(te,Ne),t(Ne,Do),t(te,Go),t($,Io),t($,Re),t(Re,To),t($,No),t($,oe),t(oe,Ro),t(oe,Ue),t(Ue,Uo),t(oe,Mo),h(e,nt,n),g(se,e,n),h(e,ht,n),h(e,_e,n),t(_e,Bo),h(e,pt,n),g(ae,e,n),h(e,ct,n),h(e,D,n),t(D,Yo),t(D,Me),t(Me,Wo),t(D,Jo),h(e,ut,n),g(le,e,n),h(e,ft,n),h(e,G,n),t(G,zo),t(G,Be),t(Be,Ko),t(G,Qo),h(e,mt,n),g(re,e,n),h(e,dt,n),h(e,I,n),t(I,Vo),t(I,Ye),t(Ye,Xo),t(I,Zo),h(e,gt,n),g(ie,e,n),h(e,_t,n),h(e,H,n),t(H,T),t(T,We),g(ne,We,null),t(H,es),t(H,Je),t(Je,ts),h(e,yt,n),h(e,f,n),t(f,os),t(f,ye),t(ye,ss),t(f,as),t(f,we),t(we,ls),t(f,rs),t(f,ze),t(ze,is),t(f,ns),t(f,ve),t(ve,hs),t(f,ps),t(f,$e),t($e,cs),t(f,us),h(e,wt,n),g(he,e,n),h(e,vt,n),h(e,j,n),t(j,fs),t(j,Ke),t(Ke,ms),t(j,ds),t(j,Qe),t(Qe,gs),t(j,_s),h(e,$t,n),g(pe,e,n),h(e,bt,n),h(e,N,n),t(N,ys),t(N,Ve),t(Ve,ws),t(N,vs),h(e,kt,n),g(ce,e,n),h(e,Et,n),h(e,S,n),t(S,R),t(R,Xe),g(ue,Xe,null),t(S,$s),t(S,Ze),t(Ze,bs),h(e,jt,n),h(e,be,n),t(be,ks),h(e,xt,n),g(fe,e,n),h(e,qt,n),h(e,ke,n),t(ke,Es),Pt=!0},p:ya,i(e){Pt||(_(B.$$.fragment,e),_(Q.$$.fragment,e),_(X.$$.fragment,e),_(Z.$$.fragment,e),_(se.$$.fragment,e),_(ae.$$.fragment,e),_(le.$$.fragment,e),_(re.$$.fragment,e),_(ie.$$.fragment,e),_(ne.$$.fragment,e),_(he.$$.fragment,e),_(pe.$$.fragment,e),_(ce.$$.fragment,e),_(ue.$$.fragment,e),_(fe.$$.fragment,e),Pt=!0)},o(e){y(B.$$.fragment,e),y(Q.$$.fragment,e),y(X.$$.fragment,e),y(Z.$$.fragment,e),y(se.$$.fragment,e),y(ae.$$.fragment,e),y(le.$$.fragment,e),y(re.$$.fragment,e),y(ie.$$.fragment,e),y(ne.$$.fragment,e),y(he.$$.fragment,e),y(pe.$$.fragment,e),y(ce.$$.fragment,e),y(ue.$$.fragment,e),y(fe.$$.fragment,e),Pt=!1},d(e){o(x),e&&o(et),e&&o(q),w(B),e&&o(tt),e&&o(O),e&&o(ot),e&&o(E),e&&o(st),e&&o(de),e&&o(at),e&&o(A),w(Q),w(X),e&&o(lt),e&&o(C),w(Z),e&&o(rt),e&&o(v),e&&o(it),e&&o($),e&&o(nt),w(se,e),e&&o(ht),e&&o(_e),e&&o(pt),w(ae,e),e&&o(ct),e&&o(D),e&&o(ut),w(le,e),e&&o(ft),e&&o(G),e&&o(mt),w(re,e),e&&o(dt),e&&o(I),e&&o(gt),w(ie,e),e&&o(_t),e&&o(H),w(ne),e&&o(yt),e&&o(f),e&&o(wt),w(he,e),e&&o(vt),e&&o(j),e&&o($t),w(pe,e),e&&o(bt),e&&o(N),e&&o(kt),w(ce,e),e&&o(Et),e&&o(S),w(ue),e&&o(jt),e&&o(be),e&&o(xt),w(fe,e),e&&o(qt),e&&o(ke)}}}const $a={local:"upload-files-to-the-hub",sections:[{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"},{local:"upload-with-git-lfs",title:"Upload with Git LFS"}],title:"Upload files to the Hub"};function ba(xs){return wa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class xa extends ma{constructor(x){super();da(this,x,ba,va,ga,{})}}export{xa as default,$a as metadata};
