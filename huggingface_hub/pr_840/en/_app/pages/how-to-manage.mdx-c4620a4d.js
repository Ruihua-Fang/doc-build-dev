import{S as rn,i as nn,s as pn,e as o,k as h,w as m,t as r,M as hn,c as s,d as a,m as c,a as l,x as u,h as i,b as f,N as cn,F as t,g as p,y as d,L as fn,q as g,o as _,B as v,v as mn}from"../chunks/vendor-d3924577.js";import{I as w}from"../chunks/IconCopyLink-f94c3d80.js";import{C as y}from"../chunks/CodeBlock-ff545b14.js";function un(Ar){let O,Ca,S,W,_t,ye,as,vt,os,Aa,K,$e,ss,yt,ls,rs,is,we,ns,$t,ps,hs,Da,N,Q,wt,be,cs,bt,fs,Ra,V,ms,Et,us,ds,Oa,b,kt,gs,_s,jt,vs,ys,qt,$s,ws,Pt,bs,Sa,L,X,Ct,Ee,Es,At,ks,Na,j,js,Dt,qs,Ps,Rt,Cs,As,La,Z,Ds,ke,Rs,Os,xa,st,lt,Dr,Ia,je,Ha,ee,Ss,Ot,Ns,Ls,Ta,qe,Ga,x,te,St,Pe,xs,Nt,Is,Ua,rt,Hs,Fa,Ce,Ma,I,ae,Lt,Ae,Ts,xt,Gs,za,q,Us,It,Fs,Ms,Ht,zs,Bs,Ba,De,Ya,H,oe,Tt,Re,Ys,Gt,Js,Ja,se,Ws,Ut,Ks,Qs,Wa,E,Vs,Ft,Xs,Zs,Mt,el,tl,zt,al,ol,Ka,Oe,Qa,le,sl,Bt,ll,rl,Va,Se,Xa,T,re,Yt,Ne,il,Jt,nl,Za,it,pl,eo,Le,to,G,ie,Wt,xe,hl,Kt,cl,ao,$,fl,Qt,ml,ul,Vt,dl,gl,Ie,_l,vl,Xt,yl,$l,oo,U,ne,Zt,He,wl,ea,bl,so,P,El,ta,kl,jl,aa,ql,Pl,lo,Te,ro,F,oa,Cl,Al,sa,Dl,Rl,io,Ge,no,C,Ol,la,Sl,Nl,ra,Ll,xl,po,Ue,ho,M,pe,ia,Fe,Il,na,Hl,co,he,Tl,pa,Gl,Ul,fo,Me,mo,z,ce,ha,ze,Fl,ca,Ml,uo,nt,zl,go,A,Be,fa,Bl,Yl,Ye,Jl,B,Je,Wl,ma,Kl,Ql,Vl,We,Xl,pt,ua,Zl,er,tr,Ke,Qe,ar,da,or,sr,lr,Ve,_o,D,rr,ga,ir,nr,_a,pr,hr,vo,Xe,yo,Y,fe,va,Ze,cr,ya,fr,$o,k,mr,$a,ur,dr,wa,gr,_r,ba,vr,yr,wo,et,bo,J,me,Ea,tt,$r,ka,wr,Eo,ue,br,ja,Er,kr,ko,at,jo,de,jr,qa,qr,Pr,qo,ot,Po;return ye=new w({}),be=new w({}),Ee=new w({}),je=new y({props:{code:`from huggingface_hub import list_models

list_models()

list_models(filter="text-classification")

list_models(filter=("languages:ru", "pytorch"))

list_models(filter="dataset:common_voice")

list_models(filter="spacy")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> list_models

<span class="hljs-comment"># List all models.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models()

<span class="hljs-comment"># List only text classification models.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;text-classification&quot;</span>)

<span class="hljs-comment"># List only Russian models compatible with PyTorch.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models(<span class="hljs-built_in">filter</span>=(<span class="hljs-string">&quot;languages:ru&quot;</span>, <span class="hljs-string">&quot;pytorch&quot;</span>))

<span class="hljs-comment"># List only the models trained on the &quot;common_voice&quot; dataset.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;dataset:common_voice&quot;</span>)

<span class="hljs-comment"># List only the models from the spaCy library.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;spacy&quot;</span>)`}}),qe=new y({props:{code:`from huggingface_hub import list_datasets

list_datasets(filter="task_categories:text-classification")

list_datasets(filter=("languages:ru", "task_ids:language-modeling"))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> list_datasets

<span class="hljs-comment"># List only text classification datasets.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_datasets(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;task_categories:text-classification&quot;</span>)

<span class="hljs-comment"># List only datasets in Russian for language modeling.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_datasets(<span class="hljs-built_in">filter</span>=(<span class="hljs-string">&quot;languages:ru&quot;</span>, <span class="hljs-string">&quot;task_ids:language-modeling&quot;</span>))`}}),Pe=new w({}),Ce=new y({props:{code:`from huggingface_hub import model_info, dataset_info

model_info("distilbert-base-uncased")

dataset_info("glue")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> model_info, dataset_info

<span class="hljs-comment"># Get metadata of a single model.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model_info(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)

<span class="hljs-comment"># Get metadata of a single dataset.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_info(<span class="hljs-string">&quot;glue&quot;</span>)`}}),Ae=new w({}),De=new y({props:{code:`from huggingface_hub import create_repo
create_repo("test-model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(<span class="hljs-string">&quot;test-model&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-model&#x27;</span>`}}),Re=new w({}),Oe=new y({props:{code:`from huggingface_hub import get_full_repo_name, delete_repo
name = get_full_repo_name(repo_name)
delete_repo(repo_id=name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> get_full_repo_name, delete_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>name = get_full_repo_name(repo_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=name)`}}),Se=new y({props:{code:'delete_repo(repo_id=REPO_NAME, repo_type="dataset")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=REPO_NAME, repo_type=<span class="hljs-string">&quot;dataset&quot;</span>)'}}),Ne=new w({}),Le=new y({props:{code:`from huggingface_hub import update_repo_visibility
update_repo_visibility(name=REPO_NAME, private=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> update_repo_visibility
<span class="hljs-meta">&gt;&gt;&gt; </span>update_repo_visibility(name=REPO_NAME, private=<span class="hljs-literal">True</span>)`}}),xe=new w({}),He=new w({}),Te=new y({props:{code:'repo = Repository(local_dir="w2v2", clone_from="facebook/wav2vec2-large-960h-lv60")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;w2v2&quot;</span>, clone_from=<span class="hljs-string">&quot;facebook/wav2vec2-large-960h-lv60&quot;</span>)'}}),Ge=new y({props:{code:'repo = Repository(local_dir="huggingface-hub", clone_from="https://github.com/huggingface/huggingface_hub")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;huggingface-hub&quot;</span>, clone_from=<span class="hljs-string">&quot;https://github.com/huggingface/huggingface_hub&quot;</span>)'}}),Ue=new y({props:{code:`repo_url = create_repo(repo_id="repo_name")
repo = Repository(local_dir="repo_local_path", clone_from=repo_url)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo_url = create_repo(repo_id=<span class="hljs-string">&quot;repo_name&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;repo_local_path&quot;</span>, clone_from=repo_url)`}}),Fe=new w({}),Me=new y({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="<path>/<to>/<folder>")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;&lt;path&gt;/&lt;to&gt;/&lt;folder&gt;&quot;</span>)`}}),ze=new w({}),Ye=new y({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),We=new y({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),Ve=new y({props:{code:'repo = Repository(local_dir="my-model", clone_from="<user>/<model_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;my-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;model_id&gt;&quot;</span>)'}}),Xe=new y({props:{code:`repo = Repository(
  "my-dataset", 
  clone_from="<user>/<dataset_id>", 
  use_auth_token=True, 
  repo_type="dataset",
  git_user="MyName",
  git_email="me@cool.mail"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;my-dataset&quot;</span>, 
<span class="hljs-meta">... </span>  clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;dataset_id&gt;&quot;</span>, 
<span class="hljs-meta">... </span>  use_auth_token=<span class="hljs-literal">True</span>, 
<span class="hljs-meta">... </span>  repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>  git_user=<span class="hljs-string">&quot;MyName&quot;</span>,
<span class="hljs-meta">... </span>  git_email=<span class="hljs-string">&quot;me@cool.mail&quot;</span>
<span class="hljs-meta">... </span>)`}}),Ze=new w({}),et=new y({props:{code:`repo = Repository(local_dir="huggingface-hub", clone_from="<user>/<dataset_id>", revision='branch1')
repo.git_checkout("branch2")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;huggingface-hub&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;dataset_id&gt;&quot;</span>, revision=<span class="hljs-string">&#x27;branch1&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_checkout(<span class="hljs-string">&quot;branch2&quot;</span>)`}}),tt=new w({}),at=new y({props:{code:"repo.git_pull()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()'}}),ot=new y({props:{code:"repo.git_pull(rebase=True)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull(rebase=<span class="hljs-literal">True</span>)'}}),{c(){O=o("meta"),Ca=h(),S=o("h1"),W=o("a"),_t=o("span"),m(ye.$$.fragment),as=h(),vt=o("span"),os=r("How to create and manage a repository"),Aa=h(),K=o("ul"),$e=o("li"),ss=r("Use the repository-management methods available in the "),yt=o("code"),ls=r("huggingface_hub"),rs=r(" package."),is=h(),we=o("li"),ns=r("Use the "),$t=o("code"),ps=r("Repository"),hs=r(" class to handle files and version control a repository with Git-like commands."),Da=h(),N=o("h2"),Q=o("a"),wt=o("span"),m(be.$$.fragment),cs=h(),bt=o("span"),fs=r("huggingface_hub repository-management methods"),Ra=h(),V=o("p"),ms=r("The "),Et=o("code"),us=r("huggingface_hub"),ds=r(" package offers high-level methods that wraps around HTTP requests. There are many valuable tasks you can accomplish with it, including:"),Oa=h(),b=o("ul"),kt=o("li"),gs=r("List and filter models and datasets."),_s=h(),jt=o("li"),vs=r("Inspect model or dataset metadata."),ys=h(),qt=o("li"),$s=r("Delete a repository."),ws=h(),Pt=o("li"),bs=r("Change the visibility of a repository."),Sa=h(),L=o("h3"),X=o("a"),Ct=o("span"),m(Ee.$$.fragment),Es=h(),At=o("span"),ks=r("List and filter"),Na=h(),j=o("p"),js=r("It can be helpful for users to see a list of available models and filter them according to a specific language or library. This can be especially useful for library and organization owners who want to view all their models. Use the "),Dt=o("code"),qs=r("list_models"),Ps=r(" function with the "),Rt=o("code"),Cs=r("filter"),As=r(" parameter to search for specific models."),La=h(),Z=o("p"),Ds=r("You can view all the available filters on the left of the "),ke=o("a"),Rs=r("model Hub"),Os=r("."),xa=h(),st=o("p"),lt=o("img"),Ia=h(),m(je.$$.fragment),Ha=h(),ee=o("p"),Ss=r("Explore available public datasets with "),Ot=o("code"),Ns=r("list_datasets"),Ls=r(":"),Ta=h(),m(qe.$$.fragment),Ga=h(),x=o("h3"),te=o("a"),St=o("span"),m(Pe.$$.fragment),xs=h(),Nt=o("span"),Is=r("Inspect model or dataset metadata"),Ua=h(),rt=o("p"),Hs=r("Get important information about a model or dataset as shown below:"),Fa=h(),m(Ce.$$.fragment),Ma=h(),I=o("h3"),ae=o("a"),Lt=o("span"),m(Ae.$$.fragment),Ts=h(),xt=o("span"),Gs=r("Create a repository"),za=h(),q=o("p"),Us=r("Create a repository with "),It=o("code"),Fs=r("create_repo"),Ms=r(" and give it a name with the "),Ht=o("code"),zs=r("name"),Bs=r(" parameter."),Ba=h(),m(De.$$.fragment),Ya=h(),H=o("h3"),oe=o("a"),Tt=o("span"),m(Re.$$.fragment),Ys=h(),Gt=o("span"),Js=r("Delete a repository"),Ja=h(),se=o("p"),Ws=r("Delete a repository with "),Ut=o("code"),Ks=r("delete_repo"),Qs=r(". Make sure you are certain you want to delete a repository because this is an irreversible process!"),Wa=h(),E=o("p"),Vs=r("Pass the full repository ID to "),Ft=o("code"),Xs=r("delete_repo"),Zs=r(". The full repository ID looks like "),Mt=o("code"),el=r("{username_or_org}/{repo_name}"),tl=r(", and you can retrieve it with "),zt=o("code"),al=r("get_full_repo_name()"),ol=r(" as shown below:"),Ka=h(),m(Oe.$$.fragment),Qa=h(),le=o("p"),sl=r("Delete a dataset repository by adding the "),Bt=o("code"),ll=r("repo_type"),rl=r(" parameter:"),Va=h(),m(Se.$$.fragment),Xa=h(),T=o("h3"),re=o("a"),Yt=o("span"),m(Ne.$$.fragment),il=h(),Jt=o("span"),nl=r("Change repository visibility"),Za=h(),it=o("p"),pl=r("A repository can be public or private. A private repository is only visible to you or members of the organization in which the repository is located. Change a repository to private as shown in the following:"),eo=h(),m(Le.$$.fragment),to=h(),G=o("h2"),ie=o("a"),Wt=o("span"),m(xe.$$.fragment),hl=h(),Kt=o("span"),cl=r("Repository"),ao=h(),$=o("p"),fl=r("The "),Qt=o("code"),ml=r("Repository"),ul=r(" class allows you to push models or other repositories to the Hub. "),Vt=o("code"),dl=r("Repository"),gl=r(" is a wrapper over Git and Git-LFS methods, so make sure you have Git-LFS installed (see "),Ie=o("a"),_l=r("here"),vl=r(" for installation instructions) and set up before you begin. The "),Xt=o("code"),yl=r("Repository"),$l=r(" class should feel familiar if you are already familiar with common Git commands."),oo=h(),U=o("h3"),ne=o("a"),Zt=o("span"),m(He.$$.fragment),wl=h(),ea=o("span"),bl=r("Clone a repository"),so=h(),P=o("p"),El=r("The "),ta=o("code"),kl=r("clone_from"),jl=r(" parameter clones a repository from a Hugging Face model ID to a directory specified by the "),aa=o("code"),ql=r("local_dir"),Pl=r(" argument:"),lo=h(),m(Te.$$.fragment),ro=h(),F=o("p"),oa=o("code"),Cl=r("clone_from"),Al=r(" can also clone a repository from a specified directory using a URL (if you are working offline, this parameter should be "),sa=o("code"),Dl=r("None"),Rl=r("):"),io=h(),m(Ge.$$.fragment),no=h(),C=o("p"),Ol=r("Easily combine the "),la=o("code"),Sl=r("clone_from"),Nl=r(" parameter with "),ra=o("code"),Ll=r("create_repo"),xl=r(" to create and clone a repository:"),po=h(),m(Ue.$$.fragment),ho=h(),M=o("h3"),pe=o("a"),ia=o("span"),m(Fe.$$.fragment),Il=h(),na=o("span"),Hl=r("Using a local clone"),co=h(),he=o("p"),Tl=r("Instantiate a "),pa=o("code"),Gl=r("Repository"),Ul=r(" object with a path to a local Git clone or repository:"),fo=h(),m(Me.$$.fragment),mo=h(),z=o("h3"),ce=o("a"),ha=o("span"),m(ze.$$.fragment),Fl=h(),ca=o("span"),Ml=r("Commit and push to a cloned repository"),uo=h(),nt=o("p"),zl=r("If you want to commit or push to a cloned repository that belongs to you or your organizations:"),go=h(),A=o("ol"),Be=o("li"),fa=o("p"),Bl=r("Log in to your Hugging Face account with the following command:"),Yl=h(),m(Ye.$$.fragment),Jl=h(),B=o("li"),Je=o("p"),Wl=r("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),ma=o("code"),Kl=r("notebook_login"),Ql=r(":"),Vl=h(),m(We.$$.fragment),Xl=h(),pt=o("p"),ua=o("code"),Zl=r("notebook_login"),er=r(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),tr=h(),Ke=o("li"),Qe=o("p"),ar=r("Instantiate a "),da=o("code"),or=r("Repository"),sr=r(" class:"),lr=h(),m(Ve.$$.fragment),_o=h(),D=o("p"),rr=r("You can also attribute a Git username and email to a cloned repository by specifying the "),ga=o("code"),ir=r("git_user"),nr=r(" and "),_a=o("code"),pr=r("git_email"),hr=r(" parameters. When users commit to that repository, Git will be aware of the commit author."),vo=h(),m(Xe.$$.fragment),yo=h(),Y=o("h3"),fe=o("a"),va=o("span"),m(Ze.$$.fragment),cr=h(),ya=o("span"),fr=r("Branch"),$o=h(),k=o("p"),mr=r("Switch between branches with "),$a=o("code"),ur=r("git_checkout"),dr=r(". For example, if you want to switch from "),wa=o("code"),gr=r("branch1"),_r=r(" to "),ba=o("code"),vr=r("branch2"),yr=r(":"),wo=h(),m(et.$$.fragment),bo=h(),J=o("h3"),me=o("a"),Ea=o("span"),m(tt.$$.fragment),$r=h(),ka=o("span"),wr=r("Pull"),Eo=h(),ue=o("p"),br=r("Update a current local branch with "),ja=o("code"),Er=r("git_pull"),kr=r(":"),ko=h(),m(at.$$.fragment),jo=h(),de=o("p"),jr=r("Set "),qa=o("code"),qr=r("rebase=True"),Pr=r(" if you want your local commits to occur after your branch is updated with the new commits from the remote:"),qo=h(),m(ot.$$.fragment),this.h()},l(e){const n=hn('[data-svelte="svelte-1phssyn"]',document.head);O=s(n,"META",{name:!0,content:!0}),n.forEach(a),Ca=c(e),S=s(e,"H1",{class:!0});var Co=l(S);W=s(Co,"A",{id:!0,class:!0,href:!0});var Rr=l(W);_t=s(Rr,"SPAN",{});var Or=l(_t);u(ye.$$.fragment,Or),Or.forEach(a),Rr.forEach(a),as=c(Co),vt=s(Co,"SPAN",{});var Sr=l(vt);os=i(Sr,"How to create and manage a repository"),Sr.forEach(a),Co.forEach(a),Aa=c(e),K=s(e,"UL",{});var Ao=l(K);$e=s(Ao,"LI",{});var Do=l($e);ss=i(Do,"Use the repository-management methods available in the "),yt=s(Do,"CODE",{});var Nr=l(yt);ls=i(Nr,"huggingface_hub"),Nr.forEach(a),rs=i(Do," package."),Do.forEach(a),is=c(Ao),we=s(Ao,"LI",{});var Ro=l(we);ns=i(Ro,"Use the "),$t=s(Ro,"CODE",{});var Lr=l($t);ps=i(Lr,"Repository"),Lr.forEach(a),hs=i(Ro," class to handle files and version control a repository with Git-like commands."),Ro.forEach(a),Ao.forEach(a),Da=c(e),N=s(e,"H2",{class:!0});var Oo=l(N);Q=s(Oo,"A",{id:!0,class:!0,href:!0});var xr=l(Q);wt=s(xr,"SPAN",{});var Ir=l(wt);u(be.$$.fragment,Ir),Ir.forEach(a),xr.forEach(a),cs=c(Oo),bt=s(Oo,"SPAN",{});var Hr=l(bt);fs=i(Hr,"huggingface_hub repository-management methods"),Hr.forEach(a),Oo.forEach(a),Ra=c(e),V=s(e,"P",{});var So=l(V);ms=i(So,"The "),Et=s(So,"CODE",{});var Tr=l(Et);us=i(Tr,"huggingface_hub"),Tr.forEach(a),ds=i(So," package offers high-level methods that wraps around HTTP requests. There are many valuable tasks you can accomplish with it, including:"),So.forEach(a),Oa=c(e),b=s(e,"UL",{});var ge=l(b);kt=s(ge,"LI",{});var Gr=l(kt);gs=i(Gr,"List and filter models and datasets."),Gr.forEach(a),_s=c(ge),jt=s(ge,"LI",{});var Ur=l(jt);vs=i(Ur,"Inspect model or dataset metadata."),Ur.forEach(a),ys=c(ge),qt=s(ge,"LI",{});var Fr=l(qt);$s=i(Fr,"Delete a repository."),Fr.forEach(a),ws=c(ge),Pt=s(ge,"LI",{});var Mr=l(Pt);bs=i(Mr,"Change the visibility of a repository."),Mr.forEach(a),ge.forEach(a),Sa=c(e),L=s(e,"H3",{class:!0});var No=l(L);X=s(No,"A",{id:!0,class:!0,href:!0});var zr=l(X);Ct=s(zr,"SPAN",{});var Br=l(Ct);u(Ee.$$.fragment,Br),Br.forEach(a),zr.forEach(a),Es=c(No),At=s(No,"SPAN",{});var Yr=l(At);ks=i(Yr,"List and filter"),Yr.forEach(a),No.forEach(a),Na=c(e),j=s(e,"P",{});var ht=l(j);js=i(ht,"It can be helpful for users to see a list of available models and filter them according to a specific language or library. This can be especially useful for library and organization owners who want to view all their models. Use the "),Dt=s(ht,"CODE",{});var Jr=l(Dt);qs=i(Jr,"list_models"),Jr.forEach(a),Ps=i(ht," function with the "),Rt=s(ht,"CODE",{});var Wr=l(Rt);Cs=i(Wr,"filter"),Wr.forEach(a),As=i(ht," parameter to search for specific models."),ht.forEach(a),La=c(e),Z=s(e,"P",{});var Lo=l(Z);Ds=i(Lo,"You can view all the available filters on the left of the "),ke=s(Lo,"A",{href:!0,rel:!0});var Kr=l(ke);Rs=i(Kr,"model Hub"),Kr.forEach(a),Os=i(Lo,"."),Lo.forEach(a),xa=c(e),st=s(e,"P",{});var Qr=l(st);lt=s(Qr,"IMG",{src:!0,alt:!0}),Qr.forEach(a),Ia=c(e),u(je.$$.fragment,e),Ha=c(e),ee=s(e,"P",{});var xo=l(ee);Ss=i(xo,"Explore available public datasets with "),Ot=s(xo,"CODE",{});var Vr=l(Ot);Ns=i(Vr,"list_datasets"),Vr.forEach(a),Ls=i(xo,":"),xo.forEach(a),Ta=c(e),u(qe.$$.fragment,e),Ga=c(e),x=s(e,"H3",{class:!0});var Io=l(x);te=s(Io,"A",{id:!0,class:!0,href:!0});var Xr=l(te);St=s(Xr,"SPAN",{});var Zr=l(St);u(Pe.$$.fragment,Zr),Zr.forEach(a),Xr.forEach(a),xs=c(Io),Nt=s(Io,"SPAN",{});var ei=l(Nt);Is=i(ei,"Inspect model or dataset metadata"),ei.forEach(a),Io.forEach(a),Ua=c(e),rt=s(e,"P",{});var ti=l(rt);Hs=i(ti,"Get important information about a model or dataset as shown below:"),ti.forEach(a),Fa=c(e),u(Ce.$$.fragment,e),Ma=c(e),I=s(e,"H3",{class:!0});var Ho=l(I);ae=s(Ho,"A",{id:!0,class:!0,href:!0});var ai=l(ae);Lt=s(ai,"SPAN",{});var oi=l(Lt);u(Ae.$$.fragment,oi),oi.forEach(a),ai.forEach(a),Ts=c(Ho),xt=s(Ho,"SPAN",{});var si=l(xt);Gs=i(si,"Create a repository"),si.forEach(a),Ho.forEach(a),za=c(e),q=s(e,"P",{});var ct=l(q);Us=i(ct,"Create a repository with "),It=s(ct,"CODE",{});var li=l(It);Fs=i(li,"create_repo"),li.forEach(a),Ms=i(ct," and give it a name with the "),Ht=s(ct,"CODE",{});var ri=l(Ht);zs=i(ri,"name"),ri.forEach(a),Bs=i(ct," parameter."),ct.forEach(a),Ba=c(e),u(De.$$.fragment,e),Ya=c(e),H=s(e,"H3",{class:!0});var To=l(H);oe=s(To,"A",{id:!0,class:!0,href:!0});var ii=l(oe);Tt=s(ii,"SPAN",{});var ni=l(Tt);u(Re.$$.fragment,ni),ni.forEach(a),ii.forEach(a),Ys=c(To),Gt=s(To,"SPAN",{});var pi=l(Gt);Js=i(pi,"Delete a repository"),pi.forEach(a),To.forEach(a),Ja=c(e),se=s(e,"P",{});var Go=l(se);Ws=i(Go,"Delete a repository with "),Ut=s(Go,"CODE",{});var hi=l(Ut);Ks=i(hi,"delete_repo"),hi.forEach(a),Qs=i(Go,". Make sure you are certain you want to delete a repository because this is an irreversible process!"),Go.forEach(a),Wa=c(e),E=s(e,"P",{});var _e=l(E);Vs=i(_e,"Pass the full repository ID to "),Ft=s(_e,"CODE",{});var ci=l(Ft);Xs=i(ci,"delete_repo"),ci.forEach(a),Zs=i(_e,". The full repository ID looks like "),Mt=s(_e,"CODE",{});var fi=l(Mt);el=i(fi,"{username_or_org}/{repo_name}"),fi.forEach(a),tl=i(_e,", and you can retrieve it with "),zt=s(_e,"CODE",{});var mi=l(zt);al=i(mi,"get_full_repo_name()"),mi.forEach(a),ol=i(_e," as shown below:"),_e.forEach(a),Ka=c(e),u(Oe.$$.fragment,e),Qa=c(e),le=s(e,"P",{});var Uo=l(le);sl=i(Uo,"Delete a dataset repository by adding the "),Bt=s(Uo,"CODE",{});var ui=l(Bt);ll=i(ui,"repo_type"),ui.forEach(a),rl=i(Uo," parameter:"),Uo.forEach(a),Va=c(e),u(Se.$$.fragment,e),Xa=c(e),T=s(e,"H3",{class:!0});var Fo=l(T);re=s(Fo,"A",{id:!0,class:!0,href:!0});var di=l(re);Yt=s(di,"SPAN",{});var gi=l(Yt);u(Ne.$$.fragment,gi),gi.forEach(a),di.forEach(a),il=c(Fo),Jt=s(Fo,"SPAN",{});var _i=l(Jt);nl=i(_i,"Change repository visibility"),_i.forEach(a),Fo.forEach(a),Za=c(e),it=s(e,"P",{});var vi=l(it);pl=i(vi,"A repository can be public or private. A private repository is only visible to you or members of the organization in which the repository is located. Change a repository to private as shown in the following:"),vi.forEach(a),eo=c(e),u(Le.$$.fragment,e),to=c(e),G=s(e,"H2",{class:!0});var Mo=l(G);ie=s(Mo,"A",{id:!0,class:!0,href:!0});var yi=l(ie);Wt=s(yi,"SPAN",{});var $i=l(Wt);u(xe.$$.fragment,$i),$i.forEach(a),yi.forEach(a),hl=c(Mo),Kt=s(Mo,"SPAN",{});var wi=l(Kt);cl=i(wi,"Repository"),wi.forEach(a),Mo.forEach(a),ao=c(e),$=s(e,"P",{});var R=l($);fl=i(R,"The "),Qt=s(R,"CODE",{});var bi=l(Qt);ml=i(bi,"Repository"),bi.forEach(a),ul=i(R," class allows you to push models or other repositories to the Hub. "),Vt=s(R,"CODE",{});var Ei=l(Vt);dl=i(Ei,"Repository"),Ei.forEach(a),gl=i(R," is a wrapper over Git and Git-LFS methods, so make sure you have Git-LFS installed (see "),Ie=s(R,"A",{href:!0,rel:!0});var ki=l(Ie);_l=i(ki,"here"),ki.forEach(a),vl=i(R," for installation instructions) and set up before you begin. The "),Xt=s(R,"CODE",{});var ji=l(Xt);yl=i(ji,"Repository"),ji.forEach(a),$l=i(R," class should feel familiar if you are already familiar with common Git commands."),R.forEach(a),oo=c(e),U=s(e,"H3",{class:!0});var zo=l(U);ne=s(zo,"A",{id:!0,class:!0,href:!0});var qi=l(ne);Zt=s(qi,"SPAN",{});var Pi=l(Zt);u(He.$$.fragment,Pi),Pi.forEach(a),qi.forEach(a),wl=c(zo),ea=s(zo,"SPAN",{});var Ci=l(ea);bl=i(Ci,"Clone a repository"),Ci.forEach(a),zo.forEach(a),so=c(e),P=s(e,"P",{});var ft=l(P);El=i(ft,"The "),ta=s(ft,"CODE",{});var Ai=l(ta);kl=i(Ai,"clone_from"),Ai.forEach(a),jl=i(ft," parameter clones a repository from a Hugging Face model ID to a directory specified by the "),aa=s(ft,"CODE",{});var Di=l(aa);ql=i(Di,"local_dir"),Di.forEach(a),Pl=i(ft," argument:"),ft.forEach(a),lo=c(e),u(Te.$$.fragment,e),ro=c(e),F=s(e,"P",{});var Pa=l(F);oa=s(Pa,"CODE",{});var Ri=l(oa);Cl=i(Ri,"clone_from"),Ri.forEach(a),Al=i(Pa," can also clone a repository from a specified directory using a URL (if you are working offline, this parameter should be "),sa=s(Pa,"CODE",{});var Oi=l(sa);Dl=i(Oi,"None"),Oi.forEach(a),Rl=i(Pa,"):"),Pa.forEach(a),io=c(e),u(Ge.$$.fragment,e),no=c(e),C=s(e,"P",{});var mt=l(C);Ol=i(mt,"Easily combine the "),la=s(mt,"CODE",{});var Si=l(la);Sl=i(Si,"clone_from"),Si.forEach(a),Nl=i(mt," parameter with "),ra=s(mt,"CODE",{});var Ni=l(ra);Ll=i(Ni,"create_repo"),Ni.forEach(a),xl=i(mt," to create and clone a repository:"),mt.forEach(a),po=c(e),u(Ue.$$.fragment,e),ho=c(e),M=s(e,"H3",{class:!0});var Bo=l(M);pe=s(Bo,"A",{id:!0,class:!0,href:!0});var Li=l(pe);ia=s(Li,"SPAN",{});var xi=l(ia);u(Fe.$$.fragment,xi),xi.forEach(a),Li.forEach(a),Il=c(Bo),na=s(Bo,"SPAN",{});var Ii=l(na);Hl=i(Ii,"Using a local clone"),Ii.forEach(a),Bo.forEach(a),co=c(e),he=s(e,"P",{});var Yo=l(he);Tl=i(Yo,"Instantiate a "),pa=s(Yo,"CODE",{});var Hi=l(pa);Gl=i(Hi,"Repository"),Hi.forEach(a),Ul=i(Yo," object with a path to a local Git clone or repository:"),Yo.forEach(a),fo=c(e),u(Me.$$.fragment,e),mo=c(e),z=s(e,"H3",{class:!0});var Jo=l(z);ce=s(Jo,"A",{id:!0,class:!0,href:!0});var Ti=l(ce);ha=s(Ti,"SPAN",{});var Gi=l(ha);u(ze.$$.fragment,Gi),Gi.forEach(a),Ti.forEach(a),Fl=c(Jo),ca=s(Jo,"SPAN",{});var Ui=l(ca);Ml=i(Ui,"Commit and push to a cloned repository"),Ui.forEach(a),Jo.forEach(a),uo=c(e),nt=s(e,"P",{});var Fi=l(nt);zl=i(Fi,"If you want to commit or push to a cloned repository that belongs to you or your organizations:"),Fi.forEach(a),go=c(e),A=s(e,"OL",{});var ut=l(A);Be=s(ut,"LI",{});var Wo=l(Be);fa=s(Wo,"P",{});var Mi=l(fa);Bl=i(Mi,"Log in to your Hugging Face account with the following command:"),Mi.forEach(a),Yl=c(Wo),u(Ye.$$.fragment,Wo),Wo.forEach(a),Jl=c(ut),B=s(ut,"LI",{});var dt=l(B);Je=s(dt,"P",{});var Ko=l(Je);Wl=i(Ko,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),ma=s(Ko,"CODE",{});var zi=l(ma);Kl=i(zi,"notebook_login"),zi.forEach(a),Ql=i(Ko,":"),Ko.forEach(a),Vl=c(dt),u(We.$$.fragment,dt),Xl=c(dt),pt=s(dt,"P",{});var Cr=l(pt);ua=s(Cr,"CODE",{});var Bi=l(ua);Zl=i(Bi,"notebook_login"),Bi.forEach(a),er=i(Cr," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),Cr.forEach(a),dt.forEach(a),tr=c(ut),Ke=s(ut,"LI",{});var Qo=l(Ke);Qe=s(Qo,"P",{});var Vo=l(Qe);ar=i(Vo,"Instantiate a "),da=s(Vo,"CODE",{});var Yi=l(da);or=i(Yi,"Repository"),Yi.forEach(a),sr=i(Vo," class:"),Vo.forEach(a),lr=c(Qo),u(Ve.$$.fragment,Qo),Qo.forEach(a),ut.forEach(a),_o=c(e),D=s(e,"P",{});var gt=l(D);rr=i(gt,"You can also attribute a Git username and email to a cloned repository by specifying the "),ga=s(gt,"CODE",{});var Ji=l(ga);ir=i(Ji,"git_user"),Ji.forEach(a),nr=i(gt," and "),_a=s(gt,"CODE",{});var Wi=l(_a);pr=i(Wi,"git_email"),Wi.forEach(a),hr=i(gt," parameters. When users commit to that repository, Git will be aware of the commit author."),gt.forEach(a),vo=c(e),u(Xe.$$.fragment,e),yo=c(e),Y=s(e,"H3",{class:!0});var Xo=l(Y);fe=s(Xo,"A",{id:!0,class:!0,href:!0});var Ki=l(fe);va=s(Ki,"SPAN",{});var Qi=l(va);u(Ze.$$.fragment,Qi),Qi.forEach(a),Ki.forEach(a),cr=c(Xo),ya=s(Xo,"SPAN",{});var Vi=l(ya);fr=i(Vi,"Branch"),Vi.forEach(a),Xo.forEach(a),$o=c(e),k=s(e,"P",{});var ve=l(k);mr=i(ve,"Switch between branches with "),$a=s(ve,"CODE",{});var Xi=l($a);ur=i(Xi,"git_checkout"),Xi.forEach(a),dr=i(ve,". For example, if you want to switch from "),wa=s(ve,"CODE",{});var Zi=l(wa);gr=i(Zi,"branch1"),Zi.forEach(a),_r=i(ve," to "),ba=s(ve,"CODE",{});var en=l(ba);vr=i(en,"branch2"),en.forEach(a),yr=i(ve,":"),ve.forEach(a),wo=c(e),u(et.$$.fragment,e),bo=c(e),J=s(e,"H3",{class:!0});var Zo=l(J);me=s(Zo,"A",{id:!0,class:!0,href:!0});var tn=l(me);Ea=s(tn,"SPAN",{});var an=l(Ea);u(tt.$$.fragment,an),an.forEach(a),tn.forEach(a),$r=c(Zo),ka=s(Zo,"SPAN",{});var on=l(ka);wr=i(on,"Pull"),on.forEach(a),Zo.forEach(a),Eo=c(e),ue=s(e,"P",{});var es=l(ue);br=i(es,"Update a current local branch with "),ja=s(es,"CODE",{});var sn=l(ja);Er=i(sn,"git_pull"),sn.forEach(a),kr=i(es,":"),es.forEach(a),ko=c(e),u(at.$$.fragment,e),jo=c(e),de=s(e,"P",{});var ts=l(de);jr=i(ts,"Set "),qa=s(ts,"CODE",{});var ln=l(qa);qr=i(ln,"rebase=True"),ln.forEach(a),Pr=i(ts," if you want your local commits to occur after your branch is updated with the new commits from the remote:"),ts.forEach(a),qo=c(e),u(ot.$$.fragment,e),this.h()},h(){f(O,"name","hf:doc:metadata"),f(O,"content",JSON.stringify(dn)),f(W,"id","how-to-create-and-manage-a-repository"),f(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(W,"href","#how-to-create-and-manage-a-repository"),f(S,"class","relative group"),f(Q,"id","huggingfacehub-repositorymanagement-methods"),f(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Q,"href","#huggingfacehub-repositorymanagement-methods"),f(N,"class","relative group"),f(X,"id","list-and-filter"),f(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(X,"href","#list-and-filter"),f(L,"class","relative group"),f(ke,"href","http://hf.co/models"),f(ke,"rel","nofollow"),cn(lt.src,Dr="/docs/assets/hub/hub_filters.png")||f(lt,"src",Dr),f(lt,"alt","/docs/assets/hub/hub_filters.png"),f(te,"id","inspect-model-or-dataset-metadata"),f(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(te,"href","#inspect-model-or-dataset-metadata"),f(x,"class","relative group"),f(ae,"id","create-a-repository"),f(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ae,"href","#create-a-repository"),f(I,"class","relative group"),f(oe,"id","delete-a-repository"),f(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(oe,"href","#delete-a-repository"),f(H,"class","relative group"),f(re,"id","change-repository-visibility"),f(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(re,"href","#change-repository-visibility"),f(T,"class","relative group"),f(ie,"id","repository"),f(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ie,"href","#repository"),f(G,"class","relative group"),f(Ie,"href","https://git-lfs.github.com/"),f(Ie,"rel","nofollow"),f(ne,"id","clone-a-repository"),f(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ne,"href","#clone-a-repository"),f(U,"class","relative group"),f(pe,"id","using-a-local-clone"),f(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(pe,"href","#using-a-local-clone"),f(M,"class","relative group"),f(ce,"id","commit-and-push-to-a-cloned-repository"),f(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ce,"href","#commit-and-push-to-a-cloned-repository"),f(z,"class","relative group"),f(fe,"id","branch"),f(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(fe,"href","#branch"),f(Y,"class","relative group"),f(me,"id","pull"),f(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(me,"href","#pull"),f(J,"class","relative group")},m(e,n){t(document.head,O),p(e,Ca,n),p(e,S,n),t(S,W),t(W,_t),d(ye,_t,null),t(S,as),t(S,vt),t(vt,os),p(e,Aa,n),p(e,K,n),t(K,$e),t($e,ss),t($e,yt),t(yt,ls),t($e,rs),t(K,is),t(K,we),t(we,ns),t(we,$t),t($t,ps),t(we,hs),p(e,Da,n),p(e,N,n),t(N,Q),t(Q,wt),d(be,wt,null),t(N,cs),t(N,bt),t(bt,fs),p(e,Ra,n),p(e,V,n),t(V,ms),t(V,Et),t(Et,us),t(V,ds),p(e,Oa,n),p(e,b,n),t(b,kt),t(kt,gs),t(b,_s),t(b,jt),t(jt,vs),t(b,ys),t(b,qt),t(qt,$s),t(b,ws),t(b,Pt),t(Pt,bs),p(e,Sa,n),p(e,L,n),t(L,X),t(X,Ct),d(Ee,Ct,null),t(L,Es),t(L,At),t(At,ks),p(e,Na,n),p(e,j,n),t(j,js),t(j,Dt),t(Dt,qs),t(j,Ps),t(j,Rt),t(Rt,Cs),t(j,As),p(e,La,n),p(e,Z,n),t(Z,Ds),t(Z,ke),t(ke,Rs),t(Z,Os),p(e,xa,n),p(e,st,n),t(st,lt),p(e,Ia,n),d(je,e,n),p(e,Ha,n),p(e,ee,n),t(ee,Ss),t(ee,Ot),t(Ot,Ns),t(ee,Ls),p(e,Ta,n),d(qe,e,n),p(e,Ga,n),p(e,x,n),t(x,te),t(te,St),d(Pe,St,null),t(x,xs),t(x,Nt),t(Nt,Is),p(e,Ua,n),p(e,rt,n),t(rt,Hs),p(e,Fa,n),d(Ce,e,n),p(e,Ma,n),p(e,I,n),t(I,ae),t(ae,Lt),d(Ae,Lt,null),t(I,Ts),t(I,xt),t(xt,Gs),p(e,za,n),p(e,q,n),t(q,Us),t(q,It),t(It,Fs),t(q,Ms),t(q,Ht),t(Ht,zs),t(q,Bs),p(e,Ba,n),d(De,e,n),p(e,Ya,n),p(e,H,n),t(H,oe),t(oe,Tt),d(Re,Tt,null),t(H,Ys),t(H,Gt),t(Gt,Js),p(e,Ja,n),p(e,se,n),t(se,Ws),t(se,Ut),t(Ut,Ks),t(se,Qs),p(e,Wa,n),p(e,E,n),t(E,Vs),t(E,Ft),t(Ft,Xs),t(E,Zs),t(E,Mt),t(Mt,el),t(E,tl),t(E,zt),t(zt,al),t(E,ol),p(e,Ka,n),d(Oe,e,n),p(e,Qa,n),p(e,le,n),t(le,sl),t(le,Bt),t(Bt,ll),t(le,rl),p(e,Va,n),d(Se,e,n),p(e,Xa,n),p(e,T,n),t(T,re),t(re,Yt),d(Ne,Yt,null),t(T,il),t(T,Jt),t(Jt,nl),p(e,Za,n),p(e,it,n),t(it,pl),p(e,eo,n),d(Le,e,n),p(e,to,n),p(e,G,n),t(G,ie),t(ie,Wt),d(xe,Wt,null),t(G,hl),t(G,Kt),t(Kt,cl),p(e,ao,n),p(e,$,n),t($,fl),t($,Qt),t(Qt,ml),t($,ul),t($,Vt),t(Vt,dl),t($,gl),t($,Ie),t(Ie,_l),t($,vl),t($,Xt),t(Xt,yl),t($,$l),p(e,oo,n),p(e,U,n),t(U,ne),t(ne,Zt),d(He,Zt,null),t(U,wl),t(U,ea),t(ea,bl),p(e,so,n),p(e,P,n),t(P,El),t(P,ta),t(ta,kl),t(P,jl),t(P,aa),t(aa,ql),t(P,Pl),p(e,lo,n),d(Te,e,n),p(e,ro,n),p(e,F,n),t(F,oa),t(oa,Cl),t(F,Al),t(F,sa),t(sa,Dl),t(F,Rl),p(e,io,n),d(Ge,e,n),p(e,no,n),p(e,C,n),t(C,Ol),t(C,la),t(la,Sl),t(C,Nl),t(C,ra),t(ra,Ll),t(C,xl),p(e,po,n),d(Ue,e,n),p(e,ho,n),p(e,M,n),t(M,pe),t(pe,ia),d(Fe,ia,null),t(M,Il),t(M,na),t(na,Hl),p(e,co,n),p(e,he,n),t(he,Tl),t(he,pa),t(pa,Gl),t(he,Ul),p(e,fo,n),d(Me,e,n),p(e,mo,n),p(e,z,n),t(z,ce),t(ce,ha),d(ze,ha,null),t(z,Fl),t(z,ca),t(ca,Ml),p(e,uo,n),p(e,nt,n),t(nt,zl),p(e,go,n),p(e,A,n),t(A,Be),t(Be,fa),t(fa,Bl),t(Be,Yl),d(Ye,Be,null),t(A,Jl),t(A,B),t(B,Je),t(Je,Wl),t(Je,ma),t(ma,Kl),t(Je,Ql),t(B,Vl),d(We,B,null),t(B,Xl),t(B,pt),t(pt,ua),t(ua,Zl),t(pt,er),t(A,tr),t(A,Ke),t(Ke,Qe),t(Qe,ar),t(Qe,da),t(da,or),t(Qe,sr),t(Ke,lr),d(Ve,Ke,null),p(e,_o,n),p(e,D,n),t(D,rr),t(D,ga),t(ga,ir),t(D,nr),t(D,_a),t(_a,pr),t(D,hr),p(e,vo,n),d(Xe,e,n),p(e,yo,n),p(e,Y,n),t(Y,fe),t(fe,va),d(Ze,va,null),t(Y,cr),t(Y,ya),t(ya,fr),p(e,$o,n),p(e,k,n),t(k,mr),t(k,$a),t($a,ur),t(k,dr),t(k,wa),t(wa,gr),t(k,_r),t(k,ba),t(ba,vr),t(k,yr),p(e,wo,n),d(et,e,n),p(e,bo,n),p(e,J,n),t(J,me),t(me,Ea),d(tt,Ea,null),t(J,$r),t(J,ka),t(ka,wr),p(e,Eo,n),p(e,ue,n),t(ue,br),t(ue,ja),t(ja,Er),t(ue,kr),p(e,ko,n),d(at,e,n),p(e,jo,n),p(e,de,n),t(de,jr),t(de,qa),t(qa,qr),t(de,Pr),p(e,qo,n),d(ot,e,n),Po=!0},p:fn,i(e){Po||(g(ye.$$.fragment,e),g(be.$$.fragment,e),g(Ee.$$.fragment,e),g(je.$$.fragment,e),g(qe.$$.fragment,e),g(Pe.$$.fragment,e),g(Ce.$$.fragment,e),g(Ae.$$.fragment,e),g(De.$$.fragment,e),g(Re.$$.fragment,e),g(Oe.$$.fragment,e),g(Se.$$.fragment,e),g(Ne.$$.fragment,e),g(Le.$$.fragment,e),g(xe.$$.fragment,e),g(He.$$.fragment,e),g(Te.$$.fragment,e),g(Ge.$$.fragment,e),g(Ue.$$.fragment,e),g(Fe.$$.fragment,e),g(Me.$$.fragment,e),g(ze.$$.fragment,e),g(Ye.$$.fragment,e),g(We.$$.fragment,e),g(Ve.$$.fragment,e),g(Xe.$$.fragment,e),g(Ze.$$.fragment,e),g(et.$$.fragment,e),g(tt.$$.fragment,e),g(at.$$.fragment,e),g(ot.$$.fragment,e),Po=!0)},o(e){_(ye.$$.fragment,e),_(be.$$.fragment,e),_(Ee.$$.fragment,e),_(je.$$.fragment,e),_(qe.$$.fragment,e),_(Pe.$$.fragment,e),_(Ce.$$.fragment,e),_(Ae.$$.fragment,e),_(De.$$.fragment,e),_(Re.$$.fragment,e),_(Oe.$$.fragment,e),_(Se.$$.fragment,e),_(Ne.$$.fragment,e),_(Le.$$.fragment,e),_(xe.$$.fragment,e),_(He.$$.fragment,e),_(Te.$$.fragment,e),_(Ge.$$.fragment,e),_(Ue.$$.fragment,e),_(Fe.$$.fragment,e),_(Me.$$.fragment,e),_(ze.$$.fragment,e),_(Ye.$$.fragment,e),_(We.$$.fragment,e),_(Ve.$$.fragment,e),_(Xe.$$.fragment,e),_(Ze.$$.fragment,e),_(et.$$.fragment,e),_(tt.$$.fragment,e),_(at.$$.fragment,e),_(ot.$$.fragment,e),Po=!1},d(e){a(O),e&&a(Ca),e&&a(S),v(ye),e&&a(Aa),e&&a(K),e&&a(Da),e&&a(N),v(be),e&&a(Ra),e&&a(V),e&&a(Oa),e&&a(b),e&&a(Sa),e&&a(L),v(Ee),e&&a(Na),e&&a(j),e&&a(La),e&&a(Z),e&&a(xa),e&&a(st),e&&a(Ia),v(je,e),e&&a(Ha),e&&a(ee),e&&a(Ta),v(qe,e),e&&a(Ga),e&&a(x),v(Pe),e&&a(Ua),e&&a(rt),e&&a(Fa),v(Ce,e),e&&a(Ma),e&&a(I),v(Ae),e&&a(za),e&&a(q),e&&a(Ba),v(De,e),e&&a(Ya),e&&a(H),v(Re),e&&a(Ja),e&&a(se),e&&a(Wa),e&&a(E),e&&a(Ka),v(Oe,e),e&&a(Qa),e&&a(le),e&&a(Va),v(Se,e),e&&a(Xa),e&&a(T),v(Ne),e&&a(Za),e&&a(it),e&&a(eo),v(Le,e),e&&a(to),e&&a(G),v(xe),e&&a(ao),e&&a($),e&&a(oo),e&&a(U),v(He),e&&a(so),e&&a(P),e&&a(lo),v(Te,e),e&&a(ro),e&&a(F),e&&a(io),v(Ge,e),e&&a(no),e&&a(C),e&&a(po),v(Ue,e),e&&a(ho),e&&a(M),v(Fe),e&&a(co),e&&a(he),e&&a(fo),v(Me,e),e&&a(mo),e&&a(z),v(ze),e&&a(uo),e&&a(nt),e&&a(go),e&&a(A),v(Ye),v(We),v(Ve),e&&a(_o),e&&a(D),e&&a(vo),v(Xe,e),e&&a(yo),e&&a(Y),v(Ze),e&&a($o),e&&a(k),e&&a(wo),v(et,e),e&&a(bo),e&&a(J),v(tt),e&&a(Eo),e&&a(ue),e&&a(ko),v(at,e),e&&a(jo),e&&a(de),e&&a(qo),v(ot,e)}}}const dn={local:"how-to-create-and-manage-a-repository",sections:[{local:"huggingfacehub-repositorymanagement-methods",sections:[{local:"list-and-filter",title:"List and filter"},{local:"inspect-model-or-dataset-metadata",title:"Inspect model or dataset metadata"},{local:"create-a-repository",title:"Create a repository"},{local:"delete-a-repository",title:"Delete a repository"},{local:"change-repository-visibility",title:"Change repository visibility"}],title:"huggingface_hub repository-management methods"},{local:"repository",sections:[{local:"clone-a-repository",title:"Clone a repository"},{local:"using-a-local-clone",title:"Using a local clone"},{local:"commit-and-push-to-a-cloned-repository",title:"Commit and push to a cloned repository"},{local:"branch",title:"Branch"},{local:"pull",title:"Pull"}],title:"Repository "}],title:"How to create and manage a repository"};function gn(Ar){return mn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class $n extends rn{constructor(O){super();nn(this,O,gn,un,pn,{})}}export{$n as default,dn as metadata};
