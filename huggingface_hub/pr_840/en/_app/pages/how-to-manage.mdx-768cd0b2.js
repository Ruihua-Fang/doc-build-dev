import{S as hp,i as cp,s as up,e as a,k as f,w as u,t as i,M as mp,c as r,d as t,m as h,a as s,x as m,h as p,b as c,F as o,g as n,y as g,L as gp,q as _,o as d,B as y,v as _p}from"../chunks/vendor-d3924577.js";import{I as k}from"../chunks/IconCopyLink-f94c3d80.js";import{C as v}from"../chunks/CodeBlock-ff545b14.js";function dp(Nl){let H,qo,D,z,Pt,ye,sr,qt,lr,Co,tt,ir,So,j,Ct,pr,nr,St,fr,hr,ve,cr,ot,ur,mr,Ro,at,gr,xo,K,$e,Rt,_r,dr,we,yr,N,be,vr,xt,$r,wr,br,Ee,Er,rt,Ht,kr,jr,Ho,O,Q,Dt,ke,Ar,Nt,Pr,Do,w,qr,st,Cr,Sr,Ot,Rr,xr,Tt,Hr,Dr,Ft,Nr,Or,No,je,Oo,A,Tr,lt,Fr,Lr,Lt,Ir,Gr,To,Ae,Fo,V,Br,It,Mr,Ur,Lo,Pe,Io,X,Yr,it,Wr,Jr,Go,T,Z,Gt,qe,zr,Bt,Kr,Bo,ee,Qr,pt,Vr,Xr,Mo,te,Zr,Mt,es,ts,Uo,Ce,Yo,P,os,Ut,as,rs,nt,ss,ls,Wo,Se,Jo,oe,is,Yt,ps,ns,zo,Re,Ko,F,ae,Wt,xe,fs,Jt,hs,Qo,ft,cs,Vo,He,Xo,L,re,zt,De,us,Kt,ms,Zo,$,gs,ht,_s,ds,Qt,ys,vs,ct,$s,ws,Ne,bs,Es,ut,ks,js,ea,I,se,Vt,Oe,As,Xt,Ps,ta,le,qs,mt,Cs,Ss,oa,Te,aa,G,ie,Zt,Fe,Rs,eo,xs,ra,q,Hs,to,Ds,Ns,oo,Os,Ts,sa,Le,la,B,ao,Fs,Ls,ro,Is,Gs,ia,Ie,pa,C,Bs,so,Ms,Us,gt,Ys,Ws,na,Ge,fa,S,Js,lo,zs,Ks,io,Qs,Vs,ha,Be,ca,M,pe,po,Me,Xs,no,Zs,ua,b,el,fo,tl,ol,ho,al,rl,co,sl,ll,ma,Ue,ga,U,ne,uo,Ye,il,mo,pl,_a,_t,nl,da,We,ya,fe,fl,go,hl,cl,va,Je,$a,Y,he,_o,ze,ul,yo,ml,wa,dt,gl,ba,Ke,Ea,ce,_l,vo,dl,yl,ka,Qe,ja,W,ue,$o,Ve,vl,wo,$l,Aa,me,wl,bo,bl,El,Pa,Xe,qa,J,ge,Eo,Ze,kl,ko,jl,Ca,_e,Al,jo,Pl,ql,Sa,et,Ra,R,Cl,Ao,Sl,Rl,yt,xl,Hl,xa;return ye=new k({}),we=new v({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),Ee=new v({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),ke=new k({}),je=new v({props:{code:`from huggingface_hub import create_repo
create_repo("lysandre/test-model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(<span class="hljs-string">&quot;lysandre/test-model&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-model&#x27;</span>`}}),Ae=new v({props:{code:`from huggingface_hub import create_repo
create_repo("lysandre/test-dataset", repo_type="dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(<span class="hljs-string">&quot;lysandre/test-dataset&quot;</span>, repo_type=<span class="hljs-string">&quot;dataset&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-dataset&#x27;</span>`}}),Pe=new v({props:{code:`from huggingface_hub import create_repo
create_repo("lysandre/test-private", private=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(<span class="hljs-string">&quot;lysandre/test-private&quot;</span>, private=<span class="hljs-literal">True</span>)`}}),qe=new k({}),Ce=new v({props:{code:"delete_repo(repo_id=name)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=name)'}}),Se=new v({props:{code:`from huggingface_hub import get_full_repo_name, delete_repo
name = get_full_repo_name(repo_name)
delete_repo(repo_id=name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> get_full_repo_name, delete_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>name = get_full_repo_name(repo_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=name)`}}),Re=new v({props:{code:'delete_repo(repo_id=REPO_NAME, repo_type="dataset")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=REPO_NAME, repo_type=<span class="hljs-string">&quot;dataset&quot;</span>)'}}),xe=new k({}),He=new v({props:{code:`from huggingface_hub import update_repo_visibility
update_repo_visibility(name=REPO_NAME, private=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> update_repo_visibility
<span class="hljs-meta">&gt;&gt;&gt; </span>update_repo_visibility(name=REPO_NAME, private=<span class="hljs-literal">True</span>)`}}),De=new k({}),Oe=new k({}),Te=new v({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="<path>/<to>/<folder>")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;&lt;path&gt;/&lt;to&gt;/&lt;folder&gt;&quot;</span>)`}}),Fe=new k({}),Le=new v({props:{code:'repo = Repository(local_dir="w2v2", clone_from="facebook/wav2vec2-large-960h-lv60")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;w2v2&quot;</span>, clone_from=<span class="hljs-string">&quot;facebook/wav2vec2-large-960h-lv60&quot;</span>)'}}),Ie=new v({props:{code:'repo = Repository(local_dir="huggingface-hub", clone_from="https://huggingface.co/facebook/wav2vec2-large-960h-lv60")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;huggingface-hub&quot;</span>, clone_from=<span class="hljs-string">&quot;https://huggingface.co/facebook/wav2vec2-large-960h-lv60&quot;</span>)'}}),Ge=new v({props:{code:`repo_url = create_repo(repo_id="repo_name")
repo = Repository(local_dir="repo_local_path", clone_from=repo_url)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo_url = create_repo(repo_id=<span class="hljs-string">&quot;repo_name&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;repo_local_path&quot;</span>, clone_from=repo_url)`}}),Be=new v({props:{code:`repo = Repository(
  "my-dataset", 
  clone_from="<user>/<dataset_id>", 
  use_auth_token=True, 
  repo_type="dataset",
  git_user="MyName",
  git_email="me@cool.mail"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;my-dataset&quot;</span>, 
<span class="hljs-meta">... </span>  clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;dataset_id&gt;&quot;</span>, 
<span class="hljs-meta">... </span>  use_auth_token=<span class="hljs-literal">True</span>, 
<span class="hljs-meta">... </span>  repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>  git_user=<span class="hljs-string">&quot;MyName&quot;</span>,
<span class="hljs-meta">... </span>  git_email=<span class="hljs-string">&quot;me@cool.mail&quot;</span>
<span class="hljs-meta">... </span>)`}}),Me=new k({}),Ue=new v({props:{code:`repo = Repository(local_dir="huggingface-hub", clone_from="<user>/<dataset_id>", revision='branch1')
repo.git_checkout("branch2")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;huggingface-hub&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;dataset_id&gt;&quot;</span>, revision=<span class="hljs-string">&#x27;branch1&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_checkout(<span class="hljs-string">&quot;branch2&quot;</span>)`}}),Ye=new k({}),We=new v({props:{code:"repo.git_pull()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()'}}),Je=new v({props:{code:"repo.git_pull(rebase=True)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull(rebase=<span class="hljs-literal">True</span>)'}}),ze=new k({}),Ke=new v({props:{code:'repo.git_add("path/to/file")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)'}}),Qe=new v({props:{code:'repo.git_add("path/to/file", auto_lfs_track=True)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>, auto_lfs_track=<span class="hljs-literal">True</span>)'}}),Ve=new k({}),Xe=new v({props:{code:'repo.git_commit(commit_message="add my first model config file :)")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)'}}),Ze=new k({}),et=new v({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),{c(){H=a("meta"),qo=f(),D=a("h1"),z=a("a"),Pt=a("span"),u(ye.$$.fragment),sr=f(),qt=a("span"),lr=i("How to create and manage a repository"),Co=f(),tt=a("p"),ir=i("A repository is a space for you to store your model or dataset files. This guide will show you how to:"),So=f(),j=a("ul"),Ct=a("li"),pr=i("Create and delete a repository."),nr=f(),St=a("li"),fr=i("Adjust repository visibility."),hr=f(),ve=a("li"),cr=i("Use the "),ot=a("a"),ur=i("Repository"),mr=i(" class for common Git operations like clone, branch, push, etc."),Ro=f(),at=a("p"),gr=i("If you want to create a repository on the Hub, you need to log in to your Hugging Face account:"),xo=f(),K=a("ol"),$e=a("li"),Rt=a("p"),_r=i("Log in to your Hugging Face account with the following command:"),dr=f(),u(we.$$.fragment),yr=f(),N=a("li"),be=a("p"),vr=i("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),xt=a("code"),$r=i("notebook_login()"),wr=i(":"),br=f(),u(Ee.$$.fragment),Er=f(),rt=a("p"),Ht=a("code"),kr=i("notebook_login()"),jr=i(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),Ho=f(),O=a("h2"),Q=a("a"),Dt=a("span"),u(ke.$$.fragment),Ar=f(),Nt=a("span"),Pr=i("Create a repository"),Do=f(),w=a("p"),qr=i("Create an empty repository with "),st=a("a"),Cr=i("create_repo()"),Sr=i(" and give it a name with the "),Ot=a("code"),Rr=i("repo_id"),xr=i(" parameter. The "),Tt=a("code"),Hr=i("repo_id"),Dr=i(" is your namespace followed by the repository name: "),Ft=a("code"),Nr=i("{username_or_org}/{repo_name}"),Or=i("."),No=f(),u(je.$$.fragment),Oo=f(),A=a("p"),Tr=i("By default, "),lt=a("a"),Fr=i("create_repo()"),Lr=i(" creates a model repository. But you can use the "),Lt=a("code"),Ir=i("repo_type"),Gr=i(" parameter to specify another repository type. For example, if you want to create a dataset repository:"),To=f(),u(Ae.$$.fragment),Fo=f(),V=a("p"),Br=i("When creating a repository, you also have the option to set your repository visibility with the "),It=a("code"),Mr=i("private"),Ur=i(" parameter. For example, if you want to create a private repository:"),Lo=f(),u(Pe.$$.fragment),Io=f(),X=a("p"),Yr=i("If you want to change the repository visibility at a later time, you can use the "),it=a("a"),Wr=i("update_repo_visibility()"),Jr=i(" function."),Go=f(),T=a("h2"),Z=a("a"),Gt=a("span"),u(qe.$$.fragment),zr=f(),Bt=a("span"),Kr=i("Delete a repository"),Bo=f(),ee=a("p"),Qr=i("Delete a repository with "),pt=a("a"),Vr=i("delete_repo()"),Xr=i(". Make sure you are certain you want to delete a repository because this is an irreversible process!"),Mo=f(),te=a("p"),Zr=i("Specify the "),Mt=a("code"),es=i("repo_id"),ts=i(" of the repository you want to delete:"),Uo=f(),u(Ce.$$.fragment),Yo=f(),P=a("p"),os=i("If you aren\u2019t sure what the "),Ut=a("code"),as=i("repo_id"),rs=i(" is or you want to quickly retrieve it, you can also use the "),nt=a("a"),ss=i("get_full_repo_name()"),ls=i(" function:"),Wo=f(),u(Se.$$.fragment),Jo=f(),oe=a("p"),is=i("You can also specify the repository type to delete by adding the "),Yt=a("code"),ps=i("repo_type"),ns=i(" parameter:"),zo=f(),u(Re.$$.fragment),Ko=f(),F=a("h2"),ae=a("a"),Wt=a("span"),u(xe.$$.fragment),fs=f(),Jt=a("span"),hs=i("Change repository visibility"),Qo=f(),ft=a("p"),cs=i("A repository can be public or private. A private repository is only visible to you or members of the organization in which the repository is located. Change a repository to private as shown in the following:"),Vo=f(),u(He.$$.fragment),Xo=f(),L=a("h2"),re=a("a"),zt=a("span"),u(De.$$.fragment),us=f(),Kt=a("span"),ms=i("The Repository class"),Zo=f(),$=a("p"),gs=i("The "),ht=a("a"),_s=i("Repository"),ds=i(" class allows you to interact with files and repositories on the Hub with functions similar to "),Qt=a("code"),ys=i("git"),vs=i(" commands. "),ct=a("a"),$s=i("Repository"),ws=i(" is a wrapper over Git and Git-LFS methods, so make sure you have Git-LFS installed (see "),Ne=a("a"),bs=i("here"),Es=i(" for installation instructions) and set up before you begin. With "),ut=a("a"),ks=i("Repository"),js=i(", you can use the Git commands you already know and love."),ea=f(),I=a("h3"),se=a("a"),Vt=a("span"),u(Oe.$$.fragment),As=f(),Xt=a("span"),Ps=i("Use a local repository"),ta=f(),le=a("p"),qs=i("Instantiate a "),mt=a("a"),Cs=i("Repository"),Ss=i(" object with a path to a local repository:"),oa=f(),u(Te.$$.fragment),aa=f(),G=a("h3"),ie=a("a"),Zt=a("span"),u(Fe.$$.fragment),Rs=f(),eo=a("span"),xs=i("Clone"),ra=f(),q=a("p"),Hs=i("The "),to=a("code"),Ds=i("clone_from"),Ns=i(" parameter clones a repository from a Hugging Face repository ID to a local directory specified by the "),oo=a("code"),Os=i("local_dir"),Ts=i(" argument:"),sa=f(),u(Le.$$.fragment),la=f(),B=a("p"),ao=a("code"),Fs=i("clone_from"),Ls=i(" can also clone a repository from a specified directory using a URL (if you are working offline, this parameter should be "),ro=a("code"),Is=i("None"),Gs=i("):"),ia=f(),u(Ie.$$.fragment),pa=f(),C=a("p"),Bs=i("You can combine the "),so=a("code"),Ms=i("clone_from"),Us=i(" parameter with "),gt=a("a"),Ys=i("create_repo()"),Ws=i(" to create and clone a repository:"),na=f(),u(Ge.$$.fragment),fa=f(),S=a("p"),Js=i("You can also attribute a Git username and email to a cloned repository by specifying the "),lo=a("code"),zs=i("git_user"),Ks=i(" and "),io=a("code"),Qs=i("git_email"),Vs=i(" parameters. When users commit to that repository, Git will be aware of the commit author."),ha=f(),u(Be.$$.fragment),ca=f(),M=a("h3"),pe=a("a"),po=a("span"),u(Me.$$.fragment),Xs=f(),no=a("span"),Zs=i("Branch"),ua=f(),b=a("p"),el=i("Branches are important for collaboration and experimentation without impacting your current files and code. Switch between branches with "),fo=a("code"),tl=i("git_checkout"),ol=i(". For example, if you want to switch from "),ho=a("code"),al=i("branch1"),rl=i(" to "),co=a("code"),sl=i("branch2"),ll=i(":"),ma=f(),u(Ue.$$.fragment),ga=f(),U=a("h3"),ne=a("a"),uo=a("span"),u(Ye.$$.fragment),il=f(),mo=a("span"),pl=i("Pull"),_a=f(),_t=a("p"),nl=i("Pull allows you to update a current local branch with changes from a remote repository:"),da=f(),u(We.$$.fragment),ya=f(),fe=a("p"),fl=i("Set "),go=a("code"),hl=i("rebase=True"),cl=i(" if you want your local commits to occur after your branch is updated with the new commits from the remote:"),va=f(),u(Je.$$.fragment),$a=f(),Y=a("h3"),he=a("a"),_o=a("span"),u(ze.$$.fragment),ul=f(),yo=a("span"),ml=i("Add"),wa=f(),dt=a("p"),gl=i("Stage a file to add to your repository with [`git_add]:"),ba=f(),u(Ke.$$.fragment),Ea=f(),ce=a("p"),_l=i("To automatically track large files (>10MB), set "),vo=a("code"),dl=i("auto_lfs_track=True"),yl=i(":"),ka=f(),u(Qe.$$.fragment),ja=f(),W=a("h3"),ue=a("a"),$o=a("span"),u(Ve.$$.fragment),vl=f(),wo=a("span"),$l=i("Commit"),Aa=f(),me=a("p"),wl=i("After staging a file to add, commit the staged changes with "),bo=a("code"),bl=i("git_commit"),El=i(". You can also add a commit message to describe the changes:"),Pa=f(),u(Xe.$$.fragment),qa=f(),J=a("h3"),ge=a("a"),Eo=a("span"),u(Ze.$$.fragment),kl=f(),ko=a("span"),jl=i("Push"),Ca=f(),_e=a("p"),Al=i("Finally, push your file to your repository with "),jo=a("code"),Pl=i("git_push"),ql=i(":"),Sa=f(),u(et.$$.fragment),Ra=f(),R=a("p"),Cl=i("Since this workflow is so common, there is a "),Ao=a("code"),Sl=i("commit"),Rl=i(" context manager to pull, add, commit and push files all in one step (see this "),yt=a("a"),xl=i("guide"),Hl=i(" for more details)."),this.h()},l(e){const l=mp('[data-svelte="svelte-1phssyn"]',document.head);H=r(l,"META",{name:!0,content:!0}),l.forEach(t),qo=h(e),D=r(e,"H1",{class:!0});var Ha=s(D);z=r(Ha,"A",{id:!0,class:!0,href:!0});var Ol=s(z);Pt=r(Ol,"SPAN",{});var Tl=s(Pt);m(ye.$$.fragment,Tl),Tl.forEach(t),Ol.forEach(t),sr=h(Ha),qt=r(Ha,"SPAN",{});var Fl=s(qt);lr=p(Fl,"How to create and manage a repository"),Fl.forEach(t),Ha.forEach(t),Co=h(e),tt=r(e,"P",{});var Ll=s(tt);ir=p(Ll,"A repository is a space for you to store your model or dataset files. This guide will show you how to:"),Ll.forEach(t),So=h(e),j=r(e,"UL",{});var vt=s(j);Ct=r(vt,"LI",{});var Il=s(Ct);pr=p(Il,"Create and delete a repository."),Il.forEach(t),nr=h(vt),St=r(vt,"LI",{});var Gl=s(St);fr=p(Gl,"Adjust repository visibility."),Gl.forEach(t),hr=h(vt),ve=r(vt,"LI",{});var Da=s(ve);cr=p(Da,"Use the "),ot=r(Da,"A",{href:!0});var Bl=s(ot);ur=p(Bl,"Repository"),Bl.forEach(t),mr=p(Da," class for common Git operations like clone, branch, push, etc."),Da.forEach(t),vt.forEach(t),Ro=h(e),at=r(e,"P",{});var Ml=s(at);gr=p(Ml,"If you want to create a repository on the Hub, you need to log in to your Hugging Face account:"),Ml.forEach(t),xo=h(e),K=r(e,"OL",{});var Na=s(K);$e=r(Na,"LI",{});var Oa=s($e);Rt=r(Oa,"P",{});var Ul=s(Rt);_r=p(Ul,"Log in to your Hugging Face account with the following command:"),Ul.forEach(t),dr=h(Oa),m(we.$$.fragment,Oa),Oa.forEach(t),yr=h(Na),N=r(Na,"LI",{});var $t=s(N);be=r($t,"P",{});var Ta=s(be);vr=p(Ta,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),xt=r(Ta,"CODE",{});var Yl=s(xt);$r=p(Yl,"notebook_login()"),Yl.forEach(t),wr=p(Ta,":"),Ta.forEach(t),br=h($t),m(Ee.$$.fragment,$t),Er=h($t),rt=r($t,"P",{});var Dl=s(rt);Ht=r(Dl,"CODE",{});var Wl=s(Ht);kr=p(Wl,"notebook_login()"),Wl.forEach(t),jr=p(Dl," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),Dl.forEach(t),$t.forEach(t),Na.forEach(t),Ho=h(e),O=r(e,"H2",{class:!0});var Fa=s(O);Q=r(Fa,"A",{id:!0,class:!0,href:!0});var Jl=s(Q);Dt=r(Jl,"SPAN",{});var zl=s(Dt);m(ke.$$.fragment,zl),zl.forEach(t),Jl.forEach(t),Ar=h(Fa),Nt=r(Fa,"SPAN",{});var Kl=s(Nt);Pr=p(Kl,"Create a repository"),Kl.forEach(t),Fa.forEach(t),Do=h(e),w=r(e,"P",{});var x=s(w);qr=p(x,"Create an empty repository with "),st=r(x,"A",{href:!0});var Ql=s(st);Cr=p(Ql,"create_repo()"),Ql.forEach(t),Sr=p(x," and give it a name with the "),Ot=r(x,"CODE",{});var Vl=s(Ot);Rr=p(Vl,"repo_id"),Vl.forEach(t),xr=p(x," parameter. The "),Tt=r(x,"CODE",{});var Xl=s(Tt);Hr=p(Xl,"repo_id"),Xl.forEach(t),Dr=p(x," is your namespace followed by the repository name: "),Ft=r(x,"CODE",{});var Zl=s(Ft);Nr=p(Zl,"{username_or_org}/{repo_name}"),Zl.forEach(t),Or=p(x,"."),x.forEach(t),No=h(e),m(je.$$.fragment,e),Oo=h(e),A=r(e,"P",{});var wt=s(A);Tr=p(wt,"By default, "),lt=r(wt,"A",{href:!0});var ei=s(lt);Fr=p(ei,"create_repo()"),ei.forEach(t),Lr=p(wt," creates a model repository. But you can use the "),Lt=r(wt,"CODE",{});var ti=s(Lt);Ir=p(ti,"repo_type"),ti.forEach(t),Gr=p(wt," parameter to specify another repository type. For example, if you want to create a dataset repository:"),wt.forEach(t),To=h(e),m(Ae.$$.fragment,e),Fo=h(e),V=r(e,"P",{});var La=s(V);Br=p(La,"When creating a repository, you also have the option to set your repository visibility with the "),It=r(La,"CODE",{});var oi=s(It);Mr=p(oi,"private"),oi.forEach(t),Ur=p(La," parameter. For example, if you want to create a private repository:"),La.forEach(t),Lo=h(e),m(Pe.$$.fragment,e),Io=h(e),X=r(e,"P",{});var Ia=s(X);Yr=p(Ia,"If you want to change the repository visibility at a later time, you can use the "),it=r(Ia,"A",{href:!0});var ai=s(it);Wr=p(ai,"update_repo_visibility()"),ai.forEach(t),Jr=p(Ia," function."),Ia.forEach(t),Go=h(e),T=r(e,"H2",{class:!0});var Ga=s(T);Z=r(Ga,"A",{id:!0,class:!0,href:!0});var ri=s(Z);Gt=r(ri,"SPAN",{});var si=s(Gt);m(qe.$$.fragment,si),si.forEach(t),ri.forEach(t),zr=h(Ga),Bt=r(Ga,"SPAN",{});var li=s(Bt);Kr=p(li,"Delete a repository"),li.forEach(t),Ga.forEach(t),Bo=h(e),ee=r(e,"P",{});var Ba=s(ee);Qr=p(Ba,"Delete a repository with "),pt=r(Ba,"A",{href:!0});var ii=s(pt);Vr=p(ii,"delete_repo()"),ii.forEach(t),Xr=p(Ba,". Make sure you are certain you want to delete a repository because this is an irreversible process!"),Ba.forEach(t),Mo=h(e),te=r(e,"P",{});var Ma=s(te);Zr=p(Ma,"Specify the "),Mt=r(Ma,"CODE",{});var pi=s(Mt);es=p(pi,"repo_id"),pi.forEach(t),ts=p(Ma," of the repository you want to delete:"),Ma.forEach(t),Uo=h(e),m(Ce.$$.fragment,e),Yo=h(e),P=r(e,"P",{});var bt=s(P);os=p(bt,"If you aren\u2019t sure what the "),Ut=r(bt,"CODE",{});var ni=s(Ut);as=p(ni,"repo_id"),ni.forEach(t),rs=p(bt," is or you want to quickly retrieve it, you can also use the "),nt=r(bt,"A",{href:!0});var fi=s(nt);ss=p(fi,"get_full_repo_name()"),fi.forEach(t),ls=p(bt," function:"),bt.forEach(t),Wo=h(e),m(Se.$$.fragment,e),Jo=h(e),oe=r(e,"P",{});var Ua=s(oe);is=p(Ua,"You can also specify the repository type to delete by adding the "),Yt=r(Ua,"CODE",{});var hi=s(Yt);ps=p(hi,"repo_type"),hi.forEach(t),ns=p(Ua," parameter:"),Ua.forEach(t),zo=h(e),m(Re.$$.fragment,e),Ko=h(e),F=r(e,"H2",{class:!0});var Ya=s(F);ae=r(Ya,"A",{id:!0,class:!0,href:!0});var ci=s(ae);Wt=r(ci,"SPAN",{});var ui=s(Wt);m(xe.$$.fragment,ui),ui.forEach(t),ci.forEach(t),fs=h(Ya),Jt=r(Ya,"SPAN",{});var mi=s(Jt);hs=p(mi,"Change repository visibility"),mi.forEach(t),Ya.forEach(t),Qo=h(e),ft=r(e,"P",{});var gi=s(ft);cs=p(gi,"A repository can be public or private. A private repository is only visible to you or members of the organization in which the repository is located. Change a repository to private as shown in the following:"),gi.forEach(t),Vo=h(e),m(He.$$.fragment,e),Xo=h(e),L=r(e,"H2",{class:!0});var Wa=s(L);re=r(Wa,"A",{id:!0,class:!0,href:!0});var _i=s(re);zt=r(_i,"SPAN",{});var di=s(zt);m(De.$$.fragment,di),di.forEach(t),_i.forEach(t),us=h(Wa),Kt=r(Wa,"SPAN",{});var yi=s(Kt);ms=p(yi,"The Repository class"),yi.forEach(t),Wa.forEach(t),Zo=h(e),$=r(e,"P",{});var E=s($);gs=p(E,"The "),ht=r(E,"A",{href:!0});var vi=s(ht);_s=p(vi,"Repository"),vi.forEach(t),ds=p(E," class allows you to interact with files and repositories on the Hub with functions similar to "),Qt=r(E,"CODE",{});var $i=s(Qt);ys=p($i,"git"),$i.forEach(t),vs=p(E," commands. "),ct=r(E,"A",{href:!0});var wi=s(ct);$s=p(wi,"Repository"),wi.forEach(t),ws=p(E," is a wrapper over Git and Git-LFS methods, so make sure you have Git-LFS installed (see "),Ne=r(E,"A",{href:!0,rel:!0});var bi=s(Ne);bs=p(bi,"here"),bi.forEach(t),Es=p(E," for installation instructions) and set up before you begin. With "),ut=r(E,"A",{href:!0});var Ei=s(ut);ks=p(Ei,"Repository"),Ei.forEach(t),js=p(E,", you can use the Git commands you already know and love."),E.forEach(t),ea=h(e),I=r(e,"H3",{class:!0});var Ja=s(I);se=r(Ja,"A",{id:!0,class:!0,href:!0});var ki=s(se);Vt=r(ki,"SPAN",{});var ji=s(Vt);m(Oe.$$.fragment,ji),ji.forEach(t),ki.forEach(t),As=h(Ja),Xt=r(Ja,"SPAN",{});var Ai=s(Xt);Ps=p(Ai,"Use a local repository"),Ai.forEach(t),Ja.forEach(t),ta=h(e),le=r(e,"P",{});var za=s(le);qs=p(za,"Instantiate a "),mt=r(za,"A",{href:!0});var Pi=s(mt);Cs=p(Pi,"Repository"),Pi.forEach(t),Ss=p(za," object with a path to a local repository:"),za.forEach(t),oa=h(e),m(Te.$$.fragment,e),aa=h(e),G=r(e,"H3",{class:!0});var Ka=s(G);ie=r(Ka,"A",{id:!0,class:!0,href:!0});var qi=s(ie);Zt=r(qi,"SPAN",{});var Ci=s(Zt);m(Fe.$$.fragment,Ci),Ci.forEach(t),qi.forEach(t),Rs=h(Ka),eo=r(Ka,"SPAN",{});var Si=s(eo);xs=p(Si,"Clone"),Si.forEach(t),Ka.forEach(t),ra=h(e),q=r(e,"P",{});var Et=s(q);Hs=p(Et,"The "),to=r(Et,"CODE",{});var Ri=s(to);Ds=p(Ri,"clone_from"),Ri.forEach(t),Ns=p(Et," parameter clones a repository from a Hugging Face repository ID to a local directory specified by the "),oo=r(Et,"CODE",{});var xi=s(oo);Os=p(xi,"local_dir"),xi.forEach(t),Ts=p(Et," argument:"),Et.forEach(t),sa=h(e),m(Le.$$.fragment,e),la=h(e),B=r(e,"P",{});var Po=s(B);ao=r(Po,"CODE",{});var Hi=s(ao);Fs=p(Hi,"clone_from"),Hi.forEach(t),Ls=p(Po," can also clone a repository from a specified directory using a URL (if you are working offline, this parameter should be "),ro=r(Po,"CODE",{});var Di=s(ro);Is=p(Di,"None"),Di.forEach(t),Gs=p(Po,"):"),Po.forEach(t),ia=h(e),m(Ie.$$.fragment,e),pa=h(e),C=r(e,"P",{});var kt=s(C);Bs=p(kt,"You can combine the "),so=r(kt,"CODE",{});var Ni=s(so);Ms=p(Ni,"clone_from"),Ni.forEach(t),Us=p(kt," parameter with "),gt=r(kt,"A",{href:!0});var Oi=s(gt);Ys=p(Oi,"create_repo()"),Oi.forEach(t),Ws=p(kt," to create and clone a repository:"),kt.forEach(t),na=h(e),m(Ge.$$.fragment,e),fa=h(e),S=r(e,"P",{});var jt=s(S);Js=p(jt,"You can also attribute a Git username and email to a cloned repository by specifying the "),lo=r(jt,"CODE",{});var Ti=s(lo);zs=p(Ti,"git_user"),Ti.forEach(t),Ks=p(jt," and "),io=r(jt,"CODE",{});var Fi=s(io);Qs=p(Fi,"git_email"),Fi.forEach(t),Vs=p(jt," parameters. When users commit to that repository, Git will be aware of the commit author."),jt.forEach(t),ha=h(e),m(Be.$$.fragment,e),ca=h(e),M=r(e,"H3",{class:!0});var Qa=s(M);pe=r(Qa,"A",{id:!0,class:!0,href:!0});var Li=s(pe);po=r(Li,"SPAN",{});var Ii=s(po);m(Me.$$.fragment,Ii),Ii.forEach(t),Li.forEach(t),Xs=h(Qa),no=r(Qa,"SPAN",{});var Gi=s(no);Zs=p(Gi,"Branch"),Gi.forEach(t),Qa.forEach(t),ua=h(e),b=r(e,"P",{});var de=s(b);el=p(de,"Branches are important for collaboration and experimentation without impacting your current files and code. Switch between branches with "),fo=r(de,"CODE",{});var Bi=s(fo);tl=p(Bi,"git_checkout"),Bi.forEach(t),ol=p(de,". For example, if you want to switch from "),ho=r(de,"CODE",{});var Mi=s(ho);al=p(Mi,"branch1"),Mi.forEach(t),rl=p(de," to "),co=r(de,"CODE",{});var Ui=s(co);sl=p(Ui,"branch2"),Ui.forEach(t),ll=p(de,":"),de.forEach(t),ma=h(e),m(Ue.$$.fragment,e),ga=h(e),U=r(e,"H3",{class:!0});var Va=s(U);ne=r(Va,"A",{id:!0,class:!0,href:!0});var Yi=s(ne);uo=r(Yi,"SPAN",{});var Wi=s(uo);m(Ye.$$.fragment,Wi),Wi.forEach(t),Yi.forEach(t),il=h(Va),mo=r(Va,"SPAN",{});var Ji=s(mo);pl=p(Ji,"Pull"),Ji.forEach(t),Va.forEach(t),_a=h(e),_t=r(e,"P",{});var zi=s(_t);nl=p(zi,"Pull allows you to update a current local branch with changes from a remote repository:"),zi.forEach(t),da=h(e),m(We.$$.fragment,e),ya=h(e),fe=r(e,"P",{});var Xa=s(fe);fl=p(Xa,"Set "),go=r(Xa,"CODE",{});var Ki=s(go);hl=p(Ki,"rebase=True"),Ki.forEach(t),cl=p(Xa," if you want your local commits to occur after your branch is updated with the new commits from the remote:"),Xa.forEach(t),va=h(e),m(Je.$$.fragment,e),$a=h(e),Y=r(e,"H3",{class:!0});var Za=s(Y);he=r(Za,"A",{id:!0,class:!0,href:!0});var Qi=s(he);_o=r(Qi,"SPAN",{});var Vi=s(_o);m(ze.$$.fragment,Vi),Vi.forEach(t),Qi.forEach(t),ul=h(Za),yo=r(Za,"SPAN",{});var Xi=s(yo);ml=p(Xi,"Add"),Xi.forEach(t),Za.forEach(t),wa=h(e),dt=r(e,"P",{});var Zi=s(dt);gl=p(Zi,"Stage a file to add to your repository with [`git_add]:"),Zi.forEach(t),ba=h(e),m(Ke.$$.fragment,e),Ea=h(e),ce=r(e,"P",{});var er=s(ce);_l=p(er,"To automatically track large files (>10MB), set "),vo=r(er,"CODE",{});var ep=s(vo);dl=p(ep,"auto_lfs_track=True"),ep.forEach(t),yl=p(er,":"),er.forEach(t),ka=h(e),m(Qe.$$.fragment,e),ja=h(e),W=r(e,"H3",{class:!0});var tr=s(W);ue=r(tr,"A",{id:!0,class:!0,href:!0});var tp=s(ue);$o=r(tp,"SPAN",{});var op=s($o);m(Ve.$$.fragment,op),op.forEach(t),tp.forEach(t),vl=h(tr),wo=r(tr,"SPAN",{});var ap=s(wo);$l=p(ap,"Commit"),ap.forEach(t),tr.forEach(t),Aa=h(e),me=r(e,"P",{});var or=s(me);wl=p(or,"After staging a file to add, commit the staged changes with "),bo=r(or,"CODE",{});var rp=s(bo);bl=p(rp,"git_commit"),rp.forEach(t),El=p(or,". You can also add a commit message to describe the changes:"),or.forEach(t),Pa=h(e),m(Xe.$$.fragment,e),qa=h(e),J=r(e,"H3",{class:!0});var ar=s(J);ge=r(ar,"A",{id:!0,class:!0,href:!0});var sp=s(ge);Eo=r(sp,"SPAN",{});var lp=s(Eo);m(Ze.$$.fragment,lp),lp.forEach(t),sp.forEach(t),kl=h(ar),ko=r(ar,"SPAN",{});var ip=s(ko);jl=p(ip,"Push"),ip.forEach(t),ar.forEach(t),Ca=h(e),_e=r(e,"P",{});var rr=s(_e);Al=p(rr,"Finally, push your file to your repository with "),jo=r(rr,"CODE",{});var pp=s(jo);Pl=p(pp,"git_push"),pp.forEach(t),ql=p(rr,":"),rr.forEach(t),Sa=h(e),m(et.$$.fragment,e),Ra=h(e),R=r(e,"P",{});var At=s(R);Cl=p(At,"Since this workflow is so common, there is a "),Ao=r(At,"CODE",{});var np=s(Ao);Sl=p(np,"commit"),np.forEach(t),Rl=p(At," context manager to pull, add, commit and push files all in one step (see this "),yt=r(At,"A",{href:!0});var fp=s(yt);xl=p(fp,"guide"),fp.forEach(t),Hl=p(At," for more details)."),At.forEach(t),this.h()},h(){c(H,"name","hf:doc:metadata"),c(H,"content",JSON.stringify(yp)),c(z,"id","how-to-create-and-manage-a-repository"),c(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z,"href","#how-to-create-and-manage-a-repository"),c(D,"class","relative group"),c(ot,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),c(Q,"id","create-a-repository"),c(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q,"href","#create-a-repository"),c(O,"class","relative group"),c(st,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo"),c(lt,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo"),c(it,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.update_repo_visibility"),c(Z,"id","delete-a-repository"),c(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z,"href","#delete-a-repository"),c(T,"class","relative group"),c(pt,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.delete_repo"),c(nt,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.get_full_repo_name"),c(ae,"id","change-repository-visibility"),c(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ae,"href","#change-repository-visibility"),c(F,"class","relative group"),c(re,"id","the-repository-class"),c(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(re,"href","#the-repository-class"),c(L,"class","relative group"),c(ht,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),c(ct,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),c(Ne,"href","https://git-lfs.github.com/"),c(Ne,"rel","nofollow"),c(ut,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),c(se,"id","use-a-local-repository"),c(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(se,"href","#use-a-local-repository"),c(I,"class","relative group"),c(mt,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),c(ie,"id","clone"),c(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ie,"href","#clone"),c(G,"class","relative group"),c(gt,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo"),c(pe,"id","branch"),c(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pe,"href","#branch"),c(M,"class","relative group"),c(ne,"id","pull"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#pull"),c(U,"class","relative group"),c(he,"id","add"),c(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(he,"href","#add"),c(Y,"class","relative group"),c(ue,"id","commit"),c(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ue,"href","#commit"),c(W,"class","relative group"),c(ge,"id","push"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#push"),c(J,"class","relative group"),c(yt,"href","how-to-upstream#commit-context-manager")},m(e,l){o(document.head,H),n(e,qo,l),n(e,D,l),o(D,z),o(z,Pt),g(ye,Pt,null),o(D,sr),o(D,qt),o(qt,lr),n(e,Co,l),n(e,tt,l),o(tt,ir),n(e,So,l),n(e,j,l),o(j,Ct),o(Ct,pr),o(j,nr),o(j,St),o(St,fr),o(j,hr),o(j,ve),o(ve,cr),o(ve,ot),o(ot,ur),o(ve,mr),n(e,Ro,l),n(e,at,l),o(at,gr),n(e,xo,l),n(e,K,l),o(K,$e),o($e,Rt),o(Rt,_r),o($e,dr),g(we,$e,null),o(K,yr),o(K,N),o(N,be),o(be,vr),o(be,xt),o(xt,$r),o(be,wr),o(N,br),g(Ee,N,null),o(N,Er),o(N,rt),o(rt,Ht),o(Ht,kr),o(rt,jr),n(e,Ho,l),n(e,O,l),o(O,Q),o(Q,Dt),g(ke,Dt,null),o(O,Ar),o(O,Nt),o(Nt,Pr),n(e,Do,l),n(e,w,l),o(w,qr),o(w,st),o(st,Cr),o(w,Sr),o(w,Ot),o(Ot,Rr),o(w,xr),o(w,Tt),o(Tt,Hr),o(w,Dr),o(w,Ft),o(Ft,Nr),o(w,Or),n(e,No,l),g(je,e,l),n(e,Oo,l),n(e,A,l),o(A,Tr),o(A,lt),o(lt,Fr),o(A,Lr),o(A,Lt),o(Lt,Ir),o(A,Gr),n(e,To,l),g(Ae,e,l),n(e,Fo,l),n(e,V,l),o(V,Br),o(V,It),o(It,Mr),o(V,Ur),n(e,Lo,l),g(Pe,e,l),n(e,Io,l),n(e,X,l),o(X,Yr),o(X,it),o(it,Wr),o(X,Jr),n(e,Go,l),n(e,T,l),o(T,Z),o(Z,Gt),g(qe,Gt,null),o(T,zr),o(T,Bt),o(Bt,Kr),n(e,Bo,l),n(e,ee,l),o(ee,Qr),o(ee,pt),o(pt,Vr),o(ee,Xr),n(e,Mo,l),n(e,te,l),o(te,Zr),o(te,Mt),o(Mt,es),o(te,ts),n(e,Uo,l),g(Ce,e,l),n(e,Yo,l),n(e,P,l),o(P,os),o(P,Ut),o(Ut,as),o(P,rs),o(P,nt),o(nt,ss),o(P,ls),n(e,Wo,l),g(Se,e,l),n(e,Jo,l),n(e,oe,l),o(oe,is),o(oe,Yt),o(Yt,ps),o(oe,ns),n(e,zo,l),g(Re,e,l),n(e,Ko,l),n(e,F,l),o(F,ae),o(ae,Wt),g(xe,Wt,null),o(F,fs),o(F,Jt),o(Jt,hs),n(e,Qo,l),n(e,ft,l),o(ft,cs),n(e,Vo,l),g(He,e,l),n(e,Xo,l),n(e,L,l),o(L,re),o(re,zt),g(De,zt,null),o(L,us),o(L,Kt),o(Kt,ms),n(e,Zo,l),n(e,$,l),o($,gs),o($,ht),o(ht,_s),o($,ds),o($,Qt),o(Qt,ys),o($,vs),o($,ct),o(ct,$s),o($,ws),o($,Ne),o(Ne,bs),o($,Es),o($,ut),o(ut,ks),o($,js),n(e,ea,l),n(e,I,l),o(I,se),o(se,Vt),g(Oe,Vt,null),o(I,As),o(I,Xt),o(Xt,Ps),n(e,ta,l),n(e,le,l),o(le,qs),o(le,mt),o(mt,Cs),o(le,Ss),n(e,oa,l),g(Te,e,l),n(e,aa,l),n(e,G,l),o(G,ie),o(ie,Zt),g(Fe,Zt,null),o(G,Rs),o(G,eo),o(eo,xs),n(e,ra,l),n(e,q,l),o(q,Hs),o(q,to),o(to,Ds),o(q,Ns),o(q,oo),o(oo,Os),o(q,Ts),n(e,sa,l),g(Le,e,l),n(e,la,l),n(e,B,l),o(B,ao),o(ao,Fs),o(B,Ls),o(B,ro),o(ro,Is),o(B,Gs),n(e,ia,l),g(Ie,e,l),n(e,pa,l),n(e,C,l),o(C,Bs),o(C,so),o(so,Ms),o(C,Us),o(C,gt),o(gt,Ys),o(C,Ws),n(e,na,l),g(Ge,e,l),n(e,fa,l),n(e,S,l),o(S,Js),o(S,lo),o(lo,zs),o(S,Ks),o(S,io),o(io,Qs),o(S,Vs),n(e,ha,l),g(Be,e,l),n(e,ca,l),n(e,M,l),o(M,pe),o(pe,po),g(Me,po,null),o(M,Xs),o(M,no),o(no,Zs),n(e,ua,l),n(e,b,l),o(b,el),o(b,fo),o(fo,tl),o(b,ol),o(b,ho),o(ho,al),o(b,rl),o(b,co),o(co,sl),o(b,ll),n(e,ma,l),g(Ue,e,l),n(e,ga,l),n(e,U,l),o(U,ne),o(ne,uo),g(Ye,uo,null),o(U,il),o(U,mo),o(mo,pl),n(e,_a,l),n(e,_t,l),o(_t,nl),n(e,da,l),g(We,e,l),n(e,ya,l),n(e,fe,l),o(fe,fl),o(fe,go),o(go,hl),o(fe,cl),n(e,va,l),g(Je,e,l),n(e,$a,l),n(e,Y,l),o(Y,he),o(he,_o),g(ze,_o,null),o(Y,ul),o(Y,yo),o(yo,ml),n(e,wa,l),n(e,dt,l),o(dt,gl),n(e,ba,l),g(Ke,e,l),n(e,Ea,l),n(e,ce,l),o(ce,_l),o(ce,vo),o(vo,dl),o(ce,yl),n(e,ka,l),g(Qe,e,l),n(e,ja,l),n(e,W,l),o(W,ue),o(ue,$o),g(Ve,$o,null),o(W,vl),o(W,wo),o(wo,$l),n(e,Aa,l),n(e,me,l),o(me,wl),o(me,bo),o(bo,bl),o(me,El),n(e,Pa,l),g(Xe,e,l),n(e,qa,l),n(e,J,l),o(J,ge),o(ge,Eo),g(Ze,Eo,null),o(J,kl),o(J,ko),o(ko,jl),n(e,Ca,l),n(e,_e,l),o(_e,Al),o(_e,jo),o(jo,Pl),o(_e,ql),n(e,Sa,l),g(et,e,l),n(e,Ra,l),n(e,R,l),o(R,Cl),o(R,Ao),o(Ao,Sl),o(R,Rl),o(R,yt),o(yt,xl),o(R,Hl),xa=!0},p:gp,i(e){xa||(_(ye.$$.fragment,e),_(we.$$.fragment,e),_(Ee.$$.fragment,e),_(ke.$$.fragment,e),_(je.$$.fragment,e),_(Ae.$$.fragment,e),_(Pe.$$.fragment,e),_(qe.$$.fragment,e),_(Ce.$$.fragment,e),_(Se.$$.fragment,e),_(Re.$$.fragment,e),_(xe.$$.fragment,e),_(He.$$.fragment,e),_(De.$$.fragment,e),_(Oe.$$.fragment,e),_(Te.$$.fragment,e),_(Fe.$$.fragment,e),_(Le.$$.fragment,e),_(Ie.$$.fragment,e),_(Ge.$$.fragment,e),_(Be.$$.fragment,e),_(Me.$$.fragment,e),_(Ue.$$.fragment,e),_(Ye.$$.fragment,e),_(We.$$.fragment,e),_(Je.$$.fragment,e),_(ze.$$.fragment,e),_(Ke.$$.fragment,e),_(Qe.$$.fragment,e),_(Ve.$$.fragment,e),_(Xe.$$.fragment,e),_(Ze.$$.fragment,e),_(et.$$.fragment,e),xa=!0)},o(e){d(ye.$$.fragment,e),d(we.$$.fragment,e),d(Ee.$$.fragment,e),d(ke.$$.fragment,e),d(je.$$.fragment,e),d(Ae.$$.fragment,e),d(Pe.$$.fragment,e),d(qe.$$.fragment,e),d(Ce.$$.fragment,e),d(Se.$$.fragment,e),d(Re.$$.fragment,e),d(xe.$$.fragment,e),d(He.$$.fragment,e),d(De.$$.fragment,e),d(Oe.$$.fragment,e),d(Te.$$.fragment,e),d(Fe.$$.fragment,e),d(Le.$$.fragment,e),d(Ie.$$.fragment,e),d(Ge.$$.fragment,e),d(Be.$$.fragment,e),d(Me.$$.fragment,e),d(Ue.$$.fragment,e),d(Ye.$$.fragment,e),d(We.$$.fragment,e),d(Je.$$.fragment,e),d(ze.$$.fragment,e),d(Ke.$$.fragment,e),d(Qe.$$.fragment,e),d(Ve.$$.fragment,e),d(Xe.$$.fragment,e),d(Ze.$$.fragment,e),d(et.$$.fragment,e),xa=!1},d(e){t(H),e&&t(qo),e&&t(D),y(ye),e&&t(Co),e&&t(tt),e&&t(So),e&&t(j),e&&t(Ro),e&&t(at),e&&t(xo),e&&t(K),y(we),y(Ee),e&&t(Ho),e&&t(O),y(ke),e&&t(Do),e&&t(w),e&&t(No),y(je,e),e&&t(Oo),e&&t(A),e&&t(To),y(Ae,e),e&&t(Fo),e&&t(V),e&&t(Lo),y(Pe,e),e&&t(Io),e&&t(X),e&&t(Go),e&&t(T),y(qe),e&&t(Bo),e&&t(ee),e&&t(Mo),e&&t(te),e&&t(Uo),y(Ce,e),e&&t(Yo),e&&t(P),e&&t(Wo),y(Se,e),e&&t(Jo),e&&t(oe),e&&t(zo),y(Re,e),e&&t(Ko),e&&t(F),y(xe),e&&t(Qo),e&&t(ft),e&&t(Vo),y(He,e),e&&t(Xo),e&&t(L),y(De),e&&t(Zo),e&&t($),e&&t(ea),e&&t(I),y(Oe),e&&t(ta),e&&t(le),e&&t(oa),y(Te,e),e&&t(aa),e&&t(G),y(Fe),e&&t(ra),e&&t(q),e&&t(sa),y(Le,e),e&&t(la),e&&t(B),e&&t(ia),y(Ie,e),e&&t(pa),e&&t(C),e&&t(na),y(Ge,e),e&&t(fa),e&&t(S),e&&t(ha),y(Be,e),e&&t(ca),e&&t(M),y(Me),e&&t(ua),e&&t(b),e&&t(ma),y(Ue,e),e&&t(ga),e&&t(U),y(Ye),e&&t(_a),e&&t(_t),e&&t(da),y(We,e),e&&t(ya),e&&t(fe),e&&t(va),y(Je,e),e&&t($a),e&&t(Y),y(ze),e&&t(wa),e&&t(dt),e&&t(ba),y(Ke,e),e&&t(Ea),e&&t(ce),e&&t(ka),y(Qe,e),e&&t(ja),e&&t(W),y(Ve),e&&t(Aa),e&&t(me),e&&t(Pa),y(Xe,e),e&&t(qa),e&&t(J),y(Ze),e&&t(Ca),e&&t(_e),e&&t(Sa),y(et,e),e&&t(Ra),e&&t(R)}}}const yp={local:"how-to-create-and-manage-a-repository",sections:[{local:"create-a-repository",title:"Create a repository"},{local:"delete-a-repository",title:"Delete a repository"},{local:"change-repository-visibility",title:"Change repository visibility"},{local:"the-repository-class",sections:[{local:"use-a-local-repository",title:"Use a local repository"},{local:"clone",title:"Clone"},{local:"branch",title:"Branch"},{local:"pull",title:"Pull"},{local:"add",title:"Add"},{local:"commit",title:"Commit"},{local:"push",title:"Push"}],title:"The Repository class "}],title:"How to create and manage a repository"};function vp(Nl){return _p(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ep extends hp{constructor(H){super();cp(this,H,vp,dp,up,{})}}export{Ep as default,yp as metadata};
