import{S as dn,i as fn,s as pn,e as n,k as d,w as g,t,M as cn,c as s,d as a,m as f,a as r,x as w,h as l,b as p,N as un,F as o,g as h,y as m,L as _n,q as v,o as b,B as y,v as gn}from"../chunks/vendor-d3924577.js";import{I as ia}from"../chunks/IconCopyLink-f94c3d80.js";import{C}from"../chunks/CodeBlock-ff545b14.js";function wn(ll){let H,vo,S,R,Ue,K,ha,Ie,da,bo,F,fa,Re,pa,ca,yo,j,Fe,ua,_a,Be,ga,wa,Me,ma,$o,L,B,We,Q,va,Ye,ba,Eo,q,ya,Je,$a,Ea,pe,xa,ka,xo,V,ko,ce,ue,nl,jo,_e,ja,qo,X,Do,Z,ge,qa,Da,Po,ee,Ao,D,Pa,Ge,Aa,Oa,ze,Ca,Ha,Oo,oe,Co,N,M,Ke,ae,Sa,Qe,La,Ho,k,we,Na,Ta,me,Ua,Ia,ve,Ra,Fa,So,P,Ba,be,Ma,Wa,ye,Ya,Ja,Lo,te,No,c,$e,Ga,za,Ee,Ka,Qa,Ve,Va,Xa,Xe,Za,et,Ze,ot,at,eo,tt,lt,To,le,Uo,T,W,oo,ne,nt,ao,st,Io,U,xe,rt,it,ke,ht,dt,Ro,je,ft,Fo,se,Bo,I,qe,pt,ct,to,ut,_t,Mo,re,Wo,A,gt,De,wt,mt,Pe,vt,bt,Yo,u,yt,Ae,$t,Et,lo,xt,kt,no,jt,qt,so,Dt,Pt,ro,At,Ot,Jo,Y,Ct,ie,io,Ht,St,Go,J,Lt,ho,Nt,Tt,zo,he,Ko,E,Ut,fo,It,Rt,po,Ft,Bt,co,Mt,Wt,Qo,de,Vo,G,Yt,Oe,Jt,Gt,Xo,_,zt,uo,Kt,Qt,_o,Vt,Xt,go,Zt,el,Ce,ol,al,Zo;return K=new ia({}),Q=new ia({}),V=new C({props:{code:`from huggingface_hub import hf_hub_url
hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/arxiv-nlp/resolve/main/config.json&#x27;</span>`}}),X=new C({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="877b84a8f93f2d619faa2a6e514a32beef88ab0a")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;877b84a8f93f2d619faa2a6e514a32beef88ab0a&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/arxiv-nlp/resolve/877b84a8f93f2d619faa2a6e514a32beef88ab0a/config.json&#x27;</span>`}}),ee=new C({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="main")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)'}}),oe=new C({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="v1.0")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;v1.0&quot;</span>)'}}),ae=new ia({}),te=new C({props:{code:`from huggingface_hub import hf_hub_url, cached_download
config_file_url = hf_hub_url("lysandre/arxiv-nlp", filename="config.json")
cached_download(config_file_url)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url, cached_download
<span class="hljs-meta">&gt;&gt;&gt; </span>config_file_url = hf_hub_url(<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>cached_download(config_file_url)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/bc0e8cc2f8271b322304e8bb84b3b7580701d53a335ab2d75da19c249e2eeebb.066dae6fdb1e2b8cce60c35cc0f78ed1451d9b341c78de19f3ad469d10a8cbb1&#x27;</span>`}}),le=new C({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)`}}),ne=new ia({}),se=new C({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/lysandre__arxiv-nlp.894a9adde21d9a3e3843e6d5aeaaf01875c7fade&#x27;</span>`}}),re=new C({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", revision="main")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)`}}),he=new C({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", allow_regex="*.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, allow_regex=<span class="hljs-string">&quot;*.json&quot;</span>)`}}),de=new C({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", ignore_regex=["*.msgpack", "*.h5"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, ignore_regex=[<span class="hljs-string">&quot;*.msgpack&quot;</span>, <span class="hljs-string">&quot;*.h5&quot;</span>])`}}),{c(){H=n("meta"),vo=d(),S=n("h1"),R=n("a"),Ue=n("span"),g(K.$$.fragment),ha=d(),Ie=n("span"),da=t("How to download files from the Hub"),bo=d(),F=n("p"),fa=t("The "),Re=n("code"),pa=t("huggingface_hub"),ca=t(" library provides functions to download files from the model and dataset repositories stored on the Hub. You can use these functions independently or integrate them into your own library so it is more convenient for your users to interact with the Hub. This guide will show you how to:"),yo=d(),j=n("ul"),Fe=n("li"),ua=t("Specify a file to download from the Hub."),_a=d(),Be=n("li"),ga=t("Download and cache a file on your disk."),wa=d(),Me=n("li"),ma=t("Download all the files in a repository."),$o=d(),L=n("h2"),B=n("a"),We=n("span"),g(Q.$$.fragment),va=d(),Ye=n("span"),ba=t("Choose a file to download"),Eo=d(),q=n("p"),ya=t("Use the "),Je=n("code"),$a=t("filename"),Ea=t(" parameter in the "),pe=n("a"),xa=t("hf_hub_url()"),ka=t(" function to retrieve the URL of a specific file to download:"),xo=d(),g(V.$$.fragment),ko=d(),ce=n("p"),ue=n("img"),jo=d(),_e=n("p"),ja=t("Specify a particular file version by providing the file revision, which can be a branch, a tag, or a commit hash. When using the commit hash, it must be the full-length hash instead of a 7-character commit hash:"),qo=d(),g(X.$$.fragment),Do=d(),Z=n("p"),ge=n("a"),qa=t("hf_hub_url()"),Da=t(" can also use the branch name to specify a file revision:"),Po=d(),g(ee.$$.fragment),Ao=d(),D=n("p"),Pa=t("You can also specify a file revision with a tag identifier. For example, if you want "),Ge=n("code"),Aa=t("v1.0"),Oa=t(" of the "),ze=n("code"),Ca=t("config.json"),Ha=t(" file:"),Oo=d(),g(oe.$$.fragment),Co=d(),N=n("h2"),M=n("a"),Ke=n("span"),g(ae.$$.fragment),Sa=d(),Qe=n("span"),La=t("Download and store a file"),Ho=d(),k=n("p"),we=n("a"),Na=t("cached_download()"),Ta=t(" is used to download and cache a file on your local disk. Once a file is stored in your cache, you don\u2019t have to redownload the file the next time you use it. "),me=n("a"),Ua=t("cached_download()"),Ia=t(" is a hands-free solution for staying up to date with new file versions. When a downloaded file is updated in the remote repository, "),ve=n("a"),Ra=t("cached_download()"),Fa=t(" will automatically download and store it."),So=d(),P=n("p"),Ba=t("Begin by retrieving your file URL with "),be=n("a"),Ma=t("hf_hub_url()"),Wa=t(", and then pass the specified URL to "),ye=n("a"),Ya=t("cached_download()"),Ja=t(" to download the file:"),Lo=d(),g(te.$$.fragment),No=d(),c=n("p"),$e=n("a"),Ga=t("hf_hub_url()"),za=t(" and "),Ee=n("a"),Ka=t("cached_download()"),Qa=t(" work hand-in-hand to download a file. This is precisely how "),Ve=n("code"),Va=t("hf_hub_download"),Xa=t(" from the tutorial works! "),Xe=n("code"),Za=t("hf_hub_download"),et=t(" is simply a wrapper that calls both "),Ze=n("code"),ot=t("hf_hub_url"),at=t(" and "),eo=n("code"),tt=t("cached_download"),lt=t("."),To=d(),g(le.$$.fragment),Uo=d(),T=n("h2"),W=n("a"),oo=n("span"),g(ne.$$.fragment),nt=d(),ao=n("span"),st=t("Download an entire repository"),Io=d(),U=n("p"),xe=n("a"),rt=t("snapshot_download()"),it=t(" downloads an entire repository at a given revision. Like "),ke=n("a"),ht=t("cached_download()"),dt=t(", all downloaded files are cached on your local disk. However, even if only a single file is updated, the entire repository will be redownloaded."),Ro=d(),je=n("p"),ft=t("Download a whole repository as shown in the following:"),Fo=d(),g(se.$$.fragment),Bo=d(),I=n("p"),qe=n("a"),pt=t("snapshot_download()"),ct=t(" downloads the latest revision by default. If you want a specific repository revision, use the "),to=n("code"),ut=t("revision"),_t=t(" parameter:"),Mo=d(),g(re.$$.fragment),Wo=d(),A=n("p"),gt=t("In general, it is usually better to manually download files with "),De=n("a"),wt=t("hf_hub_download()"),mt=t(" - if you already know the file name - to avoid re-downloading an entire repository. "),Pe=n("a"),vt=t("snapshot_download()"),bt=t(" is helpful when you are unaware of which files need to be downloaded."),Yo=d(),u=n("p"),yt=t("However, you don\u2019t want to always download the contents of an entire repository with "),Ae=n("a"),$t=t("snapshot_download()"),Et=t(". Even if you don\u2019t know the file name, you can download specific files if you know the file type with "),lo=n("code"),xt=t("allow_regex"),kt=t(" and "),no=n("code"),jt=t("ignore_regex"),qt=t(`.
Use the `),so=n("code"),Dt=t("allow_regex"),Pt=t(" and "),ro=n("code"),At=t("ignore_regex"),Ot=t(` arguments to specify
which files to download.
These parameters accept either a single regex or a list of regexes.`),Jo=d(),Y=n("p"),Ct=t("The regex matching is based on "),ie=n("a"),io=n("code"),Ht=t("fnmatch"),St=t(" which means it provides support for Unix shell-style wildcards."),Go=d(),J=n("p"),Lt=t("For example, you can use "),ho=n("code"),Nt=t("allow_regex"),Tt=t(" to only download JSON configuration files:"),zo=d(),g(he.$$.fragment),Ko=d(),E=n("p"),Ut=t("On the other hand, "),fo=n("code"),It=t("ignore_regex"),Rt=t(" can be used to exclude certain files from being downloaded. The following example ignores the "),po=n("code"),Ft=t(".msgpack"),Bt=t(" and "),co=n("code"),Mt=t(".h5"),Wt=t(" file extensions:"),Qo=d(),g(de.$$.fragment),Vo=d(),G=n("p"),Yt=t(`Passing a regex can be especially useful when repositories contain files that
are never expected to be downloaded by `),Oe=n("a"),Jt=t("snapshot_download()"),Gt=t("."),Xo=d(),_=n("p"),zt=t("Note that passing "),uo=n("code"),Kt=t("allow_regex"),Qt=t(" or "),_o=n("code"),Vt=t("ignore_regex"),Xt=t(" does "),go=n("strong"),Zt=t("not"),el=t(` prevent
`),Ce=n("a"),ol=t("snapshot_download()"),al=t(` from re-downloading the entire model repository if an ignored
file is changed.`),this.h()},l(e){const i=cn('[data-svelte="svelte-1phssyn"]',document.head);H=s(i,"META",{name:!0,content:!0}),i.forEach(a),vo=f(e),S=s(e,"H1",{class:!0});var ea=r(S);R=s(ea,"A",{id:!0,class:!0,href:!0});var sl=r(R);Ue=s(sl,"SPAN",{});var rl=r(Ue);w(K.$$.fragment,rl),rl.forEach(a),sl.forEach(a),ha=f(ea),Ie=s(ea,"SPAN",{});var il=r(Ie);da=l(il,"How to download files from the Hub"),il.forEach(a),ea.forEach(a),bo=f(e),F=s(e,"P",{});var oa=r(F);fa=l(oa,"The "),Re=s(oa,"CODE",{});var hl=r(Re);pa=l(hl,"huggingface_hub"),hl.forEach(a),ca=l(oa," library provides functions to download files from the model and dataset repositories stored on the Hub. You can use these functions independently or integrate them into your own library so it is more convenient for your users to interact with the Hub. This guide will show you how to:"),oa.forEach(a),yo=f(e),j=s(e,"UL",{});var He=r(j);Fe=s(He,"LI",{});var dl=r(Fe);ua=l(dl,"Specify a file to download from the Hub."),dl.forEach(a),_a=f(He),Be=s(He,"LI",{});var fl=r(Be);ga=l(fl,"Download and cache a file on your disk."),fl.forEach(a),wa=f(He),Me=s(He,"LI",{});var pl=r(Me);ma=l(pl,"Download all the files in a repository."),pl.forEach(a),He.forEach(a),$o=f(e),L=s(e,"H2",{class:!0});var aa=r(L);B=s(aa,"A",{id:!0,class:!0,href:!0});var cl=r(B);We=s(cl,"SPAN",{});var ul=r(We);w(Q.$$.fragment,ul),ul.forEach(a),cl.forEach(a),va=f(aa),Ye=s(aa,"SPAN",{});var _l=r(Ye);ba=l(_l,"Choose a file to download"),_l.forEach(a),aa.forEach(a),Eo=f(e),q=s(e,"P",{});var Se=r(q);ya=l(Se,"Use the "),Je=s(Se,"CODE",{});var gl=r(Je);$a=l(gl,"filename"),gl.forEach(a),Ea=l(Se," parameter in the "),pe=s(Se,"A",{href:!0});var wl=r(pe);xa=l(wl,"hf_hub_url()"),wl.forEach(a),ka=l(Se," function to retrieve the URL of a specific file to download:"),Se.forEach(a),xo=f(e),w(V.$$.fragment,e),ko=f(e),ce=s(e,"P",{});var ml=r(ce);ue=s(ml,"IMG",{src:!0,alt:!0}),ml.forEach(a),jo=f(e),_e=s(e,"P",{});var vl=r(_e);ja=l(vl,"Specify a particular file version by providing the file revision, which can be a branch, a tag, or a commit hash. When using the commit hash, it must be the full-length hash instead of a 7-character commit hash:"),vl.forEach(a),qo=f(e),w(X.$$.fragment,e),Do=f(e),Z=s(e,"P",{});var tl=r(Z);ge=s(tl,"A",{href:!0});var bl=r(ge);qa=l(bl,"hf_hub_url()"),bl.forEach(a),Da=l(tl," can also use the branch name to specify a file revision:"),tl.forEach(a),Po=f(e),w(ee.$$.fragment,e),Ao=f(e),D=s(e,"P",{});var Le=r(D);Pa=l(Le,"You can also specify a file revision with a tag identifier. For example, if you want "),Ge=s(Le,"CODE",{});var yl=r(Ge);Aa=l(yl,"v1.0"),yl.forEach(a),Oa=l(Le," of the "),ze=s(Le,"CODE",{});var $l=r(ze);Ca=l($l,"config.json"),$l.forEach(a),Ha=l(Le," file:"),Le.forEach(a),Oo=f(e),w(oe.$$.fragment,e),Co=f(e),N=s(e,"H2",{class:!0});var ta=r(N);M=s(ta,"A",{id:!0,class:!0,href:!0});var El=r(M);Ke=s(El,"SPAN",{});var xl=r(Ke);w(ae.$$.fragment,xl),xl.forEach(a),El.forEach(a),Sa=f(ta),Qe=s(ta,"SPAN",{});var kl=r(Qe);La=l(kl,"Download and store a file"),kl.forEach(a),ta.forEach(a),Ho=f(e),k=s(e,"P",{});var fe=r(k);we=s(fe,"A",{href:!0});var jl=r(we);Na=l(jl,"cached_download()"),jl.forEach(a),Ta=l(fe," is used to download and cache a file on your local disk. Once a file is stored in your cache, you don\u2019t have to redownload the file the next time you use it. "),me=s(fe,"A",{href:!0});var ql=r(me);Ua=l(ql,"cached_download()"),ql.forEach(a),Ia=l(fe," is a hands-free solution for staying up to date with new file versions. When a downloaded file is updated in the remote repository, "),ve=s(fe,"A",{href:!0});var Dl=r(ve);Ra=l(Dl,"cached_download()"),Dl.forEach(a),Fa=l(fe," will automatically download and store it."),fe.forEach(a),So=f(e),P=s(e,"P",{});var Ne=r(P);Ba=l(Ne,"Begin by retrieving your file URL with "),be=s(Ne,"A",{href:!0});var Pl=r(be);Ma=l(Pl,"hf_hub_url()"),Pl.forEach(a),Wa=l(Ne,", and then pass the specified URL to "),ye=s(Ne,"A",{href:!0});var Al=r(ye);Ya=l(Al,"cached_download()"),Al.forEach(a),Ja=l(Ne," to download the file:"),Ne.forEach(a),Lo=f(e),w(te.$$.fragment,e),No=f(e),c=s(e,"P",{});var $=r(c);$e=s($,"A",{href:!0});var Ol=r($e);Ga=l(Ol,"hf_hub_url()"),Ol.forEach(a),za=l($," and "),Ee=s($,"A",{href:!0});var Cl=r(Ee);Ka=l(Cl,"cached_download()"),Cl.forEach(a),Qa=l($," work hand-in-hand to download a file. This is precisely how "),Ve=s($,"CODE",{});var Hl=r(Ve);Va=l(Hl,"hf_hub_download"),Hl.forEach(a),Xa=l($," from the tutorial works! "),Xe=s($,"CODE",{});var Sl=r(Xe);Za=l(Sl,"hf_hub_download"),Sl.forEach(a),et=l($," is simply a wrapper that calls both "),Ze=s($,"CODE",{});var Ll=r(Ze);ot=l(Ll,"hf_hub_url"),Ll.forEach(a),at=l($," and "),eo=s($,"CODE",{});var Nl=r(eo);tt=l(Nl,"cached_download"),Nl.forEach(a),lt=l($,"."),$.forEach(a),To=f(e),w(le.$$.fragment,e),Uo=f(e),T=s(e,"H2",{class:!0});var la=r(T);W=s(la,"A",{id:!0,class:!0,href:!0});var Tl=r(W);oo=s(Tl,"SPAN",{});var Ul=r(oo);w(ne.$$.fragment,Ul),Ul.forEach(a),Tl.forEach(a),nt=f(la),ao=s(la,"SPAN",{});var Il=r(ao);st=l(Il,"Download an entire repository"),Il.forEach(a),la.forEach(a),Io=f(e),U=s(e,"P",{});var wo=r(U);xe=s(wo,"A",{href:!0});var Rl=r(xe);rt=l(Rl,"snapshot_download()"),Rl.forEach(a),it=l(wo," downloads an entire repository at a given revision. Like "),ke=s(wo,"A",{href:!0});var Fl=r(ke);ht=l(Fl,"cached_download()"),Fl.forEach(a),dt=l(wo,", all downloaded files are cached on your local disk. However, even if only a single file is updated, the entire repository will be redownloaded."),wo.forEach(a),Ro=f(e),je=s(e,"P",{});var Bl=r(je);ft=l(Bl,"Download a whole repository as shown in the following:"),Bl.forEach(a),Fo=f(e),w(se.$$.fragment,e),Bo=f(e),I=s(e,"P",{});var mo=r(I);qe=s(mo,"A",{href:!0});var Ml=r(qe);pt=l(Ml,"snapshot_download()"),Ml.forEach(a),ct=l(mo," downloads the latest revision by default. If you want a specific repository revision, use the "),to=s(mo,"CODE",{});var Wl=r(to);ut=l(Wl,"revision"),Wl.forEach(a),_t=l(mo," parameter:"),mo.forEach(a),Mo=f(e),w(re.$$.fragment,e),Wo=f(e),A=s(e,"P",{});var Te=r(A);gt=l(Te,"In general, it is usually better to manually download files with "),De=s(Te,"A",{href:!0});var Yl=r(De);wt=l(Yl,"hf_hub_download()"),Yl.forEach(a),mt=l(Te," - if you already know the file name - to avoid re-downloading an entire repository. "),Pe=s(Te,"A",{href:!0});var Jl=r(Pe);vt=l(Jl,"snapshot_download()"),Jl.forEach(a),bt=l(Te," is helpful when you are unaware of which files need to be downloaded."),Te.forEach(a),Yo=f(e),u=s(e,"P",{});var x=r(u);yt=l(x,"However, you don\u2019t want to always download the contents of an entire repository with "),Ae=s(x,"A",{href:!0});var Gl=r(Ae);$t=l(Gl,"snapshot_download()"),Gl.forEach(a),Et=l(x,". Even if you don\u2019t know the file name, you can download specific files if you know the file type with "),lo=s(x,"CODE",{});var zl=r(lo);xt=l(zl,"allow_regex"),zl.forEach(a),kt=l(x," and "),no=s(x,"CODE",{});var Kl=r(no);jt=l(Kl,"ignore_regex"),Kl.forEach(a),qt=l(x,`.
Use the `),so=s(x,"CODE",{});var Ql=r(so);Dt=l(Ql,"allow_regex"),Ql.forEach(a),Pt=l(x," and "),ro=s(x,"CODE",{});var Vl=r(ro);At=l(Vl,"ignore_regex"),Vl.forEach(a),Ot=l(x,` arguments to specify
which files to download.
These parameters accept either a single regex or a list of regexes.`),x.forEach(a),Jo=f(e),Y=s(e,"P",{});var na=r(Y);Ct=l(na,"The regex matching is based on "),ie=s(na,"A",{href:!0,rel:!0});var Xl=r(ie);io=s(Xl,"CODE",{});var Zl=r(io);Ht=l(Zl,"fnmatch"),Zl.forEach(a),Xl.forEach(a),St=l(na," which means it provides support for Unix shell-style wildcards."),na.forEach(a),Go=f(e),J=s(e,"P",{});var sa=r(J);Lt=l(sa,"For example, you can use "),ho=s(sa,"CODE",{});var en=r(ho);Nt=l(en,"allow_regex"),en.forEach(a),Tt=l(sa," to only download JSON configuration files:"),sa.forEach(a),zo=f(e),w(he.$$.fragment,e),Ko=f(e),E=s(e,"P",{});var z=r(E);Ut=l(z,"On the other hand, "),fo=s(z,"CODE",{});var on=r(fo);It=l(on,"ignore_regex"),on.forEach(a),Rt=l(z," can be used to exclude certain files from being downloaded. The following example ignores the "),po=s(z,"CODE",{});var an=r(po);Ft=l(an,".msgpack"),an.forEach(a),Bt=l(z," and "),co=s(z,"CODE",{});var tn=r(co);Mt=l(tn,".h5"),tn.forEach(a),Wt=l(z," file extensions:"),z.forEach(a),Qo=f(e),w(de.$$.fragment,e),Vo=f(e),G=s(e,"P",{});var ra=r(G);Yt=l(ra,`Passing a regex can be especially useful when repositories contain files that
are never expected to be downloaded by `),Oe=s(ra,"A",{href:!0});var ln=r(Oe);Jt=l(ln,"snapshot_download()"),ln.forEach(a),Gt=l(ra,"."),ra.forEach(a),Xo=f(e),_=s(e,"P",{});var O=r(_);zt=l(O,"Note that passing "),uo=s(O,"CODE",{});var nn=r(uo);Kt=l(nn,"allow_regex"),nn.forEach(a),Qt=l(O," or "),_o=s(O,"CODE",{});var sn=r(_o);Vt=l(sn,"ignore_regex"),sn.forEach(a),Xt=l(O," does "),go=s(O,"STRONG",{});var rn=r(go);Zt=l(rn,"not"),rn.forEach(a),el=l(O,` prevent
`),Ce=s(O,"A",{href:!0});var hn=r(Ce);ol=l(hn,"snapshot_download()"),hn.forEach(a),al=l(O,` from re-downloading the entire model repository if an ignored
file is changed.`),O.forEach(a),this.h()},h(){p(H,"name","hf:doc:metadata"),p(H,"content",JSON.stringify(mn)),p(R,"id","how-to-download-files-from-the-hub"),p(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(R,"href","#how-to-download-files-from-the-hub"),p(S,"class","relative group"),p(B,"id","choose-a-file-to-download"),p(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(B,"href","#choose-a-file-to-download"),p(L,"class","relative group"),p(pe,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.hf_hub_url"),un(ue.src,nl="/docs/assets/hub/repo.png")||p(ue,"src",nl),p(ue,"alt","/docs/assets/hub/repo.png"),p(ge,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.hf_hub_url"),p(M,"id","download-and-store-a-file"),p(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(M,"href","#download-and-store-a-file"),p(N,"class","relative group"),p(we,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.cached_download"),p(me,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.cached_download"),p(ve,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.cached_download"),p(be,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.hf_hub_url"),p(ye,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.cached_download"),p($e,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.hf_hub_url"),p(Ee,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.cached_download"),p(W,"id","download-an-entire-repository"),p(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(W,"href","#download-an-entire-repository"),p(T,"class","relative group"),p(xe,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(ke,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.cached_download"),p(qe,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(De,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.hf_hub_download"),p(Pe,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(Ae,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(ie,"href","https://docs.python.org/3/library/fnmatch.html"),p(ie,"rel","nofollow"),p(Oe,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(Ce,"href","/docs/huggingface_hub/pr_840/en/package_reference/file_download#huggingface_hub.snapshot_download")},m(e,i){o(document.head,H),h(e,vo,i),h(e,S,i),o(S,R),o(R,Ue),m(K,Ue,null),o(S,ha),o(S,Ie),o(Ie,da),h(e,bo,i),h(e,F,i),o(F,fa),o(F,Re),o(Re,pa),o(F,ca),h(e,yo,i),h(e,j,i),o(j,Fe),o(Fe,ua),o(j,_a),o(j,Be),o(Be,ga),o(j,wa),o(j,Me),o(Me,ma),h(e,$o,i),h(e,L,i),o(L,B),o(B,We),m(Q,We,null),o(L,va),o(L,Ye),o(Ye,ba),h(e,Eo,i),h(e,q,i),o(q,ya),o(q,Je),o(Je,$a),o(q,Ea),o(q,pe),o(pe,xa),o(q,ka),h(e,xo,i),m(V,e,i),h(e,ko,i),h(e,ce,i),o(ce,ue),h(e,jo,i),h(e,_e,i),o(_e,ja),h(e,qo,i),m(X,e,i),h(e,Do,i),h(e,Z,i),o(Z,ge),o(ge,qa),o(Z,Da),h(e,Po,i),m(ee,e,i),h(e,Ao,i),h(e,D,i),o(D,Pa),o(D,Ge),o(Ge,Aa),o(D,Oa),o(D,ze),o(ze,Ca),o(D,Ha),h(e,Oo,i),m(oe,e,i),h(e,Co,i),h(e,N,i),o(N,M),o(M,Ke),m(ae,Ke,null),o(N,Sa),o(N,Qe),o(Qe,La),h(e,Ho,i),h(e,k,i),o(k,we),o(we,Na),o(k,Ta),o(k,me),o(me,Ua),o(k,Ia),o(k,ve),o(ve,Ra),o(k,Fa),h(e,So,i),h(e,P,i),o(P,Ba),o(P,be),o(be,Ma),o(P,Wa),o(P,ye),o(ye,Ya),o(P,Ja),h(e,Lo,i),m(te,e,i),h(e,No,i),h(e,c,i),o(c,$e),o($e,Ga),o(c,za),o(c,Ee),o(Ee,Ka),o(c,Qa),o(c,Ve),o(Ve,Va),o(c,Xa),o(c,Xe),o(Xe,Za),o(c,et),o(c,Ze),o(Ze,ot),o(c,at),o(c,eo),o(eo,tt),o(c,lt),h(e,To,i),m(le,e,i),h(e,Uo,i),h(e,T,i),o(T,W),o(W,oo),m(ne,oo,null),o(T,nt),o(T,ao),o(ao,st),h(e,Io,i),h(e,U,i),o(U,xe),o(xe,rt),o(U,it),o(U,ke),o(ke,ht),o(U,dt),h(e,Ro,i),h(e,je,i),o(je,ft),h(e,Fo,i),m(se,e,i),h(e,Bo,i),h(e,I,i),o(I,qe),o(qe,pt),o(I,ct),o(I,to),o(to,ut),o(I,_t),h(e,Mo,i),m(re,e,i),h(e,Wo,i),h(e,A,i),o(A,gt),o(A,De),o(De,wt),o(A,mt),o(A,Pe),o(Pe,vt),o(A,bt),h(e,Yo,i),h(e,u,i),o(u,yt),o(u,Ae),o(Ae,$t),o(u,Et),o(u,lo),o(lo,xt),o(u,kt),o(u,no),o(no,jt),o(u,qt),o(u,so),o(so,Dt),o(u,Pt),o(u,ro),o(ro,At),o(u,Ot),h(e,Jo,i),h(e,Y,i),o(Y,Ct),o(Y,ie),o(ie,io),o(io,Ht),o(Y,St),h(e,Go,i),h(e,J,i),o(J,Lt),o(J,ho),o(ho,Nt),o(J,Tt),h(e,zo,i),m(he,e,i),h(e,Ko,i),h(e,E,i),o(E,Ut),o(E,fo),o(fo,It),o(E,Rt),o(E,po),o(po,Ft),o(E,Bt),o(E,co),o(co,Mt),o(E,Wt),h(e,Qo,i),m(de,e,i),h(e,Vo,i),h(e,G,i),o(G,Yt),o(G,Oe),o(Oe,Jt),o(G,Gt),h(e,Xo,i),h(e,_,i),o(_,zt),o(_,uo),o(uo,Kt),o(_,Qt),o(_,_o),o(_o,Vt),o(_,Xt),o(_,go),o(go,Zt),o(_,el),o(_,Ce),o(Ce,ol),o(_,al),Zo=!0},p:_n,i(e){Zo||(v(K.$$.fragment,e),v(Q.$$.fragment,e),v(V.$$.fragment,e),v(X.$$.fragment,e),v(ee.$$.fragment,e),v(oe.$$.fragment,e),v(ae.$$.fragment,e),v(te.$$.fragment,e),v(le.$$.fragment,e),v(ne.$$.fragment,e),v(se.$$.fragment,e),v(re.$$.fragment,e),v(he.$$.fragment,e),v(de.$$.fragment,e),Zo=!0)},o(e){b(K.$$.fragment,e),b(Q.$$.fragment,e),b(V.$$.fragment,e),b(X.$$.fragment,e),b(ee.$$.fragment,e),b(oe.$$.fragment,e),b(ae.$$.fragment,e),b(te.$$.fragment,e),b(le.$$.fragment,e),b(ne.$$.fragment,e),b(se.$$.fragment,e),b(re.$$.fragment,e),b(he.$$.fragment,e),b(de.$$.fragment,e),Zo=!1},d(e){a(H),e&&a(vo),e&&a(S),y(K),e&&a(bo),e&&a(F),e&&a(yo),e&&a(j),e&&a($o),e&&a(L),y(Q),e&&a(Eo),e&&a(q),e&&a(xo),y(V,e),e&&a(ko),e&&a(ce),e&&a(jo),e&&a(_e),e&&a(qo),y(X,e),e&&a(Do),e&&a(Z),e&&a(Po),y(ee,e),e&&a(Ao),e&&a(D),e&&a(Oo),y(oe,e),e&&a(Co),e&&a(N),y(ae),e&&a(Ho),e&&a(k),e&&a(So),e&&a(P),e&&a(Lo),y(te,e),e&&a(No),e&&a(c),e&&a(To),y(le,e),e&&a(Uo),e&&a(T),y(ne),e&&a(Io),e&&a(U),e&&a(Ro),e&&a(je),e&&a(Fo),y(se,e),e&&a(Bo),e&&a(I),e&&a(Mo),y(re,e),e&&a(Wo),e&&a(A),e&&a(Yo),e&&a(u),e&&a(Jo),e&&a(Y),e&&a(Go),e&&a(J),e&&a(zo),y(he,e),e&&a(Ko),e&&a(E),e&&a(Qo),y(de,e),e&&a(Vo),e&&a(G),e&&a(Xo),e&&a(_)}}}const mn={local:"how-to-download-files-from-the-hub",sections:[{local:"choose-a-file-to-download",title:"Choose a file to download"},{local:"download-and-store-a-file",title:"Download and store a file"},{local:"download-an-entire-repository",title:"Download an entire repository"}],title:"How to download files from the Hub"};function vn(ll){return gn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class En extends dn{constructor(H){super();fn(this,H,vn,wn,pn,{})}}export{En as default,mn as metadata};
