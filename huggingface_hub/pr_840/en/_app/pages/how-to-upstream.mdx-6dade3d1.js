import{S as Bs,i as Ys,s as Ws,e as l,k as c,w as m,t as s,M as Js,c as r,d as o,m as p,a as n,x as d,h as a,b as u,F as t,g as h,y as g,L as zs,q as _,o as y,B as w,v as Ks}from"../chunks/vendor-d3924577.js";import{I as Ft}from"../chunks/IconCopyLink-f94c3d80.js";import{C}from"../chunks/CodeBlock-ff545b14.js";function Qs(ls){let E,We,j,S,be,M,Ot,ke,Gt,Je,L,It,Ee,Dt,Tt,ze,k,U,Nt,je,Rt,Mt,Ut,B,Bt,ce,Yt,Wt,Jt,Y,zt,W,Kt,Qt,Ke,pe,Vt,Qe,A,J,xe,Xt,Zt,z,eo,x,K,to,qe,oo,so,ao,Q,lo,ue,Pe,ro,no,Ve,q,F,He,V,io,Ce,ho,Xe,v,co,Se,po,uo,Le,fo,mo,Ae,go,_o,Ze,$,X,yo,Fe,wo,vo,$o,Z,bo,Oe,ko,Eo,jo,Ge,xo,qo,ee,Po,Ie,Ho,Co,et,te,tt,fe,So,ot,oe,st,O,Lo,De,Ao,Fo,at,se,lt,G,Oo,Te,Go,Io,rt,ae,nt,I,Do,Ne,To,No,it,le,ht,P,D,Re,re,Ro,Me,Mo,ct,f,Uo,me,Bo,Yo,de,Wo,Jo,Ue,zo,Ko,ge,Qo,Vo,_e,Xo,Zo,pt,ne,ut,H,T,Be,ie,es,Ye,ts,ft,ye,os,mt,he,dt,we,ss,gt;return M=new Ft({}),z=new C({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),Q=new C({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),V=new Ft({}),te=new C({props:{code:`with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),oe=new C({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),se=new C({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),ae=new C({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status
<span class="hljs-comment"># -&gt; -1 indicates the push is ongoing.</span>
<span class="hljs-comment"># -&gt; 0 indicates the push has completed successfully.</span>
<span class="hljs-comment"># -&gt; Non-zero code indicates the error code if there was an error.</span>`}}),le=new C({props:{code:`# Inspect an error.
>>> last_command.stderr

# Check whether a push is completed or ongoing.
>>> last_command.is_done

# Check whether a push command has errored.
>>> last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),re=new Ft({}),ne=new C({props:{code:`repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),ie=new Ft({}),he=new C({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),{c(){E=l("meta"),We=c(),j=l("h1"),S=l("a"),be=l("span"),m(M.$$.fragment),Ot=c(),ke=l("span"),Gt=s("How to upload files to the Hub"),Je=c(),L=l("p"),It=s("Sharing your files and work is a very important aspect of the Hub. The "),Ee=l("code"),Dt=s("huggingface_hub"),Tt=s(" uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library so it is more convenient for your users to interact with the Hub. This guide will show you how to:"),ze=c(),k=l("ul"),U=l("li"),Nt=s("Push files with a "),je=l("code"),Rt=s("commit"),Mt=s(" context manager."),Ut=c(),B=l("li"),Bt=s("Push files with the "),ce=l("a"),Yt=s("push_to_hub()"),Wt=s(" function."),Jt=c(),Y=l("li"),zt=s("Upload very large files with "),W=l("a"),Kt=s("Git LFS"),Qt=s("."),Ke=c(),pe=l("p"),Vt=s("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),Qe=c(),A=l("ol"),J=l("li"),xe=l("p"),Xt=s("Log in to your Hugging Face account with the following command:"),Zt=c(),m(z.$$.fragment),eo=c(),x=l("li"),K=l("p"),to=s("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),qe=l("code"),oo=s("notebook_login()"),so=s(":"),ao=c(),m(Q.$$.fragment),lo=c(),ue=l("p"),Pe=l("code"),ro=s("notebook_login()"),no=s(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),Ve=c(),q=l("h2"),F=l("a"),He=l("span"),m(V.$$.fragment),io=c(),Ce=l("span"),ho=s("commit context manager"),Xe=c(),v=l("p"),co=s("The "),Se=l("code"),po=s("commit"),uo=s(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),Le=l("code"),fo=s("git-lfs"),mo=s(" automatically tracks any file larger than 10MB. In the following example, the "),Ae=l("code"),go=s("commit"),_o=s(" context manager:"),Ze=c(),$=l("ol"),X=l("li"),yo=s("Pulls from the "),Fe=l("code"),wo=s("text-files"),vo=s(" repository."),$o=c(),Z=l("li"),bo=s("Adds a change made to "),Oe=l("code"),ko=s("file.txt"),Eo=s("."),jo=c(),Ge=l("li"),xo=s("Commits the change."),qo=c(),ee=l("li"),Po=s("Pushes the change to the "),Ie=l("code"),Ho=s("text-files"),Co=s(" repository."),et=c(),m(te.$$.fragment),tt=c(),fe=l("p"),So=s("Here is another example of how to save and upload a file to a repository:"),ot=c(),m(oe.$$.fragment),st=c(),O=l("p"),Lo=s("Set "),De=l("code"),Ao=s("blocking=False"),Fo=s(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),at=c(),m(se.$$.fragment),lt=c(),G=l("p"),Oo=s("You can check the status of your push with the "),Te=l("code"),Go=s("command_queue"),Io=s(" method:"),rt=c(),m(ae.$$.fragment),nt=c(),I=l("p"),Do=s("When "),Ne=l("code"),To=s("blocking=False"),No=s(", commands are tracked, and your script will only exit when all pushes are completed even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),it=c(),m(le.$$.fragment),ht=c(),P=l("h2"),D=l("a"),Re=l("span"),m(re.$$.fragment),Ro=c(),Me=l("span"),Mo=s("push_to_hub"),ct=c(),f=l("p"),Uo=s("The "),me=l("a"),Bo=s("Repository"),Yo=s(" class also has a "),de=l("a"),Wo=s("push_to_hub()"),Jo=s(" function to add files, make a commit, and push them to a repository. Unlike the "),Ue=l("code"),zo=s("commit"),Ko=s(" context manager, "),ge=l("a"),Qo=s("push_to_hub()"),Vo=s(" requires you to pull from a repository first, save the files, and then call "),_e=l("a"),Xo=s("push_to_hub()"),Zo=s("."),pt=c(),m(ne.$$.fragment),ut=c(),H=l("h2"),T=l("a"),Be=l("span"),m(ie.$$.fragment),es=c(),Ye=l("span"),ts=s("Upload with Git LFS"),ft=c(),ye=l("p"),os=s("For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),mt=c(),m(he.$$.fragment),dt=c(),we=l("p"),ss=s("You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),this.h()},l(e){const i=Js('[data-svelte="svelte-1phssyn"]',document.head);E=r(i,"META",{name:!0,content:!0}),i.forEach(o),We=p(e),j=r(e,"H1",{class:!0});var _t=n(j);S=r(_t,"A",{id:!0,class:!0,href:!0});var rs=n(S);be=r(rs,"SPAN",{});var ns=n(be);d(M.$$.fragment,ns),ns.forEach(o),rs.forEach(o),Ot=p(_t),ke=r(_t,"SPAN",{});var is=n(ke);Gt=a(is,"How to upload files to the Hub"),is.forEach(o),_t.forEach(o),Je=p(e),L=r(e,"P",{});var yt=n(L);It=a(yt,"Sharing your files and work is a very important aspect of the Hub. The "),Ee=r(yt,"CODE",{});var hs=n(Ee);Dt=a(hs,"huggingface_hub"),hs.forEach(o),Tt=a(yt," uses a Git-based workflow to upload files to the Hub. You can use these functions independently or integrate them into your own library so it is more convenient for your users to interact with the Hub. This guide will show you how to:"),yt.forEach(o),ze=p(e),k=r(e,"UL",{});var ve=n(k);U=r(ve,"LI",{});var wt=n(U);Nt=a(wt,"Push files with a "),je=r(wt,"CODE",{});var cs=n(je);Rt=a(cs,"commit"),cs.forEach(o),Mt=a(wt," context manager."),wt.forEach(o),Ut=p(ve),B=r(ve,"LI",{});var vt=n(B);Bt=a(vt,"Push files with the "),ce=r(vt,"A",{href:!0});var ps=n(ce);Yt=a(ps,"push_to_hub()"),ps.forEach(o),Wt=a(vt," function."),vt.forEach(o),Jt=p(ve),Y=r(ve,"LI",{});var $t=n(Y);zt=a($t,"Upload very large files with "),W=r($t,"A",{href:!0,rel:!0});var us=n(W);Kt=a(us,"Git LFS"),us.forEach(o),Qt=a($t,"."),$t.forEach(o),ve.forEach(o),Ke=p(e),pe=r(e,"P",{});var fs=n(pe);Vt=a(fs,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),fs.forEach(o),Qe=p(e),A=r(e,"OL",{});var bt=n(A);J=r(bt,"LI",{});var kt=n(J);xe=r(kt,"P",{});var ms=n(xe);Xt=a(ms,"Log in to your Hugging Face account with the following command:"),ms.forEach(o),Zt=p(kt),d(z.$$.fragment,kt),kt.forEach(o),eo=p(bt),x=r(bt,"LI",{});var $e=n(x);K=r($e,"P",{});var Et=n(K);to=a(Et,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),qe=r(Et,"CODE",{});var ds=n(qe);oo=a(ds,"notebook_login()"),ds.forEach(o),so=a(Et,":"),Et.forEach(o),ao=p($e),d(Q.$$.fragment,$e),lo=p($e),ue=r($e,"P",{});var as=n(ue);Pe=r(as,"CODE",{});var gs=n(Pe);ro=a(gs,"notebook_login()"),gs.forEach(o),no=a(as," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),as.forEach(o),$e.forEach(o),bt.forEach(o),Ve=p(e),q=r(e,"H2",{class:!0});var jt=n(q);F=r(jt,"A",{id:!0,class:!0,href:!0});var _s=n(F);He=r(_s,"SPAN",{});var ys=n(He);d(V.$$.fragment,ys),ys.forEach(o),_s.forEach(o),io=p(jt),Ce=r(jt,"SPAN",{});var ws=n(Ce);ho=a(ws,"commit context manager"),ws.forEach(o),jt.forEach(o),Xe=p(e),v=r(e,"P",{});var N=n(v);co=a(N,"The "),Se=r(N,"CODE",{});var vs=n(Se);po=a(vs,"commit"),vs.forEach(o),uo=a(N," context manager handles four of the most common Git commands: pull, add, commit, and push. "),Le=r(N,"CODE",{});var $s=n(Le);fo=a($s,"git-lfs"),$s.forEach(o),mo=a(N," automatically tracks any file larger than 10MB. In the following example, the "),Ae=r(N,"CODE",{});var bs=n(Ae);go=a(bs,"commit"),bs.forEach(o),_o=a(N," context manager:"),N.forEach(o),Ze=p(e),$=r(e,"OL",{});var R=n($);X=r(R,"LI",{});var xt=n(X);yo=a(xt,"Pulls from the "),Fe=r(xt,"CODE",{});var ks=n(Fe);wo=a(ks,"text-files"),ks.forEach(o),vo=a(xt," repository."),xt.forEach(o),$o=p(R),Z=r(R,"LI",{});var qt=n(Z);bo=a(qt,"Adds a change made to "),Oe=r(qt,"CODE",{});var Es=n(Oe);ko=a(Es,"file.txt"),Es.forEach(o),Eo=a(qt,"."),qt.forEach(o),jo=p(R),Ge=r(R,"LI",{});var js=n(Ge);xo=a(js,"Commits the change."),js.forEach(o),qo=p(R),ee=r(R,"LI",{});var Pt=n(ee);Po=a(Pt,"Pushes the change to the "),Ie=r(Pt,"CODE",{});var xs=n(Ie);Ho=a(xs,"text-files"),xs.forEach(o),Co=a(Pt," repository."),Pt.forEach(o),R.forEach(o),et=p(e),d(te.$$.fragment,e),tt=p(e),fe=r(e,"P",{});var qs=n(fe);So=a(qs,"Here is another example of how to save and upload a file to a repository:"),qs.forEach(o),ot=p(e),d(oe.$$.fragment,e),st=p(e),O=r(e,"P",{});var Ht=n(O);Lo=a(Ht,"Set "),De=r(Ht,"CODE",{});var Ps=n(De);Ao=a(Ps,"blocking=False"),Ps.forEach(o),Fo=a(Ht," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),Ht.forEach(o),at=p(e),d(se.$$.fragment,e),lt=p(e),G=r(e,"P",{});var Ct=n(G);Oo=a(Ct,"You can check the status of your push with the "),Te=r(Ct,"CODE",{});var Hs=n(Te);Go=a(Hs,"command_queue"),Hs.forEach(o),Io=a(Ct," method:"),Ct.forEach(o),rt=p(e),d(ae.$$.fragment,e),nt=p(e),I=r(e,"P",{});var St=n(I);Do=a(St,"When "),Ne=r(St,"CODE",{});var Cs=n(Ne);To=a(Cs,"blocking=False"),Cs.forEach(o),No=a(St,", commands are tracked, and your script will only exit when all pushes are completed even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),St.forEach(o),it=p(e),d(le.$$.fragment,e),ht=p(e),P=r(e,"H2",{class:!0});var Lt=n(P);D=r(Lt,"A",{id:!0,class:!0,href:!0});var Ss=n(D);Re=r(Ss,"SPAN",{});var Ls=n(Re);d(re.$$.fragment,Ls),Ls.forEach(o),Ss.forEach(o),Ro=p(Lt),Me=r(Lt,"SPAN",{});var As=n(Me);Mo=a(As,"push_to_hub"),As.forEach(o),Lt.forEach(o),ct=p(e),f=r(e,"P",{});var b=n(f);Uo=a(b,"The "),me=r(b,"A",{href:!0});var Fs=n(me);Bo=a(Fs,"Repository"),Fs.forEach(o),Yo=a(b," class also has a "),de=r(b,"A",{href:!0});var Os=n(de);Wo=a(Os,"push_to_hub()"),Os.forEach(o),Jo=a(b," function to add files, make a commit, and push them to a repository. Unlike the "),Ue=r(b,"CODE",{});var Gs=n(Ue);zo=a(Gs,"commit"),Gs.forEach(o),Ko=a(b," context manager, "),ge=r(b,"A",{href:!0});var Is=n(ge);Qo=a(Is,"push_to_hub()"),Is.forEach(o),Vo=a(b," requires you to pull from a repository first, save the files, and then call "),_e=r(b,"A",{href:!0});var Ds=n(_e);Xo=a(Ds,"push_to_hub()"),Ds.forEach(o),Zo=a(b,"."),b.forEach(o),pt=p(e),d(ne.$$.fragment,e),ut=p(e),H=r(e,"H2",{class:!0});var At=n(H);T=r(At,"A",{id:!0,class:!0,href:!0});var Ts=n(T);Be=r(Ts,"SPAN",{});var Ns=n(Be);d(ie.$$.fragment,Ns),Ns.forEach(o),Ts.forEach(o),es=p(At),Ye=r(At,"SPAN",{});var Rs=n(Ye);ts=a(Rs,"Upload with Git LFS"),Rs.forEach(o),At.forEach(o),ft=p(e),ye=r(e,"P",{});var Ms=n(ye);os=a(Ms,"For huge files (>5GB), you need to install a custom transfer agent for Git LFS:"),Ms.forEach(o),mt=p(e),d(he.$$.fragment,e),dt=p(e),we=r(e,"P",{});var Us=n(we);ss=a(Us,"You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),Us.forEach(o),this.h()},h(){u(E,"name","hf:doc:metadata"),u(E,"content",JSON.stringify(Vs)),u(S,"id","how-to-upload-files-to-the-hub"),u(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(S,"href","#how-to-upload-files-to-the-hub"),u(j,"class","relative group"),u(ce,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(W,"href","https://git-lfs.github.com/"),u(W,"rel","nofollow"),u(F,"id","commit-context-manager"),u(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(F,"href","#commit-context-manager"),u(q,"class","relative group"),u(D,"id","pushtohub"),u(D,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(D,"href","#pushtohub"),u(P,"class","relative group"),u(me,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),u(de,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(ge,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(_e,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),u(T,"id","upload-with-git-lfs"),u(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(T,"href","#upload-with-git-lfs"),u(H,"class","relative group")},m(e,i){t(document.head,E),h(e,We,i),h(e,j,i),t(j,S),t(S,be),g(M,be,null),t(j,Ot),t(j,ke),t(ke,Gt),h(e,Je,i),h(e,L,i),t(L,It),t(L,Ee),t(Ee,Dt),t(L,Tt),h(e,ze,i),h(e,k,i),t(k,U),t(U,Nt),t(U,je),t(je,Rt),t(U,Mt),t(k,Ut),t(k,B),t(B,Bt),t(B,ce),t(ce,Yt),t(B,Wt),t(k,Jt),t(k,Y),t(Y,zt),t(Y,W),t(W,Kt),t(Y,Qt),h(e,Ke,i),h(e,pe,i),t(pe,Vt),h(e,Qe,i),h(e,A,i),t(A,J),t(J,xe),t(xe,Xt),t(J,Zt),g(z,J,null),t(A,eo),t(A,x),t(x,K),t(K,to),t(K,qe),t(qe,oo),t(K,so),t(x,ao),g(Q,x,null),t(x,lo),t(x,ue),t(ue,Pe),t(Pe,ro),t(ue,no),h(e,Ve,i),h(e,q,i),t(q,F),t(F,He),g(V,He,null),t(q,io),t(q,Ce),t(Ce,ho),h(e,Xe,i),h(e,v,i),t(v,co),t(v,Se),t(Se,po),t(v,uo),t(v,Le),t(Le,fo),t(v,mo),t(v,Ae),t(Ae,go),t(v,_o),h(e,Ze,i),h(e,$,i),t($,X),t(X,yo),t(X,Fe),t(Fe,wo),t(X,vo),t($,$o),t($,Z),t(Z,bo),t(Z,Oe),t(Oe,ko),t(Z,Eo),t($,jo),t($,Ge),t(Ge,xo),t($,qo),t($,ee),t(ee,Po),t(ee,Ie),t(Ie,Ho),t(ee,Co),h(e,et,i),g(te,e,i),h(e,tt,i),h(e,fe,i),t(fe,So),h(e,ot,i),g(oe,e,i),h(e,st,i),h(e,O,i),t(O,Lo),t(O,De),t(De,Ao),t(O,Fo),h(e,at,i),g(se,e,i),h(e,lt,i),h(e,G,i),t(G,Oo),t(G,Te),t(Te,Go),t(G,Io),h(e,rt,i),g(ae,e,i),h(e,nt,i),h(e,I,i),t(I,Do),t(I,Ne),t(Ne,To),t(I,No),h(e,it,i),g(le,e,i),h(e,ht,i),h(e,P,i),t(P,D),t(D,Re),g(re,Re,null),t(P,Ro),t(P,Me),t(Me,Mo),h(e,ct,i),h(e,f,i),t(f,Uo),t(f,me),t(me,Bo),t(f,Yo),t(f,de),t(de,Wo),t(f,Jo),t(f,Ue),t(Ue,zo),t(f,Ko),t(f,ge),t(ge,Qo),t(f,Vo),t(f,_e),t(_e,Xo),t(f,Zo),h(e,pt,i),g(ne,e,i),h(e,ut,i),h(e,H,i),t(H,T),t(T,Be),g(ie,Be,null),t(H,es),t(H,Ye),t(Ye,ts),h(e,ft,i),h(e,ye,i),t(ye,os),h(e,mt,i),g(he,e,i),h(e,dt,i),h(e,we,i),t(we,ss),gt=!0},p:zs,i(e){gt||(_(M.$$.fragment,e),_(z.$$.fragment,e),_(Q.$$.fragment,e),_(V.$$.fragment,e),_(te.$$.fragment,e),_(oe.$$.fragment,e),_(se.$$.fragment,e),_(ae.$$.fragment,e),_(le.$$.fragment,e),_(re.$$.fragment,e),_(ne.$$.fragment,e),_(ie.$$.fragment,e),_(he.$$.fragment,e),gt=!0)},o(e){y(M.$$.fragment,e),y(z.$$.fragment,e),y(Q.$$.fragment,e),y(V.$$.fragment,e),y(te.$$.fragment,e),y(oe.$$.fragment,e),y(se.$$.fragment,e),y(ae.$$.fragment,e),y(le.$$.fragment,e),y(re.$$.fragment,e),y(ne.$$.fragment,e),y(ie.$$.fragment,e),y(he.$$.fragment,e),gt=!1},d(e){o(E),e&&o(We),e&&o(j),w(M),e&&o(Je),e&&o(L),e&&o(ze),e&&o(k),e&&o(Ke),e&&o(pe),e&&o(Qe),e&&o(A),w(z),w(Q),e&&o(Ve),e&&o(q),w(V),e&&o(Xe),e&&o(v),e&&o(Ze),e&&o($),e&&o(et),w(te,e),e&&o(tt),e&&o(fe),e&&o(ot),w(oe,e),e&&o(st),e&&o(O),e&&o(at),w(se,e),e&&o(lt),e&&o(G),e&&o(rt),w(ae,e),e&&o(nt),e&&o(I),e&&o(it),w(le,e),e&&o(ht),e&&o(P),w(re),e&&o(ct),e&&o(f),e&&o(pt),w(ne,e),e&&o(ut),e&&o(H),w(ie),e&&o(ft),e&&o(ye),e&&o(mt),w(he,e),e&&o(dt),e&&o(we)}}}const Vs={local:"how-to-upload-files-to-the-hub",sections:[{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"},{local:"upload-with-git-lfs",title:"Upload with Git LFS"}],title:"How to upload files to the Hub"};function Xs(ls){return Ks(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class oa extends Bs{constructor(E){super();Ys(this,E,Xs,Qs,Ws,{})}}export{oa as default,Vs as metadata};
