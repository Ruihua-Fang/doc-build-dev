import{S as xi,i as Ni,s as Di,e as r,k as h,w as u,t as i,M as Oi,c as s,d as t,m as f,a as l,x as m,h as p,b as c,F as o,g as n,y as _,L as Ti,q as g,o as d,B as y,v as Hi}from"../chunks/vendor-d3924577.js";import{I as k}from"../chunks/IconCopyLink-f94c3d80.js";import{C as v}from"../chunks/CodeBlock-ff545b14.js";function Fi(ll){let N,_o,D,z,yt,ge,La,vt,Ma,go,Ke,Ua,yo,j,$t,Ya,Wa,wt,za,Ja,de,Ka,Qe,Qa,Va,vo,O,J,bt,ye,Xa,Et,Za,$o,w,er,Ve,tr,or,kt,ar,rr,jt,sr,lr,At,ir,pr,wo,ve,bo,A,nr,Xe,hr,fr,Pt,cr,ur,Eo,$e,ko,K,mr,qt,_r,gr,jo,we,Ao,Q,dr,Ze,yr,vr,Po,T,V,Ct,be,$r,St,wr,qo,X,br,et,Er,kr,Co,Z,jr,Rt,Ar,Pr,So,Ee,Ro,P,qr,xt,Cr,Sr,tt,Rr,xr,xo,ke,No,ee,Nr,Nt,Dr,Or,Do,je,Oo,H,te,Dt,Ae,Tr,Ot,Hr,To,ot,Fr,Ho,Pe,Fo,F,oe,Tt,qe,Gr,Ht,Br,Go,$,Ir,at,Lr,Mr,Ft,Ur,Yr,rt,Wr,zr,Ce,Jr,Kr,st,Qr,Vr,Bo,G,ae,Gt,Se,Xr,Bt,Zr,Io,re,es,lt,ts,os,Lo,Re,Mo,B,se,It,xe,as,Lt,rs,Uo,q,ss,Mt,ls,is,Ut,ps,ns,Yo,Ne,Wo,I,Yt,hs,fs,Wt,cs,us,zo,De,Jo,C,ms,zt,_s,gs,it,ds,ys,Ko,Oe,Qo,S,vs,Jt,$s,ws,Kt,bs,Es,Vo,Te,Xo,L,le,Qt,He,ks,Vt,js,Zo,b,As,Xt,Ps,qs,Zt,Cs,Ss,eo,Rs,xs,ea,Fe,ta,M,ie,to,Ge,Ns,oo,Ds,oa,pt,Os,aa,Be,ra,pe,Ts,ao,Hs,Fs,sa,Ie,la,U,ne,ro,Le,Gs,so,Bs,ia,nt,Is,pa,Me,na,he,Ls,lo,Ms,Us,ha,Ue,fa,Y,fe,io,Ye,Ys,po,Ws,ca,ce,zs,no,Js,Ks,ua,We,ma,W,ue,ho,ze,Qs,fo,Vs,_a,me,Xs,co,Zs,el,ga,Je,da,R,tl,uo,ol,al,ht,rl,sl,ya;return ge=new k({}),ye=new k({}),ve=new v({props:{code:`from huggingface_hub import create_repo
create_repo("lysandre/test-model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(<span class="hljs-string">&quot;lysandre/test-model&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-model&#x27;</span>`}}),$e=new v({props:{code:`from huggingface_hub import create_repo
create_repo("lysandre/test-dataset", repo_type="dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(<span class="hljs-string">&quot;lysandre/test-dataset&quot;</span>, repo_type=<span class="hljs-string">&quot;dataset&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-dataset&#x27;</span>`}}),we=new v({props:{code:`from huggingface_hub import create_repo
create_repo("lysandre/test-private", private=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(<span class="hljs-string">&quot;lysandre/test-private&quot;</span>, private=<span class="hljs-literal">True</span>)`}}),be=new k({}),Ee=new v({props:{code:"delete_repo(repo_id=name)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=name)'}}),ke=new v({props:{code:`from huggingface_hub import get_full_repo_name, delete_repo
name = get_full_repo_name(repo_name)
delete_repo(repo_id=name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> get_full_repo_name, delete_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>name = get_full_repo_name(repo_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=name)`}}),je=new v({props:{code:'delete_repo(repo_id=REPO_NAME, repo_type="dataset")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=REPO_NAME, repo_type=<span class="hljs-string">&quot;dataset&quot;</span>)'}}),Ae=new k({}),Pe=new v({props:{code:`from huggingface_hub import update_repo_visibility
update_repo_visibility(name=REPO_NAME, private=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> update_repo_visibility
<span class="hljs-meta">&gt;&gt;&gt; </span>update_repo_visibility(name=REPO_NAME, private=<span class="hljs-literal">True</span>)`}}),qe=new k({}),Se=new k({}),Re=new v({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="<path>/<to>/<folder>")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;&lt;path&gt;/&lt;to&gt;/&lt;folder&gt;&quot;</span>)`}}),xe=new k({}),Ne=new v({props:{code:'repo = Repository(local_dir="w2v2", clone_from="facebook/wav2vec2-large-960h-lv60")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;w2v2&quot;</span>, clone_from=<span class="hljs-string">&quot;facebook/wav2vec2-large-960h-lv60&quot;</span>)'}}),De=new v({props:{code:'repo = Repository(local_dir="huggingface-hub", clone_from="https://huggingface.co/facebook/wav2vec2-large-960h-lv60")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;huggingface-hub&quot;</span>, clone_from=<span class="hljs-string">&quot;https://huggingface.co/facebook/wav2vec2-large-960h-lv60&quot;</span>)'}}),Oe=new v({props:{code:`repo_url = create_repo(repo_id="repo_name")
repo = Repository(local_dir="repo_local_path", clone_from=repo_url)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo_url = create_repo(repo_id=<span class="hljs-string">&quot;repo_name&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;repo_local_path&quot;</span>, clone_from=repo_url)`}}),Te=new v({props:{code:`repo = Repository(
  "my-dataset", 
  clone_from="<user>/<dataset_id>", 
  use_auth_token=True, 
  repo_type="dataset",
  git_user="MyName",
  git_email="me@cool.mail"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;my-dataset&quot;</span>, 
<span class="hljs-meta">... </span>  clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;dataset_id&gt;&quot;</span>, 
<span class="hljs-meta">... </span>  use_auth_token=<span class="hljs-literal">True</span>, 
<span class="hljs-meta">... </span>  repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>  git_user=<span class="hljs-string">&quot;MyName&quot;</span>,
<span class="hljs-meta">... </span>  git_email=<span class="hljs-string">&quot;me@cool.mail&quot;</span>
<span class="hljs-meta">... </span>)`}}),He=new k({}),Fe=new v({props:{code:`repo = Repository(local_dir="huggingface-hub", clone_from="<user>/<dataset_id>", revision='branch1')
repo.git_checkout("branch2")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;huggingface-hub&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;dataset_id&gt;&quot;</span>, revision=<span class="hljs-string">&#x27;branch1&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_checkout(<span class="hljs-string">&quot;branch2&quot;</span>)`}}),Ge=new k({}),Be=new v({props:{code:"repo.git_pull()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()'}}),Ie=new v({props:{code:"repo.git_pull(rebase=True)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull(rebase=<span class="hljs-literal">True</span>)'}}),Le=new k({}),Me=new v({props:{code:'repo.git_add("path/to/file")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)'}}),Ue=new v({props:{code:'repo.git_add("path/to/file", auto_lfs_track=True)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>, auto_lfs_track=<span class="hljs-literal">True</span>)'}}),Ye=new k({}),We=new v({props:{code:'repo.git_commit(commit_message="add my first model config file :)")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)'}}),ze=new k({}),Je=new v({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),{c(){N=r("meta"),_o=h(),D=r("h1"),z=r("a"),yt=r("span"),u(ge.$$.fragment),La=h(),vt=r("span"),Ma=i("How to create and manage a repository"),go=h(),Ke=r("p"),Ua=i("A repository is a space for you to store your model or dataset files. This guide will show you how to:"),yo=h(),j=r("ul"),$t=r("li"),Ya=i("Create and delete a repository."),Wa=h(),wt=r("li"),za=i("Adjust repository visibility."),Ja=h(),de=r("li"),Ka=i("Use the "),Qe=r("a"),Qa=i("Repository"),Va=i(" class for common Git operations like clone, branch, push, etc."),vo=h(),O=r("h2"),J=r("a"),bt=r("span"),u(ye.$$.fragment),Xa=h(),Et=r("span"),Za=i("Create a repository"),$o=h(),w=r("p"),er=i("Create an empty repository with "),Ve=r("a"),tr=i("create_repo()"),or=i(" and give it a name with the "),kt=r("code"),ar=i("repo_id"),rr=i(" parameter. The "),jt=r("code"),sr=i("repo_id"),lr=i(" is your namespace followed by the repository name: "),At=r("code"),ir=i("{username_or_org}/{repo_name}"),pr=i("."),wo=h(),u(ve.$$.fragment),bo=h(),A=r("p"),nr=i("By default, "),Xe=r("a"),hr=i("create_repo()"),fr=i(" creates a model repository. But you can use the "),Pt=r("code"),cr=i("repo_type"),ur=i(" parameter to specify another repository type. For example, if you want to create a dataset repository:"),Eo=h(),u($e.$$.fragment),ko=h(),K=r("p"),mr=i("When creating a repository, you also have the option to set your repository visibility with the "),qt=r("code"),_r=i("private"),gr=i(" parameter. For example, if you want to create a private repository:"),jo=h(),u(we.$$.fragment),Ao=h(),Q=r("p"),dr=i("If you want to change the repository visibility at a later time, you can use the "),Ze=r("a"),yr=i("update_repo_visibility()"),vr=i(" function."),Po=h(),T=r("h2"),V=r("a"),Ct=r("span"),u(be.$$.fragment),$r=h(),St=r("span"),wr=i("Delete a repository"),qo=h(),X=r("p"),br=i("Delete a repository with "),et=r("a"),Er=i("delete_repo()"),kr=i(". Make sure you are certain you want to delete a repository because this is an irreversible process!"),Co=h(),Z=r("p"),jr=i("Specify the "),Rt=r("code"),Ar=i("repo_id"),Pr=i(" of the repository you want to delete:"),So=h(),u(Ee.$$.fragment),Ro=h(),P=r("p"),qr=i("If you aren\u2019t sure what the "),xt=r("code"),Cr=i("repo_id"),Sr=i(" is or you want to quickly retrieve it, you can also use the "),tt=r("a"),Rr=i("get_full_repo_name()"),xr=i(" function:"),xo=h(),u(ke.$$.fragment),No=h(),ee=r("p"),Nr=i("You can also specify the repository type to delete by adding the "),Nt=r("code"),Dr=i("repo_type"),Or=i(" parameter:"),Do=h(),u(je.$$.fragment),Oo=h(),H=r("h2"),te=r("a"),Dt=r("span"),u(Ae.$$.fragment),Tr=h(),Ot=r("span"),Hr=i("Change repository visibility"),To=h(),ot=r("p"),Fr=i("A repository can be public or private. A private repository is only visible to you or members of the organization in which the repository is located. Change a repository to private as shown in the following:"),Ho=h(),u(Pe.$$.fragment),Fo=h(),F=r("h2"),oe=r("a"),Tt=r("span"),u(qe.$$.fragment),Gr=h(),Ht=r("span"),Br=i("The Repository class"),Go=h(),$=r("p"),Ir=i("The "),at=r("a"),Lr=i("Repository"),Mr=i(" class allows you to interact with files and repositories on the Hub with functions similar to "),Ft=r("code"),Ur=i("git"),Yr=i(" commands. "),rt=r("a"),Wr=i("Repository"),zr=i(" is a wrapper over Git and Git-LFS methods, so make sure you have Git-LFS installed (see "),Ce=r("a"),Jr=i("here"),Kr=i(" for installation instructions) and set up before you begin. With "),st=r("a"),Qr=i("Repository"),Vr=i(", you can use the Git commands you already know and love."),Bo=h(),G=r("h3"),ae=r("a"),Gt=r("span"),u(Se.$$.fragment),Xr=h(),Bt=r("span"),Zr=i("Use a local repository"),Io=h(),re=r("p"),es=i("Instantiate a "),lt=r("a"),ts=i("Repository"),os=i(" object with a path to a local repository:"),Lo=h(),u(Re.$$.fragment),Mo=h(),B=r("h3"),se=r("a"),It=r("span"),u(xe.$$.fragment),as=h(),Lt=r("span"),rs=i("Clone"),Uo=h(),q=r("p"),ss=i("The "),Mt=r("code"),ls=i("clone_from"),is=i(" parameter clones a repository from a Hugging Face repository ID to a local directory specified by the "),Ut=r("code"),ps=i("local_dir"),ns=i(" argument:"),Yo=h(),u(Ne.$$.fragment),Wo=h(),I=r("p"),Yt=r("code"),hs=i("clone_from"),fs=i(" can also clone a repository from a specified directory using a URL (if you are working offline, this parameter should be "),Wt=r("code"),cs=i("None"),us=i("):"),zo=h(),u(De.$$.fragment),Jo=h(),C=r("p"),ms=i("You can combine the "),zt=r("code"),_s=i("clone_from"),gs=i(" parameter with "),it=r("a"),ds=i("create_repo()"),ys=i(" to create and clone a repository:"),Ko=h(),u(Oe.$$.fragment),Qo=h(),S=r("p"),vs=i("You can also attribute a Git username and email to a cloned repository by specifying the "),Jt=r("code"),$s=i("git_user"),ws=i(" and "),Kt=r("code"),bs=i("git_email"),Es=i(" parameters. When users commit to that repository, Git will be aware of the commit author."),Vo=h(),u(Te.$$.fragment),Xo=h(),L=r("h3"),le=r("a"),Qt=r("span"),u(He.$$.fragment),ks=h(),Vt=r("span"),js=i("Branch"),Zo=h(),b=r("p"),As=i("Branches are important for collaboration and experimentation without impacting your current files and code. Switch between branches with "),Xt=r("code"),Ps=i("git_checkout"),qs=i(". For example, if you want to switch from "),Zt=r("code"),Cs=i("branch1"),Ss=i(" to "),eo=r("code"),Rs=i("branch2"),xs=i(":"),ea=h(),u(Fe.$$.fragment),ta=h(),M=r("h3"),ie=r("a"),to=r("span"),u(Ge.$$.fragment),Ns=h(),oo=r("span"),Ds=i("Pull"),oa=h(),pt=r("p"),Os=i("Pull allows you to update a current local branch with changes from a remote repository:"),aa=h(),u(Be.$$.fragment),ra=h(),pe=r("p"),Ts=i("Set "),ao=r("code"),Hs=i("rebase=True"),Fs=i(" if you want your local commits to occur after your branch is updated with the new commits from the remote:"),sa=h(),u(Ie.$$.fragment),la=h(),U=r("h3"),ne=r("a"),ro=r("span"),u(Le.$$.fragment),Gs=h(),so=r("span"),Bs=i("Add"),ia=h(),nt=r("p"),Is=i("Stage a file to add to your repository with [`git_add]:"),pa=h(),u(Me.$$.fragment),na=h(),he=r("p"),Ls=i("To automatically track large files (>10MB), set "),lo=r("code"),Ms=i("auto_lfs_track=True"),Us=i(":"),ha=h(),u(Ue.$$.fragment),fa=h(),Y=r("h3"),fe=r("a"),io=r("span"),u(Ye.$$.fragment),Ys=h(),po=r("span"),Ws=i("Commit"),ca=h(),ce=r("p"),zs=i("After staging a file to add, commit the staged changes with "),no=r("code"),Js=i("git_commit"),Ks=i(". You can also add a commit message to describe the changes:"),ua=h(),u(We.$$.fragment),ma=h(),W=r("h3"),ue=r("a"),ho=r("span"),u(ze.$$.fragment),Qs=h(),fo=r("span"),Vs=i("Push"),_a=h(),me=r("p"),Xs=i("Finally, push your file to your repository with "),co=r("code"),Zs=i("git_push"),el=i(":"),ga=h(),u(Je.$$.fragment),da=h(),R=r("p"),tl=i("Since this workflow is so common, there is a "),uo=r("code"),ol=i("commit"),al=i(" context manager to pull, add, commit and push files all in one step (see this "),ht=r("a"),rl=i("guide"),sl=i(" for more details)."),this.h()},l(e){const a=Oi('[data-svelte="svelte-1phssyn"]',document.head);N=s(a,"META",{name:!0,content:!0}),a.forEach(t),_o=f(e),D=s(e,"H1",{class:!0});var va=l(D);z=s(va,"A",{id:!0,class:!0,href:!0});var il=l(z);yt=s(il,"SPAN",{});var pl=l(yt);m(ge.$$.fragment,pl),pl.forEach(t),il.forEach(t),La=f(va),vt=s(va,"SPAN",{});var nl=l(vt);Ma=p(nl,"How to create and manage a repository"),nl.forEach(t),va.forEach(t),go=f(e),Ke=s(e,"P",{});var hl=l(Ke);Ua=p(hl,"A repository is a space for you to store your model or dataset files. This guide will show you how to:"),hl.forEach(t),yo=f(e),j=s(e,"UL",{});var ft=l(j);$t=s(ft,"LI",{});var fl=l($t);Ya=p(fl,"Create and delete a repository."),fl.forEach(t),Wa=f(ft),wt=s(ft,"LI",{});var cl=l(wt);za=p(cl,"Adjust repository visibility."),cl.forEach(t),Ja=f(ft),de=s(ft,"LI",{});var $a=l(de);Ka=p($a,"Use the "),Qe=s($a,"A",{href:!0});var ul=l(Qe);Qa=p(ul,"Repository"),ul.forEach(t),Va=p($a," class for common Git operations like clone, branch, push, etc."),$a.forEach(t),ft.forEach(t),vo=f(e),O=s(e,"H2",{class:!0});var wa=l(O);J=s(wa,"A",{id:!0,class:!0,href:!0});var ml=l(J);bt=s(ml,"SPAN",{});var _l=l(bt);m(ye.$$.fragment,_l),_l.forEach(t),ml.forEach(t),Xa=f(wa),Et=s(wa,"SPAN",{});var gl=l(Et);Za=p(gl,"Create a repository"),gl.forEach(t),wa.forEach(t),$o=f(e),w=s(e,"P",{});var x=l(w);er=p(x,"Create an empty repository with "),Ve=s(x,"A",{href:!0});var dl=l(Ve);tr=p(dl,"create_repo()"),dl.forEach(t),or=p(x," and give it a name with the "),kt=s(x,"CODE",{});var yl=l(kt);ar=p(yl,"repo_id"),yl.forEach(t),rr=p(x," parameter. The "),jt=s(x,"CODE",{});var vl=l(jt);sr=p(vl,"repo_id"),vl.forEach(t),lr=p(x," is your namespace followed by the repository name: "),At=s(x,"CODE",{});var $l=l(At);ir=p($l,"{username_or_org}/{repo_name}"),$l.forEach(t),pr=p(x,"."),x.forEach(t),wo=f(e),m(ve.$$.fragment,e),bo=f(e),A=s(e,"P",{});var ct=l(A);nr=p(ct,"By default, "),Xe=s(ct,"A",{href:!0});var wl=l(Xe);hr=p(wl,"create_repo()"),wl.forEach(t),fr=p(ct," creates a model repository. But you can use the "),Pt=s(ct,"CODE",{});var bl=l(Pt);cr=p(bl,"repo_type"),bl.forEach(t),ur=p(ct," parameter to specify another repository type. For example, if you want to create a dataset repository:"),ct.forEach(t),Eo=f(e),m($e.$$.fragment,e),ko=f(e),K=s(e,"P",{});var ba=l(K);mr=p(ba,"When creating a repository, you also have the option to set your repository visibility with the "),qt=s(ba,"CODE",{});var El=l(qt);_r=p(El,"private"),El.forEach(t),gr=p(ba," parameter. For example, if you want to create a private repository:"),ba.forEach(t),jo=f(e),m(we.$$.fragment,e),Ao=f(e),Q=s(e,"P",{});var Ea=l(Q);dr=p(Ea,"If you want to change the repository visibility at a later time, you can use the "),Ze=s(Ea,"A",{href:!0});var kl=l(Ze);yr=p(kl,"update_repo_visibility()"),kl.forEach(t),vr=p(Ea," function."),Ea.forEach(t),Po=f(e),T=s(e,"H2",{class:!0});var ka=l(T);V=s(ka,"A",{id:!0,class:!0,href:!0});var jl=l(V);Ct=s(jl,"SPAN",{});var Al=l(Ct);m(be.$$.fragment,Al),Al.forEach(t),jl.forEach(t),$r=f(ka),St=s(ka,"SPAN",{});var Pl=l(St);wr=p(Pl,"Delete a repository"),Pl.forEach(t),ka.forEach(t),qo=f(e),X=s(e,"P",{});var ja=l(X);br=p(ja,"Delete a repository with "),et=s(ja,"A",{href:!0});var ql=l(et);Er=p(ql,"delete_repo()"),ql.forEach(t),kr=p(ja,". Make sure you are certain you want to delete a repository because this is an irreversible process!"),ja.forEach(t),Co=f(e),Z=s(e,"P",{});var Aa=l(Z);jr=p(Aa,"Specify the "),Rt=s(Aa,"CODE",{});var Cl=l(Rt);Ar=p(Cl,"repo_id"),Cl.forEach(t),Pr=p(Aa," of the repository you want to delete:"),Aa.forEach(t),So=f(e),m(Ee.$$.fragment,e),Ro=f(e),P=s(e,"P",{});var ut=l(P);qr=p(ut,"If you aren\u2019t sure what the "),xt=s(ut,"CODE",{});var Sl=l(xt);Cr=p(Sl,"repo_id"),Sl.forEach(t),Sr=p(ut," is or you want to quickly retrieve it, you can also use the "),tt=s(ut,"A",{href:!0});var Rl=l(tt);Rr=p(Rl,"get_full_repo_name()"),Rl.forEach(t),xr=p(ut," function:"),ut.forEach(t),xo=f(e),m(ke.$$.fragment,e),No=f(e),ee=s(e,"P",{});var Pa=l(ee);Nr=p(Pa,"You can also specify the repository type to delete by adding the "),Nt=s(Pa,"CODE",{});var xl=l(Nt);Dr=p(xl,"repo_type"),xl.forEach(t),Or=p(Pa," parameter:"),Pa.forEach(t),Do=f(e),m(je.$$.fragment,e),Oo=f(e),H=s(e,"H2",{class:!0});var qa=l(H);te=s(qa,"A",{id:!0,class:!0,href:!0});var Nl=l(te);Dt=s(Nl,"SPAN",{});var Dl=l(Dt);m(Ae.$$.fragment,Dl),Dl.forEach(t),Nl.forEach(t),Tr=f(qa),Ot=s(qa,"SPAN",{});var Ol=l(Ot);Hr=p(Ol,"Change repository visibility"),Ol.forEach(t),qa.forEach(t),To=f(e),ot=s(e,"P",{});var Tl=l(ot);Fr=p(Tl,"A repository can be public or private. A private repository is only visible to you or members of the organization in which the repository is located. Change a repository to private as shown in the following:"),Tl.forEach(t),Ho=f(e),m(Pe.$$.fragment,e),Fo=f(e),F=s(e,"H2",{class:!0});var Ca=l(F);oe=s(Ca,"A",{id:!0,class:!0,href:!0});var Hl=l(oe);Tt=s(Hl,"SPAN",{});var Fl=l(Tt);m(qe.$$.fragment,Fl),Fl.forEach(t),Hl.forEach(t),Gr=f(Ca),Ht=s(Ca,"SPAN",{});var Gl=l(Ht);Br=p(Gl,"The Repository class"),Gl.forEach(t),Ca.forEach(t),Go=f(e),$=s(e,"P",{});var E=l($);Ir=p(E,"The "),at=s(E,"A",{href:!0});var Bl=l(at);Lr=p(Bl,"Repository"),Bl.forEach(t),Mr=p(E," class allows you to interact with files and repositories on the Hub with functions similar to "),Ft=s(E,"CODE",{});var Il=l(Ft);Ur=p(Il,"git"),Il.forEach(t),Yr=p(E," commands. "),rt=s(E,"A",{href:!0});var Ll=l(rt);Wr=p(Ll,"Repository"),Ll.forEach(t),zr=p(E," is a wrapper over Git and Git-LFS methods, so make sure you have Git-LFS installed (see "),Ce=s(E,"A",{href:!0,rel:!0});var Ml=l(Ce);Jr=p(Ml,"here"),Ml.forEach(t),Kr=p(E," for installation instructions) and set up before you begin. With "),st=s(E,"A",{href:!0});var Ul=l(st);Qr=p(Ul,"Repository"),Ul.forEach(t),Vr=p(E,", you can use the Git commands you already know and love."),E.forEach(t),Bo=f(e),G=s(e,"H3",{class:!0});var Sa=l(G);ae=s(Sa,"A",{id:!0,class:!0,href:!0});var Yl=l(ae);Gt=s(Yl,"SPAN",{});var Wl=l(Gt);m(Se.$$.fragment,Wl),Wl.forEach(t),Yl.forEach(t),Xr=f(Sa),Bt=s(Sa,"SPAN",{});var zl=l(Bt);Zr=p(zl,"Use a local repository"),zl.forEach(t),Sa.forEach(t),Io=f(e),re=s(e,"P",{});var Ra=l(re);es=p(Ra,"Instantiate a "),lt=s(Ra,"A",{href:!0});var Jl=l(lt);ts=p(Jl,"Repository"),Jl.forEach(t),os=p(Ra," object with a path to a local repository:"),Ra.forEach(t),Lo=f(e),m(Re.$$.fragment,e),Mo=f(e),B=s(e,"H3",{class:!0});var xa=l(B);se=s(xa,"A",{id:!0,class:!0,href:!0});var Kl=l(se);It=s(Kl,"SPAN",{});var Ql=l(It);m(xe.$$.fragment,Ql),Ql.forEach(t),Kl.forEach(t),as=f(xa),Lt=s(xa,"SPAN",{});var Vl=l(Lt);rs=p(Vl,"Clone"),Vl.forEach(t),xa.forEach(t),Uo=f(e),q=s(e,"P",{});var mt=l(q);ss=p(mt,"The "),Mt=s(mt,"CODE",{});var Xl=l(Mt);ls=p(Xl,"clone_from"),Xl.forEach(t),is=p(mt," parameter clones a repository from a Hugging Face repository ID to a local directory specified by the "),Ut=s(mt,"CODE",{});var Zl=l(Ut);ps=p(Zl,"local_dir"),Zl.forEach(t),ns=p(mt," argument:"),mt.forEach(t),Yo=f(e),m(Ne.$$.fragment,e),Wo=f(e),I=s(e,"P",{});var mo=l(I);Yt=s(mo,"CODE",{});var ei=l(Yt);hs=p(ei,"clone_from"),ei.forEach(t),fs=p(mo," can also clone a repository from a specified directory using a URL (if you are working offline, this parameter should be "),Wt=s(mo,"CODE",{});var ti=l(Wt);cs=p(ti,"None"),ti.forEach(t),us=p(mo,"):"),mo.forEach(t),zo=f(e),m(De.$$.fragment,e),Jo=f(e),C=s(e,"P",{});var _t=l(C);ms=p(_t,"You can combine the "),zt=s(_t,"CODE",{});var oi=l(zt);_s=p(oi,"clone_from"),oi.forEach(t),gs=p(_t," parameter with "),it=s(_t,"A",{href:!0});var ai=l(it);ds=p(ai,"create_repo()"),ai.forEach(t),ys=p(_t," to create and clone a repository:"),_t.forEach(t),Ko=f(e),m(Oe.$$.fragment,e),Qo=f(e),S=s(e,"P",{});var gt=l(S);vs=p(gt,"You can also attribute a Git username and email to a cloned repository by specifying the "),Jt=s(gt,"CODE",{});var ri=l(Jt);$s=p(ri,"git_user"),ri.forEach(t),ws=p(gt," and "),Kt=s(gt,"CODE",{});var si=l(Kt);bs=p(si,"git_email"),si.forEach(t),Es=p(gt," parameters. When users commit to that repository, Git will be aware of the commit author."),gt.forEach(t),Vo=f(e),m(Te.$$.fragment,e),Xo=f(e),L=s(e,"H3",{class:!0});var Na=l(L);le=s(Na,"A",{id:!0,class:!0,href:!0});var li=l(le);Qt=s(li,"SPAN",{});var ii=l(Qt);m(He.$$.fragment,ii),ii.forEach(t),li.forEach(t),ks=f(Na),Vt=s(Na,"SPAN",{});var pi=l(Vt);js=p(pi,"Branch"),pi.forEach(t),Na.forEach(t),Zo=f(e),b=s(e,"P",{});var _e=l(b);As=p(_e,"Branches are important for collaboration and experimentation without impacting your current files and code. Switch between branches with "),Xt=s(_e,"CODE",{});var ni=l(Xt);Ps=p(ni,"git_checkout"),ni.forEach(t),qs=p(_e,". For example, if you want to switch from "),Zt=s(_e,"CODE",{});var hi=l(Zt);Cs=p(hi,"branch1"),hi.forEach(t),Ss=p(_e," to "),eo=s(_e,"CODE",{});var fi=l(eo);Rs=p(fi,"branch2"),fi.forEach(t),xs=p(_e,":"),_e.forEach(t),ea=f(e),m(Fe.$$.fragment,e),ta=f(e),M=s(e,"H3",{class:!0});var Da=l(M);ie=s(Da,"A",{id:!0,class:!0,href:!0});var ci=l(ie);to=s(ci,"SPAN",{});var ui=l(to);m(Ge.$$.fragment,ui),ui.forEach(t),ci.forEach(t),Ns=f(Da),oo=s(Da,"SPAN",{});var mi=l(oo);Ds=p(mi,"Pull"),mi.forEach(t),Da.forEach(t),oa=f(e),pt=s(e,"P",{});var _i=l(pt);Os=p(_i,"Pull allows you to update a current local branch with changes from a remote repository:"),_i.forEach(t),aa=f(e),m(Be.$$.fragment,e),ra=f(e),pe=s(e,"P",{});var Oa=l(pe);Ts=p(Oa,"Set "),ao=s(Oa,"CODE",{});var gi=l(ao);Hs=p(gi,"rebase=True"),gi.forEach(t),Fs=p(Oa," if you want your local commits to occur after your branch is updated with the new commits from the remote:"),Oa.forEach(t),sa=f(e),m(Ie.$$.fragment,e),la=f(e),U=s(e,"H3",{class:!0});var Ta=l(U);ne=s(Ta,"A",{id:!0,class:!0,href:!0});var di=l(ne);ro=s(di,"SPAN",{});var yi=l(ro);m(Le.$$.fragment,yi),yi.forEach(t),di.forEach(t),Gs=f(Ta),so=s(Ta,"SPAN",{});var vi=l(so);Bs=p(vi,"Add"),vi.forEach(t),Ta.forEach(t),ia=f(e),nt=s(e,"P",{});var $i=l(nt);Is=p($i,"Stage a file to add to your repository with [`git_add]:"),$i.forEach(t),pa=f(e),m(Me.$$.fragment,e),na=f(e),he=s(e,"P",{});var Ha=l(he);Ls=p(Ha,"To automatically track large files (>10MB), set "),lo=s(Ha,"CODE",{});var wi=l(lo);Ms=p(wi,"auto_lfs_track=True"),wi.forEach(t),Us=p(Ha,":"),Ha.forEach(t),ha=f(e),m(Ue.$$.fragment,e),fa=f(e),Y=s(e,"H3",{class:!0});var Fa=l(Y);fe=s(Fa,"A",{id:!0,class:!0,href:!0});var bi=l(fe);io=s(bi,"SPAN",{});var Ei=l(io);m(Ye.$$.fragment,Ei),Ei.forEach(t),bi.forEach(t),Ys=f(Fa),po=s(Fa,"SPAN",{});var ki=l(po);Ws=p(ki,"Commit"),ki.forEach(t),Fa.forEach(t),ca=f(e),ce=s(e,"P",{});var Ga=l(ce);zs=p(Ga,"After staging a file to add, commit the staged changes with "),no=s(Ga,"CODE",{});var ji=l(no);Js=p(ji,"git_commit"),ji.forEach(t),Ks=p(Ga,". You can also add a commit message to describe the changes:"),Ga.forEach(t),ua=f(e),m(We.$$.fragment,e),ma=f(e),W=s(e,"H3",{class:!0});var Ba=l(W);ue=s(Ba,"A",{id:!0,class:!0,href:!0});var Ai=l(ue);ho=s(Ai,"SPAN",{});var Pi=l(ho);m(ze.$$.fragment,Pi),Pi.forEach(t),Ai.forEach(t),Qs=f(Ba),fo=s(Ba,"SPAN",{});var qi=l(fo);Vs=p(qi,"Push"),qi.forEach(t),Ba.forEach(t),_a=f(e),me=s(e,"P",{});var Ia=l(me);Xs=p(Ia,"Finally, push your file to your repository with "),co=s(Ia,"CODE",{});var Ci=l(co);Zs=p(Ci,"git_push"),Ci.forEach(t),el=p(Ia,":"),Ia.forEach(t),ga=f(e),m(Je.$$.fragment,e),da=f(e),R=s(e,"P",{});var dt=l(R);tl=p(dt,"Since this workflow is so common, there is a "),uo=s(dt,"CODE",{});var Si=l(uo);ol=p(Si,"commit"),Si.forEach(t),al=p(dt," context manager to pull, add, commit and push files all in one step (see this "),ht=s(dt,"A",{href:!0});var Ri=l(ht);rl=p(Ri,"guide"),Ri.forEach(t),sl=p(dt," for more details)."),dt.forEach(t),this.h()},h(){c(N,"name","hf:doc:metadata"),c(N,"content",JSON.stringify(Gi)),c(z,"id","how-to-create-and-manage-a-repository"),c(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z,"href","#how-to-create-and-manage-a-repository"),c(D,"class","relative group"),c(Qe,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),c(J,"id","create-a-repository"),c(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J,"href","#create-a-repository"),c(O,"class","relative group"),c(Ve,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo"),c(Xe,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo"),c(Ze,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.update_repo_visibility"),c(V,"id","delete-a-repository"),c(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V,"href","#delete-a-repository"),c(T,"class","relative group"),c(et,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.delete_repo"),c(tt,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.get_full_repo_name"),c(te,"id","change-repository-visibility"),c(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(te,"href","#change-repository-visibility"),c(H,"class","relative group"),c(oe,"id","the-repository-class"),c(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oe,"href","#the-repository-class"),c(F,"class","relative group"),c(at,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),c(rt,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),c(Ce,"href","https://git-lfs.github.com/"),c(Ce,"rel","nofollow"),c(st,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),c(ae,"id","use-a-local-repository"),c(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ae,"href","#use-a-local-repository"),c(G,"class","relative group"),c(lt,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),c(se,"id","clone"),c(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(se,"href","#clone"),c(B,"class","relative group"),c(it,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo"),c(le,"id","branch"),c(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(le,"href","#branch"),c(L,"class","relative group"),c(ie,"id","pull"),c(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ie,"href","#pull"),c(M,"class","relative group"),c(ne,"id","add"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#add"),c(U,"class","relative group"),c(fe,"id","commit"),c(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fe,"href","#commit"),c(Y,"class","relative group"),c(ue,"id","push"),c(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ue,"href","#push"),c(W,"class","relative group"),c(ht,"href","how-to-upstream#commit-context-manager")},m(e,a){o(document.head,N),n(e,_o,a),n(e,D,a),o(D,z),o(z,yt),_(ge,yt,null),o(D,La),o(D,vt),o(vt,Ma),n(e,go,a),n(e,Ke,a),o(Ke,Ua),n(e,yo,a),n(e,j,a),o(j,$t),o($t,Ya),o(j,Wa),o(j,wt),o(wt,za),o(j,Ja),o(j,de),o(de,Ka),o(de,Qe),o(Qe,Qa),o(de,Va),n(e,vo,a),n(e,O,a),o(O,J),o(J,bt),_(ye,bt,null),o(O,Xa),o(O,Et),o(Et,Za),n(e,$o,a),n(e,w,a),o(w,er),o(w,Ve),o(Ve,tr),o(w,or),o(w,kt),o(kt,ar),o(w,rr),o(w,jt),o(jt,sr),o(w,lr),o(w,At),o(At,ir),o(w,pr),n(e,wo,a),_(ve,e,a),n(e,bo,a),n(e,A,a),o(A,nr),o(A,Xe),o(Xe,hr),o(A,fr),o(A,Pt),o(Pt,cr),o(A,ur),n(e,Eo,a),_($e,e,a),n(e,ko,a),n(e,K,a),o(K,mr),o(K,qt),o(qt,_r),o(K,gr),n(e,jo,a),_(we,e,a),n(e,Ao,a),n(e,Q,a),o(Q,dr),o(Q,Ze),o(Ze,yr),o(Q,vr),n(e,Po,a),n(e,T,a),o(T,V),o(V,Ct),_(be,Ct,null),o(T,$r),o(T,St),o(St,wr),n(e,qo,a),n(e,X,a),o(X,br),o(X,et),o(et,Er),o(X,kr),n(e,Co,a),n(e,Z,a),o(Z,jr),o(Z,Rt),o(Rt,Ar),o(Z,Pr),n(e,So,a),_(Ee,e,a),n(e,Ro,a),n(e,P,a),o(P,qr),o(P,xt),o(xt,Cr),o(P,Sr),o(P,tt),o(tt,Rr),o(P,xr),n(e,xo,a),_(ke,e,a),n(e,No,a),n(e,ee,a),o(ee,Nr),o(ee,Nt),o(Nt,Dr),o(ee,Or),n(e,Do,a),_(je,e,a),n(e,Oo,a),n(e,H,a),o(H,te),o(te,Dt),_(Ae,Dt,null),o(H,Tr),o(H,Ot),o(Ot,Hr),n(e,To,a),n(e,ot,a),o(ot,Fr),n(e,Ho,a),_(Pe,e,a),n(e,Fo,a),n(e,F,a),o(F,oe),o(oe,Tt),_(qe,Tt,null),o(F,Gr),o(F,Ht),o(Ht,Br),n(e,Go,a),n(e,$,a),o($,Ir),o($,at),o(at,Lr),o($,Mr),o($,Ft),o(Ft,Ur),o($,Yr),o($,rt),o(rt,Wr),o($,zr),o($,Ce),o(Ce,Jr),o($,Kr),o($,st),o(st,Qr),o($,Vr),n(e,Bo,a),n(e,G,a),o(G,ae),o(ae,Gt),_(Se,Gt,null),o(G,Xr),o(G,Bt),o(Bt,Zr),n(e,Io,a),n(e,re,a),o(re,es),o(re,lt),o(lt,ts),o(re,os),n(e,Lo,a),_(Re,e,a),n(e,Mo,a),n(e,B,a),o(B,se),o(se,It),_(xe,It,null),o(B,as),o(B,Lt),o(Lt,rs),n(e,Uo,a),n(e,q,a),o(q,ss),o(q,Mt),o(Mt,ls),o(q,is),o(q,Ut),o(Ut,ps),o(q,ns),n(e,Yo,a),_(Ne,e,a),n(e,Wo,a),n(e,I,a),o(I,Yt),o(Yt,hs),o(I,fs),o(I,Wt),o(Wt,cs),o(I,us),n(e,zo,a),_(De,e,a),n(e,Jo,a),n(e,C,a),o(C,ms),o(C,zt),o(zt,_s),o(C,gs),o(C,it),o(it,ds),o(C,ys),n(e,Ko,a),_(Oe,e,a),n(e,Qo,a),n(e,S,a),o(S,vs),o(S,Jt),o(Jt,$s),o(S,ws),o(S,Kt),o(Kt,bs),o(S,Es),n(e,Vo,a),_(Te,e,a),n(e,Xo,a),n(e,L,a),o(L,le),o(le,Qt),_(He,Qt,null),o(L,ks),o(L,Vt),o(Vt,js),n(e,Zo,a),n(e,b,a),o(b,As),o(b,Xt),o(Xt,Ps),o(b,qs),o(b,Zt),o(Zt,Cs),o(b,Ss),o(b,eo),o(eo,Rs),o(b,xs),n(e,ea,a),_(Fe,e,a),n(e,ta,a),n(e,M,a),o(M,ie),o(ie,to),_(Ge,to,null),o(M,Ns),o(M,oo),o(oo,Ds),n(e,oa,a),n(e,pt,a),o(pt,Os),n(e,aa,a),_(Be,e,a),n(e,ra,a),n(e,pe,a),o(pe,Ts),o(pe,ao),o(ao,Hs),o(pe,Fs),n(e,sa,a),_(Ie,e,a),n(e,la,a),n(e,U,a),o(U,ne),o(ne,ro),_(Le,ro,null),o(U,Gs),o(U,so),o(so,Bs),n(e,ia,a),n(e,nt,a),o(nt,Is),n(e,pa,a),_(Me,e,a),n(e,na,a),n(e,he,a),o(he,Ls),o(he,lo),o(lo,Ms),o(he,Us),n(e,ha,a),_(Ue,e,a),n(e,fa,a),n(e,Y,a),o(Y,fe),o(fe,io),_(Ye,io,null),o(Y,Ys),o(Y,po),o(po,Ws),n(e,ca,a),n(e,ce,a),o(ce,zs),o(ce,no),o(no,Js),o(ce,Ks),n(e,ua,a),_(We,e,a),n(e,ma,a),n(e,W,a),o(W,ue),o(ue,ho),_(ze,ho,null),o(W,Qs),o(W,fo),o(fo,Vs),n(e,_a,a),n(e,me,a),o(me,Xs),o(me,co),o(co,Zs),o(me,el),n(e,ga,a),_(Je,e,a),n(e,da,a),n(e,R,a),o(R,tl),o(R,uo),o(uo,ol),o(R,al),o(R,ht),o(ht,rl),o(R,sl),ya=!0},p:Ti,i(e){ya||(g(ge.$$.fragment,e),g(ye.$$.fragment,e),g(ve.$$.fragment,e),g($e.$$.fragment,e),g(we.$$.fragment,e),g(be.$$.fragment,e),g(Ee.$$.fragment,e),g(ke.$$.fragment,e),g(je.$$.fragment,e),g(Ae.$$.fragment,e),g(Pe.$$.fragment,e),g(qe.$$.fragment,e),g(Se.$$.fragment,e),g(Re.$$.fragment,e),g(xe.$$.fragment,e),g(Ne.$$.fragment,e),g(De.$$.fragment,e),g(Oe.$$.fragment,e),g(Te.$$.fragment,e),g(He.$$.fragment,e),g(Fe.$$.fragment,e),g(Ge.$$.fragment,e),g(Be.$$.fragment,e),g(Ie.$$.fragment,e),g(Le.$$.fragment,e),g(Me.$$.fragment,e),g(Ue.$$.fragment,e),g(Ye.$$.fragment,e),g(We.$$.fragment,e),g(ze.$$.fragment,e),g(Je.$$.fragment,e),ya=!0)},o(e){d(ge.$$.fragment,e),d(ye.$$.fragment,e),d(ve.$$.fragment,e),d($e.$$.fragment,e),d(we.$$.fragment,e),d(be.$$.fragment,e),d(Ee.$$.fragment,e),d(ke.$$.fragment,e),d(je.$$.fragment,e),d(Ae.$$.fragment,e),d(Pe.$$.fragment,e),d(qe.$$.fragment,e),d(Se.$$.fragment,e),d(Re.$$.fragment,e),d(xe.$$.fragment,e),d(Ne.$$.fragment,e),d(De.$$.fragment,e),d(Oe.$$.fragment,e),d(Te.$$.fragment,e),d(He.$$.fragment,e),d(Fe.$$.fragment,e),d(Ge.$$.fragment,e),d(Be.$$.fragment,e),d(Ie.$$.fragment,e),d(Le.$$.fragment,e),d(Me.$$.fragment,e),d(Ue.$$.fragment,e),d(Ye.$$.fragment,e),d(We.$$.fragment,e),d(ze.$$.fragment,e),d(Je.$$.fragment,e),ya=!1},d(e){t(N),e&&t(_o),e&&t(D),y(ge),e&&t(go),e&&t(Ke),e&&t(yo),e&&t(j),e&&t(vo),e&&t(O),y(ye),e&&t($o),e&&t(w),e&&t(wo),y(ve,e),e&&t(bo),e&&t(A),e&&t(Eo),y($e,e),e&&t(ko),e&&t(K),e&&t(jo),y(we,e),e&&t(Ao),e&&t(Q),e&&t(Po),e&&t(T),y(be),e&&t(qo),e&&t(X),e&&t(Co),e&&t(Z),e&&t(So),y(Ee,e),e&&t(Ro),e&&t(P),e&&t(xo),y(ke,e),e&&t(No),e&&t(ee),e&&t(Do),y(je,e),e&&t(Oo),e&&t(H),y(Ae),e&&t(To),e&&t(ot),e&&t(Ho),y(Pe,e),e&&t(Fo),e&&t(F),y(qe),e&&t(Go),e&&t($),e&&t(Bo),e&&t(G),y(Se),e&&t(Io),e&&t(re),e&&t(Lo),y(Re,e),e&&t(Mo),e&&t(B),y(xe),e&&t(Uo),e&&t(q),e&&t(Yo),y(Ne,e),e&&t(Wo),e&&t(I),e&&t(zo),y(De,e),e&&t(Jo),e&&t(C),e&&t(Ko),y(Oe,e),e&&t(Qo),e&&t(S),e&&t(Vo),y(Te,e),e&&t(Xo),e&&t(L),y(He),e&&t(Zo),e&&t(b),e&&t(ea),y(Fe,e),e&&t(ta),e&&t(M),y(Ge),e&&t(oa),e&&t(pt),e&&t(aa),y(Be,e),e&&t(ra),e&&t(pe),e&&t(sa),y(Ie,e),e&&t(la),e&&t(U),y(Le),e&&t(ia),e&&t(nt),e&&t(pa),y(Me,e),e&&t(na),e&&t(he),e&&t(ha),y(Ue,e),e&&t(fa),e&&t(Y),y(Ye),e&&t(ca),e&&t(ce),e&&t(ua),y(We,e),e&&t(ma),e&&t(W),y(ze),e&&t(_a),e&&t(me),e&&t(ga),y(Je,e),e&&t(da),e&&t(R)}}}const Gi={local:"how-to-create-and-manage-a-repository",sections:[{local:"create-a-repository",title:"Create a repository"},{local:"delete-a-repository",title:"Delete a repository"},{local:"change-repository-visibility",title:"Change repository visibility"},{local:"the-repository-class",sections:[{local:"use-a-local-repository",title:"Use a local repository"},{local:"clone",title:"Clone"},{local:"branch",title:"Branch"},{local:"pull",title:"Pull"},{local:"add",title:"Add"},{local:"commit",title:"Commit"},{local:"push",title:"Push"}],title:"The Repository class "}],title:"How to create and manage a repository"};function Bi(ll){return Hi(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ui extends xi{constructor(N){super();Ni(this,N,Bi,Fi,Di,{})}}export{Ui as default,Gi as metadata};
