import{S as wl,i as bl,s as El,e as r,k as c,w as u,t as l,M as kl,c as a,d as o,m as h,a as s,x as g,h as i,b as f,F as t,g as n,y as m,L as jl,q as y,o as _,B as d,v as Al}from"../chunks/vendor-d3924577.js";import{I as B}from"../chunks/IconCopyLink-f94c3d80.js";import{C as $}from"../chunks/CodeBlock-ff545b14.js";function Pl(ps){let R,Yt,S,M,rt,ie,ar,at,sr,Jt,Oe,lr,zt,k,st,ir,pr,lt,nr,cr,pe,hr,Te,fr,ur,Kt,Fe,gr,Qt,U,ne,it,mr,yr,ce,_r,x,he,dr,pt,vr,$r,wr,fe,br,Le,nt,Er,kr,Vt,D,W,ct,ue,jr,ht,Ar,Xt,w,Pr,Ie,Cr,qr,ft,Rr,Sr,ut,xr,Dr,gt,Hr,Nr,Zt,ge,eo,j,Or,Ge,Tr,Fr,mt,Lr,Ir,to,me,oo,Y,Gr,yt,Br,Mr,ro,ye,ao,J,Ur,Be,Wr,Yr,so,H,z,_t,_e,Jr,dt,zr,lo,K,Kr,Me,Qr,Vr,io,Q,Xr,vt,Zr,ea,po,de,no,V,ta,$t,oa,ra,co,ve,ho,N,X,wt,$e,aa,bt,sa,fo,Ue,la,uo,we,go,O,Z,Et,be,ia,kt,pa,mo,v,na,We,ca,ha,jt,fa,ua,Ye,ga,ma,Ee,ya,_a,Je,da,va,yo,T,ee,At,ke,$a,Pt,wa,_o,te,ba,ze,Ea,ka,vo,je,$o,F,oe,Ct,Ae,ja,qt,Aa,wo,A,Pa,Rt,Ca,qa,St,Ra,Sa,bo,Pe,Eo,L,xt,xa,Da,Dt,Ha,Na,ko,Ce,jo,P,Oa,Ht,Ta,Fa,Ke,La,Ia,Ao,qe,Po,C,Ga,Nt,Ba,Ma,Ot,Ua,Wa,Co,Re,qo,I,re,Tt,Se,Ya,Ft,Ja,Ro,b,za,Lt,Ka,Qa,It,Va,Xa,Gt,Za,es,So,xe,xo,G,ae,Bt,De,ts,Mt,os,Do,Qe,rs,Ho,He,No,se,as,Ut,ss,ls,Oo,Ne,To;return ie=new B({}),ce=new $({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),fe=new $({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),ue=new B({}),ge=new $({props:{code:`from huggingface_hub import create_repo
create_repo("lysandre/test-model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(<span class="hljs-string">&quot;lysandre/test-model&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-model&#x27;</span>`}}),me=new $({props:{code:`from huggingface_hub import create_repo
create_repo("lysandre/test-dataset", repo_type="dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(<span class="hljs-string">&quot;lysandre/test-dataset&quot;</span>, repo_type=<span class="hljs-string">&quot;dataset&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-dataset&#x27;</span>`}}),ye=new $({props:{code:`from huggingface_hub import create_repo
create_repo("lysandre/test-private", private=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(<span class="hljs-string">&quot;lysandre/test-private&quot;</span>, private=<span class="hljs-literal">True</span>)`}}),_e=new B({}),de=new $({props:{code:"delete_repo(repo_id=name)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=name)'}}),ve=new $({props:{code:'delete_repo(repo_id=REPO_NAME, repo_type="dataset")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=REPO_NAME, repo_type=<span class="hljs-string">&quot;dataset&quot;</span>)'}}),$e=new B({}),we=new $({props:{code:`from huggingface_hub import update_repo_visibility
update_repo_visibility(name=REPO_NAME, private=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> update_repo_visibility
<span class="hljs-meta">&gt;&gt;&gt; </span>update_repo_visibility(name=REPO_NAME, private=<span class="hljs-literal">True</span>)`}}),be=new B({}),ke=new B({}),je=new $({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="<path>/<to>/<folder>")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;&lt;path&gt;/&lt;to&gt;/&lt;folder&gt;&quot;</span>)`}}),Ae=new B({}),Pe=new $({props:{code:'repo = Repository(local_dir="w2v2", clone_from="facebook/wav2vec2-large-960h-lv60")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;w2v2&quot;</span>, clone_from=<span class="hljs-string">&quot;facebook/wav2vec2-large-960h-lv60&quot;</span>)'}}),Ce=new $({props:{code:'repo = Repository(local_dir="huggingface-hub", clone_from="https://huggingface.co/facebook/wav2vec2-large-960h-lv60")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;huggingface-hub&quot;</span>, clone_from=<span class="hljs-string">&quot;https://huggingface.co/facebook/wav2vec2-large-960h-lv60&quot;</span>)'}}),qe=new $({props:{code:`repo_url = create_repo(repo_id="repo_name")
repo = Repository(local_dir="repo_local_path", clone_from=repo_url)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo_url = create_repo(repo_id=<span class="hljs-string">&quot;repo_name&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;repo_local_path&quot;</span>, clone_from=repo_url)`}}),Re=new $({props:{code:`repo = Repository(
  "my-dataset", 
  clone_from="<user>/<dataset_id>", 
  use_auth_token=True, 
  repo_type="dataset",
  git_user="MyName",
  git_email="me@cool.mail"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;my-dataset&quot;</span>, 
<span class="hljs-meta">... </span>  clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;dataset_id&gt;&quot;</span>, 
<span class="hljs-meta">... </span>  use_auth_token=<span class="hljs-literal">True</span>, 
<span class="hljs-meta">... </span>  repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>  git_user=<span class="hljs-string">&quot;MyName&quot;</span>,
<span class="hljs-meta">... </span>  git_email=<span class="hljs-string">&quot;me@cool.mail&quot;</span>
<span class="hljs-meta">... </span>)`}}),Se=new B({}),xe=new $({props:{code:`repo = Repository(local_dir="huggingface-hub", clone_from="<user>/<dataset_id>", revision='branch1')
repo.git_checkout("branch2")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;huggingface-hub&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;dataset_id&gt;&quot;</span>, revision=<span class="hljs-string">&#x27;branch1&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_checkout(<span class="hljs-string">&quot;branch2&quot;</span>)`}}),De=new B({}),He=new $({props:{code:"repo.git_pull()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()'}}),Ne=new $({props:{code:"repo.git_pull(rebase=True)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull(rebase=<span class="hljs-literal">True</span>)'}}),{c(){R=r("meta"),Yt=c(),S=r("h1"),M=r("a"),rt=r("span"),u(ie.$$.fragment),ar=c(),at=r("span"),sr=l("Create and manage a repository"),Jt=c(),Oe=r("p"),lr=l("A repository is a space for you to store your model or dataset files. This guide will show you how to:"),zt=c(),k=r("ul"),st=r("li"),ir=l("Create and delete a repository."),pr=c(),lt=r("li"),nr=l("Adjust repository visibility."),cr=c(),pe=r("li"),hr=l("Use the "),Te=r("a"),fr=l("Repository"),ur=l(" class for common Git operations like clone, branch, push, etc."),Kt=c(),Fe=r("p"),gr=l("If you want to create a repository on the Hub, you need to log in to your Hugging Face account:"),Qt=c(),U=r("ol"),ne=r("li"),it=r("p"),mr=l("Log in to your Hugging Face account with the following command:"),yr=c(),u(ce.$$.fragment),_r=c(),x=r("li"),he=r("p"),dr=l("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),pt=r("code"),vr=l("notebook_login()"),$r=l(":"),wr=c(),u(fe.$$.fragment),br=c(),Le=r("p"),nt=r("code"),Er=l("notebook_login()"),kr=l(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),Vt=c(),D=r("h2"),W=r("a"),ct=r("span"),u(ue.$$.fragment),jr=c(),ht=r("span"),Ar=l("Create a repository"),Xt=c(),w=r("p"),Pr=l("Create an empty repository with "),Ie=r("a"),Cr=l("create_repo()"),qr=l(" and give it a name with the "),ft=r("code"),Rr=l("repo_id"),Sr=l(" parameter. The "),ut=r("code"),xr=l("repo_id"),Dr=l(" is your namespace followed by the repository name: "),gt=r("code"),Hr=l("{username_or_org}/{repo_name}"),Nr=l("."),Zt=c(),u(ge.$$.fragment),eo=c(),j=r("p"),Or=l("By default, "),Ge=r("a"),Tr=l("create_repo()"),Fr=l(" creates a model repository. But you can use the "),mt=r("code"),Lr=l("repo_type"),Ir=l(" parameter to specify another repository type. For example, if you want to create a dataset repository:"),to=c(),u(me.$$.fragment),oo=c(),Y=r("p"),Gr=l("When creating a repository, you also have the option to set your repository visibility with the "),yt=r("code"),Br=l("private"),Mr=l(" parameter. For example, if you want to create a private repository:"),ro=c(),u(ye.$$.fragment),ao=c(),J=r("p"),Ur=l("If you want to change the repository visibility at a later time, you can use the "),Be=r("a"),Wr=l("update_repo_visibility()"),Yr=l(" function."),so=c(),H=r("h2"),z=r("a"),_t=r("span"),u(_e.$$.fragment),Jr=c(),dt=r("span"),zr=l("Delete a repository"),lo=c(),K=r("p"),Kr=l("Delete a repository with "),Me=r("a"),Qr=l("delete_repo()"),Vr=l(". Make sure you are certain you want to delete a repository because this is an irreversible process!"),io=c(),Q=r("p"),Xr=l("Specify the "),vt=r("code"),Zr=l("repo_id"),ea=l(" of the repository you want to delete:"),po=c(),u(de.$$.fragment),no=c(),V=r("p"),ta=l("You can also specify the repository type to delete by adding the "),$t=r("code"),oa=l("repo_type"),ra=l(" parameter:"),co=c(),u(ve.$$.fragment),ho=c(),N=r("h2"),X=r("a"),wt=r("span"),u($e.$$.fragment),aa=c(),bt=r("span"),sa=l("Change repository visibility"),fo=c(),Ue=r("p"),la=l("A repository can be public or private. A private repository is only visible to you or members of the organization in which the repository is located. Change a repository to private as shown in the following:"),uo=c(),u(we.$$.fragment),go=c(),O=r("h2"),Z=r("a"),Et=r("span"),u(be.$$.fragment),ia=c(),kt=r("span"),pa=l("The Repository class"),mo=c(),v=r("p"),na=l("The "),We=r("a"),ca=l("Repository"),ha=l(" class allows you to interact with files and repositories on the Hub with functions similar to "),jt=r("code"),fa=l("git"),ua=l(" commands. "),Ye=r("a"),ga=l("Repository"),ma=l(" is a wrapper over Git and Git-LFS methods, so make sure you have Git-LFS installed (see "),Ee=r("a"),ya=l("here"),_a=l(" for installation instructions) and set up before you begin. With "),Je=r("a"),da=l("Repository"),va=l(", you can use the Git commands you already know and love."),yo=c(),T=r("h3"),ee=r("a"),At=r("span"),u(ke.$$.fragment),$a=c(),Pt=r("span"),wa=l("Use a local repository"),_o=c(),te=r("p"),ba=l("Instantiate a "),ze=r("a"),Ea=l("Repository"),ka=l(" object with a path to a local repository:"),vo=c(),u(je.$$.fragment),$o=c(),F=r("h3"),oe=r("a"),Ct=r("span"),u(Ae.$$.fragment),ja=c(),qt=r("span"),Aa=l("Clone"),wo=c(),A=r("p"),Pa=l("The "),Rt=r("code"),Ca=l("clone_from"),qa=l(" parameter clones a repository from a Hugging Face repository ID to a local directory specified by the "),St=r("code"),Ra=l("local_dir"),Sa=l(" argument:"),bo=c(),u(Pe.$$.fragment),Eo=c(),L=r("p"),xt=r("code"),xa=l("clone_from"),Da=l(" can also clone a repository from a specified directory using a URL (if you are working offline, this parameter should be "),Dt=r("code"),Ha=l("None"),Na=l("):"),ko=c(),u(Ce.$$.fragment),jo=c(),P=r("p"),Oa=l("You can combine the "),Ht=r("code"),Ta=l("clone_from"),Fa=l(" parameter with "),Ke=r("a"),La=l("create_repo()"),Ia=l(" to create and clone a repository:"),Ao=c(),u(qe.$$.fragment),Po=c(),C=r("p"),Ga=l("When you clone a repository, you can also attribute a Git username and email to a cloned repository by specifying the "),Nt=r("code"),Ba=l("git_user"),Ma=l(" and "),Ot=r("code"),Ua=l("git_email"),Wa=l(" parameters. When users commit to that repository, Git will be aware of the commit author."),Co=c(),u(Re.$$.fragment),qo=c(),I=r("h3"),re=r("a"),Tt=r("span"),u(Se.$$.fragment),Ya=c(),Ft=r("span"),Ja=l("Branch"),Ro=c(),b=r("p"),za=l("Branches are important for collaboration and experimentation without impacting your current files and code. Switch between branches with "),Lt=r("code"),Ka=l("git_checkout"),Qa=l(". For example, if you want to switch from "),It=r("code"),Va=l("branch1"),Xa=l(" to "),Gt=r("code"),Za=l("branch2"),es=l(":"),So=c(),u(xe.$$.fragment),xo=c(),G=r("h3"),ae=r("a"),Bt=r("span"),u(De.$$.fragment),ts=c(),Mt=r("span"),os=l("Pull"),Do=c(),Qe=r("p"),rs=l("Pull allows you to update a current local branch with changes from a remote repository:"),Ho=c(),u(He.$$.fragment),No=c(),se=r("p"),as=l("Set "),Ut=r("code"),ss=l("rebase=True"),ls=l(" if you want your local commits to occur after your branch is updated with the new commits from the remote:"),Oo=c(),u(Ne.$$.fragment),this.h()},l(e){const p=kl('[data-svelte="svelte-1phssyn"]',document.head);R=a(p,"META",{name:!0,content:!0}),p.forEach(o),Yt=h(e),S=a(e,"H1",{class:!0});var Fo=s(S);M=a(Fo,"A",{id:!0,class:!0,href:!0});var ns=s(M);rt=a(ns,"SPAN",{});var cs=s(rt);g(ie.$$.fragment,cs),cs.forEach(o),ns.forEach(o),ar=h(Fo),at=a(Fo,"SPAN",{});var hs=s(at);sr=i(hs,"Create and manage a repository"),hs.forEach(o),Fo.forEach(o),Jt=h(e),Oe=a(e,"P",{});var fs=s(Oe);lr=i(fs,"A repository is a space for you to store your model or dataset files. This guide will show you how to:"),fs.forEach(o),zt=h(e),k=a(e,"UL",{});var Ve=s(k);st=a(Ve,"LI",{});var us=s(st);ir=i(us,"Create and delete a repository."),us.forEach(o),pr=h(Ve),lt=a(Ve,"LI",{});var gs=s(lt);nr=i(gs,"Adjust repository visibility."),gs.forEach(o),cr=h(Ve),pe=a(Ve,"LI",{});var Lo=s(pe);hr=i(Lo,"Use the "),Te=a(Lo,"A",{href:!0});var ms=s(Te);fr=i(ms,"Repository"),ms.forEach(o),ur=i(Lo," class for common Git operations like clone, branch, push, etc."),Lo.forEach(o),Ve.forEach(o),Kt=h(e),Fe=a(e,"P",{});var ys=s(Fe);gr=i(ys,"If you want to create a repository on the Hub, you need to log in to your Hugging Face account:"),ys.forEach(o),Qt=h(e),U=a(e,"OL",{});var Io=s(U);ne=a(Io,"LI",{});var Go=s(ne);it=a(Go,"P",{});var _s=s(it);mr=i(_s,"Log in to your Hugging Face account with the following command:"),_s.forEach(o),yr=h(Go),g(ce.$$.fragment,Go),Go.forEach(o),_r=h(Io),x=a(Io,"LI",{});var Xe=s(x);he=a(Xe,"P",{});var Bo=s(he);dr=i(Bo,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),pt=a(Bo,"CODE",{});var ds=s(pt);vr=i(ds,"notebook_login()"),ds.forEach(o),$r=i(Bo,":"),Bo.forEach(o),wr=h(Xe),g(fe.$$.fragment,Xe),br=h(Xe),Le=a(Xe,"P",{});var is=s(Le);nt=a(is,"CODE",{});var vs=s(nt);Er=i(vs,"notebook_login()"),vs.forEach(o),kr=i(is," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),is.forEach(o),Xe.forEach(o),Io.forEach(o),Vt=h(e),D=a(e,"H2",{class:!0});var Mo=s(D);W=a(Mo,"A",{id:!0,class:!0,href:!0});var $s=s(W);ct=a($s,"SPAN",{});var ws=s(ct);g(ue.$$.fragment,ws),ws.forEach(o),$s.forEach(o),jr=h(Mo),ht=a(Mo,"SPAN",{});var bs=s(ht);Ar=i(bs,"Create a repository"),bs.forEach(o),Mo.forEach(o),Xt=h(e),w=a(e,"P",{});var q=s(w);Pr=i(q,"Create an empty repository with "),Ie=a(q,"A",{href:!0});var Es=s(Ie);Cr=i(Es,"create_repo()"),Es.forEach(o),qr=i(q," and give it a name with the "),ft=a(q,"CODE",{});var ks=s(ft);Rr=i(ks,"repo_id"),ks.forEach(o),Sr=i(q," parameter. The "),ut=a(q,"CODE",{});var js=s(ut);xr=i(js,"repo_id"),js.forEach(o),Dr=i(q," is your namespace followed by the repository name: "),gt=a(q,"CODE",{});var As=s(gt);Hr=i(As,"{username_or_org}/{repo_name}"),As.forEach(o),Nr=i(q,"."),q.forEach(o),Zt=h(e),g(ge.$$.fragment,e),eo=h(e),j=a(e,"P",{});var Ze=s(j);Or=i(Ze,"By default, "),Ge=a(Ze,"A",{href:!0});var Ps=s(Ge);Tr=i(Ps,"create_repo()"),Ps.forEach(o),Fr=i(Ze," creates a model repository. But you can use the "),mt=a(Ze,"CODE",{});var Cs=s(mt);Lr=i(Cs,"repo_type"),Cs.forEach(o),Ir=i(Ze," parameter to specify another repository type. For example, if you want to create a dataset repository:"),Ze.forEach(o),to=h(e),g(me.$$.fragment,e),oo=h(e),Y=a(e,"P",{});var Uo=s(Y);Gr=i(Uo,"When creating a repository, you also have the option to set your repository visibility with the "),yt=a(Uo,"CODE",{});var qs=s(yt);Br=i(qs,"private"),qs.forEach(o),Mr=i(Uo," parameter. For example, if you want to create a private repository:"),Uo.forEach(o),ro=h(e),g(ye.$$.fragment,e),ao=h(e),J=a(e,"P",{});var Wo=s(J);Ur=i(Wo,"If you want to change the repository visibility at a later time, you can use the "),Be=a(Wo,"A",{href:!0});var Rs=s(Be);Wr=i(Rs,"update_repo_visibility()"),Rs.forEach(o),Yr=i(Wo," function."),Wo.forEach(o),so=h(e),H=a(e,"H2",{class:!0});var Yo=s(H);z=a(Yo,"A",{id:!0,class:!0,href:!0});var Ss=s(z);_t=a(Ss,"SPAN",{});var xs=s(_t);g(_e.$$.fragment,xs),xs.forEach(o),Ss.forEach(o),Jr=h(Yo),dt=a(Yo,"SPAN",{});var Ds=s(dt);zr=i(Ds,"Delete a repository"),Ds.forEach(o),Yo.forEach(o),lo=h(e),K=a(e,"P",{});var Jo=s(K);Kr=i(Jo,"Delete a repository with "),Me=a(Jo,"A",{href:!0});var Hs=s(Me);Qr=i(Hs,"delete_repo()"),Hs.forEach(o),Vr=i(Jo,". Make sure you are certain you want to delete a repository because this is an irreversible process!"),Jo.forEach(o),io=h(e),Q=a(e,"P",{});var zo=s(Q);Xr=i(zo,"Specify the "),vt=a(zo,"CODE",{});var Ns=s(vt);Zr=i(Ns,"repo_id"),Ns.forEach(o),ea=i(zo," of the repository you want to delete:"),zo.forEach(o),po=h(e),g(de.$$.fragment,e),no=h(e),V=a(e,"P",{});var Ko=s(V);ta=i(Ko,"You can also specify the repository type to delete by adding the "),$t=a(Ko,"CODE",{});var Os=s($t);oa=i(Os,"repo_type"),Os.forEach(o),ra=i(Ko," parameter:"),Ko.forEach(o),co=h(e),g(ve.$$.fragment,e),ho=h(e),N=a(e,"H2",{class:!0});var Qo=s(N);X=a(Qo,"A",{id:!0,class:!0,href:!0});var Ts=s(X);wt=a(Ts,"SPAN",{});var Fs=s(wt);g($e.$$.fragment,Fs),Fs.forEach(o),Ts.forEach(o),aa=h(Qo),bt=a(Qo,"SPAN",{});var Ls=s(bt);sa=i(Ls,"Change repository visibility"),Ls.forEach(o),Qo.forEach(o),fo=h(e),Ue=a(e,"P",{});var Is=s(Ue);la=i(Is,"A repository can be public or private. A private repository is only visible to you or members of the organization in which the repository is located. Change a repository to private as shown in the following:"),Is.forEach(o),uo=h(e),g(we.$$.fragment,e),go=h(e),O=a(e,"H2",{class:!0});var Vo=s(O);Z=a(Vo,"A",{id:!0,class:!0,href:!0});var Gs=s(Z);Et=a(Gs,"SPAN",{});var Bs=s(Et);g(be.$$.fragment,Bs),Bs.forEach(o),Gs.forEach(o),ia=h(Vo),kt=a(Vo,"SPAN",{});var Ms=s(kt);pa=i(Ms,"The Repository class"),Ms.forEach(o),Vo.forEach(o),mo=h(e),v=a(e,"P",{});var E=s(v);na=i(E,"The "),We=a(E,"A",{href:!0});var Us=s(We);ca=i(Us,"Repository"),Us.forEach(o),ha=i(E," class allows you to interact with files and repositories on the Hub with functions similar to "),jt=a(E,"CODE",{});var Ws=s(jt);fa=i(Ws,"git"),Ws.forEach(o),ua=i(E," commands. "),Ye=a(E,"A",{href:!0});var Ys=s(Ye);ga=i(Ys,"Repository"),Ys.forEach(o),ma=i(E," is a wrapper over Git and Git-LFS methods, so make sure you have Git-LFS installed (see "),Ee=a(E,"A",{href:!0,rel:!0});var Js=s(Ee);ya=i(Js,"here"),Js.forEach(o),_a=i(E," for installation instructions) and set up before you begin. With "),Je=a(E,"A",{href:!0});var zs=s(Je);da=i(zs,"Repository"),zs.forEach(o),va=i(E,", you can use the Git commands you already know and love."),E.forEach(o),yo=h(e),T=a(e,"H3",{class:!0});var Xo=s(T);ee=a(Xo,"A",{id:!0,class:!0,href:!0});var Ks=s(ee);At=a(Ks,"SPAN",{});var Qs=s(At);g(ke.$$.fragment,Qs),Qs.forEach(o),Ks.forEach(o),$a=h(Xo),Pt=a(Xo,"SPAN",{});var Vs=s(Pt);wa=i(Vs,"Use a local repository"),Vs.forEach(o),Xo.forEach(o),_o=h(e),te=a(e,"P",{});var Zo=s(te);ba=i(Zo,"Instantiate a "),ze=a(Zo,"A",{href:!0});var Xs=s(ze);Ea=i(Xs,"Repository"),Xs.forEach(o),ka=i(Zo," object with a path to a local repository:"),Zo.forEach(o),vo=h(e),g(je.$$.fragment,e),$o=h(e),F=a(e,"H3",{class:!0});var er=s(F);oe=a(er,"A",{id:!0,class:!0,href:!0});var Zs=s(oe);Ct=a(Zs,"SPAN",{});var el=s(Ct);g(Ae.$$.fragment,el),el.forEach(o),Zs.forEach(o),ja=h(er),qt=a(er,"SPAN",{});var tl=s(qt);Aa=i(tl,"Clone"),tl.forEach(o),er.forEach(o),wo=h(e),A=a(e,"P",{});var et=s(A);Pa=i(et,"The "),Rt=a(et,"CODE",{});var ol=s(Rt);Ca=i(ol,"clone_from"),ol.forEach(o),qa=i(et," parameter clones a repository from a Hugging Face repository ID to a local directory specified by the "),St=a(et,"CODE",{});var rl=s(St);Ra=i(rl,"local_dir"),rl.forEach(o),Sa=i(et," argument:"),et.forEach(o),bo=h(e),g(Pe.$$.fragment,e),Eo=h(e),L=a(e,"P",{});var Wt=s(L);xt=a(Wt,"CODE",{});var al=s(xt);xa=i(al,"clone_from"),al.forEach(o),Da=i(Wt," can also clone a repository from a specified directory using a URL (if you are working offline, this parameter should be "),Dt=a(Wt,"CODE",{});var sl=s(Dt);Ha=i(sl,"None"),sl.forEach(o),Na=i(Wt,"):"),Wt.forEach(o),ko=h(e),g(Ce.$$.fragment,e),jo=h(e),P=a(e,"P",{});var tt=s(P);Oa=i(tt,"You can combine the "),Ht=a(tt,"CODE",{});var ll=s(Ht);Ta=i(ll,"clone_from"),ll.forEach(o),Fa=i(tt," parameter with "),Ke=a(tt,"A",{href:!0});var il=s(Ke);La=i(il,"create_repo()"),il.forEach(o),Ia=i(tt," to create and clone a repository:"),tt.forEach(o),Ao=h(e),g(qe.$$.fragment,e),Po=h(e),C=a(e,"P",{});var ot=s(C);Ga=i(ot,"When you clone a repository, you can also attribute a Git username and email to a cloned repository by specifying the "),Nt=a(ot,"CODE",{});var pl=s(Nt);Ba=i(pl,"git_user"),pl.forEach(o),Ma=i(ot," and "),Ot=a(ot,"CODE",{});var nl=s(Ot);Ua=i(nl,"git_email"),nl.forEach(o),Wa=i(ot," parameters. When users commit to that repository, Git will be aware of the commit author."),ot.forEach(o),Co=h(e),g(Re.$$.fragment,e),qo=h(e),I=a(e,"H3",{class:!0});var tr=s(I);re=a(tr,"A",{id:!0,class:!0,href:!0});var cl=s(re);Tt=a(cl,"SPAN",{});var hl=s(Tt);g(Se.$$.fragment,hl),hl.forEach(o),cl.forEach(o),Ya=h(tr),Ft=a(tr,"SPAN",{});var fl=s(Ft);Ja=i(fl,"Branch"),fl.forEach(o),tr.forEach(o),Ro=h(e),b=a(e,"P",{});var le=s(b);za=i(le,"Branches are important for collaboration and experimentation without impacting your current files and code. Switch between branches with "),Lt=a(le,"CODE",{});var ul=s(Lt);Ka=i(ul,"git_checkout"),ul.forEach(o),Qa=i(le,". For example, if you want to switch from "),It=a(le,"CODE",{});var gl=s(It);Va=i(gl,"branch1"),gl.forEach(o),Xa=i(le," to "),Gt=a(le,"CODE",{});var ml=s(Gt);Za=i(ml,"branch2"),ml.forEach(o),es=i(le,":"),le.forEach(o),So=h(e),g(xe.$$.fragment,e),xo=h(e),G=a(e,"H3",{class:!0});var or=s(G);ae=a(or,"A",{id:!0,class:!0,href:!0});var yl=s(ae);Bt=a(yl,"SPAN",{});var _l=s(Bt);g(De.$$.fragment,_l),_l.forEach(o),yl.forEach(o),ts=h(or),Mt=a(or,"SPAN",{});var dl=s(Mt);os=i(dl,"Pull"),dl.forEach(o),or.forEach(o),Do=h(e),Qe=a(e,"P",{});var vl=s(Qe);rs=i(vl,"Pull allows you to update a current local branch with changes from a remote repository:"),vl.forEach(o),Ho=h(e),g(He.$$.fragment,e),No=h(e),se=a(e,"P",{});var rr=s(se);as=i(rr,"Set "),Ut=a(rr,"CODE",{});var $l=s(Ut);ss=i($l,"rebase=True"),$l.forEach(o),ls=i(rr," if you want your local commits to occur after your branch is updated with the new commits from the remote:"),rr.forEach(o),Oo=h(e),g(Ne.$$.fragment,e),this.h()},h(){f(R,"name","hf:doc:metadata"),f(R,"content",JSON.stringify(Cl)),f(M,"id","create-and-manage-a-repository"),f(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(M,"href","#create-and-manage-a-repository"),f(S,"class","relative group"),f(Te,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),f(W,"id","create-a-repository"),f(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(W,"href","#create-a-repository"),f(D,"class","relative group"),f(Ie,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo"),f(Ge,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo"),f(Be,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.update_repo_visibility"),f(z,"id","delete-a-repository"),f(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(z,"href","#delete-a-repository"),f(H,"class","relative group"),f(Me,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.delete_repo"),f(X,"id","change-repository-visibility"),f(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(X,"href","#change-repository-visibility"),f(N,"class","relative group"),f(Z,"id","the-repository-class"),f(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Z,"href","#the-repository-class"),f(O,"class","relative group"),f(We,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),f(Ye,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),f(Ee,"href","https://git-lfs.github.com/"),f(Ee,"rel","nofollow"),f(Je,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),f(ee,"id","use-a-local-repository"),f(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ee,"href","#use-a-local-repository"),f(T,"class","relative group"),f(ze,"href","/docs/huggingface_hub/pr_840/en/package_reference/repository#huggingface_hub.Repository"),f(oe,"id","clone"),f(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(oe,"href","#clone"),f(F,"class","relative group"),f(Ke,"href","/docs/huggingface_hub/pr_840/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo"),f(re,"id","branch"),f(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(re,"href","#branch"),f(I,"class","relative group"),f(ae,"id","pull"),f(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ae,"href","#pull"),f(G,"class","relative group")},m(e,p){t(document.head,R),n(e,Yt,p),n(e,S,p),t(S,M),t(M,rt),m(ie,rt,null),t(S,ar),t(S,at),t(at,sr),n(e,Jt,p),n(e,Oe,p),t(Oe,lr),n(e,zt,p),n(e,k,p),t(k,st),t(st,ir),t(k,pr),t(k,lt),t(lt,nr),t(k,cr),t(k,pe),t(pe,hr),t(pe,Te),t(Te,fr),t(pe,ur),n(e,Kt,p),n(e,Fe,p),t(Fe,gr),n(e,Qt,p),n(e,U,p),t(U,ne),t(ne,it),t(it,mr),t(ne,yr),m(ce,ne,null),t(U,_r),t(U,x),t(x,he),t(he,dr),t(he,pt),t(pt,vr),t(he,$r),t(x,wr),m(fe,x,null),t(x,br),t(x,Le),t(Le,nt),t(nt,Er),t(Le,kr),n(e,Vt,p),n(e,D,p),t(D,W),t(W,ct),m(ue,ct,null),t(D,jr),t(D,ht),t(ht,Ar),n(e,Xt,p),n(e,w,p),t(w,Pr),t(w,Ie),t(Ie,Cr),t(w,qr),t(w,ft),t(ft,Rr),t(w,Sr),t(w,ut),t(ut,xr),t(w,Dr),t(w,gt),t(gt,Hr),t(w,Nr),n(e,Zt,p),m(ge,e,p),n(e,eo,p),n(e,j,p),t(j,Or),t(j,Ge),t(Ge,Tr),t(j,Fr),t(j,mt),t(mt,Lr),t(j,Ir),n(e,to,p),m(me,e,p),n(e,oo,p),n(e,Y,p),t(Y,Gr),t(Y,yt),t(yt,Br),t(Y,Mr),n(e,ro,p),m(ye,e,p),n(e,ao,p),n(e,J,p),t(J,Ur),t(J,Be),t(Be,Wr),t(J,Yr),n(e,so,p),n(e,H,p),t(H,z),t(z,_t),m(_e,_t,null),t(H,Jr),t(H,dt),t(dt,zr),n(e,lo,p),n(e,K,p),t(K,Kr),t(K,Me),t(Me,Qr),t(K,Vr),n(e,io,p),n(e,Q,p),t(Q,Xr),t(Q,vt),t(vt,Zr),t(Q,ea),n(e,po,p),m(de,e,p),n(e,no,p),n(e,V,p),t(V,ta),t(V,$t),t($t,oa),t(V,ra),n(e,co,p),m(ve,e,p),n(e,ho,p),n(e,N,p),t(N,X),t(X,wt),m($e,wt,null),t(N,aa),t(N,bt),t(bt,sa),n(e,fo,p),n(e,Ue,p),t(Ue,la),n(e,uo,p),m(we,e,p),n(e,go,p),n(e,O,p),t(O,Z),t(Z,Et),m(be,Et,null),t(O,ia),t(O,kt),t(kt,pa),n(e,mo,p),n(e,v,p),t(v,na),t(v,We),t(We,ca),t(v,ha),t(v,jt),t(jt,fa),t(v,ua),t(v,Ye),t(Ye,ga),t(v,ma),t(v,Ee),t(Ee,ya),t(v,_a),t(v,Je),t(Je,da),t(v,va),n(e,yo,p),n(e,T,p),t(T,ee),t(ee,At),m(ke,At,null),t(T,$a),t(T,Pt),t(Pt,wa),n(e,_o,p),n(e,te,p),t(te,ba),t(te,ze),t(ze,Ea),t(te,ka),n(e,vo,p),m(je,e,p),n(e,$o,p),n(e,F,p),t(F,oe),t(oe,Ct),m(Ae,Ct,null),t(F,ja),t(F,qt),t(qt,Aa),n(e,wo,p),n(e,A,p),t(A,Pa),t(A,Rt),t(Rt,Ca),t(A,qa),t(A,St),t(St,Ra),t(A,Sa),n(e,bo,p),m(Pe,e,p),n(e,Eo,p),n(e,L,p),t(L,xt),t(xt,xa),t(L,Da),t(L,Dt),t(Dt,Ha),t(L,Na),n(e,ko,p),m(Ce,e,p),n(e,jo,p),n(e,P,p),t(P,Oa),t(P,Ht),t(Ht,Ta),t(P,Fa),t(P,Ke),t(Ke,La),t(P,Ia),n(e,Ao,p),m(qe,e,p),n(e,Po,p),n(e,C,p),t(C,Ga),t(C,Nt),t(Nt,Ba),t(C,Ma),t(C,Ot),t(Ot,Ua),t(C,Wa),n(e,Co,p),m(Re,e,p),n(e,qo,p),n(e,I,p),t(I,re),t(re,Tt),m(Se,Tt,null),t(I,Ya),t(I,Ft),t(Ft,Ja),n(e,Ro,p),n(e,b,p),t(b,za),t(b,Lt),t(Lt,Ka),t(b,Qa),t(b,It),t(It,Va),t(b,Xa),t(b,Gt),t(Gt,Za),t(b,es),n(e,So,p),m(xe,e,p),n(e,xo,p),n(e,G,p),t(G,ae),t(ae,Bt),m(De,Bt,null),t(G,ts),t(G,Mt),t(Mt,os),n(e,Do,p),n(e,Qe,p),t(Qe,rs),n(e,Ho,p),m(He,e,p),n(e,No,p),n(e,se,p),t(se,as),t(se,Ut),t(Ut,ss),t(se,ls),n(e,Oo,p),m(Ne,e,p),To=!0},p:jl,i(e){To||(y(ie.$$.fragment,e),y(ce.$$.fragment,e),y(fe.$$.fragment,e),y(ue.$$.fragment,e),y(ge.$$.fragment,e),y(me.$$.fragment,e),y(ye.$$.fragment,e),y(_e.$$.fragment,e),y(de.$$.fragment,e),y(ve.$$.fragment,e),y($e.$$.fragment,e),y(we.$$.fragment,e),y(be.$$.fragment,e),y(ke.$$.fragment,e),y(je.$$.fragment,e),y(Ae.$$.fragment,e),y(Pe.$$.fragment,e),y(Ce.$$.fragment,e),y(qe.$$.fragment,e),y(Re.$$.fragment,e),y(Se.$$.fragment,e),y(xe.$$.fragment,e),y(De.$$.fragment,e),y(He.$$.fragment,e),y(Ne.$$.fragment,e),To=!0)},o(e){_(ie.$$.fragment,e),_(ce.$$.fragment,e),_(fe.$$.fragment,e),_(ue.$$.fragment,e),_(ge.$$.fragment,e),_(me.$$.fragment,e),_(ye.$$.fragment,e),_(_e.$$.fragment,e),_(de.$$.fragment,e),_(ve.$$.fragment,e),_($e.$$.fragment,e),_(we.$$.fragment,e),_(be.$$.fragment,e),_(ke.$$.fragment,e),_(je.$$.fragment,e),_(Ae.$$.fragment,e),_(Pe.$$.fragment,e),_(Ce.$$.fragment,e),_(qe.$$.fragment,e),_(Re.$$.fragment,e),_(Se.$$.fragment,e),_(xe.$$.fragment,e),_(De.$$.fragment,e),_(He.$$.fragment,e),_(Ne.$$.fragment,e),To=!1},d(e){o(R),e&&o(Yt),e&&o(S),d(ie),e&&o(Jt),e&&o(Oe),e&&o(zt),e&&o(k),e&&o(Kt),e&&o(Fe),e&&o(Qt),e&&o(U),d(ce),d(fe),e&&o(Vt),e&&o(D),d(ue),e&&o(Xt),e&&o(w),e&&o(Zt),d(ge,e),e&&o(eo),e&&o(j),e&&o(to),d(me,e),e&&o(oo),e&&o(Y),e&&o(ro),d(ye,e),e&&o(ao),e&&o(J),e&&o(so),e&&o(H),d(_e),e&&o(lo),e&&o(K),e&&o(io),e&&o(Q),e&&o(po),d(de,e),e&&o(no),e&&o(V),e&&o(co),d(ve,e),e&&o(ho),e&&o(N),d($e),e&&o(fo),e&&o(Ue),e&&o(uo),d(we,e),e&&o(go),e&&o(O),d(be),e&&o(mo),e&&o(v),e&&o(yo),e&&o(T),d(ke),e&&o(_o),e&&o(te),e&&o(vo),d(je,e),e&&o($o),e&&o(F),d(Ae),e&&o(wo),e&&o(A),e&&o(bo),d(Pe,e),e&&o(Eo),e&&o(L),e&&o(ko),d(Ce,e),e&&o(jo),e&&o(P),e&&o(Ao),d(qe,e),e&&o(Po),e&&o(C),e&&o(Co),d(Re,e),e&&o(qo),e&&o(I),d(Se),e&&o(Ro),e&&o(b),e&&o(So),d(xe,e),e&&o(xo),e&&o(G),d(De),e&&o(Do),e&&o(Qe),e&&o(Ho),d(He,e),e&&o(No),e&&o(se),e&&o(Oo),d(Ne,e)}}}const Cl={local:"create-and-manage-a-repository",sections:[{local:"create-a-repository",title:"Create a repository"},{local:"delete-a-repository",title:"Delete a repository"},{local:"change-repository-visibility",title:"Change repository visibility"},{local:"the-repository-class",sections:[{local:"use-a-local-repository",title:"Use a local repository"},{local:"clone",title:"Clone"},{local:"branch",title:"Branch"},{local:"pull",title:"Pull"}],title:"The Repository class "}],title:"Create and manage a repository"};function ql(ps){return Al(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Dl extends wl{constructor(R){super();bl(this,R,ql,Pl,El,{})}}export{Dl as default,Cl as metadata};
