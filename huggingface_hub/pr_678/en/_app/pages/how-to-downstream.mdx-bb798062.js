import{S as Bs,i as Ws,s as Js,e as s,k as h,w as m,t as a,M as Gs,c as n,d as t,m as f,a as r,x as g,h as l,b as p,N as Ys,F as o,g as d,y as v,L as zs,q as y,o as b,B as E,v as Ks}from"../chunks/vendor-d3924577.js";import{I as Do}from"../chunks/IconCopyLink-f94c3d80.js";import{C as A}from"../chunks/CodeBlock-ff545b14.js";function Qs(Dl){let L,Co,Po,So,N,M,je,Q,Et,ke,$t,Ho,U,B,qe,V,xt,Oe,jt,Ao,W,kt,De,qt,Ot,Lo,O,Ce,Dt,Ct,Pe,Pt,St,Se,Ht,No,R,J,He,X,At,Ae,Lt,Uo,D,Nt,Le,Ut,Rt,Ne,Tt,It,Ro,_e,we,Cl,To,Z,Io,me,Ft,Fo,ge,Mt,Mo,ee,Bo,oe,Ue,Bt,Wt,Wo,te,Jo,C,Jt,Re,Gt,Yt,Te,zt,Kt,Go,ae,Yo,T,G,Ie,le,Qt,Fe,Vt,zo,k,Me,Xt,Zt,Be,ea,oa,We,ta,aa,Ko,P,la,Je,sa,na,Ge,ra,ia,Qo,se,Vo,_,Ye,da,ha,ze,fa,pa,Ke,ca,ua,Qe,_a,wa,Ve,ma,ga,Xe,va,ya,Xo,ne,Zo,I,Y,Ze,re,ba,eo,Ea,et,F,oo,$a,xa,to,ja,ka,ot,ve,qa,tt,ie,at,q,ao,Oa,Da,lo,Ca,Pa,so,Sa,Ha,lt,de,st,S,Aa,no,La,Na,ro,Ua,Ra,nt,c,Ta,io,Ia,Fa,ho,Ma,Ba,fo,Wa,Ja,po,Ga,Ya,co,za,Ka,uo,Qa,Va,_o,Xa,Za,he,wo,el,ol,rt,z,tl,mo,al,ll,it,fe,dt,w,sl,go,nl,rl,vo,il,dl,yo,hl,fl,bo,pl,cl,Eo,ul,_l,ht,pe,ft,K,wl,$o,ml,gl,pt,$,vl,xo,yl,bl,jo,El,$l,ko,xl,jl,qo,kl,ql,ct;return Q=new Do({}),V=new Do({}),X=new Do({}),Z=new A({props:{code:`from huggingface_hub import hf_hub_url
hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/arxiv-nlp/resolve/main/config.json&#x27;</span>`}}),ee=new A({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="877b84a8f93f2d619faa2a6e514a32beef88ab0a")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;877b84a8f93f2d619faa2a6e514a32beef88ab0a&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/arxiv-nlp/resolve/877b84a8f93f2d619faa2a6e514a32beef88ab0a/config.json&#x27;</span>`}}),te=new A({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="main")',highlighted:'hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)'}}),ae=new A({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="v1.0")',highlighted:'hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;v1.0&quot;</span>)'}}),le=new Do({}),se=new A({props:{code:`from huggingface_hub import hf_hub_url, cached_download
config_file_url = hf_hub_url("lysandre/arxiv-nlp", filename="config.json")
cached_download(config_file_url)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url, cached_download
<span class="hljs-meta">&gt;&gt;&gt; </span>config_file_url = hf_hub_url(<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>cached_download(config_file_url)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/bc0e8cc2f8271b322304e8bb84b3b7580701d53a335ab2d75da19c249e2eeebb.066dae6fdb1e2b8cce60c35cc0f78ed1451d9b341c78de19f3ad469d10a8cbb1&#x27;</span>`}}),ne=new A({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)`}}),re=new Do({}),ie=new A({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/lysandre__arxiv-nlp.894a9adde21d9a3e3843e6d5aeaaf01875c7fade&#x27;</span>`}}),de=new A({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", revision="main")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)`}}),fe=new A({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", allow_regex="*.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, allow_regex=<span class="hljs-string">&quot;*.json&quot;</span>)`}}),pe=new A({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", ignore_regex=["*.msgpack", "*.h5"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, ignore_regex=[<span class="hljs-string">&quot;*.msgpack&quot;</span>, <span class="hljs-string">&quot;*.h5&quot;</span>])`}}),{c(){L=s("meta"),Co=h(),Po=s("hr"),So=h(),N=s("h2"),M=s("a"),je=s("span"),m(Q.$$.fragment),Et=h(),ke=s("span"),$t=a("title: How to download files from the Hub"),Ho=h(),U=s("h1"),B=s("a"),qe=s("span"),m(V.$$.fragment),xt=h(),Oe=s("span"),jt=a("How to integrate downstream utilities in your library"),Ao=h(),W=s("p"),kt=a("Utilities that allow your library to download files from the Hub are referred to as "),De=s("em"),qt=a("downstream"),Ot=a(" utilities. This guide introduces additional downstream utilities you can integrate with your library, or use separately on their own. You will learn how to:"),Lo=h(),O=s("ul"),Ce=s("li"),Dt=a("Retrieve a URL to download."),Ct=h(),Pe=s("li"),Pt=a("Download a file and cache it on your disk."),St=h(),Se=s("li"),Ht=a("Download all the files in a repository."),No=h(),R=s("h2"),J=s("a"),He=s("span"),m(X.$$.fragment),At=h(),Ae=s("span"),Lt=a("hf_hub_url"),Uo=h(),D=s("p"),Nt=a("Use "),Le=s("code"),Ut=a("hf_hub_url"),Rt=a(" to retrieve the URL of a specific file to download by providing a "),Ne=s("code"),Tt=a("filename"),It=a("."),Ro=h(),_e=s("p"),we=s("img"),To=h(),m(Z.$$.fragment),Io=h(),me=s("p"),Ft=a("Specify a particular file version by providing the file revision. The file revision can be a branch, a tag, or a commit hash."),Fo=h(),ge=s("p"),Mt=a("When using the commit hash, it must be the full-length hash instead of a 7-character commit hash:"),Mo=h(),m(ee.$$.fragment),Bo=h(),oe=s("p"),Ue=s("code"),Bt=a("hf_hub_url"),Wt=a(" can also use the branch name to specify a file revision:"),Wo=h(),m(te.$$.fragment),Jo=h(),C=s("p"),Jt=a("Specify a file revision with a tag identifier. For example, if you want "),Re=s("code"),Gt=a("v1.0"),Yt=a(" of the "),Te=s("code"),zt=a("config.json"),Kt=a(" file:"),Go=h(),m(ae.$$.fragment),Yo=h(),T=s("h2"),G=s("a"),Ie=s("span"),m(le.$$.fragment),Qt=h(),Fe=s("span"),Vt=a("cached_download"),zo=h(),k=s("p"),Me=s("code"),Xt=a("cached_download"),Zt=a(" is useful for downloading and caching a file on your local disk. Once stored in your cache, you don\u2019t have to redownload the file the next time you use it. "),Be=s("code"),ea=a("cached_download"),oa=a(" is a hands-free solution for staying up to date with new file versions. When a downloaded file is updated in the remote repository, "),We=s("code"),ta=a("cached_download"),aa=a(" will automatically download and store it for you."),Ko=h(),P=s("p"),la=a("Begin by retrieving your file URL with "),Je=s("code"),sa=a("hf_hub_url"),na=a(", and then pass the specified URL to "),Ge=s("code"),ra=a("cached_download"),ia=a(" to download the file:"),Qo=h(),m(se.$$.fragment),Vo=h(),_=s("p"),Ye=s("code"),da=a("hf_hub_url"),ha=a(" and "),ze=s("code"),fa=a("cached_download"),pa=a(" work hand in hand to download a file. This is precisely how "),Ke=s("code"),ca=a("hf_hub_download"),ua=a(" from the tutorial works! "),Qe=s("code"),_a=a("hf_hub_download"),wa=a(" is simply a wrapper that calls both "),Ve=s("code"),ma=a("hf_hub_url"),ga=a(" and "),Xe=s("code"),va=a("cached_download"),ya=a("."),Xo=h(),m(ne.$$.fragment),Zo=h(),I=s("h2"),Y=s("a"),Ze=s("span"),m(re.$$.fragment),ba=h(),eo=s("span"),Ea=a("snapshot_download"),et=h(),F=s("p"),oo=s("code"),$a=a("snapshot_download"),xa=a(" downloads an entire repository at a given revision. Like "),to=s("code"),ja=a("cached_download"),ka=a(", all downloaded files are cached on your local disk. However, even if only a single file is updated, the entire repository will be redownloaded."),ot=h(),ve=s("p"),qa=a("Download a whole repository as shown in the following:"),tt=h(),m(ie.$$.fragment),at=h(),q=s("p"),ao=s("code"),Oa=a("snapshot_download"),Da=a(" downloads the latest revision by default. If you want a specific repository revision, use the "),lo=s("code"),Ca=a("revision"),Pa=a(" parameter as shown with "),so=s("code"),Sa=a("hf_hub_url"),Ha=a("."),lt=h(),m(de.$$.fragment),st=h(),S=s("p"),Aa=a("In general, it is usually better to manually download files with "),no=s("code"),La=a("hf_hub_download"),Na=a(" (if you already know the file name) to avoid re-downloading an entire repository. "),ro=s("code"),Ua=a("snapshot_download"),Ra=a(" is helpful when your library\u2019s downloading utility is a helper, and unaware of which files need to be downloaded."),nt=h(),c=s("p"),Ta=a("However, you don\u2019t want to always download the contents of an entire repository with "),io=s("code"),Ia=a("snapshot_download"),Fa=a(". Even if you don\u2019t know the file name and only know the file type, you can download specific files with "),ho=s("code"),Ma=a("allow_regex"),Ba=a(" and "),fo=s("code"),Wa=a("ignore_regex"),Ja=a(`.
use of the `),po=s("code"),Ga=a("allow_regex"),Ya=a(" and "),co=s("code"),za=a("ignore_regex"),Ka=a(` arguments to specify
which files shall be downloaded.
`),uo=s("code"),Qa=a("allow_regex"),Va=a(" and "),_o=s("code"),Xa=a("ignore_regex"),Za=a(` accept either a single regex or a list of regexes.
The regex matching is based on `),he=s("a"),wo=s("code"),el=a("fnmatch"),ol=a(" which means it provides support for Unix shell-style wildcards."),rt=h(),z=s("p"),tl=a("For example, you can use "),mo=s("code"),al=a("allow_regex"),ll=a(" to only download JSON configuration files:"),it=h(),m(fe.$$.fragment),dt=h(),w=s("p"),sl=a("On the other hand, "),go=s("code"),nl=a("ignore_regex"),rl=a(" can be used to exclude certain files from being downloaded. The following example ignores the "),vo=s("code"),il=a(".msgpack"),dl=a(" and "),yo=s("code"),hl=a(".h5"),fl=a(` file extensions:
or `),bo=s("code"),pl=a(".h5"),cl=a(" extensions, you could make use of "),Eo=s("code"),ul=a("ignore_regex"),_l=a(":"),ht=h(),m(pe.$$.fragment),ft=h(),K=s("p"),wl=a(`Passing a regex can be especially useful when repositories contain files that
are never expected to be downloaded by `),$o=s("code"),ml=a("snapshot_download"),gl=a("."),pt=h(),$=s("p"),vl=a("Note that passing "),xo=s("code"),yl=a("allow_regex"),bl=a(" or "),jo=s("code"),El=a("ignore_regex"),$l=a(" does "),ko=s("strong"),xl=a("not"),jl=a(` prevent
`),qo=s("code"),kl=a("snapshot_download"),ql=a(` from re-downloading the entire model repository if an ignored
file is changed.`),this.h()},l(e){const i=Gs('[data-svelte="svelte-1phssyn"]',document.head);L=n(i,"META",{name:!0,content:!0}),i.forEach(t),Co=f(e),Po=n(e,"HR",{}),So=f(e),N=n(e,"H2",{class:!0});var ut=r(N);M=n(ut,"A",{id:!0,class:!0,href:!0});var Pl=r(M);je=n(Pl,"SPAN",{});var Sl=r(je);g(Q.$$.fragment,Sl),Sl.forEach(t),Pl.forEach(t),Et=f(ut),ke=n(ut,"SPAN",{});var Hl=r(ke);$t=l(Hl,"title: How to download files from the Hub"),Hl.forEach(t),ut.forEach(t),Ho=f(e),U=n(e,"H1",{class:!0});var _t=r(U);B=n(_t,"A",{id:!0,class:!0,href:!0});var Al=r(B);qe=n(Al,"SPAN",{});var Ll=r(qe);g(V.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),xt=f(_t),Oe=n(_t,"SPAN",{});var Nl=r(Oe);jt=l(Nl,"How to integrate downstream utilities in your library"),Nl.forEach(t),_t.forEach(t),Ao=f(e),W=n(e,"P",{});var wt=r(W);kt=l(wt,"Utilities that allow your library to download files from the Hub are referred to as "),De=n(wt,"EM",{});var Ul=r(De);qt=l(Ul,"downstream"),Ul.forEach(t),Ot=l(wt," utilities. This guide introduces additional downstream utilities you can integrate with your library, or use separately on their own. You will learn how to:"),wt.forEach(t),Lo=f(e),O=n(e,"UL",{});var ye=r(O);Ce=n(ye,"LI",{});var Rl=r(Ce);Dt=l(Rl,"Retrieve a URL to download."),Rl.forEach(t),Ct=f(ye),Pe=n(ye,"LI",{});var Tl=r(Pe);Pt=l(Tl,"Download a file and cache it on your disk."),Tl.forEach(t),St=f(ye),Se=n(ye,"LI",{});var Il=r(Se);Ht=l(Il,"Download all the files in a repository."),Il.forEach(t),ye.forEach(t),No=f(e),R=n(e,"H2",{class:!0});var mt=r(R);J=n(mt,"A",{id:!0,class:!0,href:!0});var Fl=r(J);He=n(Fl,"SPAN",{});var Ml=r(He);g(X.$$.fragment,Ml),Ml.forEach(t),Fl.forEach(t),At=f(mt),Ae=n(mt,"SPAN",{});var Bl=r(Ae);Lt=l(Bl,"hf_hub_url"),Bl.forEach(t),mt.forEach(t),Uo=f(e),D=n(e,"P",{});var be=r(D);Nt=l(be,"Use "),Le=n(be,"CODE",{});var Wl=r(Le);Ut=l(Wl,"hf_hub_url"),Wl.forEach(t),Rt=l(be," to retrieve the URL of a specific file to download by providing a "),Ne=n(be,"CODE",{});var Jl=r(Ne);Tt=l(Jl,"filename"),Jl.forEach(t),It=l(be,"."),be.forEach(t),Ro=f(e),_e=n(e,"P",{});var Gl=r(_e);we=n(Gl,"IMG",{src:!0,alt:!0}),Gl.forEach(t),To=f(e),g(Z.$$.fragment,e),Io=f(e),me=n(e,"P",{});var Yl=r(me);Ft=l(Yl,"Specify a particular file version by providing the file revision. The file revision can be a branch, a tag, or a commit hash."),Yl.forEach(t),Fo=f(e),ge=n(e,"P",{});var zl=r(ge);Mt=l(zl,"When using the commit hash, it must be the full-length hash instead of a 7-character commit hash:"),zl.forEach(t),Mo=f(e),g(ee.$$.fragment,e),Bo=f(e),oe=n(e,"P",{});var Ol=r(oe);Ue=n(Ol,"CODE",{});var Kl=r(Ue);Bt=l(Kl,"hf_hub_url"),Kl.forEach(t),Wt=l(Ol," can also use the branch name to specify a file revision:"),Ol.forEach(t),Wo=f(e),g(te.$$.fragment,e),Jo=f(e),C=n(e,"P",{});var Ee=r(C);Jt=l(Ee,"Specify a file revision with a tag identifier. For example, if you want "),Re=n(Ee,"CODE",{});var Ql=r(Re);Gt=l(Ql,"v1.0"),Ql.forEach(t),Yt=l(Ee," of the "),Te=n(Ee,"CODE",{});var Vl=r(Te);zt=l(Vl,"config.json"),Vl.forEach(t),Kt=l(Ee," file:"),Ee.forEach(t),Go=f(e),g(ae.$$.fragment,e),Yo=f(e),T=n(e,"H2",{class:!0});var gt=r(T);G=n(gt,"A",{id:!0,class:!0,href:!0});var Xl=r(G);Ie=n(Xl,"SPAN",{});var Zl=r(Ie);g(le.$$.fragment,Zl),Zl.forEach(t),Xl.forEach(t),Qt=f(gt),Fe=n(gt,"SPAN",{});var es=r(Fe);Vt=l(es,"cached_download"),es.forEach(t),gt.forEach(t),zo=f(e),k=n(e,"P",{});var ce=r(k);Me=n(ce,"CODE",{});var os=r(Me);Xt=l(os,"cached_download"),os.forEach(t),Zt=l(ce," is useful for downloading and caching a file on your local disk. Once stored in your cache, you don\u2019t have to redownload the file the next time you use it. "),Be=n(ce,"CODE",{});var ts=r(Be);ea=l(ts,"cached_download"),ts.forEach(t),oa=l(ce," is a hands-free solution for staying up to date with new file versions. When a downloaded file is updated in the remote repository, "),We=n(ce,"CODE",{});var as=r(We);ta=l(as,"cached_download"),as.forEach(t),aa=l(ce," will automatically download and store it for you."),ce.forEach(t),Ko=f(e),P=n(e,"P",{});var $e=r(P);la=l($e,"Begin by retrieving your file URL with "),Je=n($e,"CODE",{});var ls=r(Je);sa=l(ls,"hf_hub_url"),ls.forEach(t),na=l($e,", and then pass the specified URL to "),Ge=n($e,"CODE",{});var ss=r(Ge);ra=l(ss,"cached_download"),ss.forEach(t),ia=l($e," to download the file:"),$e.forEach(t),Qo=f(e),g(se.$$.fragment,e),Vo=f(e),_=n(e,"P",{});var x=r(_);Ye=n(x,"CODE",{});var ns=r(Ye);da=l(ns,"hf_hub_url"),ns.forEach(t),ha=l(x," and "),ze=n(x,"CODE",{});var rs=r(ze);fa=l(rs,"cached_download"),rs.forEach(t),pa=l(x," work hand in hand to download a file. This is precisely how "),Ke=n(x,"CODE",{});var is=r(Ke);ca=l(is,"hf_hub_download"),is.forEach(t),ua=l(x," from the tutorial works! "),Qe=n(x,"CODE",{});var ds=r(Qe);_a=l(ds,"hf_hub_download"),ds.forEach(t),wa=l(x," is simply a wrapper that calls both "),Ve=n(x,"CODE",{});var hs=r(Ve);ma=l(hs,"hf_hub_url"),hs.forEach(t),ga=l(x," and "),Xe=n(x,"CODE",{});var fs=r(Xe);va=l(fs,"cached_download"),fs.forEach(t),ya=l(x,"."),x.forEach(t),Xo=f(e),g(ne.$$.fragment,e),Zo=f(e),I=n(e,"H2",{class:!0});var vt=r(I);Y=n(vt,"A",{id:!0,class:!0,href:!0});var ps=r(Y);Ze=n(ps,"SPAN",{});var cs=r(Ze);g(re.$$.fragment,cs),cs.forEach(t),ps.forEach(t),ba=f(vt),eo=n(vt,"SPAN",{});var us=r(eo);Ea=l(us,"snapshot_download"),us.forEach(t),vt.forEach(t),et=f(e),F=n(e,"P",{});var Oo=r(F);oo=n(Oo,"CODE",{});var _s=r(oo);$a=l(_s,"snapshot_download"),_s.forEach(t),xa=l(Oo," downloads an entire repository at a given revision. Like "),to=n(Oo,"CODE",{});var ws=r(to);ja=l(ws,"cached_download"),ws.forEach(t),ka=l(Oo,", all downloaded files are cached on your local disk. However, even if only a single file is updated, the entire repository will be redownloaded."),Oo.forEach(t),ot=f(e),ve=n(e,"P",{});var ms=r(ve);qa=l(ms,"Download a whole repository as shown in the following:"),ms.forEach(t),tt=f(e),g(ie.$$.fragment,e),at=f(e),q=n(e,"P",{});var ue=r(q);ao=n(ue,"CODE",{});var gs=r(ao);Oa=l(gs,"snapshot_download"),gs.forEach(t),Da=l(ue," downloads the latest revision by default. If you want a specific repository revision, use the "),lo=n(ue,"CODE",{});var vs=r(lo);Ca=l(vs,"revision"),vs.forEach(t),Pa=l(ue," parameter as shown with "),so=n(ue,"CODE",{});var ys=r(so);Sa=l(ys,"hf_hub_url"),ys.forEach(t),Ha=l(ue,"."),ue.forEach(t),lt=f(e),g(de.$$.fragment,e),st=f(e),S=n(e,"P",{});var xe=r(S);Aa=l(xe,"In general, it is usually better to manually download files with "),no=n(xe,"CODE",{});var bs=r(no);La=l(bs,"hf_hub_download"),bs.forEach(t),Na=l(xe," (if you already know the file name) to avoid re-downloading an entire repository. "),ro=n(xe,"CODE",{});var Es=r(ro);Ua=l(Es,"snapshot_download"),Es.forEach(t),Ra=l(xe," is helpful when your library\u2019s downloading utility is a helper, and unaware of which files need to be downloaded."),xe.forEach(t),nt=f(e),c=n(e,"P",{});var u=r(c);Ta=l(u,"However, you don\u2019t want to always download the contents of an entire repository with "),io=n(u,"CODE",{});var $s=r(io);Ia=l($s,"snapshot_download"),$s.forEach(t),Fa=l(u,". Even if you don\u2019t know the file name and only know the file type, you can download specific files with "),ho=n(u,"CODE",{});var xs=r(ho);Ma=l(xs,"allow_regex"),xs.forEach(t),Ba=l(u," and "),fo=n(u,"CODE",{});var js=r(fo);Wa=l(js,"ignore_regex"),js.forEach(t),Ja=l(u,`.
use of the `),po=n(u,"CODE",{});var ks=r(po);Ga=l(ks,"allow_regex"),ks.forEach(t),Ya=l(u," and "),co=n(u,"CODE",{});var qs=r(co);za=l(qs,"ignore_regex"),qs.forEach(t),Ka=l(u,` arguments to specify
which files shall be downloaded.
`),uo=n(u,"CODE",{});var Os=r(uo);Qa=l(Os,"allow_regex"),Os.forEach(t),Va=l(u," and "),_o=n(u,"CODE",{});var Ds=r(_o);Xa=l(Ds,"ignore_regex"),Ds.forEach(t),Za=l(u,` accept either a single regex or a list of regexes.
The regex matching is based on `),he=n(u,"A",{href:!0,rel:!0});var Cs=r(he);wo=n(Cs,"CODE",{});var Ps=r(wo);el=l(Ps,"fnmatch"),Ps.forEach(t),Cs.forEach(t),ol=l(u," which means it provides support for Unix shell-style wildcards."),u.forEach(t),rt=f(e),z=n(e,"P",{});var yt=r(z);tl=l(yt,"For example, you can use "),mo=n(yt,"CODE",{});var Ss=r(mo);al=l(Ss,"allow_regex"),Ss.forEach(t),ll=l(yt," to only download JSON configuration files:"),yt.forEach(t),it=f(e),g(fe.$$.fragment,e),dt=f(e),w=n(e,"P",{});var j=r(w);sl=l(j,"On the other hand, "),go=n(j,"CODE",{});var Hs=r(go);nl=l(Hs,"ignore_regex"),Hs.forEach(t),rl=l(j," can be used to exclude certain files from being downloaded. The following example ignores the "),vo=n(j,"CODE",{});var As=r(vo);il=l(As,".msgpack"),As.forEach(t),dl=l(j," and "),yo=n(j,"CODE",{});var Ls=r(yo);hl=l(Ls,".h5"),Ls.forEach(t),fl=l(j,` file extensions:
or `),bo=n(j,"CODE",{});var Ns=r(bo);pl=l(Ns,".h5"),Ns.forEach(t),cl=l(j," extensions, you could make use of "),Eo=n(j,"CODE",{});var Us=r(Eo);ul=l(Us,"ignore_regex"),Us.forEach(t),_l=l(j,":"),j.forEach(t),ht=f(e),g(pe.$$.fragment,e),ft=f(e),K=n(e,"P",{});var bt=r(K);wl=l(bt,`Passing a regex can be especially useful when repositories contain files that
are never expected to be downloaded by `),$o=n(bt,"CODE",{});var Rs=r($o);ml=l(Rs,"snapshot_download"),Rs.forEach(t),gl=l(bt,"."),bt.forEach(t),pt=f(e),$=n(e,"P",{});var H=r($);vl=l(H,"Note that passing "),xo=n(H,"CODE",{});var Ts=r(xo);yl=l(Ts,"allow_regex"),Ts.forEach(t),bl=l(H," or "),jo=n(H,"CODE",{});var Is=r(jo);El=l(Is,"ignore_regex"),Is.forEach(t),$l=l(H," does "),ko=n(H,"STRONG",{});var Fs=r(ko);xl=l(Fs,"not"),Fs.forEach(t),jl=l(H,` prevent
`),qo=n(H,"CODE",{});var Ms=r(qo);kl=l(Ms,"snapshot_download"),Ms.forEach(t),ql=l(H,` from re-downloading the entire model repository if an ignored
file is changed.`),H.forEach(t),this.h()},h(){p(L,"name","hf:doc:metadata"),p(L,"content",JSON.stringify(Vs)),p(M,"id","title:-how-to-download-files-from-the-hub"),p(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(M,"href","#title:-how-to-download-files-from-the-hub"),p(N,"class","relative group"),p(B,"id","how-to-integrate-downstream-utilities-in-your-library"),p(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(B,"href","#how-to-integrate-downstream-utilities-in-your-library"),p(U,"class","relative group"),p(J,"id","hfhuburl"),p(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(J,"href","#hfhuburl"),p(R,"class","relative group"),Ys(we.src,Cl="/docs/assets/hub/repo.png")||p(we,"src",Cl),p(we,"alt","/docs/assets/hub/repo.png"),p(G,"id","cacheddownload"),p(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(G,"href","#cacheddownload"),p(T,"class","relative group"),p(Y,"id","snapshotdownload"),p(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Y,"href","#snapshotdownload"),p(I,"class","relative group"),p(he,"href","https://docs.python.org/3/library/fnmatch.html"),p(he,"rel","nofollow")},m(e,i){o(document.head,L),d(e,Co,i),d(e,Po,i),d(e,So,i),d(e,N,i),o(N,M),o(M,je),v(Q,je,null),o(N,Et),o(N,ke),o(ke,$t),d(e,Ho,i),d(e,U,i),o(U,B),o(B,qe),v(V,qe,null),o(U,xt),o(U,Oe),o(Oe,jt),d(e,Ao,i),d(e,W,i),o(W,kt),o(W,De),o(De,qt),o(W,Ot),d(e,Lo,i),d(e,O,i),o(O,Ce),o(Ce,Dt),o(O,Ct),o(O,Pe),o(Pe,Pt),o(O,St),o(O,Se),o(Se,Ht),d(e,No,i),d(e,R,i),o(R,J),o(J,He),v(X,He,null),o(R,At),o(R,Ae),o(Ae,Lt),d(e,Uo,i),d(e,D,i),o(D,Nt),o(D,Le),o(Le,Ut),o(D,Rt),o(D,Ne),o(Ne,Tt),o(D,It),d(e,Ro,i),d(e,_e,i),o(_e,we),d(e,To,i),v(Z,e,i),d(e,Io,i),d(e,me,i),o(me,Ft),d(e,Fo,i),d(e,ge,i),o(ge,Mt),d(e,Mo,i),v(ee,e,i),d(e,Bo,i),d(e,oe,i),o(oe,Ue),o(Ue,Bt),o(oe,Wt),d(e,Wo,i),v(te,e,i),d(e,Jo,i),d(e,C,i),o(C,Jt),o(C,Re),o(Re,Gt),o(C,Yt),o(C,Te),o(Te,zt),o(C,Kt),d(e,Go,i),v(ae,e,i),d(e,Yo,i),d(e,T,i),o(T,G),o(G,Ie),v(le,Ie,null),o(T,Qt),o(T,Fe),o(Fe,Vt),d(e,zo,i),d(e,k,i),o(k,Me),o(Me,Xt),o(k,Zt),o(k,Be),o(Be,ea),o(k,oa),o(k,We),o(We,ta),o(k,aa),d(e,Ko,i),d(e,P,i),o(P,la),o(P,Je),o(Je,sa),o(P,na),o(P,Ge),o(Ge,ra),o(P,ia),d(e,Qo,i),v(se,e,i),d(e,Vo,i),d(e,_,i),o(_,Ye),o(Ye,da),o(_,ha),o(_,ze),o(ze,fa),o(_,pa),o(_,Ke),o(Ke,ca),o(_,ua),o(_,Qe),o(Qe,_a),o(_,wa),o(_,Ve),o(Ve,ma),o(_,ga),o(_,Xe),o(Xe,va),o(_,ya),d(e,Xo,i),v(ne,e,i),d(e,Zo,i),d(e,I,i),o(I,Y),o(Y,Ze),v(re,Ze,null),o(I,ba),o(I,eo),o(eo,Ea),d(e,et,i),d(e,F,i),o(F,oo),o(oo,$a),o(F,xa),o(F,to),o(to,ja),o(F,ka),d(e,ot,i),d(e,ve,i),o(ve,qa),d(e,tt,i),v(ie,e,i),d(e,at,i),d(e,q,i),o(q,ao),o(ao,Oa),o(q,Da),o(q,lo),o(lo,Ca),o(q,Pa),o(q,so),o(so,Sa),o(q,Ha),d(e,lt,i),v(de,e,i),d(e,st,i),d(e,S,i),o(S,Aa),o(S,no),o(no,La),o(S,Na),o(S,ro),o(ro,Ua),o(S,Ra),d(e,nt,i),d(e,c,i),o(c,Ta),o(c,io),o(io,Ia),o(c,Fa),o(c,ho),o(ho,Ma),o(c,Ba),o(c,fo),o(fo,Wa),o(c,Ja),o(c,po),o(po,Ga),o(c,Ya),o(c,co),o(co,za),o(c,Ka),o(c,uo),o(uo,Qa),o(c,Va),o(c,_o),o(_o,Xa),o(c,Za),o(c,he),o(he,wo),o(wo,el),o(c,ol),d(e,rt,i),d(e,z,i),o(z,tl),o(z,mo),o(mo,al),o(z,ll),d(e,it,i),v(fe,e,i),d(e,dt,i),d(e,w,i),o(w,sl),o(w,go),o(go,nl),o(w,rl),o(w,vo),o(vo,il),o(w,dl),o(w,yo),o(yo,hl),o(w,fl),o(w,bo),o(bo,pl),o(w,cl),o(w,Eo),o(Eo,ul),o(w,_l),d(e,ht,i),v(pe,e,i),d(e,ft,i),d(e,K,i),o(K,wl),o(K,$o),o($o,ml),o(K,gl),d(e,pt,i),d(e,$,i),o($,vl),o($,xo),o(xo,yl),o($,bl),o($,jo),o(jo,El),o($,$l),o($,ko),o(ko,xl),o($,jl),o($,qo),o(qo,kl),o($,ql),ct=!0},p:zs,i(e){ct||(y(Q.$$.fragment,e),y(V.$$.fragment,e),y(X.$$.fragment,e),y(Z.$$.fragment,e),y(ee.$$.fragment,e),y(te.$$.fragment,e),y(ae.$$.fragment,e),y(le.$$.fragment,e),y(se.$$.fragment,e),y(ne.$$.fragment,e),y(re.$$.fragment,e),y(ie.$$.fragment,e),y(de.$$.fragment,e),y(fe.$$.fragment,e),y(pe.$$.fragment,e),ct=!0)},o(e){b(Q.$$.fragment,e),b(V.$$.fragment,e),b(X.$$.fragment,e),b(Z.$$.fragment,e),b(ee.$$.fragment,e),b(te.$$.fragment,e),b(ae.$$.fragment,e),b(le.$$.fragment,e),b(se.$$.fragment,e),b(ne.$$.fragment,e),b(re.$$.fragment,e),b(ie.$$.fragment,e),b(de.$$.fragment,e),b(fe.$$.fragment,e),b(pe.$$.fragment,e),ct=!1},d(e){t(L),e&&t(Co),e&&t(Po),e&&t(So),e&&t(N),E(Q),e&&t(Ho),e&&t(U),E(V),e&&t(Ao),e&&t(W),e&&t(Lo),e&&t(O),e&&t(No),e&&t(R),E(X),e&&t(Uo),e&&t(D),e&&t(Ro),e&&t(_e),e&&t(To),E(Z,e),e&&t(Io),e&&t(me),e&&t(Fo),e&&t(ge),e&&t(Mo),E(ee,e),e&&t(Bo),e&&t(oe),e&&t(Wo),E(te,e),e&&t(Jo),e&&t(C),e&&t(Go),E(ae,e),e&&t(Yo),e&&t(T),E(le),e&&t(zo),e&&t(k),e&&t(Ko),e&&t(P),e&&t(Qo),E(se,e),e&&t(Vo),e&&t(_),e&&t(Xo),E(ne,e),e&&t(Zo),e&&t(I),E(re),e&&t(et),e&&t(F),e&&t(ot),e&&t(ve),e&&t(tt),E(ie,e),e&&t(at),e&&t(q),e&&t(lt),E(de,e),e&&t(st),e&&t(S),e&&t(nt),e&&t(c),e&&t(rt),e&&t(z),e&&t(it),E(fe,e),e&&t(dt),e&&t(w),e&&t(ht),E(pe,e),e&&t(ft),e&&t(K),e&&t(pt),e&&t($)}}}const Vs={local:"how-to-integrate-downstream-utilities-in-your-library",sections:[{local:"hfhuburl",title:"hf_hub_url"},{local:"cacheddownload",title:"cached_download"},{local:"snapshotdownload",title:"snapshot_download"}],title:"How to integrate downstream utilities in your library"};function Xs(Dl){return Ks(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class tn extends Bs{constructor(L){super();Ws(this,L,Xs,Qs,Js,{})}}export{tn as default,Vs as metadata};
