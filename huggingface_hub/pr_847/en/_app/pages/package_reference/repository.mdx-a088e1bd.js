import{S as eg,i as tg,s as og,e as r,k as l,w as d,t as s,M as rg,c as n,d as o,m as c,a,x as u,h as i,b as p,F as e,g as $,y as m,L as ng,q as f,o as _,B as b,v as ag}from"../../chunks/vendor-d3924577.js";import{D as v}from"../../chunks/Docstring-6e765b82.js";import{C as sg}from"../../chunks/CodeBlock-ff545b14.js";import{I as En}from"../../chunks/IconCopyLink-f94c3d80.js";function ig(_l){let V,vr,A,oe,Ut,He,kn,Mt,xn,$r,E,Dn,Wt,Rn,Tn,Bt,Pn,In,Gt,On,Ln,wr,re,Cn,zt,Fn,Nn,Er,S,ne,Jt,Ve,jn,Kt,Hn,kr,g,Ae,Vn,Qt,An,Sn,Xt,qn,Un,k,Se,Mn,Yt,Wn,Bn,q,Gn,Zt,zn,Jn,eo,Kn,Qn,Xn,x,to,Yn,Zn,oo,ea,ta,ro,oa,ra,no,na,aa,sa,ae,qe,ia,ao,la,ca,D,Ue,ga,so,ha,pa,io,da,ua,lo,ma,fa,se,Me,_a,co,ba,ya,ie,We,va,U,$a,go,wa,Ea,ho,ka,xa,Da,C,Be,Ra,po,Ta,Pa,uo,Ia,Oa,R,Ge,La,M,Ca,mo,Fa,Na,fo,ja,Ha,Va,_o,Aa,Sa,ze,qa,le,Je,Ua,bo,Ma,Wa,F,Ke,Ba,yo,Ga,za,I,Ja,vo,Ka,Qa,$o,Xa,Ya,wo,Za,es,ts,N,Qe,os,Eo,rs,ns,W,as,ko,ss,is,xo,ls,cs,gs,ce,Xe,hs,Do,ps,ds,ge,Ye,us,Ro,ms,fs,he,Ze,_s,Pt,bs,To,ys,vs,pe,et,$s,Po,ws,Es,de,tt,ks,Io,xs,Ds,ue,ot,Rs,Oo,Ts,Ps,j,rt,Is,Lo,Os,Ls,B,Cs,Co,Fs,Ns,Fo,js,Hs,Vs,me,nt,As,No,Ss,qs,fe,at,Us,jo,Ms,Ws,_e,st,Bs,Ho,Gs,zs,be,it,Js,Vo,Ks,Qs,H,lt,Xs,Ao,Ys,Zs,O,ei,So,ti,oi,qo,ri,ni,Uo,ai,si,ii,ye,ct,li,Mo,ci,gi,ve,gt,hi,Wo,pi,di,$e,ht,ui,Bo,mi,fi,we,pt,_i,Go,bi,yi,Ee,dt,vi,zo,$i,xr,G,ke,Jo,ut,wi,Ko,Ei,Dr,z,mt,ki,Qo,xi,Rr,J,ft,Di,Xo,Ri,Tr,K,_t,Ti,Yo,Pi,Pr,Q,bt,Ii,Zo,Oi,Ir,X,yt,Li,er,Ci,Or,Y,vt,Fi,tr,Ni,Lr,L,$t,ji,or,Hi,Vi,rr,Ai,Cr,Z,xe,nr,wt,Si,ar,qi,Fr,De,Ui,sr,Mi,Wi,Nr,T,ir,lr,Bi,Gi,cr,gr,zi,Ji,hr,pr,Ki,Qi,Et,Xi,dr,Yi,Zi,jr,It,el,Hr,w,kt,tl,ur,ol,rl,mr,nl,al,Re,xt,sl,fr,il,ll,Te,Dt,cl,_r,gl,hl,Pe,Rt,pl,br,dl,Vr,ee,Tt,ul,yr,ml,Ar;return He=new En({}),Ve=new En({}),Ae=new v({props:{name:"class huggingface_hub.Repository",anchor:"huggingface_hub.Repository",parameters:[{name:"local_dir",val:": str"},{name:"clone_from",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"use_auth_token",val:": typing.Union[bool, str] = True"},{name:"git_user",val:": typing.Optional[str] = None"},{name:"git_email",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"private",val:": bool = False"},{name:"skip_lfs_files",val:": bool = False"},{name:"client",val:": typing.Optional[huggingface_hub.hf_api.HfApi] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L423"}}),Se=new v({props:{name:"__init__",anchor:"huggingface_hub.Repository.__init__",parameters:[{name:"local_dir",val:": str"},{name:"clone_from",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"use_auth_token",val:": typing.Union[bool, str] = True"},{name:"git_user",val:": typing.Optional[str] = None"},{name:"git_email",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"private",val:": bool = False"},{name:"skip_lfs_files",val:": bool = False"},{name:"client",val:": typing.Optional[huggingface_hub.hf_api.HfApi] = None"}],parametersDescription:[{anchor:"huggingface_hub.Repository.__init__.local_dir",description:`<strong>local_dir</strong> (<code>str</code>) &#x2014;
path (e.g. <code>&apos;my_trained_model/&apos;</code>) to the local directory, where
the <code>Repository</code> will be initalized.`,name:"local_dir"},{anchor:"huggingface_hub.Repository.__init__.clone_from",description:`<strong>clone_from</strong> (<code>str</code>, <em>optional</em>) &#x2014;
repository url (e.g.
<code>&apos;https://huggingface.co/philschmid/playground-tests&apos;</code>).`,name:"clone_from"},{anchor:"huggingface_hub.Repository.__init__.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
To set when creating a repo: et to &#x201C;dataset&#x201D; or &#x201C;space&#x201D; if
creating a dataset or space, default is model.`,name:"repo_type"},{anchor:"huggingface_hub.Repository.__init__.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
huggingface_token can be extract from <code>HfApi().login(username, password)</code> and is used to authenticate against the hub (useful
from Google Colab for instance).`,name:"use_auth_token"},{anchor:"huggingface_hub.Repository.__init__.git_user",description:`<strong>git_user</strong> (<code>str</code>, <em>optional</em>) &#x2014;
will override the <code>git config user.name</code> for committing and
pushing files to the hub.`,name:"git_user"},{anchor:"huggingface_hub.Repository.__init__.git_email",description:`<strong>git_email</strong> (<code>str</code>, <em>optional</em>) &#x2014;
will override the <code>git config user.email</code> for committing and
pushing files to the hub.`,name:"git_email"},{anchor:"huggingface_hub.Repository.__init__.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Revision to checkout after initializing the repository. If the
revision doesn&#x2019;t exist, a branch will be created with that
revision name from the default branch&#x2019;s current HEAD.`,name:"revision"},{anchor:"huggingface_hub.Repository.__init__.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
whether the repository is private or not.`,name:"private"},{anchor:"huggingface_hub.Repository.__init__.skip_lfs_files",description:`<strong>skip_lfs_files</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
whether to skip git-LFS files or not.`,name:"skip_lfs_files"},{anchor:"huggingface_hub.Repository.__init__.client",description:`<strong>client</strong> (<code>HfApi</code>, <em>optional</em>) &#x2014;
Instance of HfApi to use when calling the HF Hub API. A new
instance will be created if this is left to <code>None</code>.`,name:"client"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L434"}}),qe=new v({props:{name:"current_branch",anchor:"huggingface_hub.Repository.current_branch",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L543",returnDescription:`
<p>Current checked out branch.</p>
`,returnType:`
<p><code>str</code></p>
`}}),Ue=new v({props:{name:"add_tag",anchor:"huggingface_hub.Repository.add_tag",parameters:[{name:"tag_name",val:": str"},{name:"message",val:": str = None"},{name:"remote",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"huggingface_hub.Repository.add_tag.tag_name",description:`<strong>tag_name</strong> (<code>str</code>) &#x2014;
The name of the tag to be added.`,name:"tag_name"},{anchor:"huggingface_hub.Repository.add_tag.message",description:`<strong>message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The message that accompanies the tag. The tag will turn into an
annotated tag if a message is passed.`,name:"message"},{anchor:"huggingface_hub.Repository.add_tag.remote",description:`<strong>remote</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The remote on which to add the tag.`,name:"remote"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1377"}}),Me=new v({props:{name:"auto_track_large_files",anchor:"huggingface_hub.Repository.auto_track_large_files",parameters:[{name:"pattern",val:": typing.Optional[str] = '.'"}],parametersDescription:[{anchor:"huggingface_hub.Repository.auto_track_large_files.pattern",description:`<strong>pattern</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201D;.&#x201C;) &#x2014;
The pattern with which to track files that are above 10MBs.`,name:"pattern"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L984",returnDescription:`
<p>List of filenames that are now tracked due to their
size.</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),We=new v({props:{name:"check_git_versions",anchor:"huggingface_hub.Repository.check_git_versions",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L566"}}),Be=new v({props:{name:"clone_from",anchor:"huggingface_hub.Repository.clone_from",parameters:[{name:"repo_url",val:": str"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"}],parametersDescription:[{anchor:"huggingface_hub.Repository.clone_from.repo_url",description:`<strong>repo_url</strong> (<code>str</code>) &#x2014;
The URL from which to clone the repository`,name:"repo_url"},{anchor:"huggingface_hub.Repository.clone_from.use_auth_token",description:`<strong>use_auth_token</strong> (<code>Union[str, bool]</code>, <em>optional</em>) &#x2014;
Whether to use the authentication token. It can be:<ul>
<li>a string which is the token itself</li>
<li><code>False</code>, which would not use the authentication token</li>
<li><code>True</code>, which would fetch the authentication token from the
local folder and use it (you should be logged in for this to
work).</li>
<li><code>None</code>, which would retrieve the value of
<code>self.huggingface_token</code>.</li>
</ul>`,name:"use_auth_token"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L602"}}),Ge=new v({props:{name:"commit",anchor:"huggingface_hub.Repository.commit",parameters:[{name:"commit_message",val:": str"},{name:"branch",val:": typing.Optional[str] = None"},{name:"track_large_files",val:": typing.Optional[bool] = True"},{name:"blocking",val:": typing.Optional[bool] = True"},{name:"auto_lfs_prune",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"huggingface_hub.Repository.commit.commit_message",description:`<strong>commit_message</strong> (<code>str</code>) &#x2014;
Message to use for the commit.`,name:"commit_message"},{anchor:"huggingface_hub.Repository.commit.branch",description:`<strong>branch</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The branch on which the commit will appear. This branch will be
checked-out before any operation.`,name:"branch"},{anchor:"huggingface_hub.Repository.commit.track_large_files",description:`<strong>track_large_files</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to automatically track large files or not. Will do so by
default.`,name:"track_large_files"},{anchor:"huggingface_hub.Repository.commit.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the <code>git push</code> has
finished.`,name:"blocking"},{anchor:"huggingface_hub.Repository.commit.auto_lfs_prune",description:`<strong>auto_lfs_prune</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to automatically prune files once they have been pushed
to the remote.`,name:"auto_lfs_prune"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1481"}}),ze=new sg({props:{code:`with Repository(
    "text-files",
    clone_from="<user>/text-files",
    use_auth_token=True,
).commit("My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))

import torch

model = torch.nn.Transformer()
with Repository(
    "torch-model",
    clone_from="<user>/torch-model",
    use_auth_token=True,
).commit("My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;text-files&quot;</span>,
<span class="hljs-meta">... </span>    clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>,
<span class="hljs-meta">... </span>    use_auth_token=<span class="hljs-literal">True</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>).commit(<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;torch-model&quot;</span>,
<span class="hljs-meta">... </span>    clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>,
<span class="hljs-meta">... </span>    use_auth_token=<span class="hljs-literal">True</span>,
<span class="hljs-meta">&gt;&gt;&gt; </span>).commit(<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),Je=new v({props:{name:"delete_tag",anchor:"huggingface_hub.Repository.delete_tag",parameters:[{name:"tag_name",val:": str"},{name:"remote",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"huggingface_hub.Repository.delete_tag.tag_name",description:`<strong>tag_name</strong> (<code>str</code>) &#x2014;
The tag name to delete.`,name:"tag_name"},{anchor:"huggingface_hub.Repository.delete_tag.remote",description:`<strong>remote</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The remote on which to delete the tag.`,name:"remote"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1326",returnDescription:`
<p><code>True</code> if deleted, <code>False</code> if the tag didn\u2019t exist.
If remote is not passed, will just be updated locally</p>
`,returnType:`
<p><code>bool</code></p>
`}}),Ke=new v({props:{name:"git_add",anchor:"huggingface_hub.Repository.git_add",parameters:[{name:"pattern",val:": typing.Optional[str] = '.'"},{name:"auto_lfs_track",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"huggingface_hub.Repository.git_add.pattern",description:`<strong>pattern</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201D;.&#x201C;) &#x2014;
The pattern with which to add files to staging.`,name:"pattern"},{anchor:"huggingface_hub.Repository.git_add.auto_lfs_track",description:`<strong>auto_lfs_track</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to automatically track large files with git-lfs. Any
file over 10MB in size will be automatically tracked.`,name:"auto_lfs_track"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1080"}}),Qe=new v({props:{name:"git_checkout",anchor:"huggingface_hub.Repository.git_checkout",parameters:[{name:"revision",val:": str"},{name:"create_branch_ok",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"huggingface_hub.Repository.git_checkout.revision",description:`<strong>revision</strong> (<code>str</code>) &#x2014;
The revision to checkout.`,name:"revision"},{anchor:"huggingface_hub.Repository.git_checkout.create_branch_ok",description:`<strong>create_branch_ok</strong> (<code>str</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether creating a branch named with the <code>revision</code> passed at
the current checked-out reference if <code>revision</code> isn&#x2019;t an
existing revision is allowed.`,name:"create_branch_ok"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1234"}}),Xe=new v({props:{name:"git_commit",anchor:"huggingface_hub.Repository.git_commit",parameters:[{name:"commit_message",val:": str = 'commit files to HF hub'"}],parametersDescription:[{anchor:"huggingface_hub.Repository.git_commit.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;commit files to HF hub&#x201D;) &#x2014;
The message attributed to the commit.`,name:"commit_message"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1116"}}),Ye=new v({props:{name:"git_config_username_and_email",anchor:"huggingface_hub.Repository.git_config_username_and_email",parameters:[{name:"git_user",val:": typing.Optional[str] = None"},{name:"git_email",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"huggingface_hub.Repository.git_config_username_and_email.git_user",description:`<strong>git_user</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The username to register through <code>git</code>.`,name:"git_user"},{anchor:"huggingface_hub.Repository.git_config_username_and_email.git_email",description:`<strong>git_email</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The email to register through <code>git</code>.`,name:"git_email"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L753"}}),Ze=new v({props:{name:"git_credential_helper_store",anchor:"huggingface_hub.Repository.git_credential_helper_store",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L787"}}),et=new v({props:{name:"git_head_commit_url",anchor:"huggingface_hub.Repository.git_head_commit_url",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L845",returnDescription:`
<p>The URL to the current checked-out commit.</p>
`,returnType:`
<p><code>str</code></p>
`}}),tt=new v({props:{name:"git_head_hash",anchor:"huggingface_hub.Repository.git_head_hash",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L803",returnDescription:`
<p>The current checked out commit SHA.</p>
`,returnType:`
<p><code>str</code></p>
`}}),ot=new v({props:{name:"git_pull",anchor:"huggingface_hub.Repository.git_pull",parameters:[{name:"rebase",val:": typing.Optional[bool] = False"},{name:"lfs",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"huggingface_hub.Repository.git_pull.rebase",description:`<strong>rebase</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to rebase the current branch on top of the upstream
branch after fetching.`,name:"rebase"},{anchor:"huggingface_hub.Repository.git_pull.lfs",description:`<strong>lfs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to fetch the LFS files too. This option only changes the
behavior when a repository was cloned without fetching the LFS
files; calling <code>repo.git_pull(lfs=True)</code> will then fetch the LFS
file from the remote repository.`,name:"lfs"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1049"}}),rt=new v({props:{name:"git_push",anchor:"huggingface_hub.Repository.git_push",parameters:[{name:"upstream",val:": typing.Optional[str] = None"},{name:"blocking",val:": typing.Optional[bool] = True"},{name:"auto_lfs_prune",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"huggingface_hub.Repository.git_push.upstream",description:`<strong>upstream</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Upstream to which this should push. If not specified, will push
to the lastly defined upstream or to the default one (<code>origin main</code>).`,name:"upstream"},{anchor:"huggingface_hub.Repository.git_push.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the push has
finished. Setting this to <code>False</code> will return an
<code>CommandInProgress</code> object which has an <code>is_done</code> property. This
property will be set to <code>True</code> when the push is finished.`,name:"blocking"},{anchor:"huggingface_hub.Repository.git_push.auto_lfs_prune",description:`<strong>auto_lfs_prune</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to automatically prune files once they have been pushed
to the remote.`,name:"auto_lfs_prune"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1140"}}),nt=new v({props:{name:"git_remote_url",anchor:"huggingface_hub.Repository.git_remote_url",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L823",returnDescription:`
<p>The URL of the <code>origin</code> remote.</p>
`,returnType:`
<p><code>str</code></p>
`}}),at=new v({props:{name:"is_repo_clean",anchor:"huggingface_hub.Repository.is_repo_clean",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1424",returnDescription:`
<p><code>True</code> if the git status is clean, <code>False</code> otherwise.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),st=new v({props:{name:"lfs_enable_largefiles",anchor:"huggingface_hub.Repository.lfs_enable_largefiles",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L960"}}),it=new v({props:{name:"lfs_prune",anchor:"huggingface_hub.Repository.lfs_prune",parameters:[{name:"recent",val:" = False"}],parametersDescription:[{anchor:"huggingface_hub.Repository.lfs_prune.recent",description:`<strong>recent</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to prune files even if they were referenced by recent
commits. See the following
<a href="https://github.com/git-lfs/git-lfs/blob/f3d43f0428a84fc4f1e5405b76b5a73ec2437e65/docs/man/git-lfs-prune.1.ronn#recent-files" rel="nofollow">link</a>
for more information.`,name:"recent"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1021"}}),lt=new v({props:{name:"lfs_track",anchor:"huggingface_hub.Repository.lfs_track",parameters:[{name:"patterns",val:": typing.Union[str, typing.List[str]]"},{name:"filename",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"huggingface_hub.Repository.lfs_track.patterns",description:`<strong>patterns</strong> (<code>Union[str, List[str]]</code>) &#x2014;
The pattern, or list of patterns, to track with git-lfs.`,name:"patterns"},{anchor:"huggingface_hub.Repository.lfs_track.filename",description:`<strong>filename</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use the patterns as literal filenames.`,name:"filename"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L905"}}),ct=new v({props:{name:"lfs_untrack",anchor:"huggingface_hub.Repository.lfs_untrack",parameters:[{name:"patterns",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"huggingface_hub.Repository.lfs_untrack.patterns",description:`<strong>patterns</strong> (<code>Union[str, List[str]]</code>) &#x2014;
The pattern, or list of patterns, to untrack with git-lfs.`,name:"patterns"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L937"}}),gt=new v({props:{name:"list_deleted_files",anchor:"huggingface_hub.Repository.list_deleted_files",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L859",returnDescription:`
<p>A list of files that have been deleted in the working
directory or index.</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),ht=new v({props:{name:"push_to_hub",anchor:"huggingface_hub.Repository.push_to_hub",parameters:[{name:"commit_message",val:": typing.Optional[str] = 'commit files to HF hub'"},{name:"blocking",val:": typing.Optional[bool] = True"},{name:"clean_ok",val:": typing.Optional[bool] = True"},{name:"auto_lfs_prune",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"huggingface_hub.Repository.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>) &#x2014;
Message to use for the commit.`,name:"commit_message"},{anchor:"huggingface_hub.Repository.push_to_hub.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the <code>git push</code> has
finished.`,name:"blocking"},{anchor:"huggingface_hub.Repository.push_to_hub.clean_ok",description:`<strong>clean_ok</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If True, this function will return None if the repo is
untouched. Default behavior is to fail because the git command
fails.`,name:"clean_ok"},{anchor:"huggingface_hub.Repository.push_to_hub.auto_lfs_prune",description:`<strong>auto_lfs_prune</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to automatically prune files once they have been pushed
to the remote.`,name:"auto_lfs_prune"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1445"}}),pt=new v({props:{name:"tag_exists",anchor:"huggingface_hub.Repository.tag_exists",parameters:[{name:"tag_name",val:": str"},{name:"remote",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"huggingface_hub.Repository.tag_exists.tag_name",description:`<strong>tag_name</strong> (<code>str</code>) &#x2014;
The name of the tag to check.`,name:"tag_name"},{anchor:"huggingface_hub.Repository.tag_exists.remote",description:`<strong>remote</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether to check if the tag exists on a remote. This parameter
should be the identifier of the remote.`,name:"remote"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1282",returnDescription:`
<p>Whether the tag exists.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),dt=new v({props:{name:"wait_for_commands",anchor:"huggingface_hub.Repository.wait_for_commands",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1613"}}),ut=new En({}),mt=new v({props:{name:"huggingface_hub.repository.is_git_repo",anchor:"huggingface_hub.repository.is_git_repo",parameters:[{name:"folder",val:": typing.Union[str, pathlib.Path]"}],parametersDescription:[{anchor:"huggingface_hub.repository.is_git_repo.folder",description:`<strong>folder</strong> (<code>str</code>) &#x2014;
The folder in which to run the command.`,name:"folder"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L103",returnDescription:`
<p><code>True</code> if the repository is part of a repository, <code>False</code>
otherwise.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),ft=new v({props:{name:"huggingface_hub.repository.is_local_clone",anchor:"huggingface_hub.repository.is_local_clone",parameters:[{name:"folder",val:": typing.Union[str, pathlib.Path]"},{name:"remote_url",val:": str"}],parametersDescription:[{anchor:"huggingface_hub.repository.is_local_clone.folder",description:`<strong>folder</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The folder in which to run the command.`,name:"folder"},{anchor:"huggingface_hub.repository.is_local_clone.remote_url",description:`<strong>remote_url</strong> (<code>str</code>) &#x2014;
The url of a git repository.`,name:"remote_url"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L122",returnDescription:`
<p><code>True</code> if the repository is a local clone of the remote
repository specified, <code>False</code> otherwise.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),_t=new v({props:{name:"huggingface_hub.repository.is_tracked_with_lfs",anchor:"huggingface_hub.repository.is_tracked_with_lfs",parameters:[{name:"filename",val:": typing.Union[str, pathlib.Path]"}],parametersDescription:[{anchor:"huggingface_hub.repository.is_tracked_with_lfs.filename",description:`<strong>filename</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The filename to check.`,name:"filename"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L154",returnDescription:`
<p><code>True</code> if the file passed is tracked with git-lfs, <code>False</code>
otherwise.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),bt=new v({props:{name:"huggingface_hub.repository.is_git_ignored",anchor:"huggingface_hub.repository.is_git_ignored",parameters:[{name:"filename",val:": typing.Union[str, pathlib.Path]"}],parametersDescription:[{anchor:"huggingface_hub.repository.is_git_ignored.filename",description:`<strong>filename</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The filename to check.`,name:"filename"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L198",returnDescription:`
<p><code>True</code> if the file passed is ignored by <code>git</code>, <code>False</code>
otherwise.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),yt=new v({props:{name:"huggingface_hub.repository.files_to_be_staged",anchor:"huggingface_hub.repository.files_to_be_staged",parameters:[{name:"pattern",val:": str"},{name:"folder",val:": typing.Union[str, pathlib.Path]"}],parametersDescription:[{anchor:"huggingface_hub.repository.files_to_be_staged.pattern",description:`<strong>pattern</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The pattern of filenames to check. Put <code>.</code> to get all files.`,name:"pattern"},{anchor:"huggingface_hub.repository.files_to_be_staged.folder",description:`<strong>folder</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The folder in which to run the command.`,name:"folder"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L229",returnDescription:`
<p>List of files that are to be staged.</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),vt=new v({props:{name:"huggingface_hub.repository.is_tracked_upstream",anchor:"huggingface_hub.repository.is_tracked_upstream",parameters:[{name:"folder",val:": typing.Union[str, pathlib.Path]"}],parametersDescription:[{anchor:"huggingface_hub.repository.is_tracked_upstream.folder",description:`<strong>folder</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The folder in which to run the command.`,name:"folder"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L261",returnDescription:`
<p><code>True</code> if the current checked-out branch is tracked upstream,
<code>False</code> otherwise.</p>
`,returnType:`
<p><code>bool</code></p>
`}}),$t=new v({props:{name:"huggingface_hub.repository.commits_to_push",anchor:"huggingface_hub.repository.commits_to_push",parameters:[{name:"folder",val:": typing.Union[str, pathlib.Path]"},{name:"upstream",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"huggingface_hub.repository.commits_to_push.folder",description:`<strong>folder</strong> (<code>str</code> or <code>Path</code>) &#x2014;
The folder in which to run the command.`,name:"folder"},{anchor:"huggingface_hub.repository.commits_to_push.upstream",description:"<strong>upstream</strong> (<code>str</code>, <em>optional</em>) &#x2014;",name:"upstream"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L291",returnDescription:`
<p>Number of commits that would be pushed upstream were a <code>git push</code> to proceed.</p>
`,returnType:`
<p><code>int</code></p>
`}}),wt=new En({}),kt=new v({props:{name:"class huggingface_hub.Repository",anchor:"huggingface_hub.Repository",parameters:[{name:"local_dir",val:": str"},{name:"clone_from",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"use_auth_token",val:": typing.Union[bool, str] = True"},{name:"git_user",val:": typing.Optional[str] = None"},{name:"git_email",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"private",val:": bool = False"},{name:"skip_lfs_files",val:": bool = False"},{name:"client",val:": typing.Optional[huggingface_hub.hf_api.HfApi] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L423"}}),xt=new v({props:{name:"commands_failed",anchor:"huggingface_hub.Repository.commands_failed",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1599"}}),Dt=new v({props:{name:"commands_in_progress",anchor:"huggingface_hub.Repository.commands_in_progress",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1606"}}),Rt=new v({props:{name:"wait_for_commands",anchor:"huggingface_hub.Repository.wait_for_commands",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L1613"}}),Tt=new v({props:{name:"class huggingface_hub.repository.CommandInProgress",anchor:"huggingface_hub.repository.CommandInProgress",parameters:[{name:"title",val:": str"},{name:"is_done_method",val:": typing.Callable"},{name:"status_method",val:": typing.Callable"},{name:"process",val:": Popen"},{name:"post_method",val:": typing.Optional[typing.Callable] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_847/src/huggingface_hub/repository.py#L26"}}),{c(){V=r("meta"),vr=l(),A=r("h1"),oe=r("a"),Ut=r("span"),d(He.$$.fragment),kn=l(),Mt=r("span"),xn=s("Managing local and online repositories"),$r=l(),E=r("p"),Dn=s("The "),Wt=r("code"),Rn=s("Repository"),Tn=s(" class is a helper class that wraps "),Bt=r("code"),Pn=s("git"),In=s(" and "),Gt=r("code"),On=s("git-lfs"),Ln=s(` commands. It provides tooling adapted
for managing repositories which can be very large.`),wr=l(),re=r("p"),Cn=s("It is the recommended tool as soon as any "),zt=r("code"),Fn=s("git"),Nn=s(` operation is involved, or when collaboration will be a point
of focus with the repository itself.`),Er=l(),S=r("h2"),ne=r("a"),Jt=r("span"),d(Ve.$$.fragment),jn=l(),Kt=r("span"),Hn=s("The Repository class"),kr=l(),g=r("div"),d(Ae.$$.fragment),Vn=l(),Qt=r("p"),An=s("Helper class to wrap the git and git-lfs commands."),Sn=l(),Xt=r("p"),qn=s(`The aim is to facilitate interacting with huggingface.co hosted model or
dataset repos, though not a lot here (if any) is actually specific to
huggingface.co.`),Un=l(),k=r("div"),d(Se.$$.fragment),Mn=l(),Yt=r("p"),Wn=s("Instantiate a local clone of a git repo."),Bn=l(),q=r("p"),Gn=s("If specifying a "),Zt=r("code"),zn=s("clone_from"),Jn=s(`, it will clone an existing remote
repository, for instance one that was previously created using
`),eo=r("code"),Kn=s("HfApi().create_repo(repo_id=repo_name)"),Qn=s("."),Xn=l(),x=r("p"),to=r("code"),Yn=s("Repository"),Zn=s(` uses the local git credentials by default, but if required,
the `),oo=r("code"),ea=s("huggingface_token"),ta=s(" as well as the git "),ro=r("code"),oa=s("user"),ra=s(" and the "),no=r("code"),na=s("email"),aa=s(` can be
explicitly specified.`),sa=l(),ae=r("div"),d(qe.$$.fragment),ia=l(),ao=r("p"),la=s("Returns the current checked out branch."),ca=l(),D=r("div"),d(Ue.$$.fragment),ga=l(),so=r("p"),ha=s("Add a tag at the current head and push it"),pa=l(),io=r("p"),da=s("If remote is None, will just be updated locally"),ua=l(),lo=r("p"),ma=s(`If no message is provided, the tag will be lightweight. if a message is
provided, the tag will be annotated.`),fa=l(),se=r("div"),d(Me.$$.fragment),_a=l(),co=r("p"),ba=s(`Automatically track large files (files that weigh more than 10MBs) with
git-lfs.`),ya=l(),ie=r("div"),d(We.$$.fragment),va=l(),U=r("p"),$a=s("Checks that "),go=r("code"),wa=s("git"),Ea=s(" and "),ho=r("code"),ka=s("git-lfs"),xa=s(" can be run."),Da=l(),C=r("div"),d(Be.$$.fragment),Ra=l(),po=r("p"),Ta=s(`Clone from a remote. If the folder already exists, will try to clone the
repository within it.`),Pa=l(),uo=r("p"),Ia=s(`If this folder is a git repository with linked history, will try to
update the repository.`),Oa=l(),R=r("div"),d(Ge.$$.fragment),La=l(),M=r("p"),Ca=s(`Context manager utility to handle committing to a repository. This
automatically tracks large files (>10Mb) with git-lfs. Set the
`),mo=r("code"),Fa=s("track_large_files"),Na=s(" argument to "),fo=r("code"),ja=s("False"),Ha=s(` if you wish to ignore that
behavior.`),Va=l(),_o=r("p"),Aa=s("Examples:"),Sa=l(),d(ze.$$.fragment),qa=l(),le=r("div"),d(Je.$$.fragment),Ua=l(),bo=r("p"),Ma=s("Delete a tag, both local and remote, if it exists"),Wa=l(),F=r("div"),d(Ke.$$.fragment),Ba=l(),yo=r("p"),Ga=s("git add"),za=l(),I=r("p"),Ja=s("Setting the "),vo=r("code"),Ka=s("auto_lfs_track"),Qa=s(" parameter to "),$o=r("code"),Xa=s("True"),Ya=s(` will automatically
track files that are larger than 10MB with `),wo=r("code"),Za=s("git-lfs"),es=s("."),ts=l(),N=r("div"),d(Qe.$$.fragment),os=l(),Eo=r("p"),rs=s("git checkout a given revision"),ns=l(),W=r("p"),as=s("Specifying "),ko=r("code"),ss=s("create_branch_ok"),is=s(" to "),xo=r("code"),ls=s("True"),cs=s(` will create the branch to the
given revision if that revision doesn\u2019t exist.`),gs=l(),ce=r("div"),d(Xe.$$.fragment),hs=l(),Do=r("p"),ps=s("git commit"),ds=l(),ge=r("div"),d(Ye.$$.fragment),us=l(),Ro=r("p"),ms=s("Sets git username and email (only in the current repo)."),fs=l(),he=r("div"),d(Ze.$$.fragment),_s=l(),Pt=r("p"),bs=s("Sets the git credential helper to "),To=r("code"),ys=s("store"),vs=l(),pe=r("div"),d(et.$$.fragment),$s=l(),Po=r("p"),ws=s(`Get URL to last commit on HEAD. We assume it\u2019s been pushed, and the url
scheme is the same one as for GitHub or HuggingFace.`),Es=l(),de=r("div"),d(tt.$$.fragment),ks=l(),Io=r("p"),xs=s("Get commit sha on top of HEAD."),Ds=l(),ue=r("div"),d(ot.$$.fragment),Rs=l(),Oo=r("p"),Ts=s("git pull"),Ps=l(),j=r("div"),d(rt.$$.fragment),Is=l(),Lo=r("p"),Os=s("git push"),Ls=l(),B=r("p"),Cs=s("If used without setting "),Co=r("code"),Fs=s("blocking"),Ns=s(`, will return url to commit on remote
repo. If used with `),Fo=r("code"),js=s("blocking=True"),Hs=s(`, will return a tuple containing the
url to commit and the command object to follow for information about the
process.`),Vs=l(),me=r("div"),d(nt.$$.fragment),As=l(),No=r("p"),Ss=s("Get URL to origin remote."),qs=l(),fe=r("div"),d(at.$$.fragment),Us=l(),jo=r("p"),Ms=s("Return whether or not the git status is clean or not"),Ws=l(),_e=r("div"),d(st.$$.fragment),Bs=l(),Ho=r("p"),Gs=s("HF-specific. This enables upload support of files >5GB."),zs=l(),be=r("div"),d(it.$$.fragment),Js=l(),Vo=r("p"),Ks=s("git lfs prune"),Qs=l(),H=r("div"),d(lt.$$.fragment),Xs=l(),Ao=r("p"),Ys=s("Tell git-lfs to track files according to a pattern."),Zs=l(),O=r("p"),ei=s("Setting the "),So=r("code"),ti=s("filename"),oi=s(" argument to "),qo=r("code"),ri=s("True"),ni=s(` will treat the arguments as
literal filenames, not as patterns. Any special glob characters in the
filename will be escaped when writing to the `),Uo=r("code"),ai=s(".gitattributes"),si=s(" file."),ii=l(),ye=r("div"),d(ct.$$.fragment),li=l(),Mo=r("p"),ci=s("Tell git-lfs to untrack those files."),gi=l(),ve=r("div"),d(gt.$$.fragment),hi=l(),Wo=r("p"),pi=s(`Returns a list of the files that are deleted in the working directory or
index.`),di=l(),$e=r("div"),d(ht.$$.fragment),ui=l(),Bo=r("p"),mi=s(`Helper to add, commit, and push files to remote repository on the
HuggingFace Hub. Will automatically track large files (>10MB).`),fi=l(),we=r("div"),d(pt.$$.fragment),_i=l(),Go=r("p"),bi=s("Check if a tag exists or not."),yi=l(),Ee=r("div"),d(dt.$$.fragment),vi=l(),zo=r("p"),$i=s(`Blocking method: blocks all subsequent execution until all commands have
been processed.`),xr=l(),G=r("h2"),ke=r("a"),Jo=r("span"),d(ut.$$.fragment),wi=l(),Ko=r("span"),Ei=s("Helper methods"),Dr=l(),z=r("div"),d(mt.$$.fragment),ki=l(),Qo=r("p"),xi=s("Check if the folder is the root or part of a git repository"),Rr=l(),J=r("div"),d(ft.$$.fragment),Di=l(),Xo=r("p"),Ri=s("Check if the folder is a local clone of the remote_url"),Tr=l(),K=r("div"),d(_t.$$.fragment),Ti=l(),Yo=r("p"),Pi=s("Check if the file passed is tracked with git-lfs."),Pr=l(),Q=r("div"),d(bt.$$.fragment),Ii=l(),Zo=r("p"),Oi=s("Check if file is git-ignored. Supports nested .gitignore files."),Ir=l(),X=r("div"),d(yt.$$.fragment),Li=l(),er=r("p"),Ci=s("Returns a list of filenames that are to be staged."),Or=l(),Y=r("div"),d(vt.$$.fragment),Fi=l(),tr=r("p"),Ni=s("Check if the current checked-out branch is tracked upstream."),Lr=l(),L=r("div"),d($t.$$.fragment),ji=l(),or=r("p"),Hi=s("Check the number of commits that would be pushed upstream"),Vi=l(),rr=r("p"),Ai=s(`The name of the upstream repository with which the comparison should be
made.`),Cr=l(),Z=r("h2"),xe=r("a"),nr=r("span"),d(wt.$$.fragment),Si=l(),ar=r("span"),qi=s("Following asynchronous commands"),Fr=l(),De=r("p"),Ui=s("The "),sr=r("code"),Mi=s("Repository"),Wi=s(" utility offers several methods which can be launched asynchronously:"),Nr=l(),T=r("ul"),ir=r("li"),lr=r("code"),Bi=s("git_push"),Gi=l(),cr=r("li"),gr=r("code"),zi=s("git_pull"),Ji=l(),hr=r("li"),pr=r("code"),Ki=s("push_to_hub"),Qi=l(),Et=r("li"),Xi=s("The "),dr=r("code"),Yi=s("commit"),Zi=s(" context manager"),jr=l(),It=r("p"),el=s("See below for utilities to manage such asynchronous methods."),Hr=l(),w=r("div"),d(kt.$$.fragment),tl=l(),ur=r("p"),ol=s("Helper class to wrap the git and git-lfs commands."),rl=l(),mr=r("p"),nl=s(`The aim is to facilitate interacting with huggingface.co hosted model or
dataset repos, though not a lot here (if any) is actually specific to
huggingface.co.`),al=l(),Re=r("div"),d(xt.$$.fragment),sl=l(),fr=r("p"),il=s("Returns the asynchronous commands that failed."),ll=l(),Te=r("div"),d(Dt.$$.fragment),cl=l(),_r=r("p"),gl=s("Returns the asynchronous commands that are currently in progress."),hl=l(),Pe=r("div"),d(Rt.$$.fragment),pl=l(),br=r("p"),dl=s(`Blocking method: blocks all subsequent execution until all commands have
been processed.`),Vr=l(),ee=r("div"),d(Tt.$$.fragment),ul=l(),yr=r("p"),ml=s("Utility to follow commands launched asynchronously."),this.h()},l(t){const y=rg('[data-svelte="svelte-1phssyn"]',document.head);V=n(y,"META",{name:!0,content:!0}),y.forEach(o),vr=c(t),A=n(t,"H1",{class:!0});var Sr=a(A);oe=n(Sr,"A",{id:!0,class:!0,href:!0});var bl=a(oe);Ut=n(bl,"SPAN",{});var yl=a(Ut);u(He.$$.fragment,yl),yl.forEach(o),bl.forEach(o),kn=c(Sr),Mt=n(Sr,"SPAN",{});var vl=a(Mt);xn=i(vl,"Managing local and online repositories"),vl.forEach(o),Sr.forEach(o),$r=c(t),E=n(t,"P",{});var Ie=a(E);Dn=i(Ie,"The "),Wt=n(Ie,"CODE",{});var $l=a(Wt);Rn=i($l,"Repository"),$l.forEach(o),Tn=i(Ie," class is a helper class that wraps "),Bt=n(Ie,"CODE",{});var wl=a(Bt);Pn=i(wl,"git"),wl.forEach(o),In=i(Ie," and "),Gt=n(Ie,"CODE",{});var El=a(Gt);On=i(El,"git-lfs"),El.forEach(o),Ln=i(Ie,` commands. It provides tooling adapted
for managing repositories which can be very large.`),Ie.forEach(o),wr=c(t),re=n(t,"P",{});var qr=a(re);Cn=i(qr,"It is the recommended tool as soon as any "),zt=n(qr,"CODE",{});var kl=a(zt);Fn=i(kl,"git"),kl.forEach(o),Nn=i(qr,` operation is involved, or when collaboration will be a point
of focus with the repository itself.`),qr.forEach(o),Er=c(t),S=n(t,"H2",{class:!0});var Ur=a(S);ne=n(Ur,"A",{id:!0,class:!0,href:!0});var xl=a(ne);Jt=n(xl,"SPAN",{});var Dl=a(Jt);u(Ve.$$.fragment,Dl),Dl.forEach(o),xl.forEach(o),jn=c(Ur),Kt=n(Ur,"SPAN",{});var Rl=a(Kt);Hn=i(Rl,"The Repository class"),Rl.forEach(o),Ur.forEach(o),kr=c(t),g=n(t,"DIV",{class:!0});var h=a(g);u(Ae.$$.fragment,h),Vn=c(h),Qt=n(h,"P",{});var Tl=a(Qt);An=i(Tl,"Helper class to wrap the git and git-lfs commands."),Tl.forEach(o),Sn=c(h),Xt=n(h,"P",{});var Pl=a(Xt);qn=i(Pl,`The aim is to facilitate interacting with huggingface.co hosted model or
dataset repos, though not a lot here (if any) is actually specific to
huggingface.co.`),Pl.forEach(o),Un=c(h),k=n(h,"DIV",{class:!0});var Oe=a(k);u(Se.$$.fragment,Oe),Mn=c(Oe),Yt=n(Oe,"P",{});var Il=a(Yt);Wn=i(Il,"Instantiate a local clone of a git repo."),Il.forEach(o),Bn=c(Oe),q=n(Oe,"P",{});var Ot=a(q);Gn=i(Ot,"If specifying a "),Zt=n(Ot,"CODE",{});var Ol=a(Zt);zn=i(Ol,"clone_from"),Ol.forEach(o),Jn=i(Ot,`, it will clone an existing remote
repository, for instance one that was previously created using
`),eo=n(Ot,"CODE",{});var Ll=a(eo);Kn=i(Ll,"HfApi().create_repo(repo_id=repo_name)"),Ll.forEach(o),Qn=i(Ot,"."),Ot.forEach(o),Xn=c(Oe),x=n(Oe,"P",{});var te=a(x);to=n(te,"CODE",{});var Cl=a(to);Yn=i(Cl,"Repository"),Cl.forEach(o),Zn=i(te,` uses the local git credentials by default, but if required,
the `),oo=n(te,"CODE",{});var Fl=a(oo);ea=i(Fl,"huggingface_token"),Fl.forEach(o),ta=i(te," as well as the git "),ro=n(te,"CODE",{});var Nl=a(ro);oa=i(Nl,"user"),Nl.forEach(o),ra=i(te," and the "),no=n(te,"CODE",{});var jl=a(no);na=i(jl,"email"),jl.forEach(o),aa=i(te,` can be
explicitly specified.`),te.forEach(o),Oe.forEach(o),sa=c(h),ae=n(h,"DIV",{class:!0});var Mr=a(ae);u(qe.$$.fragment,Mr),ia=c(Mr),ao=n(Mr,"P",{});var Hl=a(ao);la=i(Hl,"Returns the current checked out branch."),Hl.forEach(o),Mr.forEach(o),ca=c(h),D=n(h,"DIV",{class:!0});var Le=a(D);u(Ue.$$.fragment,Le),ga=c(Le),so=n(Le,"P",{});var Vl=a(so);ha=i(Vl,"Add a tag at the current head and push it"),Vl.forEach(o),pa=c(Le),io=n(Le,"P",{});var Al=a(io);da=i(Al,"If remote is None, will just be updated locally"),Al.forEach(o),ua=c(Le),lo=n(Le,"P",{});var Sl=a(lo);ma=i(Sl,`If no message is provided, the tag will be lightweight. if a message is
provided, the tag will be annotated.`),Sl.forEach(o),Le.forEach(o),fa=c(h),se=n(h,"DIV",{class:!0});var Wr=a(se);u(Me.$$.fragment,Wr),_a=c(Wr),co=n(Wr,"P",{});var ql=a(co);ba=i(ql,`Automatically track large files (files that weigh more than 10MBs) with
git-lfs.`),ql.forEach(o),Wr.forEach(o),ya=c(h),ie=n(h,"DIV",{class:!0});var Br=a(ie);u(We.$$.fragment,Br),va=c(Br),U=n(Br,"P",{});var Lt=a(U);$a=i(Lt,"Checks that "),go=n(Lt,"CODE",{});var Ul=a(go);wa=i(Ul,"git"),Ul.forEach(o),Ea=i(Lt," and "),ho=n(Lt,"CODE",{});var Ml=a(ho);ka=i(Ml,"git-lfs"),Ml.forEach(o),xa=i(Lt," can be run."),Lt.forEach(o),Br.forEach(o),Da=c(h),C=n(h,"DIV",{class:!0});var Ct=a(C);u(Be.$$.fragment,Ct),Ra=c(Ct),po=n(Ct,"P",{});var Wl=a(po);Ta=i(Wl,`Clone from a remote. If the folder already exists, will try to clone the
repository within it.`),Wl.forEach(o),Pa=c(Ct),uo=n(Ct,"P",{});var Bl=a(uo);Ia=i(Bl,`If this folder is a git repository with linked history, will try to
update the repository.`),Bl.forEach(o),Ct.forEach(o),Oa=c(h),R=n(h,"DIV",{class:!0});var Ce=a(R);u(Ge.$$.fragment,Ce),La=c(Ce),M=n(Ce,"P",{});var Ft=a(M);Ca=i(Ft,`Context manager utility to handle committing to a repository. This
automatically tracks large files (>10Mb) with git-lfs. Set the
`),mo=n(Ft,"CODE",{});var Gl=a(mo);Fa=i(Gl,"track_large_files"),Gl.forEach(o),Na=i(Ft," argument to "),fo=n(Ft,"CODE",{});var zl=a(fo);ja=i(zl,"False"),zl.forEach(o),Ha=i(Ft,` if you wish to ignore that
behavior.`),Ft.forEach(o),Va=c(Ce),_o=n(Ce,"P",{});var Jl=a(_o);Aa=i(Jl,"Examples:"),Jl.forEach(o),Sa=c(Ce),u(ze.$$.fragment,Ce),Ce.forEach(o),qa=c(h),le=n(h,"DIV",{class:!0});var Gr=a(le);u(Je.$$.fragment,Gr),Ua=c(Gr),bo=n(Gr,"P",{});var Kl=a(bo);Ma=i(Kl,"Delete a tag, both local and remote, if it exists"),Kl.forEach(o),Gr.forEach(o),Wa=c(h),F=n(h,"DIV",{class:!0});var Nt=a(F);u(Ke.$$.fragment,Nt),Ba=c(Nt),yo=n(Nt,"P",{});var Ql=a(yo);Ga=i(Ql,"git add"),Ql.forEach(o),za=c(Nt),I=n(Nt,"P",{});var Fe=a(I);Ja=i(Fe,"Setting the "),vo=n(Fe,"CODE",{});var Xl=a(vo);Ka=i(Xl,"auto_lfs_track"),Xl.forEach(o),Qa=i(Fe," parameter to "),$o=n(Fe,"CODE",{});var Yl=a($o);Xa=i(Yl,"True"),Yl.forEach(o),Ya=i(Fe,` will automatically
track files that are larger than 10MB with `),wo=n(Fe,"CODE",{});var Zl=a(wo);Za=i(Zl,"git-lfs"),Zl.forEach(o),es=i(Fe,"."),Fe.forEach(o),Nt.forEach(o),ts=c(h),N=n(h,"DIV",{class:!0});var jt=a(N);u(Qe.$$.fragment,jt),os=c(jt),Eo=n(jt,"P",{});var ec=a(Eo);rs=i(ec,"git checkout a given revision"),ec.forEach(o),ns=c(jt),W=n(jt,"P",{});var Ht=a(W);as=i(Ht,"Specifying "),ko=n(Ht,"CODE",{});var tc=a(ko);ss=i(tc,"create_branch_ok"),tc.forEach(o),is=i(Ht," to "),xo=n(Ht,"CODE",{});var oc=a(xo);ls=i(oc,"True"),oc.forEach(o),cs=i(Ht,` will create the branch to the
given revision if that revision doesn\u2019t exist.`),Ht.forEach(o),jt.forEach(o),gs=c(h),ce=n(h,"DIV",{class:!0});var zr=a(ce);u(Xe.$$.fragment,zr),hs=c(zr),Do=n(zr,"P",{});var rc=a(Do);ps=i(rc,"git commit"),rc.forEach(o),zr.forEach(o),ds=c(h),ge=n(h,"DIV",{class:!0});var Jr=a(ge);u(Ye.$$.fragment,Jr),us=c(Jr),Ro=n(Jr,"P",{});var nc=a(Ro);ms=i(nc,"Sets git username and email (only in the current repo)."),nc.forEach(o),Jr.forEach(o),fs=c(h),he=n(h,"DIV",{class:!0});var Kr=a(he);u(Ze.$$.fragment,Kr),_s=c(Kr),Pt=n(Kr,"P",{});var fl=a(Pt);bs=i(fl,"Sets the git credential helper to "),To=n(fl,"CODE",{});var ac=a(To);ys=i(ac,"store"),ac.forEach(o),fl.forEach(o),Kr.forEach(o),vs=c(h),pe=n(h,"DIV",{class:!0});var Qr=a(pe);u(et.$$.fragment,Qr),$s=c(Qr),Po=n(Qr,"P",{});var sc=a(Po);ws=i(sc,`Get URL to last commit on HEAD. We assume it\u2019s been pushed, and the url
scheme is the same one as for GitHub or HuggingFace.`),sc.forEach(o),Qr.forEach(o),Es=c(h),de=n(h,"DIV",{class:!0});var Xr=a(de);u(tt.$$.fragment,Xr),ks=c(Xr),Io=n(Xr,"P",{});var ic=a(Io);xs=i(ic,"Get commit sha on top of HEAD."),ic.forEach(o),Xr.forEach(o),Ds=c(h),ue=n(h,"DIV",{class:!0});var Yr=a(ue);u(ot.$$.fragment,Yr),Rs=c(Yr),Oo=n(Yr,"P",{});var lc=a(Oo);Ts=i(lc,"git pull"),lc.forEach(o),Yr.forEach(o),Ps=c(h),j=n(h,"DIV",{class:!0});var Vt=a(j);u(rt.$$.fragment,Vt),Is=c(Vt),Lo=n(Vt,"P",{});var cc=a(Lo);Os=i(cc,"git push"),cc.forEach(o),Ls=c(Vt),B=n(Vt,"P",{});var At=a(B);Cs=i(At,"If used without setting "),Co=n(At,"CODE",{});var gc=a(Co);Fs=i(gc,"blocking"),gc.forEach(o),Ns=i(At,`, will return url to commit on remote
repo. If used with `),Fo=n(At,"CODE",{});var hc=a(Fo);js=i(hc,"blocking=True"),hc.forEach(o),Hs=i(At,`, will return a tuple containing the
url to commit and the command object to follow for information about the
process.`),At.forEach(o),Vt.forEach(o),Vs=c(h),me=n(h,"DIV",{class:!0});var Zr=a(me);u(nt.$$.fragment,Zr),As=c(Zr),No=n(Zr,"P",{});var pc=a(No);Ss=i(pc,"Get URL to origin remote."),pc.forEach(o),Zr.forEach(o),qs=c(h),fe=n(h,"DIV",{class:!0});var en=a(fe);u(at.$$.fragment,en),Us=c(en),jo=n(en,"P",{});var dc=a(jo);Ms=i(dc,"Return whether or not the git status is clean or not"),dc.forEach(o),en.forEach(o),Ws=c(h),_e=n(h,"DIV",{class:!0});var tn=a(_e);u(st.$$.fragment,tn),Bs=c(tn),Ho=n(tn,"P",{});var uc=a(Ho);Gs=i(uc,"HF-specific. This enables upload support of files >5GB."),uc.forEach(o),tn.forEach(o),zs=c(h),be=n(h,"DIV",{class:!0});var on=a(be);u(it.$$.fragment,on),Js=c(on),Vo=n(on,"P",{});var mc=a(Vo);Ks=i(mc,"git lfs prune"),mc.forEach(o),on.forEach(o),Qs=c(h),H=n(h,"DIV",{class:!0});var St=a(H);u(lt.$$.fragment,St),Xs=c(St),Ao=n(St,"P",{});var fc=a(Ao);Ys=i(fc,"Tell git-lfs to track files according to a pattern."),fc.forEach(o),Zs=c(St),O=n(St,"P",{});var Ne=a(O);ei=i(Ne,"Setting the "),So=n(Ne,"CODE",{});var _c=a(So);ti=i(_c,"filename"),_c.forEach(o),oi=i(Ne," argument to "),qo=n(Ne,"CODE",{});var bc=a(qo);ri=i(bc,"True"),bc.forEach(o),ni=i(Ne,` will treat the arguments as
literal filenames, not as patterns. Any special glob characters in the
filename will be escaped when writing to the `),Uo=n(Ne,"CODE",{});var yc=a(Uo);ai=i(yc,".gitattributes"),yc.forEach(o),si=i(Ne," file."),Ne.forEach(o),St.forEach(o),ii=c(h),ye=n(h,"DIV",{class:!0});var rn=a(ye);u(ct.$$.fragment,rn),li=c(rn),Mo=n(rn,"P",{});var vc=a(Mo);ci=i(vc,"Tell git-lfs to untrack those files."),vc.forEach(o),rn.forEach(o),gi=c(h),ve=n(h,"DIV",{class:!0});var nn=a(ve);u(gt.$$.fragment,nn),hi=c(nn),Wo=n(nn,"P",{});var $c=a(Wo);pi=i($c,`Returns a list of the files that are deleted in the working directory or
index.`),$c.forEach(o),nn.forEach(o),di=c(h),$e=n(h,"DIV",{class:!0});var an=a($e);u(ht.$$.fragment,an),ui=c(an),Bo=n(an,"P",{});var wc=a(Bo);mi=i(wc,`Helper to add, commit, and push files to remote repository on the
HuggingFace Hub. Will automatically track large files (>10MB).`),wc.forEach(o),an.forEach(o),fi=c(h),we=n(h,"DIV",{class:!0});var sn=a(we);u(pt.$$.fragment,sn),_i=c(sn),Go=n(sn,"P",{});var Ec=a(Go);bi=i(Ec,"Check if a tag exists or not."),Ec.forEach(o),sn.forEach(o),yi=c(h),Ee=n(h,"DIV",{class:!0});var ln=a(Ee);u(dt.$$.fragment,ln),vi=c(ln),zo=n(ln,"P",{});var kc=a(zo);$i=i(kc,`Blocking method: blocks all subsequent execution until all commands have
been processed.`),kc.forEach(o),ln.forEach(o),h.forEach(o),xr=c(t),G=n(t,"H2",{class:!0});var cn=a(G);ke=n(cn,"A",{id:!0,class:!0,href:!0});var xc=a(ke);Jo=n(xc,"SPAN",{});var Dc=a(Jo);u(ut.$$.fragment,Dc),Dc.forEach(o),xc.forEach(o),wi=c(cn),Ko=n(cn,"SPAN",{});var Rc=a(Ko);Ei=i(Rc,"Helper methods"),Rc.forEach(o),cn.forEach(o),Dr=c(t),z=n(t,"DIV",{class:!0});var gn=a(z);u(mt.$$.fragment,gn),ki=c(gn),Qo=n(gn,"P",{});var Tc=a(Qo);xi=i(Tc,"Check if the folder is the root or part of a git repository"),Tc.forEach(o),gn.forEach(o),Rr=c(t),J=n(t,"DIV",{class:!0});var hn=a(J);u(ft.$$.fragment,hn),Di=c(hn),Xo=n(hn,"P",{});var Pc=a(Xo);Ri=i(Pc,"Check if the folder is a local clone of the remote_url"),Pc.forEach(o),hn.forEach(o),Tr=c(t),K=n(t,"DIV",{class:!0});var pn=a(K);u(_t.$$.fragment,pn),Ti=c(pn),Yo=n(pn,"P",{});var Ic=a(Yo);Pi=i(Ic,"Check if the file passed is tracked with git-lfs."),Ic.forEach(o),pn.forEach(o),Pr=c(t),Q=n(t,"DIV",{class:!0});var dn=a(Q);u(bt.$$.fragment,dn),Ii=c(dn),Zo=n(dn,"P",{});var Oc=a(Zo);Oi=i(Oc,"Check if file is git-ignored. Supports nested .gitignore files."),Oc.forEach(o),dn.forEach(o),Ir=c(t),X=n(t,"DIV",{class:!0});var un=a(X);u(yt.$$.fragment,un),Li=c(un),er=n(un,"P",{});var Lc=a(er);Ci=i(Lc,"Returns a list of filenames that are to be staged."),Lc.forEach(o),un.forEach(o),Or=c(t),Y=n(t,"DIV",{class:!0});var mn=a(Y);u(vt.$$.fragment,mn),Fi=c(mn),tr=n(mn,"P",{});var Cc=a(tr);Ni=i(Cc,"Check if the current checked-out branch is tracked upstream."),Cc.forEach(o),mn.forEach(o),Lr=c(t),L=n(t,"DIV",{class:!0});var qt=a(L);u($t.$$.fragment,qt),ji=c(qt),or=n(qt,"P",{});var Fc=a(or);Hi=i(Fc,"Check the number of commits that would be pushed upstream"),Fc.forEach(o),Vi=c(qt),rr=n(qt,"P",{});var Nc=a(rr);Ai=i(Nc,`The name of the upstream repository with which the comparison should be
made.`),Nc.forEach(o),qt.forEach(o),Cr=c(t),Z=n(t,"H2",{class:!0});var fn=a(Z);xe=n(fn,"A",{id:!0,class:!0,href:!0});var jc=a(xe);nr=n(jc,"SPAN",{});var Hc=a(nr);u(wt.$$.fragment,Hc),Hc.forEach(o),jc.forEach(o),Si=c(fn),ar=n(fn,"SPAN",{});var Vc=a(ar);qi=i(Vc,"Following asynchronous commands"),Vc.forEach(o),fn.forEach(o),Fr=c(t),De=n(t,"P",{});var _n=a(De);Ui=i(_n,"The "),sr=n(_n,"CODE",{});var Ac=a(sr);Mi=i(Ac,"Repository"),Ac.forEach(o),Wi=i(_n," utility offers several methods which can be launched asynchronously:"),_n.forEach(o),Nr=c(t),T=n(t,"UL",{});var je=a(T);ir=n(je,"LI",{});var Sc=a(ir);lr=n(Sc,"CODE",{});var qc=a(lr);Bi=i(qc,"git_push"),qc.forEach(o),Sc.forEach(o),Gi=c(je),cr=n(je,"LI",{});var Uc=a(cr);gr=n(Uc,"CODE",{});var Mc=a(gr);zi=i(Mc,"git_pull"),Mc.forEach(o),Uc.forEach(o),Ji=c(je),hr=n(je,"LI",{});var Wc=a(hr);pr=n(Wc,"CODE",{});var Bc=a(pr);Ki=i(Bc,"push_to_hub"),Bc.forEach(o),Wc.forEach(o),Qi=c(je),Et=n(je,"LI",{});var bn=a(Et);Xi=i(bn,"The "),dr=n(bn,"CODE",{});var Gc=a(dr);Yi=i(Gc,"commit"),Gc.forEach(o),Zi=i(bn," context manager"),bn.forEach(o),je.forEach(o),jr=c(t),It=n(t,"P",{});var zc=a(It);el=i(zc,"See below for utilities to manage such asynchronous methods."),zc.forEach(o),Hr=c(t),w=n(t,"DIV",{class:!0});var P=a(w);u(kt.$$.fragment,P),tl=c(P),ur=n(P,"P",{});var Jc=a(ur);ol=i(Jc,"Helper class to wrap the git and git-lfs commands."),Jc.forEach(o),rl=c(P),mr=n(P,"P",{});var Kc=a(mr);nl=i(Kc,`The aim is to facilitate interacting with huggingface.co hosted model or
dataset repos, though not a lot here (if any) is actually specific to
huggingface.co.`),Kc.forEach(o),al=c(P),Re=n(P,"DIV",{class:!0});var yn=a(Re);u(xt.$$.fragment,yn),sl=c(yn),fr=n(yn,"P",{});var Qc=a(fr);il=i(Qc,"Returns the asynchronous commands that failed."),Qc.forEach(o),yn.forEach(o),ll=c(P),Te=n(P,"DIV",{class:!0});var vn=a(Te);u(Dt.$$.fragment,vn),cl=c(vn),_r=n(vn,"P",{});var Xc=a(_r);gl=i(Xc,"Returns the asynchronous commands that are currently in progress."),Xc.forEach(o),vn.forEach(o),hl=c(P),Pe=n(P,"DIV",{class:!0});var $n=a(Pe);u(Rt.$$.fragment,$n),pl=c($n),br=n($n,"P",{});var Yc=a(br);dl=i(Yc,`Blocking method: blocks all subsequent execution until all commands have
been processed.`),Yc.forEach(o),$n.forEach(o),P.forEach(o),Vr=c(t),ee=n(t,"DIV",{class:!0});var wn=a(ee);u(Tt.$$.fragment,wn),ul=c(wn),yr=n(wn,"P",{});var Zc=a(yr);ml=i(Zc,"Utility to follow commands launched asynchronously."),Zc.forEach(o),wn.forEach(o),this.h()},h(){p(V,"name","hf:doc:metadata"),p(V,"content",JSON.stringify(lg)),p(oe,"id","managing-local-and-online-repositories"),p(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(oe,"href","#managing-local-and-online-repositories"),p(A,"class","relative group"),p(ne,"id","huggingface_hub.Repository"),p(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ne,"href","#huggingface_hub.Repository"),p(S,"class","relative group"),p(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ke,"id","huggingface_hub.repository.is_git_repo"),p(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ke,"href","#huggingface_hub.repository.is_git_repo"),p(G,"class","relative group"),p(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(xe,"id","huggingface_hub.Repository"),p(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(xe,"href","#huggingface_hub.Repository"),p(Z,"class","relative group"),p(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(w,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,y){e(document.head,V),$(t,vr,y),$(t,A,y),e(A,oe),e(oe,Ut),m(He,Ut,null),e(A,kn),e(A,Mt),e(Mt,xn),$(t,$r,y),$(t,E,y),e(E,Dn),e(E,Wt),e(Wt,Rn),e(E,Tn),e(E,Bt),e(Bt,Pn),e(E,In),e(E,Gt),e(Gt,On),e(E,Ln),$(t,wr,y),$(t,re,y),e(re,Cn),e(re,zt),e(zt,Fn),e(re,Nn),$(t,Er,y),$(t,S,y),e(S,ne),e(ne,Jt),m(Ve,Jt,null),e(S,jn),e(S,Kt),e(Kt,Hn),$(t,kr,y),$(t,g,y),m(Ae,g,null),e(g,Vn),e(g,Qt),e(Qt,An),e(g,Sn),e(g,Xt),e(Xt,qn),e(g,Un),e(g,k),m(Se,k,null),e(k,Mn),e(k,Yt),e(Yt,Wn),e(k,Bn),e(k,q),e(q,Gn),e(q,Zt),e(Zt,zn),e(q,Jn),e(q,eo),e(eo,Kn),e(q,Qn),e(k,Xn),e(k,x),e(x,to),e(to,Yn),e(x,Zn),e(x,oo),e(oo,ea),e(x,ta),e(x,ro),e(ro,oa),e(x,ra),e(x,no),e(no,na),e(x,aa),e(g,sa),e(g,ae),m(qe,ae,null),e(ae,ia),e(ae,ao),e(ao,la),e(g,ca),e(g,D),m(Ue,D,null),e(D,ga),e(D,so),e(so,ha),e(D,pa),e(D,io),e(io,da),e(D,ua),e(D,lo),e(lo,ma),e(g,fa),e(g,se),m(Me,se,null),e(se,_a),e(se,co),e(co,ba),e(g,ya),e(g,ie),m(We,ie,null),e(ie,va),e(ie,U),e(U,$a),e(U,go),e(go,wa),e(U,Ea),e(U,ho),e(ho,ka),e(U,xa),e(g,Da),e(g,C),m(Be,C,null),e(C,Ra),e(C,po),e(po,Ta),e(C,Pa),e(C,uo),e(uo,Ia),e(g,Oa),e(g,R),m(Ge,R,null),e(R,La),e(R,M),e(M,Ca),e(M,mo),e(mo,Fa),e(M,Na),e(M,fo),e(fo,ja),e(M,Ha),e(R,Va),e(R,_o),e(_o,Aa),e(R,Sa),m(ze,R,null),e(g,qa),e(g,le),m(Je,le,null),e(le,Ua),e(le,bo),e(bo,Ma),e(g,Wa),e(g,F),m(Ke,F,null),e(F,Ba),e(F,yo),e(yo,Ga),e(F,za),e(F,I),e(I,Ja),e(I,vo),e(vo,Ka),e(I,Qa),e(I,$o),e($o,Xa),e(I,Ya),e(I,wo),e(wo,Za),e(I,es),e(g,ts),e(g,N),m(Qe,N,null),e(N,os),e(N,Eo),e(Eo,rs),e(N,ns),e(N,W),e(W,as),e(W,ko),e(ko,ss),e(W,is),e(W,xo),e(xo,ls),e(W,cs),e(g,gs),e(g,ce),m(Xe,ce,null),e(ce,hs),e(ce,Do),e(Do,ps),e(g,ds),e(g,ge),m(Ye,ge,null),e(ge,us),e(ge,Ro),e(Ro,ms),e(g,fs),e(g,he),m(Ze,he,null),e(he,_s),e(he,Pt),e(Pt,bs),e(Pt,To),e(To,ys),e(g,vs),e(g,pe),m(et,pe,null),e(pe,$s),e(pe,Po),e(Po,ws),e(g,Es),e(g,de),m(tt,de,null),e(de,ks),e(de,Io),e(Io,xs),e(g,Ds),e(g,ue),m(ot,ue,null),e(ue,Rs),e(ue,Oo),e(Oo,Ts),e(g,Ps),e(g,j),m(rt,j,null),e(j,Is),e(j,Lo),e(Lo,Os),e(j,Ls),e(j,B),e(B,Cs),e(B,Co),e(Co,Fs),e(B,Ns),e(B,Fo),e(Fo,js),e(B,Hs),e(g,Vs),e(g,me),m(nt,me,null),e(me,As),e(me,No),e(No,Ss),e(g,qs),e(g,fe),m(at,fe,null),e(fe,Us),e(fe,jo),e(jo,Ms),e(g,Ws),e(g,_e),m(st,_e,null),e(_e,Bs),e(_e,Ho),e(Ho,Gs),e(g,zs),e(g,be),m(it,be,null),e(be,Js),e(be,Vo),e(Vo,Ks),e(g,Qs),e(g,H),m(lt,H,null),e(H,Xs),e(H,Ao),e(Ao,Ys),e(H,Zs),e(H,O),e(O,ei),e(O,So),e(So,ti),e(O,oi),e(O,qo),e(qo,ri),e(O,ni),e(O,Uo),e(Uo,ai),e(O,si),e(g,ii),e(g,ye),m(ct,ye,null),e(ye,li),e(ye,Mo),e(Mo,ci),e(g,gi),e(g,ve),m(gt,ve,null),e(ve,hi),e(ve,Wo),e(Wo,pi),e(g,di),e(g,$e),m(ht,$e,null),e($e,ui),e($e,Bo),e(Bo,mi),e(g,fi),e(g,we),m(pt,we,null),e(we,_i),e(we,Go),e(Go,bi),e(g,yi),e(g,Ee),m(dt,Ee,null),e(Ee,vi),e(Ee,zo),e(zo,$i),$(t,xr,y),$(t,G,y),e(G,ke),e(ke,Jo),m(ut,Jo,null),e(G,wi),e(G,Ko),e(Ko,Ei),$(t,Dr,y),$(t,z,y),m(mt,z,null),e(z,ki),e(z,Qo),e(Qo,xi),$(t,Rr,y),$(t,J,y),m(ft,J,null),e(J,Di),e(J,Xo),e(Xo,Ri),$(t,Tr,y),$(t,K,y),m(_t,K,null),e(K,Ti),e(K,Yo),e(Yo,Pi),$(t,Pr,y),$(t,Q,y),m(bt,Q,null),e(Q,Ii),e(Q,Zo),e(Zo,Oi),$(t,Ir,y),$(t,X,y),m(yt,X,null),e(X,Li),e(X,er),e(er,Ci),$(t,Or,y),$(t,Y,y),m(vt,Y,null),e(Y,Fi),e(Y,tr),e(tr,Ni),$(t,Lr,y),$(t,L,y),m($t,L,null),e(L,ji),e(L,or),e(or,Hi),e(L,Vi),e(L,rr),e(rr,Ai),$(t,Cr,y),$(t,Z,y),e(Z,xe),e(xe,nr),m(wt,nr,null),e(Z,Si),e(Z,ar),e(ar,qi),$(t,Fr,y),$(t,De,y),e(De,Ui),e(De,sr),e(sr,Mi),e(De,Wi),$(t,Nr,y),$(t,T,y),e(T,ir),e(ir,lr),e(lr,Bi),e(T,Gi),e(T,cr),e(cr,gr),e(gr,zi),e(T,Ji),e(T,hr),e(hr,pr),e(pr,Ki),e(T,Qi),e(T,Et),e(Et,Xi),e(Et,dr),e(dr,Yi),e(Et,Zi),$(t,jr,y),$(t,It,y),e(It,el),$(t,Hr,y),$(t,w,y),m(kt,w,null),e(w,tl),e(w,ur),e(ur,ol),e(w,rl),e(w,mr),e(mr,nl),e(w,al),e(w,Re),m(xt,Re,null),e(Re,sl),e(Re,fr),e(fr,il),e(w,ll),e(w,Te),m(Dt,Te,null),e(Te,cl),e(Te,_r),e(_r,gl),e(w,hl),e(w,Pe),m(Rt,Pe,null),e(Pe,pl),e(Pe,br),e(br,dl),$(t,Vr,y),$(t,ee,y),m(Tt,ee,null),e(ee,ul),e(ee,yr),e(yr,ml),Ar=!0},p:ng,i(t){Ar||(f(He.$$.fragment,t),f(Ve.$$.fragment,t),f(Ae.$$.fragment,t),f(Se.$$.fragment,t),f(qe.$$.fragment,t),f(Ue.$$.fragment,t),f(Me.$$.fragment,t),f(We.$$.fragment,t),f(Be.$$.fragment,t),f(Ge.$$.fragment,t),f(ze.$$.fragment,t),f(Je.$$.fragment,t),f(Ke.$$.fragment,t),f(Qe.$$.fragment,t),f(Xe.$$.fragment,t),f(Ye.$$.fragment,t),f(Ze.$$.fragment,t),f(et.$$.fragment,t),f(tt.$$.fragment,t),f(ot.$$.fragment,t),f(rt.$$.fragment,t),f(nt.$$.fragment,t),f(at.$$.fragment,t),f(st.$$.fragment,t),f(it.$$.fragment,t),f(lt.$$.fragment,t),f(ct.$$.fragment,t),f(gt.$$.fragment,t),f(ht.$$.fragment,t),f(pt.$$.fragment,t),f(dt.$$.fragment,t),f(ut.$$.fragment,t),f(mt.$$.fragment,t),f(ft.$$.fragment,t),f(_t.$$.fragment,t),f(bt.$$.fragment,t),f(yt.$$.fragment,t),f(vt.$$.fragment,t),f($t.$$.fragment,t),f(wt.$$.fragment,t),f(kt.$$.fragment,t),f(xt.$$.fragment,t),f(Dt.$$.fragment,t),f(Rt.$$.fragment,t),f(Tt.$$.fragment,t),Ar=!0)},o(t){_(He.$$.fragment,t),_(Ve.$$.fragment,t),_(Ae.$$.fragment,t),_(Se.$$.fragment,t),_(qe.$$.fragment,t),_(Ue.$$.fragment,t),_(Me.$$.fragment,t),_(We.$$.fragment,t),_(Be.$$.fragment,t),_(Ge.$$.fragment,t),_(ze.$$.fragment,t),_(Je.$$.fragment,t),_(Ke.$$.fragment,t),_(Qe.$$.fragment,t),_(Xe.$$.fragment,t),_(Ye.$$.fragment,t),_(Ze.$$.fragment,t),_(et.$$.fragment,t),_(tt.$$.fragment,t),_(ot.$$.fragment,t),_(rt.$$.fragment,t),_(nt.$$.fragment,t),_(at.$$.fragment,t),_(st.$$.fragment,t),_(it.$$.fragment,t),_(lt.$$.fragment,t),_(ct.$$.fragment,t),_(gt.$$.fragment,t),_(ht.$$.fragment,t),_(pt.$$.fragment,t),_(dt.$$.fragment,t),_(ut.$$.fragment,t),_(mt.$$.fragment,t),_(ft.$$.fragment,t),_(_t.$$.fragment,t),_(bt.$$.fragment,t),_(yt.$$.fragment,t),_(vt.$$.fragment,t),_($t.$$.fragment,t),_(wt.$$.fragment,t),_(kt.$$.fragment,t),_(xt.$$.fragment,t),_(Dt.$$.fragment,t),_(Rt.$$.fragment,t),_(Tt.$$.fragment,t),Ar=!1},d(t){o(V),t&&o(vr),t&&o(A),b(He),t&&o($r),t&&o(E),t&&o(wr),t&&o(re),t&&o(Er),t&&o(S),b(Ve),t&&o(kr),t&&o(g),b(Ae),b(Se),b(qe),b(Ue),b(Me),b(We),b(Be),b(Ge),b(ze),b(Je),b(Ke),b(Qe),b(Xe),b(Ye),b(Ze),b(et),b(tt),b(ot),b(rt),b(nt),b(at),b(st),b(it),b(lt),b(ct),b(gt),b(ht),b(pt),b(dt),t&&o(xr),t&&o(G),b(ut),t&&o(Dr),t&&o(z),b(mt),t&&o(Rr),t&&o(J),b(ft),t&&o(Tr),t&&o(K),b(_t),t&&o(Pr),t&&o(Q),b(bt),t&&o(Ir),t&&o(X),b(yt),t&&o(Or),t&&o(Y),b(vt),t&&o(Lr),t&&o(L),b($t),t&&o(Cr),t&&o(Z),b(wt),t&&o(Fr),t&&o(De),t&&o(Nr),t&&o(T),t&&o(jr),t&&o(It),t&&o(Hr),t&&o(w),b(kt),b(xt),b(Dt),b(Rt),t&&o(Vr),t&&o(ee),b(Tt)}}}const lg={local:"managing-local-and-online-repositories",sections:[{local:"huggingface_hub.Repository",title:"The Repository class"},{local:"huggingface_hub.repository.is_git_repo",title:"Helper methods"},{local:"huggingface_hub.Repository",title:"Following asynchronous commands"}],title:"Managing local and online repositories"};function cg(_l){return ag(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ug extends eg{constructor(V){super();tg(this,V,cg,ig,og,{})}}export{ug as default,lg as metadata};
