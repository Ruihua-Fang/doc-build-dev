import{S as Pc,i as Cc,s as xc,e as s,k as h,w as m,t as r,M as Ac,c as a,d as o,m as c,a as l,x as u,h as i,b as f,N as Dc,F as t,g as p,y as d,L as Oc,q as g,o as _,B as y,v as Sc}from"../chunks/vendor-d3924577.js";import{I as $}from"../chunks/IconCopyLink-f94c3d80.js";import{C as v}from"../chunks/CodeBlock-ff545b14.js";function Nc(yp){let H,Hs,Ls,Is,L,oe,Zt,He,Ul,eo,Ml,Ts,I,se,to,Le,Bl,oo,Yl,Gs,Ie,so,zl,Wl,Fs,ae,Te,Jl,ao,Kl,Ql,Vl,Ge,Xl,lo,Zl,er,Us,T,le,ro,Fe,tr,io,or,Ms,re,sr,no,ar,lr,Bs,E,po,rr,ir,ho,nr,pr,co,hr,cr,fo,fr,Ys,G,ie,mo,Ue,mr,uo,ur,zs,x,dr,go,gr,_r,_o,yr,vr,Ws,ne,$r,Me,wr,br,Js,Ht,Lt,vp,Ks,Be,Qs,pe,Er,yo,kr,jr,Vs,Ye,Xs,F,he,vo,ze,qr,$o,Pr,Zs,It,Cr,ea,We,ta,U,ce,wo,Je,xr,bo,Ar,oa,A,Dr,Eo,Or,Sr,ko,Nr,Rr,sa,Ke,aa,M,fe,jo,Qe,Hr,qo,Lr,la,me,Ir,Po,Tr,Gr,ra,k,Fr,Co,Ur,Mr,xo,Br,Yr,Ao,zr,Wr,ia,Ve,na,ue,Jr,Do,Kr,Qr,pa,Xe,ha,B,de,Oo,Ze,Vr,So,Xr,ca,Tt,Zr,fa,et,ma,Y,ge,No,tt,ei,Ro,ti,ua,b,oi,Ho,si,ai,Lo,li,ri,ot,ii,ni,Io,pi,hi,da,z,_e,To,st,ci,Go,fi,ga,D,mi,Fo,ui,di,Uo,gi,_i,_a,at,ya,W,Mo,yi,vi,Bo,$i,wi,va,lt,$a,O,bi,Yo,Ei,ki,zo,ji,qi,wa,rt,ba,J,ye,Wo,it,Pi,Jo,Ci,Ea,ve,xi,Ko,Ai,Di,ka,nt,ja,K,$e,Qo,pt,Oi,Vo,Si,qa,Gt,Ni,Pa,S,ht,Xo,Ri,Hi,ct,Li,Q,ft,Ii,Zo,Ti,Gi,Fi,mt,Ui,Ft,es,Mi,Bi,Yi,ut,dt,zi,ts,Wi,Ji,Ki,gt,Ca,N,Qi,os,Vi,Xi,ss,Zi,en,xa,_t,Aa,V,we,as,yt,tn,ls,on,Da,j,sn,rs,an,ln,is,rn,nn,ns,pn,hn,Oa,vt,Sa,X,be,ps,$t,cn,hs,fn,Na,Ee,mn,cs,un,dn,Ra,wt,Ha,ke,gn,fs,_n,yn,La,bt,Ia,Z,je,ms,Et,vn,Ut,us,$n,wn,Ta,q,bn,ds,En,kn,gs,jn,qn,_s,Pn,Cn,Ga,P,kt,xn,ys,An,Dn,On,jt,Sn,vs,Nn,Rn,Hn,$s,Ln,In,qt,Tn,ws,Gn,Fn,Fa,Pt,Ua,Mt,Un,Ma,Ct,Ba,qe,Mn,bs,Bn,Yn,Ya,xt,za,Pe,zn,Es,Wn,Jn,Wa,At,Ja,Ce,Kn,ks,Qn,Vn,Ka,Dt,Qa,ee,xe,js,Ot,Xn,qs,Ps,Zn,Va,w,ep,Cs,tp,op,xs,sp,ap,As,lp,rp,Ds,ip,np,Os,pp,hp,Xa,St,Za,te,Ae,Ss,Nt,cp,Ns,fp,el,Bt,mp,tl,Rt,ol,Yt,up,sl;return He=new $({}),Le=new $({}),Fe=new $({}),Ue=new $({}),Be=new v({props:{code:`from huggingface_hub import list_models

list_models()

list_models(filter="text-classification")

list_models(filter=("languages:ru", "pytorch"))

list_models(filter="dataset:common_voice")

list_models(filter="spacy")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> list_models

<span class="hljs-comment"># List all models.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models()

<span class="hljs-comment"># List only text classification models.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;text-classification&quot;</span>)

<span class="hljs-comment"># List only Russian models compatible with PyTorch.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models(<span class="hljs-built_in">filter</span>=(<span class="hljs-string">&quot;languages:ru&quot;</span>, <span class="hljs-string">&quot;pytorch&quot;</span>))

<span class="hljs-comment"># List only the models trained on the &quot;common_voice&quot; dataset.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;dataset:common_voice&quot;</span>)

<span class="hljs-comment"># List only the models from the spaCy library.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_models(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;spacy&quot;</span>)`}}),Ye=new v({props:{code:`from huggingface_hub import list_datasets

list_datasets(filter="task_categories:text-classification")

list_datasets(filter=("languages:ru", "task_ids:language-modeling"))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> list_datasets

<span class="hljs-comment"># List only text classification datasets.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_datasets(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;task_categories:text-classification&quot;</span>)

<span class="hljs-comment"># List only datasets in Russian for language modeling.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>list_datasets(<span class="hljs-built_in">filter</span>=(<span class="hljs-string">&quot;languages:ru&quot;</span>, <span class="hljs-string">&quot;task_ids:language-modeling&quot;</span>))`}}),ze=new $({}),We=new v({props:{code:`from huggingface_hub import model_info, dataset_info

model_info("distilbert-base-uncased")

dataset_info("glue")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> model_info, dataset_info

<span class="hljs-comment"># Get metadata of a single model.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model_info(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)

<span class="hljs-comment"># Get metadata of a single dataset.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_info(<span class="hljs-string">&quot;glue&quot;</span>)`}}),Je=new $({}),Ke=new v({props:{code:`from huggingface_hub import create_repo
create_repo("test-model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>create_repo(<span class="hljs-string">&quot;test-model&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/test-model&#x27;</span>`}}),Qe=new $({}),Ve=new v({props:{code:`from huggingface_hub import get_full_repo_name, delete_repo
name = get_full_repo_name(repo_name)
delete_repo(repo_id=name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> get_full_repo_name, delete_repo
<span class="hljs-meta">&gt;&gt;&gt; </span>name = get_full_repo_name(repo_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=name)`}}),Xe=new v({props:{code:'delete_repo(repo_id=REPO_NAME, repo_type="dataset")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>delete_repo(repo_id=REPO_NAME, repo_type=<span class="hljs-string">&quot;dataset&quot;</span>)'}}),Ze=new $({}),et=new v({props:{code:`from huggingface_hub import update_repo_visibility
update_repo_visibility(name=REPO_NAME, private=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> update_repo_visibility
<span class="hljs-meta">&gt;&gt;&gt; </span>update_repo_visibility(name=REPO_NAME, private=<span class="hljs-literal">True</span>)`}}),tt=new $({}),st=new $({}),at=new v({props:{code:'repo = Repository(local_dir="w2v2", clone_from="facebook/wav2vec2-large-960h-lv60")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;w2v2&quot;</span>, clone_from=<span class="hljs-string">&quot;facebook/wav2vec2-large-960h-lv60&quot;</span>)'}}),lt=new v({props:{code:'repo = Repository(local_dir="huggingface-hub", clone_from="https://github.com/huggingface/huggingface_hub")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;huggingface-hub&quot;</span>, clone_from=<span class="hljs-string">&quot;https://github.com/huggingface/huggingface_hub&quot;</span>)'}}),rt=new v({props:{code:`repo_url = create_repo(repo_id="repo_name")
repo = Repository(local_dir="repo_local_path", clone_from=repo_url)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo_url = create_repo(repo_id=<span class="hljs-string">&quot;repo_name&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;repo_local_path&quot;</span>, clone_from=repo_url)`}}),it=new $({}),nt=new v({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="<path>/<to>/<folder>")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;&lt;path&gt;/&lt;to&gt;/&lt;folder&gt;&quot;</span>)`}}),pt=new $({}),ct=new v({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),mt=new v({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),gt=new v({props:{code:'repo = Repository(local_dir="my-model", clone_from="<user>/<model_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;my-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;model_id&gt;&quot;</span>)'}}),_t=new v({props:{code:`repo = Repository(
  "my-dataset", 
  clone_from="<user>/<dataset_id>", 
  use_auth_token=True, 
  repo_type="dataset",
  git_user="MyName",
  git_email="me@cool.mail"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;my-dataset&quot;</span>, 
<span class="hljs-meta">... </span>  clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;dataset_id&gt;&quot;</span>, 
<span class="hljs-meta">... </span>  use_auth_token=<span class="hljs-literal">True</span>, 
<span class="hljs-meta">... </span>  repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>  git_user=<span class="hljs-string">&quot;MyName&quot;</span>,
<span class="hljs-meta">... </span>  git_email=<span class="hljs-string">&quot;me@cool.mail&quot;</span>
<span class="hljs-meta">... </span>)`}}),yt=new $({}),vt=new v({props:{code:`repo = Repository(local_dir="huggingface-hub", clone_from="<user>/<dataset_id>", revision='branch1')
repo.git_checkout("branch2")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;huggingface-hub&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/&lt;dataset_id&gt;&quot;</span>, revision=<span class="hljs-string">&#x27;branch1&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_checkout(<span class="hljs-string">&quot;branch2&quot;</span>)`}}),$t=new $({}),wt=new v({props:{code:"repo.git_pull()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()'}}),bt=new v({props:{code:"repo.git_pull(rebase=True)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull(rebase=<span class="hljs-literal">True</span>)'}}),Et=new $({}),Pt=new v({props:{code:`with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),Ct=new v({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", use_auth_token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),xt=new v({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),At=new v({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status
<span class="hljs-comment"># -&gt; -1 indicates the push is ongoing.</span>
<span class="hljs-comment"># -&gt; 0 indicates the push has completed successfully.</span>
<span class="hljs-comment"># -&gt; Non-zero code indicates the error code if there was an error.</span>`}}),Dt=new v({props:{code:`# Inspect an error.
>>> last_command.stderr

# Check whether a push is completed or ongoing.
>>> last_command.is_done

# Check whether a push command has errored.
>>> last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),Ot=new $({}),St=new v({props:{code:`repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),Nt=new $({}),Rt=new v({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),{c(){H=s("meta"),Hs=h(),Ls=s("hr"),Is=h(),L=s("h2"),oe=s("a"),Zt=s("span"),m(He.$$.fragment),Ul=h(),eo=s("span"),Ml=r("title: How to create repositories and upload files to the Hub"),Ts=h(),I=s("h1"),se=s("a"),to=s("span"),m(Le.$$.fragment),Bl=h(),oo=s("span"),Yl=r("How to integrate upstream utilities in your library"),Gs=h(),Ie=s("p"),so=s("em"),zl=r("Upstream"),Wl=r(" utilities allow you to publish files to the Hub from your library. This guide will show you how to:"),Fs=h(),ae=s("ul"),Te=s("li"),Jl=r("Use the repository-management methods available in the "),ao=s("code"),Kl=r("huggingface_hub"),Ql=r(" package."),Vl=h(),Ge=s("li"),Xl=r("Use the "),lo=s("code"),Zl=r("Repository"),er=r(" class to handle files and version control a repository with Git-like commands."),Us=h(),T=s("h2"),le=s("a"),ro=s("span"),m(Fe.$$.fragment),tr=h(),io=s("span"),or=r("huggingface_hub repository-management methods"),Ms=h(),re=s("p"),sr=r("The "),no=s("code"),ar=r("huggingface_hub"),lr=r(" package offers high-level methods that wraps around HTTP requests. There are many valuable tasks you can accomplish with it, including:"),Bs=h(),E=s("ul"),po=s("li"),rr=r("List and filter models and datasets."),ir=h(),ho=s("li"),nr=r("Inspect model or dataset metadata."),pr=h(),co=s("li"),hr=r("Delete a repository."),cr=h(),fo=s("li"),fr=r("Change the visibility of a repository."),Ys=h(),G=s("h3"),ie=s("a"),mo=s("span"),m(Ue.$$.fragment),mr=h(),uo=s("span"),ur=r("List and filter"),zs=h(),x=s("p"),dr=r("It can be helpful for users to see a list of available models and filter them according to a specific language or library. This can be especially useful for library and organization owners who want to view all their models. Use the "),go=s("code"),gr=r("list_models"),_r=r(" function with the "),_o=s("code"),yr=r("filter"),vr=r(" parameter to search for specific models."),Ws=h(),ne=s("p"),$r=r("You can view all the available filters on the left of the "),Me=s("a"),wr=r("model Hub"),br=r("."),Js=h(),Ht=s("p"),Lt=s("img"),Ks=h(),m(Be.$$.fragment),Qs=h(),pe=s("p"),Er=r("Explore available public datasets with "),yo=s("code"),kr=r("list_datasets"),jr=r(":"),Vs=h(),m(Ye.$$.fragment),Xs=h(),F=s("h3"),he=s("a"),vo=s("span"),m(ze.$$.fragment),qr=h(),$o=s("span"),Pr=r("Inspect model or dataset metadata"),Zs=h(),It=s("p"),Cr=r("Get important information about a model or dataset as shown below:"),ea=h(),m(We.$$.fragment),ta=h(),U=s("h3"),ce=s("a"),wo=s("span"),m(Je.$$.fragment),xr=h(),bo=s("span"),Ar=r("Create a repository"),oa=h(),A=s("p"),Dr=r("Create a repository with "),Eo=s("code"),Or=r("create_repo"),Sr=r(" and give it a name with the "),ko=s("code"),Nr=r("name"),Rr=r(" parameter."),sa=h(),m(Ke.$$.fragment),aa=h(),M=s("h3"),fe=s("a"),jo=s("span"),m(Qe.$$.fragment),Hr=h(),qo=s("span"),Lr=r("Delete a repository"),la=h(),me=s("p"),Ir=r("Delete a repository with "),Po=s("code"),Tr=r("delete_repo"),Gr=r(". Make sure you are certain you want to delete a repository because this is an irreversible process!"),ra=h(),k=s("p"),Fr=r("Pass the full repository ID to "),Co=s("code"),Ur=r("delete_repo"),Mr=r(". The full repository ID looks like "),xo=s("code"),Br=r("{username_or_org}/{repo_name}"),Yr=r(", and you can retrieve it with "),Ao=s("code"),zr=r("get_full_repo_name()"),Wr=r(" as shown below:"),ia=h(),m(Ve.$$.fragment),na=h(),ue=s("p"),Jr=r("Delete a dataset repository by adding the "),Do=s("code"),Kr=r("repo_type"),Qr=r(" parameter:"),pa=h(),m(Xe.$$.fragment),ha=h(),B=s("h3"),de=s("a"),Oo=s("span"),m(Ze.$$.fragment),Vr=h(),So=s("span"),Xr=r("Change repository visibility"),ca=h(),Tt=s("p"),Zr=r("A repository can be public or private. A private repository is only visible to you or members of the organization in which the repository is located. Change a repository to private as shown in the following:"),fa=h(),m(et.$$.fragment),ma=h(),Y=s("h2"),ge=s("a"),No=s("span"),m(tt.$$.fragment),ei=h(),Ro=s("span"),ti=r("Repository"),ua=h(),b=s("p"),oi=r("The "),Ho=s("code"),si=r("Repository"),ai=r(" class allows you to push models or other repositories to the Hub. "),Lo=s("code"),li=r("Repository"),ri=r(" is a wrapper over Git and Git-LFS methods, so make sure you have Git-LFS installed (see "),ot=s("a"),ii=r("here"),ni=r(" for installation instructions) and set up before you begin. The "),Io=s("code"),pi=r("Repository"),hi=r(" class should feel familiar if you are already familiar with common Git commands."),da=h(),z=s("h3"),_e=s("a"),To=s("span"),m(st.$$.fragment),ci=h(),Go=s("span"),fi=r("Clone a repository"),ga=h(),D=s("p"),mi=r("The "),Fo=s("code"),ui=r("clone_from"),di=r(" parameter clones a repository from a Hugging Face model ID to a directory specified by the "),Uo=s("code"),gi=r("local_dir"),_i=r(" argument:"),_a=h(),m(at.$$.fragment),ya=h(),W=s("p"),Mo=s("code"),yi=r("clone_from"),vi=r(" can also clone a repository from a specified directory using a URL (if you are working offline, this parameter should be "),Bo=s("code"),$i=r("None"),wi=r("):"),va=h(),m(lt.$$.fragment),$a=h(),O=s("p"),bi=r("Easily combine the "),Yo=s("code"),Ei=r("clone_from"),ki=r(" parameter with "),zo=s("code"),ji=r("create_repo"),qi=r(" to create and clone a repository:"),wa=h(),m(rt.$$.fragment),ba=h(),J=s("h3"),ye=s("a"),Wo=s("span"),m(it.$$.fragment),Pi=h(),Jo=s("span"),Ci=r("Using a local clone"),Ea=h(),ve=s("p"),xi=r("Instantiate a "),Ko=s("code"),Ai=r("Repository"),Di=r(" object with a path to a local Git clone or repository:"),ka=h(),m(nt.$$.fragment),ja=h(),K=s("h3"),$e=s("a"),Qo=s("span"),m(pt.$$.fragment),Oi=h(),Vo=s("span"),Si=r("Commit and push to a cloned repository"),qa=h(),Gt=s("p"),Ni=r("If you want to commit or push to a cloned repository that belongs to you or your organizations:"),Pa=h(),S=s("ol"),ht=s("li"),Xo=s("p"),Ri=r("Log in to your Hugging Face account with the following command:"),Hi=h(),m(ct.$$.fragment),Li=h(),Q=s("li"),ft=s("p"),Ii=r("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Zo=s("code"),Ti=r("notebook_login"),Gi=r(":"),Fi=h(),m(mt.$$.fragment),Ui=h(),Ft=s("p"),es=s("code"),Mi=r("notebook_login"),Bi=r(" will launch a widget in your notebook from which you can enter your Hugging Face credentials."),Yi=h(),ut=s("li"),dt=s("p"),zi=r("Instantiate a "),ts=s("code"),Wi=r("Repository"),Ji=r(" class:"),Ki=h(),m(gt.$$.fragment),Ca=h(),N=s("p"),Qi=r("You can also attribute a Git username and email to a cloned repository by specifying the "),os=s("code"),Vi=r("git_user"),Xi=r(" and "),ss=s("code"),Zi=r("git_email"),en=r(" parameters. When users commit to that repository, Git will be aware of the commit author."),xa=h(),m(_t.$$.fragment),Aa=h(),V=s("h3"),we=s("a"),as=s("span"),m(yt.$$.fragment),tn=h(),ls=s("span"),on=r("Branch"),Da=h(),j=s("p"),sn=r("Switch between branches with "),rs=s("code"),an=r("git_checkout"),ln=r(". For example, if you want to switch from "),is=s("code"),rn=r("branch1"),nn=r(" to "),ns=s("code"),pn=r("branch2"),hn=r(":"),Oa=h(),m(vt.$$.fragment),Sa=h(),X=s("h3"),be=s("a"),ps=s("span"),m($t.$$.fragment),cn=h(),hs=s("span"),fn=r("Pull"),Na=h(),Ee=s("p"),mn=r("Update a current local branch with "),cs=s("code"),un=r("git_pull"),dn=r(":"),Ra=h(),m(wt.$$.fragment),Ha=h(),ke=s("p"),gn=r("Set "),fs=s("code"),_n=r("rebase=True"),yn=r(" if you want your local commits to occur after your branch is updated with the new commits from the remote:"),La=h(),m(bt.$$.fragment),Ia=h(),Z=s("h3"),je=s("a"),ms=s("span"),m(Et.$$.fragment),vn=h(),Ut=s("span"),us=s("code"),$n=r("commit"),wn=r(" context manager"),Ta=h(),q=s("p"),bn=r("The "),ds=s("code"),En=r("commit"),kn=r(" context manager is a simple utility that handles four of the most common Git commands: pull, add, commit, and push. "),gs=s("code"),jn=r("git-lfs"),qn=r(" automatically tracks any file larger than 10MB. In the following example, the "),_s=s("code"),Pn=r("commit"),Cn=r(" context manager:"),Ga=h(),P=s("ol"),kt=s("li"),xn=r("Pulls from the "),ys=s("code"),An=r("text-files"),Dn=r(" repository."),On=h(),jt=s("li"),Sn=r("Adds a change made to "),vs=s("code"),Nn=r("file.txt"),Rn=r("."),Hn=h(),$s=s("li"),Ln=r("Commits the change."),In=h(),qt=s("li"),Tn=r("Pushes the change to the "),ws=s("code"),Gn=r("text-files"),Fn=r(" repository."),Fa=h(),m(Pt.$$.fragment),Ua=h(),Mt=s("p"),Un=r("Here is another example of how to save and upload a file to a repository:"),Ma=h(),m(Ct.$$.fragment),Ba=h(),qe=s("p"),Mn=r("Set "),bs=s("code"),Bn=r("blocking=False"),Yn=r(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),Ya=h(),m(xt.$$.fragment),za=h(),Pe=s("p"),zn=r("You can check the status of your push with the "),Es=s("code"),Wn=r("command_queue"),Jn=r(" property:"),Wa=h(),m(At.$$.fragment),Ja=h(),Ce=s("p"),Kn=r("When "),ks=s("code"),Qn=r("blocking=False"),Vn=r(", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Ka=h(),m(Dt.$$.fragment),Qa=h(),ee=s("h3"),xe=s("a"),js=s("span"),m(Ot.$$.fragment),Xn=h(),qs=s("span"),Ps=s("code"),Zn=r("push_to_hub"),Va=h(),w=s("p"),ep=r("The "),Cs=s("code"),tp=r("Repository"),op=r(" class also has a "),xs=s("code"),sp=r("push_to_hub"),ap=r(" utility to add files, make a commit, and push them to a repository. Unlike the "),As=s("code"),lp=r("commit"),rp=r(" context manager, "),Ds=s("code"),ip=r("push_to_hub"),np=r(" requires you to pull from a repository first, save the files, and then call "),Os=s("code"),pp=r("push_to_hub"),hp=r("."),Xa=h(),m(St.$$.fragment),Za=h(),te=s("h2"),Ae=s("a"),Ss=s("span"),m(Nt.$$.fragment),cp=h(),Ns=s("span"),fp=r("Upload very large files"),el=h(),Bt=s("p"),mp=r("For huge files (>5GB), you need to install a custom transfer agent for Git-LFS:"),tl=h(),m(Rt.$$.fragment),ol=h(),Yt=s("p"),up=r("You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),this.h()},l(e){const n=Ac('[data-svelte="svelte-1phssyn"]',document.head);H=a(n,"META",{name:!0,content:!0}),n.forEach(o),Hs=c(e),Ls=a(e,"HR",{}),Is=c(e),L=a(e,"H2",{class:!0});var al=l(L);oe=a(al,"A",{id:!0,class:!0,href:!0});var $p=l(oe);Zt=a($p,"SPAN",{});var wp=l(Zt);u(He.$$.fragment,wp),wp.forEach(o),$p.forEach(o),Ul=c(al),eo=a(al,"SPAN",{});var bp=l(eo);Ml=i(bp,"title: How to create repositories and upload files to the Hub"),bp.forEach(o),al.forEach(o),Ts=c(e),I=a(e,"H1",{class:!0});var ll=l(I);se=a(ll,"A",{id:!0,class:!0,href:!0});var Ep=l(se);to=a(Ep,"SPAN",{});var kp=l(to);u(Le.$$.fragment,kp),kp.forEach(o),Ep.forEach(o),Bl=c(ll),oo=a(ll,"SPAN",{});var jp=l(oo);Yl=i(jp,"How to integrate upstream utilities in your library"),jp.forEach(o),ll.forEach(o),Gs=c(e),Ie=a(e,"P",{});var dp=l(Ie);so=a(dp,"EM",{});var qp=l(so);zl=i(qp,"Upstream"),qp.forEach(o),Wl=i(dp," utilities allow you to publish files to the Hub from your library. This guide will show you how to:"),dp.forEach(o),Fs=c(e),ae=a(e,"UL",{});var rl=l(ae);Te=a(rl,"LI",{});var il=l(Te);Jl=i(il,"Use the repository-management methods available in the "),ao=a(il,"CODE",{});var Pp=l(ao);Kl=i(Pp,"huggingface_hub"),Pp.forEach(o),Ql=i(il," package."),il.forEach(o),Vl=c(rl),Ge=a(rl,"LI",{});var nl=l(Ge);Xl=i(nl,"Use the "),lo=a(nl,"CODE",{});var Cp=l(lo);Zl=i(Cp,"Repository"),Cp.forEach(o),er=i(nl," class to handle files and version control a repository with Git-like commands."),nl.forEach(o),rl.forEach(o),Us=c(e),T=a(e,"H2",{class:!0});var pl=l(T);le=a(pl,"A",{id:!0,class:!0,href:!0});var xp=l(le);ro=a(xp,"SPAN",{});var Ap=l(ro);u(Fe.$$.fragment,Ap),Ap.forEach(o),xp.forEach(o),tr=c(pl),io=a(pl,"SPAN",{});var Dp=l(io);or=i(Dp,"huggingface_hub repository-management methods"),Dp.forEach(o),pl.forEach(o),Ms=c(e),re=a(e,"P",{});var hl=l(re);sr=i(hl,"The "),no=a(hl,"CODE",{});var Op=l(no);ar=i(Op,"huggingface_hub"),Op.forEach(o),lr=i(hl," package offers high-level methods that wraps around HTTP requests. There are many valuable tasks you can accomplish with it, including:"),hl.forEach(o),Bs=c(e),E=a(e,"UL",{});var De=l(E);po=a(De,"LI",{});var Sp=l(po);rr=i(Sp,"List and filter models and datasets."),Sp.forEach(o),ir=c(De),ho=a(De,"LI",{});var Np=l(ho);nr=i(Np,"Inspect model or dataset metadata."),Np.forEach(o),pr=c(De),co=a(De,"LI",{});var Rp=l(co);hr=i(Rp,"Delete a repository."),Rp.forEach(o),cr=c(De),fo=a(De,"LI",{});var Hp=l(fo);fr=i(Hp,"Change the visibility of a repository."),Hp.forEach(o),De.forEach(o),Ys=c(e),G=a(e,"H3",{class:!0});var cl=l(G);ie=a(cl,"A",{id:!0,class:!0,href:!0});var Lp=l(ie);mo=a(Lp,"SPAN",{});var Ip=l(mo);u(Ue.$$.fragment,Ip),Ip.forEach(o),Lp.forEach(o),mr=c(cl),uo=a(cl,"SPAN",{});var Tp=l(uo);ur=i(Tp,"List and filter"),Tp.forEach(o),cl.forEach(o),zs=c(e),x=a(e,"P",{});var zt=l(x);dr=i(zt,"It can be helpful for users to see a list of available models and filter them according to a specific language or library. This can be especially useful for library and organization owners who want to view all their models. Use the "),go=a(zt,"CODE",{});var Gp=l(go);gr=i(Gp,"list_models"),Gp.forEach(o),_r=i(zt," function with the "),_o=a(zt,"CODE",{});var Fp=l(_o);yr=i(Fp,"filter"),Fp.forEach(o),vr=i(zt," parameter to search for specific models."),zt.forEach(o),Ws=c(e),ne=a(e,"P",{});var fl=l(ne);$r=i(fl,"You can view all the available filters on the left of the "),Me=a(fl,"A",{href:!0,rel:!0});var Up=l(Me);wr=i(Up,"model Hub"),Up.forEach(o),br=i(fl,"."),fl.forEach(o),Js=c(e),Ht=a(e,"P",{});var Mp=l(Ht);Lt=a(Mp,"IMG",{src:!0,alt:!0}),Mp.forEach(o),Ks=c(e),u(Be.$$.fragment,e),Qs=c(e),pe=a(e,"P",{});var ml=l(pe);Er=i(ml,"Explore available public datasets with "),yo=a(ml,"CODE",{});var Bp=l(yo);kr=i(Bp,"list_datasets"),Bp.forEach(o),jr=i(ml,":"),ml.forEach(o),Vs=c(e),u(Ye.$$.fragment,e),Xs=c(e),F=a(e,"H3",{class:!0});var ul=l(F);he=a(ul,"A",{id:!0,class:!0,href:!0});var Yp=l(he);vo=a(Yp,"SPAN",{});var zp=l(vo);u(ze.$$.fragment,zp),zp.forEach(o),Yp.forEach(o),qr=c(ul),$o=a(ul,"SPAN",{});var Wp=l($o);Pr=i(Wp,"Inspect model or dataset metadata"),Wp.forEach(o),ul.forEach(o),Zs=c(e),It=a(e,"P",{});var Jp=l(It);Cr=i(Jp,"Get important information about a model or dataset as shown below:"),Jp.forEach(o),ea=c(e),u(We.$$.fragment,e),ta=c(e),U=a(e,"H3",{class:!0});var dl=l(U);ce=a(dl,"A",{id:!0,class:!0,href:!0});var Kp=l(ce);wo=a(Kp,"SPAN",{});var Qp=l(wo);u(Je.$$.fragment,Qp),Qp.forEach(o),Kp.forEach(o),xr=c(dl),bo=a(dl,"SPAN",{});var Vp=l(bo);Ar=i(Vp,"Create a repository"),Vp.forEach(o),dl.forEach(o),oa=c(e),A=a(e,"P",{});var Wt=l(A);Dr=i(Wt,"Create a repository with "),Eo=a(Wt,"CODE",{});var Xp=l(Eo);Or=i(Xp,"create_repo"),Xp.forEach(o),Sr=i(Wt," and give it a name with the "),ko=a(Wt,"CODE",{});var Zp=l(ko);Nr=i(Zp,"name"),Zp.forEach(o),Rr=i(Wt," parameter."),Wt.forEach(o),sa=c(e),u(Ke.$$.fragment,e),aa=c(e),M=a(e,"H3",{class:!0});var gl=l(M);fe=a(gl,"A",{id:!0,class:!0,href:!0});var eh=l(fe);jo=a(eh,"SPAN",{});var th=l(jo);u(Qe.$$.fragment,th),th.forEach(o),eh.forEach(o),Hr=c(gl),qo=a(gl,"SPAN",{});var oh=l(qo);Lr=i(oh,"Delete a repository"),oh.forEach(o),gl.forEach(o),la=c(e),me=a(e,"P",{});var _l=l(me);Ir=i(_l,"Delete a repository with "),Po=a(_l,"CODE",{});var sh=l(Po);Tr=i(sh,"delete_repo"),sh.forEach(o),Gr=i(_l,". Make sure you are certain you want to delete a repository because this is an irreversible process!"),_l.forEach(o),ra=c(e),k=a(e,"P",{});var Oe=l(k);Fr=i(Oe,"Pass the full repository ID to "),Co=a(Oe,"CODE",{});var ah=l(Co);Ur=i(ah,"delete_repo"),ah.forEach(o),Mr=i(Oe,". The full repository ID looks like "),xo=a(Oe,"CODE",{});var lh=l(xo);Br=i(lh,"{username_or_org}/{repo_name}"),lh.forEach(o),Yr=i(Oe,", and you can retrieve it with "),Ao=a(Oe,"CODE",{});var rh=l(Ao);zr=i(rh,"get_full_repo_name()"),rh.forEach(o),Wr=i(Oe," as shown below:"),Oe.forEach(o),ia=c(e),u(Ve.$$.fragment,e),na=c(e),ue=a(e,"P",{});var yl=l(ue);Jr=i(yl,"Delete a dataset repository by adding the "),Do=a(yl,"CODE",{});var ih=l(Do);Kr=i(ih,"repo_type"),ih.forEach(o),Qr=i(yl," parameter:"),yl.forEach(o),pa=c(e),u(Xe.$$.fragment,e),ha=c(e),B=a(e,"H3",{class:!0});var vl=l(B);de=a(vl,"A",{id:!0,class:!0,href:!0});var nh=l(de);Oo=a(nh,"SPAN",{});var ph=l(Oo);u(Ze.$$.fragment,ph),ph.forEach(o),nh.forEach(o),Vr=c(vl),So=a(vl,"SPAN",{});var hh=l(So);Xr=i(hh,"Change repository visibility"),hh.forEach(o),vl.forEach(o),ca=c(e),Tt=a(e,"P",{});var ch=l(Tt);Zr=i(ch,"A repository can be public or private. A private repository is only visible to you or members of the organization in which the repository is located. Change a repository to private as shown in the following:"),ch.forEach(o),fa=c(e),u(et.$$.fragment,e),ma=c(e),Y=a(e,"H2",{class:!0});var $l=l(Y);ge=a($l,"A",{id:!0,class:!0,href:!0});var fh=l(ge);No=a(fh,"SPAN",{});var mh=l(No);u(tt.$$.fragment,mh),mh.forEach(o),fh.forEach(o),ei=c($l),Ro=a($l,"SPAN",{});var uh=l(Ro);ti=i(uh,"Repository"),uh.forEach(o),$l.forEach(o),ua=c(e),b=a(e,"P",{});var R=l(b);oi=i(R,"The "),Ho=a(R,"CODE",{});var dh=l(Ho);si=i(dh,"Repository"),dh.forEach(o),ai=i(R," class allows you to push models or other repositories to the Hub. "),Lo=a(R,"CODE",{});var gh=l(Lo);li=i(gh,"Repository"),gh.forEach(o),ri=i(R," is a wrapper over Git and Git-LFS methods, so make sure you have Git-LFS installed (see "),ot=a(R,"A",{href:!0,rel:!0});var _h=l(ot);ii=i(_h,"here"),_h.forEach(o),ni=i(R," for installation instructions) and set up before you begin. The "),Io=a(R,"CODE",{});var yh=l(Io);pi=i(yh,"Repository"),yh.forEach(o),hi=i(R," class should feel familiar if you are already familiar with common Git commands."),R.forEach(o),da=c(e),z=a(e,"H3",{class:!0});var wl=l(z);_e=a(wl,"A",{id:!0,class:!0,href:!0});var vh=l(_e);To=a(vh,"SPAN",{});var $h=l(To);u(st.$$.fragment,$h),$h.forEach(o),vh.forEach(o),ci=c(wl),Go=a(wl,"SPAN",{});var wh=l(Go);fi=i(wh,"Clone a repository"),wh.forEach(o),wl.forEach(o),ga=c(e),D=a(e,"P",{});var Jt=l(D);mi=i(Jt,"The "),Fo=a(Jt,"CODE",{});var bh=l(Fo);ui=i(bh,"clone_from"),bh.forEach(o),di=i(Jt," parameter clones a repository from a Hugging Face model ID to a directory specified by the "),Uo=a(Jt,"CODE",{});var Eh=l(Uo);gi=i(Eh,"local_dir"),Eh.forEach(o),_i=i(Jt," argument:"),Jt.forEach(o),_a=c(e),u(at.$$.fragment,e),ya=c(e),W=a(e,"P",{});var Rs=l(W);Mo=a(Rs,"CODE",{});var kh=l(Mo);yi=i(kh,"clone_from"),kh.forEach(o),vi=i(Rs," can also clone a repository from a specified directory using a URL (if you are working offline, this parameter should be "),Bo=a(Rs,"CODE",{});var jh=l(Bo);$i=i(jh,"None"),jh.forEach(o),wi=i(Rs,"):"),Rs.forEach(o),va=c(e),u(lt.$$.fragment,e),$a=c(e),O=a(e,"P",{});var Kt=l(O);bi=i(Kt,"Easily combine the "),Yo=a(Kt,"CODE",{});var qh=l(Yo);Ei=i(qh,"clone_from"),qh.forEach(o),ki=i(Kt," parameter with "),zo=a(Kt,"CODE",{});var Ph=l(zo);ji=i(Ph,"create_repo"),Ph.forEach(o),qi=i(Kt," to create and clone a repository:"),Kt.forEach(o),wa=c(e),u(rt.$$.fragment,e),ba=c(e),J=a(e,"H3",{class:!0});var bl=l(J);ye=a(bl,"A",{id:!0,class:!0,href:!0});var Ch=l(ye);Wo=a(Ch,"SPAN",{});var xh=l(Wo);u(it.$$.fragment,xh),xh.forEach(o),Ch.forEach(o),Pi=c(bl),Jo=a(bl,"SPAN",{});var Ah=l(Jo);Ci=i(Ah,"Using a local clone"),Ah.forEach(o),bl.forEach(o),Ea=c(e),ve=a(e,"P",{});var El=l(ve);xi=i(El,"Instantiate a "),Ko=a(El,"CODE",{});var Dh=l(Ko);Ai=i(Dh,"Repository"),Dh.forEach(o),Di=i(El," object with a path to a local Git clone or repository:"),El.forEach(o),ka=c(e),u(nt.$$.fragment,e),ja=c(e),K=a(e,"H3",{class:!0});var kl=l(K);$e=a(kl,"A",{id:!0,class:!0,href:!0});var Oh=l($e);Qo=a(Oh,"SPAN",{});var Sh=l(Qo);u(pt.$$.fragment,Sh),Sh.forEach(o),Oh.forEach(o),Oi=c(kl),Vo=a(kl,"SPAN",{});var Nh=l(Vo);Si=i(Nh,"Commit and push to a cloned repository"),Nh.forEach(o),kl.forEach(o),qa=c(e),Gt=a(e,"P",{});var Rh=l(Gt);Ni=i(Rh,"If you want to commit or push to a cloned repository that belongs to you or your organizations:"),Rh.forEach(o),Pa=c(e),S=a(e,"OL",{});var Qt=l(S);ht=a(Qt,"LI",{});var jl=l(ht);Xo=a(jl,"P",{});var Hh=l(Xo);Ri=i(Hh,"Log in to your Hugging Face account with the following command:"),Hh.forEach(o),Hi=c(jl),u(ct.$$.fragment,jl),jl.forEach(o),Li=c(Qt),Q=a(Qt,"LI",{});var Vt=l(Q);ft=a(Vt,"P",{});var ql=l(ft);Ii=i(ql,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, login with "),Zo=a(ql,"CODE",{});var Lh=l(Zo);Ti=i(Lh,"notebook_login"),Lh.forEach(o),Gi=i(ql,":"),ql.forEach(o),Fi=c(Vt),u(mt.$$.fragment,Vt),Ui=c(Vt),Ft=a(Vt,"P",{});var gp=l(Ft);es=a(gp,"CODE",{});var Ih=l(es);Mi=i(Ih,"notebook_login"),Ih.forEach(o),Bi=i(gp," will launch a widget in your notebook from which you can enter your Hugging Face credentials."),gp.forEach(o),Vt.forEach(o),Yi=c(Qt),ut=a(Qt,"LI",{});var Pl=l(ut);dt=a(Pl,"P",{});var Cl=l(dt);zi=i(Cl,"Instantiate a "),ts=a(Cl,"CODE",{});var Th=l(ts);Wi=i(Th,"Repository"),Th.forEach(o),Ji=i(Cl," class:"),Cl.forEach(o),Ki=c(Pl),u(gt.$$.fragment,Pl),Pl.forEach(o),Qt.forEach(o),Ca=c(e),N=a(e,"P",{});var Xt=l(N);Qi=i(Xt,"You can also attribute a Git username and email to a cloned repository by specifying the "),os=a(Xt,"CODE",{});var Gh=l(os);Vi=i(Gh,"git_user"),Gh.forEach(o),Xi=i(Xt," and "),ss=a(Xt,"CODE",{});var Fh=l(ss);Zi=i(Fh,"git_email"),Fh.forEach(o),en=i(Xt," parameters. When users commit to that repository, Git will be aware of the commit author."),Xt.forEach(o),xa=c(e),u(_t.$$.fragment,e),Aa=c(e),V=a(e,"H3",{class:!0});var xl=l(V);we=a(xl,"A",{id:!0,class:!0,href:!0});var Uh=l(we);as=a(Uh,"SPAN",{});var Mh=l(as);u(yt.$$.fragment,Mh),Mh.forEach(o),Uh.forEach(o),tn=c(xl),ls=a(xl,"SPAN",{});var Bh=l(ls);on=i(Bh,"Branch"),Bh.forEach(o),xl.forEach(o),Da=c(e),j=a(e,"P",{});var Se=l(j);sn=i(Se,"Switch between branches with "),rs=a(Se,"CODE",{});var Yh=l(rs);an=i(Yh,"git_checkout"),Yh.forEach(o),ln=i(Se,". For example, if you want to switch from "),is=a(Se,"CODE",{});var zh=l(is);rn=i(zh,"branch1"),zh.forEach(o),nn=i(Se," to "),ns=a(Se,"CODE",{});var Wh=l(ns);pn=i(Wh,"branch2"),Wh.forEach(o),hn=i(Se,":"),Se.forEach(o),Oa=c(e),u(vt.$$.fragment,e),Sa=c(e),X=a(e,"H3",{class:!0});var Al=l(X);be=a(Al,"A",{id:!0,class:!0,href:!0});var Jh=l(be);ps=a(Jh,"SPAN",{});var Kh=l(ps);u($t.$$.fragment,Kh),Kh.forEach(o),Jh.forEach(o),cn=c(Al),hs=a(Al,"SPAN",{});var Qh=l(hs);fn=i(Qh,"Pull"),Qh.forEach(o),Al.forEach(o),Na=c(e),Ee=a(e,"P",{});var Dl=l(Ee);mn=i(Dl,"Update a current local branch with "),cs=a(Dl,"CODE",{});var Vh=l(cs);un=i(Vh,"git_pull"),Vh.forEach(o),dn=i(Dl,":"),Dl.forEach(o),Ra=c(e),u(wt.$$.fragment,e),Ha=c(e),ke=a(e,"P",{});var Ol=l(ke);gn=i(Ol,"Set "),fs=a(Ol,"CODE",{});var Xh=l(fs);_n=i(Xh,"rebase=True"),Xh.forEach(o),yn=i(Ol," if you want your local commits to occur after your branch is updated with the new commits from the remote:"),Ol.forEach(o),La=c(e),u(bt.$$.fragment,e),Ia=c(e),Z=a(e,"H3",{class:!0});var Sl=l(Z);je=a(Sl,"A",{id:!0,class:!0,href:!0});var Zh=l(je);ms=a(Zh,"SPAN",{});var ec=l(ms);u(Et.$$.fragment,ec),ec.forEach(o),Zh.forEach(o),vn=c(Sl),Ut=a(Sl,"SPAN",{});var _p=l(Ut);us=a(_p,"CODE",{});var tc=l(us);$n=i(tc,"commit"),tc.forEach(o),wn=i(_p," context manager"),_p.forEach(o),Sl.forEach(o),Ta=c(e),q=a(e,"P",{});var Ne=l(q);bn=i(Ne,"The "),ds=a(Ne,"CODE",{});var oc=l(ds);En=i(oc,"commit"),oc.forEach(o),kn=i(Ne," context manager is a simple utility that handles four of the most common Git commands: pull, add, commit, and push. "),gs=a(Ne,"CODE",{});var sc=l(gs);jn=i(sc,"git-lfs"),sc.forEach(o),qn=i(Ne," automatically tracks any file larger than 10MB. In the following example, the "),_s=a(Ne,"CODE",{});var ac=l(_s);Pn=i(ac,"commit"),ac.forEach(o),Cn=i(Ne," context manager:"),Ne.forEach(o),Ga=c(e),P=a(e,"OL",{});var Re=l(P);kt=a(Re,"LI",{});var Nl=l(kt);xn=i(Nl,"Pulls from the "),ys=a(Nl,"CODE",{});var lc=l(ys);An=i(lc,"text-files"),lc.forEach(o),Dn=i(Nl," repository."),Nl.forEach(o),On=c(Re),jt=a(Re,"LI",{});var Rl=l(jt);Sn=i(Rl,"Adds a change made to "),vs=a(Rl,"CODE",{});var rc=l(vs);Nn=i(rc,"file.txt"),rc.forEach(o),Rn=i(Rl,"."),Rl.forEach(o),Hn=c(Re),$s=a(Re,"LI",{});var ic=l($s);Ln=i(ic,"Commits the change."),ic.forEach(o),In=c(Re),qt=a(Re,"LI",{});var Hl=l(qt);Tn=i(Hl,"Pushes the change to the "),ws=a(Hl,"CODE",{});var nc=l(ws);Gn=i(nc,"text-files"),nc.forEach(o),Fn=i(Hl," repository."),Hl.forEach(o),Re.forEach(o),Fa=c(e),u(Pt.$$.fragment,e),Ua=c(e),Mt=a(e,"P",{});var pc=l(Mt);Un=i(pc,"Here is another example of how to save and upload a file to a repository:"),pc.forEach(o),Ma=c(e),u(Ct.$$.fragment,e),Ba=c(e),qe=a(e,"P",{});var Ll=l(qe);Mn=i(Ll,"Set "),bs=a(Ll,"CODE",{});var hc=l(bs);Bn=i(hc,"blocking=False"),hc.forEach(o),Yn=i(Ll," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while you push your commits."),Ll.forEach(o),Ya=c(e),u(xt.$$.fragment,e),za=c(e),Pe=a(e,"P",{});var Il=l(Pe);zn=i(Il,"You can check the status of your push with the "),Es=a(Il,"CODE",{});var cc=l(Es);Wn=i(cc,"command_queue"),cc.forEach(o),Jn=i(Il," property:"),Il.forEach(o),Wa=c(e),u(At.$$.fragment,e),Ja=c(e),Ce=a(e,"P",{});var Tl=l(Ce);Kn=i(Tl,"When "),ks=a(Tl,"CODE",{});var fc=l(ks);Qn=i(fc,"blocking=False"),fc.forEach(o),Vn=i(Tl,", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Tl.forEach(o),Ka=c(e),u(Dt.$$.fragment,e),Qa=c(e),ee=a(e,"H3",{class:!0});var Gl=l(ee);xe=a(Gl,"A",{id:!0,class:!0,href:!0});var mc=l(xe);js=a(mc,"SPAN",{});var uc=l(js);u(Ot.$$.fragment,uc),uc.forEach(o),mc.forEach(o),Xn=c(Gl),qs=a(Gl,"SPAN",{});var dc=l(qs);Ps=a(dc,"CODE",{});var gc=l(Ps);Zn=i(gc,"push_to_hub"),gc.forEach(o),dc.forEach(o),Gl.forEach(o),Va=c(e),w=a(e,"P",{});var C=l(w);ep=i(C,"The "),Cs=a(C,"CODE",{});var _c=l(Cs);tp=i(_c,"Repository"),_c.forEach(o),op=i(C," class also has a "),xs=a(C,"CODE",{});var yc=l(xs);sp=i(yc,"push_to_hub"),yc.forEach(o),ap=i(C," utility to add files, make a commit, and push them to a repository. Unlike the "),As=a(C,"CODE",{});var vc=l(As);lp=i(vc,"commit"),vc.forEach(o),rp=i(C," context manager, "),Ds=a(C,"CODE",{});var $c=l(Ds);ip=i($c,"push_to_hub"),$c.forEach(o),np=i(C," requires you to pull from a repository first, save the files, and then call "),Os=a(C,"CODE",{});var wc=l(Os);pp=i(wc,"push_to_hub"),wc.forEach(o),hp=i(C,"."),C.forEach(o),Xa=c(e),u(St.$$.fragment,e),Za=c(e),te=a(e,"H2",{class:!0});var Fl=l(te);Ae=a(Fl,"A",{id:!0,class:!0,href:!0});var bc=l(Ae);Ss=a(bc,"SPAN",{});var Ec=l(Ss);u(Nt.$$.fragment,Ec),Ec.forEach(o),bc.forEach(o),cp=c(Fl),Ns=a(Fl,"SPAN",{});var kc=l(Ns);fp=i(kc,"Upload very large files"),kc.forEach(o),Fl.forEach(o),el=c(e),Bt=a(e,"P",{});var jc=l(Bt);mp=i(jc,"For huge files (>5GB), you need to install a custom transfer agent for Git-LFS:"),jc.forEach(o),tl=c(e),u(Rt.$$.fragment,e),ol=c(e),Yt=a(e,"P",{});var qc=l(Yt);up=i(qc,"You should install this for each model repository that contains a model file. Once installed, you are now able to push files larger than 5GB."),qc.forEach(o),this.h()},h(){f(H,"name","hf:doc:metadata"),f(H,"content",JSON.stringify(Rc)),f(oe,"id","title:-how-to-create-repositories-and-upload-files-to-the-hub"),f(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(oe,"href","#title:-how-to-create-repositories-and-upload-files-to-the-hub"),f(L,"class","relative group"),f(se,"id","how-to-integrate-upstream-utilities-in-your-library"),f(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(se,"href","#how-to-integrate-upstream-utilities-in-your-library"),f(I,"class","relative group"),f(le,"id","huggingfacehub-repositorymanagement-methods"),f(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(le,"href","#huggingfacehub-repositorymanagement-methods"),f(T,"class","relative group"),f(ie,"id","list-and-filter"),f(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ie,"href","#list-and-filter"),f(G,"class","relative group"),f(Me,"href","http://hf.co/models"),f(Me,"rel","nofollow"),Dc(Lt.src,vp="/docs/assets/hub/hub_filters.png")||f(Lt,"src",vp),f(Lt,"alt","/docs/assets/hub/hub_filters.png"),f(he,"id","inspect-model-or-dataset-metadata"),f(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(he,"href","#inspect-model-or-dataset-metadata"),f(F,"class","relative group"),f(ce,"id","create-a-repository"),f(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ce,"href","#create-a-repository"),f(U,"class","relative group"),f(fe,"id","delete-a-repository"),f(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(fe,"href","#delete-a-repository"),f(M,"class","relative group"),f(de,"id","change-repository-visibility"),f(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(de,"href","#change-repository-visibility"),f(B,"class","relative group"),f(ge,"id","repository"),f(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ge,"href","#repository"),f(Y,"class","relative group"),f(ot,"href","https://git-lfs.github.com/"),f(ot,"rel","nofollow"),f(_e,"id","clone-a-repository"),f(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(_e,"href","#clone-a-repository"),f(z,"class","relative group"),f(ye,"id","using-a-local-clone"),f(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ye,"href","#using-a-local-clone"),f(J,"class","relative group"),f($e,"id","commit-and-push-to-a-cloned-repository"),f($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f($e,"href","#commit-and-push-to-a-cloned-repository"),f(K,"class","relative group"),f(we,"id","branch"),f(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(we,"href","#branch"),f(V,"class","relative group"),f(be,"id","pull"),f(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(be,"href","#pull"),f(X,"class","relative group"),f(je,"id","commit-context-manager"),f(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(je,"href","#commit-context-manager"),f(Z,"class","relative group"),f(xe,"id","pushtohub"),f(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(xe,"href","#pushtohub"),f(ee,"class","relative group"),f(Ae,"id","upload-very-large-files"),f(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ae,"href","#upload-very-large-files"),f(te,"class","relative group")},m(e,n){t(document.head,H),p(e,Hs,n),p(e,Ls,n),p(e,Is,n),p(e,L,n),t(L,oe),t(oe,Zt),d(He,Zt,null),t(L,Ul),t(L,eo),t(eo,Ml),p(e,Ts,n),p(e,I,n),t(I,se),t(se,to),d(Le,to,null),t(I,Bl),t(I,oo),t(oo,Yl),p(e,Gs,n),p(e,Ie,n),t(Ie,so),t(so,zl),t(Ie,Wl),p(e,Fs,n),p(e,ae,n),t(ae,Te),t(Te,Jl),t(Te,ao),t(ao,Kl),t(Te,Ql),t(ae,Vl),t(ae,Ge),t(Ge,Xl),t(Ge,lo),t(lo,Zl),t(Ge,er),p(e,Us,n),p(e,T,n),t(T,le),t(le,ro),d(Fe,ro,null),t(T,tr),t(T,io),t(io,or),p(e,Ms,n),p(e,re,n),t(re,sr),t(re,no),t(no,ar),t(re,lr),p(e,Bs,n),p(e,E,n),t(E,po),t(po,rr),t(E,ir),t(E,ho),t(ho,nr),t(E,pr),t(E,co),t(co,hr),t(E,cr),t(E,fo),t(fo,fr),p(e,Ys,n),p(e,G,n),t(G,ie),t(ie,mo),d(Ue,mo,null),t(G,mr),t(G,uo),t(uo,ur),p(e,zs,n),p(e,x,n),t(x,dr),t(x,go),t(go,gr),t(x,_r),t(x,_o),t(_o,yr),t(x,vr),p(e,Ws,n),p(e,ne,n),t(ne,$r),t(ne,Me),t(Me,wr),t(ne,br),p(e,Js,n),p(e,Ht,n),t(Ht,Lt),p(e,Ks,n),d(Be,e,n),p(e,Qs,n),p(e,pe,n),t(pe,Er),t(pe,yo),t(yo,kr),t(pe,jr),p(e,Vs,n),d(Ye,e,n),p(e,Xs,n),p(e,F,n),t(F,he),t(he,vo),d(ze,vo,null),t(F,qr),t(F,$o),t($o,Pr),p(e,Zs,n),p(e,It,n),t(It,Cr),p(e,ea,n),d(We,e,n),p(e,ta,n),p(e,U,n),t(U,ce),t(ce,wo),d(Je,wo,null),t(U,xr),t(U,bo),t(bo,Ar),p(e,oa,n),p(e,A,n),t(A,Dr),t(A,Eo),t(Eo,Or),t(A,Sr),t(A,ko),t(ko,Nr),t(A,Rr),p(e,sa,n),d(Ke,e,n),p(e,aa,n),p(e,M,n),t(M,fe),t(fe,jo),d(Qe,jo,null),t(M,Hr),t(M,qo),t(qo,Lr),p(e,la,n),p(e,me,n),t(me,Ir),t(me,Po),t(Po,Tr),t(me,Gr),p(e,ra,n),p(e,k,n),t(k,Fr),t(k,Co),t(Co,Ur),t(k,Mr),t(k,xo),t(xo,Br),t(k,Yr),t(k,Ao),t(Ao,zr),t(k,Wr),p(e,ia,n),d(Ve,e,n),p(e,na,n),p(e,ue,n),t(ue,Jr),t(ue,Do),t(Do,Kr),t(ue,Qr),p(e,pa,n),d(Xe,e,n),p(e,ha,n),p(e,B,n),t(B,de),t(de,Oo),d(Ze,Oo,null),t(B,Vr),t(B,So),t(So,Xr),p(e,ca,n),p(e,Tt,n),t(Tt,Zr),p(e,fa,n),d(et,e,n),p(e,ma,n),p(e,Y,n),t(Y,ge),t(ge,No),d(tt,No,null),t(Y,ei),t(Y,Ro),t(Ro,ti),p(e,ua,n),p(e,b,n),t(b,oi),t(b,Ho),t(Ho,si),t(b,ai),t(b,Lo),t(Lo,li),t(b,ri),t(b,ot),t(ot,ii),t(b,ni),t(b,Io),t(Io,pi),t(b,hi),p(e,da,n),p(e,z,n),t(z,_e),t(_e,To),d(st,To,null),t(z,ci),t(z,Go),t(Go,fi),p(e,ga,n),p(e,D,n),t(D,mi),t(D,Fo),t(Fo,ui),t(D,di),t(D,Uo),t(Uo,gi),t(D,_i),p(e,_a,n),d(at,e,n),p(e,ya,n),p(e,W,n),t(W,Mo),t(Mo,yi),t(W,vi),t(W,Bo),t(Bo,$i),t(W,wi),p(e,va,n),d(lt,e,n),p(e,$a,n),p(e,O,n),t(O,bi),t(O,Yo),t(Yo,Ei),t(O,ki),t(O,zo),t(zo,ji),t(O,qi),p(e,wa,n),d(rt,e,n),p(e,ba,n),p(e,J,n),t(J,ye),t(ye,Wo),d(it,Wo,null),t(J,Pi),t(J,Jo),t(Jo,Ci),p(e,Ea,n),p(e,ve,n),t(ve,xi),t(ve,Ko),t(Ko,Ai),t(ve,Di),p(e,ka,n),d(nt,e,n),p(e,ja,n),p(e,K,n),t(K,$e),t($e,Qo),d(pt,Qo,null),t(K,Oi),t(K,Vo),t(Vo,Si),p(e,qa,n),p(e,Gt,n),t(Gt,Ni),p(e,Pa,n),p(e,S,n),t(S,ht),t(ht,Xo),t(Xo,Ri),t(ht,Hi),d(ct,ht,null),t(S,Li),t(S,Q),t(Q,ft),t(ft,Ii),t(ft,Zo),t(Zo,Ti),t(ft,Gi),t(Q,Fi),d(mt,Q,null),t(Q,Ui),t(Q,Ft),t(Ft,es),t(es,Mi),t(Ft,Bi),t(S,Yi),t(S,ut),t(ut,dt),t(dt,zi),t(dt,ts),t(ts,Wi),t(dt,Ji),t(ut,Ki),d(gt,ut,null),p(e,Ca,n),p(e,N,n),t(N,Qi),t(N,os),t(os,Vi),t(N,Xi),t(N,ss),t(ss,Zi),t(N,en),p(e,xa,n),d(_t,e,n),p(e,Aa,n),p(e,V,n),t(V,we),t(we,as),d(yt,as,null),t(V,tn),t(V,ls),t(ls,on),p(e,Da,n),p(e,j,n),t(j,sn),t(j,rs),t(rs,an),t(j,ln),t(j,is),t(is,rn),t(j,nn),t(j,ns),t(ns,pn),t(j,hn),p(e,Oa,n),d(vt,e,n),p(e,Sa,n),p(e,X,n),t(X,be),t(be,ps),d($t,ps,null),t(X,cn),t(X,hs),t(hs,fn),p(e,Na,n),p(e,Ee,n),t(Ee,mn),t(Ee,cs),t(cs,un),t(Ee,dn),p(e,Ra,n),d(wt,e,n),p(e,Ha,n),p(e,ke,n),t(ke,gn),t(ke,fs),t(fs,_n),t(ke,yn),p(e,La,n),d(bt,e,n),p(e,Ia,n),p(e,Z,n),t(Z,je),t(je,ms),d(Et,ms,null),t(Z,vn),t(Z,Ut),t(Ut,us),t(us,$n),t(Ut,wn),p(e,Ta,n),p(e,q,n),t(q,bn),t(q,ds),t(ds,En),t(q,kn),t(q,gs),t(gs,jn),t(q,qn),t(q,_s),t(_s,Pn),t(q,Cn),p(e,Ga,n),p(e,P,n),t(P,kt),t(kt,xn),t(kt,ys),t(ys,An),t(kt,Dn),t(P,On),t(P,jt),t(jt,Sn),t(jt,vs),t(vs,Nn),t(jt,Rn),t(P,Hn),t(P,$s),t($s,Ln),t(P,In),t(P,qt),t(qt,Tn),t(qt,ws),t(ws,Gn),t(qt,Fn),p(e,Fa,n),d(Pt,e,n),p(e,Ua,n),p(e,Mt,n),t(Mt,Un),p(e,Ma,n),d(Ct,e,n),p(e,Ba,n),p(e,qe,n),t(qe,Mn),t(qe,bs),t(bs,Bn),t(qe,Yn),p(e,Ya,n),d(xt,e,n),p(e,za,n),p(e,Pe,n),t(Pe,zn),t(Pe,Es),t(Es,Wn),t(Pe,Jn),p(e,Wa,n),d(At,e,n),p(e,Ja,n),p(e,Ce,n),t(Ce,Kn),t(Ce,ks),t(ks,Qn),t(Ce,Vn),p(e,Ka,n),d(Dt,e,n),p(e,Qa,n),p(e,ee,n),t(ee,xe),t(xe,js),d(Ot,js,null),t(ee,Xn),t(ee,qs),t(qs,Ps),t(Ps,Zn),p(e,Va,n),p(e,w,n),t(w,ep),t(w,Cs),t(Cs,tp),t(w,op),t(w,xs),t(xs,sp),t(w,ap),t(w,As),t(As,lp),t(w,rp),t(w,Ds),t(Ds,ip),t(w,np),t(w,Os),t(Os,pp),t(w,hp),p(e,Xa,n),d(St,e,n),p(e,Za,n),p(e,te,n),t(te,Ae),t(Ae,Ss),d(Nt,Ss,null),t(te,cp),t(te,Ns),t(Ns,fp),p(e,el,n),p(e,Bt,n),t(Bt,mp),p(e,tl,n),d(Rt,e,n),p(e,ol,n),p(e,Yt,n),t(Yt,up),sl=!0},p:Oc,i(e){sl||(g(He.$$.fragment,e),g(Le.$$.fragment,e),g(Fe.$$.fragment,e),g(Ue.$$.fragment,e),g(Be.$$.fragment,e),g(Ye.$$.fragment,e),g(ze.$$.fragment,e),g(We.$$.fragment,e),g(Je.$$.fragment,e),g(Ke.$$.fragment,e),g(Qe.$$.fragment,e),g(Ve.$$.fragment,e),g(Xe.$$.fragment,e),g(Ze.$$.fragment,e),g(et.$$.fragment,e),g(tt.$$.fragment,e),g(st.$$.fragment,e),g(at.$$.fragment,e),g(lt.$$.fragment,e),g(rt.$$.fragment,e),g(it.$$.fragment,e),g(nt.$$.fragment,e),g(pt.$$.fragment,e),g(ct.$$.fragment,e),g(mt.$$.fragment,e),g(gt.$$.fragment,e),g(_t.$$.fragment,e),g(yt.$$.fragment,e),g(vt.$$.fragment,e),g($t.$$.fragment,e),g(wt.$$.fragment,e),g(bt.$$.fragment,e),g(Et.$$.fragment,e),g(Pt.$$.fragment,e),g(Ct.$$.fragment,e),g(xt.$$.fragment,e),g(At.$$.fragment,e),g(Dt.$$.fragment,e),g(Ot.$$.fragment,e),g(St.$$.fragment,e),g(Nt.$$.fragment,e),g(Rt.$$.fragment,e),sl=!0)},o(e){_(He.$$.fragment,e),_(Le.$$.fragment,e),_(Fe.$$.fragment,e),_(Ue.$$.fragment,e),_(Be.$$.fragment,e),_(Ye.$$.fragment,e),_(ze.$$.fragment,e),_(We.$$.fragment,e),_(Je.$$.fragment,e),_(Ke.$$.fragment,e),_(Qe.$$.fragment,e),_(Ve.$$.fragment,e),_(Xe.$$.fragment,e),_(Ze.$$.fragment,e),_(et.$$.fragment,e),_(tt.$$.fragment,e),_(st.$$.fragment,e),_(at.$$.fragment,e),_(lt.$$.fragment,e),_(rt.$$.fragment,e),_(it.$$.fragment,e),_(nt.$$.fragment,e),_(pt.$$.fragment,e),_(ct.$$.fragment,e),_(mt.$$.fragment,e),_(gt.$$.fragment,e),_(_t.$$.fragment,e),_(yt.$$.fragment,e),_(vt.$$.fragment,e),_($t.$$.fragment,e),_(wt.$$.fragment,e),_(bt.$$.fragment,e),_(Et.$$.fragment,e),_(Pt.$$.fragment,e),_(Ct.$$.fragment,e),_(xt.$$.fragment,e),_(At.$$.fragment,e),_(Dt.$$.fragment,e),_(Ot.$$.fragment,e),_(St.$$.fragment,e),_(Nt.$$.fragment,e),_(Rt.$$.fragment,e),sl=!1},d(e){o(H),e&&o(Hs),e&&o(Ls),e&&o(Is),e&&o(L),y(He),e&&o(Ts),e&&o(I),y(Le),e&&o(Gs),e&&o(Ie),e&&o(Fs),e&&o(ae),e&&o(Us),e&&o(T),y(Fe),e&&o(Ms),e&&o(re),e&&o(Bs),e&&o(E),e&&o(Ys),e&&o(G),y(Ue),e&&o(zs),e&&o(x),e&&o(Ws),e&&o(ne),e&&o(Js),e&&o(Ht),e&&o(Ks),y(Be,e),e&&o(Qs),e&&o(pe),e&&o(Vs),y(Ye,e),e&&o(Xs),e&&o(F),y(ze),e&&o(Zs),e&&o(It),e&&o(ea),y(We,e),e&&o(ta),e&&o(U),y(Je),e&&o(oa),e&&o(A),e&&o(sa),y(Ke,e),e&&o(aa),e&&o(M),y(Qe),e&&o(la),e&&o(me),e&&o(ra),e&&o(k),e&&o(ia),y(Ve,e),e&&o(na),e&&o(ue),e&&o(pa),y(Xe,e),e&&o(ha),e&&o(B),y(Ze),e&&o(ca),e&&o(Tt),e&&o(fa),y(et,e),e&&o(ma),e&&o(Y),y(tt),e&&o(ua),e&&o(b),e&&o(da),e&&o(z),y(st),e&&o(ga),e&&o(D),e&&o(_a),y(at,e),e&&o(ya),e&&o(W),e&&o(va),y(lt,e),e&&o($a),e&&o(O),e&&o(wa),y(rt,e),e&&o(ba),e&&o(J),y(it),e&&o(Ea),e&&o(ve),e&&o(ka),y(nt,e),e&&o(ja),e&&o(K),y(pt),e&&o(qa),e&&o(Gt),e&&o(Pa),e&&o(S),y(ct),y(mt),y(gt),e&&o(Ca),e&&o(N),e&&o(xa),y(_t,e),e&&o(Aa),e&&o(V),y(yt),e&&o(Da),e&&o(j),e&&o(Oa),y(vt,e),e&&o(Sa),e&&o(X),y($t),e&&o(Na),e&&o(Ee),e&&o(Ra),y(wt,e),e&&o(Ha),e&&o(ke),e&&o(La),y(bt,e),e&&o(Ia),e&&o(Z),y(Et),e&&o(Ta),e&&o(q),e&&o(Ga),e&&o(P),e&&o(Fa),y(Pt,e),e&&o(Ua),e&&o(Mt),e&&o(Ma),y(Ct,e),e&&o(Ba),e&&o(qe),e&&o(Ya),y(xt,e),e&&o(za),e&&o(Pe),e&&o(Wa),y(At,e),e&&o(Ja),e&&o(Ce),e&&o(Ka),y(Dt,e),e&&o(Qa),e&&o(ee),y(Ot),e&&o(Va),e&&o(w),e&&o(Xa),y(St,e),e&&o(Za),e&&o(te),y(Nt),e&&o(el),e&&o(Bt),e&&o(tl),y(Rt,e),e&&o(ol),e&&o(Yt)}}}const Rc={local:"how-to-integrate-upstream-utilities-in-your-library",sections:[{local:"huggingfacehub-repositorymanagement-methods",sections:[{local:"list-and-filter",title:"List and filter"},{local:"inspect-model-or-dataset-metadata",title:"Inspect model or dataset metadata"},{local:"create-a-repository",title:"Create a repository"},{local:"delete-a-repository",title:"Delete a repository"},{local:"change-repository-visibility",title:"Change repository visibility"}],title:"huggingface_hub repository-management methods"},{local:"repository",sections:[{local:"clone-a-repository",title:"Clone a repository"},{local:"using-a-local-clone",title:"Using a local clone"},{local:"commit-and-push-to-a-cloned-repository",title:"Commit and push to a cloned repository"},{local:"branch",title:"Branch"},{local:"pull",title:"Pull"},{local:"commit-context-manager",title:"`commit` context manager"},{local:"pushtohub",title:"`push_to_hub`"}],title:"Repository "},{local:"upload-very-large-files",title:"Upload very large files"}],title:"How to integrate upstream utilities in your library"};function Hc(yp){return Sc(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Gc extends Pc{constructor(H){super();Cc(this,H,Hc,Nc,xc,{})}}export{Gc as default,Rc as metadata};
