import{S as Mg,i as Vg,s as zg,e as a,k as l,w as d,t as s,M as Rg,c as n,d as t,m as c,a as r,x as f,h as i,b as g,F as e,g as y,y as u,q as m,o as _,B as b,v as Sg}from"../../chunks/vendor-7b1da053.js";import{T as Kl}from"../../chunks/Tip-41a95816.js";import{D as x}from"../../chunks/Docstring-f1352b16.js";import{C as he}from"../../chunks/CodeBlock-5f39b59e.js";import{I as Ql}from"../../chunks/IconCopyLink-d24e9a6f.js";function Gg(He){let A,I,N,k,q,w,O,T,C,F,H,P,L,R,S;return{c(){A=a("p"),I=s("Raises the following errors:"),N=l(),k=a("ul"),q=a("li"),w=a("a"),O=a("code"),T=s("HTTPError"),C=s(`
if the HuggingFace API returned an error`),F=l(),H=a("li"),P=a("a"),L=a("code"),R=s("ValueError"),S=s(`
if some parameter value is invalid`),this.h()},l(D){A=n(D,"P",{});var j=r(A);I=i(j,"Raises the following errors:"),j.forEach(t),N=c(D),k=n(D,"UL",{});var Q=r(k);q=n(Q,"LI",{});var J=r(q);w=n(J,"A",{href:!0,rel:!0});var $e=r(w);O=n($e,"CODE",{});var ye=r(O);T=i(ye,"HTTPError"),ye.forEach(t),$e.forEach(t),C=i(J,`
if the HuggingFace API returned an error`),J.forEach(t),F=c(Q),H=n(Q,"LI",{});var Z=r(H);P=n(Z,"A",{href:!0,rel:!0});var ee=r(P);L=n(ee,"CODE",{});var Ee=r(L);R=i(Ee,"ValueError"),Ee.forEach(t),ee.forEach(t),S=i(Z,`
if some parameter value is invalid`),Z.forEach(t),Q.forEach(t),this.h()},h(){g(w,"href","https://2.python-requests.org/en/master/api/#requests.HTTPError"),g(w,"rel","nofollow"),g(P,"href","https://docs.python.org/3/library/exceptions.html#ValueError"),g(P,"rel","nofollow")},m(D,j){y(D,A,j),e(A,I),y(D,N,j),y(D,k,j),e(k,q),e(q,w),e(w,O),e(O,T),e(q,C),e(k,F),e(k,H),e(H,P),e(P,L),e(L,R),e(H,S)},d(D){D&&t(A),D&&t(N),D&&t(k)}}}function Wg(He){let A,I,N,k,q,w,O,T,C;return{c(){A=a("p"),I=s("Raises the following errors:"),N=l(),k=a("ul"),q=a("li"),w=a("a"),O=a("code"),T=s("HTTPError"),C=s(`
if credentials are invalid`),this.h()},l(F){A=n(F,"P",{});var H=r(A);I=i(H,"Raises the following errors:"),H.forEach(t),N=c(F),k=n(F,"UL",{});var P=r(k);q=n(P,"LI",{});var L=r(q);w=n(L,"A",{href:!0,rel:!0});var R=r(w);O=n(R,"CODE",{});var S=r(O);T=i(S,"HTTPError"),S.forEach(t),R.forEach(t),C=i(L,`
if credentials are invalid`),L.forEach(t),P.forEach(t),this.h()},h(){g(w,"href","https://2.python-requests.org/en/master/api/#requests.HTTPError"),g(w,"rel","nofollow")},m(F,H){y(F,A,H),e(A,I),y(F,N,H),y(F,k,H),e(k,q),e(q,w),e(w,O),e(O,T),e(q,C)},d(F){F&&t(A),F&&t(N),F&&t(k)}}}function Bg(He){let A,I,N,k,q,w,O,T,C,F,H,P,L,R,S;return{c(){A=a("p"),I=s("Raises the following errors:"),N=l(),k=a("ul"),q=a("li"),w=a("a"),O=a("code"),T=s("HTTPError"),C=s(`
if the HuggingFace API returned an error`),F=l(),H=a("li"),P=a("a"),L=a("code"),R=s("ValueError"),S=s(`
if some parameter value is invalid`),this.h()},l(D){A=n(D,"P",{});var j=r(A);I=i(j,"Raises the following errors:"),j.forEach(t),N=c(D),k=n(D,"UL",{});var Q=r(k);q=n(Q,"LI",{});var J=r(q);w=n(J,"A",{href:!0,rel:!0});var $e=r(w);O=n($e,"CODE",{});var ye=r(O);T=i(ye,"HTTPError"),ye.forEach(t),$e.forEach(t),C=i(J,`
if the HuggingFace API returned an error`),J.forEach(t),F=c(Q),H=n(Q,"LI",{});var Z=r(H);P=n(Z,"A",{href:!0,rel:!0});var ee=r(P);L=n(ee,"CODE",{});var Ee=r(L);R=i(Ee,"ValueError"),Ee.forEach(t),ee.forEach(t),S=i(Z,`
if some parameter value is invalid`),Z.forEach(t),Q.forEach(t),this.h()},h(){g(w,"href","https://2.python-requests.org/en/master/api/#requests.HTTPError"),g(w,"rel","nofollow"),g(P,"href","https://docs.python.org/3/library/exceptions.html#ValueError"),g(P,"rel","nofollow")},m(D,j){y(D,A,j),e(A,I),y(D,N,j),y(D,k,j),e(k,q),e(q,w),e(w,O),e(O,T),e(q,C),e(k,F),e(k,H),e(H,P),e(P,L),e(L,R),e(H,S)},d(D){D&&t(A),D&&t(N),D&&t(k)}}}function Kg(He){let A,I,N,k,q,w,O,T,C,F,H,P,L,R,S,D,j,Q,J,$e,ye,Z,ee,Ee,za,at,Ra,De,Hn,go,Dn,xn,Sa,nt,Ga,xe,qn,po,Nn,Fn,Wa,p,rt,Pn,te,st,jn,ho,On,Ln,fo,Tn,In,uo,eo,Cn,it,Un,Mn,G,lt,Vn,mo,zn,Rn,_o,Sn,Gn,bo,Wn,Bn,vo,to,Kn,ct,Qn,Jn,de,gt,Xn,$o,Yn,Zn,qe,er,oe,pt,tr,yo,or,ar,Eo,nr,rr,ko,oo,sr,ht,ir,lr,Ne,dt,cr,wo,gr,pr,Fe,ft,hr,Ao,dr,fr,Pe,ut,ur,Ho,mr,_r,je,mt,br,Do,vr,$r,Oe,_t,yr,xo,Er,kr,Le,bt,wr,qo,Ar,Hr,ae,vt,Dr,No,xr,qr,Fo,Nr,Fr,Po,ao,Pr,$t,jr,Or,fe,yt,Lr,jo,Tr,Ir,Te,Cr,Ie,Et,Ur,Oo,Mr,Vr,W,kt,zr,Lo,Rr,Sr,To,Gr,Wr,Io,Br,Kr,Co,no,Qr,wt,Jr,Xr,B,At,Yr,Uo,Zr,es,Ht,ts,Dt,os,as,ns,Mo,rs,ss,Vo,ro,is,xt,ls,cs,Ce,qt,gs,zo,ps,hs,Ue,Nt,ds,Ro,fs,us,ne,Ft,ms,So,_s,bs,Go,vs,$s,Wo,so,ys,Pt,Es,ks,K,jt,ws,Bo,As,Hs,Me,Ds,Ko,xs,qs,Ot,Ns,Ve,Lt,Fs,Qo,Ps,Ba,ke,ze,Jo,Tt,js,Xo,Os,Ka,It,Yo,Ls,Ts,Qa,Re,Is,io,Cs,Us,Ja,X,Ct,Ms,Se,Ut,Vs,Zo,zs,Rs,Ge,Mt,Ss,ea,Gs,Ws,We,Vt,Bs,ta,Ks,Xa,we,Be,oa,zt,Qs,aa,Js,Ya,Ke,Xs,na,Ys,Zs,Za,$,Rt,ei,ra,ti,oi,ce,ai,sa,ni,ri,ia,si,ii,la,li,ci,gi,St,pi,Y,hi,ca,di,fi,ga,ui,mi,pa,_i,bi,ha,vi,$i,yi,Gt,Ei,U,ki,da,wi,Ai,fa,Hi,Di,ua,xi,qi,ma,Ni,Fi,_a,Pi,ji,Oi,Wt,Li,ge,Ti,ba,Ii,Ci,va,Ui,Mi,$a,Vi,zi,Ri,Bt,Si,pe,Gi,ya,Wi,Bi,Ea,Ki,Qi,ka,Ji,Xi,Yi,Kt,Zi,M,el,wa,tl,ol,Aa,al,nl,Ha,rl,sl,Da,il,ll,xa,cl,gl,pl,Qt,hl,V,dl,qa,fl,ul,Na,ml,_l,Fa,bl,vl,Pa,$l,yl,ja,El,kl,wl,Jt,Al,z,Hl,Oa,Dl,xl,La,ql,Nl,Ta,Fl,Pl,Ia,jl,Ol,Ca,Ll,Tl,Il,Xt,en,Ae,Yt,Cl,Ua,Ul,tn;return w=new Ql({}),at=new he({props:{code:`from huggingface_hub import list_models

models = list_models()`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> list_models

models = list_models()`}}),nt=new he({props:{code:`from huggingface_hub import HfApi

hf_api = HfApi()
models = hf_api.list_models()`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi

hf_api = HfApi()
models = hf_api.list_models()`}}),rt=new x({props:{name:"class huggingface_hub.HfApi",anchor:"huggingface_hub.HfApi",parameters:[{name:"endpoint",val:" = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L455"}}),st=new x({props:{name:"create_repo",anchor:"huggingface_hub.HfApi.create_repo",parameters:[{name:"repo_id",val:": str = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"exist_ok",val:": typing.Optional[bool] = False"},{name:"space_sdk",val:": typing.Optional[str] = None"},{name:"name",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1215",parametersDescription:[{anchor:"huggingface_hub.HfApi.create_repo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>Version added: 0.4.0</p>

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.create_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.create_repo.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether the model repo should be private.`,name:"private"},{anchor:"huggingface_hub.HfApi.create_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.create_repo.exist_ok",description:`<strong>exist_ok</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, do not raise an error if repo already exists.`,name:"exist_ok"},{anchor:"huggingface_hub.HfApi.create_repo.space_sdk",description:`<strong>space_sdk</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Choice of SDK to use if repo_type is &#x201C;space&#x201D;. Can be
&#x201C;streamlit&#x201D;, &#x201C;gradio&#x201D;, or &#x201C;static&#x201D;.`,name:"space_sdk"}],returnDescription:`
<p>URL to the newly created repo.</p>
`,returnType:`
<p><code>str</code></p>
`}}),lt=new x({props:{name:"dataset_info",anchor:"huggingface_hub.HfApi.dataset_info",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1169",parametersDescription:[{anchor:"huggingface_hub.HfApi.dataset_info.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.dataset_info.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The revision of the dataset repository from which to get the
information.`,name:"revision"},{anchor:"huggingface_hub.HfApi.dataset_info.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.dataset_info.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Whether to set a timeout for the request to the hub.`,name:"timeout"}],returnDescription:`
<p>The dataset repository information.</p>
`,returnType:`
<p><code>DatasetInfo</code></p>
`}}),gt=new x({props:{name:"delete_file",anchor:"huggingface_hub.HfApi.delete_file",parameters:[{name:"path_in_repo",val:": str"},{name:"repo_id",val:": str"},{name:"token",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1731",parametersDescription:[{anchor:"huggingface_hub.HfApi.delete_file.path_in_repo",description:`<strong>path_in_repo</strong> (<code>str</code>) &#x2014;
Relative filepath in the repo, for example:
<code>&quot;checkpoints/1fec34a/weights.bin&quot;</code>`,name:"path_in_repo"},{anchor:"huggingface_hub.HfApi.delete_file.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The repository from which the file will be deleted, for example:
<code>&quot;username/custom_transformers&quot;</code>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.delete_file.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Authentication token, obtained with :function:<code>HfApi.login</code>
method. Will default to the stored token.`,name:"token"},{anchor:"huggingface_hub.HfApi.delete_file.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if the file is in a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if in a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.delete_file.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The git revision to commit from. Defaults to the head of the
<code>&quot;main&quot;</code> branch.`,name:"revision"}]}}),qe=new Kl({props:{$$slots:{default:[Gg]},$$scope:{ctx:He}}}),pt=new x({props:{name:"delete_repo",anchor:"huggingface_hub.HfApi.delete_repo",parameters:[{name:"repo_id",val:": str = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"name",val:": str = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1355",parametersDescription:[{anchor:"huggingface_hub.HfApi.delete_repo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>Version added: 0.4.0</p>

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.delete_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.delete_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model.`,name:"repo_type"}]}}),dt=new x({props:{name:"get_dataset_tags",anchor:"huggingface_hub.HfApi.get_dataset_tags",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L623"}}),ft=new x({props:{name:"get_full_repo_name",anchor:"huggingface_hub.HfApi.get_full_repo_name",parameters:[{name:"model_id",val:": str"},{name:"organization",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1789",parametersDescription:[{anchor:"huggingface_hub.HfApi.get_full_repo_name.model_id",description:`<strong>model_id</strong> (<code>str</code>) &#x2014;
The name of the model.`,name:"model_id"},{anchor:"huggingface_hub.HfApi.get_full_repo_name.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
If passed, the repository name will be in the organization
namespace instead of the user namespace.`,name:"organization"},{anchor:"huggingface_hub.HfApi.get_full_repo_name.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The Hugging Face authentication token`,name:"token"}],returnDescription:`
<p>The repository name in the user\u2019s namespace
({username}/{model_id}) if no organization is passed, and under the
organization namespace ({organization}/{model_id}) otherwise.</p>
`,returnType:`
<p><code>str</code></p>
`}}),ut=new x({props:{name:"get_model_tags",anchor:"huggingface_hub.HfApi.get_model_tags",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L615"}}),mt=new x({props:{name:"list_datasets",anchor:"huggingface_hub.HfApi.list_datasets",parameters:[{name:"filter",val:": typing.Union[huggingface_hub.utils.endpoint_helpers.DatasetFilter, str, typing.Iterable[str], NoneType] = None"},{name:"author",val:": typing.Optional[str] = None"},{name:"search",val:": typing.Optional[str] = None"},{name:"sort",val:": typing.Union[typing.Literal['lastModified'], str, NoneType] = None"},{name:"direction",val:": typing.Optional[typing.Literal[-1]] = None"},{name:"limit",val:": typing.Optional[int] = None"},{name:"cardData",val:": typing.Optional[bool] = None"},{name:"full",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L870",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_datasets.filter",description:`<strong>filter</strong> (<a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.DatasetFilter">DatasetFilter</a> or <code>str</code> or <code>Iterable</code>, <em>optional</em>) &#x2014;
A string or <a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.DatasetFilter">DatasetFilter</a> which can be used to identify
datasets on the hub. Example usage:`,name:"filter"}]}}),_t=new x({props:{name:"list_metrics",anchor:"huggingface_hub.HfApi.list_metrics",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1056",returnDescription:`
<p>a list of <code>MetricInfo</code> objects which.</p>
`,returnType:`
<p><code>List[MetricInfo]</code></p>
`}}),bt=new x({props:{name:"list_models",anchor:"huggingface_hub.HfApi.list_models",parameters:[{name:"filter",val:": typing.Union[huggingface_hub.utils.endpoint_helpers.ModelFilter, str, typing.Iterable[str], NoneType] = None"},{name:"author",val:": typing.Optional[str] = None"},{name:"search",val:": typing.Optional[str] = None"},{name:"emissions_thresholds",val:": typing.Union[typing.Tuple[float, float], NoneType] = None"},{name:"sort",val:": typing.Union[typing.Literal['lastModified'], str, NoneType] = None"},{name:"direction",val:": typing.Optional[typing.Literal[-1]] = None"},{name:"limit",val:": typing.Optional[int] = None"},{name:"full",val:": typing.Optional[bool] = None"},{name:"cardData",val:": typing.Optional[bool] = None"},{name:"fetch_config",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L633",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_models.filter",description:`<strong>filter</strong> (<a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.ModelFilter">ModelFilter</a> or <code>str</code> or <code>Iterable</code>, <em>optional</em>) &#x2014;
A string or <a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.ModelFilter">ModelFilter</a> which can be used to identify models
on the hub.</p>
<p>Example usage:`,name:"filter"}]}}),vt=new x({props:{name:"list_repo_files",anchor:"huggingface_hub.HfApi.list_repo_files",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1122",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_repo_files.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.list_repo_files.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The revision of the model repository from which to get the
information.`,name:"revision"},{anchor:"huggingface_hub.HfApi.list_repo_files.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.list_repo_files.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.list_repo_files.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Whether to set a timeout for the request to the hub.`,name:"timeout"}],returnDescription:`
<p>the list of files in a given repository.</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),yt=new x({props:{name:"login",anchor:"huggingface_hub.HfApi.login",parameters:[{name:"username",val:": str"},{name:"password",val:": str"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L461",parametersDescription:[{anchor:"huggingface_hub.HfApi.login.username",description:`<strong>username</strong> (<code>str</code>) &#x2014;
The username of the account with which to login.`,name:"username"},{anchor:"huggingface_hub.HfApi.login.password",description:`<strong>password</strong> (<code>str</code>) &#x2014;
The password of the account with which to login.`,name:"password"}],returnDescription:`
<p>token if credentials are valid</p>
`,returnType:`
<p><code>str</code></p>
`}}),Te=new Kl({props:{$$slots:{default:[Wg]},$$scope:{ctx:He}}}),Et=new x({props:{name:"logout",anchor:"huggingface_hub.HfApi.logout",parameters:[{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L567",parametersDescription:[{anchor:"huggingface_hub.HfApi.logout.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Hugging Face token. Will default to the locally saved token if
not provided.`,name:"token"}]}}),kt=new x({props:{name:"model_info",anchor:"huggingface_hub.HfApi.model_info",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"},{name:"securityStatus",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1070",parametersDescription:[{anchor:"huggingface_hub.HfApi.model_info.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.model_info.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The revision of the model repository from which to get the
information.`,name:"revision"},{anchor:"huggingface_hub.HfApi.model_info.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.model_info.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Whether to set a timeout for the request to the hub.`,name:"timeout"},{anchor:"huggingface_hub.HfApi.model_info.securityStatus",description:`<strong>securityStatus</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to retrieve the security status from the model
repository as well.`,name:"securityStatus"}],returnDescription:`
<p>The model repository information.</p>
`,returnType:`
<p><code>ModelInfo</code></p>
`}}),At=new x({props:{name:"move_repo",anchor:"huggingface_hub.HfApi.move_repo",parameters:[{name:"from_id",val:": str"},{name:"to_id",val:": str"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1526",parametersDescription:[{anchor:"huggingface_hub.HfApi.move_repo.from_id",description:`<strong>from_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>. Original repository identifier.`,name:"from_id"},{anchor:"huggingface_hub.HfApi.move_repo.to_id",description:`<strong>to_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>. Final repository identifier.`,name:"to_id"},{anchor:"huggingface_hub.HfApi.move_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.move_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"}]}}),qt=new x({props:{name:"set_access_token",anchor:"huggingface_hub.HfApi.set_access_token",parameters:[{name:"access_token",val:": str"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L596",parametersDescription:[{anchor:"huggingface_hub.HfApi.set_access_token.access_token",description:`<strong>access_token</strong> (<code>str</code>) &#x2014;
The access token to save.`,name:"access_token"}]}}),Nt=new x({props:{name:"unset_access_token",anchor:"huggingface_hub.HfApi.unset_access_token",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L608"}}),Ft=new x({props:{name:"update_repo_visibility",anchor:"huggingface_hub.HfApi.update_repo_visibility",parameters:[{name:"repo_id",val:": str = None"},{name:"private",val:": bool = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"name",val:": str = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1449",parametersDescription:[{anchor:"huggingface_hub.HfApi.update_repo_visibility.repo_id",description:`<strong>repo_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>Version added: 0.4.0</p>

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.update_repo_visibility.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the model repo should be private.`,name:"private"},{anchor:"huggingface_hub.HfApi.update_repo_visibility.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.update_repo_visibility.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"}],returnDescription:`
<p>The HTTP response in json.</p>
`}}),jt=new x({props:{name:"upload_file",anchor:"huggingface_hub.HfApi.upload_file",parameters:[{name:"path_or_fileobj",val:": typing.Union[str, bytes, typing.IO]"},{name:"path_in_repo",val:": str"},{name:"repo_id",val:": str"},{name:"token",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"identical_ok",val:": bool = True"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1591",parametersDescription:[{anchor:"huggingface_hub.HfApi.upload_file.path_or_fileobj",description:`<strong>path_or_fileobj</strong> (<code>str</code>, <code>bytes</code>, or <code>IO</code>) &#x2014;
Path to a file on the local machine or binary data stream /
fileobj / buffer.`,name:"path_or_fileobj"},{anchor:"huggingface_hub.HfApi.upload_file.path_in_repo",description:`<strong>path_in_repo</strong> (<code>str</code>) &#x2014;
Relative filepath in the repo, for example:
<code>&quot;checkpoints/1fec34a/weights.bin&quot;</code>`,name:"path_in_repo"},{anchor:"huggingface_hub.HfApi.upload_file.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The repository to which the file will be uploaded, for example:
<code>&quot;username/custom_transformers&quot;</code>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.upload_file.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Authentication token, obtained with :function:<code>HfApi.login</code>
method. Will default to the stored token.`,name:"token"},{anchor:"huggingface_hub.HfApi.upload_file.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.upload_file.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The git revision to commit from. Defaults to the head of the
<code>&quot;main&quot;</code> branch.`,name:"revision"},{anchor:"huggingface_hub.HfApi.upload_file.identical_ok",description:`<strong>identical_ok</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
When set to false, will raise an <a href="https://2.python-requests.org/en/master/api/#requests.HTTPError" rel="nofollow">HTTPError</a>
when the file you&#x2019;re trying to upload already exists on the hub
and its content did not change.`,name:"identical_ok"}],returnDescription:`
<p>The URL to visualize the uploaded file on the hub</p>
`,returnType:`
<p><code>str</code></p>
`}}),Me=new Kl({props:{$$slots:{default:[Bg]},$$scope:{ctx:He}}}),Ot=new he({props:{code:`with open("./local/filepath", "rb") as fobj:
    upload_file(
        path_or_fileobj=fileobj,
        path_in_repo="remote/file/path.h5",
        repo_id="username/my-dataset",
        repo_type="datasets",
        token="my_token",
    )

upload_file(
    path_or_fileobj=".\\\\local\\\\file\\\\path",
    path_in_repo="remote/file/path.h5",
    repo_id="username/my-model",
    token="my_token",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./local/filepath&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> fobj:
<span class="hljs-meta">... </span>    upload_file(
<span class="hljs-meta">... </span>        path_or_fileobj=fileobj,
<span class="hljs-meta">... </span>        path_in_repo=<span class="hljs-string">&quot;remote/file/path.h5&quot;</span>,
<span class="hljs-meta">... </span>        repo_id=<span class="hljs-string">&quot;username/my-dataset&quot;</span>,
<span class="hljs-meta">... </span>        repo_type=<span class="hljs-string">&quot;datasets&quot;</span>,
<span class="hljs-meta">... </span>        token=<span class="hljs-string">&quot;my_token&quot;</span>,
<span class="hljs-meta">... </span>    )
<span class="hljs-string">&quot;https://huggingface.co/datasets/username/my-dataset/blob/main/remote/file/path.h5&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>upload_file(
<span class="hljs-meta">... </span>    path_or_fileobj=<span class="hljs-string">&quot;.\\\\local\\\\file\\\\path&quot;</span>,
<span class="hljs-meta">... </span>    path_in_repo=<span class="hljs-string">&quot;remote/file/path.h5&quot;</span>,
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;username/my-model&quot;</span>,
<span class="hljs-meta">... </span>    token=<span class="hljs-string">&quot;my_token&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-string">&quot;https://huggingface.co/username/my-model/blob/main/remote/file/path.h5&quot;</span>`}}),Lt=new x({props:{name:"whoami",anchor:"huggingface_hub.HfApi.whoami",parameters:[{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L496",parametersDescription:[{anchor:"huggingface_hub.HfApi.whoami.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Hugging Face token. Will default to the locally saved token if
not provided.`,name:"token"}]}}),Tt=new Ql({}),Ct=new x({props:{name:"class huggingface_hub.HfFolder",anchor:"huggingface_hub.HfFolder",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1823"}}),Ut=new x({props:{name:"delete_token",anchor:"huggingface_hub.HfFolder.delete_token",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1854"}}),Mt=new x({props:{name:"get_token",anchor:"huggingface_hub.HfFolder.get_token",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1839",returnDescription:`
<p>The token, <code>None</code> if it doesn\u2019t exist.</p>
`,returnType:`
<p><code>str</code> or <code>None</code></p>
`}}),Vt=new x({props:{name:"save_token",anchor:"huggingface_hub.HfFolder.save_token",parameters:[{name:"token",val:""}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1826",parametersDescription:[{anchor:"huggingface_hub.HfFolder.save_token.token",description:`<strong>token</strong> (<code>str</code>) &#x2014;
The token to save to the <a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.HfFolder">HfFolder</a>`,name:"token"}]}}),zt=new Ql({}),Rt=new x({props:{name:"class huggingface_hub.DatasetFilter",anchor:"huggingface_hub.DatasetFilter",parameters:[{name:"author",val:": str = None"},{name:"benchmark",val:": typing.Union[str, typing.List[str]] = None"},{name:"dataset_name",val:": str = None"},{name:"language_creators",val:": typing.Union[str, typing.List[str]] = None"},{name:"languages",val:": typing.Union[str, typing.List[str]] = None"},{name:"multilinguality",val:": typing.Union[str, typing.List[str]] = None"},{name:"size_categories",val:": typing.Union[str, typing.List[str]] = None"},{name:"task_categories",val:": typing.Union[str, typing.List[str]] = None"},{name:"task_ids",val:": typing.Union[str, typing.List[str]] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/utils/endpoint_helpers.py#L67",parametersDescription:[{anchor:"huggingface_hub.DatasetFilter.author",description:`<strong>author</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A string or list of strings that can be used to identify
datasets on the Hub by the original uploader (author or
organization), such as <code>facebook</code> or <code>huggingface</code> Example
usage:`,name:"author"}]}}),St=new he({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(benchmark="raft")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(benchmark=<span class="hljs-string">&quot;raft&quot;</span>)`}}),Gt=new he({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(dataset_name="wikineural")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(dataset_name=<span class="hljs-string">&quot;wikineural&quot;</span>)`}}),Wt=new he({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(language_creator="crowdsourced")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(language_creator=<span class="hljs-string">&quot;crowdsourced&quot;</span>)`}}),Bt=new he({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(language="en")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(language=<span class="hljs-string">&quot;en&quot;</span>)`}}),Kt=new he({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(multilinguality="yes")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(multilinguality=<span class="hljs-string">&quot;yes&quot;</span>)`}}),Qt=new he({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(size_categories="100K<n<1M")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(size_categories=<span class="hljs-string">&quot;100K&lt;n&lt;1M&quot;</span>)`}}),Jt=new he({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(author="facebook")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(author=<span class="hljs-string">&quot;facebook&quot;</span>)`}}),Xt=new he({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(task_ids="paraphrase")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(task_ids=<span class="hljs-string">&quot;paraphrase&quot;</span>)`}}),Yt=new x({props:{name:"class huggingface_hub.ModelFilter",anchor:"huggingface_hub.ModelFilter",parameters:[{name:"author",val:": str = None"},{name:"library",val:": typing.Union[str, typing.List[str]] = None"},{name:"language",val:": typing.Union[str, typing.List[str]] = None"},{name:"model_name",val:": str = None"},{name:"task",val:": typing.Union[str, typing.List[str]] = None"},{name:"trained_dataset",val:": typing.Union[str, typing.List[str]] = None"},{name:"tags",val:": typing.Union[str, typing.List[str]] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/utils/endpoint_helpers.py#L184",parametersDescription:[{anchor:"huggingface_hub.ModelFilter.author",description:`<strong>author</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A string that can be used to identify models on the Hub by the
original uploader (author or organization), such as <code>facebook</code>
or <code>huggingface</code> Example usage:`,name:"author"}]}}),{c(){A=a("meta"),I=l(),N=a("h1"),k=a("a"),q=a("span"),d(w.$$.fragment),O=l(),T=a("span"),C=s("Hugging Face Hub API"),F=l(),H=a("p"),P=s("Below is the documentation for the "),L=a("code"),R=s("HfApi"),S=s(` class, which serves as a Python wrapper for the Hugging Face
Hub\u2019s API.`),D=l(),j=a("p"),Q=s("All methods from the "),J=a("code"),$e=s("HfApi"),ye=s(` are also accessible from the package\u2019s root directly, both approaches are detailed
below.`),Z=l(),ee=a("p"),Ee=s("The following approach uses the method from the root of the package:"),za=l(),d(at.$$.fragment),Ra=l(),De=a("p"),Hn=s("The following approach uses the "),go=a("code"),Dn=s("HfApi"),xn=s(" class:"),Sa=l(),d(nt.$$.fragment),Ga=l(),xe=a("p"),qn=s("Using the "),po=a("code"),Nn=s("HfApi"),Fn=s(" class directly enables you to set a different endpoint to that of the Hugging Face\u2019s Hub."),Wa=l(),p=a("div"),d(rt.$$.fragment),Pn=l(),te=a("div"),d(st.$$.fragment),jn=l(),ho=a("p"),On=s("Create an empty repo on the HuggingFace Hub."),Ln=l(),fo=a("p"),Tn=s("References:"),In=l(),uo=a("ul"),eo=a("li"),Cn=s("[1] "),it=a("a"),Un=s("https://huggingface.co/settings/tokens"),Mn=l(),G=a("div"),d(lt.$$.fragment),Vn=l(),mo=a("p"),zn=s("Get info on one specific dataset on huggingface.co"),Rn=l(),_o=a("p"),Sn=s("Dataset can be private if you pass an acceptable token."),Gn=l(),bo=a("p"),Wn=s("References:"),Bn=l(),vo=a("ul"),to=a("li"),Kn=s("[1] "),ct=a("a"),Qn=s("https://huggingface.co/settings/tokens"),Jn=l(),de=a("div"),d(gt.$$.fragment),Xn=l(),$o=a("p"),Yn=s("Deletes a file in the given repo."),Zn=l(),d(qe.$$.fragment),er=l(),oe=a("div"),d(pt.$$.fragment),tr=l(),yo=a("p"),or=s("Delete a repo from the HuggingFace Hub. CAUTION: this is irreversible."),ar=l(),Eo=a("p"),nr=s("References:"),rr=l(),ko=a("ul"),oo=a("li"),sr=s("[1] "),ht=a("a"),ir=s("https://huggingface.co/settings/tokens"),lr=l(),Ne=a("div"),d(dt.$$.fragment),cr=l(),wo=a("p"),gr=s("Gets all valid dataset tags as a nested namespace object."),pr=l(),Fe=a("div"),d(ft.$$.fragment),hr=l(),Ao=a("p"),dr=s(`Returns the repository name for a given model ID and optional
organization.`),fr=l(),Pe=a("div"),d(ut.$$.fragment),ur=l(),Ho=a("p"),mr=s("Gets all valid model tags as a nested namespace object"),_r=l(),je=a("div"),d(mt.$$.fragment),br=l(),Do=a("p"),vr=s("Get the public list of all the datasets on huggingface.co"),$r=l(),Oe=a("div"),d(_t.$$.fragment),yr=l(),xo=a("p"),Er=s("Get the public list of all the metrics on huggingface.co"),kr=l(),Le=a("div"),d(bt.$$.fragment),wr=l(),qo=a("p"),Ar=s("Get the public list of all the models on huggingface.co"),Hr=l(),ae=a("div"),d(vt.$$.fragment),Dr=l(),No=a("p"),xr=s("Get the list of files in a given repo."),qr=l(),Fo=a("p"),Nr=s("References:"),Fr=l(),Po=a("ul"),ao=a("li"),Pr=s("[1] "),$t=a("a"),jr=s("https://huggingface.co/settings/tokens"),Or=l(),fe=a("div"),d(yt.$$.fragment),Lr=l(),jo=a("p"),Tr=s("Call HF API to sign in a user and get a token if credentials are valid."),Ir=l(),d(Te.$$.fragment),Cr=l(),Ie=a("div"),d(Et.$$.fragment),Ur=l(),Oo=a("p"),Mr=s("Call HF API to log out."),Vr=l(),W=a("div"),d(kt.$$.fragment),zr=l(),Lo=a("p"),Rr=s("Get info on one specific model on huggingface.co"),Sr=l(),To=a("p"),Gr=s("Model can be private if you pass an acceptable token or are logged in."),Wr=l(),Io=a("p"),Br=s("References:"),Kr=l(),Co=a("ul"),no=a("li"),Qr=s("[1] "),wt=a("a"),Jr=s("https://huggingface.co/settings/tokens"),Xr=l(),B=a("div"),d(At.$$.fragment),Yr=l(),Uo=a("p"),Zr=s("Moving a repository from namespace1/repo_name1 to namespace2/repo_name2"),es=l(),Ht=a("p"),ts=s(`Note there are certain limitations. For more information about moving
repositories, please see
`),Dt=a("a"),os=s("https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),as=s("."),ns=l(),Mo=a("p"),rs=s("References:"),ss=l(),Vo=a("ul"),ro=a("li"),is=s("[1] "),xt=a("a"),ls=s("https://huggingface.co/settings/tokens"),cs=l(),Ce=a("div"),d(qt.$$.fragment),gs=l(),zo=a("p"),ps=s(`Saves the passed access token so git can correctly authenticate the
user.`),hs=l(),Ue=a("div"),d(Nt.$$.fragment),ds=l(),Ro=a("p"),fs=s("Resets the user\u2019s access token."),us=l(),ne=a("div"),d(Ft.$$.fragment),ms=l(),So=a("p"),_s=s("Update the visibility setting of a repository."),bs=l(),Go=a("p"),vs=s("References:"),$s=l(),Wo=a("ul"),so=a("li"),ys=s("[1] "),Pt=a("a"),Es=s("https://huggingface.co/settings/tokens"),ks=l(),K=a("div"),d(jt.$$.fragment),ws=l(),Bo=a("p"),As=s(`Upload a local file (up to 5GB) to the given repo. The upload is done
through a HTTP post request, and doesn\u2019t require git or git-lfs to be
installed.`),Hs=l(),d(Me.$$.fragment),Ds=l(),Ko=a("p"),xs=s("Examples:"),qs=l(),d(Ot.$$.fragment),Ns=l(),Ve=a("div"),d(Lt.$$.fragment),Fs=l(),Qo=a("p"),Ps=s("Call HF API to know \u201Cwhoami\u201D."),Ba=l(),ke=a("h2"),ze=a("a"),Jo=a("span"),d(Tt.$$.fragment),js=l(),Xo=a("span"),Os=s("Hugging Face local storage"),Ka=l(),It=a("p"),Yo=a("code"),Ls=s("huggingface_hub"),Ts=s(` stores the authentication information locally so that it may be re-used in subsequent
methods.`),Qa=l(),Re=a("p"),Is=s("It does this using the "),io=a("a"),Cs=s("HfFolder"),Us=s(" utility, which saves data at the root of the user."),Ja=l(),X=a("div"),d(Ct.$$.fragment),Ms=l(),Se=a("div"),d(Ut.$$.fragment),Vs=l(),Zo=a("p"),zs=s("Deletes the token from storage. Does not fail if token does not exist."),Rs=l(),Ge=a("div"),d(Mt.$$.fragment),Ss=l(),ea=a("p"),Gs=s("Retrieves the token"),Ws=l(),We=a("div"),d(Vt.$$.fragment),Bs=l(),ta=a("p"),Ks=s("Save token, creating folder as needed."),Xa=l(),we=a("h2"),Be=a("a"),oa=a("span"),d(zt.$$.fragment),Qs=l(),aa=a("span"),Js=s("Filtering helpers"),Ya=l(),Ke=a("p"),Xs=s("Some helpers to filter repositories on the hub are available in the "),na=a("code"),Ys=s("huggingface_hub"),Zs=s(" package."),Za=l(),$=a("div"),d(Rt.$$.fragment),ei=l(),ra=a("p"),ti=s(`A class that converts human-readable dataset search parameters into ones
compatible with
the REST API. For all parameters capitalization does not matter.`),oi=l(),ce=a("p"),ai=s("benchmark ("),sa=a("code"),ni=s("str"),ri=s(" or "),ia=a("code"),si=s("List"),ii=s(", "),la=a("em"),li=s("optional"),ci=s(`):
A string or list of strings that can be used to identify
datasets on the Hub by their official benchmark Example usage:`),gi=l(),d(St.$$.fragment),pi=l(),Y=a("p"),hi=s("dataset_name ("),ca=a("code"),di=s("str"),fi=s(", "),ga=a("em"),ui=s("optional"),mi=s(`):
A string or list of strings that can be used to identify
datasets on the Hub by its name, such as `),pa=a("code"),_i=s("SQAC"),bi=s(" or "),ha=a("code"),vi=s("wikineural"),$i=s(`
Example usage:`),yi=l(),d(Gt.$$.fragment),Ei=l(),U=a("p"),ki=s("language_creators ("),da=a("code"),wi=s("str"),Ai=s(" or "),fa=a("code"),Hi=s("List"),Di=s(", "),ua=a("em"),xi=s("optional"),qi=s(`):
A string or list of strings that can be used to identify
datasets on the Hub with how the data was curated, such as
`),ma=a("code"),Ni=s("crowdsourced"),Fi=s(" or "),_a=a("code"),Pi=s("machine_generated"),ji=s(" Example usage:"),Oi=l(),d(Wt.$$.fragment),Li=l(),ge=a("p"),Ti=s("languages ("),ba=a("code"),Ii=s("str"),Ci=s(" or "),va=a("code"),Ui=s("List"),Mi=s(", "),$a=a("em"),Vi=s("optional"),zi=s(`):
A string or list of strings representing a two-character
language to filter datasets by on the Hub Example usage:`),Ri=l(),d(Bt.$$.fragment),Si=l(),pe=a("p"),Gi=s("multilinguality ("),ya=a("code"),Wi=s("str"),Bi=s(" or "),Ea=a("code"),Ki=s("List"),Qi=s(", "),ka=a("em"),Ji=s("optional"),Xi=s(`):
A string or list of strings representing a filter for datasets
that contain multiple languages Example usage:`),Yi=l(),d(Kt.$$.fragment),Zi=l(),M=a("p"),el=s("size_categories ("),wa=a("code"),tl=s("str"),ol=s(" or "),Aa=a("code"),al=s("List"),nl=s(", "),Ha=a("em"),rl=s("optional"),sl=s(`):
A string or list of strings that can be used to identify
datasets on the Hub by the size of the dataset such as
`),Da=a("code"),il=s("100K<n<1M"),ll=s(" or "),xa=a("code"),cl=s("1M<n<10M"),gl=s(" Example usage:"),pl=l(),d(Qt.$$.fragment),hl=l(),V=a("p"),dl=s("task_categories ("),qa=a("code"),fl=s("str"),ul=s(" or "),Na=a("code"),ml=s("List"),_l=s(", "),Fa=a("em"),bl=s("optional"),vl=s(`):
A string or list of strings that can be used to identify
datasets on the Hub by the designed task, such as
`),Pa=a("code"),$l=s("audio_classification"),yl=s(" or "),ja=a("code"),El=s("named_entity_recognition"),kl=s(` Example
usage:`),wl=l(),d(Jt.$$.fragment),Al=l(),z=a("p"),Hl=s("task_ids ("),Oa=a("code"),Dl=s("str"),xl=s(" or "),La=a("code"),ql=s("List"),Nl=s(", "),Ta=a("em"),Fl=s("optional"),Pl=s(`):
A string or list of strings that can be used to identify
datasets on the Hub by the specific task such as
`),Ia=a("code"),jl=s("speech_emotion_recognition"),Ol=s(" or "),Ca=a("code"),Ll=s("paraphrase"),Tl=s(" Example usage:"),Il=l(),d(Xt.$$.fragment),en=l(),Ae=a("div"),d(Yt.$$.fragment),Cl=l(),Ua=a("p"),Ul=s(`A class that converts human-readable model search parameters into ones
compatible with
the REST API. For all parameters capitalization does not matter.`),this.h()},l(o){const h=Rg('[data-svelte="svelte-1phssyn"]',document.head);A=n(h,"META",{name:!0,content:!0}),h.forEach(t),I=c(o),N=n(o,"H1",{class:!0});var Zt=r(N);k=n(Zt,"A",{id:!0,class:!0,href:!0});var Ma=r(k);q=n(Ma,"SPAN",{});var Va=r(q);f(w.$$.fragment,Va),Va.forEach(t),Ma.forEach(t),O=c(Zt),T=n(Zt,"SPAN",{});var Jl=r(T);C=i(Jl,"Hugging Face Hub API"),Jl.forEach(t),Zt.forEach(t),F=c(o),H=n(o,"P",{});var on=r(H);P=i(on,"Below is the documentation for the "),L=n(on,"CODE",{});var Xl=r(L);R=i(Xl,"HfApi"),Xl.forEach(t),S=i(on,` class, which serves as a Python wrapper for the Hugging Face
Hub\u2019s API.`),on.forEach(t),D=c(o),j=n(o,"P",{});var an=r(j);Q=i(an,"All methods from the "),J=n(an,"CODE",{});var Yl=r(J);$e=i(Yl,"HfApi"),Yl.forEach(t),ye=i(an,` are also accessible from the package\u2019s root directly, both approaches are detailed
below.`),an.forEach(t),Z=c(o),ee=n(o,"P",{});var Zl=r(ee);Ee=i(Zl,"The following approach uses the method from the root of the package:"),Zl.forEach(t),za=c(o),f(at.$$.fragment,o),Ra=c(o),De=n(o,"P",{});var nn=r(De);Hn=i(nn,"The following approach uses the "),go=n(nn,"CODE",{});var ec=r(go);Dn=i(ec,"HfApi"),ec.forEach(t),xn=i(nn," class:"),nn.forEach(t),Sa=c(o),f(nt.$$.fragment,o),Ga=c(o),xe=n(o,"P",{});var rn=r(xe);qn=i(rn,"Using the "),po=n(rn,"CODE",{});var tc=r(po);Nn=i(tc,"HfApi"),tc.forEach(t),Fn=i(rn," class directly enables you to set a different endpoint to that of the Hugging Face\u2019s Hub."),rn.forEach(t),Wa=c(o),p=n(o,"DIV",{class:!0});var v=r(p);f(rt.$$.fragment,v),Pn=c(v),te=n(v,"DIV",{class:!0});var Qe=r(te);f(st.$$.fragment,Qe),jn=c(Qe),ho=n(Qe,"P",{});var oc=r(ho);On=i(oc,"Create an empty repo on the HuggingFace Hub."),oc.forEach(t),Ln=c(Qe),fo=n(Qe,"P",{});var ac=r(fo);Tn=i(ac,"References:"),ac.forEach(t),In=c(Qe),uo=n(Qe,"UL",{});var nc=r(uo);eo=n(nc,"LI",{});var Ml=r(eo);Cn=i(Ml,"[1] "),it=n(Ml,"A",{href:!0,rel:!0});var rc=r(it);Un=i(rc,"https://huggingface.co/settings/tokens"),rc.forEach(t),Ml.forEach(t),nc.forEach(t),Qe.forEach(t),Mn=c(v),G=n(v,"DIV",{class:!0});var ue=r(G);f(lt.$$.fragment,ue),Vn=c(ue),mo=n(ue,"P",{});var sc=r(mo);zn=i(sc,"Get info on one specific dataset on huggingface.co"),sc.forEach(t),Rn=c(ue),_o=n(ue,"P",{});var ic=r(_o);Sn=i(ic,"Dataset can be private if you pass an acceptable token."),ic.forEach(t),Gn=c(ue),bo=n(ue,"P",{});var lc=r(bo);Wn=i(lc,"References:"),lc.forEach(t),Bn=c(ue),vo=n(ue,"UL",{});var cc=r(vo);to=n(cc,"LI",{});var Vl=r(to);Kn=i(Vl,"[1] "),ct=n(Vl,"A",{href:!0,rel:!0});var gc=r(ct);Qn=i(gc,"https://huggingface.co/settings/tokens"),gc.forEach(t),Vl.forEach(t),cc.forEach(t),ue.forEach(t),Jn=c(v),de=n(v,"DIV",{class:!0});var lo=r(de);f(gt.$$.fragment,lo),Xn=c(lo),$o=n(lo,"P",{});var pc=r($o);Yn=i(pc,"Deletes a file in the given repo."),pc.forEach(t),Zn=c(lo),f(qe.$$.fragment,lo),lo.forEach(t),er=c(v),oe=n(v,"DIV",{class:!0});var Je=r(oe);f(pt.$$.fragment,Je),tr=c(Je),yo=n(Je,"P",{});var hc=r(yo);or=i(hc,"Delete a repo from the HuggingFace Hub. CAUTION: this is irreversible."),hc.forEach(t),ar=c(Je),Eo=n(Je,"P",{});var dc=r(Eo);nr=i(dc,"References:"),dc.forEach(t),rr=c(Je),ko=n(Je,"UL",{});var fc=r(ko);oo=n(fc,"LI",{});var zl=r(oo);sr=i(zl,"[1] "),ht=n(zl,"A",{href:!0,rel:!0});var uc=r(ht);ir=i(uc,"https://huggingface.co/settings/tokens"),uc.forEach(t),zl.forEach(t),fc.forEach(t),Je.forEach(t),lr=c(v),Ne=n(v,"DIV",{class:!0});var sn=r(Ne);f(dt.$$.fragment,sn),cr=c(sn),wo=n(sn,"P",{});var mc=r(wo);gr=i(mc,"Gets all valid dataset tags as a nested namespace object."),mc.forEach(t),sn.forEach(t),pr=c(v),Fe=n(v,"DIV",{class:!0});var ln=r(Fe);f(ft.$$.fragment,ln),hr=c(ln),Ao=n(ln,"P",{});var _c=r(Ao);dr=i(_c,`Returns the repository name for a given model ID and optional
organization.`),_c.forEach(t),ln.forEach(t),fr=c(v),Pe=n(v,"DIV",{class:!0});var cn=r(Pe);f(ut.$$.fragment,cn),ur=c(cn),Ho=n(cn,"P",{});var bc=r(Ho);mr=i(bc,"Gets all valid model tags as a nested namespace object"),bc.forEach(t),cn.forEach(t),_r=c(v),je=n(v,"DIV",{class:!0});var gn=r(je);f(mt.$$.fragment,gn),br=c(gn),Do=n(gn,"P",{});var vc=r(Do);vr=i(vc,"Get the public list of all the datasets on huggingface.co"),vc.forEach(t),gn.forEach(t),$r=c(v),Oe=n(v,"DIV",{class:!0});var pn=r(Oe);f(_t.$$.fragment,pn),yr=c(pn),xo=n(pn,"P",{});var $c=r(xo);Er=i($c,"Get the public list of all the metrics on huggingface.co"),$c.forEach(t),pn.forEach(t),kr=c(v),Le=n(v,"DIV",{class:!0});var hn=r(Le);f(bt.$$.fragment,hn),wr=c(hn),qo=n(hn,"P",{});var yc=r(qo);Ar=i(yc,"Get the public list of all the models on huggingface.co"),yc.forEach(t),hn.forEach(t),Hr=c(v),ae=n(v,"DIV",{class:!0});var Xe=r(ae);f(vt.$$.fragment,Xe),Dr=c(Xe),No=n(Xe,"P",{});var Ec=r(No);xr=i(Ec,"Get the list of files in a given repo."),Ec.forEach(t),qr=c(Xe),Fo=n(Xe,"P",{});var kc=r(Fo);Nr=i(kc,"References:"),kc.forEach(t),Fr=c(Xe),Po=n(Xe,"UL",{});var wc=r(Po);ao=n(wc,"LI",{});var Rl=r(ao);Pr=i(Rl,"[1] "),$t=n(Rl,"A",{href:!0,rel:!0});var Ac=r($t);jr=i(Ac,"https://huggingface.co/settings/tokens"),Ac.forEach(t),Rl.forEach(t),wc.forEach(t),Xe.forEach(t),Or=c(v),fe=n(v,"DIV",{class:!0});var co=r(fe);f(yt.$$.fragment,co),Lr=c(co),jo=n(co,"P",{});var Hc=r(jo);Tr=i(Hc,"Call HF API to sign in a user and get a token if credentials are valid."),Hc.forEach(t),Ir=c(co),f(Te.$$.fragment,co),co.forEach(t),Cr=c(v),Ie=n(v,"DIV",{class:!0});var dn=r(Ie);f(Et.$$.fragment,dn),Ur=c(dn),Oo=n(dn,"P",{});var Dc=r(Oo);Mr=i(Dc,"Call HF API to log out."),Dc.forEach(t),dn.forEach(t),Vr=c(v),W=n(v,"DIV",{class:!0});var me=r(W);f(kt.$$.fragment,me),zr=c(me),Lo=n(me,"P",{});var xc=r(Lo);Rr=i(xc,"Get info on one specific model on huggingface.co"),xc.forEach(t),Sr=c(me),To=n(me,"P",{});var qc=r(To);Gr=i(qc,"Model can be private if you pass an acceptable token or are logged in."),qc.forEach(t),Wr=c(me),Io=n(me,"P",{});var Nc=r(Io);Br=i(Nc,"References:"),Nc.forEach(t),Kr=c(me),Co=n(me,"UL",{});var Fc=r(Co);no=n(Fc,"LI",{});var Sl=r(no);Qr=i(Sl,"[1] "),wt=n(Sl,"A",{href:!0,rel:!0});var Pc=r(wt);Jr=i(Pc,"https://huggingface.co/settings/tokens"),Pc.forEach(t),Sl.forEach(t),Fc.forEach(t),me.forEach(t),Xr=c(v),B=n(v,"DIV",{class:!0});var _e=r(B);f(At.$$.fragment,_e),Yr=c(_e),Uo=n(_e,"P",{});var jc=r(Uo);Zr=i(jc,"Moving a repository from namespace1/repo_name1 to namespace2/repo_name2"),jc.forEach(t),es=c(_e),Ht=n(_e,"P",{});var fn=r(Ht);ts=i(fn,`Note there are certain limitations. For more information about moving
repositories, please see
`),Dt=n(fn,"A",{href:!0,rel:!0});var Oc=r(Dt);os=i(Oc,"https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),Oc.forEach(t),as=i(fn,"."),fn.forEach(t),ns=c(_e),Mo=n(_e,"P",{});var Lc=r(Mo);rs=i(Lc,"References:"),Lc.forEach(t),ss=c(_e),Vo=n(_e,"UL",{});var Tc=r(Vo);ro=n(Tc,"LI",{});var Gl=r(ro);is=i(Gl,"[1] "),xt=n(Gl,"A",{href:!0,rel:!0});var Ic=r(xt);ls=i(Ic,"https://huggingface.co/settings/tokens"),Ic.forEach(t),Gl.forEach(t),Tc.forEach(t),_e.forEach(t),cs=c(v),Ce=n(v,"DIV",{class:!0});var un=r(Ce);f(qt.$$.fragment,un),gs=c(un),zo=n(un,"P",{});var Cc=r(zo);ps=i(Cc,`Saves the passed access token so git can correctly authenticate the
user.`),Cc.forEach(t),un.forEach(t),hs=c(v),Ue=n(v,"DIV",{class:!0});var mn=r(Ue);f(Nt.$$.fragment,mn),ds=c(mn),Ro=n(mn,"P",{});var Uc=r(Ro);fs=i(Uc,"Resets the user\u2019s access token."),Uc.forEach(t),mn.forEach(t),us=c(v),ne=n(v,"DIV",{class:!0});var Ye=r(ne);f(Ft.$$.fragment,Ye),ms=c(Ye),So=n(Ye,"P",{});var Mc=r(So);_s=i(Mc,"Update the visibility setting of a repository."),Mc.forEach(t),bs=c(Ye),Go=n(Ye,"P",{});var Vc=r(Go);vs=i(Vc,"References:"),Vc.forEach(t),$s=c(Ye),Wo=n(Ye,"UL",{});var zc=r(Wo);so=n(zc,"LI",{});var Wl=r(so);ys=i(Wl,"[1] "),Pt=n(Wl,"A",{href:!0,rel:!0});var Rc=r(Pt);Es=i(Rc,"https://huggingface.co/settings/tokens"),Rc.forEach(t),Wl.forEach(t),zc.forEach(t),Ye.forEach(t),ks=c(v),K=n(v,"DIV",{class:!0});var be=r(K);f(jt.$$.fragment,be),ws=c(be),Bo=n(be,"P",{});var Sc=r(Bo);As=i(Sc,`Upload a local file (up to 5GB) to the given repo. The upload is done
through a HTTP post request, and doesn\u2019t require git or git-lfs to be
installed.`),Sc.forEach(t),Hs=c(be),f(Me.$$.fragment,be),Ds=c(be),Ko=n(be,"P",{});var Gc=r(Ko);xs=i(Gc,"Examples:"),Gc.forEach(t),qs=c(be),f(Ot.$$.fragment,be),be.forEach(t),Ns=c(v),Ve=n(v,"DIV",{class:!0});var _n=r(Ve);f(Lt.$$.fragment,_n),Fs=c(_n),Qo=n(_n,"P",{});var Wc=r(Qo);Ps=i(Wc,"Call HF API to know \u201Cwhoami\u201D."),Wc.forEach(t),_n.forEach(t),v.forEach(t),Ba=c(o),ke=n(o,"H2",{class:!0});var bn=r(ke);ze=n(bn,"A",{id:!0,class:!0,href:!0});var Bc=r(ze);Jo=n(Bc,"SPAN",{});var Kc=r(Jo);f(Tt.$$.fragment,Kc),Kc.forEach(t),Bc.forEach(t),js=c(bn),Xo=n(bn,"SPAN",{});var Qc=r(Xo);Os=i(Qc,"Hugging Face local storage"),Qc.forEach(t),bn.forEach(t),Ka=c(o),It=n(o,"P",{});var Bl=r(It);Yo=n(Bl,"CODE",{});var Jc=r(Yo);Ls=i(Jc,"huggingface_hub"),Jc.forEach(t),Ts=i(Bl,` stores the authentication information locally so that it may be re-used in subsequent
methods.`),Bl.forEach(t),Qa=c(o),Re=n(o,"P",{});var vn=r(Re);Is=i(vn,"It does this using the "),io=n(vn,"A",{href:!0});var Xc=r(io);Cs=i(Xc,"HfFolder"),Xc.forEach(t),Us=i(vn," utility, which saves data at the root of the user."),vn.forEach(t),Ja=c(o),X=n(o,"DIV",{class:!0});var Ze=r(X);f(Ct.$$.fragment,Ze),Ms=c(Ze),Se=n(Ze,"DIV",{class:!0});var $n=r(Se);f(Ut.$$.fragment,$n),Vs=c($n),Zo=n($n,"P",{});var Yc=r(Zo);zs=i(Yc,"Deletes the token from storage. Does not fail if token does not exist."),Yc.forEach(t),$n.forEach(t),Rs=c(Ze),Ge=n(Ze,"DIV",{class:!0});var yn=r(Ge);f(Mt.$$.fragment,yn),Ss=c(yn),ea=n(yn,"P",{});var Zc=r(ea);Gs=i(Zc,"Retrieves the token"),Zc.forEach(t),yn.forEach(t),Ws=c(Ze),We=n(Ze,"DIV",{class:!0});var En=r(We);f(Vt.$$.fragment,En),Bs=c(En),ta=n(En,"P",{});var eg=r(ta);Ks=i(eg,"Save token, creating folder as needed."),eg.forEach(t),En.forEach(t),Ze.forEach(t),Xa=c(o),we=n(o,"H2",{class:!0});var kn=r(we);Be=n(kn,"A",{id:!0,class:!0,href:!0});var tg=r(Be);oa=n(tg,"SPAN",{});var og=r(oa);f(zt.$$.fragment,og),og.forEach(t),tg.forEach(t),Qs=c(kn),aa=n(kn,"SPAN",{});var ag=r(aa);Js=i(ag,"Filtering helpers"),ag.forEach(t),kn.forEach(t),Ya=c(o),Ke=n(o,"P",{});var wn=r(Ke);Xs=i(wn,"Some helpers to filter repositories on the hub are available in the "),na=n(wn,"CODE",{});var ng=r(na);Ys=i(ng,"huggingface_hub"),ng.forEach(t),Zs=i(wn," package."),wn.forEach(t),Za=c(o),$=n(o,"DIV",{class:!0});var E=r($);f(Rt.$$.fragment,E),ei=c(E),ra=n(E,"P",{});var rg=r(ra);ti=i(rg,`A class that converts human-readable dataset search parameters into ones
compatible with
the REST API. For all parameters capitalization does not matter.`),rg.forEach(t),oi=c(E),ce=n(E,"P",{});var et=r(ce);ai=i(et,"benchmark ("),sa=n(et,"CODE",{});var sg=r(sa);ni=i(sg,"str"),sg.forEach(t),ri=i(et," or "),ia=n(et,"CODE",{});var ig=r(ia);si=i(ig,"List"),ig.forEach(t),ii=i(et,", "),la=n(et,"EM",{});var lg=r(la);li=i(lg,"optional"),lg.forEach(t),ci=i(et,`):
A string or list of strings that can be used to identify
datasets on the Hub by their official benchmark Example usage:`),et.forEach(t),gi=c(E),f(St.$$.fragment,E),pi=c(E),Y=n(E,"P",{});var ve=r(Y);hi=i(ve,"dataset_name ("),ca=n(ve,"CODE",{});var cg=r(ca);di=i(cg,"str"),cg.forEach(t),fi=i(ve,", "),ga=n(ve,"EM",{});var gg=r(ga);ui=i(gg,"optional"),gg.forEach(t),mi=i(ve,`):
A string or list of strings that can be used to identify
datasets on the Hub by its name, such as `),pa=n(ve,"CODE",{});var pg=r(pa);_i=i(pg,"SQAC"),pg.forEach(t),bi=i(ve," or "),ha=n(ve,"CODE",{});var hg=r(ha);vi=i(hg,"wikineural"),hg.forEach(t),$i=i(ve,`
Example usage:`),ve.forEach(t),yi=c(E),f(Gt.$$.fragment,E),Ei=c(E),U=n(E,"P",{});var re=r(U);ki=i(re,"language_creators ("),da=n(re,"CODE",{});var dg=r(da);wi=i(dg,"str"),dg.forEach(t),Ai=i(re," or "),fa=n(re,"CODE",{});var fg=r(fa);Hi=i(fg,"List"),fg.forEach(t),Di=i(re,", "),ua=n(re,"EM",{});var ug=r(ua);xi=i(ug,"optional"),ug.forEach(t),qi=i(re,`):
A string or list of strings that can be used to identify
datasets on the Hub with how the data was curated, such as
`),ma=n(re,"CODE",{});var mg=r(ma);Ni=i(mg,"crowdsourced"),mg.forEach(t),Fi=i(re," or "),_a=n(re,"CODE",{});var _g=r(_a);Pi=i(_g,"machine_generated"),_g.forEach(t),ji=i(re," Example usage:"),re.forEach(t),Oi=c(E),f(Wt.$$.fragment,E),Li=c(E),ge=n(E,"P",{});var tt=r(ge);Ti=i(tt,"languages ("),ba=n(tt,"CODE",{});var bg=r(ba);Ii=i(bg,"str"),bg.forEach(t),Ci=i(tt," or "),va=n(tt,"CODE",{});var vg=r(va);Ui=i(vg,"List"),vg.forEach(t),Mi=i(tt,", "),$a=n(tt,"EM",{});var $g=r($a);Vi=i($g,"optional"),$g.forEach(t),zi=i(tt,`):
A string or list of strings representing a two-character
language to filter datasets by on the Hub Example usage:`),tt.forEach(t),Ri=c(E),f(Bt.$$.fragment,E),Si=c(E),pe=n(E,"P",{});var ot=r(pe);Gi=i(ot,"multilinguality ("),ya=n(ot,"CODE",{});var yg=r(ya);Wi=i(yg,"str"),yg.forEach(t),Bi=i(ot," or "),Ea=n(ot,"CODE",{});var Eg=r(Ea);Ki=i(Eg,"List"),Eg.forEach(t),Qi=i(ot,", "),ka=n(ot,"EM",{});var kg=r(ka);Ji=i(kg,"optional"),kg.forEach(t),Xi=i(ot,`):
A string or list of strings representing a filter for datasets
that contain multiple languages Example usage:`),ot.forEach(t),Yi=c(E),f(Kt.$$.fragment,E),Zi=c(E),M=n(E,"P",{});var se=r(M);el=i(se,"size_categories ("),wa=n(se,"CODE",{});var wg=r(wa);tl=i(wg,"str"),wg.forEach(t),ol=i(se," or "),Aa=n(se,"CODE",{});var Ag=r(Aa);al=i(Ag,"List"),Ag.forEach(t),nl=i(se,", "),Ha=n(se,"EM",{});var Hg=r(Ha);rl=i(Hg,"optional"),Hg.forEach(t),sl=i(se,`):
A string or list of strings that can be used to identify
datasets on the Hub by the size of the dataset such as
`),Da=n(se,"CODE",{});var Dg=r(Da);il=i(Dg,"100K<n<1M"),Dg.forEach(t),ll=i(se," or "),xa=n(se,"CODE",{});var xg=r(xa);cl=i(xg,"1M<n<10M"),xg.forEach(t),gl=i(se," Example usage:"),se.forEach(t),pl=c(E),f(Qt.$$.fragment,E),hl=c(E),V=n(E,"P",{});var ie=r(V);dl=i(ie,"task_categories ("),qa=n(ie,"CODE",{});var qg=r(qa);fl=i(qg,"str"),qg.forEach(t),ul=i(ie," or "),Na=n(ie,"CODE",{});var Ng=r(Na);ml=i(Ng,"List"),Ng.forEach(t),_l=i(ie,", "),Fa=n(ie,"EM",{});var Fg=r(Fa);bl=i(Fg,"optional"),Fg.forEach(t),vl=i(ie,`):
A string or list of strings that can be used to identify
datasets on the Hub by the designed task, such as
`),Pa=n(ie,"CODE",{});var Pg=r(Pa);$l=i(Pg,"audio_classification"),Pg.forEach(t),yl=i(ie," or "),ja=n(ie,"CODE",{});var jg=r(ja);El=i(jg,"named_entity_recognition"),jg.forEach(t),kl=i(ie,` Example
usage:`),ie.forEach(t),wl=c(E),f(Jt.$$.fragment,E),Al=c(E),z=n(E,"P",{});var le=r(z);Hl=i(le,"task_ids ("),Oa=n(le,"CODE",{});var Og=r(Oa);Dl=i(Og,"str"),Og.forEach(t),xl=i(le," or "),La=n(le,"CODE",{});var Lg=r(La);ql=i(Lg,"List"),Lg.forEach(t),Nl=i(le,", "),Ta=n(le,"EM",{});var Tg=r(Ta);Fl=i(Tg,"optional"),Tg.forEach(t),Pl=i(le,`):
A string or list of strings that can be used to identify
datasets on the Hub by the specific task such as
`),Ia=n(le,"CODE",{});var Ig=r(Ia);jl=i(Ig,"speech_emotion_recognition"),Ig.forEach(t),Ol=i(le," or "),Ca=n(le,"CODE",{});var Cg=r(Ca);Ll=i(Cg,"paraphrase"),Cg.forEach(t),Tl=i(le," Example usage:"),le.forEach(t),Il=c(E),f(Xt.$$.fragment,E),E.forEach(t),en=c(o),Ae=n(o,"DIV",{class:!0});var An=r(Ae);f(Yt.$$.fragment,An),Cl=c(An),Ua=n(An,"P",{});var Ug=r(Ua);Ul=i(Ug,`A class that converts human-readable model search parameters into ones
compatible with
the REST API. For all parameters capitalization does not matter.`),Ug.forEach(t),An.forEach(t),this.h()},h(){g(A,"name","hf:doc:metadata"),g(A,"content",JSON.stringify(Qg)),g(k,"id","huggingface_hub.HfApi"),g(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),g(k,"href","#huggingface_hub.HfApi"),g(N,"class","relative group"),g(it,"href","https://huggingface.co/settings/tokens"),g(it,"rel","nofollow"),g(te,"class","docstring"),g(ct,"href","https://huggingface.co/settings/tokens"),g(ct,"rel","nofollow"),g(G,"class","docstring"),g(de,"class","docstring"),g(ht,"href","https://huggingface.co/settings/tokens"),g(ht,"rel","nofollow"),g(oe,"class","docstring"),g(Ne,"class","docstring"),g(Fe,"class","docstring"),g(Pe,"class","docstring"),g(je,"class","docstring"),g(Oe,"class","docstring"),g(Le,"class","docstring"),g($t,"href","https://huggingface.co/settings/tokens"),g($t,"rel","nofollow"),g(ae,"class","docstring"),g(fe,"class","docstring"),g(Ie,"class","docstring"),g(wt,"href","https://huggingface.co/settings/tokens"),g(wt,"rel","nofollow"),g(W,"class","docstring"),g(Dt,"href","https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),g(Dt,"rel","nofollow"),g(xt,"href","https://huggingface.co/settings/tokens"),g(xt,"rel","nofollow"),g(B,"class","docstring"),g(Ce,"class","docstring"),g(Ue,"class","docstring"),g(Pt,"href","https://huggingface.co/settings/tokens"),g(Pt,"rel","nofollow"),g(ne,"class","docstring"),g(K,"class","docstring"),g(Ve,"class","docstring"),g(p,"class","docstring"),g(ze,"id","huggingface_hub.HfFolder"),g(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),g(ze,"href","#huggingface_hub.HfFolder"),g(ke,"class","relative group"),g(io,"href","/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.HfFolder"),g(Se,"class","docstring"),g(Ge,"class","docstring"),g(We,"class","docstring"),g(X,"class","docstring"),g(Be,"id","huggingface_hub.DatasetFilter"),g(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),g(Be,"href","#huggingface_hub.DatasetFilter"),g(we,"class","relative group"),g($,"class","docstring"),g(Ae,"class","docstring")},m(o,h){e(document.head,A),y(o,I,h),y(o,N,h),e(N,k),e(k,q),u(w,q,null),e(N,O),e(N,T),e(T,C),y(o,F,h),y(o,H,h),e(H,P),e(H,L),e(L,R),e(H,S),y(o,D,h),y(o,j,h),e(j,Q),e(j,J),e(J,$e),e(j,ye),y(o,Z,h),y(o,ee,h),e(ee,Ee),y(o,za,h),u(at,o,h),y(o,Ra,h),y(o,De,h),e(De,Hn),e(De,go),e(go,Dn),e(De,xn),y(o,Sa,h),u(nt,o,h),y(o,Ga,h),y(o,xe,h),e(xe,qn),e(xe,po),e(po,Nn),e(xe,Fn),y(o,Wa,h),y(o,p,h),u(rt,p,null),e(p,Pn),e(p,te),u(st,te,null),e(te,jn),e(te,ho),e(ho,On),e(te,Ln),e(te,fo),e(fo,Tn),e(te,In),e(te,uo),e(uo,eo),e(eo,Cn),e(eo,it),e(it,Un),e(p,Mn),e(p,G),u(lt,G,null),e(G,Vn),e(G,mo),e(mo,zn),e(G,Rn),e(G,_o),e(_o,Sn),e(G,Gn),e(G,bo),e(bo,Wn),e(G,Bn),e(G,vo),e(vo,to),e(to,Kn),e(to,ct),e(ct,Qn),e(p,Jn),e(p,de),u(gt,de,null),e(de,Xn),e(de,$o),e($o,Yn),e(de,Zn),u(qe,de,null),e(p,er),e(p,oe),u(pt,oe,null),e(oe,tr),e(oe,yo),e(yo,or),e(oe,ar),e(oe,Eo),e(Eo,nr),e(oe,rr),e(oe,ko),e(ko,oo),e(oo,sr),e(oo,ht),e(ht,ir),e(p,lr),e(p,Ne),u(dt,Ne,null),e(Ne,cr),e(Ne,wo),e(wo,gr),e(p,pr),e(p,Fe),u(ft,Fe,null),e(Fe,hr),e(Fe,Ao),e(Ao,dr),e(p,fr),e(p,Pe),u(ut,Pe,null),e(Pe,ur),e(Pe,Ho),e(Ho,mr),e(p,_r),e(p,je),u(mt,je,null),e(je,br),e(je,Do),e(Do,vr),e(p,$r),e(p,Oe),u(_t,Oe,null),e(Oe,yr),e(Oe,xo),e(xo,Er),e(p,kr),e(p,Le),u(bt,Le,null),e(Le,wr),e(Le,qo),e(qo,Ar),e(p,Hr),e(p,ae),u(vt,ae,null),e(ae,Dr),e(ae,No),e(No,xr),e(ae,qr),e(ae,Fo),e(Fo,Nr),e(ae,Fr),e(ae,Po),e(Po,ao),e(ao,Pr),e(ao,$t),e($t,jr),e(p,Or),e(p,fe),u(yt,fe,null),e(fe,Lr),e(fe,jo),e(jo,Tr),e(fe,Ir),u(Te,fe,null),e(p,Cr),e(p,Ie),u(Et,Ie,null),e(Ie,Ur),e(Ie,Oo),e(Oo,Mr),e(p,Vr),e(p,W),u(kt,W,null),e(W,zr),e(W,Lo),e(Lo,Rr),e(W,Sr),e(W,To),e(To,Gr),e(W,Wr),e(W,Io),e(Io,Br),e(W,Kr),e(W,Co),e(Co,no),e(no,Qr),e(no,wt),e(wt,Jr),e(p,Xr),e(p,B),u(At,B,null),e(B,Yr),e(B,Uo),e(Uo,Zr),e(B,es),e(B,Ht),e(Ht,ts),e(Ht,Dt),e(Dt,os),e(Ht,as),e(B,ns),e(B,Mo),e(Mo,rs),e(B,ss),e(B,Vo),e(Vo,ro),e(ro,is),e(ro,xt),e(xt,ls),e(p,cs),e(p,Ce),u(qt,Ce,null),e(Ce,gs),e(Ce,zo),e(zo,ps),e(p,hs),e(p,Ue),u(Nt,Ue,null),e(Ue,ds),e(Ue,Ro),e(Ro,fs),e(p,us),e(p,ne),u(Ft,ne,null),e(ne,ms),e(ne,So),e(So,_s),e(ne,bs),e(ne,Go),e(Go,vs),e(ne,$s),e(ne,Wo),e(Wo,so),e(so,ys),e(so,Pt),e(Pt,Es),e(p,ks),e(p,K),u(jt,K,null),e(K,ws),e(K,Bo),e(Bo,As),e(K,Hs),u(Me,K,null),e(K,Ds),e(K,Ko),e(Ko,xs),e(K,qs),u(Ot,K,null),e(p,Ns),e(p,Ve),u(Lt,Ve,null),e(Ve,Fs),e(Ve,Qo),e(Qo,Ps),y(o,Ba,h),y(o,ke,h),e(ke,ze),e(ze,Jo),u(Tt,Jo,null),e(ke,js),e(ke,Xo),e(Xo,Os),y(o,Ka,h),y(o,It,h),e(It,Yo),e(Yo,Ls),e(It,Ts),y(o,Qa,h),y(o,Re,h),e(Re,Is),e(Re,io),e(io,Cs),e(Re,Us),y(o,Ja,h),y(o,X,h),u(Ct,X,null),e(X,Ms),e(X,Se),u(Ut,Se,null),e(Se,Vs),e(Se,Zo),e(Zo,zs),e(X,Rs),e(X,Ge),u(Mt,Ge,null),e(Ge,Ss),e(Ge,ea),e(ea,Gs),e(X,Ws),e(X,We),u(Vt,We,null),e(We,Bs),e(We,ta),e(ta,Ks),y(o,Xa,h),y(o,we,h),e(we,Be),e(Be,oa),u(zt,oa,null),e(we,Qs),e(we,aa),e(aa,Js),y(o,Ya,h),y(o,Ke,h),e(Ke,Xs),e(Ke,na),e(na,Ys),e(Ke,Zs),y(o,Za,h),y(o,$,h),u(Rt,$,null),e($,ei),e($,ra),e(ra,ti),e($,oi),e($,ce),e(ce,ai),e(ce,sa),e(sa,ni),e(ce,ri),e(ce,ia),e(ia,si),e(ce,ii),e(ce,la),e(la,li),e(ce,ci),e($,gi),u(St,$,null),e($,pi),e($,Y),e(Y,hi),e(Y,ca),e(ca,di),e(Y,fi),e(Y,ga),e(ga,ui),e(Y,mi),e(Y,pa),e(pa,_i),e(Y,bi),e(Y,ha),e(ha,vi),e(Y,$i),e($,yi),u(Gt,$,null),e($,Ei),e($,U),e(U,ki),e(U,da),e(da,wi),e(U,Ai),e(U,fa),e(fa,Hi),e(U,Di),e(U,ua),e(ua,xi),e(U,qi),e(U,ma),e(ma,Ni),e(U,Fi),e(U,_a),e(_a,Pi),e(U,ji),e($,Oi),u(Wt,$,null),e($,Li),e($,ge),e(ge,Ti),e(ge,ba),e(ba,Ii),e(ge,Ci),e(ge,va),e(va,Ui),e(ge,Mi),e(ge,$a),e($a,Vi),e(ge,zi),e($,Ri),u(Bt,$,null),e($,Si),e($,pe),e(pe,Gi),e(pe,ya),e(ya,Wi),e(pe,Bi),e(pe,Ea),e(Ea,Ki),e(pe,Qi),e(pe,ka),e(ka,Ji),e(pe,Xi),e($,Yi),u(Kt,$,null),e($,Zi),e($,M),e(M,el),e(M,wa),e(wa,tl),e(M,ol),e(M,Aa),e(Aa,al),e(M,nl),e(M,Ha),e(Ha,rl),e(M,sl),e(M,Da),e(Da,il),e(M,ll),e(M,xa),e(xa,cl),e(M,gl),e($,pl),u(Qt,$,null),e($,hl),e($,V),e(V,dl),e(V,qa),e(qa,fl),e(V,ul),e(V,Na),e(Na,ml),e(V,_l),e(V,Fa),e(Fa,bl),e(V,vl),e(V,Pa),e(Pa,$l),e(V,yl),e(V,ja),e(ja,El),e(V,kl),e($,wl),u(Jt,$,null),e($,Al),e($,z),e(z,Hl),e(z,Oa),e(Oa,Dl),e(z,xl),e(z,La),e(La,ql),e(z,Nl),e(z,Ta),e(Ta,Fl),e(z,Pl),e(z,Ia),e(Ia,jl),e(z,Ol),e(z,Ca),e(Ca,Ll),e(z,Tl),e($,Il),u(Xt,$,null),y(o,en,h),y(o,Ae,h),u(Yt,Ae,null),e(Ae,Cl),e(Ae,Ua),e(Ua,Ul),tn=!0},p(o,[h]){const Zt={};h&2&&(Zt.$$scope={dirty:h,ctx:o}),qe.$set(Zt);const Ma={};h&2&&(Ma.$$scope={dirty:h,ctx:o}),Te.$set(Ma);const Va={};h&2&&(Va.$$scope={dirty:h,ctx:o}),Me.$set(Va)},i(o){tn||(m(w.$$.fragment,o),m(at.$$.fragment,o),m(nt.$$.fragment,o),m(rt.$$.fragment,o),m(st.$$.fragment,o),m(lt.$$.fragment,o),m(gt.$$.fragment,o),m(qe.$$.fragment,o),m(pt.$$.fragment,o),m(dt.$$.fragment,o),m(ft.$$.fragment,o),m(ut.$$.fragment,o),m(mt.$$.fragment,o),m(_t.$$.fragment,o),m(bt.$$.fragment,o),m(vt.$$.fragment,o),m(yt.$$.fragment,o),m(Te.$$.fragment,o),m(Et.$$.fragment,o),m(kt.$$.fragment,o),m(At.$$.fragment,o),m(qt.$$.fragment,o),m(Nt.$$.fragment,o),m(Ft.$$.fragment,o),m(jt.$$.fragment,o),m(Me.$$.fragment,o),m(Ot.$$.fragment,o),m(Lt.$$.fragment,o),m(Tt.$$.fragment,o),m(Ct.$$.fragment,o),m(Ut.$$.fragment,o),m(Mt.$$.fragment,o),m(Vt.$$.fragment,o),m(zt.$$.fragment,o),m(Rt.$$.fragment,o),m(St.$$.fragment,o),m(Gt.$$.fragment,o),m(Wt.$$.fragment,o),m(Bt.$$.fragment,o),m(Kt.$$.fragment,o),m(Qt.$$.fragment,o),m(Jt.$$.fragment,o),m(Xt.$$.fragment,o),m(Yt.$$.fragment,o),tn=!0)},o(o){_(w.$$.fragment,o),_(at.$$.fragment,o),_(nt.$$.fragment,o),_(rt.$$.fragment,o),_(st.$$.fragment,o),_(lt.$$.fragment,o),_(gt.$$.fragment,o),_(qe.$$.fragment,o),_(pt.$$.fragment,o),_(dt.$$.fragment,o),_(ft.$$.fragment,o),_(ut.$$.fragment,o),_(mt.$$.fragment,o),_(_t.$$.fragment,o),_(bt.$$.fragment,o),_(vt.$$.fragment,o),_(yt.$$.fragment,o),_(Te.$$.fragment,o),_(Et.$$.fragment,o),_(kt.$$.fragment,o),_(At.$$.fragment,o),_(qt.$$.fragment,o),_(Nt.$$.fragment,o),_(Ft.$$.fragment,o),_(jt.$$.fragment,o),_(Me.$$.fragment,o),_(Ot.$$.fragment,o),_(Lt.$$.fragment,o),_(Tt.$$.fragment,o),_(Ct.$$.fragment,o),_(Ut.$$.fragment,o),_(Mt.$$.fragment,o),_(Vt.$$.fragment,o),_(zt.$$.fragment,o),_(Rt.$$.fragment,o),_(St.$$.fragment,o),_(Gt.$$.fragment,o),_(Wt.$$.fragment,o),_(Bt.$$.fragment,o),_(Kt.$$.fragment,o),_(Qt.$$.fragment,o),_(Jt.$$.fragment,o),_(Xt.$$.fragment,o),_(Yt.$$.fragment,o),tn=!1},d(o){t(A),o&&t(I),o&&t(N),b(w),o&&t(F),o&&t(H),o&&t(D),o&&t(j),o&&t(Z),o&&t(ee),o&&t(za),b(at,o),o&&t(Ra),o&&t(De),o&&t(Sa),b(nt,o),o&&t(Ga),o&&t(xe),o&&t(Wa),o&&t(p),b(rt),b(st),b(lt),b(gt),b(qe),b(pt),b(dt),b(ft),b(ut),b(mt),b(_t),b(bt),b(vt),b(yt),b(Te),b(Et),b(kt),b(At),b(qt),b(Nt),b(Ft),b(jt),b(Me),b(Ot),b(Lt),o&&t(Ba),o&&t(ke),b(Tt),o&&t(Ka),o&&t(It),o&&t(Qa),o&&t(Re),o&&t(Ja),o&&t(X),b(Ct),b(Ut),b(Mt),b(Vt),o&&t(Xa),o&&t(we),b(zt),o&&t(Ya),o&&t(Ke),o&&t(Za),o&&t($),b(Rt),b(St),b(Gt),b(Wt),b(Bt),b(Kt),b(Qt),b(Jt),b(Xt),o&&t(en),o&&t(Ae),b(Yt)}}}const Qg={local:"huggingface_hub.HfApi",sections:[{local:"huggingface_hub.HfFolder",title:"Hugging Face local storage"},{local:"huggingface_hub.DatasetFilter",title:"Filtering helpers"}],title:"Hugging Face Hub API"};function Jg(He){return Sg(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class op extends Mg{constructor(A){super();Vg(this,A,Jg,Kg,zg,{})}}export{op as default,Qg as metadata};
