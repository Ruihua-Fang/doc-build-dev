import{S as Sg,i as Gg,s as Wg,e as a,k as l,w as f,t as s,M as Bg,c as n,d as t,m as c,a as r,x as u,h as i,b as g,F as e,g as y,y as m,q as _,o as b,B as v,v as Kg}from"../../chunks/vendor-7b1da053.js";import{T as Ba}from"../../chunks/Tip-41a95816.js";import{D as F}from"../../chunks/Docstring-f1352b16.js";import{C as fe}from"../../chunks/CodeBlock-5f39b59e.js";import{I as ec}from"../../chunks/IconCopyLink-d24e9a6f.js";function Qg(Z){let p,P,A,k,q,$,D,O,C,j,x,L,I,R,S;return{c(){p=a("p"),P=s("Raises the following errors:"),A=l(),k=a("ul"),q=a("li"),$=a("a"),D=a("code"),O=s("HTTPError"),C=s(`
if the HuggingFace API returned an error`),j=l(),x=a("li"),L=a("a"),I=a("code"),R=s("ValueError"),S=s(`
if some parameter value is invalid`),this.h()},l(N){p=n(N,"P",{});var T=r(p);P=i(T,"Raises the following errors:"),T.forEach(t),A=c(N),k=n(N,"UL",{});var Q=r(k);q=n(Q,"LI",{});var J=r(q);$=n(J,"A",{href:!0,rel:!0});var Ee=r($);D=n(Ee,"CODE",{});var ke=r(D);O=i(ke,"HTTPError"),ke.forEach(t),Ee.forEach(t),C=i(J,`
if the HuggingFace API returned an error`),J.forEach(t),j=c(Q),x=n(Q,"LI",{});var ee=r(x);L=n(ee,"A",{href:!0,rel:!0});var te=r(L);I=n(te,"CODE",{});var we=r(I);R=i(we,"ValueError"),we.forEach(t),te.forEach(t),S=i(ee,`
if some parameter value is invalid`),ee.forEach(t),Q.forEach(t),this.h()},h(){g($,"href","https://2.python-requests.org/en/master/api/#requests.HTTPError"),g($,"rel","nofollow"),g(L,"href","https://docs.python.org/3/library/exceptions.html#ValueError"),g(L,"rel","nofollow")},m(N,T){y(N,p,T),e(p,P),y(N,A,T),y(N,k,T),e(k,q),e(q,$),e($,D),e(D,O),e(q,C),e(k,j),e(k,x),e(x,L),e(L,I),e(I,R),e(x,S)},d(N){N&&t(p),N&&t(A),N&&t(k)}}}function Jg(Z){let p,P,A,k,q;return{c(){p=a("p"),P=s(`Warning: Deprecated, will be removed in v0.7. Please use
`),A=a("a"),k=s("HfApi.set_access_token()"),q=s(" instead."),this.h()},l($){p=n($,"P",{});var D=r(p);P=i(D,`Warning: Deprecated, will be removed in v0.7. Please use
`),A=n(D,"A",{href:!0});var O=r(A);k=i(O,"HfApi.set_access_token()"),O.forEach(t),q=i(D," instead."),D.forEach(t),this.h()},h(){g(A,"href","/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.HfApi.set_access_token")},m($,D){y($,p,D),e(p,P),e(p,A),e(A,k),e(p,q)},d($){$&&t(p)}}}function Xg(Z){let p,P,A,k,q,$,D,O,C;return{c(){p=a("p"),P=s("Raises the following errors:"),A=l(),k=a("ul"),q=a("li"),$=a("a"),D=a("code"),O=s("HTTPError"),C=s(`
if credentials are invalid`),this.h()},l(j){p=n(j,"P",{});var x=r(p);P=i(x,"Raises the following errors:"),x.forEach(t),A=c(j),k=n(j,"UL",{});var L=r(k);q=n(L,"LI",{});var I=r(q);$=n(I,"A",{href:!0,rel:!0});var R=r($);D=n(R,"CODE",{});var S=r(D);O=i(S,"HTTPError"),S.forEach(t),R.forEach(t),C=i(I,`
if credentials are invalid`),I.forEach(t),L.forEach(t),this.h()},h(){g($,"href","https://2.python-requests.org/en/master/api/#requests.HTTPError"),g($,"rel","nofollow")},m(j,x){y(j,p,x),e(p,P),y(j,A,x),y(j,k,x),e(k,q),e(q,$),e($,D),e(D,O),e(q,C)},d(j){j&&t(p),j&&t(A),j&&t(k)}}}function Yg(Z){let p,P,A,k,q;return{c(){p=a("p"),P=s(`Warning: Deprecated, will be removed in v0.7. Please use
`),A=a("a"),k=s("HfApi.unset_access_token()"),q=s(" instead."),this.h()},l($){p=n($,"P",{});var D=r(p);P=i(D,`Warning: Deprecated, will be removed in v0.7. Please use
`),A=n(D,"A",{href:!0});var O=r(A);k=i(O,"HfApi.unset_access_token()"),O.forEach(t),q=i(D," instead."),D.forEach(t),this.h()},h(){g(A,"href","/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.HfApi.unset_access_token")},m($,D){y($,p,D),e(p,P),e(p,A),e(A,k),e(p,q)},d($){$&&t(p)}}}function Zg(Z){let p,P,A,k,q,$,D,O,C,j,x,L,I,R,S;return{c(){p=a("p"),P=s("Raises the following errors:"),A=l(),k=a("ul"),q=a("li"),$=a("a"),D=a("code"),O=s("HTTPError"),C=s(`
if the HuggingFace API returned an error`),j=l(),x=a("li"),L=a("a"),I=a("code"),R=s("ValueError"),S=s(`
if some parameter value is invalid`),this.h()},l(N){p=n(N,"P",{});var T=r(p);P=i(T,"Raises the following errors:"),T.forEach(t),A=c(N),k=n(N,"UL",{});var Q=r(k);q=n(Q,"LI",{});var J=r(q);$=n(J,"A",{href:!0,rel:!0});var Ee=r($);D=n(Ee,"CODE",{});var ke=r(D);O=i(ke,"HTTPError"),ke.forEach(t),Ee.forEach(t),C=i(J,`
if the HuggingFace API returned an error`),J.forEach(t),j=c(Q),x=n(Q,"LI",{});var ee=r(x);L=n(ee,"A",{href:!0,rel:!0});var te=r(L);I=n(te,"CODE",{});var we=r(I);R=i(we,"ValueError"),we.forEach(t),te.forEach(t),S=i(ee,`
if some parameter value is invalid`),ee.forEach(t),Q.forEach(t),this.h()},h(){g($,"href","https://2.python-requests.org/en/master/api/#requests.HTTPError"),g($,"rel","nofollow"),g(L,"href","https://docs.python.org/3/library/exceptions.html#ValueError"),g(L,"rel","nofollow")},m(N,T){y(N,p,T),e(p,P),y(N,A,T),y(N,k,T),e(k,q),e(q,$),e($,D),e(D,O),e(q,C),e(k,j),e(k,x),e(x,L),e(L,I),e(I,R),e(x,S)},d(N){N&&t(p),N&&t(A),N&&t(k)}}}function ep(Z){let p,P,A,k,q,$,D,O,C,j,x,L,I,R,S,N,T,Q,J,Ee,ke,ee,te,we,Ka,st,Qa,qe,Nn,uo,Fn,Pn,Ja,it,Xa,xe,jn,mo,On,Ln,Ya,d,lt,Tn,oe,ct,In,_o,Cn,Un,bo,Mn,Vn,vo,no,zn,gt,Rn,Sn,G,pt,Gn,$o,Wn,Bn,yo,Kn,Qn,Eo,Jn,Xn,ko,ro,Yn,ht,Zn,er,ue,dt,tr,wo,or,ar,Ne,nr,ae,ft,rr,Ao,sr,ir,Ho,lr,cr,Do,so,gr,ut,pr,hr,Fe,mt,dr,qo,fr,ur,Pe,_t,mr,xo,_r,br,je,bt,vr,No,$r,yr,Oe,vt,Er,Fo,kr,wr,Le,$t,Ar,Po,Hr,Dr,Te,yt,qr,jo,xr,Nr,ne,Et,Fr,Oo,Pr,jr,Lo,Or,Lr,To,io,Tr,kt,Ir,Cr,re,wt,Ur,Io,Mr,Vr,Ie,zr,Ce,Rr,me,At,Sr,Co,Gr,Wr,Ue,Br,W,Ht,Kr,Uo,Qr,Jr,Mo,Xr,Yr,Vo,Zr,es,zo,lo,ts,Dt,os,as,B,qt,ns,Ro,rs,ss,xt,is,Nt,ls,cs,gs,So,ps,hs,Go,co,ds,Ft,fs,us,Me,Pt,ms,Wo,_s,bs,Ve,jt,vs,Bo,$s,ys,se,Ot,Es,Ko,ks,ws,Qo,As,Hs,Jo,go,Ds,Lt,qs,xs,K,Tt,Ns,Xo,Fs,Ps,ze,js,Yo,Os,Ls,It,Ts,Re,Ct,Is,Zo,Cs,Za,Ae,Se,ea,Ut,Us,ta,Ms,en,Mt,oa,Vs,zs,tn,Ge,Rs,po,Ss,Gs,on,X,Vt,Ws,We,zt,Bs,aa,Ks,Qs,Be,Rt,Js,na,Xs,Ys,Ke,St,Zs,ra,ei,an,He,Qe,sa,Gt,ti,ia,oi,nn,Je,ai,la,ni,ri,rn,w,Wt,si,ca,ii,li,pe,ci,ga,gi,pi,pa,hi,di,ha,fi,ui,mi,Bt,_i,Y,bi,da,vi,$i,fa,yi,Ei,ua,ki,wi,ma,Ai,Hi,Di,Kt,qi,U,xi,_a,Ni,Fi,ba,Pi,ji,va,Oi,Li,$a,Ti,Ii,ya,Ci,Ui,Mi,Qt,Vi,he,zi,Ea,Ri,Si,ka,Gi,Wi,wa,Bi,Ki,Qi,Jt,Ji,de,Xi,Aa,Yi,Zi,Ha,el,tl,Da,ol,al,nl,Xt,rl,M,sl,qa,il,ll,xa,cl,gl,Na,pl,hl,Fa,dl,fl,Pa,ul,ml,_l,Yt,bl,V,vl,ja,$l,yl,Oa,El,kl,La,wl,Al,Ta,Hl,Dl,Ia,ql,xl,Nl,Zt,Fl,z,Pl,Ca,jl,Ol,Ua,Ll,Tl,Ma,Il,Cl,Va,Ul,Ml,za,Vl,zl,Rl,eo,sn,De,to,Sl,Ra,Gl,ln;return $=new ec({}),st=new fe({props:{code:`from huggingface_hub import list_models

models = list_models()`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> list_models

models = list_models()`}}),it=new fe({props:{code:`from huggingface_hub import HfApi

hf_api = HfApi()
models = hf_api.list_models()`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi

hf_api = HfApi()
models = hf_api.list_models()`}}),lt=new F({props:{name:"class huggingface_hub.HfApi",anchor:"huggingface_hub.HfApi",parameters:[{name:"endpoint",val:" = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L455"}}),ct=new F({props:{name:"create_repo",anchor:"huggingface_hub.HfApi.create_repo",parameters:[{name:"repo_id",val:": str = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"exist_ok",val:": typing.Optional[bool] = False"},{name:"space_sdk",val:": typing.Optional[str] = None"},{name:"name",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1229",parametersDescription:[{anchor:"huggingface_hub.HfApi.create_repo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>Version added: 0.4.0</p>

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.create_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.create_repo.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether the model repo should be private.`,name:"private"},{anchor:"huggingface_hub.HfApi.create_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.create_repo.exist_ok",description:`<strong>exist_ok</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, do not raise an error if repo already exists.`,name:"exist_ok"},{anchor:"huggingface_hub.HfApi.create_repo.space_sdk",description:`<strong>space_sdk</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Choice of SDK to use if repo_type is &#x201C;space&#x201D;. Can be
&#x201C;streamlit&#x201D;, &#x201C;gradio&#x201D;, or &#x201C;static&#x201D;.`,name:"space_sdk"}],returnDescription:`
<p>URL to the newly created repo.</p>
`,returnType:`
<p><code>str</code></p>
`}}),pt=new F({props:{name:"dataset_info",anchor:"huggingface_hub.HfApi.dataset_info",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1183",parametersDescription:[{anchor:"huggingface_hub.HfApi.dataset_info.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.dataset_info.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The revision of the dataset repository from which to get the
information.`,name:"revision"},{anchor:"huggingface_hub.HfApi.dataset_info.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.dataset_info.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Whether to set a timeout for the request to the hub.`,name:"timeout"}],returnDescription:`
<p>The dataset repository information.</p>
`,returnType:`
<p><code>DatasetInfo</code></p>
`}}),dt=new F({props:{name:"delete_file",anchor:"huggingface_hub.HfApi.delete_file",parameters:[{name:"path_in_repo",val:": str"},{name:"repo_id",val:": str"},{name:"token",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1745",parametersDescription:[{anchor:"huggingface_hub.HfApi.delete_file.path_in_repo",description:`<strong>path_in_repo</strong> (<code>str</code>) &#x2014;
Relative filepath in the repo, for example:
<code>&quot;checkpoints/1fec34a/weights.bin&quot;</code>`,name:"path_in_repo"},{anchor:"huggingface_hub.HfApi.delete_file.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The repository from which the file will be deleted, for example:
<code>&quot;username/custom_transformers&quot;</code>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.delete_file.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Authentication token, obtained with :function:<code>HfApi.login</code>
method. Will default to the stored token.`,name:"token"},{anchor:"huggingface_hub.HfApi.delete_file.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if the file is in a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if in a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.delete_file.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The git revision to commit from. Defaults to the head of the
<code>&quot;main&quot;</code> branch.`,name:"revision"}]}}),Ne=new Ba({props:{$$slots:{default:[Qg]},$$scope:{ctx:Z}}}),ft=new F({props:{name:"delete_repo",anchor:"huggingface_hub.HfApi.delete_repo",parameters:[{name:"repo_id",val:": str = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"name",val:": str = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1369",parametersDescription:[{anchor:"huggingface_hub.HfApi.delete_repo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>Version added: 0.4.0</p>

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.delete_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.delete_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model.`,name:"repo_type"}]}}),mt=new F({props:{name:"get_dataset_tags",anchor:"huggingface_hub.HfApi.get_dataset_tags",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L637"}}),_t=new F({props:{name:"get_full_repo_name",anchor:"huggingface_hub.HfApi.get_full_repo_name",parameters:[{name:"model_id",val:": str"},{name:"organization",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1803",parametersDescription:[{anchor:"huggingface_hub.HfApi.get_full_repo_name.model_id",description:`<strong>model_id</strong> (<code>str</code>) &#x2014;
The name of the model.`,name:"model_id"},{anchor:"huggingface_hub.HfApi.get_full_repo_name.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
If passed, the repository name will be in the organization
namespace instead of the user namespace.`,name:"organization"},{anchor:"huggingface_hub.HfApi.get_full_repo_name.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The Hugging Face authentication token`,name:"token"}],returnDescription:`
<p>The repository name in the user\u2019s namespace
({username}/{model_id}) if no organization is passed, and under the
organization namespace ({organization}/{model_id}) otherwise.</p>
`,returnType:`
<p><code>str</code></p>
`}}),bt=new F({props:{name:"get_model_tags",anchor:"huggingface_hub.HfApi.get_model_tags",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L629"}}),vt=new F({props:{name:"list_datasets",anchor:"huggingface_hub.HfApi.list_datasets",parameters:[{name:"filter",val:": typing.Union[huggingface_hub.utils.endpoint_helpers.DatasetFilter, str, typing.Iterable[str], NoneType] = None"},{name:"author",val:": typing.Optional[str] = None"},{name:"search",val:": typing.Optional[str] = None"},{name:"sort",val:": typing.Union[typing.Literal['lastModified'], str, NoneType] = None"},{name:"direction",val:": typing.Optional[typing.Literal[-1]] = None"},{name:"limit",val:": typing.Optional[int] = None"},{name:"cardData",val:": typing.Optional[bool] = None"},{name:"full",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L884",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_datasets.filter",description:`<strong>filter</strong> (<a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.DatasetFilter">DatasetFilter</a> or <code>str</code> or <code>Iterable</code>, <em>optional</em>) &#x2014;
A string or <a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.DatasetFilter">DatasetFilter</a> which can be used to identify
datasets on the hub. Example usage:`,name:"filter"}]}}),$t=new F({props:{name:"list_metrics",anchor:"huggingface_hub.HfApi.list_metrics",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1070",returnDescription:`
<p>a list of <code>MetricInfo</code> objects which.</p>
`,returnType:`
<p><code>List[MetricInfo]</code></p>
`}}),yt=new F({props:{name:"list_models",anchor:"huggingface_hub.HfApi.list_models",parameters:[{name:"filter",val:": typing.Union[huggingface_hub.utils.endpoint_helpers.ModelFilter, str, typing.Iterable[str], NoneType] = None"},{name:"author",val:": typing.Optional[str] = None"},{name:"search",val:": typing.Optional[str] = None"},{name:"emissions_thresholds",val:": typing.Union[typing.Tuple[float, float], NoneType] = None"},{name:"sort",val:": typing.Union[typing.Literal['lastModified'], str, NoneType] = None"},{name:"direction",val:": typing.Optional[typing.Literal[-1]] = None"},{name:"limit",val:": typing.Optional[int] = None"},{name:"full",val:": typing.Optional[bool] = None"},{name:"cardData",val:": typing.Optional[bool] = None"},{name:"fetch_config",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L647",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_models.filter",description:`<strong>filter</strong> (<a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.ModelFilter">ModelFilter</a> or <code>str</code> or <code>Iterable</code>, <em>optional</em>) &#x2014;
A string or <a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.ModelFilter">ModelFilter</a> which can be used to identify models
on the hub.</p>
<p>Example usage:`,name:"filter"}]}}),Et=new F({props:{name:"list_repo_files",anchor:"huggingface_hub.HfApi.list_repo_files",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1136",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_repo_files.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.list_repo_files.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The revision of the model repository from which to get the
information.`,name:"revision"},{anchor:"huggingface_hub.HfApi.list_repo_files.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.list_repo_files.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.list_repo_files.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Whether to set a timeout for the request to the hub.`,name:"timeout"}],returnDescription:`
<p>the list of files in a given repository.</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),wt=new F({props:{name:"login",anchor:"huggingface_hub.HfApi.login",parameters:[{name:"username",val:": str"},{name:"password",val:": str"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L461",parametersDescription:[{anchor:"huggingface_hub.HfApi.login.username",description:`<strong>username</strong> (<code>str</code>) &#x2014;
The username of the account with which to login.`,name:"username"},{anchor:"huggingface_hub.HfApi.login.password",description:`<strong>password</strong> (<code>str</code>) &#x2014;
The password of the account with which to login.`,name:"password"}],returnDescription:`
<p>token if credentials are valid</p>
`,returnType:`
<p><code>str</code></p>
`}}),Ie=new Ba({props:{$$slots:{default:[Jg]},$$scope:{ctx:Z}}}),Ce=new Ba({props:{$$slots:{default:[Xg]},$$scope:{ctx:Z}}}),At=new F({props:{name:"logout",anchor:"huggingface_hub.HfApi.logout",parameters:[{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L574",parametersDescription:[{anchor:"huggingface_hub.HfApi.logout.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Hugging Face token. Will default to the locally saved token if
not provided.`,name:"token"}]}}),Ue=new Ba({props:{$$slots:{default:[Yg]},$$scope:{ctx:Z}}}),Ht=new F({props:{name:"model_info",anchor:"huggingface_hub.HfApi.model_info",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"},{name:"securityStatus",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1084",parametersDescription:[{anchor:"huggingface_hub.HfApi.model_info.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.model_info.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The revision of the model repository from which to get the
information.`,name:"revision"},{anchor:"huggingface_hub.HfApi.model_info.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.model_info.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Whether to set a timeout for the request to the hub.`,name:"timeout"},{anchor:"huggingface_hub.HfApi.model_info.securityStatus",description:`<strong>securityStatus</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to retrieve the security status from the model
repository as well.`,name:"securityStatus"}],returnDescription:`
<p>The model repository information.</p>
`,returnType:`
<p><code>ModelInfo</code></p>
`}}),qt=new F({props:{name:"move_repo",anchor:"huggingface_hub.HfApi.move_repo",parameters:[{name:"from_id",val:": str"},{name:"to_id",val:": str"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1540",parametersDescription:[{anchor:"huggingface_hub.HfApi.move_repo.from_id",description:`<strong>from_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>. Original repository identifier.`,name:"from_id"},{anchor:"huggingface_hub.HfApi.move_repo.to_id",description:`<strong>to_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>. Final repository identifier.`,name:"to_id"},{anchor:"huggingface_hub.HfApi.move_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.move_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"}]}}),Pt=new F({props:{name:"set_access_token",anchor:"huggingface_hub.HfApi.set_access_token",parameters:[{name:"access_token",val:": str"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L610",parametersDescription:[{anchor:"huggingface_hub.HfApi.set_access_token.access_token",description:`<strong>access_token</strong> (<code>str</code>) &#x2014;
The access token to save.`,name:"access_token"}]}}),jt=new F({props:{name:"unset_access_token",anchor:"huggingface_hub.HfApi.unset_access_token",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L622"}}),Ot=new F({props:{name:"update_repo_visibility",anchor:"huggingface_hub.HfApi.update_repo_visibility",parameters:[{name:"repo_id",val:": str = None"},{name:"private",val:": bool = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"name",val:": str = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1463",parametersDescription:[{anchor:"huggingface_hub.HfApi.update_repo_visibility.repo_id",description:`<strong>repo_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>Version added: 0.4.0</p>

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.update_repo_visibility.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the model repo should be private.`,name:"private"},{anchor:"huggingface_hub.HfApi.update_repo_visibility.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.update_repo_visibility.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"}],returnDescription:`
<p>The HTTP response in json.</p>
`}}),Tt=new F({props:{name:"upload_file",anchor:"huggingface_hub.HfApi.upload_file",parameters:[{name:"path_or_fileobj",val:": typing.Union[str, bytes, typing.IO]"},{name:"path_in_repo",val:": str"},{name:"repo_id",val:": str"},{name:"token",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"identical_ok",val:": bool = True"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1605",parametersDescription:[{anchor:"huggingface_hub.HfApi.upload_file.path_or_fileobj",description:`<strong>path_or_fileobj</strong> (<code>str</code>, <code>bytes</code>, or <code>IO</code>) &#x2014;
Path to a file on the local machine or binary data stream /
fileobj / buffer.`,name:"path_or_fileobj"},{anchor:"huggingface_hub.HfApi.upload_file.path_in_repo",description:`<strong>path_in_repo</strong> (<code>str</code>) &#x2014;
Relative filepath in the repo, for example:
<code>&quot;checkpoints/1fec34a/weights.bin&quot;</code>`,name:"path_in_repo"},{anchor:"huggingface_hub.HfApi.upload_file.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The repository to which the file will be uploaded, for example:
<code>&quot;username/custom_transformers&quot;</code>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.upload_file.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Authentication token, obtained with :function:<code>HfApi.login</code>
method. Will default to the stored token.`,name:"token"},{anchor:"huggingface_hub.HfApi.upload_file.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.upload_file.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The git revision to commit from. Defaults to the head of the
<code>&quot;main&quot;</code> branch.`,name:"revision"},{anchor:"huggingface_hub.HfApi.upload_file.identical_ok",description:`<strong>identical_ok</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
When set to false, will raise an <a href="https://2.python-requests.org/en/master/api/#requests.HTTPError" rel="nofollow">HTTPError</a>
when the file you&#x2019;re trying to upload already exists on the hub
and its content did not change.`,name:"identical_ok"}],returnDescription:`
<p>The URL to visualize the uploaded file on the hub</p>
`,returnType:`
<p><code>str</code></p>
`}}),ze=new Ba({props:{$$slots:{default:[Zg]},$$scope:{ctx:Z}}}),It=new fe({props:{code:`with open("./local/filepath", "rb") as fobj:
    upload_file(
        path_or_fileobj=fileobj,
        path_in_repo="remote/file/path.h5",
        repo_id="username/my-dataset",
        repo_type="datasets",
        token="my_token",
    )

upload_file(
    path_or_fileobj=".\\\\local\\\\file\\\\path",
    path_in_repo="remote/file/path.h5",
    repo_id="username/my-model",
    token="my_token",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./local/filepath&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> fobj:
<span class="hljs-meta">... </span>    upload_file(
<span class="hljs-meta">... </span>        path_or_fileobj=fileobj,
<span class="hljs-meta">... </span>        path_in_repo=<span class="hljs-string">&quot;remote/file/path.h5&quot;</span>,
<span class="hljs-meta">... </span>        repo_id=<span class="hljs-string">&quot;username/my-dataset&quot;</span>,
<span class="hljs-meta">... </span>        repo_type=<span class="hljs-string">&quot;datasets&quot;</span>,
<span class="hljs-meta">... </span>        token=<span class="hljs-string">&quot;my_token&quot;</span>,
<span class="hljs-meta">... </span>    )
<span class="hljs-string">&quot;https://huggingface.co/datasets/username/my-dataset/blob/main/remote/file/path.h5&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>upload_file(
<span class="hljs-meta">... </span>    path_or_fileobj=<span class="hljs-string">&quot;.\\\\local\\\\file\\\\path&quot;</span>,
<span class="hljs-meta">... </span>    path_in_repo=<span class="hljs-string">&quot;remote/file/path.h5&quot;</span>,
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;username/my-model&quot;</span>,
<span class="hljs-meta">... </span>    token=<span class="hljs-string">&quot;my_token&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-string">&quot;https://huggingface.co/username/my-model/blob/main/remote/file/path.h5&quot;</span>`}}),Ct=new F({props:{name:"whoami",anchor:"huggingface_hub.HfApi.whoami",parameters:[{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L503",parametersDescription:[{anchor:"huggingface_hub.HfApi.whoami.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Hugging Face token. Will default to the locally saved token if
not provided.`,name:"token"}]}}),Ut=new ec({}),Vt=new F({props:{name:"class huggingface_hub.HfFolder",anchor:"huggingface_hub.HfFolder",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1837"}}),zt=new F({props:{name:"delete_token",anchor:"huggingface_hub.HfFolder.delete_token",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1868"}}),Rt=new F({props:{name:"get_token",anchor:"huggingface_hub.HfFolder.get_token",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1853",returnDescription:`
<p>The token, <code>None</code> if it doesn\u2019t exist.</p>
`,returnType:`
<p><code>str</code> or <code>None</code></p>
`}}),St=new F({props:{name:"save_token",anchor:"huggingface_hub.HfFolder.save_token",parameters:[{name:"token",val:""}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1840",parametersDescription:[{anchor:"huggingface_hub.HfFolder.save_token.token",description:`<strong>token</strong> (<code>str</code>) &#x2014;
The token to save to the <a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.HfFolder">HfFolder</a>`,name:"token"}]}}),Gt=new ec({}),Wt=new F({props:{name:"class huggingface_hub.DatasetFilter",anchor:"huggingface_hub.DatasetFilter",parameters:[{name:"author",val:": str = None"},{name:"benchmark",val:": typing.Union[str, typing.List[str]] = None"},{name:"dataset_name",val:": str = None"},{name:"language_creators",val:": typing.Union[str, typing.List[str]] = None"},{name:"languages",val:": typing.Union[str, typing.List[str]] = None"},{name:"multilinguality",val:": typing.Union[str, typing.List[str]] = None"},{name:"size_categories",val:": typing.Union[str, typing.List[str]] = None"},{name:"task_categories",val:": typing.Union[str, typing.List[str]] = None"},{name:"task_ids",val:": typing.Union[str, typing.List[str]] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/utils/endpoint_helpers.py#L67",parametersDescription:[{anchor:"huggingface_hub.DatasetFilter.author",description:`<strong>author</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A string or list of strings that can be used to identify
datasets on the Hub by the original uploader (author or
organization), such as <code>facebook</code> or <code>huggingface</code> Example
usage:`,name:"author"}]}}),Bt=new fe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(benchmark="raft")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(benchmark=<span class="hljs-string">&quot;raft&quot;</span>)`}}),Kt=new fe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(dataset_name="wikineural")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(dataset_name=<span class="hljs-string">&quot;wikineural&quot;</span>)`}}),Qt=new fe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(language_creator="crowdsourced")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(language_creator=<span class="hljs-string">&quot;crowdsourced&quot;</span>)`}}),Jt=new fe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(language="en")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(language=<span class="hljs-string">&quot;en&quot;</span>)`}}),Xt=new fe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(multilinguality="yes")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(multilinguality=<span class="hljs-string">&quot;yes&quot;</span>)`}}),Yt=new fe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(size_categories="100K<n<1M")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(size_categories=<span class="hljs-string">&quot;100K&lt;n&lt;1M&quot;</span>)`}}),Zt=new fe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(author="facebook")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(author=<span class="hljs-string">&quot;facebook&quot;</span>)`}}),eo=new fe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(task_ids="paraphrase")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(task_ids=<span class="hljs-string">&quot;paraphrase&quot;</span>)`}}),to=new F({props:{name:"class huggingface_hub.ModelFilter",anchor:"huggingface_hub.ModelFilter",parameters:[{name:"author",val:": str = None"},{name:"library",val:": typing.Union[str, typing.List[str]] = None"},{name:"language",val:": typing.Union[str, typing.List[str]] = None"},{name:"model_name",val:": str = None"},{name:"task",val:": typing.Union[str, typing.List[str]] = None"},{name:"trained_dataset",val:": typing.Union[str, typing.List[str]] = None"},{name:"tags",val:": typing.Union[str, typing.List[str]] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/utils/endpoint_helpers.py#L184",parametersDescription:[{anchor:"huggingface_hub.ModelFilter.author",description:`<strong>author</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A string that can be used to identify models on the Hub by the
original uploader (author or organization), such as <code>facebook</code>
or <code>huggingface</code> Example usage:`,name:"author"}]}}),{c(){p=a("meta"),P=l(),A=a("h1"),k=a("a"),q=a("span"),f($.$$.fragment),D=l(),O=a("span"),C=s("Hugging Face Hub API"),j=l(),x=a("p"),L=s("Below is the documentation for the "),I=a("code"),R=s("HfApi"),S=s(` class, which serves as a Python wrapper for the Hugging Face
Hub\u2019s API.`),N=l(),T=a("p"),Q=s("All methods from the "),J=a("code"),Ee=s("HfApi"),ke=s(` are also accessible from the package\u2019s root directly, both approaches are detailed
below.`),ee=l(),te=a("p"),we=s("The following approach uses the method from the root of the package:"),Ka=l(),f(st.$$.fragment),Qa=l(),qe=a("p"),Nn=s("The following approach uses the "),uo=a("code"),Fn=s("HfApi"),Pn=s(" class:"),Ja=l(),f(it.$$.fragment),Xa=l(),xe=a("p"),jn=s("Using the "),mo=a("code"),On=s("HfApi"),Ln=s(" class directly enables you to set a different endpoint to that of the Hugging Face\u2019s Hub."),Ya=l(),d=a("div"),f(lt.$$.fragment),Tn=l(),oe=a("div"),f(ct.$$.fragment),In=l(),_o=a("p"),Cn=s("Create an empty repo on the HuggingFace Hub."),Un=l(),bo=a("p"),Mn=s("References:"),Vn=l(),vo=a("ul"),no=a("li"),zn=s("[1] "),gt=a("a"),Rn=s("https://huggingface.co/settings/tokens"),Sn=l(),G=a("div"),f(pt.$$.fragment),Gn=l(),$o=a("p"),Wn=s("Get info on one specific dataset on huggingface.co"),Bn=l(),yo=a("p"),Kn=s("Dataset can be private if you pass an acceptable token."),Qn=l(),Eo=a("p"),Jn=s("References:"),Xn=l(),ko=a("ul"),ro=a("li"),Yn=s("[1] "),ht=a("a"),Zn=s("https://huggingface.co/settings/tokens"),er=l(),ue=a("div"),f(dt.$$.fragment),tr=l(),wo=a("p"),or=s("Deletes a file in the given repo."),ar=l(),f(Ne.$$.fragment),nr=l(),ae=a("div"),f(ft.$$.fragment),rr=l(),Ao=a("p"),sr=s("Delete a repo from the HuggingFace Hub. CAUTION: this is irreversible."),ir=l(),Ho=a("p"),lr=s("References:"),cr=l(),Do=a("ul"),so=a("li"),gr=s("[1] "),ut=a("a"),pr=s("https://huggingface.co/settings/tokens"),hr=l(),Fe=a("div"),f(mt.$$.fragment),dr=l(),qo=a("p"),fr=s("Gets all valid dataset tags as a nested namespace object."),ur=l(),Pe=a("div"),f(_t.$$.fragment),mr=l(),xo=a("p"),_r=s(`Returns the repository name for a given model ID and optional
organization.`),br=l(),je=a("div"),f(bt.$$.fragment),vr=l(),No=a("p"),$r=s("Gets all valid model tags as a nested namespace object"),yr=l(),Oe=a("div"),f(vt.$$.fragment),Er=l(),Fo=a("p"),kr=s("Get the public list of all the datasets on huggingface.co"),wr=l(),Le=a("div"),f($t.$$.fragment),Ar=l(),Po=a("p"),Hr=s("Get the public list of all the metrics on huggingface.co"),Dr=l(),Te=a("div"),f(yt.$$.fragment),qr=l(),jo=a("p"),xr=s("Get the public list of all the models on huggingface.co"),Nr=l(),ne=a("div"),f(Et.$$.fragment),Fr=l(),Oo=a("p"),Pr=s("Get the list of files in a given repo."),jr=l(),Lo=a("p"),Or=s("References:"),Lr=l(),To=a("ul"),io=a("li"),Tr=s("[1] "),kt=a("a"),Ir=s("https://huggingface.co/settings/tokens"),Cr=l(),re=a("div"),f(wt.$$.fragment),Ur=l(),Io=a("p"),Mr=s("Call HF API to sign in a user and get a token if credentials are valid."),Vr=l(),f(Ie.$$.fragment),zr=l(),f(Ce.$$.fragment),Rr=l(),me=a("div"),f(At.$$.fragment),Sr=l(),Co=a("p"),Gr=s("Call HF API to log out."),Wr=l(),f(Ue.$$.fragment),Br=l(),W=a("div"),f(Ht.$$.fragment),Kr=l(),Uo=a("p"),Qr=s("Get info on one specific model on huggingface.co"),Jr=l(),Mo=a("p"),Xr=s("Model can be private if you pass an acceptable token or are logged in."),Yr=l(),Vo=a("p"),Zr=s("References:"),es=l(),zo=a("ul"),lo=a("li"),ts=s("[1] "),Dt=a("a"),os=s("https://huggingface.co/settings/tokens"),as=l(),B=a("div"),f(qt.$$.fragment),ns=l(),Ro=a("p"),rs=s("Moving a repository from namespace1/repo_name1 to namespace2/repo_name2"),ss=l(),xt=a("p"),is=s(`Note there are certain limitations. For more information about moving
repositories, please see
`),Nt=a("a"),ls=s("https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),cs=s("."),gs=l(),So=a("p"),ps=s("References:"),hs=l(),Go=a("ul"),co=a("li"),ds=s("[1] "),Ft=a("a"),fs=s("https://huggingface.co/settings/tokens"),us=l(),Me=a("div"),f(Pt.$$.fragment),ms=l(),Wo=a("p"),_s=s(`Saves the passed access token so git can correctly authenticate the
user.`),bs=l(),Ve=a("div"),f(jt.$$.fragment),vs=l(),Bo=a("p"),$s=s("Resets the user\u2019s access token."),ys=l(),se=a("div"),f(Ot.$$.fragment),Es=l(),Ko=a("p"),ks=s("Update the visibility setting of a repository."),ws=l(),Qo=a("p"),As=s("References:"),Hs=l(),Jo=a("ul"),go=a("li"),Ds=s("[1] "),Lt=a("a"),qs=s("https://huggingface.co/settings/tokens"),xs=l(),K=a("div"),f(Tt.$$.fragment),Ns=l(),Xo=a("p"),Fs=s(`Upload a local file (up to 5GB) to the given repo. The upload is done
through a HTTP post request, and doesn\u2019t require git or git-lfs to be
installed.`),Ps=l(),f(ze.$$.fragment),js=l(),Yo=a("p"),Os=s("Examples:"),Ls=l(),f(It.$$.fragment),Ts=l(),Re=a("div"),f(Ct.$$.fragment),Is=l(),Zo=a("p"),Cs=s("Call HF API to know \u201Cwhoami\u201D."),Za=l(),Ae=a("h2"),Se=a("a"),ea=a("span"),f(Ut.$$.fragment),Us=l(),ta=a("span"),Ms=s("Hugging Face local storage"),en=l(),Mt=a("p"),oa=a("code"),Vs=s("huggingface_hub"),zs=s(` stores the authentication information locally so that it may be re-used in subsequent
methods.`),tn=l(),Ge=a("p"),Rs=s("It does this using the "),po=a("a"),Ss=s("HfFolder"),Gs=s(" utility, which saves data at the root of the user."),on=l(),X=a("div"),f(Vt.$$.fragment),Ws=l(),We=a("div"),f(zt.$$.fragment),Bs=l(),aa=a("p"),Ks=s("Deletes the token from storage. Does not fail if token does not exist."),Qs=l(),Be=a("div"),f(Rt.$$.fragment),Js=l(),na=a("p"),Xs=s("Retrieves the token"),Ys=l(),Ke=a("div"),f(St.$$.fragment),Zs=l(),ra=a("p"),ei=s("Save token, creating folder as needed."),an=l(),He=a("h2"),Qe=a("a"),sa=a("span"),f(Gt.$$.fragment),ti=l(),ia=a("span"),oi=s("Filtering helpers"),nn=l(),Je=a("p"),ai=s("Some helpers to filter repositories on the hub are available in the "),la=a("code"),ni=s("huggingface_hub"),ri=s(" package."),rn=l(),w=a("div"),f(Wt.$$.fragment),si=l(),ca=a("p"),ii=s(`A class that converts human-readable dataset search parameters into ones
compatible with
the REST API. For all parameters capitalization does not matter.`),li=l(),pe=a("p"),ci=s("benchmark ("),ga=a("code"),gi=s("str"),pi=s(" or "),pa=a("code"),hi=s("List"),di=s(", "),ha=a("em"),fi=s("optional"),ui=s(`):
A string or list of strings that can be used to identify
datasets on the Hub by their official benchmark Example usage:`),mi=l(),f(Bt.$$.fragment),_i=l(),Y=a("p"),bi=s("dataset_name ("),da=a("code"),vi=s("str"),$i=s(", "),fa=a("em"),yi=s("optional"),Ei=s(`):
A string or list of strings that can be used to identify
datasets on the Hub by its name, such as `),ua=a("code"),ki=s("SQAC"),wi=s(" or "),ma=a("code"),Ai=s("wikineural"),Hi=s(`
Example usage:`),Di=l(),f(Kt.$$.fragment),qi=l(),U=a("p"),xi=s("language_creators ("),_a=a("code"),Ni=s("str"),Fi=s(" or "),ba=a("code"),Pi=s("List"),ji=s(", "),va=a("em"),Oi=s("optional"),Li=s(`):
A string or list of strings that can be used to identify
datasets on the Hub with how the data was curated, such as
`),$a=a("code"),Ti=s("crowdsourced"),Ii=s(" or "),ya=a("code"),Ci=s("machine_generated"),Ui=s(" Example usage:"),Mi=l(),f(Qt.$$.fragment),Vi=l(),he=a("p"),zi=s("languages ("),Ea=a("code"),Ri=s("str"),Si=s(" or "),ka=a("code"),Gi=s("List"),Wi=s(", "),wa=a("em"),Bi=s("optional"),Ki=s(`):
A string or list of strings representing a two-character
language to filter datasets by on the Hub Example usage:`),Qi=l(),f(Jt.$$.fragment),Ji=l(),de=a("p"),Xi=s("multilinguality ("),Aa=a("code"),Yi=s("str"),Zi=s(" or "),Ha=a("code"),el=s("List"),tl=s(", "),Da=a("em"),ol=s("optional"),al=s(`):
A string or list of strings representing a filter for datasets
that contain multiple languages Example usage:`),nl=l(),f(Xt.$$.fragment),rl=l(),M=a("p"),sl=s("size_categories ("),qa=a("code"),il=s("str"),ll=s(" or "),xa=a("code"),cl=s("List"),gl=s(", "),Na=a("em"),pl=s("optional"),hl=s(`):
A string or list of strings that can be used to identify
datasets on the Hub by the size of the dataset such as
`),Fa=a("code"),dl=s("100K<n<1M"),fl=s(" or "),Pa=a("code"),ul=s("1M<n<10M"),ml=s(" Example usage:"),_l=l(),f(Yt.$$.fragment),bl=l(),V=a("p"),vl=s("task_categories ("),ja=a("code"),$l=s("str"),yl=s(" or "),Oa=a("code"),El=s("List"),kl=s(", "),La=a("em"),wl=s("optional"),Al=s(`):
A string or list of strings that can be used to identify
datasets on the Hub by the designed task, such as
`),Ta=a("code"),Hl=s("audio_classification"),Dl=s(" or "),Ia=a("code"),ql=s("named_entity_recognition"),xl=s(` Example
usage:`),Nl=l(),f(Zt.$$.fragment),Fl=l(),z=a("p"),Pl=s("task_ids ("),Ca=a("code"),jl=s("str"),Ol=s(" or "),Ua=a("code"),Ll=s("List"),Tl=s(", "),Ma=a("em"),Il=s("optional"),Cl=s(`):
A string or list of strings that can be used to identify
datasets on the Hub by the specific task such as
`),Va=a("code"),Ul=s("speech_emotion_recognition"),Ml=s(" or "),za=a("code"),Vl=s("paraphrase"),zl=s(" Example usage:"),Rl=l(),f(eo.$$.fragment),sn=l(),De=a("div"),f(to.$$.fragment),Sl=l(),Ra=a("p"),Gl=s(`A class that converts human-readable model search parameters into ones
compatible with
the REST API. For all parameters capitalization does not matter.`),this.h()},l(o){const h=Bg('[data-svelte="svelte-1phssyn"]',document.head);p=n(h,"META",{name:!0,content:!0}),h.forEach(t),P=c(o),A=n(o,"H1",{class:!0});var oo=r(A);k=n(oo,"A",{id:!0,class:!0,href:!0});var Sa=r(k);q=n(Sa,"SPAN",{});var Ga=r(q);u($.$$.fragment,Ga),Ga.forEach(t),Sa.forEach(t),D=c(oo),O=n(oo,"SPAN",{});var Wa=r(O);C=i(Wa,"Hugging Face Hub API"),Wa.forEach(t),oo.forEach(t),j=c(o),x=n(o,"P",{});var ao=r(x);L=i(ao,"Below is the documentation for the "),I=n(ao,"CODE",{});var tc=r(I);R=i(tc,"HfApi"),tc.forEach(t),S=i(ao,` class, which serves as a Python wrapper for the Hugging Face
Hub\u2019s API.`),ao.forEach(t),N=c(o),T=n(o,"P",{});var cn=r(T);Q=i(cn,"All methods from the "),J=n(cn,"CODE",{});var oc=r(J);Ee=i(oc,"HfApi"),oc.forEach(t),ke=i(cn,` are also accessible from the package\u2019s root directly, both approaches are detailed
below.`),cn.forEach(t),ee=c(o),te=n(o,"P",{});var ac=r(te);we=i(ac,"The following approach uses the method from the root of the package:"),ac.forEach(t),Ka=c(o),u(st.$$.fragment,o),Qa=c(o),qe=n(o,"P",{});var gn=r(qe);Nn=i(gn,"The following approach uses the "),uo=n(gn,"CODE",{});var nc=r(uo);Fn=i(nc,"HfApi"),nc.forEach(t),Pn=i(gn," class:"),gn.forEach(t),Ja=c(o),u(it.$$.fragment,o),Xa=c(o),xe=n(o,"P",{});var pn=r(xe);jn=i(pn,"Using the "),mo=n(pn,"CODE",{});var rc=r(mo);On=i(rc,"HfApi"),rc.forEach(t),Ln=i(pn," class directly enables you to set a different endpoint to that of the Hugging Face\u2019s Hub."),pn.forEach(t),Ya=c(o),d=n(o,"DIV",{class:!0});var E=r(d);u(lt.$$.fragment,E),Tn=c(E),oe=n(E,"DIV",{class:!0});var Xe=r(oe);u(ct.$$.fragment,Xe),In=c(Xe),_o=n(Xe,"P",{});var sc=r(_o);Cn=i(sc,"Create an empty repo on the HuggingFace Hub."),sc.forEach(t),Un=c(Xe),bo=n(Xe,"P",{});var ic=r(bo);Mn=i(ic,"References:"),ic.forEach(t),Vn=c(Xe),vo=n(Xe,"UL",{});var lc=r(vo);no=n(lc,"LI",{});var Wl=r(no);zn=i(Wl,"[1] "),gt=n(Wl,"A",{href:!0,rel:!0});var cc=r(gt);Rn=i(cc,"https://huggingface.co/settings/tokens"),cc.forEach(t),Wl.forEach(t),lc.forEach(t),Xe.forEach(t),Sn=c(E),G=n(E,"DIV",{class:!0});var _e=r(G);u(pt.$$.fragment,_e),Gn=c(_e),$o=n(_e,"P",{});var gc=r($o);Wn=i(gc,"Get info on one specific dataset on huggingface.co"),gc.forEach(t),Bn=c(_e),yo=n(_e,"P",{});var pc=r(yo);Kn=i(pc,"Dataset can be private if you pass an acceptable token."),pc.forEach(t),Qn=c(_e),Eo=n(_e,"P",{});var hc=r(Eo);Jn=i(hc,"References:"),hc.forEach(t),Xn=c(_e),ko=n(_e,"UL",{});var dc=r(ko);ro=n(dc,"LI",{});var Bl=r(ro);Yn=i(Bl,"[1] "),ht=n(Bl,"A",{href:!0,rel:!0});var fc=r(ht);Zn=i(fc,"https://huggingface.co/settings/tokens"),fc.forEach(t),Bl.forEach(t),dc.forEach(t),_e.forEach(t),er=c(E),ue=n(E,"DIV",{class:!0});var ho=r(ue);u(dt.$$.fragment,ho),tr=c(ho),wo=n(ho,"P",{});var uc=r(wo);or=i(uc,"Deletes a file in the given repo."),uc.forEach(t),ar=c(ho),u(Ne.$$.fragment,ho),ho.forEach(t),nr=c(E),ae=n(E,"DIV",{class:!0});var Ye=r(ae);u(ft.$$.fragment,Ye),rr=c(Ye),Ao=n(Ye,"P",{});var mc=r(Ao);sr=i(mc,"Delete a repo from the HuggingFace Hub. CAUTION: this is irreversible."),mc.forEach(t),ir=c(Ye),Ho=n(Ye,"P",{});var _c=r(Ho);lr=i(_c,"References:"),_c.forEach(t),cr=c(Ye),Do=n(Ye,"UL",{});var bc=r(Do);so=n(bc,"LI",{});var Kl=r(so);gr=i(Kl,"[1] "),ut=n(Kl,"A",{href:!0,rel:!0});var vc=r(ut);pr=i(vc,"https://huggingface.co/settings/tokens"),vc.forEach(t),Kl.forEach(t),bc.forEach(t),Ye.forEach(t),hr=c(E),Fe=n(E,"DIV",{class:!0});var hn=r(Fe);u(mt.$$.fragment,hn),dr=c(hn),qo=n(hn,"P",{});var $c=r(qo);fr=i($c,"Gets all valid dataset tags as a nested namespace object."),$c.forEach(t),hn.forEach(t),ur=c(E),Pe=n(E,"DIV",{class:!0});var dn=r(Pe);u(_t.$$.fragment,dn),mr=c(dn),xo=n(dn,"P",{});var yc=r(xo);_r=i(yc,`Returns the repository name for a given model ID and optional
organization.`),yc.forEach(t),dn.forEach(t),br=c(E),je=n(E,"DIV",{class:!0});var fn=r(je);u(bt.$$.fragment,fn),vr=c(fn),No=n(fn,"P",{});var Ec=r(No);$r=i(Ec,"Gets all valid model tags as a nested namespace object"),Ec.forEach(t),fn.forEach(t),yr=c(E),Oe=n(E,"DIV",{class:!0});var un=r(Oe);u(vt.$$.fragment,un),Er=c(un),Fo=n(un,"P",{});var kc=r(Fo);kr=i(kc,"Get the public list of all the datasets on huggingface.co"),kc.forEach(t),un.forEach(t),wr=c(E),Le=n(E,"DIV",{class:!0});var mn=r(Le);u($t.$$.fragment,mn),Ar=c(mn),Po=n(mn,"P",{});var wc=r(Po);Hr=i(wc,"Get the public list of all the metrics on huggingface.co"),wc.forEach(t),mn.forEach(t),Dr=c(E),Te=n(E,"DIV",{class:!0});var _n=r(Te);u(yt.$$.fragment,_n),qr=c(_n),jo=n(_n,"P",{});var Ac=r(jo);xr=i(Ac,"Get the public list of all the models on huggingface.co"),Ac.forEach(t),_n.forEach(t),Nr=c(E),ne=n(E,"DIV",{class:!0});var Ze=r(ne);u(Et.$$.fragment,Ze),Fr=c(Ze),Oo=n(Ze,"P",{});var Hc=r(Oo);Pr=i(Hc,"Get the list of files in a given repo."),Hc.forEach(t),jr=c(Ze),Lo=n(Ze,"P",{});var Dc=r(Lo);Or=i(Dc,"References:"),Dc.forEach(t),Lr=c(Ze),To=n(Ze,"UL",{});var qc=r(To);io=n(qc,"LI",{});var Ql=r(io);Tr=i(Ql,"[1] "),kt=n(Ql,"A",{href:!0,rel:!0});var xc=r(kt);Ir=i(xc,"https://huggingface.co/settings/tokens"),xc.forEach(t),Ql.forEach(t),qc.forEach(t),Ze.forEach(t),Cr=c(E),re=n(E,"DIV",{class:!0});var et=r(re);u(wt.$$.fragment,et),Ur=c(et),Io=n(et,"P",{});var Nc=r(Io);Mr=i(Nc,"Call HF API to sign in a user and get a token if credentials are valid."),Nc.forEach(t),Vr=c(et),u(Ie.$$.fragment,et),zr=c(et),u(Ce.$$.fragment,et),et.forEach(t),Rr=c(E),me=n(E,"DIV",{class:!0});var fo=r(me);u(At.$$.fragment,fo),Sr=c(fo),Co=n(fo,"P",{});var Fc=r(Co);Gr=i(Fc,"Call HF API to log out."),Fc.forEach(t),Wr=c(fo),u(Ue.$$.fragment,fo),fo.forEach(t),Br=c(E),W=n(E,"DIV",{class:!0});var be=r(W);u(Ht.$$.fragment,be),Kr=c(be),Uo=n(be,"P",{});var Pc=r(Uo);Qr=i(Pc,"Get info on one specific model on huggingface.co"),Pc.forEach(t),Jr=c(be),Mo=n(be,"P",{});var jc=r(Mo);Xr=i(jc,"Model can be private if you pass an acceptable token or are logged in."),jc.forEach(t),Yr=c(be),Vo=n(be,"P",{});var Oc=r(Vo);Zr=i(Oc,"References:"),Oc.forEach(t),es=c(be),zo=n(be,"UL",{});var Lc=r(zo);lo=n(Lc,"LI",{});var Jl=r(lo);ts=i(Jl,"[1] "),Dt=n(Jl,"A",{href:!0,rel:!0});var Tc=r(Dt);os=i(Tc,"https://huggingface.co/settings/tokens"),Tc.forEach(t),Jl.forEach(t),Lc.forEach(t),be.forEach(t),as=c(E),B=n(E,"DIV",{class:!0});var ve=r(B);u(qt.$$.fragment,ve),ns=c(ve),Ro=n(ve,"P",{});var Ic=r(Ro);rs=i(Ic,"Moving a repository from namespace1/repo_name1 to namespace2/repo_name2"),Ic.forEach(t),ss=c(ve),xt=n(ve,"P",{});var bn=r(xt);is=i(bn,`Note there are certain limitations. For more information about moving
repositories, please see
`),Nt=n(bn,"A",{href:!0,rel:!0});var Cc=r(Nt);ls=i(Cc,"https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),Cc.forEach(t),cs=i(bn,"."),bn.forEach(t),gs=c(ve),So=n(ve,"P",{});var Uc=r(So);ps=i(Uc,"References:"),Uc.forEach(t),hs=c(ve),Go=n(ve,"UL",{});var Mc=r(Go);co=n(Mc,"LI",{});var Xl=r(co);ds=i(Xl,"[1] "),Ft=n(Xl,"A",{href:!0,rel:!0});var Vc=r(Ft);fs=i(Vc,"https://huggingface.co/settings/tokens"),Vc.forEach(t),Xl.forEach(t),Mc.forEach(t),ve.forEach(t),us=c(E),Me=n(E,"DIV",{class:!0});var vn=r(Me);u(Pt.$$.fragment,vn),ms=c(vn),Wo=n(vn,"P",{});var zc=r(Wo);_s=i(zc,`Saves the passed access token so git can correctly authenticate the
user.`),zc.forEach(t),vn.forEach(t),bs=c(E),Ve=n(E,"DIV",{class:!0});var $n=r(Ve);u(jt.$$.fragment,$n),vs=c($n),Bo=n($n,"P",{});var Rc=r(Bo);$s=i(Rc,"Resets the user\u2019s access token."),Rc.forEach(t),$n.forEach(t),ys=c(E),se=n(E,"DIV",{class:!0});var tt=r(se);u(Ot.$$.fragment,tt),Es=c(tt),Ko=n(tt,"P",{});var Sc=r(Ko);ks=i(Sc,"Update the visibility setting of a repository."),Sc.forEach(t),ws=c(tt),Qo=n(tt,"P",{});var Gc=r(Qo);As=i(Gc,"References:"),Gc.forEach(t),Hs=c(tt),Jo=n(tt,"UL",{});var Wc=r(Jo);go=n(Wc,"LI",{});var Yl=r(go);Ds=i(Yl,"[1] "),Lt=n(Yl,"A",{href:!0,rel:!0});var Bc=r(Lt);qs=i(Bc,"https://huggingface.co/settings/tokens"),Bc.forEach(t),Yl.forEach(t),Wc.forEach(t),tt.forEach(t),xs=c(E),K=n(E,"DIV",{class:!0});var $e=r(K);u(Tt.$$.fragment,$e),Ns=c($e),Xo=n($e,"P",{});var Kc=r(Xo);Fs=i(Kc,`Upload a local file (up to 5GB) to the given repo. The upload is done
through a HTTP post request, and doesn\u2019t require git or git-lfs to be
installed.`),Kc.forEach(t),Ps=c($e),u(ze.$$.fragment,$e),js=c($e),Yo=n($e,"P",{});var Qc=r(Yo);Os=i(Qc,"Examples:"),Qc.forEach(t),Ls=c($e),u(It.$$.fragment,$e),$e.forEach(t),Ts=c(E),Re=n(E,"DIV",{class:!0});var yn=r(Re);u(Ct.$$.fragment,yn),Is=c(yn),Zo=n(yn,"P",{});var Jc=r(Zo);Cs=i(Jc,"Call HF API to know \u201Cwhoami\u201D."),Jc.forEach(t),yn.forEach(t),E.forEach(t),Za=c(o),Ae=n(o,"H2",{class:!0});var En=r(Ae);Se=n(En,"A",{id:!0,class:!0,href:!0});var Xc=r(Se);ea=n(Xc,"SPAN",{});var Yc=r(ea);u(Ut.$$.fragment,Yc),Yc.forEach(t),Xc.forEach(t),Us=c(En),ta=n(En,"SPAN",{});var Zc=r(ta);Ms=i(Zc,"Hugging Face local storage"),Zc.forEach(t),En.forEach(t),en=c(o),Mt=n(o,"P",{});var Zl=r(Mt);oa=n(Zl,"CODE",{});var eg=r(oa);Vs=i(eg,"huggingface_hub"),eg.forEach(t),zs=i(Zl,` stores the authentication information locally so that it may be re-used in subsequent
methods.`),Zl.forEach(t),tn=c(o),Ge=n(o,"P",{});var kn=r(Ge);Rs=i(kn,"It does this using the "),po=n(kn,"A",{href:!0});var tg=r(po);Ss=i(tg,"HfFolder"),tg.forEach(t),Gs=i(kn," utility, which saves data at the root of the user."),kn.forEach(t),on=c(o),X=n(o,"DIV",{class:!0});var ot=r(X);u(Vt.$$.fragment,ot),Ws=c(ot),We=n(ot,"DIV",{class:!0});var wn=r(We);u(zt.$$.fragment,wn),Bs=c(wn),aa=n(wn,"P",{});var og=r(aa);Ks=i(og,"Deletes the token from storage. Does not fail if token does not exist."),og.forEach(t),wn.forEach(t),Qs=c(ot),Be=n(ot,"DIV",{class:!0});var An=r(Be);u(Rt.$$.fragment,An),Js=c(An),na=n(An,"P",{});var ag=r(na);Xs=i(ag,"Retrieves the token"),ag.forEach(t),An.forEach(t),Ys=c(ot),Ke=n(ot,"DIV",{class:!0});var Hn=r(Ke);u(St.$$.fragment,Hn),Zs=c(Hn),ra=n(Hn,"P",{});var ng=r(ra);ei=i(ng,"Save token, creating folder as needed."),ng.forEach(t),Hn.forEach(t),ot.forEach(t),an=c(o),He=n(o,"H2",{class:!0});var Dn=r(He);Qe=n(Dn,"A",{id:!0,class:!0,href:!0});var rg=r(Qe);sa=n(rg,"SPAN",{});var sg=r(sa);u(Gt.$$.fragment,sg),sg.forEach(t),rg.forEach(t),ti=c(Dn),ia=n(Dn,"SPAN",{});var ig=r(ia);oi=i(ig,"Filtering helpers"),ig.forEach(t),Dn.forEach(t),nn=c(o),Je=n(o,"P",{});var qn=r(Je);ai=i(qn,"Some helpers to filter repositories on the hub are available in the "),la=n(qn,"CODE",{});var lg=r(la);ni=i(lg,"huggingface_hub"),lg.forEach(t),ri=i(qn," package."),qn.forEach(t),rn=c(o),w=n(o,"DIV",{class:!0});var H=r(w);u(Wt.$$.fragment,H),si=c(H),ca=n(H,"P",{});var cg=r(ca);ii=i(cg,`A class that converts human-readable dataset search parameters into ones
compatible with
the REST API. For all parameters capitalization does not matter.`),cg.forEach(t),li=c(H),pe=n(H,"P",{});var at=r(pe);ci=i(at,"benchmark ("),ga=n(at,"CODE",{});var gg=r(ga);gi=i(gg,"str"),gg.forEach(t),pi=i(at," or "),pa=n(at,"CODE",{});var pg=r(pa);hi=i(pg,"List"),pg.forEach(t),di=i(at,", "),ha=n(at,"EM",{});var hg=r(ha);fi=i(hg,"optional"),hg.forEach(t),ui=i(at,`):
A string or list of strings that can be used to identify
datasets on the Hub by their official benchmark Example usage:`),at.forEach(t),mi=c(H),u(Bt.$$.fragment,H),_i=c(H),Y=n(H,"P",{});var ye=r(Y);bi=i(ye,"dataset_name ("),da=n(ye,"CODE",{});var dg=r(da);vi=i(dg,"str"),dg.forEach(t),$i=i(ye,", "),fa=n(ye,"EM",{});var fg=r(fa);yi=i(fg,"optional"),fg.forEach(t),Ei=i(ye,`):
A string or list of strings that can be used to identify
datasets on the Hub by its name, such as `),ua=n(ye,"CODE",{});var ug=r(ua);ki=i(ug,"SQAC"),ug.forEach(t),wi=i(ye," or "),ma=n(ye,"CODE",{});var mg=r(ma);Ai=i(mg,"wikineural"),mg.forEach(t),Hi=i(ye,`
Example usage:`),ye.forEach(t),Di=c(H),u(Kt.$$.fragment,H),qi=c(H),U=n(H,"P",{});var ie=r(U);xi=i(ie,"language_creators ("),_a=n(ie,"CODE",{});var _g=r(_a);Ni=i(_g,"str"),_g.forEach(t),Fi=i(ie," or "),ba=n(ie,"CODE",{});var bg=r(ba);Pi=i(bg,"List"),bg.forEach(t),ji=i(ie,", "),va=n(ie,"EM",{});var vg=r(va);Oi=i(vg,"optional"),vg.forEach(t),Li=i(ie,`):
A string or list of strings that can be used to identify
datasets on the Hub with how the data was curated, such as
`),$a=n(ie,"CODE",{});var $g=r($a);Ti=i($g,"crowdsourced"),$g.forEach(t),Ii=i(ie," or "),ya=n(ie,"CODE",{});var yg=r(ya);Ci=i(yg,"machine_generated"),yg.forEach(t),Ui=i(ie," Example usage:"),ie.forEach(t),Mi=c(H),u(Qt.$$.fragment,H),Vi=c(H),he=n(H,"P",{});var nt=r(he);zi=i(nt,"languages ("),Ea=n(nt,"CODE",{});var Eg=r(Ea);Ri=i(Eg,"str"),Eg.forEach(t),Si=i(nt," or "),ka=n(nt,"CODE",{});var kg=r(ka);Gi=i(kg,"List"),kg.forEach(t),Wi=i(nt,", "),wa=n(nt,"EM",{});var wg=r(wa);Bi=i(wg,"optional"),wg.forEach(t),Ki=i(nt,`):
A string or list of strings representing a two-character
language to filter datasets by on the Hub Example usage:`),nt.forEach(t),Qi=c(H),u(Jt.$$.fragment,H),Ji=c(H),de=n(H,"P",{});var rt=r(de);Xi=i(rt,"multilinguality ("),Aa=n(rt,"CODE",{});var Ag=r(Aa);Yi=i(Ag,"str"),Ag.forEach(t),Zi=i(rt," or "),Ha=n(rt,"CODE",{});var Hg=r(Ha);el=i(Hg,"List"),Hg.forEach(t),tl=i(rt,", "),Da=n(rt,"EM",{});var Dg=r(Da);ol=i(Dg,"optional"),Dg.forEach(t),al=i(rt,`):
A string or list of strings representing a filter for datasets
that contain multiple languages Example usage:`),rt.forEach(t),nl=c(H),u(Xt.$$.fragment,H),rl=c(H),M=n(H,"P",{});var le=r(M);sl=i(le,"size_categories ("),qa=n(le,"CODE",{});var qg=r(qa);il=i(qg,"str"),qg.forEach(t),ll=i(le," or "),xa=n(le,"CODE",{});var xg=r(xa);cl=i(xg,"List"),xg.forEach(t),gl=i(le,", "),Na=n(le,"EM",{});var Ng=r(Na);pl=i(Ng,"optional"),Ng.forEach(t),hl=i(le,`):
A string or list of strings that can be used to identify
datasets on the Hub by the size of the dataset such as
`),Fa=n(le,"CODE",{});var Fg=r(Fa);dl=i(Fg,"100K<n<1M"),Fg.forEach(t),fl=i(le," or "),Pa=n(le,"CODE",{});var Pg=r(Pa);ul=i(Pg,"1M<n<10M"),Pg.forEach(t),ml=i(le," Example usage:"),le.forEach(t),_l=c(H),u(Yt.$$.fragment,H),bl=c(H),V=n(H,"P",{});var ce=r(V);vl=i(ce,"task_categories ("),ja=n(ce,"CODE",{});var jg=r(ja);$l=i(jg,"str"),jg.forEach(t),yl=i(ce," or "),Oa=n(ce,"CODE",{});var Og=r(Oa);El=i(Og,"List"),Og.forEach(t),kl=i(ce,", "),La=n(ce,"EM",{});var Lg=r(La);wl=i(Lg,"optional"),Lg.forEach(t),Al=i(ce,`):
A string or list of strings that can be used to identify
datasets on the Hub by the designed task, such as
`),Ta=n(ce,"CODE",{});var Tg=r(Ta);Hl=i(Tg,"audio_classification"),Tg.forEach(t),Dl=i(ce," or "),Ia=n(ce,"CODE",{});var Ig=r(Ia);ql=i(Ig,"named_entity_recognition"),Ig.forEach(t),xl=i(ce,` Example
usage:`),ce.forEach(t),Nl=c(H),u(Zt.$$.fragment,H),Fl=c(H),z=n(H,"P",{});var ge=r(z);Pl=i(ge,"task_ids ("),Ca=n(ge,"CODE",{});var Cg=r(Ca);jl=i(Cg,"str"),Cg.forEach(t),Ol=i(ge," or "),Ua=n(ge,"CODE",{});var Ug=r(Ua);Ll=i(Ug,"List"),Ug.forEach(t),Tl=i(ge,", "),Ma=n(ge,"EM",{});var Mg=r(Ma);Il=i(Mg,"optional"),Mg.forEach(t),Cl=i(ge,`):
A string or list of strings that can be used to identify
datasets on the Hub by the specific task such as
`),Va=n(ge,"CODE",{});var Vg=r(Va);Ul=i(Vg,"speech_emotion_recognition"),Vg.forEach(t),Ml=i(ge," or "),za=n(ge,"CODE",{});var zg=r(za);Vl=i(zg,"paraphrase"),zg.forEach(t),zl=i(ge," Example usage:"),ge.forEach(t),Rl=c(H),u(eo.$$.fragment,H),H.forEach(t),sn=c(o),De=n(o,"DIV",{class:!0});var xn=r(De);u(to.$$.fragment,xn),Sl=c(xn),Ra=n(xn,"P",{});var Rg=r(Ra);Gl=i(Rg,`A class that converts human-readable model search parameters into ones
compatible with
the REST API. For all parameters capitalization does not matter.`),Rg.forEach(t),xn.forEach(t),this.h()},h(){g(p,"name","hf:doc:metadata"),g(p,"content",JSON.stringify(tp)),g(k,"id","huggingface_hub.HfApi"),g(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),g(k,"href","#huggingface_hub.HfApi"),g(A,"class","relative group"),g(gt,"href","https://huggingface.co/settings/tokens"),g(gt,"rel","nofollow"),g(oe,"class","docstring"),g(ht,"href","https://huggingface.co/settings/tokens"),g(ht,"rel","nofollow"),g(G,"class","docstring"),g(ue,"class","docstring"),g(ut,"href","https://huggingface.co/settings/tokens"),g(ut,"rel","nofollow"),g(ae,"class","docstring"),g(Fe,"class","docstring"),g(Pe,"class","docstring"),g(je,"class","docstring"),g(Oe,"class","docstring"),g(Le,"class","docstring"),g(Te,"class","docstring"),g(kt,"href","https://huggingface.co/settings/tokens"),g(kt,"rel","nofollow"),g(ne,"class","docstring"),g(re,"class","docstring"),g(me,"class","docstring"),g(Dt,"href","https://huggingface.co/settings/tokens"),g(Dt,"rel","nofollow"),g(W,"class","docstring"),g(Nt,"href","https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),g(Nt,"rel","nofollow"),g(Ft,"href","https://huggingface.co/settings/tokens"),g(Ft,"rel","nofollow"),g(B,"class","docstring"),g(Me,"class","docstring"),g(Ve,"class","docstring"),g(Lt,"href","https://huggingface.co/settings/tokens"),g(Lt,"rel","nofollow"),g(se,"class","docstring"),g(K,"class","docstring"),g(Re,"class","docstring"),g(d,"class","docstring"),g(Se,"id","huggingface_hub.HfFolder"),g(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),g(Se,"href","#huggingface_hub.HfFolder"),g(Ae,"class","relative group"),g(po,"href","/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.HfFolder"),g(We,"class","docstring"),g(Be,"class","docstring"),g(Ke,"class","docstring"),g(X,"class","docstring"),g(Qe,"id","huggingface_hub.DatasetFilter"),g(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),g(Qe,"href","#huggingface_hub.DatasetFilter"),g(He,"class","relative group"),g(w,"class","docstring"),g(De,"class","docstring")},m(o,h){e(document.head,p),y(o,P,h),y(o,A,h),e(A,k),e(k,q),m($,q,null),e(A,D),e(A,O),e(O,C),y(o,j,h),y(o,x,h),e(x,L),e(x,I),e(I,R),e(x,S),y(o,N,h),y(o,T,h),e(T,Q),e(T,J),e(J,Ee),e(T,ke),y(o,ee,h),y(o,te,h),e(te,we),y(o,Ka,h),m(st,o,h),y(o,Qa,h),y(o,qe,h),e(qe,Nn),e(qe,uo),e(uo,Fn),e(qe,Pn),y(o,Ja,h),m(it,o,h),y(o,Xa,h),y(o,xe,h),e(xe,jn),e(xe,mo),e(mo,On),e(xe,Ln),y(o,Ya,h),y(o,d,h),m(lt,d,null),e(d,Tn),e(d,oe),m(ct,oe,null),e(oe,In),e(oe,_o),e(_o,Cn),e(oe,Un),e(oe,bo),e(bo,Mn),e(oe,Vn),e(oe,vo),e(vo,no),e(no,zn),e(no,gt),e(gt,Rn),e(d,Sn),e(d,G),m(pt,G,null),e(G,Gn),e(G,$o),e($o,Wn),e(G,Bn),e(G,yo),e(yo,Kn),e(G,Qn),e(G,Eo),e(Eo,Jn),e(G,Xn),e(G,ko),e(ko,ro),e(ro,Yn),e(ro,ht),e(ht,Zn),e(d,er),e(d,ue),m(dt,ue,null),e(ue,tr),e(ue,wo),e(wo,or),e(ue,ar),m(Ne,ue,null),e(d,nr),e(d,ae),m(ft,ae,null),e(ae,rr),e(ae,Ao),e(Ao,sr),e(ae,ir),e(ae,Ho),e(Ho,lr),e(ae,cr),e(ae,Do),e(Do,so),e(so,gr),e(so,ut),e(ut,pr),e(d,hr),e(d,Fe),m(mt,Fe,null),e(Fe,dr),e(Fe,qo),e(qo,fr),e(d,ur),e(d,Pe),m(_t,Pe,null),e(Pe,mr),e(Pe,xo),e(xo,_r),e(d,br),e(d,je),m(bt,je,null),e(je,vr),e(je,No),e(No,$r),e(d,yr),e(d,Oe),m(vt,Oe,null),e(Oe,Er),e(Oe,Fo),e(Fo,kr),e(d,wr),e(d,Le),m($t,Le,null),e(Le,Ar),e(Le,Po),e(Po,Hr),e(d,Dr),e(d,Te),m(yt,Te,null),e(Te,qr),e(Te,jo),e(jo,xr),e(d,Nr),e(d,ne),m(Et,ne,null),e(ne,Fr),e(ne,Oo),e(Oo,Pr),e(ne,jr),e(ne,Lo),e(Lo,Or),e(ne,Lr),e(ne,To),e(To,io),e(io,Tr),e(io,kt),e(kt,Ir),e(d,Cr),e(d,re),m(wt,re,null),e(re,Ur),e(re,Io),e(Io,Mr),e(re,Vr),m(Ie,re,null),e(re,zr),m(Ce,re,null),e(d,Rr),e(d,me),m(At,me,null),e(me,Sr),e(me,Co),e(Co,Gr),e(me,Wr),m(Ue,me,null),e(d,Br),e(d,W),m(Ht,W,null),e(W,Kr),e(W,Uo),e(Uo,Qr),e(W,Jr),e(W,Mo),e(Mo,Xr),e(W,Yr),e(W,Vo),e(Vo,Zr),e(W,es),e(W,zo),e(zo,lo),e(lo,ts),e(lo,Dt),e(Dt,os),e(d,as),e(d,B),m(qt,B,null),e(B,ns),e(B,Ro),e(Ro,rs),e(B,ss),e(B,xt),e(xt,is),e(xt,Nt),e(Nt,ls),e(xt,cs),e(B,gs),e(B,So),e(So,ps),e(B,hs),e(B,Go),e(Go,co),e(co,ds),e(co,Ft),e(Ft,fs),e(d,us),e(d,Me),m(Pt,Me,null),e(Me,ms),e(Me,Wo),e(Wo,_s),e(d,bs),e(d,Ve),m(jt,Ve,null),e(Ve,vs),e(Ve,Bo),e(Bo,$s),e(d,ys),e(d,se),m(Ot,se,null),e(se,Es),e(se,Ko),e(Ko,ks),e(se,ws),e(se,Qo),e(Qo,As),e(se,Hs),e(se,Jo),e(Jo,go),e(go,Ds),e(go,Lt),e(Lt,qs),e(d,xs),e(d,K),m(Tt,K,null),e(K,Ns),e(K,Xo),e(Xo,Fs),e(K,Ps),m(ze,K,null),e(K,js),e(K,Yo),e(Yo,Os),e(K,Ls),m(It,K,null),e(d,Ts),e(d,Re),m(Ct,Re,null),e(Re,Is),e(Re,Zo),e(Zo,Cs),y(o,Za,h),y(o,Ae,h),e(Ae,Se),e(Se,ea),m(Ut,ea,null),e(Ae,Us),e(Ae,ta),e(ta,Ms),y(o,en,h),y(o,Mt,h),e(Mt,oa),e(oa,Vs),e(Mt,zs),y(o,tn,h),y(o,Ge,h),e(Ge,Rs),e(Ge,po),e(po,Ss),e(Ge,Gs),y(o,on,h),y(o,X,h),m(Vt,X,null),e(X,Ws),e(X,We),m(zt,We,null),e(We,Bs),e(We,aa),e(aa,Ks),e(X,Qs),e(X,Be),m(Rt,Be,null),e(Be,Js),e(Be,na),e(na,Xs),e(X,Ys),e(X,Ke),m(St,Ke,null),e(Ke,Zs),e(Ke,ra),e(ra,ei),y(o,an,h),y(o,He,h),e(He,Qe),e(Qe,sa),m(Gt,sa,null),e(He,ti),e(He,ia),e(ia,oi),y(o,nn,h),y(o,Je,h),e(Je,ai),e(Je,la),e(la,ni),e(Je,ri),y(o,rn,h),y(o,w,h),m(Wt,w,null),e(w,si),e(w,ca),e(ca,ii),e(w,li),e(w,pe),e(pe,ci),e(pe,ga),e(ga,gi),e(pe,pi),e(pe,pa),e(pa,hi),e(pe,di),e(pe,ha),e(ha,fi),e(pe,ui),e(w,mi),m(Bt,w,null),e(w,_i),e(w,Y),e(Y,bi),e(Y,da),e(da,vi),e(Y,$i),e(Y,fa),e(fa,yi),e(Y,Ei),e(Y,ua),e(ua,ki),e(Y,wi),e(Y,ma),e(ma,Ai),e(Y,Hi),e(w,Di),m(Kt,w,null),e(w,qi),e(w,U),e(U,xi),e(U,_a),e(_a,Ni),e(U,Fi),e(U,ba),e(ba,Pi),e(U,ji),e(U,va),e(va,Oi),e(U,Li),e(U,$a),e($a,Ti),e(U,Ii),e(U,ya),e(ya,Ci),e(U,Ui),e(w,Mi),m(Qt,w,null),e(w,Vi),e(w,he),e(he,zi),e(he,Ea),e(Ea,Ri),e(he,Si),e(he,ka),e(ka,Gi),e(he,Wi),e(he,wa),e(wa,Bi),e(he,Ki),e(w,Qi),m(Jt,w,null),e(w,Ji),e(w,de),e(de,Xi),e(de,Aa),e(Aa,Yi),e(de,Zi),e(de,Ha),e(Ha,el),e(de,tl),e(de,Da),e(Da,ol),e(de,al),e(w,nl),m(Xt,w,null),e(w,rl),e(w,M),e(M,sl),e(M,qa),e(qa,il),e(M,ll),e(M,xa),e(xa,cl),e(M,gl),e(M,Na),e(Na,pl),e(M,hl),e(M,Fa),e(Fa,dl),e(M,fl),e(M,Pa),e(Pa,ul),e(M,ml),e(w,_l),m(Yt,w,null),e(w,bl),e(w,V),e(V,vl),e(V,ja),e(ja,$l),e(V,yl),e(V,Oa),e(Oa,El),e(V,kl),e(V,La),e(La,wl),e(V,Al),e(V,Ta),e(Ta,Hl),e(V,Dl),e(V,Ia),e(Ia,ql),e(V,xl),e(w,Nl),m(Zt,w,null),e(w,Fl),e(w,z),e(z,Pl),e(z,Ca),e(Ca,jl),e(z,Ol),e(z,Ua),e(Ua,Ll),e(z,Tl),e(z,Ma),e(Ma,Il),e(z,Cl),e(z,Va),e(Va,Ul),e(z,Ml),e(z,za),e(za,Vl),e(z,zl),e(w,Rl),m(eo,w,null),y(o,sn,h),y(o,De,h),m(to,De,null),e(De,Sl),e(De,Ra),e(Ra,Gl),ln=!0},p(o,[h]){const oo={};h&2&&(oo.$$scope={dirty:h,ctx:o}),Ne.$set(oo);const Sa={};h&2&&(Sa.$$scope={dirty:h,ctx:o}),Ie.$set(Sa);const Ga={};h&2&&(Ga.$$scope={dirty:h,ctx:o}),Ce.$set(Ga);const Wa={};h&2&&(Wa.$$scope={dirty:h,ctx:o}),Ue.$set(Wa);const ao={};h&2&&(ao.$$scope={dirty:h,ctx:o}),ze.$set(ao)},i(o){ln||(_($.$$.fragment,o),_(st.$$.fragment,o),_(it.$$.fragment,o),_(lt.$$.fragment,o),_(ct.$$.fragment,o),_(pt.$$.fragment,o),_(dt.$$.fragment,o),_(Ne.$$.fragment,o),_(ft.$$.fragment,o),_(mt.$$.fragment,o),_(_t.$$.fragment,o),_(bt.$$.fragment,o),_(vt.$$.fragment,o),_($t.$$.fragment,o),_(yt.$$.fragment,o),_(Et.$$.fragment,o),_(wt.$$.fragment,o),_(Ie.$$.fragment,o),_(Ce.$$.fragment,o),_(At.$$.fragment,o),_(Ue.$$.fragment,o),_(Ht.$$.fragment,o),_(qt.$$.fragment,o),_(Pt.$$.fragment,o),_(jt.$$.fragment,o),_(Ot.$$.fragment,o),_(Tt.$$.fragment,o),_(ze.$$.fragment,o),_(It.$$.fragment,o),_(Ct.$$.fragment,o),_(Ut.$$.fragment,o),_(Vt.$$.fragment,o),_(zt.$$.fragment,o),_(Rt.$$.fragment,o),_(St.$$.fragment,o),_(Gt.$$.fragment,o),_(Wt.$$.fragment,o),_(Bt.$$.fragment,o),_(Kt.$$.fragment,o),_(Qt.$$.fragment,o),_(Jt.$$.fragment,o),_(Xt.$$.fragment,o),_(Yt.$$.fragment,o),_(Zt.$$.fragment,o),_(eo.$$.fragment,o),_(to.$$.fragment,o),ln=!0)},o(o){b($.$$.fragment,o),b(st.$$.fragment,o),b(it.$$.fragment,o),b(lt.$$.fragment,o),b(ct.$$.fragment,o),b(pt.$$.fragment,o),b(dt.$$.fragment,o),b(Ne.$$.fragment,o),b(ft.$$.fragment,o),b(mt.$$.fragment,o),b(_t.$$.fragment,o),b(bt.$$.fragment,o),b(vt.$$.fragment,o),b($t.$$.fragment,o),b(yt.$$.fragment,o),b(Et.$$.fragment,o),b(wt.$$.fragment,o),b(Ie.$$.fragment,o),b(Ce.$$.fragment,o),b(At.$$.fragment,o),b(Ue.$$.fragment,o),b(Ht.$$.fragment,o),b(qt.$$.fragment,o),b(Pt.$$.fragment,o),b(jt.$$.fragment,o),b(Ot.$$.fragment,o),b(Tt.$$.fragment,o),b(ze.$$.fragment,o),b(It.$$.fragment,o),b(Ct.$$.fragment,o),b(Ut.$$.fragment,o),b(Vt.$$.fragment,o),b(zt.$$.fragment,o),b(Rt.$$.fragment,o),b(St.$$.fragment,o),b(Gt.$$.fragment,o),b(Wt.$$.fragment,o),b(Bt.$$.fragment,o),b(Kt.$$.fragment,o),b(Qt.$$.fragment,o),b(Jt.$$.fragment,o),b(Xt.$$.fragment,o),b(Yt.$$.fragment,o),b(Zt.$$.fragment,o),b(eo.$$.fragment,o),b(to.$$.fragment,o),ln=!1},d(o){t(p),o&&t(P),o&&t(A),v($),o&&t(j),o&&t(x),o&&t(N),o&&t(T),o&&t(ee),o&&t(te),o&&t(Ka),v(st,o),o&&t(Qa),o&&t(qe),o&&t(Ja),v(it,o),o&&t(Xa),o&&t(xe),o&&t(Ya),o&&t(d),v(lt),v(ct),v(pt),v(dt),v(Ne),v(ft),v(mt),v(_t),v(bt),v(vt),v($t),v(yt),v(Et),v(wt),v(Ie),v(Ce),v(At),v(Ue),v(Ht),v(qt),v(Pt),v(jt),v(Ot),v(Tt),v(ze),v(It),v(Ct),o&&t(Za),o&&t(Ae),v(Ut),o&&t(en),o&&t(Mt),o&&t(tn),o&&t(Ge),o&&t(on),o&&t(X),v(Vt),v(zt),v(Rt),v(St),o&&t(an),o&&t(He),v(Gt),o&&t(nn),o&&t(Je),o&&t(rn),o&&t(w),v(Wt),v(Bt),v(Kt),v(Qt),v(Jt),v(Xt),v(Yt),v(Zt),v(eo),o&&t(sn),o&&t(De),v(to)}}}const tp={local:"huggingface_hub.HfApi",sections:[{local:"huggingface_hub.HfFolder",title:"Hugging Face local storage"},{local:"huggingface_hub.DatasetFilter",title:"Filtering helpers"}],title:"Hugging Face Hub API"};function op(Z){return Kg(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lp extends Sg{constructor(p){super();Gg(this,p,op,ep,Wg,{})}}export{lp as default,tp as metadata};
