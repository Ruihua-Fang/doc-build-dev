import{S as Og,i as Lg,s as Tg,e as a,k as l,w as d,t as s,M as Ig,c as n,d as o,m as g,a as r,x as u,h as i,b as p,F as e,g as h,y as m,q as _,o as b,B as v,v as Cg}from"../../chunks/vendor-7b1da053.js";import{T as Qi}from"../../chunks/Tip-41a95816.js";import{D as N}from"../../chunks/Docstring-f1352b16.js";import{C as xe}from"../../chunks/CodeBlock-5f39b59e.js";import{I as Ji}from"../../chunks/IconCopyLink-d24e9a6f.js";function Ug(Ne){let w,T,q,y,H,k,P,O,C;return{c(){w=a("p"),T=s("Raises the following errors:"),q=l(),y=a("ul"),H=a("li"),k=a("a"),P=a("code"),O=s("HTTPError"),C=s(`
if credentials are invalid`),this.h()},l(x){w=n(x,"P",{});var E=r(w);T=i(E,"Raises the following errors:"),E.forEach(o),q=g(x),y=n(x,"UL",{});var D=r(y);H=n(D,"LI",{});var j=r(H);k=n(j,"A",{href:!0,rel:!0});var I=r(k);P=n(I,"CODE",{});var K=r(P);O=i(K,"HTTPError"),K.forEach(o),I.forEach(o),C=i(j,`
if credentials are invalid`),j.forEach(o),D.forEach(o),this.h()},h(){p(k,"href","https://2.python-requests.org/en/master/api/#requests.HTTPError"),p(k,"rel","nofollow")},m(x,E){h(x,w,E),e(w,T),h(x,q,E),h(x,y,E),e(y,H),e(H,k),e(k,P),e(P,O),e(H,C)},d(x){x&&o(w),x&&o(q),x&&o(y)}}}function Mg(Ne){let w,T,q,y,H,k,P,O,C,x,E,D,j,I,K;return{c(){w=a("p"),T=s("Raises the following errors:"),q=l(),y=a("ul"),H=a("li"),k=a("a"),P=a("code"),O=s("HTTPError"),C=s(`
if the HuggingFace API returned an error`),x=l(),E=a("li"),D=a("a"),j=a("code"),I=s("ValueError"),K=s(`
if some parameter value is invalid`),this.h()},l(A){w=n(A,"P",{});var F=r(w);T=i(F,"Raises the following errors:"),F.forEach(o),q=g(A),y=n(A,"UL",{});var B=r(y);H=n(B,"LI",{});var L=r(H);k=n(L,"A",{href:!0,rel:!0});var Q=r(k);P=n(Q,"CODE",{});var _e=r(P);O=i(_e,"HTTPError"),_e.forEach(o),Q.forEach(o),C=i(L,`
if the HuggingFace API returned an error`),L.forEach(o),x=g(B),E=n(B,"LI",{});var J=r(E);D=n(J,"A",{href:!0,rel:!0});var be=r(D);j=n(be,"CODE",{});var ce=r(j);I=i(ce,"ValueError"),ce.forEach(o),be.forEach(o),K=i(J,`
if some parameter value is invalid`),J.forEach(o),B.forEach(o),this.h()},h(){p(k,"href","https://2.python-requests.org/en/master/api/#requests.HTTPError"),p(k,"rel","nofollow"),p(D,"href","https://docs.python.org/3/library/exceptions.html#ValueError"),p(D,"rel","nofollow")},m(A,F){h(A,w,F),e(w,T),h(A,q,F),h(A,y,F),e(y,H),e(H,k),e(k,P),e(P,O),e(H,C),e(y,x),e(y,E),e(E,D),e(D,j),e(j,I),e(E,K)},d(A){A&&o(w),A&&o(q),A&&o(y)}}}function zg(Ne){let w,T,q,y,H,k,P,O,C,x,E,D,j,I,K;return{c(){w=a("p"),T=s("Raises the following errors:"),q=l(),y=a("ul"),H=a("li"),k=a("a"),P=a("code"),O=s("HTTPError"),C=s(`
if the HuggingFace API returned an error`),x=l(),E=a("li"),D=a("a"),j=a("code"),I=s("ValueError"),K=s(`
if some parameter value is invalid`),this.h()},l(A){w=n(A,"P",{});var F=r(w);T=i(F,"Raises the following errors:"),F.forEach(o),q=g(A),y=n(A,"UL",{});var B=r(y);H=n(B,"LI",{});var L=r(H);k=n(L,"A",{href:!0,rel:!0});var Q=r(k);P=n(Q,"CODE",{});var _e=r(P);O=i(_e,"HTTPError"),_e.forEach(o),Q.forEach(o),C=i(L,`
if the HuggingFace API returned an error`),L.forEach(o),x=g(B),E=n(B,"LI",{});var J=r(E);D=n(J,"A",{href:!0,rel:!0});var be=r(D);j=n(be,"CODE",{});var ce=r(j);I=i(ce,"ValueError"),ce.forEach(o),be.forEach(o),K=i(J,`
if some parameter value is invalid`),J.forEach(o),B.forEach(o),this.h()},h(){p(k,"href","https://2.python-requests.org/en/master/api/#requests.HTTPError"),p(k,"rel","nofollow"),p(D,"href","https://docs.python.org/3/library/exceptions.html#ValueError"),p(D,"rel","nofollow")},m(A,F){h(A,w,F),e(w,T),h(A,q,F),h(A,y,F),e(y,H),e(H,k),e(k,P),e(P,O),e(H,C),e(y,x),e(y,E),e(E,D),e(D,j),e(j,I),e(E,K)},d(A){A&&o(w),A&&o(q),A&&o(y)}}}function Rg(Ne){let w,T,q,y,H,k,P,O,C,x,E,D,j,I,K,A,F,B,L,Q,_e,J,be,ce,ve,Be,ln,Bt,gn,$a,$e,Qe,pn,Qt,cn,ya,U,Je,hn,Jt,fn,dn,Xt,un,mn,Yt,_n,bn,Zt,Ct,vn,Xe,$n,Ea,X,Ye,yn,eo,En,kn,to,wn,An,oo,Ut,Hn,Ze,Dn,ka,ye,et,qn,ao,xn,wa,M,tt,Nn,no,Fn,Pn,ro,jn,On,so,Ln,Tn,io,Mt,In,ot,Cn,Aa,Ee,at,Un,lo,Mn,Ha,ke,nt,zn,go,Rn,Da,we,rt,Vn,po,Sn,qa,Y,st,Gn,co,Wn,Kn,ho,Bn,Qn,fo,zt,Jn,it,Xn,xa,Z,lt,Yn,uo,Zn,er,mo,tr,or,_o,Rt,ar,gt,nr,Na,ee,pt,rr,bo,sr,ir,vo,lr,gr,$o,Vt,pr,ct,cr,Fa,z,ht,hr,yo,fr,dr,ft,ur,dt,mr,_r,br,Eo,vr,$r,ko,St,yr,ut,Er,Pa,R,mt,kr,wo,wr,Ar,Fe,Hr,Ao,Dr,qr,_t,ja,ie,bt,xr,Ho,Nr,Fr,Pe,Oa,Ae,vt,Pr,Do,jr,La,He,je,qo,$t,Or,xo,Lr,Ta,yt,No,Tr,Ir,Ia,Oe,Cr,Gt,Ur,Mr,Ca,te,Et,zr,Le,kt,Rr,Fo,Vr,Sr,Te,wt,Gr,Po,Wr,Kr,Ie,At,Br,jo,Qr,Ua,De,Ce,Oo,Ht,Jr,Lo,Xr,Ma,Ue,Yr,To,Zr,es,za,f,Dt,ts,Io,os,as,le,ns,Co,rs,ss,Uo,is,ls,Mo,gs,ps,cs,qt,hs,oe,fs,zo,ds,us,Ro,ms,_s,Vo,bs,vs,So,$s,ys,Es,xt,ks,V,ws,Go,As,Hs,Wo,Ds,qs,Ko,xs,Ns,Bo,Fs,Ps,Qo,js,Os,Ls,Nt,Ts,ge,Is,Jo,Cs,Us,Xo,Ms,zs,Yo,Rs,Vs,Ss,Ft,Gs,pe,Ws,Zo,Ks,Bs,ea,Qs,Js,ta,Xs,Ys,Zs,Pt,ei,S,ti,oa,oi,ai,aa,ni,ri,na,si,ii,ra,li,gi,sa,pi,ci,hi,jt,fi,G,di,ia,ui,mi,la,_i,bi,ga,vi,$i,pa,yi,Ei,ca,ki,wi,Ai,Ot,Hi,W,Di,ha,qi,xi,fa,Ni,Fi,da,Pi,ji,ua,Oi,Li,ma,Ti,Ii,Ci,Lt,Ra,qe,Tt,Ui,_a,Mi,Va;return k=new Ji({}),D=new N({props:{name:"huggingface_hub.HfApi.login",anchor:"huggingface_hub.HfApi.login",parameters:[{name:"username",val:": str"},{name:"password",val:": str"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L461",parametersDescription:[{anchor:"huggingface_hub.HfApi.login.username",description:`<strong>username</strong> (<code>str</code>) &#x2014;
The username of the account with which to login.`,name:"username"},{anchor:"huggingface_hub.HfApi.login.password",description:`<strong>password</strong> (<code>str</code>) &#x2014;
The password of the account with which to login.`,name:"password"}],returnDescription:`
<p>token if credentials are valid</p>
`,returnType:`
<p><code>str</code></p>
`}}),F=new Qi({props:{$$slots:{default:[Ug]},$$scope:{ctx:Ne}}}),Q=new N({props:{name:"huggingface_hub.HfApi.logout",anchor:"huggingface_hub.HfApi.logout",parameters:[{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L567",parametersDescription:[{anchor:"huggingface_hub.HfApi.logout.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Hugging Face token. Will default to the locally saved token if
not provided.`,name:"token"}]}}),Be=new N({props:{name:"huggingface_hub.HfApi.whoami",anchor:"huggingface_hub.HfApi.whoami",parameters:[{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L496",parametersDescription:[{anchor:"huggingface_hub.HfApi.whoami.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Hugging Face token. Will default to the locally saved token if
not provided.`,name:"token"}]}}),Qe=new N({props:{name:"huggingface_hub.HfApi.list_models",anchor:"huggingface_hub.HfApi.list_models",parameters:[{name:"filter",val:": typing.Union[huggingface_hub.utils.endpoint_helpers.ModelFilter, str, typing.Iterable[str], NoneType] = None"},{name:"author",val:": typing.Optional[str] = None"},{name:"search",val:": typing.Optional[str] = None"},{name:"emissions_thresholds",val:": typing.Union[typing.Tuple[float, float], NoneType] = None"},{name:"sort",val:": typing.Union[typing.Literal['lastModified'], str, NoneType] = None"},{name:"direction",val:": typing.Optional[typing.Literal[-1]] = None"},{name:"limit",val:": typing.Optional[int] = None"},{name:"full",val:": typing.Optional[bool] = None"},{name:"cardData",val:": typing.Optional[bool] = None"},{name:"fetch_config",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L633",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_models.filter",description:`<strong>filter</strong> (<a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.ModelFilter">ModelFilter</a> or <code>str</code> or <code>Iterable</code>, <em>optional</em>) &#x2014;
A string or <a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.ModelFilter">ModelFilter</a> which can be used to identify models
on the hub.</p>
<p>Example usage:`,name:"filter"}]}}),Je=new N({props:{name:"huggingface_hub.HfApi.model_info",anchor:"huggingface_hub.HfApi.model_info",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"},{name:"securityStatus",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1070",parametersDescription:[{anchor:"huggingface_hub.HfApi.model_info.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.model_info.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The revision of the model repository from which to get the
information.`,name:"revision"},{anchor:"huggingface_hub.HfApi.model_info.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.model_info.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Whether to set a timeout for the request to the hub.`,name:"timeout"},{anchor:"huggingface_hub.HfApi.model_info.securityStatus",description:`<strong>securityStatus</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to retrieve the security status from the model
repository as well.`,name:"securityStatus"}],returnDescription:`
<p>The model repository information.</p>
`,returnType:`
<p><code>ModelInfo</code></p>
`}}),Ye=new N({props:{name:"huggingface_hub.HfApi.list_repo_files",anchor:"huggingface_hub.HfApi.list_repo_files",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1122",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_repo_files.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.list_repo_files.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The revision of the model repository from which to get the
information.`,name:"revision"},{anchor:"huggingface_hub.HfApi.list_repo_files.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.list_repo_files.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.list_repo_files.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Whether to set a timeout for the request to the hub.`,name:"timeout"}],returnDescription:`
<p>the list of files in a given repository.</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),et=new N({props:{name:"huggingface_hub.HfApi.list_datasets",anchor:"huggingface_hub.HfApi.list_datasets",parameters:[{name:"filter",val:": typing.Union[huggingface_hub.utils.endpoint_helpers.DatasetFilter, str, typing.Iterable[str], NoneType] = None"},{name:"author",val:": typing.Optional[str] = None"},{name:"search",val:": typing.Optional[str] = None"},{name:"sort",val:": typing.Union[typing.Literal['lastModified'], str, NoneType] = None"},{name:"direction",val:": typing.Optional[typing.Literal[-1]] = None"},{name:"limit",val:": typing.Optional[int] = None"},{name:"cardData",val:": typing.Optional[bool] = None"},{name:"full",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L870",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_datasets.filter",description:`<strong>filter</strong> (<a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.DatasetFilter">DatasetFilter</a> or <code>str</code> or <code>Iterable</code>, <em>optional</em>) &#x2014;
A string or <a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.DatasetFilter">DatasetFilter</a> which can be used to identify
datasets on the hub. Example usage:`,name:"filter"}]}}),tt=new N({props:{name:"huggingface_hub.HfApi.dataset_info",anchor:"huggingface_hub.HfApi.dataset_info",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1169",parametersDescription:[{anchor:"huggingface_hub.HfApi.dataset_info.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.dataset_info.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The revision of the dataset repository from which to get the
information.`,name:"revision"},{anchor:"huggingface_hub.HfApi.dataset_info.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.dataset_info.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Whether to set a timeout for the request to the hub.`,name:"timeout"}],returnDescription:`
<p>The dataset repository information.</p>
`,returnType:`
<p><code>DatasetInfo</code></p>
`}}),at=new N({props:{name:"huggingface_hub.HfApi.list_metrics",anchor:"huggingface_hub.HfApi.list_metrics",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1056",returnDescription:`
<p>a list of <code>MetricInfo</code> objects which.</p>
`,returnType:`
<p><code>List[MetricInfo]</code></p>
`}}),nt=new N({props:{name:"huggingface_hub.HfApi.get_model_tags",anchor:"huggingface_hub.HfApi.get_model_tags",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L615"}}),rt=new N({props:{name:"huggingface_hub.HfApi.get_dataset_tags",anchor:"huggingface_hub.HfApi.get_dataset_tags",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L623"}}),st=new N({props:{name:"huggingface_hub.HfApi.create_repo",anchor:"huggingface_hub.HfApi.create_repo",parameters:[{name:"repo_id",val:": str = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"exist_ok",val:": typing.Optional[bool] = False"},{name:"space_sdk",val:": typing.Optional[str] = None"},{name:"name",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1215",parametersDescription:[{anchor:"huggingface_hub.HfApi.create_repo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>Version added: 0.4.0</p>

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.create_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.create_repo.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether the model repo should be private.`,name:"private"},{anchor:"huggingface_hub.HfApi.create_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.create_repo.exist_ok",description:`<strong>exist_ok</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, do not raise an error if repo already exists.`,name:"exist_ok"},{anchor:"huggingface_hub.HfApi.create_repo.space_sdk",description:`<strong>space_sdk</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Choice of SDK to use if repo_type is &#x201C;space&#x201D;. Can be
&#x201C;streamlit&#x201D;, &#x201C;gradio&#x201D;, or &#x201C;static&#x201D;.`,name:"space_sdk"}],returnDescription:`
<p>URL to the newly created repo.</p>
`,returnType:`
<p><code>str</code></p>
`}}),lt=new N({props:{name:"huggingface_hub.HfApi.delete_repo",anchor:"huggingface_hub.HfApi.delete_repo",parameters:[{name:"repo_id",val:": str = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"name",val:": str = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1355",parametersDescription:[{anchor:"huggingface_hub.HfApi.delete_repo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>Version added: 0.4.0</p>

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.delete_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.delete_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model.`,name:"repo_type"}]}}),pt=new N({props:{name:"huggingface_hub.HfApi.update_repo_visibility",anchor:"huggingface_hub.HfApi.update_repo_visibility",parameters:[{name:"repo_id",val:": str = None"},{name:"private",val:": bool = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"name",val:": str = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1449",parametersDescription:[{anchor:"huggingface_hub.HfApi.update_repo_visibility.repo_id",description:`<strong>repo_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>Version added: 0.4.0</p>

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.update_repo_visibility.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the model repo should be private.`,name:"private"},{anchor:"huggingface_hub.HfApi.update_repo_visibility.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.update_repo_visibility.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"}],returnDescription:`
<p>The HTTP response in json.</p>
`}}),ht=new N({props:{name:"huggingface_hub.HfApi.move_repo",anchor:"huggingface_hub.HfApi.move_repo",parameters:[{name:"from_id",val:": str"},{name:"to_id",val:": str"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1526",parametersDescription:[{anchor:"huggingface_hub.HfApi.move_repo.from_id",description:`<strong>from_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>. Original repository identifier.`,name:"from_id"},{anchor:"huggingface_hub.HfApi.move_repo.to_id",description:`<strong>to_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated
by a <code>/</code>. Final repository identifier.`,name:"to_id"},{anchor:"huggingface_hub.HfApi.move_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.move_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"}]}}),mt=new N({props:{name:"huggingface_hub.HfApi.upload_file",anchor:"huggingface_hub.HfApi.upload_file",parameters:[{name:"path_or_fileobj",val:": typing.Union[str, bytes, typing.IO]"},{name:"path_in_repo",val:": str"},{name:"repo_id",val:": str"},{name:"token",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"identical_ok",val:": bool = True"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1591",parametersDescription:[{anchor:"huggingface_hub.HfApi.upload_file.path_or_fileobj",description:`<strong>path_or_fileobj</strong> (<code>str</code>, <code>bytes</code>, or <code>IO</code>) &#x2014;
Path to a file on the local machine or binary data stream /
fileobj / buffer.`,name:"path_or_fileobj"},{anchor:"huggingface_hub.HfApi.upload_file.path_in_repo",description:`<strong>path_in_repo</strong> (<code>str</code>) &#x2014;
Relative filepath in the repo, for example:
<code>&quot;checkpoints/1fec34a/weights.bin&quot;</code>`,name:"path_in_repo"},{anchor:"huggingface_hub.HfApi.upload_file.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The repository to which the file will be uploaded, for example:
<code>&quot;username/custom_transformers&quot;</code>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.upload_file.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Authentication token, obtained with :function:<code>HfApi.login</code>
method. Will default to the stored token.`,name:"token"},{anchor:"huggingface_hub.HfApi.upload_file.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is
<code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.upload_file.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The git revision to commit from. Defaults to the head of the
<code>&quot;main&quot;</code> branch.`,name:"revision"},{anchor:"huggingface_hub.HfApi.upload_file.identical_ok",description:`<strong>identical_ok</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
When set to false, will raise an <a href="https://2.python-requests.org/en/master/api/#requests.HTTPError" rel="nofollow">HTTPError</a>
when the file you&#x2019;re trying to upload already exists on the hub
and its content did not change.`,name:"identical_ok"}],returnDescription:`
<p>The URL to visualize the uploaded file on the hub</p>
`,returnType:`
<p><code>str</code></p>
`}}),Fe=new Qi({props:{$$slots:{default:[Mg]},$$scope:{ctx:Ne}}}),_t=new xe({props:{code:`with open("./local/filepath", "rb") as fobj:
    upload_file(
        path_or_fileobj=fileobj,
        path_in_repo="remote/file/path.h5",
        repo_id="username/my-dataset",
        repo_type="datasets",
        token="my_token",
    )

upload_file(
    path_or_fileobj=".\\\\local\\\\file\\\\path",
    path_in_repo="remote/file/path.h5",
    repo_id="username/my-model",
    token="my_token",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./local/filepath&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> fobj:
<span class="hljs-meta">... </span>    upload_file(
<span class="hljs-meta">... </span>        path_or_fileobj=fileobj,
<span class="hljs-meta">... </span>        path_in_repo=<span class="hljs-string">&quot;remote/file/path.h5&quot;</span>,
<span class="hljs-meta">... </span>        repo_id=<span class="hljs-string">&quot;username/my-dataset&quot;</span>,
<span class="hljs-meta">... </span>        repo_type=<span class="hljs-string">&quot;datasets&quot;</span>,
<span class="hljs-meta">... </span>        token=<span class="hljs-string">&quot;my_token&quot;</span>,
<span class="hljs-meta">... </span>    )
<span class="hljs-string">&quot;https://huggingface.co/datasets/username/my-dataset/blob/main/remote/file/path.h5&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>upload_file(
<span class="hljs-meta">... </span>    path_or_fileobj=<span class="hljs-string">&quot;.\\\\local\\\\file\\\\path&quot;</span>,
<span class="hljs-meta">... </span>    path_in_repo=<span class="hljs-string">&quot;remote/file/path.h5&quot;</span>,
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;username/my-model&quot;</span>,
<span class="hljs-meta">... </span>    token=<span class="hljs-string">&quot;my_token&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-string">&quot;https://huggingface.co/username/my-model/blob/main/remote/file/path.h5&quot;</span>`}}),bt=new N({props:{name:"huggingface_hub.HfApi.delete_file",anchor:"huggingface_hub.HfApi.delete_file",parameters:[{name:"path_in_repo",val:": str"},{name:"repo_id",val:": str"},{name:"token",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1731",parametersDescription:[{anchor:"huggingface_hub.HfApi.delete_file.path_in_repo",description:`<strong>path_in_repo</strong> (<code>str</code>) &#x2014;
Relative filepath in the repo, for example:
<code>&quot;checkpoints/1fec34a/weights.bin&quot;</code>`,name:"path_in_repo"},{anchor:"huggingface_hub.HfApi.delete_file.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The repository from which the file will be deleted, for example:
<code>&quot;username/custom_transformers&quot;</code>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.delete_file.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Authentication token, obtained with :function:<code>HfApi.login</code>
method. Will default to the stored token.`,name:"token"},{anchor:"huggingface_hub.HfApi.delete_file.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if the file is in a dataset or
space, <code>None</code> or <code>&quot;model&quot;</code> if in a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.delete_file.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The git revision to commit from. Defaults to the head of the
<code>&quot;main&quot;</code> branch.`,name:"revision"}]}}),Pe=new Qi({props:{$$slots:{default:[zg]},$$scope:{ctx:Ne}}}),vt=new N({props:{name:"huggingface_hub.HfApi.get_full_repo_name",anchor:"huggingface_hub.HfApi.get_full_repo_name",parameters:[{name:"model_id",val:": str"},{name:"organization",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1789",parametersDescription:[{anchor:"huggingface_hub.HfApi.get_full_repo_name.model_id",description:`<strong>model_id</strong> (<code>str</code>) &#x2014;
The name of the model.`,name:"model_id"},{anchor:"huggingface_hub.HfApi.get_full_repo_name.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
If passed, the repository name will be in the organization
namespace instead of the user namespace.`,name:"organization"},{anchor:"huggingface_hub.HfApi.get_full_repo_name.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The Hugging Face authentication token`,name:"token"}],returnDescription:`
<p>The repository name in the user\u2019s namespace
({username}/{model_id}) if no organization is passed, and under the
organization namespace ({organization}/{model_id}) otherwise.</p>
`,returnType:`
<p><code>str</code></p>
`}}),$t=new Ji({}),Et=new N({props:{name:"class huggingface_hub.HfFolder",anchor:"huggingface_hub.HfFolder",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1823"}}),kt=new N({props:{name:"delete_token",anchor:"huggingface_hub.HfFolder.delete_token",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1854"}}),wt=new N({props:{name:"get_token",anchor:"huggingface_hub.HfFolder.get_token",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1839",returnDescription:`
<p>The token, <code>None</code> if it doesn\u2019t exist.</p>
`,returnType:`
<p><code>str</code> or <code>None</code></p>
`}}),At=new N({props:{name:"save_token",anchor:"huggingface_hub.HfFolder.save_token",parameters:[{name:"token",val:""}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1826",parametersDescription:[{anchor:"huggingface_hub.HfFolder.save_token.token",description:`<strong>token</strong> (<code>str</code>) &#x2014;
The token to save to the <a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.HfFolder">HfFolder</a>`,name:"token"}]}}),Ht=new Ji({}),Dt=new N({props:{name:"class huggingface_hub.DatasetFilter",anchor:"huggingface_hub.DatasetFilter",parameters:[{name:"author",val:": str = None"},{name:"benchmark",val:": typing.Union[str, typing.List[str]] = None"},{name:"dataset_name",val:": str = None"},{name:"language_creators",val:": typing.Union[str, typing.List[str]] = None"},{name:"languages",val:": typing.Union[str, typing.List[str]] = None"},{name:"multilinguality",val:": typing.Union[str, typing.List[str]] = None"},{name:"size_categories",val:": typing.Union[str, typing.List[str]] = None"},{name:"task_categories",val:": typing.Union[str, typing.List[str]] = None"},{name:"task_ids",val:": typing.Union[str, typing.List[str]] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/utils/endpoint_helpers.py#L67",parametersDescription:[{anchor:"huggingface_hub.DatasetFilter.author",description:`<strong>author</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A string or list of strings that can be used to identify datasets on
the Hub by the original uploader (author or organization), such as
<code>facebook</code> or <code>huggingface</code> Example usage:`,name:"author"}]}}),qt=new xe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(benchmark="raft")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(benchmark=<span class="hljs-string">&quot;raft&quot;</span>)`}}),xt=new xe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(dataset_name="wikineural")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(dataset_name=<span class="hljs-string">&quot;wikineural&quot;</span>)`}}),Nt=new xe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(language_creator="crowdsourced")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(language_creator=<span class="hljs-string">&quot;crowdsourced&quot;</span>)`}}),Ft=new xe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(language="en")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(language=<span class="hljs-string">&quot;en&quot;</span>)`}}),Pt=new xe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(multilinguality="yes")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(multilinguality=<span class="hljs-string">&quot;yes&quot;</span>)`}}),jt=new xe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(size_categories="100K<n<1M")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(size_categories=<span class="hljs-string">&quot;100K&lt;n&lt;1M&quot;</span>)`}}),Ot=new xe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(author="facebook")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(author=<span class="hljs-string">&quot;facebook&quot;</span>)`}}),Lt=new xe({props:{code:`from huggingface_hub import DatasetFilter

new_filter = DatasetFilter(task_ids="paraphrase")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter

<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(task_ids=<span class="hljs-string">&quot;paraphrase&quot;</span>)`}}),Tt=new N({props:{name:"class huggingface_hub.ModelFilter",anchor:"huggingface_hub.ModelFilter",parameters:[{name:"author",val:": str = None"},{name:"library",val:": typing.Union[str, typing.List[str]] = None"},{name:"language",val:": typing.Union[str, typing.List[str]] = None"},{name:"model_name",val:": str = None"},{name:"task",val:": typing.Union[str, typing.List[str]] = None"},{name:"trained_dataset",val:": typing.Union[str, typing.List[str]] = None"},{name:"tags",val:": typing.Union[str, typing.List[str]] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/utils/endpoint_helpers.py#L181",parametersDescription:[{anchor:"huggingface_hub.ModelFilter.author",description:`<strong>author</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A string that can be used to identify models on the Hub by the
original uploader (author or organization), such as <code>facebook</code> or
<code>huggingface</code> Example usage:`,name:"author"}]}}),{c(){w=a("meta"),T=l(),q=a("h1"),y=a("a"),H=a("span"),d(k.$$.fragment),P=l(),O=a("span"),C=s("Hugging Face Hub API"),x=l(),E=a("div"),d(D.$$.fragment),j=l(),I=a("p"),K=s("Call HF API to sign in a user and get a token if credentials are valid."),A=l(),d(F.$$.fragment),B=l(),L=a("div"),d(Q.$$.fragment),_e=l(),J=a("p"),be=s("Call HF API to log out."),ce=l(),ve=a("div"),d(Be.$$.fragment),ln=l(),Bt=a("p"),gn=s("Call HF API to know \u201Cwhoami\u201D."),$a=l(),$e=a("div"),d(Qe.$$.fragment),pn=l(),Qt=a("p"),cn=s("Get the public list of all the models on huggingface.co"),ya=l(),U=a("div"),d(Je.$$.fragment),hn=l(),Jt=a("p"),fn=s("Get info on one specific model on huggingface.co"),dn=l(),Xt=a("p"),un=s("Model can be private if you pass an acceptable token or are logged in."),mn=l(),Yt=a("p"),_n=s("References:"),bn=l(),Zt=a("ul"),Ct=a("li"),vn=s("[1] "),Xe=a("a"),$n=s("https://huggingface.co/settings/tokens"),Ea=l(),X=a("div"),d(Ye.$$.fragment),yn=l(),eo=a("p"),En=s("Get the list of files in a given repo."),kn=l(),to=a("p"),wn=s("References:"),An=l(),oo=a("ul"),Ut=a("li"),Hn=s("[1] "),Ze=a("a"),Dn=s("https://huggingface.co/settings/tokens"),ka=l(),ye=a("div"),d(et.$$.fragment),qn=l(),ao=a("p"),xn=s("Get the public list of all the datasets on huggingface.co"),wa=l(),M=a("div"),d(tt.$$.fragment),Nn=l(),no=a("p"),Fn=s("Get info on one specific dataset on huggingface.co"),Pn=l(),ro=a("p"),jn=s("Dataset can be private if you pass an acceptable token."),On=l(),so=a("p"),Ln=s("References:"),Tn=l(),io=a("ul"),Mt=a("li"),In=s("[1] "),ot=a("a"),Cn=s("https://huggingface.co/settings/tokens"),Aa=l(),Ee=a("div"),d(at.$$.fragment),Un=l(),lo=a("p"),Mn=s("Get the public list of all the metrics on huggingface.co"),Ha=l(),ke=a("div"),d(nt.$$.fragment),zn=l(),go=a("p"),Rn=s("Gets all valid model tags as a nested namespace object"),Da=l(),we=a("div"),d(rt.$$.fragment),Vn=l(),po=a("p"),Sn=s("Gets all valid dataset tags as a nested namespace object."),qa=l(),Y=a("div"),d(st.$$.fragment),Gn=l(),co=a("p"),Wn=s("Create an empty repo on the HuggingFace Hub."),Kn=l(),ho=a("p"),Bn=s("References:"),Qn=l(),fo=a("ul"),zt=a("li"),Jn=s("[1] "),it=a("a"),Xn=s("https://huggingface.co/settings/tokens"),xa=l(),Z=a("div"),d(lt.$$.fragment),Yn=l(),uo=a("p"),Zn=s("Delete a repo from the HuggingFace Hub. CAUTION: this is irreversible."),er=l(),mo=a("p"),tr=s("References:"),or=l(),_o=a("ul"),Rt=a("li"),ar=s("[1] "),gt=a("a"),nr=s("https://huggingface.co/settings/tokens"),Na=l(),ee=a("div"),d(pt.$$.fragment),rr=l(),bo=a("p"),sr=s("Update the visibility setting of a repository."),ir=l(),vo=a("p"),lr=s("References:"),gr=l(),$o=a("ul"),Vt=a("li"),pr=s("[1] "),ct=a("a"),cr=s("https://huggingface.co/settings/tokens"),Fa=l(),z=a("div"),d(ht.$$.fragment),hr=l(),yo=a("p"),fr=s("Moving a repository from namespace1/repo_name1 to namespace2/repo_name2"),dr=l(),ft=a("p"),ur=s(`Note there are certain limitations. For more information about moving
repositories, please see
`),dt=a("a"),mr=s("https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),_r=s("."),br=l(),Eo=a("p"),vr=s("References:"),$r=l(),ko=a("ul"),St=a("li"),yr=s("[1] "),ut=a("a"),Er=s("https://huggingface.co/settings/tokens"),Pa=l(),R=a("div"),d(mt.$$.fragment),kr=l(),wo=a("p"),wr=s(`Upload a local file (up to 5GB) to the given repo. The upload is done
through a HTTP post request, and doesn\u2019t require git or git-lfs to be
installed.`),Ar=l(),d(Fe.$$.fragment),Hr=l(),Ao=a("p"),Dr=s("Examples:"),qr=l(),d(_t.$$.fragment),ja=l(),ie=a("div"),d(bt.$$.fragment),xr=l(),Ho=a("p"),Nr=s("Deletes a file in the given repo."),Fr=l(),d(Pe.$$.fragment),Oa=l(),Ae=a("div"),d(vt.$$.fragment),Pr=l(),Do=a("p"),jr=s(`Returns the repository name for a given model ID and optional
organization.`),La=l(),He=a("h2"),je=a("a"),qo=a("span"),d($t.$$.fragment),Or=l(),xo=a("span"),Lr=s("Hugging Face local storage"),Ta=l(),yt=a("p"),No=a("code"),Tr=s("huggingface_hub"),Ir=s(` stores the authentication information locally so that it may be re-used in subsequent
methods.`),Ia=l(),Oe=a("p"),Cr=s("It does this using the "),Gt=a("a"),Ur=s("HfFolder"),Mr=s(" utility, which saves data at the root of the user."),Ca=l(),te=a("div"),d(Et.$$.fragment),zr=l(),Le=a("div"),d(kt.$$.fragment),Rr=l(),Fo=a("p"),Vr=s("Deletes the token from storage. Does not fail if token does not exist."),Sr=l(),Te=a("div"),d(wt.$$.fragment),Gr=l(),Po=a("p"),Wr=s("Retrieves the token"),Kr=l(),Ie=a("div"),d(At.$$.fragment),Br=l(),jo=a("p"),Qr=s("Save token, creating folder as needed."),Ua=l(),De=a("h2"),Ce=a("a"),Oo=a("span"),d(Ht.$$.fragment),Jr=l(),Lo=a("span"),Xr=s("Filtering helpers"),Ma=l(),Ue=a("p"),Yr=s("Some helpers to filter repositories on the hub are available in the "),To=a("code"),Zr=s("huggingface_hub"),es=s(" package."),za=l(),f=a("div"),d(Dt.$$.fragment),ts=l(),Io=a("p"),os=s(`A class that converts human-readable dataset search parameters into ones
compatible with
the REST API. For all parameters capitalization does not matter.`),as=l(),le=a("p"),ns=s("benchmark ("),Co=a("code"),rs=s("str"),ss=s(" or "),Uo=a("code"),is=s("List"),ls=s(", "),Mo=a("em"),gs=s("optional"),ps=s(`):
A string or list of strings that can be used to identify datasets on
the Hub by their official benchmark Example usage:`),cs=l(),d(qt.$$.fragment),hs=l(),oe=a("p"),fs=s("dataset_name ("),zo=a("code"),ds=s("str"),us=s(", "),Ro=a("em"),ms=s("optional"),_s=s(`):
A string or list of strings that can be used to identify datasets on
the Hub by its name, such as `),Vo=a("code"),bs=s("SQAC"),vs=s(" or "),So=a("code"),$s=s("wikineural"),ys=s(" Example usage:"),Es=l(),d(xt.$$.fragment),ks=l(),V=a("p"),ws=s("language_creators ("),Go=a("code"),As=s("str"),Hs=s(" or "),Wo=a("code"),Ds=s("List"),qs=s(", "),Ko=a("em"),xs=s("optional"),Ns=s(`):
A string or list of strings that can be used to identify datasets on
the Hub with how the data was curated, such as `),Bo=a("code"),Fs=s("crowdsourced"),Ps=s(` or
`),Qo=a("code"),js=s("machine_generated"),Os=s(" Example usage:"),Ls=l(),d(Nt.$$.fragment),Ts=l(),ge=a("p"),Is=s("languages ("),Jo=a("code"),Cs=s("str"),Us=s(" or "),Xo=a("code"),Ms=s("List"),zs=s(", "),Yo=a("em"),Rs=s("optional"),Vs=s(`):
A string or list of strings representing a two-character language to
filter datasets by on the Hub Example usage:`),Ss=l(),d(Ft.$$.fragment),Gs=l(),pe=a("p"),Ws=s("multilinguality ("),Zo=a("code"),Ks=s("str"),Bs=s(" or "),ea=a("code"),Qs=s("List"),Js=s(", "),ta=a("em"),Xs=s("optional"),Ys=s(`):
A string or list of strings representing a filter for datasets that
contain multiple languages Example usage:`),Zs=l(),d(Pt.$$.fragment),ei=l(),S=a("p"),ti=s("size_categories ("),oa=a("code"),oi=s("str"),ai=s(" or "),aa=a("code"),ni=s("List"),ri=s(", "),na=a("em"),si=s("optional"),ii=s(`):
A string or list of strings that can be used to identify datasets on
the Hub by the size of the dataset such as `),ra=a("code"),li=s("100K<n<1M"),gi=s(" or "),sa=a("code"),pi=s("1M<n<10M"),ci=s(`
Example usage:`),hi=l(),d(jt.$$.fragment),fi=l(),G=a("p"),di=s("task_categories ("),ia=a("code"),ui=s("str"),mi=s(" or "),la=a("code"),_i=s("List"),bi=s(", "),ga=a("em"),vi=s("optional"),$i=s(`):
A string or list of strings that can be used to identify datasets on
the Hub by the designed task, such as `),pa=a("code"),yi=s("audio_classification"),Ei=s(` or
`),ca=a("code"),ki=s("named_entity_recognition"),wi=s(" Example usage:"),Ai=l(),d(Ot.$$.fragment),Hi=l(),W=a("p"),Di=s("task_ids ("),ha=a("code"),qi=s("str"),xi=s(" or "),fa=a("code"),Ni=s("List"),Fi=s(", "),da=a("em"),Pi=s("optional"),ji=s(`):
A string or list of strings that can be used to identify datasets on
the Hub by the specific task such as `),ua=a("code"),Oi=s("speech_emotion_recognition"),Li=s(` or
`),ma=a("code"),Ti=s("paraphrase"),Ii=s(" Example usage:"),Ci=l(),d(Lt.$$.fragment),Ra=l(),qe=a("div"),d(Tt.$$.fragment),Ui=l(),_a=a("p"),Mi=s(`A class that converts human-readable model search parameters into ones
compatible with
the REST API. For all parameters capitalization does not matter.`),this.h()},l(t){const c=Ig('[data-svelte="svelte-1phssyn"]',document.head);w=n(c,"META",{name:!0,content:!0}),c.forEach(o),T=g(t),q=n(t,"H1",{class:!0});var It=r(q);y=n(It,"A",{id:!0,class:!0,href:!0});var ba=r(y);H=n(ba,"SPAN",{});var va=r(H);u(k.$$.fragment,va),va.forEach(o),ba.forEach(o),P=g(It),O=n(It,"SPAN",{});var Xi=r(O);C=i(Xi,"Hugging Face Hub API"),Xi.forEach(o),It.forEach(o),x=g(t),E=n(t,"DIV",{class:!0});var Wt=r(E);u(D.$$.fragment,Wt),j=g(Wt),I=n(Wt,"P",{});var Yi=r(I);K=i(Yi,"Call HF API to sign in a user and get a token if credentials are valid."),Yi.forEach(o),A=g(Wt),u(F.$$.fragment,Wt),Wt.forEach(o),B=g(t),L=n(t,"DIV",{class:!0});var Sa=r(L);u(Q.$$.fragment,Sa),_e=g(Sa),J=n(Sa,"P",{});var Zi=r(J);be=i(Zi,"Call HF API to log out."),Zi.forEach(o),Sa.forEach(o),ce=g(t),ve=n(t,"DIV",{class:!0});var Ga=r(ve);u(Be.$$.fragment,Ga),ln=g(Ga),Bt=n(Ga,"P",{});var el=r(Bt);gn=i(el,"Call HF API to know \u201Cwhoami\u201D."),el.forEach(o),Ga.forEach(o),$a=g(t),$e=n(t,"DIV",{class:!0});var Wa=r($e);u(Qe.$$.fragment,Wa),pn=g(Wa),Qt=n(Wa,"P",{});var tl=r(Qt);cn=i(tl,"Get the public list of all the models on huggingface.co"),tl.forEach(o),Wa.forEach(o),ya=g(t),U=n(t,"DIV",{class:!0});var he=r(U);u(Je.$$.fragment,he),hn=g(he),Jt=n(he,"P",{});var ol=r(Jt);fn=i(ol,"Get info on one specific model on huggingface.co"),ol.forEach(o),dn=g(he),Xt=n(he,"P",{});var al=r(Xt);un=i(al,"Model can be private if you pass an acceptable token or are logged in."),al.forEach(o),mn=g(he),Yt=n(he,"P",{});var nl=r(Yt);_n=i(nl,"References:"),nl.forEach(o),bn=g(he),Zt=n(he,"UL",{});var rl=r(Zt);Ct=n(rl,"LI",{});var zi=r(Ct);vn=i(zi,"[1] "),Xe=n(zi,"A",{href:!0,rel:!0});var sl=r(Xe);$n=i(sl,"https://huggingface.co/settings/tokens"),sl.forEach(o),zi.forEach(o),rl.forEach(o),he.forEach(o),Ea=g(t),X=n(t,"DIV",{class:!0});var Me=r(X);u(Ye.$$.fragment,Me),yn=g(Me),eo=n(Me,"P",{});var il=r(eo);En=i(il,"Get the list of files in a given repo."),il.forEach(o),kn=g(Me),to=n(Me,"P",{});var ll=r(to);wn=i(ll,"References:"),ll.forEach(o),An=g(Me),oo=n(Me,"UL",{});var gl=r(oo);Ut=n(gl,"LI",{});var Ri=r(Ut);Hn=i(Ri,"[1] "),Ze=n(Ri,"A",{href:!0,rel:!0});var pl=r(Ze);Dn=i(pl,"https://huggingface.co/settings/tokens"),pl.forEach(o),Ri.forEach(o),gl.forEach(o),Me.forEach(o),ka=g(t),ye=n(t,"DIV",{class:!0});var Ka=r(ye);u(et.$$.fragment,Ka),qn=g(Ka),ao=n(Ka,"P",{});var cl=r(ao);xn=i(cl,"Get the public list of all the datasets on huggingface.co"),cl.forEach(o),Ka.forEach(o),wa=g(t),M=n(t,"DIV",{class:!0});var fe=r(M);u(tt.$$.fragment,fe),Nn=g(fe),no=n(fe,"P",{});var hl=r(no);Fn=i(hl,"Get info on one specific dataset on huggingface.co"),hl.forEach(o),Pn=g(fe),ro=n(fe,"P",{});var fl=r(ro);jn=i(fl,"Dataset can be private if you pass an acceptable token."),fl.forEach(o),On=g(fe),so=n(fe,"P",{});var dl=r(so);Ln=i(dl,"References:"),dl.forEach(o),Tn=g(fe),io=n(fe,"UL",{});var ul=r(io);Mt=n(ul,"LI",{});var Vi=r(Mt);In=i(Vi,"[1] "),ot=n(Vi,"A",{href:!0,rel:!0});var ml=r(ot);Cn=i(ml,"https://huggingface.co/settings/tokens"),ml.forEach(o),Vi.forEach(o),ul.forEach(o),fe.forEach(o),Aa=g(t),Ee=n(t,"DIV",{class:!0});var Ba=r(Ee);u(at.$$.fragment,Ba),Un=g(Ba),lo=n(Ba,"P",{});var _l=r(lo);Mn=i(_l,"Get the public list of all the metrics on huggingface.co"),_l.forEach(o),Ba.forEach(o),Ha=g(t),ke=n(t,"DIV",{class:!0});var Qa=r(ke);u(nt.$$.fragment,Qa),zn=g(Qa),go=n(Qa,"P",{});var bl=r(go);Rn=i(bl,"Gets all valid model tags as a nested namespace object"),bl.forEach(o),Qa.forEach(o),Da=g(t),we=n(t,"DIV",{class:!0});var Ja=r(we);u(rt.$$.fragment,Ja),Vn=g(Ja),po=n(Ja,"P",{});var vl=r(po);Sn=i(vl,"Gets all valid dataset tags as a nested namespace object."),vl.forEach(o),Ja.forEach(o),qa=g(t),Y=n(t,"DIV",{class:!0});var ze=r(Y);u(st.$$.fragment,ze),Gn=g(ze),co=n(ze,"P",{});var $l=r(co);Wn=i($l,"Create an empty repo on the HuggingFace Hub."),$l.forEach(o),Kn=g(ze),ho=n(ze,"P",{});var yl=r(ho);Bn=i(yl,"References:"),yl.forEach(o),Qn=g(ze),fo=n(ze,"UL",{});var El=r(fo);zt=n(El,"LI",{});var Si=r(zt);Jn=i(Si,"[1] "),it=n(Si,"A",{href:!0,rel:!0});var kl=r(it);Xn=i(kl,"https://huggingface.co/settings/tokens"),kl.forEach(o),Si.forEach(o),El.forEach(o),ze.forEach(o),xa=g(t),Z=n(t,"DIV",{class:!0});var Re=r(Z);u(lt.$$.fragment,Re),Yn=g(Re),uo=n(Re,"P",{});var wl=r(uo);Zn=i(wl,"Delete a repo from the HuggingFace Hub. CAUTION: this is irreversible."),wl.forEach(o),er=g(Re),mo=n(Re,"P",{});var Al=r(mo);tr=i(Al,"References:"),Al.forEach(o),or=g(Re),_o=n(Re,"UL",{});var Hl=r(_o);Rt=n(Hl,"LI",{});var Gi=r(Rt);ar=i(Gi,"[1] "),gt=n(Gi,"A",{href:!0,rel:!0});var Dl=r(gt);nr=i(Dl,"https://huggingface.co/settings/tokens"),Dl.forEach(o),Gi.forEach(o),Hl.forEach(o),Re.forEach(o),Na=g(t),ee=n(t,"DIV",{class:!0});var Ve=r(ee);u(pt.$$.fragment,Ve),rr=g(Ve),bo=n(Ve,"P",{});var ql=r(bo);sr=i(ql,"Update the visibility setting of a repository."),ql.forEach(o),ir=g(Ve),vo=n(Ve,"P",{});var xl=r(vo);lr=i(xl,"References:"),xl.forEach(o),gr=g(Ve),$o=n(Ve,"UL",{});var Nl=r($o);Vt=n(Nl,"LI",{});var Wi=r(Vt);pr=i(Wi,"[1] "),ct=n(Wi,"A",{href:!0,rel:!0});var Fl=r(ct);cr=i(Fl,"https://huggingface.co/settings/tokens"),Fl.forEach(o),Wi.forEach(o),Nl.forEach(o),Ve.forEach(o),Fa=g(t),z=n(t,"DIV",{class:!0});var de=r(z);u(ht.$$.fragment,de),hr=g(de),yo=n(de,"P",{});var Pl=r(yo);fr=i(Pl,"Moving a repository from namespace1/repo_name1 to namespace2/repo_name2"),Pl.forEach(o),dr=g(de),ft=n(de,"P",{});var Xa=r(ft);ur=i(Xa,`Note there are certain limitations. For more information about moving
repositories, please see
`),dt=n(Xa,"A",{href:!0,rel:!0});var jl=r(dt);mr=i(jl,"https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),jl.forEach(o),_r=i(Xa,"."),Xa.forEach(o),br=g(de),Eo=n(de,"P",{});var Ol=r(Eo);vr=i(Ol,"References:"),Ol.forEach(o),$r=g(de),ko=n(de,"UL",{});var Ll=r(ko);St=n(Ll,"LI",{});var Ki=r(St);yr=i(Ki,"[1] "),ut=n(Ki,"A",{href:!0,rel:!0});var Tl=r(ut);Er=i(Tl,"https://huggingface.co/settings/tokens"),Tl.forEach(o),Ki.forEach(o),Ll.forEach(o),de.forEach(o),Pa=g(t),R=n(t,"DIV",{class:!0});var ue=r(R);u(mt.$$.fragment,ue),kr=g(ue),wo=n(ue,"P",{});var Il=r(wo);wr=i(Il,`Upload a local file (up to 5GB) to the given repo. The upload is done
through a HTTP post request, and doesn\u2019t require git or git-lfs to be
installed.`),Il.forEach(o),Ar=g(ue),u(Fe.$$.fragment,ue),Hr=g(ue),Ao=n(ue,"P",{});var Cl=r(Ao);Dr=i(Cl,"Examples:"),Cl.forEach(o),qr=g(ue),u(_t.$$.fragment,ue),ue.forEach(o),ja=g(t),ie=n(t,"DIV",{class:!0});var Kt=r(ie);u(bt.$$.fragment,Kt),xr=g(Kt),Ho=n(Kt,"P",{});var Ul=r(Ho);Nr=i(Ul,"Deletes a file in the given repo."),Ul.forEach(o),Fr=g(Kt),u(Pe.$$.fragment,Kt),Kt.forEach(o),Oa=g(t),Ae=n(t,"DIV",{class:!0});var Ya=r(Ae);u(vt.$$.fragment,Ya),Pr=g(Ya),Do=n(Ya,"P",{});var Ml=r(Do);jr=i(Ml,`Returns the repository name for a given model ID and optional
organization.`),Ml.forEach(o),Ya.forEach(o),La=g(t),He=n(t,"H2",{class:!0});var Za=r(He);je=n(Za,"A",{id:!0,class:!0,href:!0});var zl=r(je);qo=n(zl,"SPAN",{});var Rl=r(qo);u($t.$$.fragment,Rl),Rl.forEach(o),zl.forEach(o),Or=g(Za),xo=n(Za,"SPAN",{});var Vl=r(xo);Lr=i(Vl,"Hugging Face local storage"),Vl.forEach(o),Za.forEach(o),Ta=g(t),yt=n(t,"P",{});var Bi=r(yt);No=n(Bi,"CODE",{});var Sl=r(No);Tr=i(Sl,"huggingface_hub"),Sl.forEach(o),Ir=i(Bi,` stores the authentication information locally so that it may be re-used in subsequent
methods.`),Bi.forEach(o),Ia=g(t),Oe=n(t,"P",{});var en=r(Oe);Cr=i(en,"It does this using the "),Gt=n(en,"A",{href:!0});var Gl=r(Gt);Ur=i(Gl,"HfFolder"),Gl.forEach(o),Mr=i(en," utility, which saves data at the root of the user."),en.forEach(o),Ca=g(t),te=n(t,"DIV",{class:!0});var Se=r(te);u(Et.$$.fragment,Se),zr=g(Se),Le=n(Se,"DIV",{class:!0});var tn=r(Le);u(kt.$$.fragment,tn),Rr=g(tn),Fo=n(tn,"P",{});var Wl=r(Fo);Vr=i(Wl,"Deletes the token from storage. Does not fail if token does not exist."),Wl.forEach(o),tn.forEach(o),Sr=g(Se),Te=n(Se,"DIV",{class:!0});var on=r(Te);u(wt.$$.fragment,on),Gr=g(on),Po=n(on,"P",{});var Kl=r(Po);Wr=i(Kl,"Retrieves the token"),Kl.forEach(o),on.forEach(o),Kr=g(Se),Ie=n(Se,"DIV",{class:!0});var an=r(Ie);u(At.$$.fragment,an),Br=g(an),jo=n(an,"P",{});var Bl=r(jo);Qr=i(Bl,"Save token, creating folder as needed."),Bl.forEach(o),an.forEach(o),Se.forEach(o),Ua=g(t),De=n(t,"H2",{class:!0});var nn=r(De);Ce=n(nn,"A",{id:!0,class:!0,href:!0});var Ql=r(Ce);Oo=n(Ql,"SPAN",{});var Jl=r(Oo);u(Ht.$$.fragment,Jl),Jl.forEach(o),Ql.forEach(o),Jr=g(nn),Lo=n(nn,"SPAN",{});var Xl=r(Lo);Xr=i(Xl,"Filtering helpers"),Xl.forEach(o),nn.forEach(o),Ma=g(t),Ue=n(t,"P",{});var rn=r(Ue);Yr=i(rn,"Some helpers to filter repositories on the hub are available in the "),To=n(rn,"CODE",{});var Yl=r(To);Zr=i(Yl,"huggingface_hub"),Yl.forEach(o),es=i(rn," package."),rn.forEach(o),za=g(t),f=n(t,"DIV",{class:!0});var $=r(f);u(Dt.$$.fragment,$),ts=g($),Io=n($,"P",{});var Zl=r(Io);os=i(Zl,`A class that converts human-readable dataset search parameters into ones
compatible with
the REST API. For all parameters capitalization does not matter.`),Zl.forEach(o),as=g($),le=n($,"P",{});var Ge=r(le);ns=i(Ge,"benchmark ("),Co=n(Ge,"CODE",{});var eg=r(Co);rs=i(eg,"str"),eg.forEach(o),ss=i(Ge," or "),Uo=n(Ge,"CODE",{});var tg=r(Uo);is=i(tg,"List"),tg.forEach(o),ls=i(Ge,", "),Mo=n(Ge,"EM",{});var og=r(Mo);gs=i(og,"optional"),og.forEach(o),ps=i(Ge,`):
A string or list of strings that can be used to identify datasets on
the Hub by their official benchmark Example usage:`),Ge.forEach(o),cs=g($),u(qt.$$.fragment,$),hs=g($),oe=n($,"P",{});var me=r(oe);fs=i(me,"dataset_name ("),zo=n(me,"CODE",{});var ag=r(zo);ds=i(ag,"str"),ag.forEach(o),us=i(me,", "),Ro=n(me,"EM",{});var ng=r(Ro);ms=i(ng,"optional"),ng.forEach(o),_s=i(me,`):
A string or list of strings that can be used to identify datasets on
the Hub by its name, such as `),Vo=n(me,"CODE",{});var rg=r(Vo);bs=i(rg,"SQAC"),rg.forEach(o),vs=i(me," or "),So=n(me,"CODE",{});var sg=r(So);$s=i(sg,"wikineural"),sg.forEach(o),ys=i(me," Example usage:"),me.forEach(o),Es=g($),u(xt.$$.fragment,$),ks=g($),V=n($,"P",{});var ae=r(V);ws=i(ae,"language_creators ("),Go=n(ae,"CODE",{});var ig=r(Go);As=i(ig,"str"),ig.forEach(o),Hs=i(ae," or "),Wo=n(ae,"CODE",{});var lg=r(Wo);Ds=i(lg,"List"),lg.forEach(o),qs=i(ae,", "),Ko=n(ae,"EM",{});var gg=r(Ko);xs=i(gg,"optional"),gg.forEach(o),Ns=i(ae,`):
A string or list of strings that can be used to identify datasets on
the Hub with how the data was curated, such as `),Bo=n(ae,"CODE",{});var pg=r(Bo);Fs=i(pg,"crowdsourced"),pg.forEach(o),Ps=i(ae,` or
`),Qo=n(ae,"CODE",{});var cg=r(Qo);js=i(cg,"machine_generated"),cg.forEach(o),Os=i(ae," Example usage:"),ae.forEach(o),Ls=g($),u(Nt.$$.fragment,$),Ts=g($),ge=n($,"P",{});var We=r(ge);Is=i(We,"languages ("),Jo=n(We,"CODE",{});var hg=r(Jo);Cs=i(hg,"str"),hg.forEach(o),Us=i(We," or "),Xo=n(We,"CODE",{});var fg=r(Xo);Ms=i(fg,"List"),fg.forEach(o),zs=i(We,", "),Yo=n(We,"EM",{});var dg=r(Yo);Rs=i(dg,"optional"),dg.forEach(o),Vs=i(We,`):
A string or list of strings representing a two-character language to
filter datasets by on the Hub Example usage:`),We.forEach(o),Ss=g($),u(Ft.$$.fragment,$),Gs=g($),pe=n($,"P",{});var Ke=r(pe);Ws=i(Ke,"multilinguality ("),Zo=n(Ke,"CODE",{});var ug=r(Zo);Ks=i(ug,"str"),ug.forEach(o),Bs=i(Ke," or "),ea=n(Ke,"CODE",{});var mg=r(ea);Qs=i(mg,"List"),mg.forEach(o),Js=i(Ke,", "),ta=n(Ke,"EM",{});var _g=r(ta);Xs=i(_g,"optional"),_g.forEach(o),Ys=i(Ke,`):
A string or list of strings representing a filter for datasets that
contain multiple languages Example usage:`),Ke.forEach(o),Zs=g($),u(Pt.$$.fragment,$),ei=g($),S=n($,"P",{});var ne=r(S);ti=i(ne,"size_categories ("),oa=n(ne,"CODE",{});var bg=r(oa);oi=i(bg,"str"),bg.forEach(o),ai=i(ne," or "),aa=n(ne,"CODE",{});var vg=r(aa);ni=i(vg,"List"),vg.forEach(o),ri=i(ne,", "),na=n(ne,"EM",{});var $g=r(na);si=i($g,"optional"),$g.forEach(o),ii=i(ne,`):
A string or list of strings that can be used to identify datasets on
the Hub by the size of the dataset such as `),ra=n(ne,"CODE",{});var yg=r(ra);li=i(yg,"100K<n<1M"),yg.forEach(o),gi=i(ne," or "),sa=n(ne,"CODE",{});var Eg=r(sa);pi=i(Eg,"1M<n<10M"),Eg.forEach(o),ci=i(ne,`
Example usage:`),ne.forEach(o),hi=g($),u(jt.$$.fragment,$),fi=g($),G=n($,"P",{});var re=r(G);di=i(re,"task_categories ("),ia=n(re,"CODE",{});var kg=r(ia);ui=i(kg,"str"),kg.forEach(o),mi=i(re," or "),la=n(re,"CODE",{});var wg=r(la);_i=i(wg,"List"),wg.forEach(o),bi=i(re,", "),ga=n(re,"EM",{});var Ag=r(ga);vi=i(Ag,"optional"),Ag.forEach(o),$i=i(re,`):
A string or list of strings that can be used to identify datasets on
the Hub by the designed task, such as `),pa=n(re,"CODE",{});var Hg=r(pa);yi=i(Hg,"audio_classification"),Hg.forEach(o),Ei=i(re,` or
`),ca=n(re,"CODE",{});var Dg=r(ca);ki=i(Dg,"named_entity_recognition"),Dg.forEach(o),wi=i(re," Example usage:"),re.forEach(o),Ai=g($),u(Ot.$$.fragment,$),Hi=g($),W=n($,"P",{});var se=r(W);Di=i(se,"task_ids ("),ha=n(se,"CODE",{});var qg=r(ha);qi=i(qg,"str"),qg.forEach(o),xi=i(se," or "),fa=n(se,"CODE",{});var xg=r(fa);Ni=i(xg,"List"),xg.forEach(o),Fi=i(se,", "),da=n(se,"EM",{});var Ng=r(da);Pi=i(Ng,"optional"),Ng.forEach(o),ji=i(se,`):
A string or list of strings that can be used to identify datasets on
the Hub by the specific task such as `),ua=n(se,"CODE",{});var Fg=r(ua);Oi=i(Fg,"speech_emotion_recognition"),Fg.forEach(o),Li=i(se,` or
`),ma=n(se,"CODE",{});var Pg=r(ma);Ti=i(Pg,"paraphrase"),Pg.forEach(o),Ii=i(se," Example usage:"),se.forEach(o),Ci=g($),u(Lt.$$.fragment,$),$.forEach(o),Ra=g(t),qe=n(t,"DIV",{class:!0});var sn=r(qe);u(Tt.$$.fragment,sn),Ui=g(sn),_a=n(sn,"P",{});var jg=r(_a);Mi=i(jg,`A class that converts human-readable model search parameters into ones
compatible with
the REST API. For all parameters capitalization does not matter.`),jg.forEach(o),sn.forEach(o),this.h()},h(){p(w,"name","hf:doc:metadata"),p(w,"content",JSON.stringify(Vg)),p(y,"id","huggingface_hub.HfApi.login"),p(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(y,"href","#huggingface_hub.HfApi.login"),p(q,"class","relative group"),p(E,"class","docstring"),p(L,"class","docstring"),p(ve,"class","docstring"),p($e,"class","docstring"),p(Xe,"href","https://huggingface.co/settings/tokens"),p(Xe,"rel","nofollow"),p(U,"class","docstring"),p(Ze,"href","https://huggingface.co/settings/tokens"),p(Ze,"rel","nofollow"),p(X,"class","docstring"),p(ye,"class","docstring"),p(ot,"href","https://huggingface.co/settings/tokens"),p(ot,"rel","nofollow"),p(M,"class","docstring"),p(Ee,"class","docstring"),p(ke,"class","docstring"),p(we,"class","docstring"),p(it,"href","https://huggingface.co/settings/tokens"),p(it,"rel","nofollow"),p(Y,"class","docstring"),p(gt,"href","https://huggingface.co/settings/tokens"),p(gt,"rel","nofollow"),p(Z,"class","docstring"),p(ct,"href","https://huggingface.co/settings/tokens"),p(ct,"rel","nofollow"),p(ee,"class","docstring"),p(dt,"href","https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),p(dt,"rel","nofollow"),p(ut,"href","https://huggingface.co/settings/tokens"),p(ut,"rel","nofollow"),p(z,"class","docstring"),p(R,"class","docstring"),p(ie,"class","docstring"),p(Ae,"class","docstring"),p(je,"id","huggingface_hub.HfFolder"),p(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(je,"href","#huggingface_hub.HfFolder"),p(He,"class","relative group"),p(Gt,"href","/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.HfFolder"),p(Le,"class","docstring"),p(Te,"class","docstring"),p(Ie,"class","docstring"),p(te,"class","docstring"),p(Ce,"id","huggingface_hub.DatasetFilter"),p(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Ce,"href","#huggingface_hub.DatasetFilter"),p(De,"class","relative group"),p(f,"class","docstring"),p(qe,"class","docstring")},m(t,c){e(document.head,w),h(t,T,c),h(t,q,c),e(q,y),e(y,H),m(k,H,null),e(q,P),e(q,O),e(O,C),h(t,x,c),h(t,E,c),m(D,E,null),e(E,j),e(E,I),e(I,K),e(E,A),m(F,E,null),h(t,B,c),h(t,L,c),m(Q,L,null),e(L,_e),e(L,J),e(J,be),h(t,ce,c),h(t,ve,c),m(Be,ve,null),e(ve,ln),e(ve,Bt),e(Bt,gn),h(t,$a,c),h(t,$e,c),m(Qe,$e,null),e($e,pn),e($e,Qt),e(Qt,cn),h(t,ya,c),h(t,U,c),m(Je,U,null),e(U,hn),e(U,Jt),e(Jt,fn),e(U,dn),e(U,Xt),e(Xt,un),e(U,mn),e(U,Yt),e(Yt,_n),e(U,bn),e(U,Zt),e(Zt,Ct),e(Ct,vn),e(Ct,Xe),e(Xe,$n),h(t,Ea,c),h(t,X,c),m(Ye,X,null),e(X,yn),e(X,eo),e(eo,En),e(X,kn),e(X,to),e(to,wn),e(X,An),e(X,oo),e(oo,Ut),e(Ut,Hn),e(Ut,Ze),e(Ze,Dn),h(t,ka,c),h(t,ye,c),m(et,ye,null),e(ye,qn),e(ye,ao),e(ao,xn),h(t,wa,c),h(t,M,c),m(tt,M,null),e(M,Nn),e(M,no),e(no,Fn),e(M,Pn),e(M,ro),e(ro,jn),e(M,On),e(M,so),e(so,Ln),e(M,Tn),e(M,io),e(io,Mt),e(Mt,In),e(Mt,ot),e(ot,Cn),h(t,Aa,c),h(t,Ee,c),m(at,Ee,null),e(Ee,Un),e(Ee,lo),e(lo,Mn),h(t,Ha,c),h(t,ke,c),m(nt,ke,null),e(ke,zn),e(ke,go),e(go,Rn),h(t,Da,c),h(t,we,c),m(rt,we,null),e(we,Vn),e(we,po),e(po,Sn),h(t,qa,c),h(t,Y,c),m(st,Y,null),e(Y,Gn),e(Y,co),e(co,Wn),e(Y,Kn),e(Y,ho),e(ho,Bn),e(Y,Qn),e(Y,fo),e(fo,zt),e(zt,Jn),e(zt,it),e(it,Xn),h(t,xa,c),h(t,Z,c),m(lt,Z,null),e(Z,Yn),e(Z,uo),e(uo,Zn),e(Z,er),e(Z,mo),e(mo,tr),e(Z,or),e(Z,_o),e(_o,Rt),e(Rt,ar),e(Rt,gt),e(gt,nr),h(t,Na,c),h(t,ee,c),m(pt,ee,null),e(ee,rr),e(ee,bo),e(bo,sr),e(ee,ir),e(ee,vo),e(vo,lr),e(ee,gr),e(ee,$o),e($o,Vt),e(Vt,pr),e(Vt,ct),e(ct,cr),h(t,Fa,c),h(t,z,c),m(ht,z,null),e(z,hr),e(z,yo),e(yo,fr),e(z,dr),e(z,ft),e(ft,ur),e(ft,dt),e(dt,mr),e(ft,_r),e(z,br),e(z,Eo),e(Eo,vr),e(z,$r),e(z,ko),e(ko,St),e(St,yr),e(St,ut),e(ut,Er),h(t,Pa,c),h(t,R,c),m(mt,R,null),e(R,kr),e(R,wo),e(wo,wr),e(R,Ar),m(Fe,R,null),e(R,Hr),e(R,Ao),e(Ao,Dr),e(R,qr),m(_t,R,null),h(t,ja,c),h(t,ie,c),m(bt,ie,null),e(ie,xr),e(ie,Ho),e(Ho,Nr),e(ie,Fr),m(Pe,ie,null),h(t,Oa,c),h(t,Ae,c),m(vt,Ae,null),e(Ae,Pr),e(Ae,Do),e(Do,jr),h(t,La,c),h(t,He,c),e(He,je),e(je,qo),m($t,qo,null),e(He,Or),e(He,xo),e(xo,Lr),h(t,Ta,c),h(t,yt,c),e(yt,No),e(No,Tr),e(yt,Ir),h(t,Ia,c),h(t,Oe,c),e(Oe,Cr),e(Oe,Gt),e(Gt,Ur),e(Oe,Mr),h(t,Ca,c),h(t,te,c),m(Et,te,null),e(te,zr),e(te,Le),m(kt,Le,null),e(Le,Rr),e(Le,Fo),e(Fo,Vr),e(te,Sr),e(te,Te),m(wt,Te,null),e(Te,Gr),e(Te,Po),e(Po,Wr),e(te,Kr),e(te,Ie),m(At,Ie,null),e(Ie,Br),e(Ie,jo),e(jo,Qr),h(t,Ua,c),h(t,De,c),e(De,Ce),e(Ce,Oo),m(Ht,Oo,null),e(De,Jr),e(De,Lo),e(Lo,Xr),h(t,Ma,c),h(t,Ue,c),e(Ue,Yr),e(Ue,To),e(To,Zr),e(Ue,es),h(t,za,c),h(t,f,c),m(Dt,f,null),e(f,ts),e(f,Io),e(Io,os),e(f,as),e(f,le),e(le,ns),e(le,Co),e(Co,rs),e(le,ss),e(le,Uo),e(Uo,is),e(le,ls),e(le,Mo),e(Mo,gs),e(le,ps),e(f,cs),m(qt,f,null),e(f,hs),e(f,oe),e(oe,fs),e(oe,zo),e(zo,ds),e(oe,us),e(oe,Ro),e(Ro,ms),e(oe,_s),e(oe,Vo),e(Vo,bs),e(oe,vs),e(oe,So),e(So,$s),e(oe,ys),e(f,Es),m(xt,f,null),e(f,ks),e(f,V),e(V,ws),e(V,Go),e(Go,As),e(V,Hs),e(V,Wo),e(Wo,Ds),e(V,qs),e(V,Ko),e(Ko,xs),e(V,Ns),e(V,Bo),e(Bo,Fs),e(V,Ps),e(V,Qo),e(Qo,js),e(V,Os),e(f,Ls),m(Nt,f,null),e(f,Ts),e(f,ge),e(ge,Is),e(ge,Jo),e(Jo,Cs),e(ge,Us),e(ge,Xo),e(Xo,Ms),e(ge,zs),e(ge,Yo),e(Yo,Rs),e(ge,Vs),e(f,Ss),m(Ft,f,null),e(f,Gs),e(f,pe),e(pe,Ws),e(pe,Zo),e(Zo,Ks),e(pe,Bs),e(pe,ea),e(ea,Qs),e(pe,Js),e(pe,ta),e(ta,Xs),e(pe,Ys),e(f,Zs),m(Pt,f,null),e(f,ei),e(f,S),e(S,ti),e(S,oa),e(oa,oi),e(S,ai),e(S,aa),e(aa,ni),e(S,ri),e(S,na),e(na,si),e(S,ii),e(S,ra),e(ra,li),e(S,gi),e(S,sa),e(sa,pi),e(S,ci),e(f,hi),m(jt,f,null),e(f,fi),e(f,G),e(G,di),e(G,ia),e(ia,ui),e(G,mi),e(G,la),e(la,_i),e(G,bi),e(G,ga),e(ga,vi),e(G,$i),e(G,pa),e(pa,yi),e(G,Ei),e(G,ca),e(ca,ki),e(G,wi),e(f,Ai),m(Ot,f,null),e(f,Hi),e(f,W),e(W,Di),e(W,ha),e(ha,qi),e(W,xi),e(W,fa),e(fa,Ni),e(W,Fi),e(W,da),e(da,Pi),e(W,ji),e(W,ua),e(ua,Oi),e(W,Li),e(W,ma),e(ma,Ti),e(W,Ii),e(f,Ci),m(Lt,f,null),h(t,Ra,c),h(t,qe,c),m(Tt,qe,null),e(qe,Ui),e(qe,_a),e(_a,Mi),Va=!0},p(t,[c]){const It={};c&2&&(It.$$scope={dirty:c,ctx:t}),F.$set(It);const ba={};c&2&&(ba.$$scope={dirty:c,ctx:t}),Fe.$set(ba);const va={};c&2&&(va.$$scope={dirty:c,ctx:t}),Pe.$set(va)},i(t){Va||(_(k.$$.fragment,t),_(D.$$.fragment,t),_(F.$$.fragment,t),_(Q.$$.fragment,t),_(Be.$$.fragment,t),_(Qe.$$.fragment,t),_(Je.$$.fragment,t),_(Ye.$$.fragment,t),_(et.$$.fragment,t),_(tt.$$.fragment,t),_(at.$$.fragment,t),_(nt.$$.fragment,t),_(rt.$$.fragment,t),_(st.$$.fragment,t),_(lt.$$.fragment,t),_(pt.$$.fragment,t),_(ht.$$.fragment,t),_(mt.$$.fragment,t),_(Fe.$$.fragment,t),_(_t.$$.fragment,t),_(bt.$$.fragment,t),_(Pe.$$.fragment,t),_(vt.$$.fragment,t),_($t.$$.fragment,t),_(Et.$$.fragment,t),_(kt.$$.fragment,t),_(wt.$$.fragment,t),_(At.$$.fragment,t),_(Ht.$$.fragment,t),_(Dt.$$.fragment,t),_(qt.$$.fragment,t),_(xt.$$.fragment,t),_(Nt.$$.fragment,t),_(Ft.$$.fragment,t),_(Pt.$$.fragment,t),_(jt.$$.fragment,t),_(Ot.$$.fragment,t),_(Lt.$$.fragment,t),_(Tt.$$.fragment,t),Va=!0)},o(t){b(k.$$.fragment,t),b(D.$$.fragment,t),b(F.$$.fragment,t),b(Q.$$.fragment,t),b(Be.$$.fragment,t),b(Qe.$$.fragment,t),b(Je.$$.fragment,t),b(Ye.$$.fragment,t),b(et.$$.fragment,t),b(tt.$$.fragment,t),b(at.$$.fragment,t),b(nt.$$.fragment,t),b(rt.$$.fragment,t),b(st.$$.fragment,t),b(lt.$$.fragment,t),b(pt.$$.fragment,t),b(ht.$$.fragment,t),b(mt.$$.fragment,t),b(Fe.$$.fragment,t),b(_t.$$.fragment,t),b(bt.$$.fragment,t),b(Pe.$$.fragment,t),b(vt.$$.fragment,t),b($t.$$.fragment,t),b(Et.$$.fragment,t),b(kt.$$.fragment,t),b(wt.$$.fragment,t),b(At.$$.fragment,t),b(Ht.$$.fragment,t),b(Dt.$$.fragment,t),b(qt.$$.fragment,t),b(xt.$$.fragment,t),b(Nt.$$.fragment,t),b(Ft.$$.fragment,t),b(Pt.$$.fragment,t),b(jt.$$.fragment,t),b(Ot.$$.fragment,t),b(Lt.$$.fragment,t),b(Tt.$$.fragment,t),Va=!1},d(t){o(w),t&&o(T),t&&o(q),v(k),t&&o(x),t&&o(E),v(D),v(F),t&&o(B),t&&o(L),v(Q),t&&o(ce),t&&o(ve),v(Be),t&&o($a),t&&o($e),v(Qe),t&&o(ya),t&&o(U),v(Je),t&&o(Ea),t&&o(X),v(Ye),t&&o(ka),t&&o(ye),v(et),t&&o(wa),t&&o(M),v(tt),t&&o(Aa),t&&o(Ee),v(at),t&&o(Ha),t&&o(ke),v(nt),t&&o(Da),t&&o(we),v(rt),t&&o(qa),t&&o(Y),v(st),t&&o(xa),t&&o(Z),v(lt),t&&o(Na),t&&o(ee),v(pt),t&&o(Fa),t&&o(z),v(ht),t&&o(Pa),t&&o(R),v(mt),v(Fe),v(_t),t&&o(ja),t&&o(ie),v(bt),v(Pe),t&&o(Oa),t&&o(Ae),v(vt),t&&o(La),t&&o(He),v($t),t&&o(Ta),t&&o(yt),t&&o(Ia),t&&o(Oe),t&&o(Ca),t&&o(te),v(Et),v(kt),v(wt),v(At),t&&o(Ua),t&&o(De),v(Ht),t&&o(Ma),t&&o(Ue),t&&o(za),t&&o(f),v(Dt),v(qt),v(xt),v(Nt),v(Ft),v(Pt),v(jt),v(Ot),v(Lt),t&&o(Ra),t&&o(qe),v(Tt)}}}const Vg={local:"huggingface_hub.HfApi.login",sections:[{local:"huggingface_hub.HfFolder",title:"Hugging Face local storage"},{local:"huggingface_hub.DatasetFilter",title:"Filtering helpers"}],title:"Hugging Face Hub API"};function Sg(Ne){return Cg(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Jg extends Og{constructor(w){super();Lg(this,w,Sg,Rg,Tg,{})}}export{Jg as default,Vg as metadata};
