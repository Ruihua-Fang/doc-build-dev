import{S as Pp,i as Lp,s as Ip,e as a,k as l,w as d,t as s,M as Tp,c as n,d as o,m as p,a as r,x as u,h as i,b as h,F as e,g as c,y as m,q as _,o as b,B as v,v as Cp}from"../../chunks/vendor-7b1da053.js";import{T as Qi}from"../../chunks/Tip-41a95816.js";import{D as q}from"../../chunks/Docstring-f1352b16.js";import{C as Ae}from"../../chunks/CodeBlock-5f39b59e.js";import{I as Ji}from"../../chunks/IconCopyLink-d24e9a6f.js";function Up(He){let E,L,x,y,w,H,T,O;return{c(){E=a("p"),L=s("Raises the following errors:"),x=l(),y=a("ul"),w=a("li"),H=a("code"),T=s("requests.exceptions.HTTPError"),O=s(" if credentials are invalid")},l(N){E=n(N,"P",{});var D=r(E);L=i(D,"Raises the following errors:"),D.forEach(o),x=p(N),y=n(N,"UL",{});var A=r(y);w=n(A,"LI",{});var F=r(w);H=n(F,"CODE",{});var W=r(H);T=i(W,"requests.exceptions.HTTPError"),W.forEach(o),O=i(F," if credentials are invalid"),F.forEach(o),A.forEach(o)},m(N,D){c(N,E,D),e(E,L),c(N,x,D),c(N,y,D),e(y,w),e(w,H),e(H,T),e(w,O)},d(N){N&&o(E),N&&o(x),N&&o(y)}}}function zp(He){let E,L,x,y,w,H,T,O,N,D,A,F,W;return{c(){E=a("p"),L=s("Raises the following errors:"),x=l(),y=a("ul"),w=a("li"),H=a("code"),T=s("HTTPError"),O=s(" if the HuggingFace API returned an error"),N=l(),D=a("li"),A=a("code"),F=s("ValueError"),W=s(" if some parameter value is invalid")},l(k){E=n(k,"P",{});var j=r(E);L=i(j,"Raises the following errors:"),j.forEach(o),x=p(k),y=n(k,"UL",{});var K=r(y);w=n(K,"LI",{});var I=r(w);H=n(I,"CODE",{});var pe=r(H);T=i(pe,"HTTPError"),pe.forEach(o),O=i(I," if the HuggingFace API returned an error"),I.forEach(o),N=p(K),D=n(K,"LI",{});var P=r(D);A=n(P,"CODE",{});var B=r(A);F=i(B,"ValueError"),B.forEach(o),W=i(P," if some parameter value is invalid"),P.forEach(o),K.forEach(o)},m(k,j){c(k,E,j),e(E,L),c(k,x,j),c(k,y,j),e(y,w),e(w,H),e(H,T),e(w,O),e(y,N),e(y,D),e(D,A),e(A,F),e(D,W)},d(k){k&&o(E),k&&o(x),k&&o(y)}}}function Mp(He){let E,L,x,y,w,H,T,O,N,D,A,F,W;return{c(){E=a("p"),L=s("Raises the following errors:"),x=l(),y=a("ul"),w=a("li"),H=a("code"),T=s("HTTPError"),O=s(" if the HuggingFace API returned an error"),N=l(),D=a("li"),A=a("code"),F=s("ValueError"),W=s(" if some parameter value is invalid")},l(k){E=n(k,"P",{});var j=r(E);L=i(j,"Raises the following errors:"),j.forEach(o),x=p(k),y=n(k,"UL",{});var K=r(y);w=n(K,"LI",{});var I=r(w);H=n(I,"CODE",{});var pe=r(H);T=i(pe,"HTTPError"),pe.forEach(o),O=i(I," if the HuggingFace API returned an error"),I.forEach(o),N=p(K),D=n(K,"LI",{});var P=r(D);A=n(P,"CODE",{});var B=r(A);F=i(B,"ValueError"),B.forEach(o),W=i(P," if some parameter value is invalid"),P.forEach(o),K.forEach(o)},m(k,j){c(k,E,j),e(E,L),c(k,x,j),c(k,y,j),e(y,w),e(w,H),e(H,T),e(w,O),e(y,N),e(y,D),e(D,A),e(A,F),e(D,W)},d(k){k&&o(E),k&&o(x),k&&o(y)}}}function Rp(He){let E,L,x,y,w,H,T,O,N,D,A,F,W,k,j,K,I,pe,P,B,rn,St,sn,_a,ue,Ve,ln,Vt,pn,ba,me,Ge,gn,Gt,cn,va,C,We,hn,Wt,fn,dn,Kt,un,mn,Bt,_n,bn,Qt,Pt,vn,Ke,$n,$a,Q,Be,yn,Jt,En,kn,Xt,wn,An,Yt,Lt,Hn,Qe,Dn,ya,_e,Je,xn,Zt,qn,Ea,U,Xe,Nn,eo,Fn,On,to,jn,Pn,oo,Ln,In,ao,It,Tn,Ye,Cn,ka,be,Ze,Un,no,zn,wa,ve,et,Mn,ro,Rn,Aa,$e,tt,Sn,so,Vn,Ha,J,ot,Gn,io,Wn,Kn,lo,Bn,Qn,po,Tt,Jn,at,Xn,Da,X,nt,Yn,go,Zn,er,co,tr,or,ho,Ct,ar,rt,nr,xa,Y,st,rr,fo,sr,ir,uo,lr,pr,mo,Ut,gr,it,cr,qa,z,lt,hr,_o,fr,dr,pt,ur,gt,mr,_r,br,bo,vr,$r,vo,zt,yr,ct,Er,Na,M,ht,kr,$o,wr,Ar,De,Hr,yo,Dr,xr,ft,Fa,re,dt,qr,Eo,Nr,Fr,xe,Oa,ye,ut,Or,ko,jr,ja,Ee,qe,wo,mt,Pr,Ao,Lr,Pa,_t,Ho,Ir,Tr,La,Ne,Cr,Do,Ur,zr,Ia,Z,bt,Mr,Fe,vt,Rr,xo,Sr,Vr,Oe,$t,Gr,qo,Wr,Kr,je,yt,Br,No,Qr,Ta,ke,Pe,Fo,Et,Jr,Oo,Xr,Ca,Le,Yr,jo,Zr,es,Ua,f,kt,ts,Po,os,as,se,ns,Lo,rs,ss,Io,is,ls,To,ps,gs,cs,wt,hs,ee,fs,Co,ds,us,Uo,ms,_s,zo,bs,vs,Mo,$s,ys,Es,At,ks,R,ws,Ro,As,Hs,So,Ds,xs,Vo,qs,Ns,Go,Fs,Os,Wo,js,Ps,Ls,Ht,Is,ie,Ts,Ko,Cs,Us,Bo,zs,Ms,Qo,Rs,Ss,Vs,Dt,Gs,le,Ws,Jo,Ks,Bs,Xo,Qs,Js,Yo,Xs,Ys,Zs,xt,ei,S,ti,Zo,oi,ai,ea,ni,ri,ta,si,ii,oa,li,pi,aa,gi,ci,hi,qt,fi,V,di,na,ui,mi,ra,_i,bi,sa,vi,$i,ia,yi,Ei,la,ki,wi,Ai,Nt,Hi,G,Di,pa,xi,qi,ga,Ni,Fi,ca,Oi,ji,ha,Pi,Li,fa,Ii,Ti,Ci,Ft,za,we,Ot,Ui,da,zi,Ma;return H=new Ji({}),F=new q({props:{name:"huggingface_hub.HfApi.login",anchor:"huggingface_hub.HfApi.login",parameters:[{name:"username",val:": str"},{name:"password",val:": str"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L455",parametersDescription:[{anchor:"huggingface_hub.HfApi.login.username",description:`<strong>username</strong> (<code>str</code>) &#x2014;
The username of the account with which to login.`,name:"username"},{anchor:"huggingface_hub.HfApi.login.password",description:`<strong>password</strong> (<code>str</code>) &#x2014;
The password of the account with which to login.`,name:"password"}],returnDescription:`
<p>token if credentials are valid</p>
`,returnType:`
<p><code>str</code></p>
`}}),I=new Qi({props:{$$slots:{default:[Up]},$$scope:{ctx:He}}}),B=new q({props:{name:"huggingface_hub.HfApi.logout",anchor:"huggingface_hub.HfApi.logout",parameters:[{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L556",parametersDescription:[{anchor:"huggingface_hub.HfApi.logout.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Hugging Face token. Will default to the locally saved token if not provided.`,name:"token"}]}}),Ve=new q({props:{name:"huggingface_hub.HfApi.whoami",anchor:"huggingface_hub.HfApi.whoami",parameters:[{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L488",parametersDescription:[{anchor:"huggingface_hub.HfApi.whoami.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Hugging Face token. Will default to the locally saved token if not provided.`,name:"token"}]}}),Ge=new q({props:{name:"huggingface_hub.HfApi.list_models",anchor:"huggingface_hub.HfApi.list_models",parameters:[{name:"filter",val:": typing.Union[huggingface_hub.utils.endpoint_helpers.ModelFilter, str, typing.Iterable[str], NoneType] = None"},{name:"author",val:": typing.Optional[str] = None"},{name:"search",val:": typing.Optional[str] = None"},{name:"emissions_thresholds",val:": typing.Union[typing.Tuple[float, float], NoneType] = None"},{name:"sort",val:": typing.Union[typing.Literal['lastModified'], str, NoneType] = None"},{name:"direction",val:": typing.Optional[typing.Literal[-1]] = None"},{name:"limit",val:": typing.Optional[int] = None"},{name:"full",val:": typing.Optional[bool] = None"},{name:"cardData",val:": typing.Optional[bool] = None"},{name:"fetch_config",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L618",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_models.filter",description:`<strong>filter</strong> (<code>ModelFilter</code> or <code>str</code> or <code>Iterable</code>, <em>optional</em>) &#x2014;
A string or <code>ModelFilter</code> which can be used to identify models on the hub.
Example usage:`,name:"filter"}]}}),We=new q({props:{name:"huggingface_hub.HfApi.model_info",anchor:"huggingface_hub.HfApi.model_info",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"},{name:"securityStatus",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1013",parametersDescription:[{anchor:"huggingface_hub.HfApi.model_info.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.model_info.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The revision of the model repository from which to get the information.`,name:"revision"},{anchor:"huggingface_hub.HfApi.model_info.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.model_info.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Whether to set a timeout for the request to the hub.`,name:"timeout"},{anchor:"huggingface_hub.HfApi.model_info.securityStatus",description:`<strong>securityStatus</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to retrieve the security status from the model repository as well.`,name:"securityStatus"}],returnDescription:`
<p>The model repository information.</p>
`,returnType:`
<p><code>ModelInfo</code></p>
`}}),Be=new q({props:{name:"huggingface_hub.HfApi.list_repo_files",anchor:"huggingface_hub.HfApi.list_repo_files",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1062",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_repo_files.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.list_repo_files.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The revision of the model repository from which to get the information.`,name:"revision"},{anchor:"huggingface_hub.HfApi.list_repo_files.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading
to a dataset or space, <code>None</code> or <code>&quot;model&quot;</code> if
uploading to a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.list_repo_files.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.list_repo_files.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Whether to set a timeout for the request to the hub.`,name:"timeout"}],returnDescription:`
<p>the list of files in a given repository.</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),Je=new q({props:{name:"huggingface_hub.HfApi.list_datasets",anchor:"huggingface_hub.HfApi.list_datasets",parameters:[{name:"filter",val:": typing.Union[huggingface_hub.utils.endpoint_helpers.DatasetFilter, str, typing.Iterable[str], NoneType] = None"},{name:"author",val:": typing.Optional[str] = None"},{name:"search",val:": typing.Optional[str] = None"},{name:"sort",val:": typing.Union[typing.Literal['lastModified'], str, NoneType] = None"},{name:"direction",val:": typing.Optional[typing.Literal[-1]] = None"},{name:"limit",val:": typing.Optional[int] = None"},{name:"cardData",val:": typing.Optional[bool] = None"},{name:"full",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L833",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_datasets.filter",description:`<strong>filter</strong> (<code>DatasetFilter</code> or <code>str</code> or <code>Iterable</code>, <em>optional</em>) &#x2014;
A string or <code>DatasetFilter</code> which can be used to identify datasets on the hub.
Example usage:`,name:"filter"}]}}),Xe=new q({props:{name:"huggingface_hub.HfApi.dataset_info",anchor:"huggingface_hub.HfApi.dataset_info",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1107",parametersDescription:[{anchor:"huggingface_hub.HfApi.dataset_info.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.dataset_info.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The revision of the dataset repository from which to get the information.`,name:"revision"},{anchor:"huggingface_hub.HfApi.dataset_info.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.dataset_info.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Whether to set a timeout for the request to the hub.`,name:"timeout"}],returnDescription:`
<p>The dataset repository information.</p>
`,returnType:`
<p><code>DatasetInfo</code></p>
`}}),Ze=new q({props:{name:"huggingface_hub.HfApi.list_metrics",anchor:"huggingface_hub.HfApi.list_metrics",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L999",returnDescription:`
<p>a list of <code>MetricInfo</code> objects which.</p>
`,returnType:`
<p><code>List[MetricInfo]</code></p>
`}}),et=new q({props:{name:"huggingface_hub.HfApi.get_model_tags",anchor:"huggingface_hub.HfApi.get_model_tags",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L600"}}),tt=new q({props:{name:"huggingface_hub.HfApi.get_dataset_tags",anchor:"huggingface_hub.HfApi.get_dataset_tags",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L608"}}),ot=new q({props:{name:"huggingface_hub.HfApi.create_repo",anchor:"huggingface_hub.HfApi.create_repo",parameters:[{name:"repo_id",val:": str = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"exist_ok",val:": typing.Optional[bool] = False"},{name:"space_sdk",val:": typing.Optional[str] = None"},{name:"name",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1151",parametersDescription:[{anchor:"huggingface_hub.HfApi.create_repo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
Version added: 0.4.0

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.create_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.create_repo.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether the model repo should be private.`,name:"private"},{anchor:"huggingface_hub.HfApi.create_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading
to a dataset or space, <code>None</code> or <code>&quot;model&quot;</code> if
uploading to a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.create_repo.exist_ok",description:`<strong>exist_ok</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, do not raise an error if repo already exists.`,name:"exist_ok"},{anchor:"huggingface_hub.HfApi.create_repo.space_sdk",description:`<strong>space_sdk</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Choice of SDK to use if repo_type is &#x201C;space&#x201D;. Can be &#x201C;streamlit&#x201D;, &#x201C;gradio&#x201D;, or &#x201C;static&#x201D;.`,name:"space_sdk"}],returnDescription:`
<p>URL to the newly created repo.</p>
`,returnType:`
<p><code>str</code></p>
`}}),nt=new q({props:{name:"huggingface_hub.HfApi.delete_repo",anchor:"huggingface_hub.HfApi.delete_repo",parameters:[{name:"repo_id",val:": str = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"name",val:": str = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1281",parametersDescription:[{anchor:"huggingface_hub.HfApi.delete_repo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
Version added: 0.4.0

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.delete_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.delete_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading
to a dataset or space, <code>None</code> or <code>&quot;model&quot;</code> if
uploading to a model.`,name:"repo_type"}]}}),st=new q({props:{name:"huggingface_hub.HfApi.update_repo_visibility",anchor:"huggingface_hub.HfApi.update_repo_visibility",parameters:[{name:"repo_id",val:": str = None"},{name:"private",val:": bool = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1366",parametersDescription:[{anchor:"huggingface_hub.HfApi.update_repo_visibility.repo_id",description:`<strong>repo_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A namespace (user or an organization) and a repo name separated by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
Version added: 0.4.0

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.update_repo_visibility.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the model repo should be private.`,name:"private"},{anchor:"huggingface_hub.HfApi.update_repo_visibility.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.update_repo_visibility.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading
to a dataset or space, <code>None</code> or <code>&quot;model&quot;</code> if
uploading to a model. Default is <code>None</code>.`,name:"repo_type"}],returnDescription:`
<p>The HTTP response in json.</p>
`}}),lt=new q({props:{name:"huggingface_hub.HfApi.move_repo",anchor:"huggingface_hub.HfApi.move_repo",parameters:[{name:"from_id",val:": str"},{name:"to_id",val:": str"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1438",parametersDescription:[{anchor:"huggingface_hub.HfApi.move_repo.from_id",description:`<strong>from_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated by a <code>/</code>.
Original repository identifier.`,name:"from_id"},{anchor:"huggingface_hub.HfApi.move_repo.to_id",description:`<strong>to_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name separated by a <code>/</code>.
Final repository identifier.`,name:"to_id"},{anchor:"huggingface_hub.HfApi.move_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading
to a dataset or space, <code>None</code> or <code>&quot;model&quot;</code> if
uploading to a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.move_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"}]}}),ht=new q({props:{name:"huggingface_hub.HfApi.upload_file",anchor:"huggingface_hub.HfApi.upload_file",parameters:[{name:"path_or_fileobj",val:": typing.Union[str, bytes, typing.IO]"},{name:"path_in_repo",val:": str"},{name:"repo_id",val:": str"},{name:"token",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"identical_ok",val:": bool = True"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1502",parametersDescription:[{anchor:"huggingface_hub.HfApi.upload_file.path_or_fileobj",description:`<strong>path_or_fileobj</strong> (<code>str</code>, <code>bytes</code>, or <code>IO</code>) &#x2014;
Path to a file on the local machine or binary data stream / fileobj / buffer.`,name:"path_or_fileobj"},{anchor:"huggingface_hub.HfApi.upload_file.path_in_repo",description:`<strong>path_in_repo</strong> (<code>str</code>) &#x2014;
Relative filepath in the repo, for example: <code>&quot;checkpoints/1fec34a/weights.bin&quot;</code>`,name:"path_in_repo"},{anchor:"huggingface_hub.HfApi.upload_file.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The repository to which the file will be uploaded, for example: <code>&quot;username/custom_transformers&quot;</code>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.upload_file.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Authentication token, obtained with :function:<code>HfApi.login</code> method. Will default to the stored token.`,name:"token"},{anchor:"huggingface_hub.HfApi.upload_file.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.upload_file.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The git revision to commit from. Defaults to the <code>&quot;main&quot;</code> branch.`,name:"revision"},{anchor:"huggingface_hub.HfApi.upload_file.identical_ok",description:`<strong>identical_ok</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
When set to false, will raise an HTTPError when the file you&#x2019;re trying to upload already exists on the hub
and its content did not change.`,name:"identical_ok"}],returnDescription:`
<p>The URL to visualize the uploaded file on the hub</p>
`,returnType:`
<p><code>str</code></p>
`}}),De=new Qi({props:{$$slots:{default:[zp]},$$scope:{ctx:He}}}),ft=new Ae({props:{code:`with open("./local/filepath", "rb") as fobj:
    upload_file(
        path_or_fileobj=fileobj,
        path_in_repo="remote/file/path.h5",
        repo_id="username/my-dataset",
        repo_type="datasets",
        token="my_token",
   )

upload_file(
    path_or_fileobj=".\\\\local\\\\file\\\\path",
    path_in_repo="remote/file/path.h5",
    repo_id="username/my-model",
    token="my_token",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./local/filepath&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> fobj:
<span class="hljs-meta">... </span>    upload_file(
<span class="hljs-meta">... </span>        path_or_fileobj=fileobj,
<span class="hljs-meta">... </span>        path_in_repo=<span class="hljs-string">&quot;remote/file/path.h5&quot;</span>,
<span class="hljs-meta">... </span>        repo_id=<span class="hljs-string">&quot;username/my-dataset&quot;</span>,
<span class="hljs-meta">... </span>        repo_type=<span class="hljs-string">&quot;datasets&quot;</span>,
<span class="hljs-meta">... </span>        token=<span class="hljs-string">&quot;my_token&quot;</span>,
<span class="hljs-meta">... </span>   )
<span class="hljs-string">&quot;https://huggingface.co/datasets/username/my-dataset/blob/main/remote/file/path.h5&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>upload_file(
<span class="hljs-meta">... </span>    path_or_fileobj=<span class="hljs-string">&quot;.\\\\local\\\\file\\\\path&quot;</span>,
<span class="hljs-meta">... </span>    path_in_repo=<span class="hljs-string">&quot;remote/file/path.h5&quot;</span>,
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;username/my-model&quot;</span>,
<span class="hljs-meta">... </span>    token=<span class="hljs-string">&quot;my_token&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-string">&quot;https://huggingface.co/username/my-model/blob/main/remote/file/path.h5&quot;</span>`}}),dt=new q({props:{name:"huggingface_hub.HfApi.delete_file",anchor:"huggingface_hub.HfApi.delete_file",parameters:[{name:"path_in_repo",val:": str"},{name:"repo_id",val:": str"},{name:"token",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1630",parametersDescription:[{anchor:"huggingface_hub.HfApi.delete_file.path_in_repo",description:`<strong>path_in_repo</strong> (<code>str</code>) &#x2014;
Relative filepath in the repo, for example: <code>&quot;checkpoints/1fec34a/weights.bin&quot;</code>`,name:"path_in_repo"},{anchor:"huggingface_hub.HfApi.delete_file.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The repository from which the file will be deleted, for example: <code>&quot;username/custom_transformers&quot;</code>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.delete_file.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Authentication token, obtained with :function:<code>HfApi.login</code> method. Will default to the stored token.`,name:"token"},{anchor:"huggingface_hub.HfApi.delete_file.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if the file is in a dataset or space, <code>None</code> or <code>&quot;model&quot;</code> if in a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.delete_file.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The git revision to commit from. Defaults to the <code>&quot;main&quot;</code> branch.`,name:"revision"}]}}),xe=new Qi({props:{$$slots:{default:[Mp]},$$scope:{ctx:He}}}),ut=new q({props:{name:"huggingface_hub.HfApi.get_full_repo_name",anchor:"huggingface_hub.HfApi.get_full_repo_name",parameters:[{name:"model_id",val:": str"},{name:"organization",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1681",parametersDescription:[{anchor:"huggingface_hub.HfApi.get_full_repo_name.model_id",description:`<strong>model_id</strong> (<code>str</code>) &#x2014;
The name of the model.`,name:"model_id"},{anchor:"huggingface_hub.HfApi.get_full_repo_name.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
If passed, the repository name will be in the organization namespace instead of the
user namespace.`,name:"organization"},{anchor:"huggingface_hub.HfApi.get_full_repo_name.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The Hugging Face authentication token`,name:"token"}],returnDescription:`
<p>The repository name in the user\u2019s namespace ({username}/{model_id}) if no
organization is passed, and under the organization namespace ({organization}/{model_id})
otherwise.</p>
`,returnType:`
<p><code>str</code></p>
`}}),mt=new Ji({}),bt=new q({props:{name:"class huggingface_hub.HfFolder",anchor:"huggingface_hub.HfFolder",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1714"}}),vt=new q({props:{name:"delete_token",anchor:"huggingface_hub.HfFolder.delete_token",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1745"}}),$t=new q({props:{name:"get_token",anchor:"huggingface_hub.HfFolder.get_token",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1730",returnDescription:`
<p>The token, <code>None</code> if it doesn\u2019t exist.</p>
`,returnType:`
<p><code>str</code> or <code>None</code></p>
`}}),yt=new q({props:{name:"save_token",anchor:"huggingface_hub.HfFolder.save_token",parameters:[{name:"token",val:""}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/hf_api.py#L1717",parametersDescription:[{anchor:"huggingface_hub.HfFolder.save_token.token",description:`<strong>token</strong> (<code>str</code>) &#x2014;
The token to save to the <a href="/docs/huggingface_hub/pr_799/en/package_reference/hf_api#huggingface_hub.HfFolder">HfFolder</a>`,name:"token"}]}}),Et=new Ji({}),kt=new q({props:{name:"class huggingface_hub.DatasetFilter",anchor:"huggingface_hub.DatasetFilter",parameters:[{name:"author",val:": str = None"},{name:"benchmark",val:": typing.Union[str, typing.List[str]] = None"},{name:"dataset_name",val:": str = None"},{name:"language_creators",val:": typing.Union[str, typing.List[str]] = None"},{name:"languages",val:": typing.Union[str, typing.List[str]] = None"},{name:"multilinguality",val:": typing.Union[str, typing.List[str]] = None"},{name:"size_categories",val:": typing.Union[str, typing.List[str]] = None"},{name:"task_categories",val:": typing.Union[str, typing.List[str]] = None"},{name:"task_ids",val:": typing.Union[str, typing.List[str]] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/utils/endpoint_helpers.py#L67",parametersDescription:[{anchor:"huggingface_hub.DatasetFilter.author",description:`<strong>author</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A string or list of strings that can be used to identify datasets on the Hub
by the original uploader (author or organization), such as <code>facebook</code> or <code>huggingface</code>
Example usage:`,name:"author"}]}}),wt=new Ae({props:{code:`from huggingface_hub import DatasetFilter
new_filter = DatasetFilter(benchmark="raft")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter
<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(benchmark=<span class="hljs-string">&quot;raft&quot;</span>)`}}),At=new Ae({props:{code:`from huggingface_hub import DatasetFilter
new_filter = DatasetFilter(dataset_name="wikineural")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter
<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(dataset_name=<span class="hljs-string">&quot;wikineural&quot;</span>)`}}),Ht=new Ae({props:{code:`from huggingface_hub import DatasetFilter
new_filter = DatasetFilter(language_creator="crowdsourced")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter
<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(language_creator=<span class="hljs-string">&quot;crowdsourced&quot;</span>)`}}),Dt=new Ae({props:{code:`from huggingface_hub import DatasetFilter
new_filter = DatasetFilter(language="en")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter
<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(language=<span class="hljs-string">&quot;en&quot;</span>)`}}),xt=new Ae({props:{code:`from huggingface_hub import DatasetFilter
new_filter = DatasetFilter(multilinguality="yes")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter
<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(multilinguality=<span class="hljs-string">&quot;yes&quot;</span>)`}}),qt=new Ae({props:{code:`from huggingface_hub import DatasetFilter
new_filter = DatasetFilter(size_categories="100K<n<1M")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter
<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(size_categories=<span class="hljs-string">&quot;100K&lt;n&lt;1M&quot;</span>)`}}),Nt=new Ae({props:{code:`from huggingface_hub import DatasetFilter
new_filter = DatasetFilter(author="facebook")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter
<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(author=<span class="hljs-string">&quot;facebook&quot;</span>)`}}),Ft=new Ae({props:{code:`from huggingface_hub import DatasetFilter
new_filter = DatasetFilter(task_ids="paraphrase")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> DatasetFilter
<span class="hljs-meta">&gt;&gt;&gt; </span>new_filter = DatasetFilter(task_ids=<span class="hljs-string">&quot;paraphrase&quot;</span>)`}}),Ot=new q({props:{name:"class huggingface_hub.ModelFilter",anchor:"huggingface_hub.ModelFilter",parameters:[{name:"author",val:": str = None"},{name:"library",val:": typing.Union[str, typing.List[str]] = None"},{name:"language",val:": typing.Union[str, typing.List[str]] = None"},{name:"model_name",val:": str = None"},{name:"task",val:": typing.Union[str, typing.List[str]] = None"},{name:"trained_dataset",val:": typing.Union[str, typing.List[str]] = None"},{name:"tags",val:": typing.Union[str, typing.List[str]] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_799/src/huggingface_hub/utils/endpoint_helpers.py#L172",parametersDescription:[{anchor:"huggingface_hub.ModelFilter.author",description:`<strong>author</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A string that can be used to identify models on the Hub
by the original uploader (author or organization), such as <code>facebook</code> or <code>huggingface</code>
Example usage:`,name:"author"}]}}),{c(){E=a("meta"),L=l(),x=a("h1"),y=a("a"),w=a("span"),d(H.$$.fragment),T=l(),O=a("span"),N=s("Hugging Face Hub API"),D=l(),A=a("div"),d(F.$$.fragment),W=l(),k=a("p"),j=s("Call HF API to sign in a user and get a token if credentials are valid."),K=l(),d(I.$$.fragment),pe=l(),P=a("div"),d(B.$$.fragment),rn=l(),St=a("p"),sn=s("Call HF API to log out."),_a=l(),ue=a("div"),d(Ve.$$.fragment),ln=l(),Vt=a("p"),pn=s("Call HF API to know \u201Cwhoami\u201D."),ba=l(),me=a("div"),d(Ge.$$.fragment),gn=l(),Gt=a("p"),cn=s("Get the public list of all the models on huggingface.co"),va=l(),C=a("div"),d(We.$$.fragment),hn=l(),Wt=a("p"),fn=s("Get info on one specific model on huggingface.co"),dn=l(),Kt=a("p"),un=s("Model can be private if you pass an acceptable token or are logged in."),mn=l(),Bt=a("p"),_n=s("References:"),bn=l(),Qt=a("ul"),Pt=a("li"),vn=s("[1] "),Ke=a("a"),$n=s("https://huggingface.co/settings/tokens"),$a=l(),Q=a("div"),d(Be.$$.fragment),yn=l(),Jt=a("p"),En=s("Get the list of files in a given repo."),kn=l(),Xt=a("p"),wn=s("References:"),An=l(),Yt=a("ul"),Lt=a("li"),Hn=s("[1] "),Qe=a("a"),Dn=s("https://huggingface.co/settings/tokens"),ya=l(),_e=a("div"),d(Je.$$.fragment),xn=l(),Zt=a("p"),qn=s("Get the public list of all the datasets on huggingface.co"),Ea=l(),U=a("div"),d(Xe.$$.fragment),Nn=l(),eo=a("p"),Fn=s("Get info on one specific dataset on huggingface.co"),On=l(),to=a("p"),jn=s("Dataset can be private if you pass an acceptable token."),Pn=l(),oo=a("p"),Ln=s("References:"),In=l(),ao=a("ul"),It=a("li"),Tn=s("[1] "),Ye=a("a"),Cn=s("https://huggingface.co/settings/tokens"),ka=l(),be=a("div"),d(Ze.$$.fragment),Un=l(),no=a("p"),zn=s("Get the public list of all the metrics on huggingface.co"),wa=l(),ve=a("div"),d(et.$$.fragment),Mn=l(),ro=a("p"),Rn=s("Gets all valid model tags as a nested namespace object"),Aa=l(),$e=a("div"),d(tt.$$.fragment),Sn=l(),so=a("p"),Vn=s("Gets all valid dataset tags as a nested namespace object."),Ha=l(),J=a("div"),d(ot.$$.fragment),Gn=l(),io=a("p"),Wn=s("Create an empty repo on the HuggingFace Hub."),Kn=l(),lo=a("p"),Bn=s("References:"),Qn=l(),po=a("ul"),Tt=a("li"),Jn=s("[1] "),at=a("a"),Xn=s("https://huggingface.co/settings/tokens"),Da=l(),X=a("div"),d(nt.$$.fragment),Yn=l(),go=a("p"),Zn=s("Delete a repo from the HuggingFace Hub. CAUTION: this is irreversible."),er=l(),co=a("p"),tr=s("References:"),or=l(),ho=a("ul"),Ct=a("li"),ar=s("[1] "),rt=a("a"),nr=s("https://huggingface.co/settings/tokens"),xa=l(),Y=a("div"),d(st.$$.fragment),rr=l(),fo=a("p"),sr=s("Update the visibility setting of a repository."),ir=l(),uo=a("p"),lr=s("References:"),pr=l(),mo=a("ul"),Ut=a("li"),gr=s("[1] "),it=a("a"),cr=s("https://huggingface.co/settings/tokens"),qa=l(),z=a("div"),d(lt.$$.fragment),hr=l(),_o=a("p"),fr=s("Moving a repository from namespace1/repo_name1 to namespace2/repo_name2"),dr=l(),pt=a("p"),ur=s(`Note there are certain limitations. For more information about moving repositories, please
see `),gt=a("a"),mr=s("https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),_r=s("."),br=l(),bo=a("p"),vr=s("References:"),$r=l(),vo=a("ul"),zt=a("li"),yr=s("[1] "),ct=a("a"),Er=s("https://huggingface.co/settings/tokens"),Na=l(),M=a("div"),d(ht.$$.fragment),kr=l(),$o=a("p"),wr=s(`Upload a local file (up to 5GB) to the given repo. The upload is done through a HTTP post request, and
doesn\u2019t require git or git-lfs to be installed.`),Ar=l(),d(De.$$.fragment),Hr=l(),yo=a("p"),Dr=s("Examples:"),xr=l(),d(ft.$$.fragment),Fa=l(),re=a("div"),d(dt.$$.fragment),qr=l(),Eo=a("p"),Nr=s("Deletes a file in the given repo."),Fr=l(),d(xe.$$.fragment),Oa=l(),ye=a("div"),d(ut.$$.fragment),Or=l(),ko=a("p"),jr=s("Returns the repository name for a given model ID and optional organization."),ja=l(),Ee=a("h2"),qe=a("a"),wo=a("span"),d(mt.$$.fragment),Pr=l(),Ao=a("span"),Lr=s("Hugging Face local storage"),Pa=l(),_t=a("p"),Ho=a("code"),Ir=s("huggingface_hub"),Tr=s(` stores the authentication information locally so that it may be re-used in subsequent
methods.`),La=l(),Ne=a("p"),Cr=s("It does this using the "),Do=a("code"),Ur=s("HfFolder"),zr=s(" utility, which saves data at the root of the user."),Ia=l(),Z=a("div"),d(bt.$$.fragment),Mr=l(),Fe=a("div"),d(vt.$$.fragment),Rr=l(),xo=a("p"),Sr=s("Deletes the token from storage. Does not fail if token does not exist."),Vr=l(),Oe=a("div"),d($t.$$.fragment),Gr=l(),qo=a("p"),Wr=s("Retrieves the token"),Kr=l(),je=a("div"),d(yt.$$.fragment),Br=l(),No=a("p"),Qr=s("Save token, creating folder as needed."),Ta=l(),ke=a("h2"),Pe=a("a"),Fo=a("span"),d(Et.$$.fragment),Jr=l(),Oo=a("span"),Xr=s("Filtering helpers"),Ca=l(),Le=a("p"),Yr=s("Some helpers to filter repositories on the hub are available in the "),jo=a("code"),Zr=s("huggingface_hub"),es=s(" repository."),Ua=l(),f=a("div"),d(kt.$$.fragment),ts=l(),Po=a("p"),os=s(`A class that converts human-readable dataset search parameters into ones compatible with
the REST API. For all parameters capitalization does not matter.`),as=l(),se=a("p"),ns=s("benchmark ("),Lo=a("code"),rs=s("str"),ss=s(" or "),Io=a("code"),is=s("List"),ls=s(", "),To=a("em"),ps=s("optional"),gs=s(`):
A string or list of strings that can be used to identify datasets on the Hub by their official benchmark
Example usage:`),cs=l(),d(wt.$$.fragment),hs=l(),ee=a("p"),fs=s("dataset_name ("),Co=a("code"),ds=s("str"),us=s(", "),Uo=a("em"),ms=s("optional"),_s=s(`):
A string or list of strings that can be used to identify datasets on the Hub by its name,
such as `),zo=a("code"),bs=s("SQAC"),vs=s(" or "),Mo=a("code"),$s=s("wikineural"),ys=s(`
Example usage:`),Es=l(),d(At.$$.fragment),ks=l(),R=a("p"),ws=s("language_creators ("),Ro=a("code"),As=s("str"),Hs=s(" or "),So=a("code"),Ds=s("List"),xs=s(", "),Vo=a("em"),qs=s("optional"),Ns=s(`):
A string or list of strings that can be used to identify datasets on the Hub
with how the data was curated, such as `),Go=a("code"),Fs=s("crowdsourced"),Os=s(" or "),Wo=a("code"),js=s("machine_generated"),Ps=s(`
Example usage:`),Ls=l(),d(Ht.$$.fragment),Is=l(),ie=a("p"),Ts=s("languages ("),Ko=a("code"),Cs=s("str"),Us=s(" or "),Bo=a("code"),zs=s("List"),Ms=s(", "),Qo=a("em"),Rs=s("optional"),Ss=s(`):
A string or list of strings representing a two-character language to filter datasets by on the Hub
Example usage:`),Vs=l(),d(Dt.$$.fragment),Gs=l(),le=a("p"),Ws=s("multilinguality ("),Jo=a("code"),Ks=s("str"),Bs=s(" or "),Xo=a("code"),Qs=s("List"),Js=s(", "),Yo=a("em"),Xs=s("optional"),Ys=s(`):
A string or list of strings representing a filter for datasets that contain multiple languages
Example usage:`),Zs=l(),d(xt.$$.fragment),ei=l(),S=a("p"),ti=s("size_categories ("),Zo=a("code"),oi=s("str"),ai=s(" or "),ea=a("code"),ni=s("List"),ri=s(", "),ta=a("em"),si=s("optional"),ii=s(`):
A string or list of strings that can be used to identify datasets on the Hub
by the size of the dataset such as `),oa=a("code"),li=s("100K<n<1M"),pi=s(" or "),aa=a("code"),gi=s("1M<n<10M"),ci=s(`
Example usage:`),hi=l(),d(qt.$$.fragment),fi=l(),V=a("p"),di=s("task_categories ("),na=a("code"),ui=s("str"),mi=s(" or "),ra=a("code"),_i=s("List"),bi=s(", "),sa=a("em"),vi=s("optional"),$i=s(`):
A string or list of strings that can be used to identify datasets on the Hub
by the designed task, such as `),ia=a("code"),yi=s("audio_classification"),Ei=s(" or "),la=a("code"),ki=s("named_entity_recognition"),wi=s(`
Example usage:`),Ai=l(),d(Nt.$$.fragment),Hi=l(),G=a("p"),Di=s("task_ids ("),pa=a("code"),xi=s("str"),qi=s(" or "),ga=a("code"),Ni=s("List"),Fi=s(", "),ca=a("em"),Oi=s("optional"),ji=s(`):
A string or list of strings that can be used to identify datasets on the Hub
by the specific task such as `),ha=a("code"),Pi=s("speech_emotion_recognition"),Li=s(" or "),fa=a("code"),Ii=s("paraphrase"),Ti=s(`
Example usage:`),Ci=l(),d(Ft.$$.fragment),za=l(),we=a("div"),d(Ot.$$.fragment),Ui=l(),da=a("p"),zi=s(`A class that converts human-readable model search parameters into ones compatible with
the REST API. For all parameters capitalization does not matter.`),this.h()},l(t){const g=Tp('[data-svelte="svelte-1phssyn"]',document.head);E=n(g,"META",{name:!0,content:!0}),g.forEach(o),L=p(t),x=n(t,"H1",{class:!0});var jt=r(x);y=n(jt,"A",{id:!0,class:!0,href:!0});var ua=r(y);w=n(ua,"SPAN",{});var ma=r(w);u(H.$$.fragment,ma),ma.forEach(o),ua.forEach(o),T=p(jt),O=n(jt,"SPAN",{});var Xi=r(O);N=i(Xi,"Hugging Face Hub API"),Xi.forEach(o),jt.forEach(o),D=p(t),A=n(t,"DIV",{class:!0});var Mt=r(A);u(F.$$.fragment,Mt),W=p(Mt),k=n(Mt,"P",{});var Yi=r(k);j=i(Yi,"Call HF API to sign in a user and get a token if credentials are valid."),Yi.forEach(o),K=p(Mt),u(I.$$.fragment,Mt),Mt.forEach(o),pe=p(t),P=n(t,"DIV",{class:!0});var Ra=r(P);u(B.$$.fragment,Ra),rn=p(Ra),St=n(Ra,"P",{});var Zi=r(St);sn=i(Zi,"Call HF API to log out."),Zi.forEach(o),Ra.forEach(o),_a=p(t),ue=n(t,"DIV",{class:!0});var Sa=r(ue);u(Ve.$$.fragment,Sa),ln=p(Sa),Vt=n(Sa,"P",{});var el=r(Vt);pn=i(el,"Call HF API to know \u201Cwhoami\u201D."),el.forEach(o),Sa.forEach(o),ba=p(t),me=n(t,"DIV",{class:!0});var Va=r(me);u(Ge.$$.fragment,Va),gn=p(Va),Gt=n(Va,"P",{});var tl=r(Gt);cn=i(tl,"Get the public list of all the models on huggingface.co"),tl.forEach(o),Va.forEach(o),va=p(t),C=n(t,"DIV",{class:!0});var ge=r(C);u(We.$$.fragment,ge),hn=p(ge),Wt=n(ge,"P",{});var ol=r(Wt);fn=i(ol,"Get info on one specific model on huggingface.co"),ol.forEach(o),dn=p(ge),Kt=n(ge,"P",{});var al=r(Kt);un=i(al,"Model can be private if you pass an acceptable token or are logged in."),al.forEach(o),mn=p(ge),Bt=n(ge,"P",{});var nl=r(Bt);_n=i(nl,"References:"),nl.forEach(o),bn=p(ge),Qt=n(ge,"UL",{});var rl=r(Qt);Pt=n(rl,"LI",{});var Mi=r(Pt);vn=i(Mi,"[1] "),Ke=n(Mi,"A",{href:!0,rel:!0});var sl=r(Ke);$n=i(sl,"https://huggingface.co/settings/tokens"),sl.forEach(o),Mi.forEach(o),rl.forEach(o),ge.forEach(o),$a=p(t),Q=n(t,"DIV",{class:!0});var Ie=r(Q);u(Be.$$.fragment,Ie),yn=p(Ie),Jt=n(Ie,"P",{});var il=r(Jt);En=i(il,"Get the list of files in a given repo."),il.forEach(o),kn=p(Ie),Xt=n(Ie,"P",{});var ll=r(Xt);wn=i(ll,"References:"),ll.forEach(o),An=p(Ie),Yt=n(Ie,"UL",{});var pl=r(Yt);Lt=n(pl,"LI",{});var Ri=r(Lt);Hn=i(Ri,"[1] "),Qe=n(Ri,"A",{href:!0,rel:!0});var gl=r(Qe);Dn=i(gl,"https://huggingface.co/settings/tokens"),gl.forEach(o),Ri.forEach(o),pl.forEach(o),Ie.forEach(o),ya=p(t),_e=n(t,"DIV",{class:!0});var Ga=r(_e);u(Je.$$.fragment,Ga),xn=p(Ga),Zt=n(Ga,"P",{});var cl=r(Zt);qn=i(cl,"Get the public list of all the datasets on huggingface.co"),cl.forEach(o),Ga.forEach(o),Ea=p(t),U=n(t,"DIV",{class:!0});var ce=r(U);u(Xe.$$.fragment,ce),Nn=p(ce),eo=n(ce,"P",{});var hl=r(eo);Fn=i(hl,"Get info on one specific dataset on huggingface.co"),hl.forEach(o),On=p(ce),to=n(ce,"P",{});var fl=r(to);jn=i(fl,"Dataset can be private if you pass an acceptable token."),fl.forEach(o),Pn=p(ce),oo=n(ce,"P",{});var dl=r(oo);Ln=i(dl,"References:"),dl.forEach(o),In=p(ce),ao=n(ce,"UL",{});var ul=r(ao);It=n(ul,"LI",{});var Si=r(It);Tn=i(Si,"[1] "),Ye=n(Si,"A",{href:!0,rel:!0});var ml=r(Ye);Cn=i(ml,"https://huggingface.co/settings/tokens"),ml.forEach(o),Si.forEach(o),ul.forEach(o),ce.forEach(o),ka=p(t),be=n(t,"DIV",{class:!0});var Wa=r(be);u(Ze.$$.fragment,Wa),Un=p(Wa),no=n(Wa,"P",{});var _l=r(no);zn=i(_l,"Get the public list of all the metrics on huggingface.co"),_l.forEach(o),Wa.forEach(o),wa=p(t),ve=n(t,"DIV",{class:!0});var Ka=r(ve);u(et.$$.fragment,Ka),Mn=p(Ka),ro=n(Ka,"P",{});var bl=r(ro);Rn=i(bl,"Gets all valid model tags as a nested namespace object"),bl.forEach(o),Ka.forEach(o),Aa=p(t),$e=n(t,"DIV",{class:!0});var Ba=r($e);u(tt.$$.fragment,Ba),Sn=p(Ba),so=n(Ba,"P",{});var vl=r(so);Vn=i(vl,"Gets all valid dataset tags as a nested namespace object."),vl.forEach(o),Ba.forEach(o),Ha=p(t),J=n(t,"DIV",{class:!0});var Te=r(J);u(ot.$$.fragment,Te),Gn=p(Te),io=n(Te,"P",{});var $l=r(io);Wn=i($l,"Create an empty repo on the HuggingFace Hub."),$l.forEach(o),Kn=p(Te),lo=n(Te,"P",{});var yl=r(lo);Bn=i(yl,"References:"),yl.forEach(o),Qn=p(Te),po=n(Te,"UL",{});var El=r(po);Tt=n(El,"LI",{});var Vi=r(Tt);Jn=i(Vi,"[1] "),at=n(Vi,"A",{href:!0,rel:!0});var kl=r(at);Xn=i(kl,"https://huggingface.co/settings/tokens"),kl.forEach(o),Vi.forEach(o),El.forEach(o),Te.forEach(o),Da=p(t),X=n(t,"DIV",{class:!0});var Ce=r(X);u(nt.$$.fragment,Ce),Yn=p(Ce),go=n(Ce,"P",{});var wl=r(go);Zn=i(wl,"Delete a repo from the HuggingFace Hub. CAUTION: this is irreversible."),wl.forEach(o),er=p(Ce),co=n(Ce,"P",{});var Al=r(co);tr=i(Al,"References:"),Al.forEach(o),or=p(Ce),ho=n(Ce,"UL",{});var Hl=r(ho);Ct=n(Hl,"LI",{});var Gi=r(Ct);ar=i(Gi,"[1] "),rt=n(Gi,"A",{href:!0,rel:!0});var Dl=r(rt);nr=i(Dl,"https://huggingface.co/settings/tokens"),Dl.forEach(o),Gi.forEach(o),Hl.forEach(o),Ce.forEach(o),xa=p(t),Y=n(t,"DIV",{class:!0});var Ue=r(Y);u(st.$$.fragment,Ue),rr=p(Ue),fo=n(Ue,"P",{});var xl=r(fo);sr=i(xl,"Update the visibility setting of a repository."),xl.forEach(o),ir=p(Ue),uo=n(Ue,"P",{});var ql=r(uo);lr=i(ql,"References:"),ql.forEach(o),pr=p(Ue),mo=n(Ue,"UL",{});var Nl=r(mo);Ut=n(Nl,"LI",{});var Wi=r(Ut);gr=i(Wi,"[1] "),it=n(Wi,"A",{href:!0,rel:!0});var Fl=r(it);cr=i(Fl,"https://huggingface.co/settings/tokens"),Fl.forEach(o),Wi.forEach(o),Nl.forEach(o),Ue.forEach(o),qa=p(t),z=n(t,"DIV",{class:!0});var he=r(z);u(lt.$$.fragment,he),hr=p(he),_o=n(he,"P",{});var Ol=r(_o);fr=i(Ol,"Moving a repository from namespace1/repo_name1 to namespace2/repo_name2"),Ol.forEach(o),dr=p(he),pt=n(he,"P",{});var Qa=r(pt);ur=i(Qa,`Note there are certain limitations. For more information about moving repositories, please
see `),gt=n(Qa,"A",{href:!0,rel:!0});var jl=r(gt);mr=i(jl,"https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),jl.forEach(o),_r=i(Qa,"."),Qa.forEach(o),br=p(he),bo=n(he,"P",{});var Pl=r(bo);vr=i(Pl,"References:"),Pl.forEach(o),$r=p(he),vo=n(he,"UL",{});var Ll=r(vo);zt=n(Ll,"LI",{});var Ki=r(zt);yr=i(Ki,"[1] "),ct=n(Ki,"A",{href:!0,rel:!0});var Il=r(ct);Er=i(Il,"https://huggingface.co/settings/tokens"),Il.forEach(o),Ki.forEach(o),Ll.forEach(o),he.forEach(o),Na=p(t),M=n(t,"DIV",{class:!0});var fe=r(M);u(ht.$$.fragment,fe),kr=p(fe),$o=n(fe,"P",{});var Tl=r($o);wr=i(Tl,`Upload a local file (up to 5GB) to the given repo. The upload is done through a HTTP post request, and
doesn\u2019t require git or git-lfs to be installed.`),Tl.forEach(o),Ar=p(fe),u(De.$$.fragment,fe),Hr=p(fe),yo=n(fe,"P",{});var Cl=r(yo);Dr=i(Cl,"Examples:"),Cl.forEach(o),xr=p(fe),u(ft.$$.fragment,fe),fe.forEach(o),Fa=p(t),re=n(t,"DIV",{class:!0});var Rt=r(re);u(dt.$$.fragment,Rt),qr=p(Rt),Eo=n(Rt,"P",{});var Ul=r(Eo);Nr=i(Ul,"Deletes a file in the given repo."),Ul.forEach(o),Fr=p(Rt),u(xe.$$.fragment,Rt),Rt.forEach(o),Oa=p(t),ye=n(t,"DIV",{class:!0});var Ja=r(ye);u(ut.$$.fragment,Ja),Or=p(Ja),ko=n(Ja,"P",{});var zl=r(ko);jr=i(zl,"Returns the repository name for a given model ID and optional organization."),zl.forEach(o),Ja.forEach(o),ja=p(t),Ee=n(t,"H2",{class:!0});var Xa=r(Ee);qe=n(Xa,"A",{id:!0,class:!0,href:!0});var Ml=r(qe);wo=n(Ml,"SPAN",{});var Rl=r(wo);u(mt.$$.fragment,Rl),Rl.forEach(o),Ml.forEach(o),Pr=p(Xa),Ao=n(Xa,"SPAN",{});var Sl=r(Ao);Lr=i(Sl,"Hugging Face local storage"),Sl.forEach(o),Xa.forEach(o),Pa=p(t),_t=n(t,"P",{});var Bi=r(_t);Ho=n(Bi,"CODE",{});var Vl=r(Ho);Ir=i(Vl,"huggingface_hub"),Vl.forEach(o),Tr=i(Bi,` stores the authentication information locally so that it may be re-used in subsequent
methods.`),Bi.forEach(o),La=p(t),Ne=n(t,"P",{});var Ya=r(Ne);Cr=i(Ya,"It does this using the "),Do=n(Ya,"CODE",{});var Gl=r(Do);Ur=i(Gl,"HfFolder"),Gl.forEach(o),zr=i(Ya," utility, which saves data at the root of the user."),Ya.forEach(o),Ia=p(t),Z=n(t,"DIV",{class:!0});var ze=r(Z);u(bt.$$.fragment,ze),Mr=p(ze),Fe=n(ze,"DIV",{class:!0});var Za=r(Fe);u(vt.$$.fragment,Za),Rr=p(Za),xo=n(Za,"P",{});var Wl=r(xo);Sr=i(Wl,"Deletes the token from storage. Does not fail if token does not exist."),Wl.forEach(o),Za.forEach(o),Vr=p(ze),Oe=n(ze,"DIV",{class:!0});var en=r(Oe);u($t.$$.fragment,en),Gr=p(en),qo=n(en,"P",{});var Kl=r(qo);Wr=i(Kl,"Retrieves the token"),Kl.forEach(o),en.forEach(o),Kr=p(ze),je=n(ze,"DIV",{class:!0});var tn=r(je);u(yt.$$.fragment,tn),Br=p(tn),No=n(tn,"P",{});var Bl=r(No);Qr=i(Bl,"Save token, creating folder as needed."),Bl.forEach(o),tn.forEach(o),ze.forEach(o),Ta=p(t),ke=n(t,"H2",{class:!0});var on=r(ke);Pe=n(on,"A",{id:!0,class:!0,href:!0});var Ql=r(Pe);Fo=n(Ql,"SPAN",{});var Jl=r(Fo);u(Et.$$.fragment,Jl),Jl.forEach(o),Ql.forEach(o),Jr=p(on),Oo=n(on,"SPAN",{});var Xl=r(Oo);Xr=i(Xl,"Filtering helpers"),Xl.forEach(o),on.forEach(o),Ca=p(t),Le=n(t,"P",{});var an=r(Le);Yr=i(an,"Some helpers to filter repositories on the hub are available in the "),jo=n(an,"CODE",{});var Yl=r(jo);Zr=i(Yl,"huggingface_hub"),Yl.forEach(o),es=i(an," repository."),an.forEach(o),Ua=p(t),f=n(t,"DIV",{class:!0});var $=r(f);u(kt.$$.fragment,$),ts=p($),Po=n($,"P",{});var Zl=r(Po);os=i(Zl,`A class that converts human-readable dataset search parameters into ones compatible with
the REST API. For all parameters capitalization does not matter.`),Zl.forEach(o),as=p($),se=n($,"P",{});var Me=r(se);ns=i(Me,"benchmark ("),Lo=n(Me,"CODE",{});var ep=r(Lo);rs=i(ep,"str"),ep.forEach(o),ss=i(Me," or "),Io=n(Me,"CODE",{});var tp=r(Io);is=i(tp,"List"),tp.forEach(o),ls=i(Me,", "),To=n(Me,"EM",{});var op=r(To);ps=i(op,"optional"),op.forEach(o),gs=i(Me,`):
A string or list of strings that can be used to identify datasets on the Hub by their official benchmark
Example usage:`),Me.forEach(o),cs=p($),u(wt.$$.fragment,$),hs=p($),ee=n($,"P",{});var de=r(ee);fs=i(de,"dataset_name ("),Co=n(de,"CODE",{});var ap=r(Co);ds=i(ap,"str"),ap.forEach(o),us=i(de,", "),Uo=n(de,"EM",{});var np=r(Uo);ms=i(np,"optional"),np.forEach(o),_s=i(de,`):
A string or list of strings that can be used to identify datasets on the Hub by its name,
such as `),zo=n(de,"CODE",{});var rp=r(zo);bs=i(rp,"SQAC"),rp.forEach(o),vs=i(de," or "),Mo=n(de,"CODE",{});var sp=r(Mo);$s=i(sp,"wikineural"),sp.forEach(o),ys=i(de,`
Example usage:`),de.forEach(o),Es=p($),u(At.$$.fragment,$),ks=p($),R=n($,"P",{});var te=r(R);ws=i(te,"language_creators ("),Ro=n(te,"CODE",{});var ip=r(Ro);As=i(ip,"str"),ip.forEach(o),Hs=i(te," or "),So=n(te,"CODE",{});var lp=r(So);Ds=i(lp,"List"),lp.forEach(o),xs=i(te,", "),Vo=n(te,"EM",{});var pp=r(Vo);qs=i(pp,"optional"),pp.forEach(o),Ns=i(te,`):
A string or list of strings that can be used to identify datasets on the Hub
with how the data was curated, such as `),Go=n(te,"CODE",{});var gp=r(Go);Fs=i(gp,"crowdsourced"),gp.forEach(o),Os=i(te," or "),Wo=n(te,"CODE",{});var cp=r(Wo);js=i(cp,"machine_generated"),cp.forEach(o),Ps=i(te,`
Example usage:`),te.forEach(o),Ls=p($),u(Ht.$$.fragment,$),Is=p($),ie=n($,"P",{});var Re=r(ie);Ts=i(Re,"languages ("),Ko=n(Re,"CODE",{});var hp=r(Ko);Cs=i(hp,"str"),hp.forEach(o),Us=i(Re," or "),Bo=n(Re,"CODE",{});var fp=r(Bo);zs=i(fp,"List"),fp.forEach(o),Ms=i(Re,", "),Qo=n(Re,"EM",{});var dp=r(Qo);Rs=i(dp,"optional"),dp.forEach(o),Ss=i(Re,`):
A string or list of strings representing a two-character language to filter datasets by on the Hub
Example usage:`),Re.forEach(o),Vs=p($),u(Dt.$$.fragment,$),Gs=p($),le=n($,"P",{});var Se=r(le);Ws=i(Se,"multilinguality ("),Jo=n(Se,"CODE",{});var up=r(Jo);Ks=i(up,"str"),up.forEach(o),Bs=i(Se," or "),Xo=n(Se,"CODE",{});var mp=r(Xo);Qs=i(mp,"List"),mp.forEach(o),Js=i(Se,", "),Yo=n(Se,"EM",{});var _p=r(Yo);Xs=i(_p,"optional"),_p.forEach(o),Ys=i(Se,`):
A string or list of strings representing a filter for datasets that contain multiple languages
Example usage:`),Se.forEach(o),Zs=p($),u(xt.$$.fragment,$),ei=p($),S=n($,"P",{});var oe=r(S);ti=i(oe,"size_categories ("),Zo=n(oe,"CODE",{});var bp=r(Zo);oi=i(bp,"str"),bp.forEach(o),ai=i(oe," or "),ea=n(oe,"CODE",{});var vp=r(ea);ni=i(vp,"List"),vp.forEach(o),ri=i(oe,", "),ta=n(oe,"EM",{});var $p=r(ta);si=i($p,"optional"),$p.forEach(o),ii=i(oe,`):
A string or list of strings that can be used to identify datasets on the Hub
by the size of the dataset such as `),oa=n(oe,"CODE",{});var yp=r(oa);li=i(yp,"100K<n<1M"),yp.forEach(o),pi=i(oe," or "),aa=n(oe,"CODE",{});var Ep=r(aa);gi=i(Ep,"1M<n<10M"),Ep.forEach(o),ci=i(oe,`
Example usage:`),oe.forEach(o),hi=p($),u(qt.$$.fragment,$),fi=p($),V=n($,"P",{});var ae=r(V);di=i(ae,"task_categories ("),na=n(ae,"CODE",{});var kp=r(na);ui=i(kp,"str"),kp.forEach(o),mi=i(ae," or "),ra=n(ae,"CODE",{});var wp=r(ra);_i=i(wp,"List"),wp.forEach(o),bi=i(ae,", "),sa=n(ae,"EM",{});var Ap=r(sa);vi=i(Ap,"optional"),Ap.forEach(o),$i=i(ae,`):
A string or list of strings that can be used to identify datasets on the Hub
by the designed task, such as `),ia=n(ae,"CODE",{});var Hp=r(ia);yi=i(Hp,"audio_classification"),Hp.forEach(o),Ei=i(ae," or "),la=n(ae,"CODE",{});var Dp=r(la);ki=i(Dp,"named_entity_recognition"),Dp.forEach(o),wi=i(ae,`
Example usage:`),ae.forEach(o),Ai=p($),u(Nt.$$.fragment,$),Hi=p($),G=n($,"P",{});var ne=r(G);Di=i(ne,"task_ids ("),pa=n(ne,"CODE",{});var xp=r(pa);xi=i(xp,"str"),xp.forEach(o),qi=i(ne," or "),ga=n(ne,"CODE",{});var qp=r(ga);Ni=i(qp,"List"),qp.forEach(o),Fi=i(ne,", "),ca=n(ne,"EM",{});var Np=r(ca);Oi=i(Np,"optional"),Np.forEach(o),ji=i(ne,`):
A string or list of strings that can be used to identify datasets on the Hub
by the specific task such as `),ha=n(ne,"CODE",{});var Fp=r(ha);Pi=i(Fp,"speech_emotion_recognition"),Fp.forEach(o),Li=i(ne," or "),fa=n(ne,"CODE",{});var Op=r(fa);Ii=i(Op,"paraphrase"),Op.forEach(o),Ti=i(ne,`
Example usage:`),ne.forEach(o),Ci=p($),u(Ft.$$.fragment,$),$.forEach(o),za=p(t),we=n(t,"DIV",{class:!0});var nn=r(we);u(Ot.$$.fragment,nn),Ui=p(nn),da=n(nn,"P",{});var jp=r(da);zi=i(jp,`A class that converts human-readable model search parameters into ones compatible with
the REST API. For all parameters capitalization does not matter.`),jp.forEach(o),nn.forEach(o),this.h()},h(){h(E,"name","hf:doc:metadata"),h(E,"content",JSON.stringify(Sp)),h(y,"id","huggingface_hub.HfApi.login"),h(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(y,"href","#huggingface_hub.HfApi.login"),h(x,"class","relative group"),h(A,"class","docstring"),h(P,"class","docstring"),h(ue,"class","docstring"),h(me,"class","docstring"),h(Ke,"href","https://huggingface.co/settings/tokens"),h(Ke,"rel","nofollow"),h(C,"class","docstring"),h(Qe,"href","https://huggingface.co/settings/tokens"),h(Qe,"rel","nofollow"),h(Q,"class","docstring"),h(_e,"class","docstring"),h(Ye,"href","https://huggingface.co/settings/tokens"),h(Ye,"rel","nofollow"),h(U,"class","docstring"),h(be,"class","docstring"),h(ve,"class","docstring"),h($e,"class","docstring"),h(at,"href","https://huggingface.co/settings/tokens"),h(at,"rel","nofollow"),h(J,"class","docstring"),h(rt,"href","https://huggingface.co/settings/tokens"),h(rt,"rel","nofollow"),h(X,"class","docstring"),h(it,"href","https://huggingface.co/settings/tokens"),h(it,"rel","nofollow"),h(Y,"class","docstring"),h(gt,"href","https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),h(gt,"rel","nofollow"),h(ct,"href","https://huggingface.co/settings/tokens"),h(ct,"rel","nofollow"),h(z,"class","docstring"),h(M,"class","docstring"),h(re,"class","docstring"),h(ye,"class","docstring"),h(qe,"id","huggingface_hub.HfFolder"),h(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(qe,"href","#huggingface_hub.HfFolder"),h(Ee,"class","relative group"),h(Fe,"class","docstring"),h(Oe,"class","docstring"),h(je,"class","docstring"),h(Z,"class","docstring"),h(Pe,"id","huggingface_hub.DatasetFilter"),h(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Pe,"href","#huggingface_hub.DatasetFilter"),h(ke,"class","relative group"),h(f,"class","docstring"),h(we,"class","docstring")},m(t,g){e(document.head,E),c(t,L,g),c(t,x,g),e(x,y),e(y,w),m(H,w,null),e(x,T),e(x,O),e(O,N),c(t,D,g),c(t,A,g),m(F,A,null),e(A,W),e(A,k),e(k,j),e(A,K),m(I,A,null),c(t,pe,g),c(t,P,g),m(B,P,null),e(P,rn),e(P,St),e(St,sn),c(t,_a,g),c(t,ue,g),m(Ve,ue,null),e(ue,ln),e(ue,Vt),e(Vt,pn),c(t,ba,g),c(t,me,g),m(Ge,me,null),e(me,gn),e(me,Gt),e(Gt,cn),c(t,va,g),c(t,C,g),m(We,C,null),e(C,hn),e(C,Wt),e(Wt,fn),e(C,dn),e(C,Kt),e(Kt,un),e(C,mn),e(C,Bt),e(Bt,_n),e(C,bn),e(C,Qt),e(Qt,Pt),e(Pt,vn),e(Pt,Ke),e(Ke,$n),c(t,$a,g),c(t,Q,g),m(Be,Q,null),e(Q,yn),e(Q,Jt),e(Jt,En),e(Q,kn),e(Q,Xt),e(Xt,wn),e(Q,An),e(Q,Yt),e(Yt,Lt),e(Lt,Hn),e(Lt,Qe),e(Qe,Dn),c(t,ya,g),c(t,_e,g),m(Je,_e,null),e(_e,xn),e(_e,Zt),e(Zt,qn),c(t,Ea,g),c(t,U,g),m(Xe,U,null),e(U,Nn),e(U,eo),e(eo,Fn),e(U,On),e(U,to),e(to,jn),e(U,Pn),e(U,oo),e(oo,Ln),e(U,In),e(U,ao),e(ao,It),e(It,Tn),e(It,Ye),e(Ye,Cn),c(t,ka,g),c(t,be,g),m(Ze,be,null),e(be,Un),e(be,no),e(no,zn),c(t,wa,g),c(t,ve,g),m(et,ve,null),e(ve,Mn),e(ve,ro),e(ro,Rn),c(t,Aa,g),c(t,$e,g),m(tt,$e,null),e($e,Sn),e($e,so),e(so,Vn),c(t,Ha,g),c(t,J,g),m(ot,J,null),e(J,Gn),e(J,io),e(io,Wn),e(J,Kn),e(J,lo),e(lo,Bn),e(J,Qn),e(J,po),e(po,Tt),e(Tt,Jn),e(Tt,at),e(at,Xn),c(t,Da,g),c(t,X,g),m(nt,X,null),e(X,Yn),e(X,go),e(go,Zn),e(X,er),e(X,co),e(co,tr),e(X,or),e(X,ho),e(ho,Ct),e(Ct,ar),e(Ct,rt),e(rt,nr),c(t,xa,g),c(t,Y,g),m(st,Y,null),e(Y,rr),e(Y,fo),e(fo,sr),e(Y,ir),e(Y,uo),e(uo,lr),e(Y,pr),e(Y,mo),e(mo,Ut),e(Ut,gr),e(Ut,it),e(it,cr),c(t,qa,g),c(t,z,g),m(lt,z,null),e(z,hr),e(z,_o),e(_o,fr),e(z,dr),e(z,pt),e(pt,ur),e(pt,gt),e(gt,mr),e(pt,_r),e(z,br),e(z,bo),e(bo,vr),e(z,$r),e(z,vo),e(vo,zt),e(zt,yr),e(zt,ct),e(ct,Er),c(t,Na,g),c(t,M,g),m(ht,M,null),e(M,kr),e(M,$o),e($o,wr),e(M,Ar),m(De,M,null),e(M,Hr),e(M,yo),e(yo,Dr),e(M,xr),m(ft,M,null),c(t,Fa,g),c(t,re,g),m(dt,re,null),e(re,qr),e(re,Eo),e(Eo,Nr),e(re,Fr),m(xe,re,null),c(t,Oa,g),c(t,ye,g),m(ut,ye,null),e(ye,Or),e(ye,ko),e(ko,jr),c(t,ja,g),c(t,Ee,g),e(Ee,qe),e(qe,wo),m(mt,wo,null),e(Ee,Pr),e(Ee,Ao),e(Ao,Lr),c(t,Pa,g),c(t,_t,g),e(_t,Ho),e(Ho,Ir),e(_t,Tr),c(t,La,g),c(t,Ne,g),e(Ne,Cr),e(Ne,Do),e(Do,Ur),e(Ne,zr),c(t,Ia,g),c(t,Z,g),m(bt,Z,null),e(Z,Mr),e(Z,Fe),m(vt,Fe,null),e(Fe,Rr),e(Fe,xo),e(xo,Sr),e(Z,Vr),e(Z,Oe),m($t,Oe,null),e(Oe,Gr),e(Oe,qo),e(qo,Wr),e(Z,Kr),e(Z,je),m(yt,je,null),e(je,Br),e(je,No),e(No,Qr),c(t,Ta,g),c(t,ke,g),e(ke,Pe),e(Pe,Fo),m(Et,Fo,null),e(ke,Jr),e(ke,Oo),e(Oo,Xr),c(t,Ca,g),c(t,Le,g),e(Le,Yr),e(Le,jo),e(jo,Zr),e(Le,es),c(t,Ua,g),c(t,f,g),m(kt,f,null),e(f,ts),e(f,Po),e(Po,os),e(f,as),e(f,se),e(se,ns),e(se,Lo),e(Lo,rs),e(se,ss),e(se,Io),e(Io,is),e(se,ls),e(se,To),e(To,ps),e(se,gs),e(f,cs),m(wt,f,null),e(f,hs),e(f,ee),e(ee,fs),e(ee,Co),e(Co,ds),e(ee,us),e(ee,Uo),e(Uo,ms),e(ee,_s),e(ee,zo),e(zo,bs),e(ee,vs),e(ee,Mo),e(Mo,$s),e(ee,ys),e(f,Es),m(At,f,null),e(f,ks),e(f,R),e(R,ws),e(R,Ro),e(Ro,As),e(R,Hs),e(R,So),e(So,Ds),e(R,xs),e(R,Vo),e(Vo,qs),e(R,Ns),e(R,Go),e(Go,Fs),e(R,Os),e(R,Wo),e(Wo,js),e(R,Ps),e(f,Ls),m(Ht,f,null),e(f,Is),e(f,ie),e(ie,Ts),e(ie,Ko),e(Ko,Cs),e(ie,Us),e(ie,Bo),e(Bo,zs),e(ie,Ms),e(ie,Qo),e(Qo,Rs),e(ie,Ss),e(f,Vs),m(Dt,f,null),e(f,Gs),e(f,le),e(le,Ws),e(le,Jo),e(Jo,Ks),e(le,Bs),e(le,Xo),e(Xo,Qs),e(le,Js),e(le,Yo),e(Yo,Xs),e(le,Ys),e(f,Zs),m(xt,f,null),e(f,ei),e(f,S),e(S,ti),e(S,Zo),e(Zo,oi),e(S,ai),e(S,ea),e(ea,ni),e(S,ri),e(S,ta),e(ta,si),e(S,ii),e(S,oa),e(oa,li),e(S,pi),e(S,aa),e(aa,gi),e(S,ci),e(f,hi),m(qt,f,null),e(f,fi),e(f,V),e(V,di),e(V,na),e(na,ui),e(V,mi),e(V,ra),e(ra,_i),e(V,bi),e(V,sa),e(sa,vi),e(V,$i),e(V,ia),e(ia,yi),e(V,Ei),e(V,la),e(la,ki),e(V,wi),e(f,Ai),m(Nt,f,null),e(f,Hi),e(f,G),e(G,Di),e(G,pa),e(pa,xi),e(G,qi),e(G,ga),e(ga,Ni),e(G,Fi),e(G,ca),e(ca,Oi),e(G,ji),e(G,ha),e(ha,Pi),e(G,Li),e(G,fa),e(fa,Ii),e(G,Ti),e(f,Ci),m(Ft,f,null),c(t,za,g),c(t,we,g),m(Ot,we,null),e(we,Ui),e(we,da),e(da,zi),Ma=!0},p(t,[g]){const jt={};g&2&&(jt.$$scope={dirty:g,ctx:t}),I.$set(jt);const ua={};g&2&&(ua.$$scope={dirty:g,ctx:t}),De.$set(ua);const ma={};g&2&&(ma.$$scope={dirty:g,ctx:t}),xe.$set(ma)},i(t){Ma||(_(H.$$.fragment,t),_(F.$$.fragment,t),_(I.$$.fragment,t),_(B.$$.fragment,t),_(Ve.$$.fragment,t),_(Ge.$$.fragment,t),_(We.$$.fragment,t),_(Be.$$.fragment,t),_(Je.$$.fragment,t),_(Xe.$$.fragment,t),_(Ze.$$.fragment,t),_(et.$$.fragment,t),_(tt.$$.fragment,t),_(ot.$$.fragment,t),_(nt.$$.fragment,t),_(st.$$.fragment,t),_(lt.$$.fragment,t),_(ht.$$.fragment,t),_(De.$$.fragment,t),_(ft.$$.fragment,t),_(dt.$$.fragment,t),_(xe.$$.fragment,t),_(ut.$$.fragment,t),_(mt.$$.fragment,t),_(bt.$$.fragment,t),_(vt.$$.fragment,t),_($t.$$.fragment,t),_(yt.$$.fragment,t),_(Et.$$.fragment,t),_(kt.$$.fragment,t),_(wt.$$.fragment,t),_(At.$$.fragment,t),_(Ht.$$.fragment,t),_(Dt.$$.fragment,t),_(xt.$$.fragment,t),_(qt.$$.fragment,t),_(Nt.$$.fragment,t),_(Ft.$$.fragment,t),_(Ot.$$.fragment,t),Ma=!0)},o(t){b(H.$$.fragment,t),b(F.$$.fragment,t),b(I.$$.fragment,t),b(B.$$.fragment,t),b(Ve.$$.fragment,t),b(Ge.$$.fragment,t),b(We.$$.fragment,t),b(Be.$$.fragment,t),b(Je.$$.fragment,t),b(Xe.$$.fragment,t),b(Ze.$$.fragment,t),b(et.$$.fragment,t),b(tt.$$.fragment,t),b(ot.$$.fragment,t),b(nt.$$.fragment,t),b(st.$$.fragment,t),b(lt.$$.fragment,t),b(ht.$$.fragment,t),b(De.$$.fragment,t),b(ft.$$.fragment,t),b(dt.$$.fragment,t),b(xe.$$.fragment,t),b(ut.$$.fragment,t),b(mt.$$.fragment,t),b(bt.$$.fragment,t),b(vt.$$.fragment,t),b($t.$$.fragment,t),b(yt.$$.fragment,t),b(Et.$$.fragment,t),b(kt.$$.fragment,t),b(wt.$$.fragment,t),b(At.$$.fragment,t),b(Ht.$$.fragment,t),b(Dt.$$.fragment,t),b(xt.$$.fragment,t),b(qt.$$.fragment,t),b(Nt.$$.fragment,t),b(Ft.$$.fragment,t),b(Ot.$$.fragment,t),Ma=!1},d(t){o(E),t&&o(L),t&&o(x),v(H),t&&o(D),t&&o(A),v(F),v(I),t&&o(pe),t&&o(P),v(B),t&&o(_a),t&&o(ue),v(Ve),t&&o(ba),t&&o(me),v(Ge),t&&o(va),t&&o(C),v(We),t&&o($a),t&&o(Q),v(Be),t&&o(ya),t&&o(_e),v(Je),t&&o(Ea),t&&o(U),v(Xe),t&&o(ka),t&&o(be),v(Ze),t&&o(wa),t&&o(ve),v(et),t&&o(Aa),t&&o($e),v(tt),t&&o(Ha),t&&o(J),v(ot),t&&o(Da),t&&o(X),v(nt),t&&o(xa),t&&o(Y),v(st),t&&o(qa),t&&o(z),v(lt),t&&o(Na),t&&o(M),v(ht),v(De),v(ft),t&&o(Fa),t&&o(re),v(dt),v(xe),t&&o(Oa),t&&o(ye),v(ut),t&&o(ja),t&&o(Ee),v(mt),t&&o(Pa),t&&o(_t),t&&o(La),t&&o(Ne),t&&o(Ia),t&&o(Z),v(bt),v(vt),v($t),v(yt),t&&o(Ta),t&&o(ke),v(Et),t&&o(Ca),t&&o(Le),t&&o(Ua),t&&o(f),v(kt),v(wt),v(At),v(Ht),v(Dt),v(xt),v(qt),v(Nt),v(Ft),t&&o(za),t&&o(we),v(Ot)}}}const Sp={local:"huggingface_hub.HfApi.login",sections:[{local:"huggingface_hub.HfFolder",title:"Hugging Face local storage"},{local:"huggingface_hub.DatasetFilter",title:"Filtering helpers"}],title:"Hugging Face Hub API"};function Vp(He){return Cp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Jp extends Pp{constructor(E){super();Lp(this,E,Vp,Rp,Ip,{})}}export{Jp as default,Sp as metadata};
