import{S as Da,i as Oa,s as Pa,e as n,k as r,w as h,t as g,M as Ia,c as a,d as o,m as s,a as i,x as u,h as c,b as f,F as t,g as p,y as d,q as m,o as _,B as b,v as ja}from"../../chunks/vendor-7b1da053.js";import{T as Ta}from"../../chunks/Tip-41a95816.js";import{D as v}from"../../chunks/Docstring-f1352b16.js";import{C as Fa}from"../../chunks/CodeBlock-5f39b59e.js";import{I as xa}from"../../chunks/IconCopyLink-d24e9a6f.js";function La(Et){let $,K,H,y,O,w,se,L;return{c(){$=n("p"),K=g("Raises the following errors:"),H=r(),y=n("ul"),O=n("li"),w=n("code"),se=g("requests.exceptions.HTTPError"),L=g(" if credentials are invalid")},l(k){$=a(k,"P",{});var P=i($);K=c(P,"Raises the following errors:"),P.forEach(o),H=s(k),y=a(k,"UL",{});var A=i(y);O=a(A,"LI",{});var I=i(O);w=a(I,"CODE",{});var Ve=i(w);se=c(Ve,"requests.exceptions.HTTPError"),Ve.forEach(o),L=c(I," if credentials are invalid"),I.forEach(o),A.forEach(o)},m(k,P){p(k,$,P),t($,K),p(k,H,P),p(k,y,P),t(y,O),t(O,w),t(w,se),t(O,L)},d(k){k&&o($),k&&o(H),k&&o(y)}}}function Va(Et){let $,K,H,y,O,w,se,L,k,P,A,I,Ve,We,co,fo,Q,Nt,V,le,ho,Be,uo,qt,C,pe,mo,Je,_o,xt,G,ge,bo,Ke,vo,Dt,j,ce,$o,Qe,yo,ko,Xe,Ho,Ot,U,fe,Ao,Ye,wo,Pt,z,he,Eo,Ze,No,It,T,ue,qo,et,xo,Do,tt,Oo,jt,S,de,Po,ot,Io,Tt,R,me,jo,nt,To,Ft,M,_e,Fo,at,Lo,Lt,E,be,Vo,it,Co,Go,rt,Uo,zo,st,Ce,So,ve,Ro,Vt,N,$e,Mo,lt,Wo,Bo,pt,Jo,Ko,gt,Ge,Qo,ye,Xo,Ct,q,ke,Yo,ct,Zo,en,ft,tn,on,ht,Ue,nn,He,an,Gt,F,Ae,rn,ut,sn,ln,we,pn,Ee,gn,cn,Ut,x,Ne,fn,dt,hn,un,mt,dn,mn,qe,zt,W,xe,_n,_t,bn,St,B,De,vn,bt,$n,Rt,J,X,vt,Oe,yn,$t,kn,Mt,Pe,yt,Hn,An,Wt,Y,wn,kt,En,Nn,Bt,D,Ie,qn,Z,je,xn,Ht,Dn,On,ee,Te,Pn,At,In,jn,te,Fe,Tn,wt,Fn,Jt;return w=new xa({}),I=new v({props:{name:"huggingface_hub.HfApi.login",anchor:"huggingface_hub.HfApi.login",parameters:[{name:"username",val:": str"},{name:"password",val:": str"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L455",parametersDescription:[{anchor:"huggingface_hub.HfApi.login.username",description:`<strong>username</strong> (<code>str</code>) &#x2014;
The username of the account with which to login.`,name:"username"},{anchor:"huggingface_hub.HfApi.login.password",description:`<strong>password</strong> (<code>str</code>) &#x2014;
The password of the account with which to login.`,name:"password"}],returnDescription:`
<p>token if credentials are valid</p>
`,returnType:`
<p><code>str</code></p>
`}}),Q=new Ta({props:{$$slots:{default:[La]},$$scope:{ctx:Et}}}),le=new v({props:{name:"huggingface_hub.HfApi.logout",anchor:"huggingface_hub.HfApi.logout",parameters:[{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L556",parametersDescription:[{anchor:"huggingface_hub.HfApi.logout.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Hugging Face token. Will default to the locally saved token if not provided.`,name:"token"}]}}),pe=new v({props:{name:"huggingface_hub.HfApi.whoami",anchor:"huggingface_hub.HfApi.whoami",parameters:[{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L488",parametersDescription:[{anchor:"huggingface_hub.HfApi.whoami.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Hugging Face token. Will default to the locally saved token if not provided.`,name:"token"}]}}),ge=new v({props:{name:"huggingface_hub.HfApi.list_models",anchor:"huggingface_hub.HfApi.list_models",parameters:[{name:"filter",val:": typing.Union[huggingface_hub.utils.endpoint_helpers.ModelFilter, str, typing.Iterable[str], NoneType] = None"},{name:"author",val:": typing.Optional[str] = None"},{name:"search",val:": typing.Optional[str] = None"},{name:"emissions_thresholds",val:": typing.Union[typing.Tuple[float, float], NoneType] = None"},{name:"sort",val:": typing.Union[typing.Literal['lastModified'], str, NoneType] = None"},{name:"direction",val:": typing.Optional[typing.Literal[-1]] = None"},{name:"limit",val:": typing.Optional[int] = None"},{name:"full",val:": typing.Optional[bool] = None"},{name:"cardData",val:": typing.Optional[bool] = None"},{name:"fetch_config",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L618",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_models.filter",description:`<strong>filter</strong> (<code>ModelFilter</code>or <code>str</code> or <code>Iterable</code>, <em>optional</em>) &#x2014;
A string or <em>ModelFilter</em> which can be used to identify models on the hub.
Example usage:`,name:"filter"}]}}),ce=new v({props:{name:"huggingface_hub.HfApi.model_info",anchor:"huggingface_hub.HfApi.model_info",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"},{name:"securityStatus",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1010"}}),fe=new v({props:{name:"huggingface_hub.HfApi.list_repo_files",anchor:"huggingface_hub.HfApi.list_repo_files",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1040"}}),he=new v({props:{name:"huggingface_hub.HfApi.list_datasets",anchor:"huggingface_hub.HfApi.list_datasets",parameters:[{name:"filter",val:": typing.Union[huggingface_hub.utils.endpoint_helpers.DatasetFilter, str, typing.Iterable[str], NoneType] = None"},{name:"author",val:": typing.Optional[str] = None"},{name:"search",val:": typing.Optional[str] = None"},{name:"sort",val:": typing.Union[typing.Literal['lastModified'], str, NoneType] = None"},{name:"direction",val:": typing.Optional[typing.Literal[-1]] = None"},{name:"limit",val:": typing.Optional[int] = None"},{name:"cardData",val:": typing.Optional[bool] = None"},{name:"full",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L833",parametersDescription:[{anchor:"huggingface_hub.HfApi.list_datasets.filter",description:`<strong>filter</strong> (<code>DatasetFilter</code>or <code>str</code> or <code>Iterable</code>, <em>optional</em>) &#x2014;
A string or <em>DatasetFilter</em> which can be used to identify datasets on the hub.
Example usage:`,name:"filter"}]}}),ue=new v({props:{name:"huggingface_hub.HfApi.dataset_info",anchor:"huggingface_hub.HfApi.dataset_info",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"timeout",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1064"}}),de=new v({props:{name:"huggingface_hub.HfApi.list_metrics",anchor:"huggingface_hub.HfApi.list_metrics",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L999"}}),me=new v({props:{name:"huggingface_hub.HfApi.get_model_tags",anchor:"huggingface_hub.HfApi.get_model_tags",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L600"}}),_e=new v({props:{name:"huggingface_hub.HfApi.get_dataset_tags",anchor:"huggingface_hub.HfApi.get_dataset_tags",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L608"}}),be=new v({props:{name:"huggingface_hub.HfApi.create_repo",anchor:"huggingface_hub.HfApi.create_repo",parameters:[{name:"repo_id",val:": str = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"exist_ok",val:": typing.Optional[bool] = False"},{name:"space_sdk",val:": typing.Optional[str] = None"},{name:"name",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1091",parametersDescription:[{anchor:"huggingface_hub.HfApi.create_repo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) and a repo name seperated by a <code>/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
Version added: 0.4.0

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.create_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.create_repo.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether the model repo should be private.`,name:"private"},{anchor:"huggingface_hub.HfApi.create_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading
to a dataset or space, <code>None</code> or <code>&quot;model&quot;</code> if
uploading to a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.create_repo.exist_ok",description:`<strong>exist_ok</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, do not raise an error if repo already exists.`,name:"exist_ok"},{anchor:"huggingface_hub.HfApi.create_repo.space_sdk",description:`<strong>space_sdk</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Choice of SDK to use if repo_type is &#x201C;space&#x201D;. Can be &#x201C;streamlit&#x201D;, &#x201C;gradio&#x201D;, or &#x201C;static&#x201D;.`,name:"space_sdk"}],returnDescription:`
<p>URL to the newly created repo.</p>
`,returnType:`
<p><code>str</code></p>
`}}),$e=new v({props:{name:"huggingface_hub.HfApi.delete_repo",anchor:"huggingface_hub.HfApi.delete_repo",parameters:[{name:"repo_id",val:": str = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"name",val:": str = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1221",parametersDescription:[{anchor:"huggingface_hub.HfApi.delete_repo.repo_id",description:`<strong>repo_id</strong> (<code>str) -- A namespace (user or an organization) and a repo name seperated by a </code>/\`.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
Version added: 0.4.0

					</div>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.delete_repo.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An authentication token [1]_.`,name:"token"},{anchor:"huggingface_hub.HfApi.delete_repo.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading
to a dataset or space, <code>None</code> or <code>&quot;model&quot;</code> if
uploading to a model.`,name:"repo_type"}]}}),ke=new v({props:{name:"huggingface_hub.HfApi.update_repo_visibility",anchor:"huggingface_hub.HfApi.update_repo_visibility",parameters:[{name:"repo_id",val:": str = None"},{name:"private",val:": bool = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"name",val:": str = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1306",returnDescription:`
<p>The HTTP response in json.</p>
`}}),Ae=new v({props:{name:"huggingface_hub.HfApi.move_repo",anchor:"huggingface_hub.HfApi.move_repo",parameters:[{name:"from_id",val:": str"},{name:"to_id",val:": str"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1379"}}),Ne=new v({props:{name:"huggingface_hub.HfApi.upload_file",anchor:"huggingface_hub.HfApi.upload_file",parameters:[{name:"path_or_fileobj",val:": typing.Union[str, bytes, typing.IO]"},{name:"path_in_repo",val:": str"},{name:"repo_id",val:": str"},{name:"token",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"identical_ok",val:": bool = True"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1425",parametersDescription:[{anchor:"huggingface_hub.HfApi.upload_file.upload_fileth_or_fileobj",description:`<strong>upload_fileth_or_fileobj</strong> (<em>str</em>, <em>bytes</em>, or <em>IO</em>) &#x2014;
Path to a file on the local machine or binary data stream / fileobj / buffer.`,name:"upload_fileth_or_fileobj"},{anchor:"huggingface_hub.HfApi.upload_file.path_in_repo",description:`<strong>path_in_repo</strong> (<em>str</em>) &#x2014;
Relative filepath in the repo, for example: <code>&quot;checkpoints/1fec34a/weights.bin&quot;</code>`,name:"path_in_repo"},{anchor:"huggingface_hub.HfApi.upload_file.repo_id",description:`<strong>repo_id</strong> (<em>str</em>) &#x2014;
The repository to which the file will be uploaded, for example: <code>&quot;username/custom_transformers&quot;</code>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.upload_file.token",description:`<strong>token</strong> (<em>str</em>) &#x2014;
Authentication token, obtained with :function:<em>HfApi.login</em> method. Will default to the stored token.`,name:"token"},{anchor:"huggingface_hub.HfApi.upload_file.repo_type",description:`<strong>repo_type</strong> (<em>str</em>, Optional) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or space, <code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.upload_file.revision",description:`<strong>revision</strong> (<em>str</em>, Optional) &#x2014;
The git revision to commit from. Defaults to the <code>&quot;main&quot;</code> branch.`,name:"revision"},{anchor:"huggingface_hub.HfApi.upload_file.identical_ok",description:`<strong>identical_ok</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014;
When set to false, will raise an HTTPError when the file you&#x2019;re trying to upload already exists on the hub
and its content did not change.`,name:"identical_ok"}],returnDescription:`
<p>The URL to visualize the uploaded file on the hub</p>
`,returnType:`
<p><em>str</em></p>
`}}),qe=new Fa({props:{code:`with open("./local/filepath", "rb") as fobj:
    upload_file(
        path_or_fileobj=fileobj,
        path_in_repo="remote/file/path.h5",
        repo_id="username/my-dataset",
        repo_type="datasets",
        token="my_token",
   )

upload_file(
    path_or_fileobj=".\\\\local\\\\file\\\\path",
    path_in_repo="remote/file/path.h5",
    repo_id="username/my-model",
    token="my_token",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./local/filepath&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> fobj:
<span class="hljs-meta">... </span>    upload_file(
<span class="hljs-meta">... </span>        path_or_fileobj=fileobj,
<span class="hljs-meta">... </span>        path_in_repo=<span class="hljs-string">&quot;remote/file/path.h5&quot;</span>,
<span class="hljs-meta">... </span>        repo_id=<span class="hljs-string">&quot;username/my-dataset&quot;</span>,
<span class="hljs-meta">... </span>        repo_type=<span class="hljs-string">&quot;datasets&quot;</span>,
<span class="hljs-meta">... </span>        token=<span class="hljs-string">&quot;my_token&quot;</span>,
<span class="hljs-meta">... </span>   )
<span class="hljs-string">&quot;https://huggingface.co/datasets/username/my-dataset/blob/main/remote/file/path.h5&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>upload_file(
<span class="hljs-meta">... </span>    path_or_fileobj=<span class="hljs-string">&quot;.\\\\local\\\\file\\\\path&quot;</span>,
<span class="hljs-meta">... </span>    path_in_repo=<span class="hljs-string">&quot;remote/file/path.h5&quot;</span>,
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;username/my-model&quot;</span>,
<span class="hljs-meta">... </span>    token=<span class="hljs-string">&quot;my_token&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-string">&quot;https://huggingface.co/username/my-model/blob/main/remote/file/path.h5&quot;</span>`}}),xe=new v({props:{name:"huggingface_hub.HfApi.delete_file",anchor:"huggingface_hub.HfApi.delete_file",parameters:[{name:"path_in_repo",val:": str"},{name:"repo_id",val:": str"},{name:"token",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1555",parametersDescription:[{anchor:"huggingface_hub.HfApi.delete_file.path_in_repo",description:`<strong>path_in_repo</strong> (<em>str</em>) &#x2014;
Relative filepath in the repo, for example: <code>&quot;checkpoints/1fec34a/weights.bin&quot;</code>`,name:"path_in_repo"},{anchor:"huggingface_hub.HfApi.delete_file.repo_id",description:`<strong>repo_id</strong> (<em>str</em>) &#x2014;
The repository from which the file will be deleted, for example: <code>&quot;username/custom_transformers&quot;</code>`,name:"repo_id"},{anchor:"huggingface_hub.HfApi.delete_file.token",description:`<strong>token</strong> (<em>str</em>) &#x2014;
Authentication token, obtained with :function:<em>HfApi.login</em> method. Will default to the stored token.`,name:"token"},{anchor:"huggingface_hub.HfApi.delete_file.repo_type",description:`<strong>repo_type</strong> (<em>str</em>, Optional) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if the file is in a dataset or space, <code>None</code> or <code>&quot;model&quot;</code> if in a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.HfApi.delete_file.revision",description:`<strong>revision</strong> (<em>str</em>, Optional) &#x2014;
The git revision to commit from. Defaults to the <code>&quot;main&quot;</code> branch.`,name:"revision"}]}}),De=new v({props:{name:"huggingface_hub.HfApi.get_full_repo_name",anchor:"huggingface_hub.HfApi.get_full_repo_name",parameters:[{name:"model_id",val:": str"},{name:"organization",val:": typing.Optional[str] = None"},{name:"token",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1606",parametersDescription:[{anchor:"huggingface_hub.HfApi.get_full_repo_name.model_id",description:`<strong>model_id</strong> (<code>str</code>) &#x2014;
The name of the model.`,name:"model_id"},{anchor:"huggingface_hub.HfApi.get_full_repo_name.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
If passed, the repository name will be in the organization namespace instead of the
user namespace.`,name:"organization"},{anchor:"huggingface_hub.HfApi.get_full_repo_name.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The Hugging Face authentication token`,name:"token"}],returnDescription:`
<p>The repository name in the user\u2019s namespace ({username}/{model_id}) if no
organization is passed, and under the organization namespace ({organization}/{model_id})
otherwise.</p>
`,returnType:`
<p><code>str</code></p>
`}}),Oe=new xa({}),Ie=new v({props:{name:"class huggingface_hub.HfFolder",anchor:"huggingface_hub.HfFolder",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1639"}}),je=new v({props:{name:"delete_token",anchor:"huggingface_hub.HfFolder.delete_token",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1662"}}),Te=new v({props:{name:"get_token",anchor:"huggingface_hub.HfFolder.get_token",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1651"}}),Fe=new v({props:{name:"save_token",anchor:"huggingface_hub.HfFolder.save_token",parameters:[{name:"token",val:""}],source:"https://github.com/huggingface/huggingface_hub/blob/pr_782/src/huggingface_hub/hf_api.py#L1642"}}),{c(){$=n("meta"),K=r(),H=n("h1"),y=n("a"),O=n("span"),h(w.$$.fragment),se=r(),L=n("span"),k=g("Hugging Face Hub API"),P=r(),A=n("div"),h(I.$$.fragment),Ve=r(),We=n("p"),co=g("Call HF API to sign in a user and get a token if credentials are valid."),fo=r(),h(Q.$$.fragment),Nt=r(),V=n("div"),h(le.$$.fragment),ho=r(),Be=n("p"),uo=g("Call HF API to log out."),qt=r(),C=n("div"),h(pe.$$.fragment),mo=r(),Je=n("p"),_o=g("Call HF API to know \u201Cwhoami\u201D."),xt=r(),G=n("div"),h(ge.$$.fragment),bo=r(),Ke=n("p"),vo=g("Get the public list of all the models on huggingface.co"),Dt=r(),j=n("div"),h(ce.$$.fragment),$o=r(),Qe=n("p"),yo=g("Get info on one specific model on huggingface.co"),ko=r(),Xe=n("p"),Ho=g("Model can be private if you pass an acceptable token or are logged in."),Ot=r(),U=n("div"),h(fe.$$.fragment),Ao=r(),Ye=n("p"),wo=g("Get the list of files in a given repo."),Pt=r(),z=n("div"),h(he.$$.fragment),Eo=r(),Ze=n("p"),No=g("Get the public list of all the datasets on huggingface.co"),It=r(),T=n("div"),h(ue.$$.fragment),qo=r(),et=n("p"),xo=g("Get info on one specific dataset on huggingface.co"),Do=r(),tt=n("p"),Oo=g("Dataset can be private if you pass an acceptable token."),jt=r(),S=n("div"),h(de.$$.fragment),Po=r(),ot=n("p"),Io=g("Get the public list of all the metrics on huggingface.co"),Tt=r(),R=n("div"),h(me.$$.fragment),jo=r(),nt=n("p"),To=g("Gets all valid model tags as a nested namespace object"),Ft=r(),M=n("div"),h(_e.$$.fragment),Fo=r(),at=n("p"),Lo=g("Gets all valid dataset tags as a nested namespace object."),Lt=r(),E=n("div"),h(be.$$.fragment),Vo=r(),it=n("p"),Co=g("Create an empty repo on the HuggingFace Hub."),Go=r(),rt=n("p"),Uo=g("References:"),zo=r(),st=n("ul"),Ce=n("li"),So=g("[1] "),ve=n("a"),Ro=g("https://huggingface.co/settings/tokens"),Vt=r(),N=n("div"),h($e.$$.fragment),Mo=r(),lt=n("p"),Wo=g("Delete a repo from the HuggingFace Hub. CAUTION: this is irreversible."),Bo=r(),pt=n("p"),Jo=g("References:"),Ko=r(),gt=n("ul"),Ge=n("li"),Qo=g("[1] "),ye=n("a"),Xo=g("https://huggingface.co/settings/tokens"),Ct=r(),q=n("div"),h(ke.$$.fragment),Yo=r(),ct=n("p"),Zo=g("Update the visibility setting of a repository."),en=r(),ft=n("p"),tn=g("References:"),on=r(),ht=n("ul"),Ue=n("li"),nn=g("[1] "),He=n("a"),an=g("https://huggingface.co/settings/tokens"),Gt=r(),F=n("div"),h(Ae.$$.fragment),rn=r(),ut=n("p"),sn=g("Moving a repository from namespace1/repo_name1 to namespace2/repo_name2"),ln=r(),we=n("p"),pn=g(`Note there are certain limitations. For more information about moving repositories, please
see `),Ee=n("a"),gn=g("https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),cn=g("."),Ut=r(),x=n("div"),h(Ne.$$.fragment),fn=r(),dt=n("p"),hn=g(`Upload a local file (up to 5GB) to the given repo. The upload is done through a HTTP post request, and
doesn\u2019t require git or git-lfs to be installed.`),un=r(),mt=n("p"),dn=g("Examples:"),mn=r(),h(qe.$$.fragment),zt=r(),W=n("div"),h(xe.$$.fragment),_n=r(),_t=n("p"),bn=g("Deletes a file in the given repo."),St=r(),B=n("div"),h(De.$$.fragment),vn=r(),bt=n("p"),$n=g("Returns the repository name for a given model ID and optional organization."),Rt=r(),J=n("h2"),X=n("a"),vt=n("span"),h(Oe.$$.fragment),yn=r(),$t=n("span"),kn=g("Hugging Face local storage"),Mt=r(),Pe=n("p"),yt=n("code"),Hn=g("huggingface_hub"),An=g(` stores the authentication information locally so that it may be re-used in subsequent
methods.`),Wt=r(),Y=n("p"),wn=g("It does this using the "),kt=n("code"),En=g("HfFolder"),Nn=g(" utility, which saves data at the root of the user."),Bt=r(),D=n("div"),h(Ie.$$.fragment),qn=r(),Z=n("div"),h(je.$$.fragment),xn=r(),Ht=n("p"),Dn=g("Delete token. Do not fail if token does not exist."),On=r(),ee=n("div"),h(Te.$$.fragment),Pn=r(),At=n("p"),In=g("Get token or None if not existent."),jn=r(),te=n("div"),h(Fe.$$.fragment),Tn=r(),wt=n("p"),Fn=g("Save token, creating folder as needed."),this.h()},l(e){const l=Ia('[data-svelte="svelte-1phssyn"]',document.head);$=a(l,"META",{name:!0,content:!0}),l.forEach(o),K=s(e),H=a(e,"H1",{class:!0});var Le=i(H);y=a(Le,"A",{id:!0,class:!0,href:!0});var Un=i(y);O=a(Un,"SPAN",{});var zn=i(O);u(w.$$.fragment,zn),zn.forEach(o),Un.forEach(o),se=s(Le),L=a(Le,"SPAN",{});var Sn=i(L);k=c(Sn,"Hugging Face Hub API"),Sn.forEach(o),Le.forEach(o),P=s(e),A=a(e,"DIV",{class:!0});var ze=i(A);u(I.$$.fragment,ze),Ve=s(ze),We=a(ze,"P",{});var Rn=i(We);co=c(Rn,"Call HF API to sign in a user and get a token if credentials are valid."),Rn.forEach(o),fo=s(ze),u(Q.$$.fragment,ze),ze.forEach(o),Nt=s(e),V=a(e,"DIV",{class:!0});var Kt=i(V);u(le.$$.fragment,Kt),ho=s(Kt),Be=a(Kt,"P",{});var Mn=i(Be);uo=c(Mn,"Call HF API to log out."),Mn.forEach(o),Kt.forEach(o),qt=s(e),C=a(e,"DIV",{class:!0});var Qt=i(C);u(pe.$$.fragment,Qt),mo=s(Qt),Je=a(Qt,"P",{});var Wn=i(Je);_o=c(Wn,"Call HF API to know \u201Cwhoami\u201D."),Wn.forEach(o),Qt.forEach(o),xt=s(e),G=a(e,"DIV",{class:!0});var Xt=i(G);u(ge.$$.fragment,Xt),bo=s(Xt),Ke=a(Xt,"P",{});var Bn=i(Ke);vo=c(Bn,"Get the public list of all the models on huggingface.co"),Bn.forEach(o),Xt.forEach(o),Dt=s(e),j=a(e,"DIV",{class:!0});var Se=i(j);u(ce.$$.fragment,Se),$o=s(Se),Qe=a(Se,"P",{});var Jn=i(Qe);yo=c(Jn,"Get info on one specific model on huggingface.co"),Jn.forEach(o),ko=s(Se),Xe=a(Se,"P",{});var Kn=i(Xe);Ho=c(Kn,"Model can be private if you pass an acceptable token or are logged in."),Kn.forEach(o),Se.forEach(o),Ot=s(e),U=a(e,"DIV",{class:!0});var Yt=i(U);u(fe.$$.fragment,Yt),Ao=s(Yt),Ye=a(Yt,"P",{});var Qn=i(Ye);wo=c(Qn,"Get the list of files in a given repo."),Qn.forEach(o),Yt.forEach(o),Pt=s(e),z=a(e,"DIV",{class:!0});var Zt=i(z);u(he.$$.fragment,Zt),Eo=s(Zt),Ze=a(Zt,"P",{});var Xn=i(Ze);No=c(Xn,"Get the public list of all the datasets on huggingface.co"),Xn.forEach(o),Zt.forEach(o),It=s(e),T=a(e,"DIV",{class:!0});var Re=i(T);u(ue.$$.fragment,Re),qo=s(Re),et=a(Re,"P",{});var Yn=i(et);xo=c(Yn,"Get info on one specific dataset on huggingface.co"),Yn.forEach(o),Do=s(Re),tt=a(Re,"P",{});var Zn=i(tt);Oo=c(Zn,"Dataset can be private if you pass an acceptable token."),Zn.forEach(o),Re.forEach(o),jt=s(e),S=a(e,"DIV",{class:!0});var eo=i(S);u(de.$$.fragment,eo),Po=s(eo),ot=a(eo,"P",{});var ea=i(ot);Io=c(ea,"Get the public list of all the metrics on huggingface.co"),ea.forEach(o),eo.forEach(o),Tt=s(e),R=a(e,"DIV",{class:!0});var to=i(R);u(me.$$.fragment,to),jo=s(to),nt=a(to,"P",{});var ta=i(nt);To=c(ta,"Gets all valid model tags as a nested namespace object"),ta.forEach(o),to.forEach(o),Ft=s(e),M=a(e,"DIV",{class:!0});var oo=i(M);u(_e.$$.fragment,oo),Fo=s(oo),at=a(oo,"P",{});var oa=i(at);Lo=c(oa,"Gets all valid dataset tags as a nested namespace object."),oa.forEach(o),oo.forEach(o),Lt=s(e),E=a(e,"DIV",{class:!0});var oe=i(E);u(be.$$.fragment,oe),Vo=s(oe),it=a(oe,"P",{});var na=i(it);Co=c(na,"Create an empty repo on the HuggingFace Hub."),na.forEach(o),Go=s(oe),rt=a(oe,"P",{});var aa=i(rt);Uo=c(aa,"References:"),aa.forEach(o),zo=s(oe),st=a(oe,"UL",{});var ia=i(st);Ce=a(ia,"LI",{});var Ln=i(Ce);So=c(Ln,"[1] "),ve=a(Ln,"A",{href:!0,rel:!0});var ra=i(ve);Ro=c(ra,"https://huggingface.co/settings/tokens"),ra.forEach(o),Ln.forEach(o),ia.forEach(o),oe.forEach(o),Vt=s(e),N=a(e,"DIV",{class:!0});var ne=i(N);u($e.$$.fragment,ne),Mo=s(ne),lt=a(ne,"P",{});var sa=i(lt);Wo=c(sa,"Delete a repo from the HuggingFace Hub. CAUTION: this is irreversible."),sa.forEach(o),Bo=s(ne),pt=a(ne,"P",{});var la=i(pt);Jo=c(la,"References:"),la.forEach(o),Ko=s(ne),gt=a(ne,"UL",{});var pa=i(gt);Ge=a(pa,"LI",{});var Vn=i(Ge);Qo=c(Vn,"[1] "),ye=a(Vn,"A",{href:!0,rel:!0});var ga=i(ye);Xo=c(ga,"https://huggingface.co/settings/tokens"),ga.forEach(o),Vn.forEach(o),pa.forEach(o),ne.forEach(o),Ct=s(e),q=a(e,"DIV",{class:!0});var ae=i(q);u(ke.$$.fragment,ae),Yo=s(ae),ct=a(ae,"P",{});var ca=i(ct);Zo=c(ca,"Update the visibility setting of a repository."),ca.forEach(o),en=s(ae),ft=a(ae,"P",{});var fa=i(ft);tn=c(fa,"References:"),fa.forEach(o),on=s(ae),ht=a(ae,"UL",{});var ha=i(ht);Ue=a(ha,"LI",{});var Cn=i(Ue);nn=c(Cn,"[1] "),He=a(Cn,"A",{href:!0,rel:!0});var ua=i(He);an=c(ua,"https://huggingface.co/settings/tokens"),ua.forEach(o),Cn.forEach(o),ha.forEach(o),ae.forEach(o),Gt=s(e),F=a(e,"DIV",{class:!0});var Me=i(F);u(Ae.$$.fragment,Me),rn=s(Me),ut=a(Me,"P",{});var da=i(ut);sn=c(da,"Moving a repository from namespace1/repo_name1 to namespace2/repo_name2"),da.forEach(o),ln=s(Me),we=a(Me,"P",{});var no=i(we);pn=c(no,`Note there are certain limitations. For more information about moving repositories, please
see `),Ee=a(no,"A",{href:!0,rel:!0});var ma=i(Ee);gn=c(ma,"https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),ma.forEach(o),cn=c(no,"."),no.forEach(o),Me.forEach(o),Ut=s(e),x=a(e,"DIV",{class:!0});var ie=i(x);u(Ne.$$.fragment,ie),fn=s(ie),dt=a(ie,"P",{});var _a=i(dt);hn=c(_a,`Upload a local file (up to 5GB) to the given repo. The upload is done through a HTTP post request, and
doesn\u2019t require git or git-lfs to be installed.`),_a.forEach(o),un=s(ie),mt=a(ie,"P",{});var ba=i(mt);dn=c(ba,"Examples:"),ba.forEach(o),mn=s(ie),u(qe.$$.fragment,ie),ie.forEach(o),zt=s(e),W=a(e,"DIV",{class:!0});var ao=i(W);u(xe.$$.fragment,ao),_n=s(ao),_t=a(ao,"P",{});var va=i(_t);bn=c(va,"Deletes a file in the given repo."),va.forEach(o),ao.forEach(o),St=s(e),B=a(e,"DIV",{class:!0});var io=i(B);u(De.$$.fragment,io),vn=s(io),bt=a(io,"P",{});var $a=i(bt);$n=c($a,"Returns the repository name for a given model ID and optional organization."),$a.forEach(o),io.forEach(o),Rt=s(e),J=a(e,"H2",{class:!0});var ro=i(J);X=a(ro,"A",{id:!0,class:!0,href:!0});var ya=i(X);vt=a(ya,"SPAN",{});var ka=i(vt);u(Oe.$$.fragment,ka),ka.forEach(o),ya.forEach(o),yn=s(ro),$t=a(ro,"SPAN",{});var Ha=i($t);kn=c(Ha,"Hugging Face local storage"),Ha.forEach(o),ro.forEach(o),Mt=s(e),Pe=a(e,"P",{});var Gn=i(Pe);yt=a(Gn,"CODE",{});var Aa=i(yt);Hn=c(Aa,"huggingface_hub"),Aa.forEach(o),An=c(Gn,` stores the authentication information locally so that it may be re-used in subsequent
methods.`),Gn.forEach(o),Wt=s(e),Y=a(e,"P",{});var so=i(Y);wn=c(so,"It does this using the "),kt=a(so,"CODE",{});var wa=i(kt);En=c(wa,"HfFolder"),wa.forEach(o),Nn=c(so," utility, which saves data at the root of the user."),so.forEach(o),Bt=s(e),D=a(e,"DIV",{class:!0});var re=i(D);u(Ie.$$.fragment,re),qn=s(re),Z=a(re,"DIV",{class:!0});var lo=i(Z);u(je.$$.fragment,lo),xn=s(lo),Ht=a(lo,"P",{});var Ea=i(Ht);Dn=c(Ea,"Delete token. Do not fail if token does not exist."),Ea.forEach(o),lo.forEach(o),On=s(re),ee=a(re,"DIV",{class:!0});var po=i(ee);u(Te.$$.fragment,po),Pn=s(po),At=a(po,"P",{});var Na=i(At);In=c(Na,"Get token or None if not existent."),Na.forEach(o),po.forEach(o),jn=s(re),te=a(re,"DIV",{class:!0});var go=i(te);u(Fe.$$.fragment,go),Tn=s(go),wt=a(go,"P",{});var qa=i(wt);Fn=c(qa,"Save token, creating folder as needed."),qa.forEach(o),go.forEach(o),re.forEach(o),this.h()},h(){f($,"name","hf:doc:metadata"),f($,"content",JSON.stringify(Ca)),f(y,"id","huggingface_hub.HfApi.login"),f(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(y,"href","#huggingface_hub.HfApi.login"),f(H,"class","relative group"),f(A,"class","docstring"),f(V,"class","docstring"),f(C,"class","docstring"),f(G,"class","docstring"),f(j,"class","docstring"),f(U,"class","docstring"),f(z,"class","docstring"),f(T,"class","docstring"),f(S,"class","docstring"),f(R,"class","docstring"),f(M,"class","docstring"),f(ve,"href","https://huggingface.co/settings/tokens"),f(ve,"rel","nofollow"),f(E,"class","docstring"),f(ye,"href","https://huggingface.co/settings/tokens"),f(ye,"rel","nofollow"),f(N,"class","docstring"),f(He,"href","https://huggingface.co/settings/tokens"),f(He,"rel","nofollow"),f(q,"class","docstring"),f(Ee,"href","https://hf.co/docs/hub/main#how-can-i-rename-or-transfer-a-repo"),f(Ee,"rel","nofollow"),f(F,"class","docstring"),f(x,"class","docstring"),f(W,"class","docstring"),f(B,"class","docstring"),f(X,"id","huggingface_hub.HfFolder"),f(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(X,"href","#huggingface_hub.HfFolder"),f(J,"class","relative group"),f(Z,"class","docstring"),f(ee,"class","docstring"),f(te,"class","docstring"),f(D,"class","docstring")},m(e,l){t(document.head,$),p(e,K,l),p(e,H,l),t(H,y),t(y,O),d(w,O,null),t(H,se),t(H,L),t(L,k),p(e,P,l),p(e,A,l),d(I,A,null),t(A,Ve),t(A,We),t(We,co),t(A,fo),d(Q,A,null),p(e,Nt,l),p(e,V,l),d(le,V,null),t(V,ho),t(V,Be),t(Be,uo),p(e,qt,l),p(e,C,l),d(pe,C,null),t(C,mo),t(C,Je),t(Je,_o),p(e,xt,l),p(e,G,l),d(ge,G,null),t(G,bo),t(G,Ke),t(Ke,vo),p(e,Dt,l),p(e,j,l),d(ce,j,null),t(j,$o),t(j,Qe),t(Qe,yo),t(j,ko),t(j,Xe),t(Xe,Ho),p(e,Ot,l),p(e,U,l),d(fe,U,null),t(U,Ao),t(U,Ye),t(Ye,wo),p(e,Pt,l),p(e,z,l),d(he,z,null),t(z,Eo),t(z,Ze),t(Ze,No),p(e,It,l),p(e,T,l),d(ue,T,null),t(T,qo),t(T,et),t(et,xo),t(T,Do),t(T,tt),t(tt,Oo),p(e,jt,l),p(e,S,l),d(de,S,null),t(S,Po),t(S,ot),t(ot,Io),p(e,Tt,l),p(e,R,l),d(me,R,null),t(R,jo),t(R,nt),t(nt,To),p(e,Ft,l),p(e,M,l),d(_e,M,null),t(M,Fo),t(M,at),t(at,Lo),p(e,Lt,l),p(e,E,l),d(be,E,null),t(E,Vo),t(E,it),t(it,Co),t(E,Go),t(E,rt),t(rt,Uo),t(E,zo),t(E,st),t(st,Ce),t(Ce,So),t(Ce,ve),t(ve,Ro),p(e,Vt,l),p(e,N,l),d($e,N,null),t(N,Mo),t(N,lt),t(lt,Wo),t(N,Bo),t(N,pt),t(pt,Jo),t(N,Ko),t(N,gt),t(gt,Ge),t(Ge,Qo),t(Ge,ye),t(ye,Xo),p(e,Ct,l),p(e,q,l),d(ke,q,null),t(q,Yo),t(q,ct),t(ct,Zo),t(q,en),t(q,ft),t(ft,tn),t(q,on),t(q,ht),t(ht,Ue),t(Ue,nn),t(Ue,He),t(He,an),p(e,Gt,l),p(e,F,l),d(Ae,F,null),t(F,rn),t(F,ut),t(ut,sn),t(F,ln),t(F,we),t(we,pn),t(we,Ee),t(Ee,gn),t(we,cn),p(e,Ut,l),p(e,x,l),d(Ne,x,null),t(x,fn),t(x,dt),t(dt,hn),t(x,un),t(x,mt),t(mt,dn),t(x,mn),d(qe,x,null),p(e,zt,l),p(e,W,l),d(xe,W,null),t(W,_n),t(W,_t),t(_t,bn),p(e,St,l),p(e,B,l),d(De,B,null),t(B,vn),t(B,bt),t(bt,$n),p(e,Rt,l),p(e,J,l),t(J,X),t(X,vt),d(Oe,vt,null),t(J,yn),t(J,$t),t($t,kn),p(e,Mt,l),p(e,Pe,l),t(Pe,yt),t(yt,Hn),t(Pe,An),p(e,Wt,l),p(e,Y,l),t(Y,wn),t(Y,kt),t(kt,En),t(Y,Nn),p(e,Bt,l),p(e,D,l),d(Ie,D,null),t(D,qn),t(D,Z),d(je,Z,null),t(Z,xn),t(Z,Ht),t(Ht,Dn),t(D,On),t(D,ee),d(Te,ee,null),t(ee,Pn),t(ee,At),t(At,In),t(D,jn),t(D,te),d(Fe,te,null),t(te,Tn),t(te,wt),t(wt,Fn),Jt=!0},p(e,[l]){const Le={};l&2&&(Le.$$scope={dirty:l,ctx:e}),Q.$set(Le)},i(e){Jt||(m(w.$$.fragment,e),m(I.$$.fragment,e),m(Q.$$.fragment,e),m(le.$$.fragment,e),m(pe.$$.fragment,e),m(ge.$$.fragment,e),m(ce.$$.fragment,e),m(fe.$$.fragment,e),m(he.$$.fragment,e),m(ue.$$.fragment,e),m(de.$$.fragment,e),m(me.$$.fragment,e),m(_e.$$.fragment,e),m(be.$$.fragment,e),m($e.$$.fragment,e),m(ke.$$.fragment,e),m(Ae.$$.fragment,e),m(Ne.$$.fragment,e),m(qe.$$.fragment,e),m(xe.$$.fragment,e),m(De.$$.fragment,e),m(Oe.$$.fragment,e),m(Ie.$$.fragment,e),m(je.$$.fragment,e),m(Te.$$.fragment,e),m(Fe.$$.fragment,e),Jt=!0)},o(e){_(w.$$.fragment,e),_(I.$$.fragment,e),_(Q.$$.fragment,e),_(le.$$.fragment,e),_(pe.$$.fragment,e),_(ge.$$.fragment,e),_(ce.$$.fragment,e),_(fe.$$.fragment,e),_(he.$$.fragment,e),_(ue.$$.fragment,e),_(de.$$.fragment,e),_(me.$$.fragment,e),_(_e.$$.fragment,e),_(be.$$.fragment,e),_($e.$$.fragment,e),_(ke.$$.fragment,e),_(Ae.$$.fragment,e),_(Ne.$$.fragment,e),_(qe.$$.fragment,e),_(xe.$$.fragment,e),_(De.$$.fragment,e),_(Oe.$$.fragment,e),_(Ie.$$.fragment,e),_(je.$$.fragment,e),_(Te.$$.fragment,e),_(Fe.$$.fragment,e),Jt=!1},d(e){o($),e&&o(K),e&&o(H),b(w),e&&o(P),e&&o(A),b(I),b(Q),e&&o(Nt),e&&o(V),b(le),e&&o(qt),e&&o(C),b(pe),e&&o(xt),e&&o(G),b(ge),e&&o(Dt),e&&o(j),b(ce),e&&o(Ot),e&&o(U),b(fe),e&&o(Pt),e&&o(z),b(he),e&&o(It),e&&o(T),b(ue),e&&o(jt),e&&o(S),b(de),e&&o(Tt),e&&o(R),b(me),e&&o(Ft),e&&o(M),b(_e),e&&o(Lt),e&&o(E),b(be),e&&o(Vt),e&&o(N),b($e),e&&o(Ct),e&&o(q),b(ke),e&&o(Gt),e&&o(F),b(Ae),e&&o(Ut),e&&o(x),b(Ne),b(qe),e&&o(zt),e&&o(W),b(xe),e&&o(St),e&&o(B),b(De),e&&o(Rt),e&&o(J),b(Oe),e&&o(Mt),e&&o(Pe),e&&o(Wt),e&&o(Y),e&&o(Bt),e&&o(D),b(Ie),b(je),b(Te),b(Fe)}}}const Ca={local:"huggingface_hub.HfApi.login",sections:[{local:"huggingface_hub.HfFolder",title:"Hugging Face local storage"}],title:"Hugging Face Hub API"};function Ga(Et){return ja(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Wa extends Da{constructor($){super();Oa(this,$,Ga,Va,Pa,{})}}export{Wa as default,Ca as metadata};
