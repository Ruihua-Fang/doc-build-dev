import{S as CU,i as GU,s as UU,e as r,k as p,w as q,t as i,M as LU,c as o,d as t,m as f,a as l,x as v,h as u,b as h,N as BU,F as e,g as m,y,q as E,o as w,B as b,v as zU,L as P}from"../chunks/vendor-7c454903.js";import{T as Y}from"../chunks/Tip-735285fc.js";import{I as F}from"../chunks/IconCopyLink-5457534b.js";import{I as L,M as R,C as N}from"../chunks/InferenceApi-041dc1b2.js";function MU($){let n,c,s,d,_,k,A;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(`:
`),_=r("a"),k=i("facebook/bart-large-mnli"),A=i("."),this.h()},l(T){n=o(T,"P",{});var j=l(n);c=o(j,"STRONG",{});var O=l(c);s=u(O,"Recommended model"),O.forEach(t),d=u(j,`:
`),_=o(j,"A",{href:!0,rel:!0});var D=l(_);k=u(D,"facebook/bart-large-mnli"),D.forEach(t),A=u(j,"."),j.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/facebook/bart-large-mnli"),h(_,"rel","nofollow")},m(T,j){m(T,n,j),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A)},d(T){T&&t(n)}}}function FU($){let n,c;return n=new N({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/facebook/bart-large-mnli"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query(
    {
        "inputs": "Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!",
        "parameters": {"candidate_labels": ["refund", "legal", "faq"]},
    }
)`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/bart-large-mnli&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(
    {
        <span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!&quot;</span>,
        <span class="hljs-string">&quot;parameters&quot;</span>: {<span class="hljs-string">&quot;candidate_labels&quot;</span>: [<span class="hljs-string">&quot;refund&quot;</span>, <span class="hljs-string">&quot;legal&quot;</span>, <span class="hljs-string">&quot;faq&quot;</span>]},
    }
)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function JU($){let n,c;return n=new R({props:{$$slots:{default:[FU]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function KU($){let n,c;return n=new N({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/facebook/bart-large-mnli",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs: "Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!", parameters: {candidate_labels: ["refund", "legal", "faq"]}}).then((response) => {
    console.log(JSON.stringify(response));
});
// {"sequence":"Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!","labels":["refund","faq","legal"],"scores":[0.8778, 0.1052, 0.017]}`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/bart-large-mnli&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>({<span class="hljs-attr">inputs</span>: <span class="hljs-string">&quot;Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!&quot;</span>, <span class="hljs-attr">parameters</span>: {<span class="hljs-attr">candidate_labels</span>: [<span class="hljs-string">&quot;refund&quot;</span>, <span class="hljs-string">&quot;legal&quot;</span>, <span class="hljs-string">&quot;faq&quot;</span>]}}).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// {&quot;sequence&quot;:&quot;Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!&quot;,&quot;labels&quot;:[&quot;refund&quot;,&quot;faq&quot;,&quot;legal&quot;],&quot;scores&quot;:[0.8778, 0.1052, 0.017]}</span>`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function WU($){let n,c;return n=new R({props:{$$slots:{default:[KU]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function YU($){let n,c;return n=new N({props:{code:`curl https://api-inference.huggingface.co/models/facebook/bart-large-mnli \\
        -X POST \\
        -d '{"inputs": "Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!", "parameters": {"candidate_labels": ["refund", "legal", "faq"]}}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# {"sequence":"Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!","labels":["refund","faq","legal"],"scores":[0.8778, 0.1052, 0.017]}`,highlighted:`curl https:<span class="hljs-comment">//api-inference.huggingface.co/models/facebook/bart-large-mnli \\</span>
        -X <span class="hljs-keyword">POST</span> \\
        -<span class="hljs-keyword">d</span> &#x27;{<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!&quot;</span>, <span class="hljs-string">&quot;parameters&quot;</span>: {<span class="hljs-string">&quot;candidate_labels&quot;</span>: [<span class="hljs-string">&quot;refund&quot;</span>, <span class="hljs-string">&quot;legal&quot;</span>, <span class="hljs-string">&quot;faq&quot;</span>]}}&#x27; \\
        -<span class="hljs-keyword">H</span> <span class="hljs-string">&quot;Authorization: Bearer \${HF_API_TOKEN}&quot;</span>
# {<span class="hljs-string">&quot;sequence&quot;</span>:<span class="hljs-string">&quot;Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!&quot;</span>,<span class="hljs-string">&quot;labels&quot;</span>:[<span class="hljs-string">&quot;refund&quot;</span>,<span class="hljs-string">&quot;faq&quot;</span>,<span class="hljs-string">&quot;legal&quot;</span>],<span class="hljs-string">&quot;scores&quot;</span>:[0.8778, 0.1052, 0.017]}`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function VU($){let n,c;return n=new R({props:{$$slots:{default:[YU]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function XU($){let n,c;return n=new N({props:{code:`self.assertEqual(
    deep_round(data),
    {
        "sequence": "Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!",
        "labels": ["refund", "faq", "legal"],
        "scores": [
            # 88% refund
            0.8778,
            0.1052,
            0.017,
        ],
    },
)`,highlighted:`self.assertEqual(
    deep_round(data),
    {
        <span class="hljs-string">&quot;sequence&quot;</span>: <span class="hljs-string">&quot;Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!&quot;</span>,
        <span class="hljs-string">&quot;labels&quot;</span>: [<span class="hljs-string">&quot;refund&quot;</span>, <span class="hljs-string">&quot;faq&quot;</span>, <span class="hljs-string">&quot;legal&quot;</span>],
        <span class="hljs-string">&quot;scores&quot;</span>: [
            <span class="hljs-comment"># 88% refund</span>
            <span class="hljs-number">0.8778</span>,
            <span class="hljs-number">0.1052</span>,
            <span class="hljs-number">0.017</span>,
        ],
    },
)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function QU($){let n,c;return n=new R({props:{$$slots:{default:[XU]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function ZU($){let n,c,s,d,_,k,A,T,j,O,D,ne,Re;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(`:
`),_=r("a"),k=i("Helsinki-NLP/opus-mt-ru-en"),A=i(`.
Helsinki-NLP uploaded many models with many language pairs.
`),T=r("strong"),j=i("Recommended model"),O=i(": "),D=r("a"),ne=i("t5-base"),Re=i("."),this.h()},l(Q){n=o(Q,"P",{});var W=l(n);c=o(W,"STRONG",{});var at=l(c);s=u(at,"Recommended model"),at.forEach(t),d=u(W,`:
`),_=o(W,"A",{href:!0,rel:!0});var Fl=l(_);k=u(Fl,"Helsinki-NLP/opus-mt-ru-en"),Fl.forEach(t),A=u(W,`.
Helsinki-NLP uploaded many models with many language pairs.
`),T=o(W,"STRONG",{});var Na=l(T);j=u(Na,"Recommended model"),Na.forEach(t),O=u(W,": "),D=o(W,"A",{href:!0,rel:!0});var Ne=l(D);ne=u(Ne,"t5-base"),Ne.forEach(t),Re=u(W,"."),W.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/Helsinki-NLP/opus-mt-ru-en"),h(_,"rel","nofollow"),h(D,"href","https://huggingface.co/t5-base"),h(D,"rel","nofollow")},m(Q,W){m(Q,n,W),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A),e(n,T),e(T,j),e(n,O),e(n,D),e(D,ne),e(n,Re)},d(Q){Q&&t(n)}}}function eL($){let n,c;return n=new N({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-ru-en"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query(
    {
        "inputs": "\u041C\u0435\u043D\u044F \u0437\u043E\u0432\u0443\u0442 \u0412\u043E\u043B\u044C\u0444\u0433\u0430\u043D\u0433 \u0438 \u044F \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043B\u0438\u043D\u0435",
    }
)
# Response
self.assertEqual(
    data,
    [
        {
            "translation_text": "My name is Wolfgang and I live in Berlin.",
        },
    ],
)`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-ru-en&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(
    {
        <span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;\u041C\u0435\u043D\u044F \u0437\u043E\u0432\u0443\u0442 \u0412\u043E\u043B\u044C\u0444\u0433\u0430\u043D\u0433 \u0438 \u044F \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043B\u0438\u043D\u0435&quot;</span>,
    }
)
<span class="hljs-comment"># Response</span>
self.assertEqual(
    data,
    [
        {
            <span class="hljs-string">&quot;translation_text&quot;</span>: <span class="hljs-string">&quot;My name is Wolfgang and I live in Berlin.&quot;</span>,
        },
    ],
)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function tL($){let n,c;return n=new R({props:{$$slots:{default:[eL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function sL($){let n,c;return n=new N({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-ru-en",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs: "\u041C\u0435\u043D\u044F \u0437\u043E\u0432\u0443\u0442 \u0412\u043E\u043B\u044C\u0444\u0433\u0430\u043D\u0433 \u0438 \u044F \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043B\u0438\u043D\u0435"}).then((response) => {
    console.log(JSON.stringify(response));
});
// [{"translation_text":"My name is Wolfgang and I live in Berlin."}]`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-ru-en&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>({<span class="hljs-attr">inputs</span>: <span class="hljs-string">&quot;\u041C\u0435\u043D\u044F \u0437\u043E\u0432\u0443\u0442 \u0412\u043E\u043B\u044C\u0444\u0433\u0430\u043D\u0433 \u0438 \u044F \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043B\u0438\u043D\u0435&quot;</span>}).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// [{&quot;translation_text&quot;:&quot;My name is Wolfgang and I live in Berlin.&quot;}]</span>`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function aL($){let n,c;return n=new R({props:{$$slots:{default:[sL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function nL($){let n,c;return n=new N({props:{code:`curl https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-ru-en \\
        -X POST \\
        -d '{"inputs": "\u041C\u0435\u043D\u044F \u0437\u043E\u0432\u0443\u0442 \u0412\u043E\u043B\u044C\u0444\u0433\u0430\u043D\u0433 \u0438 \u044F \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043B\u0438\u043D\u0435"}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"translation_text":"My name is Wolfgang and I live in Berlin."}]`,highlighted:`curl https:<span class="hljs-regexp">//</span>api-inference.huggingface.co<span class="hljs-regexp">/models/</span>Helsinki-NLP/opus-mt-ru-en \\
        -X POST \\
        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;: &quot;\u041C\u0435\u043D\u044F \u0437\u043E\u0432\u0443\u0442 \u0412\u043E\u043B\u044C\u0444\u0433\u0430\u043D\u0433 \u0438 \u044F \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043B\u0438\u043D\u0435&quot;}&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer \${HF_API_TOKEN}&quot;</span>
<span class="hljs-comment"># [{&quot;translation_text&quot;:&quot;My name is Wolfgang and I live in Berlin.&quot;}]</span>`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function rL($){let n,c;return n=new R({props:{$$slots:{default:[nL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function oL($){let n,c,s,d,_,k,A;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(`:
`),_=r("a"),k=i("facebook/bart-large-cnn"),A=i("."),this.h()},l(T){n=o(T,"P",{});var j=l(n);c=o(j,"STRONG",{});var O=l(c);s=u(O,"Recommended model"),O.forEach(t),d=u(j,`:
`),_=o(j,"A",{href:!0,rel:!0});var D=l(_);k=u(D,"facebook/bart-large-cnn"),D.forEach(t),A=u(j,"."),j.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/facebook/bart-large-cnn"),h(_,"rel","nofollow")},m(T,j){m(T,n,j),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A)},d(T){T&&t(n)}}}function lL($){let n,c;return n=new N({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/facebook/bart-large-cnn"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query(
    {
        "inputs": "The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.",
        "parameters": {"do_sample": False},
    }
)
# Response
self.assertEqual(
    data,
    [
        {
            "summary_text": "The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world.",
        },
    ],
)`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/bart-large-cnn&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(
    {
        <span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.&quot;</span>,
        <span class="hljs-string">&quot;parameters&quot;</span>: {<span class="hljs-string">&quot;do_sample&quot;</span>: <span class="hljs-literal">False</span>},
    }
)
<span class="hljs-comment"># Response</span>
self.assertEqual(
    data,
    [
        {
            <span class="hljs-string">&quot;summary_text&quot;</span>: <span class="hljs-string">&quot;The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world.&quot;</span>,
        },
    ],
)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function iL($){let n,c;return n=new R({props:{$$slots:{default:[lL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function uL($){let n,c;return n=new N({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/facebook/bart-large-cnn",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs: "The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct."}).then((response) => {
    console.log(JSON.stringify(response));
});
// [{"summary_text":"The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. It was the first structure to reach a height of 300 metres."}]`,highlighted:`import fetch from <span class="hljs-comment">&quot;node-fetch&quot;</span>;
async function query(data) {
    const response = await fetch(
        <span class="hljs-comment">&quot;https://api-inference.huggingface.co/models/facebook/bart-large-cnn&quot;</span>,
        {
            headers: { <span class="hljs-type">Authorization</span>: \`<span class="hljs-type">Bearer</span> <span class="hljs-string">\${</span><span class="hljs-type">API_TOKEN</span>}\` },
            method: <span class="hljs-comment">&quot;POST&quot;</span>,
            body: <span class="hljs-type">JSON</span>.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs: <span class="hljs-comment">&quot;The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.&quot;</span>}).then((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// [{<span class="hljs-comment">&quot;summary_text&quot;</span>:<span class="hljs-comment">&quot;The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. It was the first structure to reach a height of 300 metres.&quot;</span>}]`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function cL($){let n,c;return n=new R({props:{$$slots:{default:[uL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function pL($){let n,c;return n=new N({props:{code:`curl https://api-inference.huggingface.co/models/facebook/bart-large-cnn \\
        -X POST \\
        -d '{"inputs": "The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.", "parameters": {"do_sample": false}}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"summary_text":"The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world."}]`,highlighted:`curl https:<span class="hljs-comment">//api-inference.huggingface.co/models/facebook/bart-large-cnn \\
        -X POST \\
        -d &#x27;{&quot;inputs&quot;: &quot;The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.&quot;, &quot;parameters&quot;: {&quot;do_sample&quot;: false}}&#x27; \\
        -H &quot;Authorization: Bearer \${HF_API_TOKEN}&quot;</span>
# [{<span class="hljs-string">&quot;summary_text&quot;</span>:<span class="hljs-string">&quot;The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world.&quot;</span>}]`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function fL($){let n,c;return n=new R({props:{$$slots:{default:[pL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function hL($){let n,c,s,d,_,k,A;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(`:
`),_=r("a"),k=i("microsoft/DialoGPT-large"),A=i("."),this.h()},l(T){n=o(T,"P",{});var j=l(n);c=o(j,"STRONG",{});var O=l(c);s=u(O,"Recommended model"),O.forEach(t),d=u(j,`:
`),_=o(j,"A",{href:!0,rel:!0});var D=l(_);k=u(D,"microsoft/DialoGPT-large"),D.forEach(t),A=u(j,"."),j.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/microsoft/DialoGPT-large"),h(_,"rel","nofollow")},m(T,j){m(T,n,j),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A)},d(T){T&&t(n)}}}function dL($){let n,c;return n=new N({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-large"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query(
    {
        "inputs": {
            "past_user_inputs": ["Which movie is the best ?"],
            "generated_responses": ["It's Die Hard for sure."],
            "text": "Can you explain why ?",
        },
    }
)
# Response
self.assertEqual(
    data,
    {
        "generated_text": "It's the best movie ever.",
        "conversation": {
            "past_user_inputs": [
                "Which movie is the best ?",
                "Can you explain why ?",
            ],
            "generated_responses": [
                "It's Die Hard for sure.",
                "It's the best movie ever.",
            ],
        },
        "warnings": ["Setting \`pad_token_id\` to \`eos_token_id\`:50256 for open-end generation."],
    },
)`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/microsoft/DialoGPT-large&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(
    {
        <span class="hljs-string">&quot;inputs&quot;</span>: {
            <span class="hljs-string">&quot;past_user_inputs&quot;</span>: [<span class="hljs-string">&quot;Which movie is the best ?&quot;</span>],
            <span class="hljs-string">&quot;generated_responses&quot;</span>: [<span class="hljs-string">&quot;It&#x27;s Die Hard for sure.&quot;</span>],
            <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Can you explain why ?&quot;</span>,
        },
    }
)
<span class="hljs-comment"># Response</span>
self.assertEqual(
    data,
    {
        <span class="hljs-string">&quot;generated_text&quot;</span>: <span class="hljs-string">&quot;It&#x27;s the best movie ever.&quot;</span>,
        <span class="hljs-string">&quot;conversation&quot;</span>: {
            <span class="hljs-string">&quot;past_user_inputs&quot;</span>: [
                <span class="hljs-string">&quot;Which movie is the best ?&quot;</span>,
                <span class="hljs-string">&quot;Can you explain why ?&quot;</span>,
            ],
            <span class="hljs-string">&quot;generated_responses&quot;</span>: [
                <span class="hljs-string">&quot;It&#x27;s Die Hard for sure.&quot;</span>,
                <span class="hljs-string">&quot;It&#x27;s the best movie ever.&quot;</span>,
            ],
        },
        <span class="hljs-string">&quot;warnings&quot;</span>: [<span class="hljs-string">&quot;Setting \`pad_token_id\` to \`eos_token_id\`:50256 for open-end generation.&quot;</span>],
    },
)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function gL($){let n,c;return n=new R({props:{$$slots:{default:[dL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function mL($){let n,c;return n=new N({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/microsoft/DialoGPT-large",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs: {past_user_inputs: ["Which movie is the best ?"], generated_responses: ["It is Die Hard for sure."], text:"Can you explain why ?"}}).then((response) => {
    console.log(JSON.stringify(response));
});
// {"generated_text":"It's the best movie ever.","conversation":{"past_user_inputs":["Which movie is the best ?","Can you explain why ?"],"generated_responses":["It is Die Hard for sure.","It's the best movie ever."]},"warnings":["Setting \`pad_token_id\` to \`eos_token_id\`:50256 for open-end generation."]}`,highlighted:`<span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
async <span class="hljs-keyword">function</span> query(data) {
    const response = await <span class="hljs-keyword">fetch</span>(
        &quot;https://api-inference.huggingface.co/models/microsoft/DialoGPT-large&quot;,
        {
            headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
            <span class="hljs-keyword">method</span>: &quot;POST&quot;,
            body: <span class="hljs-type">JSON</span>.stringify(data),
        }
    );
    const result = await response.json();
    <span class="hljs-keyword">return</span> result;
}
query({inputs: {past_user_inputs: [&quot;Which movie is the best ?&quot;], generated_responses: [&quot;It is Die Hard for sure.&quot;], <span class="hljs-type">text</span>:&quot;Can you explain why ?&quot;}}).<span class="hljs-keyword">then</span>((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// {&quot;generated_text&quot;:&quot;It&#x27;s the best movie ever.&quot;,&quot;conversation&quot;:{&quot;past_user_inputs&quot;:[&quot;Which movie is the best ?&quot;,&quot;Can you explain why ?&quot;],&quot;generated_responses&quot;:[&quot;It is Die Hard for sure.&quot;,&quot;It&#x27;s the best movie ever.&quot;]},&quot;warnings&quot;:[&quot;Setting \`pad_token_id\` to \`eos_token_id\`:50256 for open-end generation.&quot;]}`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function _L($){let n,c;return n=new R({props:{$$slots:{default:[mL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function $L($){let n,c;return n=new N({props:{code:`curl https://api-inference.huggingface.co/models/microsoft/DialoGPT-large \\
        -X POST \\
        -d '{"inputs": {"past_user_inputs": ["Which movie is the best ?"], "generated_responses": ["It is Die Hard for sure."], "text":"Can you explain why ?"}}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# {"generated_text":"It's the best movie ever.","conversation":{"past_user_inputs":["Which movie is the best ?","Can you explain why ?"],"generated_responses":["It is Die Hard for sure.","It's the best movie ever."]},"warnings":["Setting \`pad_token_id\` to \`eos_token_id\`:50256 for open-end generation."]}`,highlighted:'<span class="hljs-title">curl https:</span>//api-inference.huggingface.co/models/microsoft/DialoGPT-large \\\n        -X POST \\\n        -d &#x27;{<span class="hljs-string">&quot;inputs&quot;</span>: {<span class="hljs-string">&quot;past_user_inputs&quot;</span>: [<span class="hljs-string">&quot;Which movie is the best ?&quot;</span>], <span class="hljs-string">&quot;generated_responses&quot;</span>: [<span class="hljs-string">&quot;It is Die Hard for sure.&quot;</span>], <span class="hljs-string">&quot;text&quot;</span>:<span class="hljs-string">&quot;Can you explain why ?&quot;</span>}}&#x27; \\\n        -H <span class="hljs-string">&quot;Authorization: Bearer ${HF_API_TOKEN}&quot;</span>\n# {<span class="hljs-string">&quot;generated_text&quot;</span>:<span class="hljs-string">&quot;It&#x27;s the best movie ever.&quot;</span>,<span class="hljs-string">&quot;conversation&quot;</span>:{<span class="hljs-string">&quot;past_user_inputs&quot;</span>:[<span class="hljs-string">&quot;Which movie is the best ?&quot;</span>,<span class="hljs-string">&quot;Can you explain why ?&quot;</span>],<span class="hljs-string">&quot;generated_responses&quot;</span>:[<span class="hljs-string">&quot;It is Die Hard for sure.&quot;</span>,<span class="hljs-string">&quot;It&#x27;s the best movie ever.&quot;</span>]},<span class="hljs-string">&quot;warnings&quot;</span>:[<span class="hljs-string">&quot;Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.&quot;</span>]}'}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function qL($){let n,c;return n=new R({props:{$$slots:{default:[$L]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function vL($){let n,c,s,d,_,k,A;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(`:
`),_=r("a"),k=i("google/tapas-base-finetuned-wtq"),A=i("."),this.h()},l(T){n=o(T,"P",{});var j=l(n);c=o(j,"STRONG",{});var O=l(c);s=u(O,"Recommended model"),O.forEach(t),d=u(j,`:
`),_=o(j,"A",{href:!0,rel:!0});var D=l(_);k=u(D,"google/tapas-base-finetuned-wtq"),D.forEach(t),A=u(j,"."),j.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/google/tapas-base-finetuned-wtq"),h(_,"rel","nofollow")},m(T,j){m(T,n,j),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A)},d(T){T&&t(n)}}}function yL($){let n,c;return n=new N({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query(
    {
        "inputs": {
            "query": "How many stars does the transformers repository have?",
            "table": {
                "Repository": ["Transformers", "Datasets", "Tokenizers"],
                "Stars": ["36542", "4512", "3934"],
                "Contributors": ["651", "77", "34"],
                "Programming language": [
                    "Python",
                    "Python",
                    "Rust, Python and NodeJS",
                ],
            },
        }
    }
)`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(
    {
        <span class="hljs-string">&quot;inputs&quot;</span>: {
            <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;How many stars does the transformers repository have?&quot;</span>,
            <span class="hljs-string">&quot;table&quot;</span>: {
                <span class="hljs-string">&quot;Repository&quot;</span>: [<span class="hljs-string">&quot;Transformers&quot;</span>, <span class="hljs-string">&quot;Datasets&quot;</span>, <span class="hljs-string">&quot;Tokenizers&quot;</span>],
                <span class="hljs-string">&quot;Stars&quot;</span>: [<span class="hljs-string">&quot;36542&quot;</span>, <span class="hljs-string">&quot;4512&quot;</span>, <span class="hljs-string">&quot;3934&quot;</span>],
                <span class="hljs-string">&quot;Contributors&quot;</span>: [<span class="hljs-string">&quot;651&quot;</span>, <span class="hljs-string">&quot;77&quot;</span>, <span class="hljs-string">&quot;34&quot;</span>],
                <span class="hljs-string">&quot;Programming language&quot;</span>: [
                    <span class="hljs-string">&quot;Python&quot;</span>,
                    <span class="hljs-string">&quot;Python&quot;</span>,
                    <span class="hljs-string">&quot;Rust, Python and NodeJS&quot;</span>,
                ],
            },
        }
    }
)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function EL($){let n,c;return n=new R({props:{$$slots:{default:[yL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function wL($){let n,c;return n=new N({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs:{query:"How many stars does the transformers repository have?",table:{Repository:["Transformers","Datasets","Tokenizers"],Stars:["36542","4512","3934"],Contributors:["651","77","34"],"Programming language":["Python","Python","Rust, Python and NodeJS"]}}}).then((response) => {
    console.log(JSON.stringify(response));
});
// {"answer":"AVERAGE > 36542","coordinates":[[0,1]],"cells":["36542"],"aggregator":"AVERAGE"}`,highlighted:`<span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
async <span class="hljs-keyword">function</span> query(data) {
    const response = await <span class="hljs-keyword">fetch</span>(
        &quot;https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq&quot;,
        {
            headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
            <span class="hljs-keyword">method</span>: &quot;POST&quot;,
            body: <span class="hljs-type">JSON</span>.stringify(data),
        }
    );
    const result = await response.json();
    <span class="hljs-keyword">return</span> result;
}
query({inputs:{query:&quot;How many stars does the transformers repository have?&quot;,<span class="hljs-keyword">table</span>:{Repository:[&quot;Transformers&quot;,&quot;Datasets&quot;,&quot;Tokenizers&quot;],Stars:[&quot;36542&quot;,&quot;4512&quot;,&quot;3934&quot;],Contributors:[&quot;651&quot;,&quot;77&quot;,&quot;34&quot;],&quot;Programming language&quot;:[&quot;Python&quot;,&quot;Python&quot;,&quot;Rust, Python and NodeJS&quot;]}}}).<span class="hljs-keyword">then</span>((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// {&quot;answer&quot;:&quot;AVERAGE &gt; 36542&quot;,&quot;coordinates&quot;:[[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]],&quot;cells&quot;:[&quot;36542&quot;],&quot;aggregator&quot;:&quot;AVERAGE&quot;}`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function bL($){let n,c;return n=new R({props:{$$slots:{default:[wL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function jL($){let n,c;return n=new N({props:{code:`curl https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq \\
        -X POST \\
        -d '{"inputs":{"query":"How many stars does the transformers repository have?","table":{"Repository":["Transformers","Datasets","Tokenizers"],"Stars":["36542","4512","3934"],"Contributors":["651","77","34"],"Programming language":["Python","Python","Rust, Python and NodeJS"]}}}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# {"answer":"AVERAGE > 36542","coordinates":[[0,1]],"cells":["36542"],"aggregator":"AVERAGE"}`,highlighted:`curl https:<span class="hljs-comment">//api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq \\</span>
        -X <span class="hljs-keyword">POST</span> \\
        -<span class="hljs-keyword">d</span> &#x27;{<span class="hljs-string">&quot;inputs&quot;</span>:{<span class="hljs-string">&quot;query&quot;</span>:<span class="hljs-string">&quot;How many stars does the transformers repository have?&quot;</span>,<span class="hljs-string">&quot;table&quot;</span>:{<span class="hljs-string">&quot;Repository&quot;</span>:[<span class="hljs-string">&quot;Transformers&quot;</span>,<span class="hljs-string">&quot;Datasets&quot;</span>,<span class="hljs-string">&quot;Tokenizers&quot;</span>],<span class="hljs-string">&quot;Stars&quot;</span>:[<span class="hljs-string">&quot;36542&quot;</span>,<span class="hljs-string">&quot;4512&quot;</span>,<span class="hljs-string">&quot;3934&quot;</span>],<span class="hljs-string">&quot;Contributors&quot;</span>:[<span class="hljs-string">&quot;651&quot;</span>,<span class="hljs-string">&quot;77&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>],<span class="hljs-string">&quot;Programming language&quot;</span>:[<span class="hljs-string">&quot;Python&quot;</span>,<span class="hljs-string">&quot;Python&quot;</span>,<span class="hljs-string">&quot;Rust, Python and NodeJS&quot;</span>]}}}&#x27; \\
        -<span class="hljs-keyword">H</span> <span class="hljs-string">&quot;Authorization: Bearer \${HF_API_TOKEN}&quot;</span>
# {<span class="hljs-string">&quot;answer&quot;</span>:<span class="hljs-string">&quot;AVERAGE &gt; 36542&quot;</span>,<span class="hljs-string">&quot;coordinates&quot;</span>:[[0,1]],<span class="hljs-string">&quot;cells&quot;</span>:[<span class="hljs-string">&quot;36542&quot;</span>],<span class="hljs-string">&quot;aggregator&quot;</span>:<span class="hljs-string">&quot;AVERAGE&quot;</span>}`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function TL($){let n,c;return n=new R({props:{$$slots:{default:[jL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function kL($){let n,c;return n=new N({props:{code:`self.assertEqual(
    data,
    {
        "answer": "AVERAGE > 36542",
        "coordinates": [[0, 1]],
        "cells": ["36542"],
        "aggregator": "AVERAGE",
    },
)`,highlighted:`self.assertEqual(
    data,
    {
        <span class="hljs-string">&quot;answer&quot;</span>: <span class="hljs-string">&quot;AVERAGE &gt; 36542&quot;</span>,
        <span class="hljs-string">&quot;coordinates&quot;</span>: [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]],
        <span class="hljs-string">&quot;cells&quot;</span>: [<span class="hljs-string">&quot;36542&quot;</span>],
        <span class="hljs-string">&quot;aggregator&quot;</span>: <span class="hljs-string">&quot;AVERAGE&quot;</span>,
    },
)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function AL($){let n,c;return n=new R({props:{$$slots:{default:[kL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function DL($){let n,c,s,d,_,k,A;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(`:
`),_=r("a"),k=i("deepset/roberta-base-squad2"),A=i("."),this.h()},l(T){n=o(T,"P",{});var j=l(n);c=o(j,"STRONG",{});var O=l(c);s=u(O,"Recommended model"),O.forEach(t),d=u(j,`:
`),_=o(j,"A",{href:!0,rel:!0});var D=l(_);k=u(D,"deepset/roberta-base-squad2"),D.forEach(t),A=u(j,"."),j.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/deepset/roberta-base-squad2"),h(_,"rel","nofollow")},m(T,j){m(T,n,j),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A)},d(T){T&&t(n)}}}function OL($){let n,c;return n=new N({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/deepset/roberta-base-squad2"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query(
    {
        "inputs": {
            "question": "What's my name?",
            "context": "My name is Clara and I live in Berkeley.",
        }
    }
)`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/deepset/roberta-base-squad2&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(
    {
        <span class="hljs-string">&quot;inputs&quot;</span>: {
            <span class="hljs-string">&quot;question&quot;</span>: <span class="hljs-string">&quot;What&#x27;s my name?&quot;</span>,
            <span class="hljs-string">&quot;context&quot;</span>: <span class="hljs-string">&quot;My name is Clara and I live in Berkeley.&quot;</span>,
        }
    }
)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function PL($){let n,c;return n=new R({props:{$$slots:{default:[OL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function RL($){let n,c;return n=new N({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/deepset/roberta-base-squad2",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs:{question:"What is my name?",context:"My name is Clara and I live in Berkeley."}}).then((response) => {
    console.log(JSON.stringify(response));
});
// {"score":0.933128833770752,"start":11,"end":16,"answer":"Clara"}`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/deepset/roberta-base-squad2&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>({<span class="hljs-attr">inputs</span>:{<span class="hljs-attr">question</span>:<span class="hljs-string">&quot;What is my name?&quot;</span>,<span class="hljs-attr">context</span>:<span class="hljs-string">&quot;My name is Clara and I live in Berkeley.&quot;</span>}}).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// {&quot;score&quot;:0.933128833770752,&quot;start&quot;:11,&quot;end&quot;:16,&quot;answer&quot;:&quot;Clara&quot;}</span>`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function NL($){let n,c;return n=new R({props:{$$slots:{default:[RL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function xL($){let n,c;return n=new N({props:{code:`curl https://api-inference.huggingface.co/models/deepset/roberta-base-squad2 \\
        -X POST \\
        -d '{"inputs":{"question":"What is my name?","context":"My name is Clara and I live in Berkeley."}}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# {"score":0.933128833770752,"start":11,"end":16,"answer":"Clara"}`,highlighted:`curl https:<span class="hljs-comment">//api-inference.huggingface.co/models/deepset/roberta-base-squad2 \\</span>
        -X <span class="hljs-keyword">POST</span> \\
        -<span class="hljs-keyword">d</span> &#x27;{<span class="hljs-string">&quot;inputs&quot;</span>:{<span class="hljs-string">&quot;question&quot;</span>:<span class="hljs-string">&quot;What is my name?&quot;</span>,<span class="hljs-string">&quot;context&quot;</span>:<span class="hljs-string">&quot;My name is Clara and I live in Berkeley.&quot;</span>}}&#x27; \\
        -<span class="hljs-keyword">H</span> <span class="hljs-string">&quot;Authorization: Bearer \${HF_API_TOKEN}&quot;</span>
# {<span class="hljs-string">&quot;score&quot;</span>:0.933128833770752,<span class="hljs-string">&quot;start&quot;</span>:11,<span class="hljs-string">&quot;end&quot;</span>:16,<span class="hljs-string">&quot;answer&quot;</span>:<span class="hljs-string">&quot;Clara&quot;</span>}`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function SL($){let n,c;return n=new R({props:{$$slots:{default:[xL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function IL($){let n,c;return n=new N({props:{code:`self.assertEqual(
    deep_round(data),
    {"score": 0.9327, "start": 11, "end": 16, "answer": "Clara"},
)`,highlighted:`self.assertEqual(
    deep_round(data),
    {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9327</span>, <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">16</span>, <span class="hljs-string">&quot;answer&quot;</span>: <span class="hljs-string">&quot;Clara&quot;</span>},
)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function HL($){let n,c;return n=new R({props:{$$slots:{default:[IL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function BL($){let n,c,s,d,_,k;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(`:
`),_=r("a"),k=i("distilbert-base-uncased-finetuned-sst-2-english"),this.h()},l(A){n=o(A,"P",{});var T=l(n);c=o(T,"STRONG",{});var j=l(c);s=u(j,"Recommended model"),j.forEach(t),d=u(T,`:
`),_=o(T,"A",{href:!0,rel:!0});var O=l(_);k=u(O,"distilbert-base-uncased-finetuned-sst-2-english"),O.forEach(t),T.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english"),h(_,"rel","nofollow")},m(A,T){m(A,n,T),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k)},d(A){A&&t(n)}}}function CL($){let n,c;return n=new N({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query({"inputs": "I like you. I love you"})`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query({<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;I like you. I love you&quot;</span>})`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function GL($){let n,c;return n=new R({props:{$$slots:{default:[CL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function UL($){let n,c;return n=new N({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs:"I like you. I love you"}).then((response) => {
    console.log(JSON.stringify(response));
});
// [[{"label":"NEGATIVE","score":0.0001261125144083053},{"label":"POSITIVE","score":0.9998738765716553}]]`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>({<span class="hljs-attr">inputs</span>:<span class="hljs-string">&quot;I like you. I love you&quot;</span>}).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// [[{&quot;label&quot;:&quot;NEGATIVE&quot;,&quot;score&quot;:0.0001261125144083053},{&quot;label&quot;:&quot;POSITIVE&quot;,&quot;score&quot;:0.9998738765716553}]]</span>`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function LL($){let n,c;return n=new R({props:{$$slots:{default:[UL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function zL($){let n,c;return n=new N({props:{code:`curl https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english \\
        -X POST \\
        -d '{"inputs":"I like you. I love you"}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [[{"label":"NEGATIVE","score":0.0001261125144083053},{"label":"POSITIVE","score":0.9998738765716553}]]`,highlighted:`curl https:<span class="hljs-comment">//api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english \\
        -X POST \\
        -d &#x27;{&quot;inputs&quot;:&quot;I like you. I love you&quot;}&#x27; \\
        -H &quot;Authorization: Bearer \${HF_API_TOKEN}&quot;</span>
# [[{<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;NEGATIVE&quot;</span>,<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.0001261125144083053</span>},{<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;POSITIVE&quot;</span>,<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.9998738765716553</span>}]]`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function ML($){let n,c;return n=new R({props:{$$slots:{default:[zL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function FL($){let n,c;return n=new N({props:{code:`self.assertEqual(
    deep_round(data),
    [
        [
            {"label": "NEGATIVE", "score": 0.0001},
            {"label": "POSITIVE", "score": 0.9999},
        ]
    ],
)`,highlighted:`self.assertEqual(
    deep_round(data),
    [
        [
            {<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;NEGATIVE&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.0001</span>},
            {<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;POSITIVE&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9999</span>},
        ]
    ],
)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function JL($){let n,c;return n=new R({props:{$$slots:{default:[FL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function KL($){let n,c,s,d,_,k;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(`:
`),_=r("a"),k=i("dbmdz/bert-large-cased-finetuned-conll03-english"),this.h()},l(A){n=o(A,"P",{});var T=l(n);c=o(T,"STRONG",{});var j=l(c);s=u(j,"Recommended model"),j.forEach(t),d=u(T,`:
`),_=o(T,"A",{href:!0,rel:!0});var O=l(_);k=u(O,"dbmdz/bert-large-cased-finetuned-conll03-english"),O.forEach(t),T.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/dbmdz/bert-large-cased-finetuned-conll03-english"),h(_,"rel","nofollow")},m(A,T){m(A,n,T),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k)},d(A){A&&t(n)}}}function WL($){let n,c;return n=new N({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query({"inputs": "My name is Sarah Jessica Parker but you can call me Jessica"})`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query({<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;My name is Sarah Jessica Parker but you can call me Jessica&quot;</span>})`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function YL($){let n,c;return n=new R({props:{$$slots:{default:[WL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function VL($){let n,c;return n=new N({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs:"My name is Sarah Jessica Parker but you can call me Jessica"}).then((response) => {
    console.log(JSON.stringify(response));
});
// [{"entity_group":"PER","score":0.9991337060928345,"word":"Sarah Jessica Parker","start":11,"end":31},{"entity_group":"PER","score":0.9979912042617798,"word":"Jessica","start":52,"end":59}]`,highlighted:`<span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
async <span class="hljs-keyword">function</span> query(data) {
    const response = await <span class="hljs-keyword">fetch</span>(
        &quot;https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english&quot;,
        {
            headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
            <span class="hljs-keyword">method</span>: &quot;POST&quot;,
            body: <span class="hljs-type">JSON</span>.stringify(data),
        }
    );
    const result = await response.json();
    <span class="hljs-keyword">return</span> result;
}
query({inputs:&quot;My name is Sarah Jessica Parker but you can call me Jessica&quot;}).<span class="hljs-keyword">then</span>((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// [{&quot;entity_group&quot;:&quot;PER&quot;,&quot;score&quot;:<span class="hljs-number">0.9991337060928345</span>,&quot;word&quot;:&quot;Sarah Jessica Parker&quot;,&quot;start&quot;:<span class="hljs-number">11</span>,&quot;end&quot;:<span class="hljs-number">31</span>},{&quot;entity_group&quot;:&quot;PER&quot;,&quot;score&quot;:<span class="hljs-number">0.9979912042617798</span>,&quot;word&quot;:&quot;Jessica&quot;,&quot;start&quot;:<span class="hljs-number">52</span>,&quot;end&quot;:<span class="hljs-number">59</span>}]`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function XL($){let n,c;return n=new R({props:{$$slots:{default:[VL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function QL($){let n,c;return n=new N({props:{code:`curl https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english \\
        -X POST \\
        -d '{"inputs":"My name is Sarah Jessica Parker but you can call me Jessica"}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"entity_group":"PER","score":0.9991337060928345,"word":"Sarah Jessica Parker","start":11,"end":31},{"entity_group":"PER","score":0.9979912042617798,"word":"Jessica","start":52,"end":59}]`,highlighted:`curl https:<span class="hljs-comment">//api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english \\
        -X POST \\
        -d &#x27;{&quot;inputs&quot;:&quot;My name is Sarah Jessica Parker but you can call me Jessica&quot;}&#x27; \\
        -H &quot;Authorization: Bearer \${HF_API_TOKEN}&quot;</span>
# [{<span class="hljs-string">&quot;entity_group&quot;</span>:<span class="hljs-string">&quot;PER&quot;</span>,<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.9991337060928345</span>,<span class="hljs-string">&quot;word&quot;</span>:<span class="hljs-string">&quot;Sarah Jessica Parker&quot;</span>,<span class="hljs-string">&quot;start&quot;</span>:<span class="hljs-number">11</span>,<span class="hljs-string">&quot;end&quot;</span>:<span class="hljs-number">31</span>},{<span class="hljs-string">&quot;entity_group&quot;</span>:<span class="hljs-string">&quot;PER&quot;</span>,<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.9979912042617798</span>,<span class="hljs-string">&quot;word&quot;</span>:<span class="hljs-string">&quot;Jessica&quot;</span>,<span class="hljs-string">&quot;start&quot;</span>:<span class="hljs-number">52</span>,<span class="hljs-string">&quot;end&quot;</span>:<span class="hljs-number">59</span>}]`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function ZL($){let n,c;return n=new R({props:{$$slots:{default:[QL]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function ez($){let n,c;return n=new N({props:{code:`self.assertEqual(
    deep_round(data),
    [
        {
            "entity_group": "PER",
            "score": 0.9991,
            "word": "Sarah Jessica Parker",
            "start": 11,
            "end": 31,
        },
        {
            "entity_group": "PER",
            "score": 0.998,
            "word": "Jessica",
            "start": 52,
            "end": 59,
        },
    ],
)`,highlighted:`self.assertEqual(
    deep_round(data),
    [
        {
            <span class="hljs-string">&quot;entity_group&quot;</span>: <span class="hljs-string">&quot;PER&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9991</span>,
            <span class="hljs-string">&quot;word&quot;</span>: <span class="hljs-string">&quot;Sarah Jessica Parker&quot;</span>,
            <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">11</span>,
            <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">31</span>,
        },
        {
            <span class="hljs-string">&quot;entity_group&quot;</span>: <span class="hljs-string">&quot;PER&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.998</span>,
            <span class="hljs-string">&quot;word&quot;</span>: <span class="hljs-string">&quot;Jessica&quot;</span>,
            <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">52</span>,
            <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">59</span>,
        },
    ],
)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function tz($){let n,c;return n=new R({props:{$$slots:{default:[ez]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function sz($){let n,c,s,d,_,k,A;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(": "),_=r("a"),k=i("gpt2"),A=i(" (it\u2019s a simple model, but fun to play with)."),this.h()},l(T){n=o(T,"P",{});var j=l(n);c=o(j,"STRONG",{});var O=l(c);s=u(O,"Recommended model"),O.forEach(t),d=u(j,": "),_=o(j,"A",{href:!0,rel:!0});var D=l(_);k=u(D,"gpt2"),D.forEach(t),A=u(j," (it\u2019s a simple model, but fun to play with)."),j.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/gpt2"),h(_,"rel","nofollow")},m(T,j){m(T,n,j),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A)},d(T){T&&t(n)}}}function az($){let n,c;return n=new N({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/gpt2"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query({"inputs": "The answer to the universe is"})`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/gpt2&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query({<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;The answer to the universe is&quot;</span>})`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function nz($){let n,c;return n=new R({props:{$$slots:{default:[az]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function rz($){let n,c;return n=new N({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/gpt2",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs:"The answer to the universe is"}).then((response) => {
    console.log(JSON.stringify(response));
});
// [{"generated_text":"The answer to the universe is in a different shape (or shapeless) than"}]`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/gpt2&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>({<span class="hljs-attr">inputs</span>:<span class="hljs-string">&quot;The answer to the universe is&quot;</span>}).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// [{&quot;generated_text&quot;:&quot;The answer to the universe is in a different shape (or shapeless) than&quot;}]</span>`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function oz($){let n,c;return n=new R({props:{$$slots:{default:[rz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function lz($){let n,c;return n=new N({props:{code:`curl https://api-inference.huggingface.co/models/gpt2 \\
        -X POST \\
        -d '{"inputs":"The answer to the universe is"}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"generated_text":"The answer to the universe is in a different shape (or shapeless) than"}]`,highlighted:`curl https:<span class="hljs-regexp">//</span>api-inference.huggingface.co<span class="hljs-regexp">/models/g</span>pt2 \\
        -X POST \\
        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;:&quot;The answer to the universe is&quot;}&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer \${HF_API_TOKEN}&quot;</span>
<span class="hljs-comment"># [{&quot;generated_text&quot;:&quot;The answer to the universe is in a different shape (or shapeless) than&quot;}]</span>`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function iz($){let n,c;return n=new R({props:{$$slots:{default:[lz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function uz($){let n,c;return n=new N({props:{code:`data == [
    {
        "generated_text": 'The answer to the universe is that we are the creation of the entire universe," says Fitch.\\n\\nAs of the 1960s, six times as many Americans still make fewer than six bucks ($17) per year on their way to retirement.'
    }
]`,highlighted:`data == [
    {
        <span class="hljs-string">&quot;generated_text&quot;</span>: <span class="hljs-string">&#x27;The answer to the universe is that we are the creation of the entire universe,&quot; says Fitch.\\n\\nAs of the 1960s, six times as many Americans still make fewer than six bucks ($17) per year on their way to retirement.&#x27;</span>
    }
]`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function cz($){let n,c;return n=new R({props:{$$slots:{default:[uz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function pz($){let n,c,s,d,_,k,A;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(`:
`),_=r("a"),k=i("bert-base-uncased"),A=i(" (it\u2019s a simple model, but fun to play with)."),this.h()},l(T){n=o(T,"P",{});var j=l(n);c=o(j,"STRONG",{});var O=l(c);s=u(O,"Recommended model"),O.forEach(t),d=u(j,`:
`),_=o(j,"A",{href:!0,rel:!0});var D=l(_);k=u(D,"bert-base-uncased"),D.forEach(t),A=u(j," (it\u2019s a simple model, but fun to play with)."),j.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/bert-base-uncased"),h(_,"rel","nofollow")},m(T,j){m(T,n,j),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A)},d(T){T&&t(n)}}}function fz($){let n,c;return n=new N({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/bert-base-uncased"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query({"inputs": "The answer to the universe is [MASK]."})`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/bert-base-uncased&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query({<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;The answer to the universe is [MASK].&quot;</span>})`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function hz($){let n,c;return n=new R({props:{$$slots:{default:[fz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function dz($){let n,c;return n=new N({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/bert-base-uncased",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs:"The answer to the universe is [MASK]."}).then((response) => {
    console.log(JSON.stringify(response));
});
// [{"sequence":"the answer to the universe is no.","score":0.16963955760002136,"token":2053,"token_str":"no"},{"sequence":"the answer to the universe is nothing.","score":0.07344776391983032,"token":2498,"token_str":"nothing"},{"sequence":"the answer to the universe is yes.","score":0.05803241208195686,"token":2748,"token_str":"yes"},{"sequence":"the answer to the universe is unknown.","score":0.043957844376564026,"token":4242,"token_str":"unknown"},{"sequence":"the answer to the universe is simple.","score":0.04015745222568512,"token":3722,"token_str":"simple"}]`,highlighted:`<span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
async <span class="hljs-keyword">function</span> query(data) {
    const response = await <span class="hljs-keyword">fetch</span>(
        &quot;https://api-inference.huggingface.co/models/bert-base-uncased&quot;,
        {
            headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
            <span class="hljs-keyword">method</span>: &quot;POST&quot;,
            body: <span class="hljs-type">JSON</span>.stringify(data),
        }
    );
    const result = await response.json();
    <span class="hljs-keyword">return</span> result;
}
query({inputs:&quot;The answer to the universe is [MASK].&quot;}).<span class="hljs-keyword">then</span>((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// [{&quot;sequence&quot;:&quot;the answer to the universe is no.&quot;,&quot;score&quot;:<span class="hljs-number">0.16963955760002136</span>,&quot;token&quot;:<span class="hljs-number">2053</span>,&quot;token_str&quot;:&quot;no&quot;},{&quot;sequence&quot;:&quot;the answer to the universe is nothing.&quot;,&quot;score&quot;:<span class="hljs-number">0.07344776391983032</span>,&quot;token&quot;:<span class="hljs-number">2498</span>,&quot;token_str&quot;:&quot;nothing&quot;},{&quot;sequence&quot;:&quot;the answer to the universe is yes.&quot;,&quot;score&quot;:<span class="hljs-number">0.05803241208195686</span>,&quot;token&quot;:<span class="hljs-number">2748</span>,&quot;token_str&quot;:&quot;yes&quot;},{&quot;sequence&quot;:&quot;the answer to the universe is unknown.&quot;,&quot;score&quot;:<span class="hljs-number">0.043957844376564026</span>,&quot;token&quot;:<span class="hljs-number">4242</span>,&quot;token_str&quot;:&quot;unknown&quot;},{&quot;sequence&quot;:&quot;the answer to the universe is simple.&quot;,&quot;score&quot;:<span class="hljs-number">0.04015745222568512</span>,&quot;token&quot;:<span class="hljs-number">3722</span>,&quot;token_str&quot;:&quot;simple&quot;}]`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function gz($){let n,c;return n=new R({props:{$$slots:{default:[dz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function mz($){let n,c;return n=new N({props:{code:`curl https://api-inference.huggingface.co/models/bert-base-uncased \\
        -X POST \\
        -d '{"inputs":"The answer to the universe is [MASK]."}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"sequence":"the answer to the universe is no.","score":0.16963955760002136,"token":2053,"token_str":"no"},{"sequence":"the answer to the universe is nothing.","score":0.07344776391983032,"token":2498,"token_str":"nothing"},{"sequence":"the answer to the universe is yes.","score":0.05803241208195686,"token":2748,"token_str":"yes"},{"sequence":"the answer to the universe is unknown.","score":0.043957844376564026,"token":4242,"token_str":"unknown"},{"sequence":"the answer to the universe is simple.","score":0.04015745222568512,"token":3722,"token_str":"simple"}]`,highlighted:`curl https://api-inference.huggingface.co/models/bert-base-uncased \\
        -<span class="hljs-type">X</span> <span class="hljs-type">POST</span> \\
        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;:&quot;The answer to the universe is [MASK].&quot;}&#x27;</span> \\
        -<span class="hljs-type">H</span> <span class="hljs-comment">&quot;Authorization: Bearer \${HF_API_TOKEN}&quot;</span>
# [{<span class="hljs-comment">&quot;sequence&quot;</span>:<span class="hljs-comment">&quot;the answer to the universe is no.&quot;</span>,<span class="hljs-comment">&quot;score&quot;</span>:<span class="hljs-number">0.16963955760002136</span>,<span class="hljs-comment">&quot;token&quot;</span>:<span class="hljs-number">2053</span>,<span class="hljs-comment">&quot;token_str&quot;</span>:<span class="hljs-comment">&quot;no&quot;</span>},{<span class="hljs-comment">&quot;sequence&quot;</span>:<span class="hljs-comment">&quot;the answer to the universe is nothing.&quot;</span>,<span class="hljs-comment">&quot;score&quot;</span>:<span class="hljs-number">0.07344776391983032</span>,<span class="hljs-comment">&quot;token&quot;</span>:<span class="hljs-number">2498</span>,<span class="hljs-comment">&quot;token_str&quot;</span>:<span class="hljs-comment">&quot;nothing&quot;</span>},{<span class="hljs-comment">&quot;sequence&quot;</span>:<span class="hljs-comment">&quot;the answer to the universe is yes.&quot;</span>,<span class="hljs-comment">&quot;score&quot;</span>:<span class="hljs-number">0.05803241208195686</span>,<span class="hljs-comment">&quot;token&quot;</span>:<span class="hljs-number">2748</span>,<span class="hljs-comment">&quot;token_str&quot;</span>:<span class="hljs-comment">&quot;yes&quot;</span>},{<span class="hljs-comment">&quot;sequence&quot;</span>:<span class="hljs-comment">&quot;the answer to the universe is unknown.&quot;</span>,<span class="hljs-comment">&quot;score&quot;</span>:<span class="hljs-number">0.043957844376564026</span>,<span class="hljs-comment">&quot;token&quot;</span>:<span class="hljs-number">4242</span>,<span class="hljs-comment">&quot;token_str&quot;</span>:<span class="hljs-comment">&quot;unknown&quot;</span>},{<span class="hljs-comment">&quot;sequence&quot;</span>:<span class="hljs-comment">&quot;the answer to the universe is simple.&quot;</span>,<span class="hljs-comment">&quot;score&quot;</span>:<span class="hljs-number">0.04015745222568512</span>,<span class="hljs-comment">&quot;token&quot;</span>:<span class="hljs-number">3722</span>,<span class="hljs-comment">&quot;token_str&quot;</span>:<span class="hljs-comment">&quot;simple&quot;</span>}]`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function _z($){let n,c;return n=new R({props:{$$slots:{default:[mz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function $z($){let n,c;return n=new N({props:{code:`self.assertEqual(
    deep_round(data),
    [
        {
            "sequence": "the answer to the universe is no.",
            "score": 0.1696,
            "token": 2053,
            "token_str": "no",
        },
        {
            "sequence": "the answer to the universe is nothing.",
            "score": 0.0734,
            "token": 2498,
            "token_str": "nothing",
        },
        {
            "sequence": "the answer to the universe is yes.",
            "score": 0.0580,
            "token": 2748,
            "token_str": "yes",
        },
        {
            "sequence": "the answer to the universe is unknown.",
            "score": 0.044,
            "token": 4242,
            "token_str": "unknown",
        },
        {
            "sequence": "the answer to the universe is simple.",
            "score": 0.0402,
            "token": 3722,
            "token_str": "simple",
        },
    ],
)`,highlighted:`self.assertEqual(
    deep_round(data),
    [
        {
            <span class="hljs-string">&quot;sequence&quot;</span>: <span class="hljs-string">&quot;the answer to the universe is no.&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.1696</span>,
            <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-number">2053</span>,
            <span class="hljs-string">&quot;token_str&quot;</span>: <span class="hljs-string">&quot;no&quot;</span>,
        },
        {
            <span class="hljs-string">&quot;sequence&quot;</span>: <span class="hljs-string">&quot;the answer to the universe is nothing.&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.0734</span>,
            <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-number">2498</span>,
            <span class="hljs-string">&quot;token_str&quot;</span>: <span class="hljs-string">&quot;nothing&quot;</span>,
        },
        {
            <span class="hljs-string">&quot;sequence&quot;</span>: <span class="hljs-string">&quot;the answer to the universe is yes.&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.0580</span>,
            <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-number">2748</span>,
            <span class="hljs-string">&quot;token_str&quot;</span>: <span class="hljs-string">&quot;yes&quot;</span>,
        },
        {
            <span class="hljs-string">&quot;sequence&quot;</span>: <span class="hljs-string">&quot;the answer to the universe is unknown.&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.044</span>,
            <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-number">4242</span>,
            <span class="hljs-string">&quot;token_str&quot;</span>: <span class="hljs-string">&quot;unknown&quot;</span>,
        },
        {
            <span class="hljs-string">&quot;sequence&quot;</span>: <span class="hljs-string">&quot;the answer to the universe is simple.&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.0402</span>,
            <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-number">3722</span>,
            <span class="hljs-string">&quot;token_str&quot;</span>: <span class="hljs-string">&quot;simple&quot;</span>,
        },
    ],
)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function qz($){let n,c;return n=new R({props:{$$slots:{default:[$z]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function vz($){let n,c,s,d,_,k,A;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(": "),_=r("a"),k=i(`Check your
langage`),A=i("."),this.h()},l(T){n=o(T,"P",{});var j=l(n);c=o(j,"STRONG",{});var O=l(c);s=u(O,"Recommended model"),O.forEach(t),d=u(j,": "),_=o(j,"A",{href:!0,rel:!0});var D=l(_);k=u(D,`Check your
langage`),D.forEach(t),A=u(j,"."),j.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/models?pipeline_tag=automatic-speech-recognition"),h(_,"rel","nofollow")},m(T,j){m(T,n,j),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A)},d(T){T&&t(n)}}}function yz($){let n,c,s,d,_,k,A;return{c(){n=r("p"),c=r("strong"),s=i("English"),d=i(`:
`),_=r("a"),k=i("facebook/wav2vec2-large-960h-lv60-self"),A=i("."),this.h()},l(T){n=o(T,"P",{});var j=l(n);c=o(j,"STRONG",{});var O=l(c);s=u(O,"English"),O.forEach(t),d=u(j,`:
`),_=o(j,"A",{href:!0,rel:!0});var D=l(_);k=u(D,"facebook/wav2vec2-large-960h-lv60-self"),D.forEach(t),A=u(j,"."),j.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/facebook/wav2vec2-large-960h-lv60-self"),h(_,"rel","nofollow")},m(T,j){m(T,n,j),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A)},d(T){T&&t(n)}}}function Ez($){let n,c;return n=new N({props:{code:`    import json
    import requests
    headers = {"Authorization": f"Bearer {API_TOKEN}"}
    API_URL = "https://api-inference.huggingface.co/models/facebook/wav2vec2-base-960h"
    def query(filename):
        with open(filename, "rb") as f:
            data = f.read()
        response = requests.request("POST", API_URL, headers=headers, data=data)
        return json.loads(response.content.decode("utf-8"))
    data = query("sample1.flac")`,highlighted:`    <span class="hljs-keyword">import</span> json
    <span class="hljs-keyword">import</span> requests
    headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
    API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/wav2vec2-base-960h&quot;</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">filename</span>):
        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
            data = f.read()
        response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
        <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
    data = query(<span class="hljs-string">&quot;sample1.flac&quot;</span>)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function wz($){let n,c;return n=new R({props:{$$slots:{default:[Ez]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function bz($){let n,c;return n=new N({props:{code:`    import fetch from "node-fetch";
    import fs from "fs";
    async function query(filename) {
        const data = fs.readFileSync(filename);
        const response = await fetch(
            "https://api-inference.huggingface.co/models/facebook/wav2vec2-base-960h",
            {
                headers: { Authorization: \`Bearer \${API_TOKEN}\` },
                method: "POST",
                body: data,
            }
        );
        const result = await response.json();
        return result;
    }
    query("sample1.flac").then((response) => {
        console.log(JSON.stringify(response));
    });
    // {"text":"GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE'LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS"}`,highlighted:`    <span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
    <span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;fs&quot;</span>;
    <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">filename</span>) {
        <span class="hljs-keyword">const</span> data = fs.<span class="hljs-title function_">readFileSync</span>(filename);
        <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
            <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/wav2vec2-base-960h&quot;</span>,
            {
                <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
                <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
                <span class="hljs-attr">body</span>: data,
            }
        );
        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
        <span class="hljs-keyword">return</span> result;
    }
    <span class="hljs-title function_">query</span>(<span class="hljs-string">&quot;sample1.flac&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
    });
    <span class="hljs-comment">// {&quot;text&quot;:&quot;GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE&#x27;LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS&quot;}</span>`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function jz($){let n,c;return n=new R({props:{$$slots:{default:[bz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Tz($){let n,c;return n=new N({props:{code:`    curl https://api-inference.huggingface.co/models/facebook/wav2vec2-base-960h \\
            -X POST \\
            --data-binary '@sample1.flac' \\
            -H "Authorization: Bearer \${HF_API_TOKEN}"
    # {"text":"GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE'LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS"}`,highlighted:`    curl https://api-inference.huggingface.co/models/facebook/wav2vec2-base-<span class="hljs-number">960</span>h \\
            -X POST \\
            --data-binary <span class="hljs-string">&#x27;@sample1.flac&#x27;</span> \\
            -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
    <span class="hljs-comment"># {&quot;text&quot;:&quot;GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE&#x27;LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS&quot;}</span>`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function kz($){let n,c;return n=new R({props:{$$slots:{default:[Tz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Az($){let n,c;return n=new N({props:{code:`    self.assertEqual(
        data,
        {
            "text": "GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE'LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS"
        },
    )`,highlighted:`    self.assertEqual(
        data,
        {
            <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE&#x27;LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS&quot;</span>
        },
    )`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Dz($){let n,c;return n=new R({props:{$$slots:{default:[Az]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Oz($){let n,c,s,d,_,k,A;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(`:
`),_=r("a"),k=i("Sentence-transformers"),A=i("."),this.h()},l(T){n=o(T,"P",{});var j=l(n);c=o(j,"STRONG",{});var O=l(c);s=u(O,"Recommended model"),O.forEach(t),d=u(j,`:
`),_=o(j,"A",{href:!0,rel:!0});var D=l(_);k=u(D,"Sentence-transformers"),D.forEach(t),A=u(j,"."),j.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/sentence-transformers/paraphrase-xlm-r-multilingual-v1"),h(_,"rel","nofollow")},m(T,j){m(T,n,j),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A)},d(T){T&&t(n)}}}function Pz($){let n,c,s,d,_,k,A;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(`:
`),_=r("a"),k=i("superb/hubert-large-superb-er"),A=i("."),this.h()},l(T){n=o(T,"P",{});var j=l(n);c=o(j,"STRONG",{});var O=l(c);s=u(O,"Recommended model"),O.forEach(t),d=u(j,`:
`),_=o(j,"A",{href:!0,rel:!0});var D=l(_);k=u(D,"superb/hubert-large-superb-er"),D.forEach(t),A=u(j,"."),j.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/superb/hubert-large-superb-er"),h(_,"rel","nofollow")},m(T,j){m(T,n,j),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A)},d(T){T&&t(n)}}}function Rz($){let n,c;return n=new N({props:{code:`    import json
    import requests
    headers = {"Authorization": f"Bearer {API_TOKEN}"}
    API_URL = "https://api-inference.huggingface.co/models/superb/hubert-large-superb-er"
    def query(filename):
        with open(filename, "rb") as f:
            data = f.read()
        response = requests.request("POST", API_URL, headers=headers, data=data)
        return json.loads(response.content.decode("utf-8"))
    data = query("sample1.flac")`,highlighted:`    <span class="hljs-keyword">import</span> json
    <span class="hljs-keyword">import</span> requests
    headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
    API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/superb/hubert-large-superb-er&quot;</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">filename</span>):
        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
            data = f.read()
        response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
        <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
    data = query(<span class="hljs-string">&quot;sample1.flac&quot;</span>)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Nz($){let n,c;return n=new R({props:{$$slots:{default:[Rz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function xz($){let n,c;return n=new N({props:{code:`    import fetch from "node-fetch";
    import fs from "fs";
    async function query(filename) {
        const data = fs.readFileSync(filename);
        const response = await fetch(
            "https://api-inference.huggingface.co/models/superb/hubert-large-superb-er",
            {
                headers: { Authorization: \`Bearer \${API_TOKEN}\` },
                method: "POST",
                body: data,
            }
        );
        const result = await response.json();
        return result;
    }
    query("sample1.flac").then((response) => {
        console.log(JSON.stringify(response));
    });
    // [{"score":0.5927661657333374,"label":"neu"},{"score":0.2002529799938202,"label":"hap"},{"score":0.12795612215995789,"label":"ang"},{"score":0.07902472466230392,"label":"sad"}]`,highlighted:`    <span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
    <span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> &quot;fs&quot;;
    async <span class="hljs-keyword">function</span> query(filename) {
        const data = fs.readFileSync(filename);
        const response = await <span class="hljs-keyword">fetch</span>(
            &quot;https://api-inference.huggingface.co/models/superb/hubert-large-superb-er&quot;,
            {
                headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
                <span class="hljs-keyword">method</span>: &quot;POST&quot;,
                body: data,
            }
        );
        const result = await response.json();
        <span class="hljs-keyword">return</span> result;
    }
    query(&quot;sample1.flac&quot;).<span class="hljs-keyword">then</span>((response) =&gt; {
        console.log(<span class="hljs-type">JSON</span>.stringify(response));
    });
    // [{&quot;score&quot;:<span class="hljs-number">0.5927661657333374</span>,&quot;label&quot;:&quot;neu&quot;},{&quot;score&quot;:<span class="hljs-number">0.2002529799938202</span>,&quot;label&quot;:&quot;hap&quot;},{&quot;score&quot;:<span class="hljs-number">0.12795612215995789</span>,&quot;label&quot;:&quot;ang&quot;},{&quot;score&quot;:<span class="hljs-number">0.07902472466230392</span>,&quot;label&quot;:&quot;sad&quot;}]`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Sz($){let n,c;return n=new R({props:{$$slots:{default:[xz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Iz($){let n,c;return n=new N({props:{code:`    curl https://api-inference.huggingface.co/models/superb/hubert-large-superb-er \\
            -X POST \\
            --data-binary '@sample1.flac' \\
            -H "Authorization: Bearer \${HF_API_TOKEN}"
    # [{"score":0.5927661657333374,"label":"neu"},{"score":0.2002529799938202,"label":"hap"},{"score":0.12795612215995789,"label":"ang"},{"score":0.07902472466230392,"label":"sad"}]`,highlighted:`    curl https:<span class="hljs-comment">//api-inference.huggingface.co/models/superb/hubert-large-superb-er \\</span>
            -X POST \\
            --<span class="hljs-keyword">data</span>-binary <span class="hljs-string">&#x27;@sample1.flac&#x27;</span> \\
            -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-subst">\${HF_API_TOKEN}</span>&quot;</span>
    # [{<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.5927661657333374</span>,<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;neu&quot;</span>},{<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.2002529799938202</span>,<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;hap&quot;</span>},{<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.12795612215995789</span>,<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;ang&quot;</span>},{<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.07902472466230392</span>,<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;sad&quot;</span>}]`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Hz($){let n,c;return n=new R({props:{$$slots:{default:[Iz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Bz($){let n,c;return n=new N({props:{code:`    self.assertEqual(
        deep_round(data, 4),
        [
            {"score": 0.5928, "label": "neu"},
            {"score": 0.2003, "label": "hap"},
            {"score": 0.128, "label": "ang"},
            {"score": 0.079, "label": "sad"},
        ],
    )`,highlighted:`    self.assertEqual(
        deep_round(data, <span class="hljs-number">4</span>),
        [
            {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.5928</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;neu&quot;</span>},
            {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.2003</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;hap&quot;</span>},
            {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.128</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;ang&quot;</span>},
            {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.079</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;sad&quot;</span>},
        ],
    )`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Cz($){let n,c;return n=new R({props:{$$slots:{default:[Bz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Gz($){let n,c,s,d,_,k,A;return{c(){n=r("p"),c=r("strong"),s=i("Recommended model"),d=i(`:
`),_=r("a"),k=i("facebook/detr-resnet-50"),A=i("."),this.h()},l(T){n=o(T,"P",{});var j=l(n);c=o(j,"STRONG",{});var O=l(c);s=u(O,"Recommended model"),O.forEach(t),d=u(j,`:
`),_=o(j,"A",{href:!0,rel:!0});var D=l(_);k=u(D,"facebook/detr-resnet-50"),D.forEach(t),A=u(j,"."),j.forEach(t),this.h()},h(){h(_,"href","https://huggingface.co/facebook/detr-resnet-50"),h(_,"rel","nofollow")},m(T,j){m(T,n,j),e(n,c),e(c,s),e(n,d),e(n,_),e(_,k),e(n,A)},d(T){T&&t(n)}}}function Uz($){let n,c;return n=new N({props:{code:`    import json
    import requests
    headers = {"Authorization": f"Bearer {API_TOKEN}"}
    API_URL = "https://api-inference.huggingface.co/models/facebook/detr-resnet-50"
    def query(filename):
        with open(filename, "rb") as f:
            data = f.read()
        response = requests.request("POST", API_URL, headers=headers, data=data)
        return json.loads(response.content.decode("utf-8"))
    data = query("cats.jpg")`,highlighted:`    <span class="hljs-keyword">import</span> json
    <span class="hljs-keyword">import</span> requests
    headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
    API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/detr-resnet-50&quot;</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">filename</span>):
        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
            data = f.read()
        response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
        <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
    data = query(<span class="hljs-string">&quot;cats.jpg&quot;</span>)`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Lz($){let n,c;return n=new R({props:{$$slots:{default:[Uz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function zz($){let n,c;return n=new N({props:{code:`    import fetch from "node-fetch";
    import fs from "fs";
    async function query(filename) {
        const data = fs.readFileSync(filename);
        const response = await fetch(
            "https://api-inference.huggingface.co/models/facebook/detr-resnet-50",
            {
                headers: { Authorization: \`Bearer \${API_TOKEN}\` },
                method: "POST",
                body: data,
            }
        );
        const result = await response.json();
        return result;
    }
    query("cats.jpg").then((response) => {
        console.log(JSON.stringify(response));
    });
    // [{"score":0.9982201457023621,"label":"remote","box":{"xmin":40,"ymin":70,"xmax":175,"ymax":117}},{"score":0.9960021376609802,"label":"remote","box":{"xmin":333,"ymin":72,"xmax":368,"ymax":187}},{"score":0.9954745173454285,"label":"couch","box":{"xmin":0,"ymin":1,"xmax":639,"ymax":473}},{"score":0.9988006353378296,"label":"cat","box":{"xmin":13,"ymin":52,"xmax":314,"ymax":470}},{"score":0.9986783862113953,"label":"cat","box":{"xmin":345,"ymin":23,"xmax":640,"ymax":368}}]`,highlighted:`    <span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
    <span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> &quot;fs&quot;;
    async <span class="hljs-keyword">function</span> query(filename) {
        const data = fs.readFileSync(filename);
        const response = await <span class="hljs-keyword">fetch</span>(
            &quot;https://api-inference.huggingface.co/models/facebook/detr-resnet-50&quot;,
            {
                headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
                <span class="hljs-keyword">method</span>: &quot;POST&quot;,
                body: data,
            }
        );
        const result = await response.json();
        <span class="hljs-keyword">return</span> result;
    }
    query(&quot;cats.jpg&quot;).<span class="hljs-keyword">then</span>((response) =&gt; {
        console.log(<span class="hljs-type">JSON</span>.stringify(response));
    });
    // [{&quot;score&quot;:<span class="hljs-number">0.9982201457023621</span>,&quot;label&quot;:&quot;remote&quot;,&quot;box&quot;:{&quot;xmin&quot;:<span class="hljs-number">40</span>,&quot;ymin&quot;:<span class="hljs-number">70</span>,&quot;xmax&quot;:<span class="hljs-number">175</span>,&quot;ymax&quot;:<span class="hljs-number">117</span>}},{&quot;score&quot;:<span class="hljs-number">0.9960021376609802</span>,&quot;label&quot;:&quot;remote&quot;,&quot;box&quot;:{&quot;xmin&quot;:<span class="hljs-number">333</span>,&quot;ymin&quot;:<span class="hljs-number">72</span>,&quot;xmax&quot;:<span class="hljs-number">368</span>,&quot;ymax&quot;:<span class="hljs-number">187</span>}},{&quot;score&quot;:<span class="hljs-number">0.9954745173454285</span>,&quot;label&quot;:&quot;couch&quot;,&quot;box&quot;:{&quot;xmin&quot;:<span class="hljs-number">0</span>,&quot;ymin&quot;:<span class="hljs-number">1</span>,&quot;xmax&quot;:<span class="hljs-number">639</span>,&quot;ymax&quot;:<span class="hljs-number">473</span>}},{&quot;score&quot;:<span class="hljs-number">0.9988006353378296</span>,&quot;label&quot;:&quot;cat&quot;,&quot;box&quot;:{&quot;xmin&quot;:<span class="hljs-number">13</span>,&quot;ymin&quot;:<span class="hljs-number">52</span>,&quot;xmax&quot;:<span class="hljs-number">314</span>,&quot;ymax&quot;:<span class="hljs-number">470</span>}},{&quot;score&quot;:<span class="hljs-number">0.9986783862113953</span>,&quot;label&quot;:&quot;cat&quot;,&quot;box&quot;:{&quot;xmin&quot;:<span class="hljs-number">345</span>,&quot;ymin&quot;:<span class="hljs-number">23</span>,&quot;xmax&quot;:<span class="hljs-number">640</span>,&quot;ymax&quot;:<span class="hljs-number">368</span>}}]`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Mz($){let n,c;return n=new R({props:{$$slots:{default:[zz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Fz($){let n,c;return n=new N({props:{code:`    curl https://api-inference.huggingface.co/models/facebook/detr-resnet-50 \\
            -X POST \\
            --data-binary '@cats.jpg' \\
            -H "Authorization: Bearer \${HF_API_TOKEN}"
    # [{"score":0.9982201457023621,"label":"remote","box":{"xmin":40,"ymin":70,"xmax":175,"ymax":117}},{"score":0.9960021376609802,"label":"remote","box":{"xmin":333,"ymin":72,"xmax":368,"ymax":187}},{"score":0.9954745173454285,"label":"couch","box":{"xmin":0,"ymin":1,"xmax":639,"ymax":473}},{"score":0.9988006353378296,"label":"cat","box":{"xmin":13,"ymin":52,"xmax":314,"ymax":470}},{"score":0.9986783862113953,"label":"cat","box":{"xmin":345,"ymin":23,"xmax":640,"ymax":368}}]`,highlighted:`    curl https:<span class="hljs-comment">//api-inference.huggingface.co/models/facebook/detr-resnet-50 \\</span>
            -X POST \\
            --<span class="hljs-keyword">data</span>-binary <span class="hljs-string">&#x27;@cats.jpg&#x27;</span> \\
            -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-subst">\${HF_API_TOKEN}</span>&quot;</span>
    # [{<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.9982201457023621</span>,<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;remote&quot;</span>,<span class="hljs-string">&quot;box&quot;</span>:{<span class="hljs-string">&quot;xmin&quot;</span>:<span class="hljs-number">40</span>,<span class="hljs-string">&quot;ymin&quot;</span>:<span class="hljs-number">70</span>,<span class="hljs-string">&quot;xmax&quot;</span>:<span class="hljs-number">175</span>,<span class="hljs-string">&quot;ymax&quot;</span>:<span class="hljs-number">117</span>}},{<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.9960021376609802</span>,<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;remote&quot;</span>,<span class="hljs-string">&quot;box&quot;</span>:{<span class="hljs-string">&quot;xmin&quot;</span>:<span class="hljs-number">333</span>,<span class="hljs-string">&quot;ymin&quot;</span>:<span class="hljs-number">72</span>,<span class="hljs-string">&quot;xmax&quot;</span>:<span class="hljs-number">368</span>,<span class="hljs-string">&quot;ymax&quot;</span>:<span class="hljs-number">187</span>}},{<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.9954745173454285</span>,<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;couch&quot;</span>,<span class="hljs-string">&quot;box&quot;</span>:{<span class="hljs-string">&quot;xmin&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;ymin&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;xmax&quot;</span>:<span class="hljs-number">639</span>,<span class="hljs-string">&quot;ymax&quot;</span>:<span class="hljs-number">473</span>}},{<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.9988006353378296</span>,<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;box&quot;</span>:{<span class="hljs-string">&quot;xmin&quot;</span>:<span class="hljs-number">13</span>,<span class="hljs-string">&quot;ymin&quot;</span>:<span class="hljs-number">52</span>,<span class="hljs-string">&quot;xmax&quot;</span>:<span class="hljs-number">314</span>,<span class="hljs-string">&quot;ymax&quot;</span>:<span class="hljs-number">470</span>}},{<span class="hljs-string">&quot;score&quot;</span>:<span class="hljs-number">0.9986783862113953</span>,<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;box&quot;</span>:{<span class="hljs-string">&quot;xmin&quot;</span>:<span class="hljs-number">345</span>,<span class="hljs-string">&quot;ymin&quot;</span>:<span class="hljs-number">23</span>,<span class="hljs-string">&quot;xmax&quot;</span>:<span class="hljs-number">640</span>,<span class="hljs-string">&quot;ymax&quot;</span>:<span class="hljs-number">368</span>}}]`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Jz($){let n,c;return n=new R({props:{$$slots:{default:[Fz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Kz($){let n,c;return n=new N({props:{code:`    self.assertEqual(
        deep_round(data, 4),
        [
            {
                "score": 0.9982,
                "label": "remote",
                "box": {"xmin": 40, "ymin": 70, "xmax": 175, "ymax": 117},
            },
            {
                "score": 0.9960,
                "label": "remote",
                "box": {"xmin": 333, "ymin": 72, "xmax": 368, "ymax": 187},
            },
            {
                "score": 0.9955,
                "label": "couch",
                "box": {"xmin": 0, "ymin": 1, "xmax": 639, "ymax": 473},
            },
            {
                "score": 0.9988,
                "label": "cat",
                "box": {"xmin": 13, "ymin": 52, "xmax": 314, "ymax": 470},
            },
            {
                "score": 0.9987,
                "label": "cat",
                "box": {"xmin": 345, "ymin": 23, "xmax": 640, "ymax": 368},
            },
        ],
    )`,highlighted:`    self.assertEqual(
        deep_round(data, <span class="hljs-number">4</span>),
        [
            {
                <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9982</span>,
                <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;remote&quot;</span>,
                <span class="hljs-string">&quot;box&quot;</span>: {<span class="hljs-string">&quot;xmin&quot;</span>: <span class="hljs-number">40</span>, <span class="hljs-string">&quot;ymin&quot;</span>: <span class="hljs-number">70</span>, <span class="hljs-string">&quot;xmax&quot;</span>: <span class="hljs-number">175</span>, <span class="hljs-string">&quot;ymax&quot;</span>: <span class="hljs-number">117</span>},
            },
            {
                <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9960</span>,
                <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;remote&quot;</span>,
                <span class="hljs-string">&quot;box&quot;</span>: {<span class="hljs-string">&quot;xmin&quot;</span>: <span class="hljs-number">333</span>, <span class="hljs-string">&quot;ymin&quot;</span>: <span class="hljs-number">72</span>, <span class="hljs-string">&quot;xmax&quot;</span>: <span class="hljs-number">368</span>, <span class="hljs-string">&quot;ymax&quot;</span>: <span class="hljs-number">187</span>},
            },
            {
                <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9955</span>,
                <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;couch&quot;</span>,
                <span class="hljs-string">&quot;box&quot;</span>: {<span class="hljs-string">&quot;xmin&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;ymin&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;xmax&quot;</span>: <span class="hljs-number">639</span>, <span class="hljs-string">&quot;ymax&quot;</span>: <span class="hljs-number">473</span>},
            },
            {
                <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9988</span>,
                <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;cat&quot;</span>,
                <span class="hljs-string">&quot;box&quot;</span>: {<span class="hljs-string">&quot;xmin&quot;</span>: <span class="hljs-number">13</span>, <span class="hljs-string">&quot;ymin&quot;</span>: <span class="hljs-number">52</span>, <span class="hljs-string">&quot;xmax&quot;</span>: <span class="hljs-number">314</span>, <span class="hljs-string">&quot;ymax&quot;</span>: <span class="hljs-number">470</span>},
            },
            {
                <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9987</span>,
                <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;cat&quot;</span>,
                <span class="hljs-string">&quot;box&quot;</span>: {<span class="hljs-string">&quot;xmin&quot;</span>: <span class="hljs-number">345</span>, <span class="hljs-string">&quot;ymin&quot;</span>: <span class="hljs-number">23</span>, <span class="hljs-string">&quot;xmax&quot;</span>: <span class="hljs-number">640</span>, <span class="hljs-string">&quot;ymax&quot;</span>: <span class="hljs-number">368</span>},
            },
        ],
    )`}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p:P,i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Wz($){let n,c;return n=new R({props:{$$slots:{default:[Kz]},$$scope:{ctx:$}}}),{c(){q(n.$$.fragment)},l(s){v(n.$$.fragment,s)},m(s,d){y(n,s,d),c=!0},p(s,d){const _={};d&2&&(_.$$scope={dirty:d,ctx:s}),n.$set(_)},i(s){c||(E(n.$$.fragment,s),c=!0)},o(s){w(n.$$.fragment,s),c=!1},d(s){b(n,s)}}}function Yz($){let n,c,s,d,_,k,A,T,j,O,D,ne,Re,Q,W,at,Fl,Na,Ne,bw,o$,Jl,jw,l$,nt,bR,i$,rt,jR,u$,xe,ot,eh,xa,Tw,th,kw,c$,Kl,Aw,p$,lt,f$,Sa,Dw,Ia,Ow,h$,Wl,Pw,d$,it,g$,Yl,Rw,m$,ut,sh,Ha,Vl,Nw,xw,ah,Sw,z,Ba,Ca,nh,Iw,Hw,Bw,Xl,Cw,Gw,Ga,Ua,rh,Uw,Lw,zw,Ql,Mw,Fw,La,Zl,Jw,Kw,he,Ww,oh,Yw,Vw,lh,Xw,Qw,Zw,za,ei,eb,tb,ct,sb,ih,ab,nb,rb,Ma,ti,uh,ob,lb,si,ib,ub,Fa,ai,cb,pb,pt,fb,ch,hb,db,gb,Ja,ni,mb,_b,ft,$b,ph,qb,vb,yb,Ka,ri,Eb,wb,ht,bb,fh,jb,Tb,_$,oi,kb,$$,li,Ab,q$,dt,v$,gt,hh,Wa,ii,Db,Ob,dh,Pb,Se,Ya,ui,gh,Rb,Nb,ci,xb,Sb,Va,pi,mh,Ib,Hb,fi,Bb,Cb,Xa,hi,_h,Gb,Ub,mt,Lb,$h,zb,Mb,y$,Ie,_t,qh,Qa,Fb,vh,Jb,E$,di,Kb,w$,$t,b$,Za,Wb,en,Yb,j$,gi,Vb,T$,qt,k$,mi,Xb,A$,vt,yh,tn,_i,Qb,Zb,Eh,ej,Z,sn,an,wh,tj,sj,aj,$i,nj,rj,nn,qi,bh,oj,lj,vi,ij,uj,rn,yi,cj,pj,yt,fj,jh,hj,dj,gj,on,Ei,mj,_j,Et,$j,Th,qj,vj,yj,ln,wi,Ej,wj,wt,bj,kh,jj,Tj,D$,bi,kj,O$,bt,Ah,un,ji,Aj,Dj,Dh,Oj,Oh,cn,Ti,Ph,Pj,Rj,ki,Nj,P$,He,jt,Rh,pn,xj,Nh,Sj,R$,Tt,Ij,Ai,Hj,Bj,N$,kt,x$,fn,Cj,hn,Gj,S$,Di,Uj,I$,At,H$,Oi,Lj,B$,Dt,xh,dn,Pi,zj,Mj,Sh,Fj,G,gn,mn,Ih,Jj,Kj,Wj,Ri,Yj,Vj,_n,Ni,Hh,Xj,Qj,xi,Zj,e0,$n,Si,t0,s0,de,a0,Bh,n0,r0,Ch,o0,l0,i0,qn,Ii,u0,c0,ge,p0,Gh,f0,h0,Uh,d0,g0,m0,vn,Hi,_0,$0,me,q0,Lh,v0,y0,zh,E0,w0,b0,yn,Bi,j0,T0,re,k0,Mh,A0,D0,Fh,O0,P0,Jh,R0,N0,x0,En,Ci,S0,I0,_e,H0,Kh,B0,C0,Wh,G0,U0,L0,wn,Gi,z0,M0,Ot,F0,Yh,J0,K0,W0,bn,Ui,Y0,V0,Pt,X0,Vh,Q0,Z0,eT,jn,Li,Xh,tT,sT,zi,aT,nT,Tn,Mi,rT,oT,Rt,lT,Qh,iT,uT,cT,kn,Fi,pT,fT,Nt,hT,Zh,dT,gT,mT,An,Ji,_T,$T,xt,qT,ed,vT,yT,C$,Ki,ET,G$,St,td,Dn,Wi,wT,bT,sd,jT,ad,On,Yi,nd,TT,kT,Vi,AT,U$,Be,It,rd,Pn,DT,od,OT,L$,Xi,PT,z$,Ht,M$,Rn,RT,Nn,NT,F$,Qi,xT,J$,Bt,K$,Zi,ST,W$,Ct,ld,xn,eu,IT,HT,id,BT,x,Sn,In,ud,CT,GT,UT,cd,LT,Hn,tu,zT,MT,su,FT,JT,Bn,au,KT,WT,nu,YT,VT,Cn,ru,XT,QT,Gt,ZT,pd,e3,t3,s3,Gn,ou,fd,a3,n3,lu,r3,o3,Un,iu,l3,i3,$e,u3,hd,c3,p3,dd,f3,h3,d3,Ln,uu,g3,m3,qe,_3,gd,$3,q3,md,v3,y3,E3,zn,cu,w3,b3,ve,j3,_d,T3,k3,$d,A3,D3,O3,Mn,pu,P3,R3,oe,N3,qd,x3,S3,vd,I3,H3,yd,B3,C3,G3,Fn,fu,U3,L3,ye,z3,Ed,M3,F3,wd,J3,K3,W3,Jn,hu,Y3,V3,Ut,X3,bd,Q3,Z3,e5,Kn,du,t5,s5,Lt,a5,jd,n5,r5,o5,Wn,gu,Td,l5,i5,mu,u5,c5,Yn,_u,p5,f5,zt,h5,kd,d5,g5,m5,Vn,$u,_5,$5,Mt,q5,Ad,v5,y5,E5,Xn,qu,w5,b5,Ft,j5,Dd,T5,k5,Y$,vu,A5,V$,Jt,Od,Qn,yu,D5,O5,Pd,P5,ie,Zn,Eu,Rd,R5,N5,wu,x5,S5,er,bu,Nd,I5,H5,ju,B5,C5,tr,Tu,G5,U5,ku,L5,z5,sr,Au,M5,F5,Du,J5,X$,Ce,Kt,xd,ar,K5,Sd,W5,Q$,Ou,Y5,Z$,Wt,eq,nr,V5,rr,X5,tq,Pu,Q5,sq,Yt,aq,Ru,Z5,nq,Vt,Id,or,Nu,ek,tk,Hd,sk,J,lr,ir,Bd,ak,nk,rk,Cd,ok,ur,xu,lk,ik,Su,uk,ck,cr,Iu,pk,fk,Hu,hk,dk,pr,Bu,Gd,gk,mk,Cu,_k,$k,fr,Gu,qk,vk,Xt,yk,Ud,Ek,wk,bk,hr,Uu,jk,Tk,Qt,kk,Ld,Ak,Dk,Ok,dr,Lu,Pk,Rk,Zt,Nk,zd,xk,Sk,rq,zu,Ik,oq,es,lq,ts,Md,gr,Mu,Hk,Bk,Fd,Ck,ue,mr,Fu,Jd,Gk,Uk,Ju,Lk,zk,_r,Ku,Kd,Mk,Fk,Wu,Jk,Kk,$r,Yu,Wd,Wk,Yk,Vu,Vk,Xk,qr,Xu,Yd,Qk,Zk,Qu,e4,iq,Ge,ss,Vd,vr,t4,Xd,s4,uq,Zu,a4,cq,as,pq,Ue,n4,yr,r4,o4,Er,l4,fq,ec,i4,hq,ns,dq,tc,u4,gq,sc,c4,mq,rs,_q,os,Qd,wr,ac,p4,f4,Zd,h4,ce,br,nc,eg,d4,g4,rc,m4,_4,jr,oc,tg,$4,q4,lc,v4,y4,Tr,ic,sg,E4,w4,ls,b4,ag,j4,T4,k4,kr,uc,ng,A4,D4,is,O4,rg,P4,R4,$q,Le,us,og,Ar,N4,lg,x4,qq,cc,S4,vq,cs,yq,Dr,I4,Or,H4,Eq,pc,B4,wq,ps,bq,fc,C4,jq,fs,ig,Pr,hc,G4,U4,ug,L4,ee,Rr,Nr,cg,z4,M4,F4,dc,J4,K4,xr,gc,pg,W4,Y4,mc,V4,X4,Sr,_c,Q4,Z4,hs,e7,fg,t7,s7,a7,Ir,$c,n7,r7,ds,o7,hg,l7,i7,u7,Hr,qc,c7,p7,gs,f7,dg,h7,d7,Tq,vc,g7,kq,ms,Aq,_s,gg,Br,yc,m7,_7,mg,$7,Cr,Gr,Ec,_g,q7,v7,wc,y7,E7,Ur,bc,$g,w7,b7,jc,j7,Dq,ze,$s,qg,Lr,T7,vg,k7,Oq,zr,A7,Tc,D7,Pq,Me,qs,yg,Mr,O7,Eg,P7,Rq,kc,R7,Nq,vs,xq,Fe,N7,Fr,x7,S7,Jr,I7,Sq,Ac,H7,Iq,ys,Hq,Dc,B7,Bq,Es,wg,Kr,Oc,C7,G7,bg,U7,K,Wr,Yr,jg,L7,z7,M7,Pc,F7,J7,Vr,Rc,Tg,K7,W7,Nc,Y7,V7,Xr,xc,X7,Q7,S,Z7,kg,e6,t6,s6,a6,Ag,n6,r6,o6,l6,Dg,i6,u6,c6,p6,Og,f6,h6,Pg,d6,g6,m6,_6,Rg,$6,q6,Ng,v6,y6,E6,w6,xg,b6,j6,Sg,T6,k6,A6,Qr,Sc,Ig,D6,O6,Ic,P6,R6,Zr,Hc,N6,x6,ws,S6,Hg,I6,H6,B6,eo,Bc,C6,G6,bs,U6,Bg,L6,z6,M6,to,Cc,F6,J6,js,K6,Cg,W6,Y6,Cq,Gc,V6,Gq,Ts,Uq,ks,Gg,so,Uc,X6,Q6,Ug,Z6,te,ao,Lc,Lg,e9,t9,zc,s9,a9,no,Mc,zg,n9,r9,Fc,o9,l9,ro,Jc,Mg,i9,u9,Kc,c9,p9,oo,Wc,Fg,f9,h9,As,d9,Jg,g9,m9,_9,lo,Yc,Kg,$9,q9,Ds,v9,Wg,y9,E9,Lq,Je,Os,Yg,io,w9,Vg,b9,zq,Vc,j9,Mq,Ps,Fq,uo,T9,co,k9,Jq,Xc,A9,Kq,Rs,Wq,Qc,D9,Yq,Ns,Xg,po,Zc,O9,P9,Qg,R9,I,fo,ho,Zg,N9,x9,S9,ep,I9,H9,go,tp,em,B9,C9,sp,G9,U9,mo,ap,L9,z9,Ee,M9,tm,F9,J9,sm,K9,W9,Y9,_o,np,V9,X9,le,Q9,am,Z9,e8,nm,t8,s8,rm,a8,n8,r8,$o,rp,o8,l8,we,i8,om,u8,c8,lm,p8,f8,h8,qo,op,d8,g8,xs,m8,im,_8,$8,q8,vo,lp,v8,y8,be,E8,um,w8,b8,cm,j8,T8,k8,yo,ip,A8,D8,je,O8,pm,P8,R8,fm,N8,x8,S8,Eo,up,I8,H8,Te,B8,hm,C8,G8,dm,U8,L8,z8,wo,cp,M8,F8,Ss,J8,gm,K8,W8,Y8,bo,pp,V8,X8,Is,Q8,mm,Z8,eA,tA,jo,fp,_m,sA,aA,hp,nA,rA,To,dp,oA,lA,Hs,iA,$m,uA,cA,pA,ko,gp,fA,hA,Bs,dA,qm,gA,mA,_A,Ao,mp,$A,qA,Cs,vA,vm,yA,EA,Vq,_p,wA,Xq,Gs,Qq,Us,ym,Do,$p,bA,jA,Em,TA,wm,Oo,qp,bm,kA,AA,vp,DA,Zq,Ke,Ls,jm,Po,OA,Tm,PA,e1,zs,RA,yp,NA,xA,t1,We,Ms,km,Ro,SA,Am,IA,s1,Ep,HA,a1,Fs,n1,No,BA,xo,CA,r1,wp,GA,o1,Js,l1,bp,UA,i1,Ks,Dm,So,jp,LA,zA,Om,MA,se,Io,Ho,Pm,FA,JA,KA,Tp,WA,YA,Bo,kp,Rm,VA,XA,Ap,QA,ZA,Co,Dp,eD,tD,Ws,sD,Nm,aD,nD,rD,Go,Op,oD,lD,Ys,iD,xm,uD,cD,pD,Uo,Pp,fD,hD,Vs,dD,Sm,gD,mD,u1,Rp,_D,c1,Xs,p1,Qs,Im,Lo,Np,$D,qD,Hm,vD,pe,zo,xp,Bm,yD,ED,Sp,wD,bD,Mo,Ip,Cm,jD,TD,Hp,kD,AD,Fo,Bp,Gm,DD,OD,Cp,PD,RD,Jo,Gp,Um,ND,xD,Up,SD,f1,Ye,Zs,Lm,Ko,ID,zm,HD,h1,Lp,BD,d1,ea,g1,ta,m1,fe,CD,Wo,GD,UD,Yo,LD,zD,Vo,MD,_1,zp,FD,$1,sa,q1,Mp,JD,v1,aa,Mm,Xo,Fp,KD,WD,Fm,YD,Jm,Qo,Zo,Km,VD,XD,QD,Jp,ZD,y1,Kp,eO,E1,Wp,tO,w1,na,b1,ra,Wm,el,Yp,sO,aO,Ym,nO,Vm,tl,Vp,Xm,rO,oO,Xp,lO,j1,Ve,oa,Qm,sl,iO,Zm,uO,T1,Qp,cO,k1,la,A1,Xe,pO,al,fO,hO,nl,dO,D1,Zp,gO,O1,ia,e_,rl,ef,mO,_O,t_,$O,ae,ol,ll,s_,qO,vO,yO,tf,EO,wO,il,sf,a_,bO,jO,af,TO,kO,ul,nf,AO,DO,ua,OO,n_,PO,RO,NO,cl,rf,xO,SO,ca,IO,r_,HO,BO,CO,pl,of,GO,UO,pa,LO,o_,zO,MO,P1,lf,FO,R1,fa,l_,fl,uf,JO,KO,i_,WO,u_,hl,cf,c_,YO,VO,pf,XO,N1,ff,QO,x1,Qe,ha,p_,dl,ZO,f_,eP,S1,hf,tP,I1,da,H1,Ze,sP,gl,aP,nP,ml,rP,B1,df,oP,C1,ga,G1,gf,lP,U1,ma,h_,_l,mf,iP,uP,d_,cP,g_,$l,ql,m_,pP,fP,hP,_f,dP,L1,$f,gP,z1,_a,M1,$a,__,vl,qf,mP,_P,$_,$P,yl,El,vf,q_,qP,vP,yf,yP,EP,wl,Ef,v_,wP,bP,wf,jP,F1,et,qa,y_,bl,TP,E_,kP,J1,bf,AP,K1,va,W1,jl,DP,Tl,OP,Y1,jf,PP,V1,ya,X1,Ea,RP,kl,NP,xP,Q1,wa,w_,Al,Tf,SP,IP,b_,HP,j_,Dl,Ol,T_,BP,CP,GP,kf,UP,Z1,Af,LP,ev,ba,tv,ja,k_,Pl,Df,zP,MP,A_,FP,tt,Rl,Of,D_,JP,KP,Pf,WP,YP,Nl,Rf,O_,VP,XP,Nf,QP,ZP,xl,xf,P_,eR,tR,Sf,sR,sv;return k=new F({}),Q=new F({}),xa=new F({}),lt=new Y({props:{$$slots:{default:[MU]},$$scope:{ctx:$}}}),it=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[VU],js:[WU],python:[JU]},$$scope:{ctx:$}}}),dt=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[QU]},$$scope:{ctx:$}}}),Qa=new F({}),$t=new Y({props:{$$slots:{default:[ZU]},$$scope:{ctx:$}}}),qt=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[rL],js:[aL],python:[tL]},$$scope:{ctx:$}}}),pn=new F({}),kt=new Y({props:{$$slots:{default:[oL]},$$scope:{ctx:$}}}),At=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[fL],js:[cL],python:[iL]},$$scope:{ctx:$}}}),Pn=new F({}),Ht=new Y({props:{$$slots:{default:[hL]},$$scope:{ctx:$}}}),Bt=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[qL],js:[_L],python:[gL]},$$scope:{ctx:$}}}),ar=new F({}),Wt=new Y({props:{$$slots:{default:[vL]},$$scope:{ctx:$}}}),Yt=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[TL],js:[bL],python:[EL]},$$scope:{ctx:$}}}),es=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[AL]},$$scope:{ctx:$}}}),vr=new F({}),as=new Y({props:{$$slots:{default:[DL]},$$scope:{ctx:$}}}),ns=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[SL],js:[NL],python:[PL]},$$scope:{ctx:$}}}),rs=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[HL]},$$scope:{ctx:$}}}),Ar=new F({}),cs=new Y({props:{$$slots:{default:[BL]},$$scope:{ctx:$}}}),ps=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[ML],js:[LL],python:[GL]},$$scope:{ctx:$}}}),ms=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[JL]},$$scope:{ctx:$}}}),Lr=new F({}),Mr=new F({}),vs=new Y({props:{$$slots:{default:[KL]},$$scope:{ctx:$}}}),ys=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[ZL],js:[XL],python:[YL]},$$scope:{ctx:$}}}),Ts=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[tz]},$$scope:{ctx:$}}}),io=new F({}),Ps=new Y({props:{$$slots:{default:[sz]},$$scope:{ctx:$}}}),Rs=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[iz],js:[oz],python:[nz]},$$scope:{ctx:$}}}),Gs=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[cz]},$$scope:{ctx:$}}}),Po=new F({}),Ro=new F({}),Fs=new Y({props:{$$slots:{default:[pz]},$$scope:{ctx:$}}}),Js=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[_z],js:[gz],python:[hz]},$$scope:{ctx:$}}}),Xs=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[qz]},$$scope:{ctx:$}}}),Ko=new F({}),ea=new Y({props:{$$slots:{default:[vz]},$$scope:{ctx:$}}}),ta=new Y({props:{$$slots:{default:[yz]},$$scope:{ctx:$}}}),sa=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[kz],js:[jz],python:[wz]},$$scope:{ctx:$}}}),na=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[Dz]},$$scope:{ctx:$}}}),sl=new F({}),la=new Y({props:{$$slots:{default:[Oz]},$$scope:{ctx:$}}}),dl=new F({}),da=new Y({props:{$$slots:{default:[Pz]},$$scope:{ctx:$}}}),ga=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[Hz],js:[Sz],python:[Nz]},$$scope:{ctx:$}}}),_a=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[Cz]},$$scope:{ctx:$}}}),bl=new F({}),va=new Y({props:{$$slots:{default:[Gz]},$$scope:{ctx:$}}}),ya=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[Jz],js:[Mz],python:[Lz]},$$scope:{ctx:$}}}),ba=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[Wz]},$$scope:{ctx:$}}}),{c(){n=r("meta"),c=p(),s=r("h1"),d=r("a"),_=r("span"),q(k.$$.fragment),A=p(),T=r("span"),j=i("Detailed parameters"),O=p(),D=r("h2"),ne=r("a"),Re=r("span"),q(Q.$$.fragment),W=p(),at=r("span"),Fl=i("Which task is used by this model ?"),Na=p(),Ne=r("p"),bw=i(`In general the \u{1F917} Hosted API Inference accepts a simple string as an
input. However, more advanced usage depends on the \u201Ctask\u201D that the
model solves.`),o$=p(),Jl=r("p"),jw=i("The \u201Ctask\u201D of a model is defined here on it\u2019s model page:"),l$=p(),nt=r("img"),i$=p(),rt=r("img"),u$=p(),xe=r("h2"),ot=r("a"),eh=r("span"),q(xa.$$.fragment),Tw=p(),th=r("span"),kw=i("Zero-shot classification task"),c$=p(),Kl=r("p"),Aw=i(`This task is a super useful to try it out classification with zero code,
you simply pass a sentence/paragraph and the possible labels for that
sentence and you get a result.`),p$=p(),q(lt.$$.fragment),f$=p(),Sa=r("p"),Dw=i("Available with: "),Ia=r("a"),Ow=i("\u{1F917} Transformers"),h$=p(),Wl=r("p"),Pw=i("Request:"),d$=p(),q(it.$$.fragment),g$=p(),Yl=r("p"),Rw=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),m$=p(),ut=r("table"),sh=r("thead"),Ha=r("tr"),Vl=r("th"),Nw=i("All parameters"),xw=p(),ah=r("th"),Sw=p(),z=r("tbody"),Ba=r("tr"),Ca=r("td"),nh=r("strong"),Iw=i("inputs"),Hw=i(" (required)"),Bw=p(),Xl=r("td"),Cw=i("a string or list of strings"),Gw=p(),Ga=r("tr"),Ua=r("td"),rh=r("strong"),Uw=i("parameters"),Lw=i(" (required)"),zw=p(),Ql=r("td"),Mw=i("a dict containing the following keys:"),Fw=p(),La=r("tr"),Zl=r("td"),Jw=i("candidate_labels (required)"),Kw=p(),he=r("td"),Ww=i("a list of strings that are potential classes for "),oh=r("code"),Yw=i("inputs"),Vw=i(". (max 10 candidate_labels, for more, simply run multiple requests, results are going to be misleading if using too many candidate_labels anyway. If you want to keep the exact same, you can simply run "),lh=r("code"),Xw=i("multi_label=True"),Qw=i(" and do the scaling on your end. )"),Zw=p(),za=r("tr"),ei=r("td"),eb=i("multi_label"),tb=p(),ct=r("td"),sb=i("(Default: "),ih=r("code"),ab=i("false"),nb=i(") Boolean that is set to True if classes can overlap"),rb=p(),Ma=r("tr"),ti=r("td"),uh=r("strong"),ob=i("options"),lb=p(),si=r("td"),ib=i("a dict containing the following keys:"),ub=p(),Fa=r("tr"),ai=r("td"),cb=i("use_gpu"),pb=p(),pt=r("td"),fb=i("(Default: "),ch=r("code"),hb=i("false"),db=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),gb=p(),Ja=r("tr"),ni=r("td"),mb=i("use_cache"),_b=p(),ft=r("td"),$b=i("(Default: "),ph=r("code"),qb=i("true"),vb=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),yb=p(),Ka=r("tr"),ri=r("td"),Eb=i("wait_for_model"),wb=p(),ht=r("td"),bb=i("(Default: "),fh=r("code"),jb=i("false"),Tb=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),_$=p(),oi=r("p"),kb=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),$$=p(),li=r("p"),Ab=i("Response:"),q$=p(),q(dt.$$.fragment),v$=p(),gt=r("table"),hh=r("thead"),Wa=r("tr"),ii=r("th"),Db=i("Returned values"),Ob=p(),dh=r("th"),Pb=p(),Se=r("tbody"),Ya=r("tr"),ui=r("td"),gh=r("strong"),Rb=i("sequence"),Nb=p(),ci=r("td"),xb=i("The string sent as an input"),Sb=p(),Va=r("tr"),pi=r("td"),mh=r("strong"),Ib=i("labels"),Hb=p(),fi=r("td"),Bb=i("The list of strings for labels that you sent (in order)"),Cb=p(),Xa=r("tr"),hi=r("td"),_h=r("strong"),Gb=i("scores"),Ub=p(),mt=r("td"),Lb=i("a list of floats that correspond the the probability of label, in the same order as "),$h=r("code"),zb=i("labels"),Mb=i("."),y$=p(),Ie=r("h2"),_t=r("a"),qh=r("span"),q(Qa.$$.fragment),Fb=p(),vh=r("span"),Jb=i("Translation task"),E$=p(),di=r("p"),Kb=i("This task is well known to translate text from one language to another"),w$=p(),q($t.$$.fragment),b$=p(),Za=r("p"),Wb=i("Available with: "),en=r("a"),Yb=i("\u{1F917} Transformers"),j$=p(),gi=r("p"),Vb=i("Example:"),T$=p(),q(qt.$$.fragment),k$=p(),mi=r("p"),Xb=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),A$=p(),vt=r("table"),yh=r("thead"),tn=r("tr"),_i=r("th"),Qb=i("All parameters"),Zb=p(),Eh=r("th"),ej=p(),Z=r("tbody"),sn=r("tr"),an=r("td"),wh=r("strong"),tj=i("inputs"),sj=i(" (required)"),aj=p(),$i=r("td"),nj=i("a string to be translated in the original languages"),rj=p(),nn=r("tr"),qi=r("td"),bh=r("strong"),oj=i("options"),lj=p(),vi=r("td"),ij=i("a dict containing the following keys:"),uj=p(),rn=r("tr"),yi=r("td"),cj=i("use_gpu"),pj=p(),yt=r("td"),fj=i("(Default: "),jh=r("code"),hj=i("false"),dj=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),gj=p(),on=r("tr"),Ei=r("td"),mj=i("use_cache"),_j=p(),Et=r("td"),$j=i("(Default: "),Th=r("code"),qj=i("true"),vj=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),yj=p(),ln=r("tr"),wi=r("td"),Ej=i("wait_for_model"),wj=p(),wt=r("td"),bj=i("(Default: "),kh=r("code"),jj=i("false"),Tj=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),D$=p(),bi=r("p"),kj=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),O$=p(),bt=r("table"),Ah=r("thead"),un=r("tr"),ji=r("th"),Aj=i("Returned values"),Dj=p(),Dh=r("th"),Oj=p(),Oh=r("tbody"),cn=r("tr"),Ti=r("td"),Ph=r("strong"),Pj=i("translation_text"),Rj=p(),ki=r("td"),Nj=i("The string after translation"),P$=p(),He=r("h2"),jt=r("a"),Rh=r("span"),q(pn.$$.fragment),xj=p(),Nh=r("span"),Sj=i("Summarization task"),R$=p(),Tt=r("p"),Ij=i(`This task is well known to summarize text a big text into a small text.
Be careful, some models have a maximum length of input. That means that
the summary cannot handle full books for instance. Be careful when
choosing your model. If you want to discuss you summarization needs,
please get in touch <`),Ai=r("a"),Hj=i("api-enterprise@huggingface.co"),Bj=i(">"),N$=p(),q(kt.$$.fragment),x$=p(),fn=r("p"),Cj=i("Available with: "),hn=r("a"),Gj=i("\u{1F917} Transformers"),S$=p(),Di=r("p"),Uj=i("Example:"),I$=p(),q(At.$$.fragment),H$=p(),Oi=r("p"),Lj=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),B$=p(),Dt=r("table"),xh=r("thead"),dn=r("tr"),Pi=r("th"),zj=i("All parameters"),Mj=p(),Sh=r("th"),Fj=p(),G=r("tbody"),gn=r("tr"),mn=r("td"),Ih=r("strong"),Jj=i("inputs"),Kj=i(" (required)"),Wj=p(),Ri=r("td"),Yj=i("a string to be summarized"),Vj=p(),_n=r("tr"),Ni=r("td"),Hh=r("strong"),Xj=i("parameters"),Qj=p(),xi=r("td"),Zj=i("a dict containing the following keys:"),e0=p(),$n=r("tr"),Si=r("td"),t0=i("min_length"),s0=p(),de=r("td"),a0=i("(Default: "),Bh=r("code"),n0=i("None"),r0=i("). Integer to define the minimum length "),Ch=r("strong"),o0=i("in tokens"),l0=i(" of the output summary."),i0=p(),qn=r("tr"),Ii=r("td"),u0=i("max_length"),c0=p(),ge=r("td"),p0=i("(Default: "),Gh=r("code"),f0=i("None"),h0=i("). Integer to define the maximum length "),Uh=r("strong"),d0=i("in tokens"),g0=i(" of the output summary."),m0=p(),vn=r("tr"),Hi=r("td"),_0=i("top_k"),$0=p(),me=r("td"),q0=i("(Default: "),Lh=r("code"),v0=i("None"),y0=i("). Integer to define the top tokens considered within the "),zh=r("code"),E0=i("sample"),w0=i(" operation to create new text."),b0=p(),yn=r("tr"),Bi=r("td"),j0=i("top_p"),T0=p(),re=r("td"),k0=i("(Default: "),Mh=r("code"),A0=i("None"),D0=i("). Float to define the tokens that are within the "),Fh=r("code"),O0=i("sample"),P0=i(" operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than "),Jh=r("code"),R0=i("top_p"),N0=i("."),x0=p(),En=r("tr"),Ci=r("td"),S0=i("temperature"),I0=p(),_e=r("td"),H0=i("(Default: "),Kh=r("code"),B0=i("1.0"),C0=i("). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means "),Wh=r("code"),G0=i("100.0"),U0=i(" is getting closer to uniform probability."),L0=p(),wn=r("tr"),Gi=r("td"),z0=i("repetition_penalty"),M0=p(),Ot=r("td"),F0=i("(Default: "),Yh=r("code"),J0=i("None"),K0=i("). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."),W0=p(),bn=r("tr"),Ui=r("td"),Y0=i("max_time"),V0=p(),Pt=r("td"),X0=i("(Default: "),Vh=r("code"),Q0=i("None"),Z0=i("). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit."),eT=p(),jn=r("tr"),Li=r("td"),Xh=r("strong"),tT=i("options"),sT=p(),zi=r("td"),aT=i("a dict containing the following keys:"),nT=p(),Tn=r("tr"),Mi=r("td"),rT=i("use_gpu"),oT=p(),Rt=r("td"),lT=i("(Default: "),Qh=r("code"),iT=i("false"),uT=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),cT=p(),kn=r("tr"),Fi=r("td"),pT=i("use_cache"),fT=p(),Nt=r("td"),hT=i("(Default: "),Zh=r("code"),dT=i("true"),gT=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),mT=p(),An=r("tr"),Ji=r("td"),_T=i("wait_for_model"),$T=p(),xt=r("td"),qT=i("(Default: "),ed=r("code"),vT=i("false"),yT=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),C$=p(),Ki=r("p"),ET=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),G$=p(),St=r("table"),td=r("thead"),Dn=r("tr"),Wi=r("th"),wT=i("Returned values"),bT=p(),sd=r("th"),jT=p(),ad=r("tbody"),On=r("tr"),Yi=r("td"),nd=r("strong"),TT=i("summarization_text"),kT=p(),Vi=r("td"),AT=i("The string after translation"),U$=p(),Be=r("h2"),It=r("a"),rd=r("span"),q(Pn.$$.fragment),DT=p(),od=r("span"),OT=i("Conversational task"),L$=p(),Xi=r("p"),PT=i(`This task corresponds to any chatbot like structure. Models tend to have
shorted max_length, so please check with caution when using a given
model if you need long range dependency or not.`),z$=p(),q(Ht.$$.fragment),M$=p(),Rn=r("p"),RT=i("Available with: "),Nn=r("a"),NT=i("\u{1F917} Transformers"),F$=p(),Qi=r("p"),xT=i("Example:"),J$=p(),q(Bt.$$.fragment),K$=p(),Zi=r("p"),ST=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),W$=p(),Ct=r("table"),ld=r("thead"),xn=r("tr"),eu=r("th"),IT=i("All parameters"),HT=p(),id=r("th"),BT=p(),x=r("tbody"),Sn=r("tr"),In=r("td"),ud=r("strong"),CT=i("inputs"),GT=i(" (required)"),UT=p(),cd=r("td"),LT=p(),Hn=r("tr"),tu=r("td"),zT=i("text (required)"),MT=p(),su=r("td"),FT=i("The last input from the user in the conversation."),JT=p(),Bn=r("tr"),au=r("td"),KT=i("generated_responses"),WT=p(),nu=r("td"),YT=i("A list of strings corresponding to the earlier replies from the model."),VT=p(),Cn=r("tr"),ru=r("td"),XT=i("past_user_inputs"),QT=p(),Gt=r("td"),ZT=i("A list of strings corresponding to the earlier replies from the user. Should be of the same length of "),pd=r("code"),e3=i("generated_responses"),t3=i("."),s3=p(),Gn=r("tr"),ou=r("td"),fd=r("strong"),a3=i("parameters"),n3=p(),lu=r("td"),r3=i("a dict containing the following keys:"),o3=p(),Un=r("tr"),iu=r("td"),l3=i("min_length"),i3=p(),$e=r("td"),u3=i("(Default: "),hd=r("code"),c3=i("None"),p3=i("). Integer to define the minimum length "),dd=r("strong"),f3=i("in tokens"),h3=i(" of the output summary."),d3=p(),Ln=r("tr"),uu=r("td"),g3=i("max_length"),m3=p(),qe=r("td"),_3=i("(Default: "),gd=r("code"),$3=i("None"),q3=i("). Integer to define the maximum length "),md=r("strong"),v3=i("in tokens"),y3=i(" of the output summary."),E3=p(),zn=r("tr"),cu=r("td"),w3=i("top_k"),b3=p(),ve=r("td"),j3=i("(Default: "),_d=r("code"),T3=i("None"),k3=i("). Integer to define the top tokens considered within the "),$d=r("code"),A3=i("sample"),D3=i(" operation to create new text."),O3=p(),Mn=r("tr"),pu=r("td"),P3=i("top_p"),R3=p(),oe=r("td"),N3=i("(Default: "),qd=r("code"),x3=i("None"),S3=i("). Float to define the tokens that are within the "),vd=r("code"),I3=i("sample"),H3=i(" operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than "),yd=r("code"),B3=i("top_p"),C3=i("."),G3=p(),Fn=r("tr"),fu=r("td"),U3=i("temperature"),L3=p(),ye=r("td"),z3=i("(Default: "),Ed=r("code"),M3=i("1.0"),F3=i("). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means "),wd=r("code"),J3=i("100.0"),K3=i(" is getting closer to uniform probability."),W3=p(),Jn=r("tr"),hu=r("td"),Y3=i("repetition_penalty"),V3=p(),Ut=r("td"),X3=i("(Default: "),bd=r("code"),Q3=i("None"),Z3=i("). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."),e5=p(),Kn=r("tr"),du=r("td"),t5=i("max_time"),s5=p(),Lt=r("td"),a5=i("(Default: "),jd=r("code"),n5=i("None"),r5=i("). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit."),o5=p(),Wn=r("tr"),gu=r("td"),Td=r("strong"),l5=i("options"),i5=p(),mu=r("td"),u5=i("a dict containing the following keys:"),c5=p(),Yn=r("tr"),_u=r("td"),p5=i("use_gpu"),f5=p(),zt=r("td"),h5=i("(Default: "),kd=r("code"),d5=i("false"),g5=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),m5=p(),Vn=r("tr"),$u=r("td"),_5=i("use_cache"),$5=p(),Mt=r("td"),q5=i("(Default: "),Ad=r("code"),v5=i("true"),y5=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),E5=p(),Xn=r("tr"),qu=r("td"),w5=i("wait_for_model"),b5=p(),Ft=r("td"),j5=i("(Default: "),Dd=r("code"),T5=i("false"),k5=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),Y$=p(),vu=r("p"),A5=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),V$=p(),Jt=r("table"),Od=r("thead"),Qn=r("tr"),yu=r("th"),D5=i("Returned values"),O5=p(),Pd=r("th"),P5=p(),ie=r("tbody"),Zn=r("tr"),Eu=r("td"),Rd=r("strong"),R5=i("generated_text"),N5=p(),wu=r("td"),x5=i("The answer of the bot"),S5=p(),er=r("tr"),bu=r("td"),Nd=r("strong"),I5=i("conversation"),H5=p(),ju=r("td"),B5=i("A facility dictionnary to send back for the next input (with the new user input addition)."),C5=p(),tr=r("tr"),Tu=r("td"),G5=i("past_user_inputs"),U5=p(),ku=r("td"),L5=i("List of strings. The last inputs from the user in the conversation, <em>after the model has run."),z5=p(),sr=r("tr"),Au=r("td"),M5=i("generated_responses"),F5=p(),Du=r("td"),J5=i("List of strings. The last outputs from the model in the conversation, <em>after the model has run."),X$=p(),Ce=r("h2"),Kt=r("a"),xd=r("span"),q(ar.$$.fragment),K5=p(),Sd=r("span"),W5=i("Table question answering task"),Q$=p(),Ou=r("p"),Y5=i(`Don\u2019t know SQL? Don\u2019t want to dive into a large spreadsheet? Ask
questions in plain english!`),Z$=p(),q(Wt.$$.fragment),eq=p(),nr=r("p"),V5=i("Available with: "),rr=r("a"),X5=i("\u{1F917} Transformers"),tq=p(),Pu=r("p"),Q5=i("Example:"),sq=p(),q(Yt.$$.fragment),aq=p(),Ru=r("p"),Z5=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),nq=p(),Vt=r("table"),Id=r("thead"),or=r("tr"),Nu=r("th"),ek=i("All parameters"),tk=p(),Hd=r("th"),sk=p(),J=r("tbody"),lr=r("tr"),ir=r("td"),Bd=r("strong"),ak=i("inputs"),nk=i(" (required)"),rk=p(),Cd=r("td"),ok=p(),ur=r("tr"),xu=r("td"),lk=i("query (required)"),ik=p(),Su=r("td"),uk=i("The query in plain text that you want to ask the table"),ck=p(),cr=r("tr"),Iu=r("td"),pk=i("table (required)"),fk=p(),Hu=r("td"),hk=i("A table of data represented as a dict of list where entries are headers and the lists are all the values, all lists must have the same size."),dk=p(),pr=r("tr"),Bu=r("td"),Gd=r("strong"),gk=i("options"),mk=p(),Cu=r("td"),_k=i("a dict containing the following keys:"),$k=p(),fr=r("tr"),Gu=r("td"),qk=i("use_gpu"),vk=p(),Xt=r("td"),yk=i("(Default: "),Ud=r("code"),Ek=i("false"),wk=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),bk=p(),hr=r("tr"),Uu=r("td"),jk=i("use_cache"),Tk=p(),Qt=r("td"),kk=i("(Default: "),Ld=r("code"),Ak=i("true"),Dk=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),Ok=p(),dr=r("tr"),Lu=r("td"),Pk=i("wait_for_model"),Rk=p(),Zt=r("td"),Nk=i("(Default: "),zd=r("code"),xk=i("false"),Sk=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),rq=p(),zu=r("p"),Ik=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),oq=p(),q(es.$$.fragment),lq=p(),ts=r("table"),Md=r("thead"),gr=r("tr"),Mu=r("th"),Hk=i("Returned values"),Bk=p(),Fd=r("th"),Ck=p(),ue=r("tbody"),mr=r("tr"),Fu=r("td"),Jd=r("strong"),Gk=i("answer"),Uk=p(),Ju=r("td"),Lk=i("The plaintext answer"),zk=p(),_r=r("tr"),Ku=r("td"),Kd=r("strong"),Mk=i("coordinates"),Fk=p(),Wu=r("td"),Jk=i("a list of coordinates of the cells references in the answer"),Kk=p(),$r=r("tr"),Yu=r("td"),Wd=r("strong"),Wk=i("cells"),Yk=p(),Vu=r("td"),Vk=i("a list of coordinates of the cells contents"),Xk=p(),qr=r("tr"),Xu=r("td"),Yd=r("strong"),Qk=i("aggregator"),Zk=p(),Qu=r("td"),e4=i("The aggregator used to get the answer"),iq=p(),Ge=r("h2"),ss=r("a"),Vd=r("span"),q(vr.$$.fragment),t4=p(),Xd=r("span"),s4=i("Question answering task"),uq=p(),Zu=r("p"),a4=i("Want to have a nice know-it-all bot that can answer any questions ?"),cq=p(),q(as.$$.fragment),pq=p(),Ue=r("p"),n4=i("Available with: "),yr=r("a"),r4=i("\u{1F917}Transformers"),o4=i(` and
`),Er=r("a"),l4=i("AllenNLP"),fq=p(),ec=r("p"),i4=i("Example:"),hq=p(),q(ns.$$.fragment),dq=p(),tc=r("p"),u4=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),gq=p(),sc=r("p"),c4=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),mq=p(),q(rs.$$.fragment),_q=p(),os=r("table"),Qd=r("thead"),wr=r("tr"),ac=r("th"),p4=i("Returned values"),f4=p(),Zd=r("th"),h4=p(),ce=r("tbody"),br=r("tr"),nc=r("td"),eg=r("strong"),d4=i("answer"),g4=p(),rc=r("td"),m4=i("A string that\u2019s the answer within the text."),_4=p(),jr=r("tr"),oc=r("td"),tg=r("strong"),$4=i("score"),q4=p(),lc=r("td"),v4=i("A floats that represents how likely that the answer is correct"),y4=p(),Tr=r("tr"),ic=r("td"),sg=r("strong"),E4=i("start"),w4=p(),ls=r("td"),b4=i("The index (string wise) of the start of the answer within "),ag=r("code"),j4=i("context"),T4=i("."),k4=p(),kr=r("tr"),uc=r("td"),ng=r("strong"),A4=i("stop"),D4=p(),is=r("td"),O4=i("The index (string wise) of the stop of the answer within "),rg=r("code"),P4=i("context"),R4=i("."),$q=p(),Le=r("h2"),us=r("a"),og=r("span"),q(Ar.$$.fragment),N4=p(),lg=r("span"),x4=i("Text-classification task"),qq=p(),cc=r("p"),S4=i(`Usually used for sentiment-analysis this will output the likelihood of
classes of an input.`),vq=p(),q(cs.$$.fragment),yq=p(),Dr=r("p"),I4=i("Available with: "),Or=r("a"),H4=i("\u{1F917} Transformers"),Eq=p(),pc=r("p"),B4=i("Example:"),wq=p(),q(ps.$$.fragment),bq=p(),fc=r("p"),C4=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),jq=p(),fs=r("table"),ig=r("thead"),Pr=r("tr"),hc=r("th"),G4=i("All parameters"),U4=p(),ug=r("th"),L4=p(),ee=r("tbody"),Rr=r("tr"),Nr=r("td"),cg=r("strong"),z4=i("inputs"),M4=i(" (required)"),F4=p(),dc=r("td"),J4=i("a string to be classified"),K4=p(),xr=r("tr"),gc=r("td"),pg=r("strong"),W4=i("options"),Y4=p(),mc=r("td"),V4=i("a dict containing the following keys:"),X4=p(),Sr=r("tr"),_c=r("td"),Q4=i("use_gpu"),Z4=p(),hs=r("td"),e7=i("(Default: "),fg=r("code"),t7=i("false"),s7=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),a7=p(),Ir=r("tr"),$c=r("td"),n7=i("use_cache"),r7=p(),ds=r("td"),o7=i("(Default: "),hg=r("code"),l7=i("true"),i7=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),u7=p(),Hr=r("tr"),qc=r("td"),c7=i("wait_for_model"),p7=p(),gs=r("td"),f7=i("(Default: "),dg=r("code"),h7=i("false"),d7=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),Tq=p(),vc=r("p"),g7=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),kq=p(),q(ms.$$.fragment),Aq=p(),_s=r("table"),gg=r("thead"),Br=r("tr"),yc=r("th"),m7=i("Returned values"),_7=p(),mg=r("th"),$7=p(),Cr=r("tbody"),Gr=r("tr"),Ec=r("td"),_g=r("strong"),q7=i("label"),v7=p(),wc=r("td"),y7=i("The label for the class (model specific)"),E7=p(),Ur=r("tr"),bc=r("td"),$g=r("strong"),w7=i("score"),b7=p(),jc=r("td"),j7=i("A floats that represents how likely is that the text belongs the this class."),Dq=p(),ze=r("h2"),$s=r("a"),qg=r("span"),q(Lr.$$.fragment),T7=p(),vg=r("span"),k7=i("Named Entity Recognition (NER) task"),Oq=p(),zr=r("p"),A7=i("See "),Tc=r("a"),D7=i("Token-classification task"),Pq=p(),Me=r("h2"),qs=r("a"),yg=r("span"),q(Mr.$$.fragment),O7=p(),Eg=r("span"),P7=i("Token-classification task"),Rq=p(),kc=r("p"),R7=i(`Usually used for sentence parsing, either grammatical, or Named Entity
Recognition (NER) to understand keywords contained within text.`),Nq=p(),q(vs.$$.fragment),xq=p(),Fe=r("p"),N7=i("Available with: "),Fr=r("a"),x7=i("\u{1F917} Transformers"),S7=i(`,
`),Jr=r("a"),I7=i("Flair"),Sq=p(),Ac=r("p"),H7=i("Example:"),Iq=p(),q(ys.$$.fragment),Hq=p(),Dc=r("p"),B7=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),Bq=p(),Es=r("table"),wg=r("thead"),Kr=r("tr"),Oc=r("th"),C7=i("All parameters"),G7=p(),bg=r("th"),U7=p(),K=r("tbody"),Wr=r("tr"),Yr=r("td"),jg=r("strong"),L7=i("inputs"),z7=i(" (required)"),M7=p(),Pc=r("td"),F7=i("a string to be classified"),J7=p(),Vr=r("tr"),Rc=r("td"),Tg=r("strong"),K7=i("parameters"),W7=p(),Nc=r("td"),Y7=i("a dict containing the following key:"),V7=p(),Xr=r("tr"),xc=r("td"),X7=i("aggregation_strategy"),Q7=p(),S=r("td"),Z7=i("(Default: "),kg=r("code"),e6=i("simple"),t6=i("). There are several aggregation strategies: "),s6=r("br"),a6=p(),Ag=r("code"),n6=i("none"),r6=i(": Every token gets classified without further aggregation. "),o6=r("br"),l6=p(),Dg=r("code"),i6=i("simple"),u6=i(": Entities are grouped according to the default schema (B-, I- tags get merged when the tag is similar). "),c6=r("br"),p6=p(),Og=r("code"),f6=i("first"),h6=i(": Same as the "),Pg=r("code"),d6=i("simple"),g6=i(" strategy except words cannot end up with different tags. Words will use the tag of the first token when there is ambiguity. "),m6=r("br"),_6=p(),Rg=r("code"),$6=i("average"),q6=i(": Same as the "),Ng=r("code"),v6=i("simple"),y6=i(" strategy except words cannot end up with different tags. Scores are averaged across tokens and then the maximum label is applied. "),E6=r("br"),w6=p(),xg=r("code"),b6=i("max"),j6=i(": Same as the "),Sg=r("code"),T6=i("simple"),k6=i(" strategy except words cannot end up with different tags. Word entity will be the token with the maximum score."),A6=p(),Qr=r("tr"),Sc=r("td"),Ig=r("strong"),D6=i("options"),O6=p(),Ic=r("td"),P6=i("a dict containing the following keys:"),R6=p(),Zr=r("tr"),Hc=r("td"),N6=i("use_gpu"),x6=p(),ws=r("td"),S6=i("(Default: "),Hg=r("code"),I6=i("false"),H6=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),B6=p(),eo=r("tr"),Bc=r("td"),C6=i("use_cache"),G6=p(),bs=r("td"),U6=i("(Default: "),Bg=r("code"),L6=i("true"),z6=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),M6=p(),to=r("tr"),Cc=r("td"),F6=i("wait_for_model"),J6=p(),js=r("td"),K6=i("(Default: "),Cg=r("code"),W6=i("false"),Y6=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),Cq=p(),Gc=r("p"),V6=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),Gq=p(),q(Ts.$$.fragment),Uq=p(),ks=r("table"),Gg=r("thead"),so=r("tr"),Uc=r("th"),X6=i("Returned values"),Q6=p(),Ug=r("th"),Z6=p(),te=r("tbody"),ao=r("tr"),Lc=r("td"),Lg=r("strong"),e9=i("entity_group"),t9=p(),zc=r("td"),s9=i("The type for the entity being recognized (model specific)."),a9=p(),no=r("tr"),Mc=r("td"),zg=r("strong"),n9=i("score"),r9=p(),Fc=r("td"),o9=i("How likely the entity was recognized."),l9=p(),ro=r("tr"),Jc=r("td"),Mg=r("strong"),i9=i("word"),u9=p(),Kc=r("td"),c9=i("The string that was captured"),p9=p(),oo=r("tr"),Wc=r("td"),Fg=r("strong"),f9=i("start"),h9=p(),As=r("td"),d9=i("The offset stringwise where the answer is located. Useful to disambiguate if "),Jg=r("code"),g9=i("word"),m9=i(" occurs multiple times."),_9=p(),lo=r("tr"),Yc=r("td"),Kg=r("strong"),$9=i("end"),q9=p(),Ds=r("td"),v9=i("The offset stringwise where the answer is located. Useful to disambiguate if "),Wg=r("code"),y9=i("word"),E9=i(" occurs multiple times."),Lq=p(),Je=r("h2"),Os=r("a"),Yg=r("span"),q(io.$$.fragment),w9=p(),Vg=r("span"),b9=i("Text-generation task"),zq=p(),Vc=r("p"),j9=i("Use to continue text from a prompt. This is a very generic task."),Mq=p(),q(Ps.$$.fragment),Fq=p(),uo=r("p"),T9=i("Available with: "),co=r("a"),k9=i("\u{1F917} Transformers"),Jq=p(),Xc=r("p"),A9=i("Example:"),Kq=p(),q(Rs.$$.fragment),Wq=p(),Qc=r("p"),D9=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),Yq=p(),Ns=r("table"),Xg=r("thead"),po=r("tr"),Zc=r("th"),O9=i("All parameters"),P9=p(),Qg=r("th"),R9=p(),I=r("tbody"),fo=r("tr"),ho=r("td"),Zg=r("strong"),N9=i("inputs"),x9=i(" (required):"),S9=p(),ep=r("td"),I9=i("a string to be generated from"),H9=p(),go=r("tr"),tp=r("td"),em=r("strong"),B9=i("parameters"),C9=p(),sp=r("td"),G9=i("dict containing the following keys:"),U9=p(),mo=r("tr"),ap=r("td"),L9=i("top_k"),z9=p(),Ee=r("td"),M9=i("(Default: "),tm=r("code"),F9=i("None"),J9=i("). Integer to define the top tokens considered within the "),sm=r("code"),K9=i("sample"),W9=i(" operation to create new text."),Y9=p(),_o=r("tr"),np=r("td"),V9=i("top_p"),X9=p(),le=r("td"),Q9=i("(Default: "),am=r("code"),Z9=i("None"),e8=i("). Float to define the tokens that are within the "),nm=r("code"),t8=i("sample"),s8=i(" operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than "),rm=r("code"),a8=i("top_p"),n8=i("."),r8=p(),$o=r("tr"),rp=r("td"),o8=i("temperature"),l8=p(),we=r("td"),i8=i("(Default: "),om=r("code"),u8=i("1.0"),c8=i("). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means "),lm=r("code"),p8=i("100.0"),f8=i(" is getting closer to uniform probability."),h8=p(),qo=r("tr"),op=r("td"),d8=i("repetition_penalty"),g8=p(),xs=r("td"),m8=i("(Default: "),im=r("code"),_8=i("None"),$8=i("). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."),q8=p(),vo=r("tr"),lp=r("td"),v8=i("max_new_tokens"),y8=p(),be=r("td"),E8=i("(Default: "),um=r("code"),w8=i("None"),b8=i("). Int (0-250). The amount of new tokens to be generated, this does "),cm=r("strong"),j8=i("not"),T8=i(" include the input length it is a estimate of the size of generated text you want. Each new tokens slows down the request, so look for balance between response times and length of text generated."),k8=p(),yo=r("tr"),ip=r("td"),A8=i("max_time"),D8=p(),je=r("td"),O8=i("(Default: "),pm=r("code"),P8=i("None"),R8=i("). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit. Use that in combination with "),fm=r("code"),N8=i("max_new_tokens"),x8=i(" for best results."),S8=p(),Eo=r("tr"),up=r("td"),I8=i("return_full_text"),H8=p(),Te=r("td"),B8=i("(Default: "),hm=r("code"),C8=i("True"),G8=i("). Bool. If set to False, the return results will "),dm=r("strong"),U8=i("not"),L8=i(" contain the original query making it easier for prompting."),z8=p(),wo=r("tr"),cp=r("td"),M8=i("num_return_sequences"),F8=p(),Ss=r("td"),J8=i("(Default: "),gm=r("code"),K8=i("1"),W8=i("). Integer. The number of proposition you want to be returned."),Y8=p(),bo=r("tr"),pp=r("td"),V8=i("do_sample"),X8=p(),Is=r("td"),Q8=i("(Optional: "),mm=r("code"),Z8=i("True"),eA=i("). Bool. Whether or not to use sampling, use greedy decoding otherwise."),tA=p(),jo=r("tr"),fp=r("td"),_m=r("strong"),sA=i("options"),aA=p(),hp=r("td"),nA=i("a dict containing the following keys:"),rA=p(),To=r("tr"),dp=r("td"),oA=i("use_gpu"),lA=p(),Hs=r("td"),iA=i("(Default: "),$m=r("code"),uA=i("false"),cA=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),pA=p(),ko=r("tr"),gp=r("td"),fA=i("use_cache"),hA=p(),Bs=r("td"),dA=i("(Default: "),qm=r("code"),gA=i("true"),mA=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),_A=p(),Ao=r("tr"),mp=r("td"),$A=i("wait_for_model"),qA=p(),Cs=r("td"),vA=i("(Default: "),vm=r("code"),yA=i("false"),EA=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),Vq=p(),_p=r("p"),wA=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),Xq=p(),q(Gs.$$.fragment),Qq=p(),Us=r("table"),ym=r("thead"),Do=r("tr"),$p=r("th"),bA=i("Returned values"),jA=p(),Em=r("th"),TA=p(),wm=r("tbody"),Oo=r("tr"),qp=r("td"),bm=r("strong"),kA=i("generated_text"),AA=p(),vp=r("td"),DA=i("The continuated string"),Zq=p(),Ke=r("h2"),Ls=r("a"),jm=r("span"),q(Po.$$.fragment),OA=p(),Tm=r("span"),PA=i("Text2text-generation task"),e1=p(),zs=r("p"),RA=i("Essentially "),yp=r("a"),NA=i("Text-generation task"),xA=i(`. But uses
Encoder-Decoder architecture, so might change in the future for more
options.`),t1=p(),We=r("h2"),Ms=r("a"),km=r("span"),q(Ro.$$.fragment),SA=p(),Am=r("span"),IA=i("Fill mask task"),s1=p(),Ep=r("p"),HA=i(`Tries to fill in a hole with a missing word (token to be precise).
That\u2019s the base task for BERT models.`),a1=p(),q(Fs.$$.fragment),n1=p(),No=r("p"),BA=i("Available with: "),xo=r("a"),CA=i("\u{1F917} Transformers"),r1=p(),wp=r("p"),GA=i("Example:"),o1=p(),q(Js.$$.fragment),l1=p(),bp=r("p"),UA=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),i1=p(),Ks=r("table"),Dm=r("thead"),So=r("tr"),jp=r("th"),LA=i("All parameters"),zA=p(),Om=r("th"),MA=p(),se=r("tbody"),Io=r("tr"),Ho=r("td"),Pm=r("strong"),FA=i("inputs"),JA=i(" (required):"),KA=p(),Tp=r("td"),WA=i("a string to be filled from, must contain the [MASK] token (check model card for exact name of the mask)"),YA=p(),Bo=r("tr"),kp=r("td"),Rm=r("strong"),VA=i("options"),XA=p(),Ap=r("td"),QA=i("a dict containing the following keys:"),ZA=p(),Co=r("tr"),Dp=r("td"),eD=i("use_gpu"),tD=p(),Ws=r("td"),sD=i("(Default: "),Nm=r("code"),aD=i("false"),nD=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),rD=p(),Go=r("tr"),Op=r("td"),oD=i("use_cache"),lD=p(),Ys=r("td"),iD=i("(Default: "),xm=r("code"),uD=i("true"),cD=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),pD=p(),Uo=r("tr"),Pp=r("td"),fD=i("wait_for_model"),hD=p(),Vs=r("td"),dD=i("(Default: "),Sm=r("code"),gD=i("false"),mD=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),u1=p(),Rp=r("p"),_D=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),c1=p(),q(Xs.$$.fragment),p1=p(),Qs=r("table"),Im=r("thead"),Lo=r("tr"),Np=r("th"),$D=i("Returned values"),qD=p(),Hm=r("th"),vD=p(),pe=r("tbody"),zo=r("tr"),xp=r("td"),Bm=r("strong"),yD=i("sequence"),ED=p(),Sp=r("td"),wD=i("The actual sequence of tokens that ran against the model (may contain special tokens)"),bD=p(),Mo=r("tr"),Ip=r("td"),Cm=r("strong"),jD=i("score"),TD=p(),Hp=r("td"),kD=i("The probability for this token."),AD=p(),Fo=r("tr"),Bp=r("td"),Gm=r("strong"),DD=i("token"),OD=p(),Cp=r("td"),PD=i("The id of the token"),RD=p(),Jo=r("tr"),Gp=r("td"),Um=r("strong"),ND=i("token_str"),xD=p(),Up=r("td"),SD=i("The string representation of the token"),f1=p(),Ye=r("h2"),Zs=r("a"),Lm=r("span"),q(Ko.$$.fragment),ID=p(),zm=r("span"),HD=i("Automatic speech recognition task"),h1=p(),Lp=r("p"),BD=i(`This task reads some audio input and outputs the said words within the
audio files.`),d1=p(),q(ea.$$.fragment),g1=p(),q(ta.$$.fragment),m1=p(),fe=r("p"),CD=i("Available with: "),Wo=r("a"),GD=i("\u{1F917} Transformers"),UD=p(),Yo=r("a"),LD=i("ESPnet"),zD=i(` and
`),Vo=r("a"),MD=i("SpeechBrain"),_1=p(),zp=r("p"),FD=i("Request:"),$1=p(),q(sa.$$.fragment),q1=p(),Mp=r("p"),JD=i(`When sending your request, you should send a binary payload that simply
contains your audio file. We try to support most formats (Flac, Wav,
Mp3, Ogg etc...). And we automatically rescale the sampling rate to the
appropriate rate for the given model (usually 16KHz).`),v1=p(),aa=r("table"),Mm=r("thead"),Xo=r("tr"),Fp=r("th"),KD=i("All parameters"),WD=p(),Fm=r("th"),YD=p(),Jm=r("tbody"),Qo=r("tr"),Zo=r("td"),Km=r("strong"),VD=i("no parameter"),XD=i(" (required)"),QD=p(),Jp=r("td"),ZD=i("a binary representation of the audio file. No other parameters are currently allowed."),y1=p(),Kp=r("p"),eO=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),E1=p(),Wp=r("p"),tO=i("Response:"),w1=p(),q(na.$$.fragment),b1=p(),ra=r("table"),Wm=r("thead"),el=r("tr"),Yp=r("th"),sO=i("Returned values"),aO=p(),Ym=r("th"),nO=p(),Vm=r("tbody"),tl=r("tr"),Vp=r("td"),Xm=r("strong"),rO=i("text"),oO=p(),Xp=r("td"),lO=i("The string that was recognized within the audio file."),j1=p(),Ve=r("h2"),oa=r("a"),Qm=r("span"),q(sl.$$.fragment),iO=p(),Zm=r("span"),uO=i("Feature-extraction task"),T1=p(),Qp=r("p"),cO=i(`This task reads some text and outputs raw float values, that usually
consumed as part of a semantic database/semantic search.`),k1=p(),q(la.$$.fragment),A1=p(),Xe=r("p"),pO=i("Available with: "),al=r("a"),fO=i("\u{1F917} Transformers"),hO=p(),nl=r("a"),dO=i("Sentence-transformers"),D1=p(),Zp=r("p"),gO=i("Request:"),O1=p(),ia=r("table"),e_=r("thead"),rl=r("tr"),ef=r("th"),mO=i("All parameters"),_O=p(),t_=r("th"),$O=p(),ae=r("tbody"),ol=r("tr"),ll=r("td"),s_=r("strong"),qO=i("inputs"),vO=i(" (required):"),yO=p(),tf=r("td"),EO=i("a string or a list of strings to get the features from."),wO=p(),il=r("tr"),sf=r("td"),a_=r("strong"),bO=i("options"),jO=p(),af=r("td"),TO=i("a dict containing the following keys:"),kO=p(),ul=r("tr"),nf=r("td"),AO=i("use_gpu"),DO=p(),ua=r("td"),OO=i("(Default: "),n_=r("code"),PO=i("false"),RO=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),NO=p(),cl=r("tr"),rf=r("td"),xO=i("use_cache"),SO=p(),ca=r("td"),IO=i("(Default: "),r_=r("code"),HO=i("true"),BO=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),CO=p(),pl=r("tr"),of=r("td"),GO=i("wait_for_model"),UO=p(),pa=r("td"),LO=i("(Default: "),o_=r("code"),zO=i("false"),MO=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),P1=p(),lf=r("p"),FO=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),R1=p(),fa=r("table"),l_=r("thead"),fl=r("tr"),uf=r("th"),JO=i("Returned values"),KO=p(),i_=r("th"),WO=p(),u_=r("tbody"),hl=r("tr"),cf=r("td"),c_=r("strong"),YO=i("A list of float (or list of list of floats)"),VO=p(),pf=r("td"),XO=i("The numbers that are the representation features of the input."),N1=p(),ff=r("small"),QO=i(`Returned values are a list of floats, or a list of list of floats
(depending on if you sent a string or a list of string, and if the
automatic reduction, usually mean_pooling for instance was applied for
you or not. This should be explained on the model's README.`),x1=p(),Qe=r("h2"),ha=r("a"),p_=r("span"),q(dl.$$.fragment),ZO=p(),f_=r("span"),eP=i("Audio-classification task"),S1=p(),hf=r("p"),tP=i("This task reads some audio input and outputs the likelihood of classes."),I1=p(),q(da.$$.fragment),H1=p(),Ze=r("p"),sP=i("Available with: "),gl=r("a"),aP=i("\u{1F917} Transformers"),nP=p(),ml=r("a"),rP=i("SpeechBrain"),B1=p(),df=r("p"),oP=i("Request:"),C1=p(),q(ga.$$.fragment),G1=p(),gf=r("p"),lP=i(`When sending your request, you should send a binary payload that simply
contains your audio file. We try to support most formats (Flac, Wav,
Mp3, Ogg etc...). And we automatically rescale the sampling rate to the
appropriate rate for the given model (usually 16KHz).`),U1=p(),ma=r("table"),h_=r("thead"),_l=r("tr"),mf=r("th"),iP=i("All parameters"),uP=p(),d_=r("th"),cP=p(),g_=r("tbody"),$l=r("tr"),ql=r("td"),m_=r("strong"),pP=i("no parameter"),fP=i(" (required)"),hP=p(),_f=r("td"),dP=i("a binary representation of the audio file. No other parameters are currently allowed."),L1=p(),$f=r("p"),gP=i("Return value is a dict"),z1=p(),q(_a.$$.fragment),M1=p(),$a=r("table"),__=r("thead"),vl=r("tr"),qf=r("th"),mP=i("Returned values"),_P=p(),$_=r("th"),$P=p(),yl=r("tbody"),El=r("tr"),vf=r("td"),q_=r("strong"),qP=i("label"),vP=p(),yf=r("td"),yP=i("The label for the class (model specific)"),EP=p(),wl=r("tr"),Ef=r("td"),v_=r("strong"),wP=i("score"),bP=p(),wf=r("td"),jP=i("A floats that represents how likely is that the audio file belongs the this class."),F1=p(),et=r("h2"),qa=r("a"),y_=r("span"),q(bl.$$.fragment),TP=p(),E_=r("span"),kP=i("Object-detection task"),J1=p(),bf=r("p"),AP=i(`This task reads some image input and outputs the likelihood of classes &
bounding boxes of detected objects.`),K1=p(),q(va.$$.fragment),W1=p(),jl=r("p"),DP=i("Available with: "),Tl=r("a"),OP=i("\u{1F917} Transformers"),Y1=p(),jf=r("p"),PP=i("Request:"),V1=p(),q(ya.$$.fragment),X1=p(),Ea=r("p"),RP=i(`When sending your request, you should send a binary payload that simply
contains your image file. We support all image formats `),kl=r("a"),NP=i(`Pillow
supports`),xP=i("."),Q1=p(),wa=r("table"),w_=r("thead"),Al=r("tr"),Tf=r("th"),SP=i("All parameters"),IP=p(),b_=r("th"),HP=p(),j_=r("tbody"),Dl=r("tr"),Ol=r("td"),T_=r("strong"),BP=i("no parameter"),CP=i(" (required)"),GP=p(),kf=r("td"),UP=i("a binary representation of the image file. No other parameters are currently allowed."),Z1=p(),Af=r("p"),LP=i("Return value is a dict"),ev=p(),q(ba.$$.fragment),tv=p(),ja=r("table"),k_=r("thead"),Pl=r("tr"),Df=r("th"),zP=i("Returned values"),MP=p(),A_=r("th"),FP=p(),tt=r("tbody"),Rl=r("tr"),Of=r("td"),D_=r("strong"),JP=i("label"),KP=p(),Pf=r("td"),WP=i("The label for the class (model specific) of a detected object."),YP=p(),Nl=r("tr"),Rf=r("td"),O_=r("strong"),VP=i("score"),XP=p(),Nf=r("td"),QP=i("A float that represents how likely it is that the detected object belongs to the given class."),ZP=p(),xl=r("tr"),xf=r("td"),P_=r("strong"),eR=i("box"),tR=p(),Sf=r("td"),sR=i("A dict (with keys [xmin,ymin,xmax,ymax]) representing the bounding box of a detected object."),this.h()},l(a){const g=LU('[data-svelte="svelte-1phssyn"]',document.head);n=o(g,"META",{name:!0,content:!0}),g.forEach(t),c=f(a),s=o(a,"H1",{class:!0});var Sl=l(s);d=o(Sl,"A",{id:!0,class:!0,href:!0});var R_=l(d);_=o(R_,"SPAN",{});var N_=l(_);v(k.$$.fragment,N_),N_.forEach(t),R_.forEach(t),A=f(Sl),T=o(Sl,"SPAN",{});var x_=l(T);j=u(x_,"Detailed parameters"),x_.forEach(t),Sl.forEach(t),O=f(a),D=o(a,"H2",{class:!0});var Il=l(D);ne=o(Il,"A",{id:!0,class:!0,href:!0});var S_=l(ne);Re=o(S_,"SPAN",{});var I_=l(Re);v(Q.$$.fragment,I_),I_.forEach(t),S_.forEach(t),W=f(Il),at=o(Il,"SPAN",{});var H_=l(at);Fl=u(H_,"Which task is used by this model ?"),H_.forEach(t),Il.forEach(t),Na=f(a),Ne=o(a,"P",{});var B_=l(Ne);bw=u(B_,`In general the \u{1F917} Hosted API Inference accepts a simple string as an
input. However, more advanced usage depends on the \u201Ctask\u201D that the
model solves.`),B_.forEach(t),o$=f(a),Jl=o(a,"P",{});var C_=l(Jl);jw=u(C_,"The \u201Ctask\u201D of a model is defined here on it\u2019s model page:"),C_.forEach(t),l$=f(a),nt=o(a,"IMG",{class:!0,src:!0,width:!0}),i$=f(a),rt=o(a,"IMG",{class:!0,src:!0,width:!0}),u$=f(a),xe=o(a,"H2",{class:!0});var Hl=l(xe);ot=o(Hl,"A",{id:!0,class:!0,href:!0});var G_=l(ot);eh=o(G_,"SPAN",{});var U_=l(eh);v(xa.$$.fragment,U_),U_.forEach(t),G_.forEach(t),Tw=f(Hl),th=o(Hl,"SPAN",{});var L_=l(th);kw=u(L_,"Zero-shot classification task"),L_.forEach(t),Hl.forEach(t),c$=f(a),Kl=o(a,"P",{});var z_=l(Kl);Aw=u(z_,`This task is a super useful to try it out classification with zero code,
you simply pass a sentence/paragraph and the possible labels for that
sentence and you get a result.`),z_.forEach(t),p$=f(a),v(lt.$$.fragment,a),f$=f(a),Sa=o(a,"P",{});var If=l(Sa);Dw=u(If,"Available with: "),Ia=o(If,"A",{href:!0,rel:!0});var M_=l(Ia);Ow=u(M_,"\u{1F917} Transformers"),M_.forEach(t),If.forEach(t),h$=f(a),Wl=o(a,"P",{});var F_=l(Wl);Pw=u(F_,"Request:"),F_.forEach(t),d$=f(a),v(it.$$.fragment,a),g$=f(a),Yl=o(a,"P",{});var J_=l(Yl);Rw=u(J_,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),J_.forEach(t),m$=f(a),ut=o(a,"TABLE",{});var Bl=l(ut);sh=o(Bl,"THEAD",{});var K_=l(sh);Ha=o(K_,"TR",{});var Cl=l(Ha);Vl=o(Cl,"TH",{align:!0});var W_=l(Vl);Nw=u(W_,"All parameters"),W_.forEach(t),xw=f(Cl),ah=o(Cl,"TH",{align:!0}),l(ah).forEach(t),Cl.forEach(t),K_.forEach(t),Sw=f(Bl),z=o(Bl,"TBODY",{});var M=l(z);Ba=o(M,"TR",{});var Gl=l(Ba);Ca=o(Gl,"TD",{align:!0});var Hf=l(Ca);nh=o(Hf,"STRONG",{});var Y_=l(nh);Iw=u(Y_,"inputs"),Y_.forEach(t),Hw=u(Hf," (required)"),Hf.forEach(t),Bw=f(Gl),Xl=o(Gl,"TD",{align:!0});var V_=l(Xl);Cw=u(V_,"a string or list of strings"),V_.forEach(t),Gl.forEach(t),Gw=f(M),Ga=o(M,"TR",{});var Ul=l(Ga);Ua=o(Ul,"TD",{align:!0});var Bf=l(Ua);rh=o(Bf,"STRONG",{});var X_=l(rh);Uw=u(X_,"parameters"),X_.forEach(t),Lw=u(Bf," (required)"),Bf.forEach(t),zw=f(Ul),Ql=o(Ul,"TD",{align:!0});var Q_=l(Ql);Mw=u(Q_,"a dict containing the following keys:"),Q_.forEach(t),Ul.forEach(t),Fw=f(M),La=o(M,"TR",{});var Ll=l(La);Zl=o(Ll,"TD",{align:!0});var Z_=l(Zl);Jw=u(Z_,"candidate_labels (required)"),Z_.forEach(t),Kw=f(Ll),he=o(Ll,"TD",{align:!0});var st=l(he);Ww=u(st,"a list of strings that are potential classes for "),oh=o(st,"CODE",{});var e$=l(oh);Yw=u(e$,"inputs"),e$.forEach(t),Vw=u(st,". (max 10 candidate_labels, for more, simply run multiple requests, results are going to be misleading if using too many candidate_labels anyway. If you want to keep the exact same, you can simply run "),lh=o(st,"CODE",{});var t$=l(lh);Xw=u(t$,"multi_label=True"),t$.forEach(t),Qw=u(st," and do the scaling on your end. )"),st.forEach(t),Ll.forEach(t),Zw=f(M),za=o(M,"TR",{});var zl=l(za);ei=o(zl,"TD",{align:!0});var TR=l(ei);eb=u(TR,"multi_label"),TR.forEach(t),tb=f(zl),ct=o(zl,"TD",{align:!0});var av=l(ct);sb=u(av,"(Default: "),ih=o(av,"CODE",{});var kR=l(ih);ab=u(kR,"false"),kR.forEach(t),nb=u(av,") Boolean that is set to True if classes can overlap"),av.forEach(t),zl.forEach(t),rb=f(M),Ma=o(M,"TR",{});var nv=l(Ma);ti=o(nv,"TD",{align:!0});var AR=l(ti);uh=o(AR,"STRONG",{});var DR=l(uh);ob=u(DR,"options"),DR.forEach(t),AR.forEach(t),lb=f(nv),si=o(nv,"TD",{align:!0});var OR=l(si);ib=u(OR,"a dict containing the following keys:"),OR.forEach(t),nv.forEach(t),ub=f(M),Fa=o(M,"TR",{});var rv=l(Fa);ai=o(rv,"TD",{align:!0});var PR=l(ai);cb=u(PR,"use_gpu"),PR.forEach(t),pb=f(rv),pt=o(rv,"TD",{align:!0});var ov=l(pt);fb=u(ov,"(Default: "),ch=o(ov,"CODE",{});var RR=l(ch);hb=u(RR,"false"),RR.forEach(t),db=u(ov,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),ov.forEach(t),rv.forEach(t),gb=f(M),Ja=o(M,"TR",{});var lv=l(Ja);ni=o(lv,"TD",{align:!0});var NR=l(ni);mb=u(NR,"use_cache"),NR.forEach(t),_b=f(lv),ft=o(lv,"TD",{align:!0});var iv=l(ft);$b=u(iv,"(Default: "),ph=o(iv,"CODE",{});var xR=l(ph);qb=u(xR,"true"),xR.forEach(t),vb=u(iv,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),iv.forEach(t),lv.forEach(t),yb=f(M),Ka=o(M,"TR",{});var uv=l(Ka);ri=o(uv,"TD",{align:!0});var SR=l(ri);Eb=u(SR,"wait_for_model"),SR.forEach(t),wb=f(uv),ht=o(uv,"TD",{align:!0});var cv=l(ht);bb=u(cv,"(Default: "),fh=o(cv,"CODE",{});var IR=l(fh);jb=u(IR,"false"),IR.forEach(t),Tb=u(cv,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),cv.forEach(t),uv.forEach(t),M.forEach(t),Bl.forEach(t),_$=f(a),oi=o(a,"P",{});var HR=l(oi);kb=u(HR,"Return value is either a dict or a list of dicts if you sent a list of inputs"),HR.forEach(t),$$=f(a),li=o(a,"P",{});var BR=l(li);Ab=u(BR,"Response:"),BR.forEach(t),q$=f(a),v(dt.$$.fragment,a),v$=f(a),gt=o(a,"TABLE",{});var pv=l(gt);hh=o(pv,"THEAD",{});var CR=l(hh);Wa=o(CR,"TR",{});var fv=l(Wa);ii=o(fv,"TH",{align:!0});var GR=l(ii);Db=u(GR,"Returned values"),GR.forEach(t),Ob=f(fv),dh=o(fv,"TH",{align:!0}),l(dh).forEach(t),fv.forEach(t),CR.forEach(t),Pb=f(pv),Se=o(pv,"TBODY",{});var Cf=l(Se);Ya=o(Cf,"TR",{});var hv=l(Ya);ui=o(hv,"TD",{align:!0});var UR=l(ui);gh=o(UR,"STRONG",{});var LR=l(gh);Rb=u(LR,"sequence"),LR.forEach(t),UR.forEach(t),Nb=f(hv),ci=o(hv,"TD",{align:!0});var zR=l(ci);xb=u(zR,"The string sent as an input"),zR.forEach(t),hv.forEach(t),Sb=f(Cf),Va=o(Cf,"TR",{});var dv=l(Va);pi=o(dv,"TD",{align:!0});var MR=l(pi);mh=o(MR,"STRONG",{});var FR=l(mh);Ib=u(FR,"labels"),FR.forEach(t),MR.forEach(t),Hb=f(dv),fi=o(dv,"TD",{align:!0});var JR=l(fi);Bb=u(JR,"The list of strings for labels that you sent (in order)"),JR.forEach(t),dv.forEach(t),Cb=f(Cf),Xa=o(Cf,"TR",{});var gv=l(Xa);hi=o(gv,"TD",{align:!0});var KR=l(hi);_h=o(KR,"STRONG",{});var WR=l(_h);Gb=u(WR,"scores"),WR.forEach(t),KR.forEach(t),Ub=f(gv),mt=o(gv,"TD",{align:!0});var mv=l(mt);Lb=u(mv,"a list of floats that correspond the the probability of label, in the same order as "),$h=o(mv,"CODE",{});var YR=l($h);zb=u(YR,"labels"),YR.forEach(t),Mb=u(mv,"."),mv.forEach(t),gv.forEach(t),Cf.forEach(t),pv.forEach(t),y$=f(a),Ie=o(a,"H2",{class:!0});var _v=l(Ie);_t=o(_v,"A",{id:!0,class:!0,href:!0});var VR=l(_t);qh=o(VR,"SPAN",{});var XR=l(qh);v(Qa.$$.fragment,XR),XR.forEach(t),VR.forEach(t),Fb=f(_v),vh=o(_v,"SPAN",{});var QR=l(vh);Jb=u(QR,"Translation task"),QR.forEach(t),_v.forEach(t),E$=f(a),di=o(a,"P",{});var ZR=l(di);Kb=u(ZR,"This task is well known to translate text from one language to another"),ZR.forEach(t),w$=f(a),v($t.$$.fragment,a),b$=f(a),Za=o(a,"P",{});var aR=l(Za);Wb=u(aR,"Available with: "),en=o(aR,"A",{href:!0,rel:!0});var eN=l(en);Yb=u(eN,"\u{1F917} Transformers"),eN.forEach(t),aR.forEach(t),j$=f(a),gi=o(a,"P",{});var tN=l(gi);Vb=u(tN,"Example:"),tN.forEach(t),T$=f(a),v(qt.$$.fragment,a),k$=f(a),mi=o(a,"P",{});var sN=l(mi);Xb=u(sN,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),sN.forEach(t),A$=f(a),vt=o(a,"TABLE",{});var $v=l(vt);yh=o($v,"THEAD",{});var aN=l(yh);tn=o(aN,"TR",{});var qv=l(tn);_i=o(qv,"TH",{align:!0});var nN=l(_i);Qb=u(nN,"All parameters"),nN.forEach(t),Zb=f(qv),Eh=o(qv,"TH",{align:!0}),l(Eh).forEach(t),qv.forEach(t),aN.forEach(t),ej=f($v),Z=o($v,"TBODY",{});var ke=l(Z);sn=o(ke,"TR",{});var vv=l(sn);an=o(vv,"TD",{align:!0});var nR=l(an);wh=o(nR,"STRONG",{});var rN=l(wh);tj=u(rN,"inputs"),rN.forEach(t),sj=u(nR," (required)"),nR.forEach(t),aj=f(vv),$i=o(vv,"TD",{align:!0});var oN=l($i);nj=u(oN,"a string to be translated in the original languages"),oN.forEach(t),vv.forEach(t),rj=f(ke),nn=o(ke,"TR",{});var yv=l(nn);qi=o(yv,"TD",{align:!0});var lN=l(qi);bh=o(lN,"STRONG",{});var iN=l(bh);oj=u(iN,"options"),iN.forEach(t),lN.forEach(t),lj=f(yv),vi=o(yv,"TD",{align:!0});var uN=l(vi);ij=u(uN,"a dict containing the following keys:"),uN.forEach(t),yv.forEach(t),uj=f(ke),rn=o(ke,"TR",{});var Ev=l(rn);yi=o(Ev,"TD",{align:!0});var cN=l(yi);cj=u(cN,"use_gpu"),cN.forEach(t),pj=f(Ev),yt=o(Ev,"TD",{align:!0});var wv=l(yt);fj=u(wv,"(Default: "),jh=o(wv,"CODE",{});var pN=l(jh);hj=u(pN,"false"),pN.forEach(t),dj=u(wv,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),wv.forEach(t),Ev.forEach(t),gj=f(ke),on=o(ke,"TR",{});var bv=l(on);Ei=o(bv,"TD",{align:!0});var fN=l(Ei);mj=u(fN,"use_cache"),fN.forEach(t),_j=f(bv),Et=o(bv,"TD",{align:!0});var jv=l(Et);$j=u(jv,"(Default: "),Th=o(jv,"CODE",{});var hN=l(Th);qj=u(hN,"true"),hN.forEach(t),vj=u(jv,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),jv.forEach(t),bv.forEach(t),yj=f(ke),ln=o(ke,"TR",{});var Tv=l(ln);wi=o(Tv,"TD",{align:!0});var dN=l(wi);Ej=u(dN,"wait_for_model"),dN.forEach(t),wj=f(Tv),wt=o(Tv,"TD",{align:!0});var kv=l(wt);bj=u(kv,"(Default: "),kh=o(kv,"CODE",{});var gN=l(kh);jj=u(gN,"false"),gN.forEach(t),Tj=u(kv,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),kv.forEach(t),Tv.forEach(t),ke.forEach(t),$v.forEach(t),D$=f(a),bi=o(a,"P",{});var mN=l(bi);kj=u(mN,"Return value is either a dict or a list of dicts if you sent a list of inputs"),mN.forEach(t),O$=f(a),bt=o(a,"TABLE",{});var Av=l(bt);Ah=o(Av,"THEAD",{});var _N=l(Ah);un=o(_N,"TR",{});var Dv=l(un);ji=o(Dv,"TH",{align:!0});var $N=l(ji);Aj=u($N,"Returned values"),$N.forEach(t),Dj=f(Dv),Dh=o(Dv,"TH",{align:!0}),l(Dh).forEach(t),Dv.forEach(t),_N.forEach(t),Oj=f(Av),Oh=o(Av,"TBODY",{});var qN=l(Oh);cn=o(qN,"TR",{});var Ov=l(cn);Ti=o(Ov,"TD",{align:!0});var vN=l(Ti);Ph=o(vN,"STRONG",{});var yN=l(Ph);Pj=u(yN,"translation_text"),yN.forEach(t),vN.forEach(t),Rj=f(Ov),ki=o(Ov,"TD",{align:!0});var EN=l(ki);Nj=u(EN,"The string after translation"),EN.forEach(t),Ov.forEach(t),qN.forEach(t),Av.forEach(t),P$=f(a),He=o(a,"H2",{class:!0});var Pv=l(He);jt=o(Pv,"A",{id:!0,class:!0,href:!0});var wN=l(jt);Rh=o(wN,"SPAN",{});var bN=l(Rh);v(pn.$$.fragment,bN),bN.forEach(t),wN.forEach(t),xj=f(Pv),Nh=o(Pv,"SPAN",{});var jN=l(Nh);Sj=u(jN,"Summarization task"),jN.forEach(t),Pv.forEach(t),R$=f(a),Tt=o(a,"P",{});var Rv=l(Tt);Ij=u(Rv,`This task is well known to summarize text a big text into a small text.
Be careful, some models have a maximum length of input. That means that
the summary cannot handle full books for instance. Be careful when
choosing your model. If you want to discuss you summarization needs,
please get in touch <`),Ai=o(Rv,"A",{href:!0});var TN=l(Ai);Hj=u(TN,"api-enterprise@huggingface.co"),TN.forEach(t),Bj=u(Rv,">"),Rv.forEach(t),N$=f(a),v(kt.$$.fragment,a),x$=f(a),fn=o(a,"P",{});var rR=l(fn);Cj=u(rR,"Available with: "),hn=o(rR,"A",{href:!0,rel:!0});var kN=l(hn);Gj=u(kN,"\u{1F917} Transformers"),kN.forEach(t),rR.forEach(t),S$=f(a),Di=o(a,"P",{});var AN=l(Di);Uj=u(AN,"Example:"),AN.forEach(t),I$=f(a),v(At.$$.fragment,a),H$=f(a),Oi=o(a,"P",{});var DN=l(Oi);Lj=u(DN,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),DN.forEach(t),B$=f(a),Dt=o(a,"TABLE",{});var Nv=l(Dt);xh=o(Nv,"THEAD",{});var ON=l(xh);dn=o(ON,"TR",{});var xv=l(dn);Pi=o(xv,"TH",{align:!0});var PN=l(Pi);zj=u(PN,"All parameters"),PN.forEach(t),Mj=f(xv),Sh=o(xv,"TH",{align:!0}),l(Sh).forEach(t),xv.forEach(t),ON.forEach(t),Fj=f(Nv),G=o(Nv,"TBODY",{});var U=l(G);gn=o(U,"TR",{});var Sv=l(gn);mn=o(Sv,"TD",{align:!0});var oR=l(mn);Ih=o(oR,"STRONG",{});var RN=l(Ih);Jj=u(RN,"inputs"),RN.forEach(t),Kj=u(oR," (required)"),oR.forEach(t),Wj=f(Sv),Ri=o(Sv,"TD",{align:!0});var NN=l(Ri);Yj=u(NN,"a string to be summarized"),NN.forEach(t),Sv.forEach(t),Vj=f(U),_n=o(U,"TR",{});var Iv=l(_n);Ni=o(Iv,"TD",{align:!0});var xN=l(Ni);Hh=o(xN,"STRONG",{});var SN=l(Hh);Xj=u(SN,"parameters"),SN.forEach(t),xN.forEach(t),Qj=f(Iv),xi=o(Iv,"TD",{align:!0});var IN=l(xi);Zj=u(IN,"a dict containing the following keys:"),IN.forEach(t),Iv.forEach(t),e0=f(U),$n=o(U,"TR",{});var Hv=l($n);Si=o(Hv,"TD",{align:!0});var HN=l(Si);t0=u(HN,"min_length"),HN.forEach(t),s0=f(Hv),de=o(Hv,"TD",{align:!0});var Gf=l(de);a0=u(Gf,"(Default: "),Bh=o(Gf,"CODE",{});var BN=l(Bh);n0=u(BN,"None"),BN.forEach(t),r0=u(Gf,"). Integer to define the minimum length "),Ch=o(Gf,"STRONG",{});var CN=l(Ch);o0=u(CN,"in tokens"),CN.forEach(t),l0=u(Gf," of the output summary."),Gf.forEach(t),Hv.forEach(t),i0=f(U),qn=o(U,"TR",{});var Bv=l(qn);Ii=o(Bv,"TD",{align:!0});var GN=l(Ii);u0=u(GN,"max_length"),GN.forEach(t),c0=f(Bv),ge=o(Bv,"TD",{align:!0});var Uf=l(ge);p0=u(Uf,"(Default: "),Gh=o(Uf,"CODE",{});var UN=l(Gh);f0=u(UN,"None"),UN.forEach(t),h0=u(Uf,"). Integer to define the maximum length "),Uh=o(Uf,"STRONG",{});var LN=l(Uh);d0=u(LN,"in tokens"),LN.forEach(t),g0=u(Uf," of the output summary."),Uf.forEach(t),Bv.forEach(t),m0=f(U),vn=o(U,"TR",{});var Cv=l(vn);Hi=o(Cv,"TD",{align:!0});var zN=l(Hi);_0=u(zN,"top_k"),zN.forEach(t),$0=f(Cv),me=o(Cv,"TD",{align:!0});var Lf=l(me);q0=u(Lf,"(Default: "),Lh=o(Lf,"CODE",{});var MN=l(Lh);v0=u(MN,"None"),MN.forEach(t),y0=u(Lf,"). Integer to define the top tokens considered within the "),zh=o(Lf,"CODE",{});var FN=l(zh);E0=u(FN,"sample"),FN.forEach(t),w0=u(Lf," operation to create new text."),Lf.forEach(t),Cv.forEach(t),b0=f(U),yn=o(U,"TR",{});var Gv=l(yn);Bi=o(Gv,"TD",{align:!0});var JN=l(Bi);j0=u(JN,"top_p"),JN.forEach(t),T0=f(Gv),re=o(Gv,"TD",{align:!0});var Ta=l(re);k0=u(Ta,"(Default: "),Mh=o(Ta,"CODE",{});var KN=l(Mh);A0=u(KN,"None"),KN.forEach(t),D0=u(Ta,"). Float to define the tokens that are within the "),Fh=o(Ta,"CODE",{});var WN=l(Fh);O0=u(WN,"sample"),WN.forEach(t),P0=u(Ta," operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than "),Jh=o(Ta,"CODE",{});var YN=l(Jh);R0=u(YN,"top_p"),YN.forEach(t),N0=u(Ta,"."),Ta.forEach(t),Gv.forEach(t),x0=f(U),En=o(U,"TR",{});var Uv=l(En);Ci=o(Uv,"TD",{align:!0});var VN=l(Ci);S0=u(VN,"temperature"),VN.forEach(t),I0=f(Uv),_e=o(Uv,"TD",{align:!0});var zf=l(_e);H0=u(zf,"(Default: "),Kh=o(zf,"CODE",{});var XN=l(Kh);B0=u(XN,"1.0"),XN.forEach(t),C0=u(zf,"). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means "),Wh=o(zf,"CODE",{});var QN=l(Wh);G0=u(QN,"100.0"),QN.forEach(t),U0=u(zf," is getting closer to uniform probability."),zf.forEach(t),Uv.forEach(t),L0=f(U),wn=o(U,"TR",{});var Lv=l(wn);Gi=o(Lv,"TD",{align:!0});var ZN=l(Gi);z0=u(ZN,"repetition_penalty"),ZN.forEach(t),M0=f(Lv),Ot=o(Lv,"TD",{align:!0});var zv=l(Ot);F0=u(zv,"(Default: "),Yh=o(zv,"CODE",{});var ex=l(Yh);J0=u(ex,"None"),ex.forEach(t),K0=u(zv,"). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."),zv.forEach(t),Lv.forEach(t),W0=f(U),bn=o(U,"TR",{});var Mv=l(bn);Ui=o(Mv,"TD",{align:!0});var tx=l(Ui);Y0=u(tx,"max_time"),tx.forEach(t),V0=f(Mv),Pt=o(Mv,"TD",{align:!0});var Fv=l(Pt);X0=u(Fv,"(Default: "),Vh=o(Fv,"CODE",{});var sx=l(Vh);Q0=u(sx,"None"),sx.forEach(t),Z0=u(Fv,"). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit."),Fv.forEach(t),Mv.forEach(t),eT=f(U),jn=o(U,"TR",{});var Jv=l(jn);Li=o(Jv,"TD",{align:!0});var ax=l(Li);Xh=o(ax,"STRONG",{});var nx=l(Xh);tT=u(nx,"options"),nx.forEach(t),ax.forEach(t),sT=f(Jv),zi=o(Jv,"TD",{align:!0});var rx=l(zi);aT=u(rx,"a dict containing the following keys:"),rx.forEach(t),Jv.forEach(t),nT=f(U),Tn=o(U,"TR",{});var Kv=l(Tn);Mi=o(Kv,"TD",{align:!0});var ox=l(Mi);rT=u(ox,"use_gpu"),ox.forEach(t),oT=f(Kv),Rt=o(Kv,"TD",{align:!0});var Wv=l(Rt);lT=u(Wv,"(Default: "),Qh=o(Wv,"CODE",{});var lx=l(Qh);iT=u(lx,"false"),lx.forEach(t),uT=u(Wv,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),Wv.forEach(t),Kv.forEach(t),cT=f(U),kn=o(U,"TR",{});var Yv=l(kn);Fi=o(Yv,"TD",{align:!0});var ix=l(Fi);pT=u(ix,"use_cache"),ix.forEach(t),fT=f(Yv),Nt=o(Yv,"TD",{align:!0});var Vv=l(Nt);hT=u(Vv,"(Default: "),Zh=o(Vv,"CODE",{});var ux=l(Zh);dT=u(ux,"true"),ux.forEach(t),gT=u(Vv,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),Vv.forEach(t),Yv.forEach(t),mT=f(U),An=o(U,"TR",{});var Xv=l(An);Ji=o(Xv,"TD",{align:!0});var cx=l(Ji);_T=u(cx,"wait_for_model"),cx.forEach(t),$T=f(Xv),xt=o(Xv,"TD",{align:!0});var Qv=l(xt);qT=u(Qv,"(Default: "),ed=o(Qv,"CODE",{});var px=l(ed);vT=u(px,"false"),px.forEach(t),yT=u(Qv,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),Qv.forEach(t),Xv.forEach(t),U.forEach(t),Nv.forEach(t),C$=f(a),Ki=o(a,"P",{});var fx=l(Ki);ET=u(fx,"Return value is either a dict or a list of dicts if you sent a list of inputs"),fx.forEach(t),G$=f(a),St=o(a,"TABLE",{});var Zv=l(St);td=o(Zv,"THEAD",{});var hx=l(td);Dn=o(hx,"TR",{});var e2=l(Dn);Wi=o(e2,"TH",{align:!0});var dx=l(Wi);wT=u(dx,"Returned values"),dx.forEach(t),bT=f(e2),sd=o(e2,"TH",{align:!0}),l(sd).forEach(t),e2.forEach(t),hx.forEach(t),jT=f(Zv),ad=o(Zv,"TBODY",{});var gx=l(ad);On=o(gx,"TR",{});var t2=l(On);Yi=o(t2,"TD",{align:!0});var mx=l(Yi);nd=o(mx,"STRONG",{});var _x=l(nd);TT=u(_x,"summarization_text"),_x.forEach(t),mx.forEach(t),kT=f(t2),Vi=o(t2,"TD",{align:!0});var $x=l(Vi);AT=u($x,"The string after translation"),$x.forEach(t),t2.forEach(t),gx.forEach(t),Zv.forEach(t),U$=f(a),Be=o(a,"H2",{class:!0});var s2=l(Be);It=o(s2,"A",{id:!0,class:!0,href:!0});var qx=l(It);rd=o(qx,"SPAN",{});var vx=l(rd);v(Pn.$$.fragment,vx),vx.forEach(t),qx.forEach(t),DT=f(s2),od=o(s2,"SPAN",{});var yx=l(od);OT=u(yx,"Conversational task"),yx.forEach(t),s2.forEach(t),L$=f(a),Xi=o(a,"P",{});var Ex=l(Xi);PT=u(Ex,`This task corresponds to any chatbot like structure. Models tend to have
shorted max_length, so please check with caution when using a given
model if you need long range dependency or not.`),Ex.forEach(t),z$=f(a),v(Ht.$$.fragment,a),M$=f(a),Rn=o(a,"P",{});var lR=l(Rn);RT=u(lR,"Available with: "),Nn=o(lR,"A",{href:!0,rel:!0});var wx=l(Nn);NT=u(wx,"\u{1F917} Transformers"),wx.forEach(t),lR.forEach(t),F$=f(a),Qi=o(a,"P",{});var bx=l(Qi);xT=u(bx,"Example:"),bx.forEach(t),J$=f(a),v(Bt.$$.fragment,a),K$=f(a),Zi=o(a,"P",{});var jx=l(Zi);ST=u(jx,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),jx.forEach(t),W$=f(a),Ct=o(a,"TABLE",{});var a2=l(Ct);ld=o(a2,"THEAD",{});var Tx=l(ld);xn=o(Tx,"TR",{});var n2=l(xn);eu=o(n2,"TH",{align:!0});var kx=l(eu);IT=u(kx,"All parameters"),kx.forEach(t),HT=f(n2),id=o(n2,"TH",{align:!0}),l(id).forEach(t),n2.forEach(t),Tx.forEach(t),BT=f(a2),x=o(a2,"TBODY",{});var H=l(x);Sn=o(H,"TR",{});var r2=l(Sn);In=o(r2,"TD",{align:!0});var iR=l(In);ud=o(iR,"STRONG",{});var Ax=l(ud);CT=u(Ax,"inputs"),Ax.forEach(t),GT=u(iR," (required)"),iR.forEach(t),UT=f(r2),cd=o(r2,"TD",{align:!0}),l(cd).forEach(t),r2.forEach(t),LT=f(H),Hn=o(H,"TR",{});var o2=l(Hn);tu=o(o2,"TD",{align:!0});var Dx=l(tu);zT=u(Dx,"text (required)"),Dx.forEach(t),MT=f(o2),su=o(o2,"TD",{align:!0});var Ox=l(su);FT=u(Ox,"The last input from the user in the conversation."),Ox.forEach(t),o2.forEach(t),JT=f(H),Bn=o(H,"TR",{});var l2=l(Bn);au=o(l2,"TD",{align:!0});var Px=l(au);KT=u(Px,"generated_responses"),Px.forEach(t),WT=f(l2),nu=o(l2,"TD",{align:!0});var Rx=l(nu);YT=u(Rx,"A list of strings corresponding to the earlier replies from the model."),Rx.forEach(t),l2.forEach(t),VT=f(H),Cn=o(H,"TR",{});var i2=l(Cn);ru=o(i2,"TD",{align:!0});var Nx=l(ru);XT=u(Nx,"past_user_inputs"),Nx.forEach(t),QT=f(i2),Gt=o(i2,"TD",{align:!0});var u2=l(Gt);ZT=u(u2,"A list of strings corresponding to the earlier replies from the user. Should be of the same length of "),pd=o(u2,"CODE",{});var xx=l(pd);e3=u(xx,"generated_responses"),xx.forEach(t),t3=u(u2,"."),u2.forEach(t),i2.forEach(t),s3=f(H),Gn=o(H,"TR",{});var c2=l(Gn);ou=o(c2,"TD",{align:!0});var Sx=l(ou);fd=o(Sx,"STRONG",{});var Ix=l(fd);a3=u(Ix,"parameters"),Ix.forEach(t),Sx.forEach(t),n3=f(c2),lu=o(c2,"TD",{align:!0});var Hx=l(lu);r3=u(Hx,"a dict containing the following keys:"),Hx.forEach(t),c2.forEach(t),o3=f(H),Un=o(H,"TR",{});var p2=l(Un);iu=o(p2,"TD",{align:!0});var Bx=l(iu);l3=u(Bx,"min_length"),Bx.forEach(t),i3=f(p2),$e=o(p2,"TD",{align:!0});var Mf=l($e);u3=u(Mf,"(Default: "),hd=o(Mf,"CODE",{});var Cx=l(hd);c3=u(Cx,"None"),Cx.forEach(t),p3=u(Mf,"). Integer to define the minimum length "),dd=o(Mf,"STRONG",{});var Gx=l(dd);f3=u(Gx,"in tokens"),Gx.forEach(t),h3=u(Mf," of the output summary."),Mf.forEach(t),p2.forEach(t),d3=f(H),Ln=o(H,"TR",{});var f2=l(Ln);uu=o(f2,"TD",{align:!0});var Ux=l(uu);g3=u(Ux,"max_length"),Ux.forEach(t),m3=f(f2),qe=o(f2,"TD",{align:!0});var Ff=l(qe);_3=u(Ff,"(Default: "),gd=o(Ff,"CODE",{});var Lx=l(gd);$3=u(Lx,"None"),Lx.forEach(t),q3=u(Ff,"). Integer to define the maximum length "),md=o(Ff,"STRONG",{});var zx=l(md);v3=u(zx,"in tokens"),zx.forEach(t),y3=u(Ff," of the output summary."),Ff.forEach(t),f2.forEach(t),E3=f(H),zn=o(H,"TR",{});var h2=l(zn);cu=o(h2,"TD",{align:!0});var Mx=l(cu);w3=u(Mx,"top_k"),Mx.forEach(t),b3=f(h2),ve=o(h2,"TD",{align:!0});var Jf=l(ve);j3=u(Jf,"(Default: "),_d=o(Jf,"CODE",{});var Fx=l(_d);T3=u(Fx,"None"),Fx.forEach(t),k3=u(Jf,"). Integer to define the top tokens considered within the "),$d=o(Jf,"CODE",{});var Jx=l($d);A3=u(Jx,"sample"),Jx.forEach(t),D3=u(Jf," operation to create new text."),Jf.forEach(t),h2.forEach(t),O3=f(H),Mn=o(H,"TR",{});var d2=l(Mn);pu=o(d2,"TD",{align:!0});var Kx=l(pu);P3=u(Kx,"top_p"),Kx.forEach(t),R3=f(d2),oe=o(d2,"TD",{align:!0});var ka=l(oe);N3=u(ka,"(Default: "),qd=o(ka,"CODE",{});var Wx=l(qd);x3=u(Wx,"None"),Wx.forEach(t),S3=u(ka,"). Float to define the tokens that are within the "),vd=o(ka,"CODE",{});var Yx=l(vd);I3=u(Yx,"sample"),Yx.forEach(t),H3=u(ka," operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than "),yd=o(ka,"CODE",{});var Vx=l(yd);B3=u(Vx,"top_p"),Vx.forEach(t),C3=u(ka,"."),ka.forEach(t),d2.forEach(t),G3=f(H),Fn=o(H,"TR",{});var g2=l(Fn);fu=o(g2,"TD",{align:!0});var Xx=l(fu);U3=u(Xx,"temperature"),Xx.forEach(t),L3=f(g2),ye=o(g2,"TD",{align:!0});var Kf=l(ye);z3=u(Kf,"(Default: "),Ed=o(Kf,"CODE",{});var Qx=l(Ed);M3=u(Qx,"1.0"),Qx.forEach(t),F3=u(Kf,"). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means "),wd=o(Kf,"CODE",{});var Zx=l(wd);J3=u(Zx,"100.0"),Zx.forEach(t),K3=u(Kf," is getting closer to uniform probability."),Kf.forEach(t),g2.forEach(t),W3=f(H),Jn=o(H,"TR",{});var m2=l(Jn);hu=o(m2,"TD",{align:!0});var eS=l(hu);Y3=u(eS,"repetition_penalty"),eS.forEach(t),V3=f(m2),Ut=o(m2,"TD",{align:!0});var _2=l(Ut);X3=u(_2,"(Default: "),bd=o(_2,"CODE",{});var tS=l(bd);Q3=u(tS,"None"),tS.forEach(t),Z3=u(_2,"). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."),_2.forEach(t),m2.forEach(t),e5=f(H),Kn=o(H,"TR",{});var $2=l(Kn);du=o($2,"TD",{align:!0});var sS=l(du);t5=u(sS,"max_time"),sS.forEach(t),s5=f($2),Lt=o($2,"TD",{align:!0});var q2=l(Lt);a5=u(q2,"(Default: "),jd=o(q2,"CODE",{});var aS=l(jd);n5=u(aS,"None"),aS.forEach(t),r5=u(q2,"). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit."),q2.forEach(t),$2.forEach(t),o5=f(H),Wn=o(H,"TR",{});var v2=l(Wn);gu=o(v2,"TD",{align:!0});var nS=l(gu);Td=o(nS,"STRONG",{});var rS=l(Td);l5=u(rS,"options"),rS.forEach(t),nS.forEach(t),i5=f(v2),mu=o(v2,"TD",{align:!0});var oS=l(mu);u5=u(oS,"a dict containing the following keys:"),oS.forEach(t),v2.forEach(t),c5=f(H),Yn=o(H,"TR",{});var y2=l(Yn);_u=o(y2,"TD",{align:!0});var lS=l(_u);p5=u(lS,"use_gpu"),lS.forEach(t),f5=f(y2),zt=o(y2,"TD",{align:!0});var E2=l(zt);h5=u(E2,"(Default: "),kd=o(E2,"CODE",{});var iS=l(kd);d5=u(iS,"false"),iS.forEach(t),g5=u(E2,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),E2.forEach(t),y2.forEach(t),m5=f(H),Vn=o(H,"TR",{});var w2=l(Vn);$u=o(w2,"TD",{align:!0});var uS=l($u);_5=u(uS,"use_cache"),uS.forEach(t),$5=f(w2),Mt=o(w2,"TD",{align:!0});var b2=l(Mt);q5=u(b2,"(Default: "),Ad=o(b2,"CODE",{});var cS=l(Ad);v5=u(cS,"true"),cS.forEach(t),y5=u(b2,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),b2.forEach(t),w2.forEach(t),E5=f(H),Xn=o(H,"TR",{});var j2=l(Xn);qu=o(j2,"TD",{align:!0});var pS=l(qu);w5=u(pS,"wait_for_model"),pS.forEach(t),b5=f(j2),Ft=o(j2,"TD",{align:!0});var T2=l(Ft);j5=u(T2,"(Default: "),Dd=o(T2,"CODE",{});var fS=l(Dd);T5=u(fS,"false"),fS.forEach(t),k5=u(T2,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),T2.forEach(t),j2.forEach(t),H.forEach(t),a2.forEach(t),Y$=f(a),vu=o(a,"P",{});var hS=l(vu);A5=u(hS,"Return value is either a dict or a list of dicts if you sent a list of inputs"),hS.forEach(t),V$=f(a),Jt=o(a,"TABLE",{});var k2=l(Jt);Od=o(k2,"THEAD",{});var dS=l(Od);Qn=o(dS,"TR",{});var A2=l(Qn);yu=o(A2,"TH",{align:!0});var gS=l(yu);D5=u(gS,"Returned values"),gS.forEach(t),O5=f(A2),Pd=o(A2,"TH",{align:!0}),l(Pd).forEach(t),A2.forEach(t),dS.forEach(t),P5=f(k2),ie=o(k2,"TBODY",{});var Aa=l(ie);Zn=o(Aa,"TR",{});var D2=l(Zn);Eu=o(D2,"TD",{align:!0});var mS=l(Eu);Rd=o(mS,"STRONG",{});var _S=l(Rd);R5=u(_S,"generated_text"),_S.forEach(t),mS.forEach(t),N5=f(D2),wu=o(D2,"TD",{align:!0});var $S=l(wu);x5=u($S,"The answer of the bot"),$S.forEach(t),D2.forEach(t),S5=f(Aa),er=o(Aa,"TR",{});var O2=l(er);bu=o(O2,"TD",{align:!0});var qS=l(bu);Nd=o(qS,"STRONG",{});var vS=l(Nd);I5=u(vS,"conversation"),vS.forEach(t),qS.forEach(t),H5=f(O2),ju=o(O2,"TD",{align:!0});var yS=l(ju);B5=u(yS,"A facility dictionnary to send back for the next input (with the new user input addition)."),yS.forEach(t),O2.forEach(t),C5=f(Aa),tr=o(Aa,"TR",{});var P2=l(tr);Tu=o(P2,"TD",{align:!0});var ES=l(Tu);G5=u(ES,"past_user_inputs"),ES.forEach(t),U5=f(P2),ku=o(P2,"TD",{align:!0});var wS=l(ku);L5=u(wS,"List of strings. The last inputs from the user in the conversation, <em>after the model has run."),wS.forEach(t),P2.forEach(t),z5=f(Aa),sr=o(Aa,"TR",{});var R2=l(sr);Au=o(R2,"TD",{align:!0});var bS=l(Au);M5=u(bS,"generated_responses"),bS.forEach(t),F5=f(R2),Du=o(R2,"TD",{align:!0});var jS=l(Du);J5=u(jS,"List of strings. The last outputs from the model in the conversation, <em>after the model has run."),jS.forEach(t),R2.forEach(t),Aa.forEach(t),k2.forEach(t),X$=f(a),Ce=o(a,"H2",{class:!0});var N2=l(Ce);Kt=o(N2,"A",{id:!0,class:!0,href:!0});var TS=l(Kt);xd=o(TS,"SPAN",{});var kS=l(xd);v(ar.$$.fragment,kS),kS.forEach(t),TS.forEach(t),K5=f(N2),Sd=o(N2,"SPAN",{});var AS=l(Sd);W5=u(AS,"Table question answering task"),AS.forEach(t),N2.forEach(t),Q$=f(a),Ou=o(a,"P",{});var DS=l(Ou);Y5=u(DS,`Don\u2019t know SQL? Don\u2019t want to dive into a large spreadsheet? Ask
questions in plain english!`),DS.forEach(t),Z$=f(a),v(Wt.$$.fragment,a),eq=f(a),nr=o(a,"P",{});var uR=l(nr);V5=u(uR,"Available with: "),rr=o(uR,"A",{href:!0,rel:!0});var OS=l(rr);X5=u(OS,"\u{1F917} Transformers"),OS.forEach(t),uR.forEach(t),tq=f(a),Pu=o(a,"P",{});var PS=l(Pu);Q5=u(PS,"Example:"),PS.forEach(t),sq=f(a),v(Yt.$$.fragment,a),aq=f(a),Ru=o(a,"P",{});var RS=l(Ru);Z5=u(RS,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),RS.forEach(t),nq=f(a),Vt=o(a,"TABLE",{});var x2=l(Vt);Id=o(x2,"THEAD",{});var NS=l(Id);or=o(NS,"TR",{});var S2=l(or);Nu=o(S2,"TH",{align:!0});var xS=l(Nu);ek=u(xS,"All parameters"),xS.forEach(t),tk=f(S2),Hd=o(S2,"TH",{align:!0}),l(Hd).forEach(t),S2.forEach(t),NS.forEach(t),sk=f(x2),J=o(x2,"TBODY",{});var V=l(J);lr=o(V,"TR",{});var I2=l(lr);ir=o(I2,"TD",{align:!0});var cR=l(ir);Bd=o(cR,"STRONG",{});var SS=l(Bd);ak=u(SS,"inputs"),SS.forEach(t),nk=u(cR," (required)"),cR.forEach(t),rk=f(I2),Cd=o(I2,"TD",{align:!0}),l(Cd).forEach(t),I2.forEach(t),ok=f(V),ur=o(V,"TR",{});var H2=l(ur);xu=o(H2,"TD",{align:!0});var IS=l(xu);lk=u(IS,"query (required)"),IS.forEach(t),ik=f(H2),Su=o(H2,"TD",{align:!0});var HS=l(Su);uk=u(HS,"The query in plain text that you want to ask the table"),HS.forEach(t),H2.forEach(t),ck=f(V),cr=o(V,"TR",{});var B2=l(cr);Iu=o(B2,"TD",{align:!0});var BS=l(Iu);pk=u(BS,"table (required)"),BS.forEach(t),fk=f(B2),Hu=o(B2,"TD",{align:!0});var CS=l(Hu);hk=u(CS,"A table of data represented as a dict of list where entries are headers and the lists are all the values, all lists must have the same size."),CS.forEach(t),B2.forEach(t),dk=f(V),pr=o(V,"TR",{});var C2=l(pr);Bu=o(C2,"TD",{align:!0});var GS=l(Bu);Gd=o(GS,"STRONG",{});var US=l(Gd);gk=u(US,"options"),US.forEach(t),GS.forEach(t),mk=f(C2),Cu=o(C2,"TD",{align:!0});var LS=l(Cu);_k=u(LS,"a dict containing the following keys:"),LS.forEach(t),C2.forEach(t),$k=f(V),fr=o(V,"TR",{});var G2=l(fr);Gu=o(G2,"TD",{align:!0});var zS=l(Gu);qk=u(zS,"use_gpu"),zS.forEach(t),vk=f(G2),Xt=o(G2,"TD",{align:!0});var U2=l(Xt);yk=u(U2,"(Default: "),Ud=o(U2,"CODE",{});var MS=l(Ud);Ek=u(MS,"false"),MS.forEach(t),wk=u(U2,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),U2.forEach(t),G2.forEach(t),bk=f(V),hr=o(V,"TR",{});var L2=l(hr);Uu=o(L2,"TD",{align:!0});var FS=l(Uu);jk=u(FS,"use_cache"),FS.forEach(t),Tk=f(L2),Qt=o(L2,"TD",{align:!0});var z2=l(Qt);kk=u(z2,"(Default: "),Ld=o(z2,"CODE",{});var JS=l(Ld);Ak=u(JS,"true"),JS.forEach(t),Dk=u(z2,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),z2.forEach(t),L2.forEach(t),Ok=f(V),dr=o(V,"TR",{});var M2=l(dr);Lu=o(M2,"TD",{align:!0});var KS=l(Lu);Pk=u(KS,"wait_for_model"),KS.forEach(t),Rk=f(M2),Zt=o(M2,"TD",{align:!0});var F2=l(Zt);Nk=u(F2,"(Default: "),zd=o(F2,"CODE",{});var WS=l(zd);xk=u(WS,"false"),WS.forEach(t),Sk=u(F2,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),F2.forEach(t),M2.forEach(t),V.forEach(t),x2.forEach(t),rq=f(a),zu=o(a,"P",{});var YS=l(zu);Ik=u(YS,"Return value is either a dict or a list of dicts if you sent a list of inputs"),YS.forEach(t),oq=f(a),v(es.$$.fragment,a),lq=f(a),ts=o(a,"TABLE",{});var J2=l(ts);Md=o(J2,"THEAD",{});var VS=l(Md);gr=o(VS,"TR",{});var K2=l(gr);Mu=o(K2,"TH",{align:!0});var XS=l(Mu);Hk=u(XS,"Returned values"),XS.forEach(t),Bk=f(K2),Fd=o(K2,"TH",{align:!0}),l(Fd).forEach(t),K2.forEach(t),VS.forEach(t),Ck=f(J2),ue=o(J2,"TBODY",{});var Da=l(ue);mr=o(Da,"TR",{});var W2=l(mr);Fu=o(W2,"TD",{align:!0});var QS=l(Fu);Jd=o(QS,"STRONG",{});var ZS=l(Jd);Gk=u(ZS,"answer"),ZS.forEach(t),QS.forEach(t),Uk=f(W2),Ju=o(W2,"TD",{align:!0});var eI=l(Ju);Lk=u(eI,"The plaintext answer"),eI.forEach(t),W2.forEach(t),zk=f(Da),_r=o(Da,"TR",{});var Y2=l(_r);Ku=o(Y2,"TD",{align:!0});var tI=l(Ku);Kd=o(tI,"STRONG",{});var sI=l(Kd);Mk=u(sI,"coordinates"),sI.forEach(t),tI.forEach(t),Fk=f(Y2),Wu=o(Y2,"TD",{align:!0});var aI=l(Wu);Jk=u(aI,"a list of coordinates of the cells references in the answer"),aI.forEach(t),Y2.forEach(t),Kk=f(Da),$r=o(Da,"TR",{});var V2=l($r);Yu=o(V2,"TD",{align:!0});var nI=l(Yu);Wd=o(nI,"STRONG",{});var rI=l(Wd);Wk=u(rI,"cells"),rI.forEach(t),nI.forEach(t),Yk=f(V2),Vu=o(V2,"TD",{align:!0});var oI=l(Vu);Vk=u(oI,"a list of coordinates of the cells contents"),oI.forEach(t),V2.forEach(t),Xk=f(Da),qr=o(Da,"TR",{});var X2=l(qr);Xu=o(X2,"TD",{align:!0});var lI=l(Xu);Yd=o(lI,"STRONG",{});var iI=l(Yd);Qk=u(iI,"aggregator"),iI.forEach(t),lI.forEach(t),Zk=f(X2),Qu=o(X2,"TD",{align:!0});var uI=l(Qu);e4=u(uI,"The aggregator used to get the answer"),uI.forEach(t),X2.forEach(t),Da.forEach(t),J2.forEach(t),iq=f(a),Ge=o(a,"H2",{class:!0});var Q2=l(Ge);ss=o(Q2,"A",{id:!0,class:!0,href:!0});var cI=l(ss);Vd=o(cI,"SPAN",{});var pI=l(Vd);v(vr.$$.fragment,pI),pI.forEach(t),cI.forEach(t),t4=f(Q2),Xd=o(Q2,"SPAN",{});var fI=l(Xd);s4=u(fI,"Question answering task"),fI.forEach(t),Q2.forEach(t),uq=f(a),Zu=o(a,"P",{});var hI=l(Zu);a4=u(hI,"Want to have a nice know-it-all bot that can answer any questions ?"),hI.forEach(t),cq=f(a),v(as.$$.fragment,a),pq=f(a),Ue=o(a,"P",{});var s$=l(Ue);n4=u(s$,"Available with: "),yr=o(s$,"A",{href:!0,rel:!0});var dI=l(yr);r4=u(dI,"\u{1F917}Transformers"),dI.forEach(t),o4=u(s$,` and
`),Er=o(s$,"A",{href:!0,rel:!0});var gI=l(Er);l4=u(gI,"AllenNLP"),gI.forEach(t),s$.forEach(t),fq=f(a),ec=o(a,"P",{});var mI=l(ec);i4=u(mI,"Example:"),mI.forEach(t),hq=f(a),v(ns.$$.fragment,a),dq=f(a),tc=o(a,"P",{});var _I=l(tc);u4=u(_I,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),_I.forEach(t),gq=f(a),sc=o(a,"P",{});var $I=l(sc);c4=u($I,"Return value is either a dict or a list of dicts if you sent a list of inputs"),$I.forEach(t),mq=f(a),v(rs.$$.fragment,a),_q=f(a),os=o(a,"TABLE",{});var Z2=l(os);Qd=o(Z2,"THEAD",{});var qI=l(Qd);wr=o(qI,"TR",{});var ey=l(wr);ac=o(ey,"TH",{align:!0});var vI=l(ac);p4=u(vI,"Returned values"),vI.forEach(t),f4=f(ey),Zd=o(ey,"TH",{align:!0}),l(Zd).forEach(t),ey.forEach(t),qI.forEach(t),h4=f(Z2),ce=o(Z2,"TBODY",{});var Oa=l(ce);br=o(Oa,"TR",{});var ty=l(br);nc=o(ty,"TD",{align:!0});var yI=l(nc);eg=o(yI,"STRONG",{});var EI=l(eg);d4=u(EI,"answer"),EI.forEach(t),yI.forEach(t),g4=f(ty),rc=o(ty,"TD",{align:!0});var wI=l(rc);m4=u(wI,"A string that\u2019s the answer within the text."),wI.forEach(t),ty.forEach(t),_4=f(Oa),jr=o(Oa,"TR",{});var sy=l(jr);oc=o(sy,"TD",{align:!0});var bI=l(oc);tg=o(bI,"STRONG",{});var jI=l(tg);$4=u(jI,"score"),jI.forEach(t),bI.forEach(t),q4=f(sy),lc=o(sy,"TD",{align:!0});var TI=l(lc);v4=u(TI,"A floats that represents how likely that the answer is correct"),TI.forEach(t),sy.forEach(t),y4=f(Oa),Tr=o(Oa,"TR",{});var ay=l(Tr);ic=o(ay,"TD",{align:!0});var kI=l(ic);sg=o(kI,"STRONG",{});var AI=l(sg);E4=u(AI,"start"),AI.forEach(t),kI.forEach(t),w4=f(ay),ls=o(ay,"TD",{align:!0});var ny=l(ls);b4=u(ny,"The index (string wise) of the start of the answer within "),ag=o(ny,"CODE",{});var DI=l(ag);j4=u(DI,"context"),DI.forEach(t),T4=u(ny,"."),ny.forEach(t),ay.forEach(t),k4=f(Oa),kr=o(Oa,"TR",{});var ry=l(kr);uc=o(ry,"TD",{align:!0});var OI=l(uc);ng=o(OI,"STRONG",{});var PI=l(ng);A4=u(PI,"stop"),PI.forEach(t),OI.forEach(t),D4=f(ry),is=o(ry,"TD",{align:!0});var oy=l(is);O4=u(oy,"The index (string wise) of the stop of the answer within "),rg=o(oy,"CODE",{});var RI=l(rg);P4=u(RI,"context"),RI.forEach(t),R4=u(oy,"."),oy.forEach(t),ry.forEach(t),Oa.forEach(t),Z2.forEach(t),$q=f(a),Le=o(a,"H2",{class:!0});var ly=l(Le);us=o(ly,"A",{id:!0,class:!0,href:!0});var NI=l(us);og=o(NI,"SPAN",{});var xI=l(og);v(Ar.$$.fragment,xI),xI.forEach(t),NI.forEach(t),N4=f(ly),lg=o(ly,"SPAN",{});var SI=l(lg);x4=u(SI,"Text-classification task"),SI.forEach(t),ly.forEach(t),qq=f(a),cc=o(a,"P",{});var II=l(cc);S4=u(II,`Usually used for sentiment-analysis this will output the likelihood of
classes of an input.`),II.forEach(t),vq=f(a),v(cs.$$.fragment,a),yq=f(a),Dr=o(a,"P",{});var pR=l(Dr);I4=u(pR,"Available with: "),Or=o(pR,"A",{href:!0,rel:!0});var HI=l(Or);H4=u(HI,"\u{1F917} Transformers"),HI.forEach(t),pR.forEach(t),Eq=f(a),pc=o(a,"P",{});var BI=l(pc);B4=u(BI,"Example:"),BI.forEach(t),wq=f(a),v(ps.$$.fragment,a),bq=f(a),fc=o(a,"P",{});var CI=l(fc);C4=u(CI,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),CI.forEach(t),jq=f(a),fs=o(a,"TABLE",{});var iy=l(fs);ig=o(iy,"THEAD",{});var GI=l(ig);Pr=o(GI,"TR",{});var uy=l(Pr);hc=o(uy,"TH",{align:!0});var UI=l(hc);G4=u(UI,"All parameters"),UI.forEach(t),U4=f(uy),ug=o(uy,"TH",{align:!0}),l(ug).forEach(t),uy.forEach(t),GI.forEach(t),L4=f(iy),ee=o(iy,"TBODY",{});var Ae=l(ee);Rr=o(Ae,"TR",{});var cy=l(Rr);Nr=o(cy,"TD",{align:!0});var fR=l(Nr);cg=o(fR,"STRONG",{});var LI=l(cg);z4=u(LI,"inputs"),LI.forEach(t),M4=u(fR," (required)"),fR.forEach(t),F4=f(cy),dc=o(cy,"TD",{align:!0});var zI=l(dc);J4=u(zI,"a string to be classified"),zI.forEach(t),cy.forEach(t),K4=f(Ae),xr=o(Ae,"TR",{});var py=l(xr);gc=o(py,"TD",{align:!0});var MI=l(gc);pg=o(MI,"STRONG",{});var FI=l(pg);W4=u(FI,"options"),FI.forEach(t),MI.forEach(t),Y4=f(py),mc=o(py,"TD",{align:!0});var JI=l(mc);V4=u(JI,"a dict containing the following keys:"),JI.forEach(t),py.forEach(t),X4=f(Ae),Sr=o(Ae,"TR",{});var fy=l(Sr);_c=o(fy,"TD",{align:!0});var KI=l(_c);Q4=u(KI,"use_gpu"),KI.forEach(t),Z4=f(fy),hs=o(fy,"TD",{align:!0});var hy=l(hs);e7=u(hy,"(Default: "),fg=o(hy,"CODE",{});var WI=l(fg);t7=u(WI,"false"),WI.forEach(t),s7=u(hy,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),hy.forEach(t),fy.forEach(t),a7=f(Ae),Ir=o(Ae,"TR",{});var dy=l(Ir);$c=o(dy,"TD",{align:!0});var YI=l($c);n7=u(YI,"use_cache"),YI.forEach(t),r7=f(dy),ds=o(dy,"TD",{align:!0});var gy=l(ds);o7=u(gy,"(Default: "),hg=o(gy,"CODE",{});var VI=l(hg);l7=u(VI,"true"),VI.forEach(t),i7=u(gy,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),gy.forEach(t),dy.forEach(t),u7=f(Ae),Hr=o(Ae,"TR",{});var my=l(Hr);qc=o(my,"TD",{align:!0});var XI=l(qc);c7=u(XI,"wait_for_model"),XI.forEach(t),p7=f(my),gs=o(my,"TD",{align:!0});var _y=l(gs);f7=u(_y,"(Default: "),dg=o(_y,"CODE",{});var QI=l(dg);h7=u(QI,"false"),QI.forEach(t),d7=u(_y,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),_y.forEach(t),my.forEach(t),Ae.forEach(t),iy.forEach(t),Tq=f(a),vc=o(a,"P",{});var ZI=l(vc);g7=u(ZI,"Return value is either a dict or a list of dicts if you sent a list of inputs"),ZI.forEach(t),kq=f(a),v(ms.$$.fragment,a),Aq=f(a),_s=o(a,"TABLE",{});var $y=l(_s);gg=o($y,"THEAD",{});var eH=l(gg);Br=o(eH,"TR",{});var qy=l(Br);yc=o(qy,"TH",{align:!0});var tH=l(yc);m7=u(tH,"Returned values"),tH.forEach(t),_7=f(qy),mg=o(qy,"TH",{align:!0}),l(mg).forEach(t),qy.forEach(t),eH.forEach(t),$7=f($y),Cr=o($y,"TBODY",{});var vy=l(Cr);Gr=o(vy,"TR",{});var yy=l(Gr);Ec=o(yy,"TD",{align:!0});var sH=l(Ec);_g=o(sH,"STRONG",{});var aH=l(_g);q7=u(aH,"label"),aH.forEach(t),sH.forEach(t),v7=f(yy),wc=o(yy,"TD",{align:!0});var nH=l(wc);y7=u(nH,"The label for the class (model specific)"),nH.forEach(t),yy.forEach(t),E7=f(vy),Ur=o(vy,"TR",{});var Ey=l(Ur);bc=o(Ey,"TD",{align:!0});var rH=l(bc);$g=o(rH,"STRONG",{});var oH=l($g);w7=u(oH,"score"),oH.forEach(t),rH.forEach(t),b7=f(Ey),jc=o(Ey,"TD",{align:!0});var lH=l(jc);j7=u(lH,"A floats that represents how likely is that the text belongs the this class."),lH.forEach(t),Ey.forEach(t),vy.forEach(t),$y.forEach(t),Dq=f(a),ze=o(a,"H2",{class:!0});var wy=l(ze);$s=o(wy,"A",{id:!0,class:!0,href:!0});var iH=l($s);qg=o(iH,"SPAN",{});var uH=l(qg);v(Lr.$$.fragment,uH),uH.forEach(t),iH.forEach(t),T7=f(wy),vg=o(wy,"SPAN",{});var cH=l(vg);k7=u(cH,"Named Entity Recognition (NER) task"),cH.forEach(t),wy.forEach(t),Oq=f(a),zr=o(a,"P",{});var hR=l(zr);A7=u(hR,"See "),Tc=o(hR,"A",{href:!0});var pH=l(Tc);D7=u(pH,"Token-classification task"),pH.forEach(t),hR.forEach(t),Pq=f(a),Me=o(a,"H2",{class:!0});var by=l(Me);qs=o(by,"A",{id:!0,class:!0,href:!0});var fH=l(qs);yg=o(fH,"SPAN",{});var hH=l(yg);v(Mr.$$.fragment,hH),hH.forEach(t),fH.forEach(t),O7=f(by),Eg=o(by,"SPAN",{});var dH=l(Eg);P7=u(dH,"Token-classification task"),dH.forEach(t),by.forEach(t),Rq=f(a),kc=o(a,"P",{});var gH=l(kc);R7=u(gH,`Usually used for sentence parsing, either grammatical, or Named Entity
Recognition (NER) to understand keywords contained within text.`),gH.forEach(t),Nq=f(a),v(vs.$$.fragment,a),xq=f(a),Fe=o(a,"P",{});var a$=l(Fe);N7=u(a$,"Available with: "),Fr=o(a$,"A",{href:!0,rel:!0});var mH=l(Fr);x7=u(mH,"\u{1F917} Transformers"),mH.forEach(t),S7=u(a$,`,
`),Jr=o(a$,"A",{href:!0,rel:!0});var _H=l(Jr);I7=u(_H,"Flair"),_H.forEach(t),a$.forEach(t),Sq=f(a),Ac=o(a,"P",{});var $H=l(Ac);H7=u($H,"Example:"),$H.forEach(t),Iq=f(a),v(ys.$$.fragment,a),Hq=f(a),Dc=o(a,"P",{});var qH=l(Dc);B7=u(qH,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),qH.forEach(t),Bq=f(a),Es=o(a,"TABLE",{});var jy=l(Es);wg=o(jy,"THEAD",{});var vH=l(wg);Kr=o(vH,"TR",{});var Ty=l(Kr);Oc=o(Ty,"TH",{align:!0});var yH=l(Oc);C7=u(yH,"All parameters"),yH.forEach(t),G7=f(Ty),bg=o(Ty,"TH",{align:!0}),l(bg).forEach(t),Ty.forEach(t),vH.forEach(t),U7=f(jy),K=o(jy,"TBODY",{});var X=l(K);Wr=o(X,"TR",{});var ky=l(Wr);Yr=o(ky,"TD",{align:!0});var dR=l(Yr);jg=o(dR,"STRONG",{});var EH=l(jg);L7=u(EH,"inputs"),EH.forEach(t),z7=u(dR," (required)"),dR.forEach(t),M7=f(ky),Pc=o(ky,"TD",{align:!0});var wH=l(Pc);F7=u(wH,"a string to be classified"),wH.forEach(t),ky.forEach(t),J7=f(X),Vr=o(X,"TR",{});var Ay=l(Vr);Rc=o(Ay,"TD",{align:!0});var bH=l(Rc);Tg=o(bH,"STRONG",{});var jH=l(Tg);K7=u(jH,"parameters"),jH.forEach(t),bH.forEach(t),W7=f(Ay),Nc=o(Ay,"TD",{align:!0});var TH=l(Nc);Y7=u(TH,"a dict containing the following key:"),TH.forEach(t),Ay.forEach(t),V7=f(X),Xr=o(X,"TR",{});var Dy=l(Xr);xc=o(Dy,"TD",{align:!0});var kH=l(xc);X7=u(kH,"aggregation_strategy"),kH.forEach(t),Q7=f(Dy),S=o(Dy,"TD",{align:!0});var B=l(S);Z7=u(B,"(Default: "),kg=o(B,"CODE",{});var AH=l(kg);e6=u(AH,"simple"),AH.forEach(t),t6=u(B,"). There are several aggregation strategies: "),s6=o(B,"BR",{}),a6=f(B),Ag=o(B,"CODE",{});var DH=l(Ag);n6=u(DH,"none"),DH.forEach(t),r6=u(B,": Every token gets classified without further aggregation. "),o6=o(B,"BR",{}),l6=f(B),Dg=o(B,"CODE",{});var OH=l(Dg);i6=u(OH,"simple"),OH.forEach(t),u6=u(B,": Entities are grouped according to the default schema (B-, I- tags get merged when the tag is similar). "),c6=o(B,"BR",{}),p6=f(B),Og=o(B,"CODE",{});var PH=l(Og);f6=u(PH,"first"),PH.forEach(t),h6=u(B,": Same as the "),Pg=o(B,"CODE",{});var RH=l(Pg);d6=u(RH,"simple"),RH.forEach(t),g6=u(B," strategy except words cannot end up with different tags. Words will use the tag of the first token when there is ambiguity. "),m6=o(B,"BR",{}),_6=f(B),Rg=o(B,"CODE",{});var NH=l(Rg);$6=u(NH,"average"),NH.forEach(t),q6=u(B,": Same as the "),Ng=o(B,"CODE",{});var xH=l(Ng);v6=u(xH,"simple"),xH.forEach(t),y6=u(B," strategy except words cannot end up with different tags. Scores are averaged across tokens and then the maximum label is applied. "),E6=o(B,"BR",{}),w6=f(B),xg=o(B,"CODE",{});var SH=l(xg);b6=u(SH,"max"),SH.forEach(t),j6=u(B,": Same as the "),Sg=o(B,"CODE",{});var IH=l(Sg);T6=u(IH,"simple"),IH.forEach(t),k6=u(B," strategy except words cannot end up with different tags. Word entity will be the token with the maximum score."),B.forEach(t),Dy.forEach(t),A6=f(X),Qr=o(X,"TR",{});var Oy=l(Qr);Sc=o(Oy,"TD",{align:!0});var HH=l(Sc);Ig=o(HH,"STRONG",{});var BH=l(Ig);D6=u(BH,"options"),BH.forEach(t),HH.forEach(t),O6=f(Oy),Ic=o(Oy,"TD",{align:!0});var CH=l(Ic);P6=u(CH,"a dict containing the following keys:"),CH.forEach(t),Oy.forEach(t),R6=f(X),Zr=o(X,"TR",{});var Py=l(Zr);Hc=o(Py,"TD",{align:!0});var GH=l(Hc);N6=u(GH,"use_gpu"),GH.forEach(t),x6=f(Py),ws=o(Py,"TD",{align:!0});var Ry=l(ws);S6=u(Ry,"(Default: "),Hg=o(Ry,"CODE",{});var UH=l(Hg);I6=u(UH,"false"),UH.forEach(t),H6=u(Ry,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),Ry.forEach(t),Py.forEach(t),B6=f(X),eo=o(X,"TR",{});var Ny=l(eo);Bc=o(Ny,"TD",{align:!0});var LH=l(Bc);C6=u(LH,"use_cache"),LH.forEach(t),G6=f(Ny),bs=o(Ny,"TD",{align:!0});var xy=l(bs);U6=u(xy,"(Default: "),Bg=o(xy,"CODE",{});var zH=l(Bg);L6=u(zH,"true"),zH.forEach(t),z6=u(xy,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),xy.forEach(t),Ny.forEach(t),M6=f(X),to=o(X,"TR",{});var Sy=l(to);Cc=o(Sy,"TD",{align:!0});var MH=l(Cc);F6=u(MH,"wait_for_model"),MH.forEach(t),J6=f(Sy),js=o(Sy,"TD",{align:!0});var Iy=l(js);K6=u(Iy,"(Default: "),Cg=o(Iy,"CODE",{});var FH=l(Cg);W6=u(FH,"false"),FH.forEach(t),Y6=u(Iy,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),Iy.forEach(t),Sy.forEach(t),X.forEach(t),jy.forEach(t),Cq=f(a),Gc=o(a,"P",{});var JH=l(Gc);V6=u(JH,"Return value is either a dict or a list of dicts if you sent a list of inputs"),JH.forEach(t),Gq=f(a),v(Ts.$$.fragment,a),Uq=f(a),ks=o(a,"TABLE",{});var Hy=l(ks);Gg=o(Hy,"THEAD",{});var KH=l(Gg);so=o(KH,"TR",{});var By=l(so);Uc=o(By,"TH",{align:!0});var WH=l(Uc);X6=u(WH,"Returned values"),WH.forEach(t),Q6=f(By),Ug=o(By,"TH",{align:!0}),l(Ug).forEach(t),By.forEach(t),KH.forEach(t),Z6=f(Hy),te=o(Hy,"TBODY",{});var De=l(te);ao=o(De,"TR",{});var Cy=l(ao);Lc=o(Cy,"TD",{align:!0});var YH=l(Lc);Lg=o(YH,"STRONG",{});var VH=l(Lg);e9=u(VH,"entity_group"),VH.forEach(t),YH.forEach(t),t9=f(Cy),zc=o(Cy,"TD",{align:!0});var XH=l(zc);s9=u(XH,"The type for the entity being recognized (model specific)."),XH.forEach(t),Cy.forEach(t),a9=f(De),no=o(De,"TR",{});var Gy=l(no);Mc=o(Gy,"TD",{align:!0});var QH=l(Mc);zg=o(QH,"STRONG",{});var ZH=l(zg);n9=u(ZH,"score"),ZH.forEach(t),QH.forEach(t),r9=f(Gy),Fc=o(Gy,"TD",{align:!0});var eB=l(Fc);o9=u(eB,"How likely the entity was recognized."),eB.forEach(t),Gy.forEach(t),l9=f(De),ro=o(De,"TR",{});var Uy=l(ro);Jc=o(Uy,"TD",{align:!0});var tB=l(Jc);Mg=o(tB,"STRONG",{});var sB=l(Mg);i9=u(sB,"word"),sB.forEach(t),tB.forEach(t),u9=f(Uy),Kc=o(Uy,"TD",{align:!0});var aB=l(Kc);c9=u(aB,"The string that was captured"),aB.forEach(t),Uy.forEach(t),p9=f(De),oo=o(De,"TR",{});var Ly=l(oo);Wc=o(Ly,"TD",{align:!0});var nB=l(Wc);Fg=o(nB,"STRONG",{});var rB=l(Fg);f9=u(rB,"start"),rB.forEach(t),nB.forEach(t),h9=f(Ly),As=o(Ly,"TD",{align:!0});var zy=l(As);d9=u(zy,"The offset stringwise where the answer is located. Useful to disambiguate if "),Jg=o(zy,"CODE",{});var oB=l(Jg);g9=u(oB,"word"),oB.forEach(t),m9=u(zy," occurs multiple times."),zy.forEach(t),Ly.forEach(t),_9=f(De),lo=o(De,"TR",{});var My=l(lo);Yc=o(My,"TD",{align:!0});var lB=l(Yc);Kg=o(lB,"STRONG",{});var iB=l(Kg);$9=u(iB,"end"),iB.forEach(t),lB.forEach(t),q9=f(My),Ds=o(My,"TD",{align:!0});var Fy=l(Ds);v9=u(Fy,"The offset stringwise where the answer is located. Useful to disambiguate if "),Wg=o(Fy,"CODE",{});var uB=l(Wg);y9=u(uB,"word"),uB.forEach(t),E9=u(Fy," occurs multiple times."),Fy.forEach(t),My.forEach(t),De.forEach(t),Hy.forEach(t),Lq=f(a),Je=o(a,"H2",{class:!0});var Jy=l(Je);Os=o(Jy,"A",{id:!0,class:!0,href:!0});var cB=l(Os);Yg=o(cB,"SPAN",{});var pB=l(Yg);v(io.$$.fragment,pB),pB.forEach(t),cB.forEach(t),w9=f(Jy),Vg=o(Jy,"SPAN",{});var fB=l(Vg);b9=u(fB,"Text-generation task"),fB.forEach(t),Jy.forEach(t),zq=f(a),Vc=o(a,"P",{});var hB=l(Vc);j9=u(hB,"Use to continue text from a prompt. This is a very generic task."),hB.forEach(t),Mq=f(a),v(Ps.$$.fragment,a),Fq=f(a),uo=o(a,"P",{});var gR=l(uo);T9=u(gR,"Available with: "),co=o(gR,"A",{href:!0,rel:!0});var dB=l(co);k9=u(dB,"\u{1F917} Transformers"),dB.forEach(t),gR.forEach(t),Jq=f(a),Xc=o(a,"P",{});var gB=l(Xc);A9=u(gB,"Example:"),gB.forEach(t),Kq=f(a),v(Rs.$$.fragment,a),Wq=f(a),Qc=o(a,"P",{});var mB=l(Qc);D9=u(mB,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),mB.forEach(t),Yq=f(a),Ns=o(a,"TABLE",{});var Ky=l(Ns);Xg=o(Ky,"THEAD",{});var _B=l(Xg);po=o(_B,"TR",{});var Wy=l(po);Zc=o(Wy,"TH",{align:!0});var $B=l(Zc);O9=u($B,"All parameters"),$B.forEach(t),P9=f(Wy),Qg=o(Wy,"TH",{align:!0}),l(Qg).forEach(t),Wy.forEach(t),_B.forEach(t),R9=f(Ky),I=o(Ky,"TBODY",{});var C=l(I);fo=o(C,"TR",{});var Yy=l(fo);ho=o(Yy,"TD",{align:!0});var mR=l(ho);Zg=o(mR,"STRONG",{});var qB=l(Zg);N9=u(qB,"inputs"),qB.forEach(t),x9=u(mR," (required):"),mR.forEach(t),S9=f(Yy),ep=o(Yy,"TD",{align:!0});var vB=l(ep);I9=u(vB,"a string to be generated from"),vB.forEach(t),Yy.forEach(t),H9=f(C),go=o(C,"TR",{});var Vy=l(go);tp=o(Vy,"TD",{align:!0});var yB=l(tp);em=o(yB,"STRONG",{});var EB=l(em);B9=u(EB,"parameters"),EB.forEach(t),yB.forEach(t),C9=f(Vy),sp=o(Vy,"TD",{align:!0});var wB=l(sp);G9=u(wB,"dict containing the following keys:"),wB.forEach(t),Vy.forEach(t),U9=f(C),mo=o(C,"TR",{});var Xy=l(mo);ap=o(Xy,"TD",{align:!0});var bB=l(ap);L9=u(bB,"top_k"),bB.forEach(t),z9=f(Xy),Ee=o(Xy,"TD",{align:!0});var Wf=l(Ee);M9=u(Wf,"(Default: "),tm=o(Wf,"CODE",{});var jB=l(tm);F9=u(jB,"None"),jB.forEach(t),J9=u(Wf,"). Integer to define the top tokens considered within the "),sm=o(Wf,"CODE",{});var TB=l(sm);K9=u(TB,"sample"),TB.forEach(t),W9=u(Wf," operation to create new text."),Wf.forEach(t),Xy.forEach(t),Y9=f(C),_o=o(C,"TR",{});var Qy=l(_o);np=o(Qy,"TD",{align:!0});var kB=l(np);V9=u(kB,"top_p"),kB.forEach(t),X9=f(Qy),le=o(Qy,"TD",{align:!0});var Pa=l(le);Q9=u(Pa,"(Default: "),am=o(Pa,"CODE",{});var AB=l(am);Z9=u(AB,"None"),AB.forEach(t),e8=u(Pa,"). Float to define the tokens that are within the "),nm=o(Pa,"CODE",{});var DB=l(nm);t8=u(DB,"sample"),DB.forEach(t),s8=u(Pa," operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than "),rm=o(Pa,"CODE",{});var OB=l(rm);a8=u(OB,"top_p"),OB.forEach(t),n8=u(Pa,"."),Pa.forEach(t),Qy.forEach(t),r8=f(C),$o=o(C,"TR",{});var Zy=l($o);rp=o(Zy,"TD",{align:!0});var PB=l(rp);o8=u(PB,"temperature"),PB.forEach(t),l8=f(Zy),we=o(Zy,"TD",{align:!0});var Yf=l(we);i8=u(Yf,"(Default: "),om=o(Yf,"CODE",{});var RB=l(om);u8=u(RB,"1.0"),RB.forEach(t),c8=u(Yf,"). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means "),lm=o(Yf,"CODE",{});var NB=l(lm);p8=u(NB,"100.0"),NB.forEach(t),f8=u(Yf," is getting closer to uniform probability."),Yf.forEach(t),Zy.forEach(t),h8=f(C),qo=o(C,"TR",{});var eE=l(qo);op=o(eE,"TD",{align:!0});var xB=l(op);d8=u(xB,"repetition_penalty"),xB.forEach(t),g8=f(eE),xs=o(eE,"TD",{align:!0});var tE=l(xs);m8=u(tE,"(Default: "),im=o(tE,"CODE",{});var SB=l(im);_8=u(SB,"None"),SB.forEach(t),$8=u(tE,"). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."),tE.forEach(t),eE.forEach(t),q8=f(C),vo=o(C,"TR",{});var sE=l(vo);lp=o(sE,"TD",{align:!0});var IB=l(lp);v8=u(IB,"max_new_tokens"),IB.forEach(t),y8=f(sE),be=o(sE,"TD",{align:!0});var Vf=l(be);E8=u(Vf,"(Default: "),um=o(Vf,"CODE",{});var HB=l(um);w8=u(HB,"None"),HB.forEach(t),b8=u(Vf,"). Int (0-250). The amount of new tokens to be generated, this does "),cm=o(Vf,"STRONG",{});var BB=l(cm);j8=u(BB,"not"),BB.forEach(t),T8=u(Vf," include the input length it is a estimate of the size of generated text you want. Each new tokens slows down the request, so look for balance between response times and length of text generated."),Vf.forEach(t),sE.forEach(t),k8=f(C),yo=o(C,"TR",{});var aE=l(yo);ip=o(aE,"TD",{align:!0});var CB=l(ip);A8=u(CB,"max_time"),CB.forEach(t),D8=f(aE),je=o(aE,"TD",{align:!0});var Xf=l(je);O8=u(Xf,"(Default: "),pm=o(Xf,"CODE",{});var GB=l(pm);P8=u(GB,"None"),GB.forEach(t),R8=u(Xf,"). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit. Use that in combination with "),fm=o(Xf,"CODE",{});var UB=l(fm);N8=u(UB,"max_new_tokens"),UB.forEach(t),x8=u(Xf," for best results."),Xf.forEach(t),aE.forEach(t),S8=f(C),Eo=o(C,"TR",{});var nE=l(Eo);up=o(nE,"TD",{align:!0});var LB=l(up);I8=u(LB,"return_full_text"),LB.forEach(t),H8=f(nE),Te=o(nE,"TD",{align:!0});var Qf=l(Te);B8=u(Qf,"(Default: "),hm=o(Qf,"CODE",{});var zB=l(hm);C8=u(zB,"True"),zB.forEach(t),G8=u(Qf,"). Bool. If set to False, the return results will "),dm=o(Qf,"STRONG",{});var MB=l(dm);U8=u(MB,"not"),MB.forEach(t),L8=u(Qf," contain the original query making it easier for prompting."),Qf.forEach(t),nE.forEach(t),z8=f(C),wo=o(C,"TR",{});var rE=l(wo);cp=o(rE,"TD",{align:!0});var FB=l(cp);M8=u(FB,"num_return_sequences"),FB.forEach(t),F8=f(rE),Ss=o(rE,"TD",{align:!0});var oE=l(Ss);J8=u(oE,"(Default: "),gm=o(oE,"CODE",{});var JB=l(gm);K8=u(JB,"1"),JB.forEach(t),W8=u(oE,"). Integer. The number of proposition you want to be returned."),oE.forEach(t),rE.forEach(t),Y8=f(C),bo=o(C,"TR",{});var lE=l(bo);pp=o(lE,"TD",{align:!0});var KB=l(pp);V8=u(KB,"do_sample"),KB.forEach(t),X8=f(lE),Is=o(lE,"TD",{align:!0});var iE=l(Is);Q8=u(iE,"(Optional: "),mm=o(iE,"CODE",{});var WB=l(mm);Z8=u(WB,"True"),WB.forEach(t),eA=u(iE,"). Bool. Whether or not to use sampling, use greedy decoding otherwise."),iE.forEach(t),lE.forEach(t),tA=f(C),jo=o(C,"TR",{});var uE=l(jo);fp=o(uE,"TD",{align:!0});var YB=l(fp);_m=o(YB,"STRONG",{});var VB=l(_m);sA=u(VB,"options"),VB.forEach(t),YB.forEach(t),aA=f(uE),hp=o(uE,"TD",{align:!0});var XB=l(hp);nA=u(XB,"a dict containing the following keys:"),XB.forEach(t),uE.forEach(t),rA=f(C),To=o(C,"TR",{});var cE=l(To);dp=o(cE,"TD",{align:!0});var QB=l(dp);oA=u(QB,"use_gpu"),QB.forEach(t),lA=f(cE),Hs=o(cE,"TD",{align:!0});var pE=l(Hs);iA=u(pE,"(Default: "),$m=o(pE,"CODE",{});var ZB=l($m);uA=u(ZB,"false"),ZB.forEach(t),cA=u(pE,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),pE.forEach(t),cE.forEach(t),pA=f(C),ko=o(C,"TR",{});var fE=l(ko);gp=o(fE,"TD",{align:!0});var eC=l(gp);fA=u(eC,"use_cache"),eC.forEach(t),hA=f(fE),Bs=o(fE,"TD",{align:!0});var hE=l(Bs);dA=u(hE,"(Default: "),qm=o(hE,"CODE",{});var tC=l(qm);gA=u(tC,"true"),tC.forEach(t),mA=u(hE,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),hE.forEach(t),fE.forEach(t),_A=f(C),Ao=o(C,"TR",{});var dE=l(Ao);mp=o(dE,"TD",{align:!0});var sC=l(mp);$A=u(sC,"wait_for_model"),sC.forEach(t),qA=f(dE),Cs=o(dE,"TD",{align:!0});var gE=l(Cs);vA=u(gE,"(Default: "),vm=o(gE,"CODE",{});var aC=l(vm);yA=u(aC,"false"),aC.forEach(t),EA=u(gE,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),gE.forEach(t),dE.forEach(t),C.forEach(t),Ky.forEach(t),Vq=f(a),_p=o(a,"P",{});var nC=l(_p);wA=u(nC,"Return value is either a dict or a list of dicts if you sent a list of inputs"),nC.forEach(t),Xq=f(a),v(Gs.$$.fragment,a),Qq=f(a),Us=o(a,"TABLE",{});var mE=l(Us);ym=o(mE,"THEAD",{});var rC=l(ym);Do=o(rC,"TR",{});var _E=l(Do);$p=o(_E,"TH",{align:!0});var oC=l($p);bA=u(oC,"Returned values"),oC.forEach(t),jA=f(_E),Em=o(_E,"TH",{align:!0}),l(Em).forEach(t),_E.forEach(t),rC.forEach(t),TA=f(mE),wm=o(mE,"TBODY",{});var lC=l(wm);Oo=o(lC,"TR",{});var $E=l(Oo);qp=o($E,"TD",{align:!0});var iC=l(qp);bm=o(iC,"STRONG",{});var uC=l(bm);kA=u(uC,"generated_text"),uC.forEach(t),iC.forEach(t),AA=f($E),vp=o($E,"TD",{align:!0});var cC=l(vp);DA=u(cC,"The continuated string"),cC.forEach(t),$E.forEach(t),lC.forEach(t),mE.forEach(t),Zq=f(a),Ke=o(a,"H2",{class:!0});var qE=l(Ke);Ls=o(qE,"A",{id:!0,class:!0,href:!0});var pC=l(Ls);jm=o(pC,"SPAN",{});var fC=l(jm);v(Po.$$.fragment,fC),fC.forEach(t),pC.forEach(t),OA=f(qE),Tm=o(qE,"SPAN",{});var hC=l(Tm);PA=u(hC,"Text2text-generation task"),hC.forEach(t),qE.forEach(t),e1=f(a),zs=o(a,"P",{});var vE=l(zs);RA=u(vE,"Essentially "),yp=o(vE,"A",{href:!0});var dC=l(yp);NA=u(dC,"Text-generation task"),dC.forEach(t),xA=u(vE,`. But uses
Encoder-Decoder architecture, so might change in the future for more
options.`),vE.forEach(t),t1=f(a),We=o(a,"H2",{class:!0});var yE=l(We);Ms=o(yE,"A",{id:!0,class:!0,href:!0});var gC=l(Ms);km=o(gC,"SPAN",{});var mC=l(km);v(Ro.$$.fragment,mC),mC.forEach(t),gC.forEach(t),SA=f(yE),Am=o(yE,"SPAN",{});var _C=l(Am);IA=u(_C,"Fill mask task"),_C.forEach(t),yE.forEach(t),s1=f(a),Ep=o(a,"P",{});var $C=l(Ep);HA=u($C,`Tries to fill in a hole with a missing word (token to be precise).
That\u2019s the base task for BERT models.`),$C.forEach(t),a1=f(a),v(Fs.$$.fragment,a),n1=f(a),No=o(a,"P",{});var _R=l(No);BA=u(_R,"Available with: "),xo=o(_R,"A",{href:!0,rel:!0});var qC=l(xo);CA=u(qC,"\u{1F917} Transformers"),qC.forEach(t),_R.forEach(t),r1=f(a),wp=o(a,"P",{});var vC=l(wp);GA=u(vC,"Example:"),vC.forEach(t),o1=f(a),v(Js.$$.fragment,a),l1=f(a),bp=o(a,"P",{});var yC=l(bp);UA=u(yC,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),yC.forEach(t),i1=f(a),Ks=o(a,"TABLE",{});var EE=l(Ks);Dm=o(EE,"THEAD",{});var EC=l(Dm);So=o(EC,"TR",{});var wE=l(So);jp=o(wE,"TH",{align:!0});var wC=l(jp);LA=u(wC,"All parameters"),wC.forEach(t),zA=f(wE),Om=o(wE,"TH",{align:!0}),l(Om).forEach(t),wE.forEach(t),EC.forEach(t),MA=f(EE),se=o(EE,"TBODY",{});var Oe=l(se);Io=o(Oe,"TR",{});var bE=l(Io);Ho=o(bE,"TD",{align:!0});var $R=l(Ho);Pm=o($R,"STRONG",{});var bC=l(Pm);FA=u(bC,"inputs"),bC.forEach(t),JA=u($R," (required):"),$R.forEach(t),KA=f(bE),Tp=o(bE,"TD",{align:!0});var jC=l(Tp);WA=u(jC,"a string to be filled from, must contain the [MASK] token (check model card for exact name of the mask)"),jC.forEach(t),bE.forEach(t),YA=f(Oe),Bo=o(Oe,"TR",{});var jE=l(Bo);kp=o(jE,"TD",{align:!0});var TC=l(kp);Rm=o(TC,"STRONG",{});var kC=l(Rm);VA=u(kC,"options"),kC.forEach(t),TC.forEach(t),XA=f(jE),Ap=o(jE,"TD",{align:!0});var AC=l(Ap);QA=u(AC,"a dict containing the following keys:"),AC.forEach(t),jE.forEach(t),ZA=f(Oe),Co=o(Oe,"TR",{});var TE=l(Co);Dp=o(TE,"TD",{align:!0});var DC=l(Dp);eD=u(DC,"use_gpu"),DC.forEach(t),tD=f(TE),Ws=o(TE,"TD",{align:!0});var kE=l(Ws);sD=u(kE,"(Default: "),Nm=o(kE,"CODE",{});var OC=l(Nm);aD=u(OC,"false"),OC.forEach(t),nD=u(kE,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),kE.forEach(t),TE.forEach(t),rD=f(Oe),Go=o(Oe,"TR",{});var AE=l(Go);Op=o(AE,"TD",{align:!0});var PC=l(Op);oD=u(PC,"use_cache"),PC.forEach(t),lD=f(AE),Ys=o(AE,"TD",{align:!0});var DE=l(Ys);iD=u(DE,"(Default: "),xm=o(DE,"CODE",{});var RC=l(xm);uD=u(RC,"true"),RC.forEach(t),cD=u(DE,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),DE.forEach(t),AE.forEach(t),pD=f(Oe),Uo=o(Oe,"TR",{});var OE=l(Uo);Pp=o(OE,"TD",{align:!0});var NC=l(Pp);fD=u(NC,"wait_for_model"),NC.forEach(t),hD=f(OE),Vs=o(OE,"TD",{align:!0});var PE=l(Vs);dD=u(PE,"(Default: "),Sm=o(PE,"CODE",{});var xC=l(Sm);gD=u(xC,"false"),xC.forEach(t),mD=u(PE,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),PE.forEach(t),OE.forEach(t),Oe.forEach(t),EE.forEach(t),u1=f(a),Rp=o(a,"P",{});var SC=l(Rp);_D=u(SC,"Return value is either a dict or a list of dicts if you sent a list of inputs"),SC.forEach(t),c1=f(a),v(Xs.$$.fragment,a),p1=f(a),Qs=o(a,"TABLE",{});var RE=l(Qs);Im=o(RE,"THEAD",{});var IC=l(Im);Lo=o(IC,"TR",{});var NE=l(Lo);Np=o(NE,"TH",{align:!0});var HC=l(Np);$D=u(HC,"Returned values"),HC.forEach(t),qD=f(NE),Hm=o(NE,"TH",{align:!0}),l(Hm).forEach(t),NE.forEach(t),IC.forEach(t),vD=f(RE),pe=o(RE,"TBODY",{});var Ra=l(pe);zo=o(Ra,"TR",{});var xE=l(zo);xp=o(xE,"TD",{align:!0});var BC=l(xp);Bm=o(BC,"STRONG",{});var CC=l(Bm);yD=u(CC,"sequence"),CC.forEach(t),BC.forEach(t),ED=f(xE),Sp=o(xE,"TD",{align:!0});var GC=l(Sp);wD=u(GC,"The actual sequence of tokens that ran against the model (may contain special tokens)"),GC.forEach(t),xE.forEach(t),bD=f(Ra),Mo=o(Ra,"TR",{});var SE=l(Mo);Ip=o(SE,"TD",{align:!0});var UC=l(Ip);Cm=o(UC,"STRONG",{});var LC=l(Cm);jD=u(LC,"score"),LC.forEach(t),UC.forEach(t),TD=f(SE),Hp=o(SE,"TD",{align:!0});var zC=l(Hp);kD=u(zC,"The probability for this token."),zC.forEach(t),SE.forEach(t),AD=f(Ra),Fo=o(Ra,"TR",{});var IE=l(Fo);Bp=o(IE,"TD",{align:!0});var MC=l(Bp);Gm=o(MC,"STRONG",{});var FC=l(Gm);DD=u(FC,"token"),FC.forEach(t),MC.forEach(t),OD=f(IE),Cp=o(IE,"TD",{align:!0});var JC=l(Cp);PD=u(JC,"The id of the token"),JC.forEach(t),IE.forEach(t),RD=f(Ra),Jo=o(Ra,"TR",{});var HE=l(Jo);Gp=o(HE,"TD",{align:!0});var KC=l(Gp);Um=o(KC,"STRONG",{});var WC=l(Um);ND=u(WC,"token_str"),WC.forEach(t),KC.forEach(t),xD=f(HE),Up=o(HE,"TD",{align:!0});var YC=l(Up);SD=u(YC,"The string representation of the token"),YC.forEach(t),HE.forEach(t),Ra.forEach(t),RE.forEach(t),f1=f(a),Ye=o(a,"H2",{class:!0});var BE=l(Ye);Zs=o(BE,"A",{id:!0,class:!0,href:!0});var VC=l(Zs);Lm=o(VC,"SPAN",{});var XC=l(Lm);v(Ko.$$.fragment,XC),XC.forEach(t),VC.forEach(t),ID=f(BE),zm=o(BE,"SPAN",{});var QC=l(zm);HD=u(QC,"Automatic speech recognition task"),QC.forEach(t),BE.forEach(t),h1=f(a),Lp=o(a,"P",{});var ZC=l(Lp);BD=u(ZC,`This task reads some audio input and outputs the said words within the
audio files.`),ZC.forEach(t),d1=f(a),v(ea.$$.fragment,a),g1=f(a),v(ta.$$.fragment,a),m1=f(a),fe=o(a,"P",{});var Ml=l(fe);CD=u(Ml,"Available with: "),Wo=o(Ml,"A",{href:!0,rel:!0});var eG=l(Wo);GD=u(eG,"\u{1F917} Transformers"),eG.forEach(t),UD=f(Ml),Yo=o(Ml,"A",{href:!0,rel:!0});var tG=l(Yo);LD=u(tG,"ESPnet"),tG.forEach(t),zD=u(Ml,` and
`),Vo=o(Ml,"A",{href:!0,rel:!0});var sG=l(Vo);MD=u(sG,"SpeechBrain"),sG.forEach(t),Ml.forEach(t),_1=f(a),zp=o(a,"P",{});var aG=l(zp);FD=u(aG,"Request:"),aG.forEach(t),$1=f(a),v(sa.$$.fragment,a),q1=f(a),Mp=o(a,"P",{});var nG=l(Mp);JD=u(nG,`When sending your request, you should send a binary payload that simply
contains your audio file. We try to support most formats (Flac, Wav,
Mp3, Ogg etc...). And we automatically rescale the sampling rate to the
appropriate rate for the given model (usually 16KHz).`),nG.forEach(t),v1=f(a),aa=o(a,"TABLE",{});var CE=l(aa);Mm=o(CE,"THEAD",{});var rG=l(Mm);Xo=o(rG,"TR",{});var GE=l(Xo);Fp=o(GE,"TH",{align:!0});var oG=l(Fp);KD=u(oG,"All parameters"),oG.forEach(t),WD=f(GE),Fm=o(GE,"TH",{align:!0}),l(Fm).forEach(t),GE.forEach(t),rG.forEach(t),YD=f(CE),Jm=o(CE,"TBODY",{});var lG=l(Jm);Qo=o(lG,"TR",{});var UE=l(Qo);Zo=o(UE,"TD",{align:!0});var qR=l(Zo);Km=o(qR,"STRONG",{});var iG=l(Km);VD=u(iG,"no parameter"),iG.forEach(t),XD=u(qR," (required)"),qR.forEach(t),QD=f(UE),Jp=o(UE,"TD",{align:!0});var uG=l(Jp);ZD=u(uG,"a binary representation of the audio file. No other parameters are currently allowed."),uG.forEach(t),UE.forEach(t),lG.forEach(t),CE.forEach(t),y1=f(a),Kp=o(a,"P",{});var cG=l(Kp);eO=u(cG,"Return value is either a dict or a list of dicts if you sent a list of inputs"),cG.forEach(t),E1=f(a),Wp=o(a,"P",{});var pG=l(Wp);tO=u(pG,"Response:"),pG.forEach(t),w1=f(a),v(na.$$.fragment,a),b1=f(a),ra=o(a,"TABLE",{});var LE=l(ra);Wm=o(LE,"THEAD",{});var fG=l(Wm);el=o(fG,"TR",{});var zE=l(el);Yp=o(zE,"TH",{align:!0});var hG=l(Yp);sO=u(hG,"Returned values"),hG.forEach(t),aO=f(zE),Ym=o(zE,"TH",{align:!0}),l(Ym).forEach(t),zE.forEach(t),fG.forEach(t),nO=f(LE),Vm=o(LE,"TBODY",{});var dG=l(Vm);tl=o(dG,"TR",{});var ME=l(tl);Vp=o(ME,"TD",{align:!0});var gG=l(Vp);Xm=o(gG,"STRONG",{});var mG=l(Xm);rO=u(mG,"text"),mG.forEach(t),gG.forEach(t),oO=f(ME),Xp=o(ME,"TD",{align:!0});var _G=l(Xp);lO=u(_G,"The string that was recognized within the audio file."),_G.forEach(t),ME.forEach(t),dG.forEach(t),LE.forEach(t),j1=f(a),Ve=o(a,"H2",{class:!0});var FE=l(Ve);oa=o(FE,"A",{id:!0,class:!0,href:!0});var $G=l(oa);Qm=o($G,"SPAN",{});var qG=l(Qm);v(sl.$$.fragment,qG),qG.forEach(t),$G.forEach(t),iO=f(FE),Zm=o(FE,"SPAN",{});var vG=l(Zm);uO=u(vG,"Feature-extraction task"),vG.forEach(t),FE.forEach(t),T1=f(a),Qp=o(a,"P",{});var yG=l(Qp);cO=u(yG,`This task reads some text and outputs raw float values, that usually
consumed as part of a semantic database/semantic search.`),yG.forEach(t),k1=f(a),v(la.$$.fragment,a),A1=f(a),Xe=o(a,"P",{});var n$=l(Xe);pO=u(n$,"Available with: "),al=o(n$,"A",{href:!0,rel:!0});var EG=l(al);fO=u(EG,"\u{1F917} Transformers"),EG.forEach(t),hO=f(n$),nl=o(n$,"A",{href:!0,rel:!0});var wG=l(nl);dO=u(wG,"Sentence-transformers"),wG.forEach(t),n$.forEach(t),D1=f(a),Zp=o(a,"P",{});var bG=l(Zp);gO=u(bG,"Request:"),bG.forEach(t),O1=f(a),ia=o(a,"TABLE",{});var JE=l(ia);e_=o(JE,"THEAD",{});var jG=l(e_);rl=o(jG,"TR",{});var KE=l(rl);ef=o(KE,"TH",{align:!0});var TG=l(ef);mO=u(TG,"All parameters"),TG.forEach(t),_O=f(KE),t_=o(KE,"TH",{align:!0}),l(t_).forEach(t),KE.forEach(t),jG.forEach(t),$O=f(JE),ae=o(JE,"TBODY",{});var Pe=l(ae);ol=o(Pe,"TR",{});var WE=l(ol);ll=o(WE,"TD",{align:!0});var vR=l(ll);s_=o(vR,"STRONG",{});var kG=l(s_);qO=u(kG,"inputs"),kG.forEach(t),vO=u(vR," (required):"),vR.forEach(t),yO=f(WE),tf=o(WE,"TD",{align:!0});var AG=l(tf);EO=u(AG,"a string or a list of strings to get the features from."),AG.forEach(t),WE.forEach(t),wO=f(Pe),il=o(Pe,"TR",{});var YE=l(il);sf=o(YE,"TD",{align:!0});var DG=l(sf);a_=o(DG,"STRONG",{});var OG=l(a_);bO=u(OG,"options"),OG.forEach(t),DG.forEach(t),jO=f(YE),af=o(YE,"TD",{align:!0});var PG=l(af);TO=u(PG,"a dict containing the following keys:"),PG.forEach(t),YE.forEach(t),kO=f(Pe),ul=o(Pe,"TR",{});var VE=l(ul);nf=o(VE,"TD",{align:!0});var RG=l(nf);AO=u(RG,"use_gpu"),RG.forEach(t),DO=f(VE),ua=o(VE,"TD",{align:!0});var XE=l(ua);OO=u(XE,"(Default: "),n_=o(XE,"CODE",{});var NG=l(n_);PO=u(NG,"false"),NG.forEach(t),RO=u(XE,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),XE.forEach(t),VE.forEach(t),NO=f(Pe),cl=o(Pe,"TR",{});var QE=l(cl);rf=o(QE,"TD",{align:!0});var xG=l(rf);xO=u(xG,"use_cache"),xG.forEach(t),SO=f(QE),ca=o(QE,"TD",{align:!0});var ZE=l(ca);IO=u(ZE,"(Default: "),r_=o(ZE,"CODE",{});var SG=l(r_);HO=u(SG,"true"),SG.forEach(t),BO=u(ZE,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),ZE.forEach(t),QE.forEach(t),CO=f(Pe),pl=o(Pe,"TR",{});var ew=l(pl);of=o(ew,"TD",{align:!0});var IG=l(of);GO=u(IG,"wait_for_model"),IG.forEach(t),UO=f(ew),pa=o(ew,"TD",{align:!0});var tw=l(pa);LO=u(tw,"(Default: "),o_=o(tw,"CODE",{});var HG=l(o_);zO=u(HG,"false"),HG.forEach(t),MO=u(tw,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),tw.forEach(t),ew.forEach(t),Pe.forEach(t),JE.forEach(t),P1=f(a),lf=o(a,"P",{});var BG=l(lf);FO=u(BG,"Return value is either a dict or a list of dicts if you sent a list of inputs"),BG.forEach(t),R1=f(a),fa=o(a,"TABLE",{});var sw=l(fa);l_=o(sw,"THEAD",{});var CG=l(l_);fl=o(CG,"TR",{});var aw=l(fl);uf=o(aw,"TH",{align:!0});var GG=l(uf);JO=u(GG,"Returned values"),GG.forEach(t),KO=f(aw),i_=o(aw,"TH",{align:!0}),l(i_).forEach(t),aw.forEach(t),CG.forEach(t),WO=f(sw),u_=o(sw,"TBODY",{});var UG=l(u_);hl=o(UG,"TR",{});var nw=l(hl);cf=o(nw,"TD",{align:!0});var LG=l(cf);c_=o(LG,"STRONG",{});var zG=l(c_);YO=u(zG,"A list of float (or list of list of floats)"),zG.forEach(t),LG.forEach(t),VO=f(nw),pf=o(nw,"TD",{align:!0});var MG=l(pf);XO=u(MG,"The numbers that are the representation features of the input."),MG.forEach(t),nw.forEach(t),UG.forEach(t),sw.forEach(t),N1=f(a),ff=o(a,"SMALL",{});var FG=l(ff);QO=u(FG,`Returned values are a list of floats, or a list of list of floats
(depending on if you sent a string or a list of string, and if the
automatic reduction, usually mean_pooling for instance was applied for
you or not. This should be explained on the model's README.`),FG.forEach(t),x1=f(a),Qe=o(a,"H2",{class:!0});var rw=l(Qe);ha=o(rw,"A",{id:!0,class:!0,href:!0});var JG=l(ha);p_=o(JG,"SPAN",{});var KG=l(p_);v(dl.$$.fragment,KG),KG.forEach(t),JG.forEach(t),ZO=f(rw),f_=o(rw,"SPAN",{});var WG=l(f_);eP=u(WG,"Audio-classification task"),WG.forEach(t),rw.forEach(t),S1=f(a),hf=o(a,"P",{});var YG=l(hf);tP=u(YG,"This task reads some audio input and outputs the likelihood of classes."),YG.forEach(t),I1=f(a),v(da.$$.fragment,a),H1=f(a),Ze=o(a,"P",{});var r$=l(Ze);sP=u(r$,"Available with: "),gl=o(r$,"A",{href:!0,rel:!0});var VG=l(gl);aP=u(VG,"\u{1F917} Transformers"),VG.forEach(t),nP=f(r$),ml=o(r$,"A",{href:!0,rel:!0});var XG=l(ml);rP=u(XG,"SpeechBrain"),XG.forEach(t),r$.forEach(t),B1=f(a),df=o(a,"P",{});var QG=l(df);oP=u(QG,"Request:"),QG.forEach(t),C1=f(a),v(ga.$$.fragment,a),G1=f(a),gf=o(a,"P",{});var ZG=l(gf);lP=u(ZG,`When sending your request, you should send a binary payload that simply
contains your audio file. We try to support most formats (Flac, Wav,
Mp3, Ogg etc...). And we automatically rescale the sampling rate to the
appropriate rate for the given model (usually 16KHz).`),ZG.forEach(t),U1=f(a),ma=o(a,"TABLE",{});var ow=l(ma);h_=o(ow,"THEAD",{});var eU=l(h_);_l=o(eU,"TR",{});var lw=l(_l);mf=o(lw,"TH",{align:!0});var tU=l(mf);iP=u(tU,"All parameters"),tU.forEach(t),uP=f(lw),d_=o(lw,"TH",{align:!0}),l(d_).forEach(t),lw.forEach(t),eU.forEach(t),cP=f(ow),g_=o(ow,"TBODY",{});var sU=l(g_);$l=o(sU,"TR",{});var iw=l($l);ql=o(iw,"TD",{align:!0});var yR=l(ql);m_=o(yR,"STRONG",{});var aU=l(m_);pP=u(aU,"no parameter"),aU.forEach(t),fP=u(yR," (required)"),yR.forEach(t),hP=f(iw),_f=o(iw,"TD",{align:!0});var nU=l(_f);dP=u(nU,"a binary representation of the audio file. No other parameters are currently allowed."),nU.forEach(t),iw.forEach(t),sU.forEach(t),ow.forEach(t),L1=f(a),$f=o(a,"P",{});var rU=l($f);gP=u(rU,"Return value is a dict"),rU.forEach(t),z1=f(a),v(_a.$$.fragment,a),M1=f(a),$a=o(a,"TABLE",{});var uw=l($a);__=o(uw,"THEAD",{});var oU=l(__);vl=o(oU,"TR",{});var cw=l(vl);qf=o(cw,"TH",{align:!0});var lU=l(qf);mP=u(lU,"Returned values"),lU.forEach(t),_P=f(cw),$_=o(cw,"TH",{align:!0}),l($_).forEach(t),cw.forEach(t),oU.forEach(t),$P=f(uw),yl=o(uw,"TBODY",{});var pw=l(yl);El=o(pw,"TR",{});var fw=l(El);vf=o(fw,"TD",{align:!0});var iU=l(vf);q_=o(iU,"STRONG",{});var uU=l(q_);qP=u(uU,"label"),uU.forEach(t),iU.forEach(t),vP=f(fw),yf=o(fw,"TD",{align:!0});var cU=l(yf);yP=u(cU,"The label for the class (model specific)"),cU.forEach(t),fw.forEach(t),EP=f(pw),wl=o(pw,"TR",{});var hw=l(wl);Ef=o(hw,"TD",{align:!0});var pU=l(Ef);v_=o(pU,"STRONG",{});var fU=l(v_);wP=u(fU,"score"),fU.forEach(t),pU.forEach(t),bP=f(hw),wf=o(hw,"TD",{align:!0});var hU=l(wf);jP=u(hU,"A floats that represents how likely is that the audio file belongs the this class."),hU.forEach(t),hw.forEach(t),pw.forEach(t),uw.forEach(t),F1=f(a),et=o(a,"H2",{class:!0});var dw=l(et);qa=o(dw,"A",{id:!0,class:!0,href:!0});var dU=l(qa);y_=o(dU,"SPAN",{});var gU=l(y_);v(bl.$$.fragment,gU),gU.forEach(t),dU.forEach(t),TP=f(dw),E_=o(dw,"SPAN",{});var mU=l(E_);kP=u(mU,"Object-detection task"),mU.forEach(t),dw.forEach(t),J1=f(a),bf=o(a,"P",{});var _U=l(bf);AP=u(_U,`This task reads some image input and outputs the likelihood of classes &
bounding boxes of detected objects.`),_U.forEach(t),K1=f(a),v(va.$$.fragment,a),W1=f(a),jl=o(a,"P",{});var ER=l(jl);DP=u(ER,"Available with: "),Tl=o(ER,"A",{href:!0,rel:!0});var $U=l(Tl);OP=u($U,"\u{1F917} Transformers"),$U.forEach(t),ER.forEach(t),Y1=f(a),jf=o(a,"P",{});var qU=l(jf);PP=u(qU,"Request:"),qU.forEach(t),V1=f(a),v(ya.$$.fragment,a),X1=f(a),Ea=o(a,"P",{});var gw=l(Ea);RP=u(gw,`When sending your request, you should send a binary payload that simply
contains your image file. We support all image formats `),kl=o(gw,"A",{href:!0,rel:!0});var vU=l(kl);NP=u(vU,`Pillow
supports`),vU.forEach(t),xP=u(gw,"."),gw.forEach(t),Q1=f(a),wa=o(a,"TABLE",{});var mw=l(wa);w_=o(mw,"THEAD",{});var yU=l(w_);Al=o(yU,"TR",{});var _w=l(Al);Tf=o(_w,"TH",{align:!0});var EU=l(Tf);SP=u(EU,"All parameters"),EU.forEach(t),IP=f(_w),b_=o(_w,"TH",{align:!0}),l(b_).forEach(t),_w.forEach(t),yU.forEach(t),HP=f(mw),j_=o(mw,"TBODY",{});var wU=l(j_);Dl=o(wU,"TR",{});var $w=l(Dl);Ol=o($w,"TD",{align:!0});var wR=l(Ol);T_=o(wR,"STRONG",{});var bU=l(T_);BP=u(bU,"no parameter"),bU.forEach(t),CP=u(wR," (required)"),wR.forEach(t),GP=f($w),kf=o($w,"TD",{align:!0});var jU=l(kf);UP=u(jU,"a binary representation of the image file. No other parameters are currently allowed."),jU.forEach(t),$w.forEach(t),wU.forEach(t),mw.forEach(t),Z1=f(a),Af=o(a,"P",{});var TU=l(Af);LP=u(TU,"Return value is a dict"),TU.forEach(t),ev=f(a),v(ba.$$.fragment,a),tv=f(a),ja=o(a,"TABLE",{});var qw=l(ja);k_=o(qw,"THEAD",{});var kU=l(k_);Pl=o(kU,"TR",{});var vw=l(Pl);Df=o(vw,"TH",{align:!0});var AU=l(Df);zP=u(AU,"Returned values"),AU.forEach(t),MP=f(vw),A_=o(vw,"TH",{align:!0}),l(A_).forEach(t),vw.forEach(t),kU.forEach(t),FP=f(qw),tt=o(qw,"TBODY",{});var Zf=l(tt);Rl=o(Zf,"TR",{});var yw=l(Rl);Of=o(yw,"TD",{align:!0});var DU=l(Of);D_=o(DU,"STRONG",{});var OU=l(D_);JP=u(OU,"label"),OU.forEach(t),DU.forEach(t),KP=f(yw),Pf=o(yw,"TD",{align:!0});var PU=l(Pf);WP=u(PU,"The label for the class (model specific) of a detected object."),PU.forEach(t),yw.forEach(t),YP=f(Zf),Nl=o(Zf,"TR",{});var Ew=l(Nl);Rf=o(Ew,"TD",{align:!0});var RU=l(Rf);O_=o(RU,"STRONG",{});var NU=l(O_);VP=u(NU,"score"),NU.forEach(t),RU.forEach(t),XP=f(Ew),Nf=o(Ew,"TD",{align:!0});var xU=l(Nf);QP=u(xU,"A float that represents how likely it is that the detected object belongs to the given class."),xU.forEach(t),Ew.forEach(t),ZP=f(Zf),xl=o(Zf,"TR",{});var ww=l(xl);xf=o(ww,"TD",{align:!0});var SU=l(xf);P_=o(SU,"STRONG",{});var IU=l(P_);eR=u(IU,"box"),IU.forEach(t),SU.forEach(t),tR=f(ww),Sf=o(ww,"TD",{align:!0});var HU=l(Sf);sR=u(HU,"A dict (with keys [xmin,ymin,xmax,ymax]) representing the bounding box of a detected object."),HU.forEach(t),ww.forEach(t),Zf.forEach(t),qw.forEach(t),this.h()},h(){h(n,"name","hf:doc:metadata"),h(n,"content",JSON.stringify(Vz)),h(d,"id","detailed-parameters"),h(d,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(d,"href","#detailed-parameters"),h(s,"class","relative group"),h(ne,"id","which-task-is-used-by-this-model"),h(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ne,"href","#which-task-is-used-by-this-model"),h(D,"class","relative group"),h(nt,"class","block dark:hidden"),BU(nt.src,bR="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/inference-api/task.png")||h(nt,"src",bR),h(nt,"width","300"),h(rt,"class","hidden dark:block invert"),BU(rt.src,jR="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/inference-api/task-dark.png")||h(rt,"src",jR),h(rt,"width","300"),h(ot,"id","zeroshot-classification-task"),h(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ot,"href","#zeroshot-classification-task"),h(xe,"class","relative group"),h(Ia,"href","https://github.com/huggingface/transformers"),h(Ia,"rel","nofollow"),h(Vl,"align","left"),h(ah,"align","left"),h(Ca,"align","left"),h(Xl,"align","left"),h(Ua,"align","left"),h(Ql,"align","left"),h(Zl,"align","left"),h(he,"align","left"),h(ei,"align","left"),h(ct,"align","left"),h(ti,"align","left"),h(si,"align","left"),h(ai,"align","left"),h(pt,"align","left"),h(ni,"align","left"),h(ft,"align","left"),h(ri,"align","left"),h(ht,"align","left"),h(ii,"align","left"),h(dh,"align","left"),h(ui,"align","left"),h(ci,"align","left"),h(pi,"align","left"),h(fi,"align","left"),h(hi,"align","left"),h(mt,"align","left"),h(_t,"id","translation-task"),h(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(_t,"href","#translation-task"),h(Ie,"class","relative group"),h(en,"href","https://github.com/huggingface/transformers"),h(en,"rel","nofollow"),h(_i,"align","left"),h(Eh,"align","left"),h(an,"align","left"),h($i,"align","left"),h(qi,"align","left"),h(vi,"align","left"),h(yi,"align","left"),h(yt,"align","left"),h(Ei,"align","left"),h(Et,"align","left"),h(wi,"align","left"),h(wt,"align","left"),h(ji,"align","left"),h(Dh,"align","left"),h(Ti,"align","left"),h(ki,"align","left"),h(jt,"id","summarization-task"),h(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(jt,"href","#summarization-task"),h(He,"class","relative group"),h(Ai,"href","mailto:api-enterprise@huggingface.co"),h(hn,"href","https://github.com/huggingface/transformers"),h(hn,"rel","nofollow"),h(Pi,"align","left"),h(Sh,"align","left"),h(mn,"align","left"),h(Ri,"align","left"),h(Ni,"align","left"),h(xi,"align","left"),h(Si,"align","left"),h(de,"align","left"),h(Ii,"align","left"),h(ge,"align","left"),h(Hi,"align","left"),h(me,"align","left"),h(Bi,"align","left"),h(re,"align","left"),h(Ci,"align","left"),h(_e,"align","left"),h(Gi,"align","left"),h(Ot,"align","left"),h(Ui,"align","left"),h(Pt,"align","left"),h(Li,"align","left"),h(zi,"align","left"),h(Mi,"align","left"),h(Rt,"align","left"),h(Fi,"align","left"),h(Nt,"align","left"),h(Ji,"align","left"),h(xt,"align","left"),h(Wi,"align","left"),h(sd,"align","left"),h(Yi,"align","left"),h(Vi,"align","left"),h(It,"id","conversational-task"),h(It,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(It,"href","#conversational-task"),h(Be,"class","relative group"),h(Nn,"href","https://github.com/huggingface/transformers"),h(Nn,"rel","nofollow"),h(eu,"align","left"),h(id,"align","left"),h(In,"align","left"),h(cd,"align","left"),h(tu,"align","left"),h(su,"align","left"),h(au,"align","left"),h(nu,"align","left"),h(ru,"align","left"),h(Gt,"align","left"),h(ou,"align","left"),h(lu,"align","left"),h(iu,"align","left"),h($e,"align","left"),h(uu,"align","left"),h(qe,"align","left"),h(cu,"align","left"),h(ve,"align","left"),h(pu,"align","left"),h(oe,"align","left"),h(fu,"align","left"),h(ye,"align","left"),h(hu,"align","left"),h(Ut,"align","left"),h(du,"align","left"),h(Lt,"align","left"),h(gu,"align","left"),h(mu,"align","left"),h(_u,"align","left"),h(zt,"align","left"),h($u,"align","left"),h(Mt,"align","left"),h(qu,"align","left"),h(Ft,"align","left"),h(yu,"align","left"),h(Pd,"align","left"),h(Eu,"align","left"),h(wu,"align","left"),h(bu,"align","left"),h(ju,"align","left"),h(Tu,"align","left"),h(ku,"align","left"),h(Au,"align","left"),h(Du,"align","left"),h(Kt,"id","table-question-answering-task"),h(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Kt,"href","#table-question-answering-task"),h(Ce,"class","relative group"),h(rr,"href","https://github.com/huggingface/transformers"),h(rr,"rel","nofollow"),h(Nu,"align","left"),h(Hd,"align","left"),h(ir,"align","left"),h(Cd,"align","left"),h(xu,"align","left"),h(Su,"align","left"),h(Iu,"align","left"),h(Hu,"align","left"),h(Bu,"align","left"),h(Cu,"align","left"),h(Gu,"align","left"),h(Xt,"align","left"),h(Uu,"align","left"),h(Qt,"align","left"),h(Lu,"align","left"),h(Zt,"align","left"),h(Mu,"align","left"),h(Fd,"align","left"),h(Fu,"align","left"),h(Ju,"align","left"),h(Ku,"align","left"),h(Wu,"align","left"),h(Yu,"align","left"),h(Vu,"align","left"),h(Xu,"align","left"),h(Qu,"align","left"),h(ss,"id","question-answering-task"),h(ss,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ss,"href","#question-answering-task"),h(Ge,"class","relative group"),h(yr,"href","https://github.com/huggingface/transformers"),h(yr,"rel","nofollow"),h(Er,"href","https://github.com/allenai/allennlp"),h(Er,"rel","nofollow"),h(ac,"align","left"),h(Zd,"align","left"),h(nc,"align","left"),h(rc,"align","left"),h(oc,"align","left"),h(lc,"align","left"),h(ic,"align","left"),h(ls,"align","left"),h(uc,"align","left"),h(is,"align","left"),h(us,"id","textclassification-task"),h(us,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(us,"href","#textclassification-task"),h(Le,"class","relative group"),h(Or,"href","https://github.com/huggingface/transformers"),h(Or,"rel","nofollow"),h(hc,"align","left"),h(ug,"align","left"),h(Nr,"align","left"),h(dc,"align","left"),h(gc,"align","left"),h(mc,"align","left"),h(_c,"align","left"),h(hs,"align","left"),h($c,"align","left"),h(ds,"align","left"),h(qc,"align","left"),h(gs,"align","left"),h(yc,"align","left"),h(mg,"align","left"),h(Ec,"align","left"),h(wc,"align","left"),h(bc,"align","left"),h(jc,"align","left"),h($s,"id","named-entity-recognition-ner-task"),h($s,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h($s,"href","#named-entity-recognition-ner-task"),h(ze,"class","relative group"),h(Tc,"href","#token-classification-task"),h(qs,"id","tokenclassification-task"),h(qs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(qs,"href","#tokenclassification-task"),h(Me,"class","relative group"),h(Fr,"href","https://github.com/huggingface/transformers"),h(Fr,"rel","nofollow"),h(Jr,"href","https://github.com/flairNLP/flair"),h(Jr,"rel","nofollow"),h(Oc,"align","left"),h(bg,"align","left"),h(Yr,"align","left"),h(Pc,"align","left"),h(Rc,"align","left"),h(Nc,"align","left"),h(xc,"align","left"),h(S,"align","left"),h(Sc,"align","left"),h(Ic,"align","left"),h(Hc,"align","left"),h(ws,"align","left"),h(Bc,"align","left"),h(bs,"align","left"),h(Cc,"align","left"),h(js,"align","left"),h(Uc,"align","left"),h(Ug,"align","left"),h(Lc,"align","left"),h(zc,"align","left"),h(Mc,"align","left"),h(Fc,"align","left"),h(Jc,"align","left"),h(Kc,"align","left"),h(Wc,"align","left"),h(As,"align","left"),h(Yc,"align","left"),h(Ds,"align","left"),h(Os,"id","textgeneration-task"),h(Os,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Os,"href","#textgeneration-task"),h(Je,"class","relative group"),h(co,"href","https://github.com/huggingface/transformers"),h(co,"rel","nofollow"),h(Zc,"align","left"),h(Qg,"align","left"),h(ho,"align","left"),h(ep,"align","left"),h(tp,"align","left"),h(sp,"align","left"),h(ap,"align","left"),h(Ee,"align","left"),h(np,"align","left"),h(le,"align","left"),h(rp,"align","left"),h(we,"align","left"),h(op,"align","left"),h(xs,"align","left"),h(lp,"align","left"),h(be,"align","left"),h(ip,"align","left"),h(je,"align","left"),h(up,"align","left"),h(Te,"align","left"),h(cp,"align","left"),h(Ss,"align","left"),h(pp,"align","left"),h(Is,"align","left"),h(fp,"align","left"),h(hp,"align","left"),h(dp,"align","left"),h(Hs,"align","left"),h(gp,"align","left"),h(Bs,"align","left"),h(mp,"align","left"),h(Cs,"align","left"),h($p,"align","left"),h(Em,"align","left"),h(qp,"align","left"),h(vp,"align","left"),h(Ls,"id","text2textgeneration-task"),h(Ls,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ls,"href","#text2textgeneration-task"),h(Ke,"class","relative group"),h(yp,"href","#text-generation-task"),h(Ms,"id","fill-mask-task"),h(Ms,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ms,"href","#fill-mask-task"),h(We,"class","relative group"),h(xo,"href","https://github.com/huggingface/transformers"),h(xo,"rel","nofollow"),h(jp,"align","left"),h(Om,"align","left"),h(Ho,"align","left"),h(Tp,"align","left"),h(kp,"align","left"),h(Ap,"align","left"),h(Dp,"align","left"),h(Ws,"align","left"),h(Op,"align","left"),h(Ys,"align","left"),h(Pp,"align","left"),h(Vs,"align","left"),h(Np,"align","left"),h(Hm,"align","left"),h(xp,"align","left"),h(Sp,"align","left"),h(Ip,"align","left"),h(Hp,"align","left"),h(Bp,"align","left"),h(Cp,"align","left"),h(Gp,"align","left"),h(Up,"align","left"),h(Zs,"id","automatic-speech-recognition-task"),h(Zs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Zs,"href","#automatic-speech-recognition-task"),h(Ye,"class","relative group"),h(Wo,"href","https://github.com/huggingface/transformers"),h(Wo,"rel","nofollow"),h(Yo,"href","https://github.com/espnet/espnet"),h(Yo,"rel","nofollow"),h(Vo,"href","https://github.com/speechbrain/speechbrain"),h(Vo,"rel","nofollow"),h(Fp,"align","left"),h(Fm,"align","left"),h(Zo,"align","left"),h(Jp,"align","left"),h(Yp,"align","left"),h(Ym,"align","left"),h(Vp,"align","left"),h(Xp,"align","left"),h(oa,"id","featureextraction-task"),h(oa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(oa,"href","#featureextraction-task"),h(Ve,"class","relative group"),h(al,"href","https://github.com/huggingface/transformers"),h(al,"rel","nofollow"),h(nl,"href","https://github.com/UKPLab/sentence-transformers"),h(nl,"rel","nofollow"),h(ef,"align","left"),h(t_,"align","left"),h(ll,"align","left"),h(tf,"align","left"),h(sf,"align","left"),h(af,"align","left"),h(nf,"align","left"),h(ua,"align","left"),h(rf,"align","left"),h(ca,"align","left"),h(of,"align","left"),h(pa,"align","left"),h(uf,"align","left"),h(i_,"align","left"),h(cf,"align","left"),h(pf,"align","left"),h(ha,"id","audioclassification-task"),h(ha,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ha,"href","#audioclassification-task"),h(Qe,"class","relative group"),h(gl,"href","https://github.com/huggingface/transformers"),h(gl,"rel","nofollow"),h(ml,"href","https://github.com/speechbrain/speechbrain"),h(ml,"rel","nofollow"),h(mf,"align","left"),h(d_,"align","left"),h(ql,"align","left"),h(_f,"align","left"),h(qf,"align","left"),h($_,"align","left"),h(vf,"align","left"),h(yf,"align","left"),h(Ef,"align","left"),h(wf,"align","left"),h(qa,"id","objectdetection-task"),h(qa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(qa,"href","#objectdetection-task"),h(et,"class","relative group"),h(Tl,"href","https://github.com/huggingface/transformers"),h(Tl,"rel","nofollow"),h(kl,"href","https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html"),h(kl,"rel","nofollow"),h(Tf,"align","left"),h(b_,"align","left"),h(Ol,"align","left"),h(kf,"align","left"),h(Df,"align","left"),h(A_,"align","left"),h(Of,"align","left"),h(Pf,"align","left"),h(Rf,"align","left"),h(Nf,"align","left"),h(xf,"align","left"),h(Sf,"align","left")},m(a,g){e(document.head,n),m(a,c,g),m(a,s,g),e(s,d),e(d,_),y(k,_,null),e(s,A),e(s,T),e(T,j),m(a,O,g),m(a,D,g),e(D,ne),e(ne,Re),y(Q,Re,null),e(D,W),e(D,at),e(at,Fl),m(a,Na,g),m(a,Ne,g),e(Ne,bw),m(a,o$,g),m(a,Jl,g),e(Jl,jw),m(a,l$,g),m(a,nt,g),m(a,i$,g),m(a,rt,g),m(a,u$,g),m(a,xe,g),e(xe,ot),e(ot,eh),y(xa,eh,null),e(xe,Tw),e(xe,th),e(th,kw),m(a,c$,g),m(a,Kl,g),e(Kl,Aw),m(a,p$,g),y(lt,a,g),m(a,f$,g),m(a,Sa,g),e(Sa,Dw),e(Sa,Ia),e(Ia,Ow),m(a,h$,g),m(a,Wl,g),e(Wl,Pw),m(a,d$,g),y(it,a,g),m(a,g$,g),m(a,Yl,g),e(Yl,Rw),m(a,m$,g),m(a,ut,g),e(ut,sh),e(sh,Ha),e(Ha,Vl),e(Vl,Nw),e(Ha,xw),e(Ha,ah),e(ut,Sw),e(ut,z),e(z,Ba),e(Ba,Ca),e(Ca,nh),e(nh,Iw),e(Ca,Hw),e(Ba,Bw),e(Ba,Xl),e(Xl,Cw),e(z,Gw),e(z,Ga),e(Ga,Ua),e(Ua,rh),e(rh,Uw),e(Ua,Lw),e(Ga,zw),e(Ga,Ql),e(Ql,Mw),e(z,Fw),e(z,La),e(La,Zl),e(Zl,Jw),e(La,Kw),e(La,he),e(he,Ww),e(he,oh),e(oh,Yw),e(he,Vw),e(he,lh),e(lh,Xw),e(he,Qw),e(z,Zw),e(z,za),e(za,ei),e(ei,eb),e(za,tb),e(za,ct),e(ct,sb),e(ct,ih),e(ih,ab),e(ct,nb),e(z,rb),e(z,Ma),e(Ma,ti),e(ti,uh),e(uh,ob),e(Ma,lb),e(Ma,si),e(si,ib),e(z,ub),e(z,Fa),e(Fa,ai),e(ai,cb),e(Fa,pb),e(Fa,pt),e(pt,fb),e(pt,ch),e(ch,hb),e(pt,db),e(z,gb),e(z,Ja),e(Ja,ni),e(ni,mb),e(Ja,_b),e(Ja,ft),e(ft,$b),e(ft,ph),e(ph,qb),e(ft,vb),e(z,yb),e(z,Ka),e(Ka,ri),e(ri,Eb),e(Ka,wb),e(Ka,ht),e(ht,bb),e(ht,fh),e(fh,jb),e(ht,Tb),m(a,_$,g),m(a,oi,g),e(oi,kb),m(a,$$,g),m(a,li,g),e(li,Ab),m(a,q$,g),y(dt,a,g),m(a,v$,g),m(a,gt,g),e(gt,hh),e(hh,Wa),e(Wa,ii),e(ii,Db),e(Wa,Ob),e(Wa,dh),e(gt,Pb),e(gt,Se),e(Se,Ya),e(Ya,ui),e(ui,gh),e(gh,Rb),e(Ya,Nb),e(Ya,ci),e(ci,xb),e(Se,Sb),e(Se,Va),e(Va,pi),e(pi,mh),e(mh,Ib),e(Va,Hb),e(Va,fi),e(fi,Bb),e(Se,Cb),e(Se,Xa),e(Xa,hi),e(hi,_h),e(_h,Gb),e(Xa,Ub),e(Xa,mt),e(mt,Lb),e(mt,$h),e($h,zb),e(mt,Mb),m(a,y$,g),m(a,Ie,g),e(Ie,_t),e(_t,qh),y(Qa,qh,null),e(Ie,Fb),e(Ie,vh),e(vh,Jb),m(a,E$,g),m(a,di,g),e(di,Kb),m(a,w$,g),y($t,a,g),m(a,b$,g),m(a,Za,g),e(Za,Wb),e(Za,en),e(en,Yb),m(a,j$,g),m(a,gi,g),e(gi,Vb),m(a,T$,g),y(qt,a,g),m(a,k$,g),m(a,mi,g),e(mi,Xb),m(a,A$,g),m(a,vt,g),e(vt,yh),e(yh,tn),e(tn,_i),e(_i,Qb),e(tn,Zb),e(tn,Eh),e(vt,ej),e(vt,Z),e(Z,sn),e(sn,an),e(an,wh),e(wh,tj),e(an,sj),e(sn,aj),e(sn,$i),e($i,nj),e(Z,rj),e(Z,nn),e(nn,qi),e(qi,bh),e(bh,oj),e(nn,lj),e(nn,vi),e(vi,ij),e(Z,uj),e(Z,rn),e(rn,yi),e(yi,cj),e(rn,pj),e(rn,yt),e(yt,fj),e(yt,jh),e(jh,hj),e(yt,dj),e(Z,gj),e(Z,on),e(on,Ei),e(Ei,mj),e(on,_j),e(on,Et),e(Et,$j),e(Et,Th),e(Th,qj),e(Et,vj),e(Z,yj),e(Z,ln),e(ln,wi),e(wi,Ej),e(ln,wj),e(ln,wt),e(wt,bj),e(wt,kh),e(kh,jj),e(wt,Tj),m(a,D$,g),m(a,bi,g),e(bi,kj),m(a,O$,g),m(a,bt,g),e(bt,Ah),e(Ah,un),e(un,ji),e(ji,Aj),e(un,Dj),e(un,Dh),e(bt,Oj),e(bt,Oh),e(Oh,cn),e(cn,Ti),e(Ti,Ph),e(Ph,Pj),e(cn,Rj),e(cn,ki),e(ki,Nj),m(a,P$,g),m(a,He,g),e(He,jt),e(jt,Rh),y(pn,Rh,null),e(He,xj),e(He,Nh),e(Nh,Sj),m(a,R$,g),m(a,Tt,g),e(Tt,Ij),e(Tt,Ai),e(Ai,Hj),e(Tt,Bj),m(a,N$,g),y(kt,a,g),m(a,x$,g),m(a,fn,g),e(fn,Cj),e(fn,hn),e(hn,Gj),m(a,S$,g),m(a,Di,g),e(Di,Uj),m(a,I$,g),y(At,a,g),m(a,H$,g),m(a,Oi,g),e(Oi,Lj),m(a,B$,g),m(a,Dt,g),e(Dt,xh),e(xh,dn),e(dn,Pi),e(Pi,zj),e(dn,Mj),e(dn,Sh),e(Dt,Fj),e(Dt,G),e(G,gn),e(gn,mn),e(mn,Ih),e(Ih,Jj),e(mn,Kj),e(gn,Wj),e(gn,Ri),e(Ri,Yj),e(G,Vj),e(G,_n),e(_n,Ni),e(Ni,Hh),e(Hh,Xj),e(_n,Qj),e(_n,xi),e(xi,Zj),e(G,e0),e(G,$n),e($n,Si),e(Si,t0),e($n,s0),e($n,de),e(de,a0),e(de,Bh),e(Bh,n0),e(de,r0),e(de,Ch),e(Ch,o0),e(de,l0),e(G,i0),e(G,qn),e(qn,Ii),e(Ii,u0),e(qn,c0),e(qn,ge),e(ge,p0),e(ge,Gh),e(Gh,f0),e(ge,h0),e(ge,Uh),e(Uh,d0),e(ge,g0),e(G,m0),e(G,vn),e(vn,Hi),e(Hi,_0),e(vn,$0),e(vn,me),e(me,q0),e(me,Lh),e(Lh,v0),e(me,y0),e(me,zh),e(zh,E0),e(me,w0),e(G,b0),e(G,yn),e(yn,Bi),e(Bi,j0),e(yn,T0),e(yn,re),e(re,k0),e(re,Mh),e(Mh,A0),e(re,D0),e(re,Fh),e(Fh,O0),e(re,P0),e(re,Jh),e(Jh,R0),e(re,N0),e(G,x0),e(G,En),e(En,Ci),e(Ci,S0),e(En,I0),e(En,_e),e(_e,H0),e(_e,Kh),e(Kh,B0),e(_e,C0),e(_e,Wh),e(Wh,G0),e(_e,U0),e(G,L0),e(G,wn),e(wn,Gi),e(Gi,z0),e(wn,M0),e(wn,Ot),e(Ot,F0),e(Ot,Yh),e(Yh,J0),e(Ot,K0),e(G,W0),e(G,bn),e(bn,Ui),e(Ui,Y0),e(bn,V0),e(bn,Pt),e(Pt,X0),e(Pt,Vh),e(Vh,Q0),e(Pt,Z0),e(G,eT),e(G,jn),e(jn,Li),e(Li,Xh),e(Xh,tT),e(jn,sT),e(jn,zi),e(zi,aT),e(G,nT),e(G,Tn),e(Tn,Mi),e(Mi,rT),e(Tn,oT),e(Tn,Rt),e(Rt,lT),e(Rt,Qh),e(Qh,iT),e(Rt,uT),e(G,cT),e(G,kn),e(kn,Fi),e(Fi,pT),e(kn,fT),e(kn,Nt),e(Nt,hT),e(Nt,Zh),e(Zh,dT),e(Nt,gT),e(G,mT),e(G,An),e(An,Ji),e(Ji,_T),e(An,$T),e(An,xt),e(xt,qT),e(xt,ed),e(ed,vT),e(xt,yT),m(a,C$,g),m(a,Ki,g),e(Ki,ET),m(a,G$,g),m(a,St,g),e(St,td),e(td,Dn),e(Dn,Wi),e(Wi,wT),e(Dn,bT),e(Dn,sd),e(St,jT),e(St,ad),e(ad,On),e(On,Yi),e(Yi,nd),e(nd,TT),e(On,kT),e(On,Vi),e(Vi,AT),m(a,U$,g),m(a,Be,g),e(Be,It),e(It,rd),y(Pn,rd,null),e(Be,DT),e(Be,od),e(od,OT),m(a,L$,g),m(a,Xi,g),e(Xi,PT),m(a,z$,g),y(Ht,a,g),m(a,M$,g),m(a,Rn,g),e(Rn,RT),e(Rn,Nn),e(Nn,NT),m(a,F$,g),m(a,Qi,g),e(Qi,xT),m(a,J$,g),y(Bt,a,g),m(a,K$,g),m(a,Zi,g),e(Zi,ST),m(a,W$,g),m(a,Ct,g),e(Ct,ld),e(ld,xn),e(xn,eu),e(eu,IT),e(xn,HT),e(xn,id),e(Ct,BT),e(Ct,x),e(x,Sn),e(Sn,In),e(In,ud),e(ud,CT),e(In,GT),e(Sn,UT),e(Sn,cd),e(x,LT),e(x,Hn),e(Hn,tu),e(tu,zT),e(Hn,MT),e(Hn,su),e(su,FT),e(x,JT),e(x,Bn),e(Bn,au),e(au,KT),e(Bn,WT),e(Bn,nu),e(nu,YT),e(x,VT),e(x,Cn),e(Cn,ru),e(ru,XT),e(Cn,QT),e(Cn,Gt),e(Gt,ZT),e(Gt,pd),e(pd,e3),e(Gt,t3),e(x,s3),e(x,Gn),e(Gn,ou),e(ou,fd),e(fd,a3),e(Gn,n3),e(Gn,lu),e(lu,r3),e(x,o3),e(x,Un),e(Un,iu),e(iu,l3),e(Un,i3),e(Un,$e),e($e,u3),e($e,hd),e(hd,c3),e($e,p3),e($e,dd),e(dd,f3),e($e,h3),e(x,d3),e(x,Ln),e(Ln,uu),e(uu,g3),e(Ln,m3),e(Ln,qe),e(qe,_3),e(qe,gd),e(gd,$3),e(qe,q3),e(qe,md),e(md,v3),e(qe,y3),e(x,E3),e(x,zn),e(zn,cu),e(cu,w3),e(zn,b3),e(zn,ve),e(ve,j3),e(ve,_d),e(_d,T3),e(ve,k3),e(ve,$d),e($d,A3),e(ve,D3),e(x,O3),e(x,Mn),e(Mn,pu),e(pu,P3),e(Mn,R3),e(Mn,oe),e(oe,N3),e(oe,qd),e(qd,x3),e(oe,S3),e(oe,vd),e(vd,I3),e(oe,H3),e(oe,yd),e(yd,B3),e(oe,C3),e(x,G3),e(x,Fn),e(Fn,fu),e(fu,U3),e(Fn,L3),e(Fn,ye),e(ye,z3),e(ye,Ed),e(Ed,M3),e(ye,F3),e(ye,wd),e(wd,J3),e(ye,K3),e(x,W3),e(x,Jn),e(Jn,hu),e(hu,Y3),e(Jn,V3),e(Jn,Ut),e(Ut,X3),e(Ut,bd),e(bd,Q3),e(Ut,Z3),e(x,e5),e(x,Kn),e(Kn,du),e(du,t5),e(Kn,s5),e(Kn,Lt),e(Lt,a5),e(Lt,jd),e(jd,n5),e(Lt,r5),e(x,o5),e(x,Wn),e(Wn,gu),e(gu,Td),e(Td,l5),e(Wn,i5),e(Wn,mu),e(mu,u5),e(x,c5),e(x,Yn),e(Yn,_u),e(_u,p5),e(Yn,f5),e(Yn,zt),e(zt,h5),e(zt,kd),e(kd,d5),e(zt,g5),e(x,m5),e(x,Vn),e(Vn,$u),e($u,_5),e(Vn,$5),e(Vn,Mt),e(Mt,q5),e(Mt,Ad),e(Ad,v5),e(Mt,y5),e(x,E5),e(x,Xn),e(Xn,qu),e(qu,w5),e(Xn,b5),e(Xn,Ft),e(Ft,j5),e(Ft,Dd),e(Dd,T5),e(Ft,k5),m(a,Y$,g),m(a,vu,g),e(vu,A5),m(a,V$,g),m(a,Jt,g),e(Jt,Od),e(Od,Qn),e(Qn,yu),e(yu,D5),e(Qn,O5),e(Qn,Pd),e(Jt,P5),e(Jt,ie),e(ie,Zn),e(Zn,Eu),e(Eu,Rd),e(Rd,R5),e(Zn,N5),e(Zn,wu),e(wu,x5),e(ie,S5),e(ie,er),e(er,bu),e(bu,Nd),e(Nd,I5),e(er,H5),e(er,ju),e(ju,B5),e(ie,C5),e(ie,tr),e(tr,Tu),e(Tu,G5),e(tr,U5),e(tr,ku),e(ku,L5),e(ie,z5),e(ie,sr),e(sr,Au),e(Au,M5),e(sr,F5),e(sr,Du),e(Du,J5),m(a,X$,g),m(a,Ce,g),e(Ce,Kt),e(Kt,xd),y(ar,xd,null),e(Ce,K5),e(Ce,Sd),e(Sd,W5),m(a,Q$,g),m(a,Ou,g),e(Ou,Y5),m(a,Z$,g),y(Wt,a,g),m(a,eq,g),m(a,nr,g),e(nr,V5),e(nr,rr),e(rr,X5),m(a,tq,g),m(a,Pu,g),e(Pu,Q5),m(a,sq,g),y(Yt,a,g),m(a,aq,g),m(a,Ru,g),e(Ru,Z5),m(a,nq,g),m(a,Vt,g),e(Vt,Id),e(Id,or),e(or,Nu),e(Nu,ek),e(or,tk),e(or,Hd),e(Vt,sk),e(Vt,J),e(J,lr),e(lr,ir),e(ir,Bd),e(Bd,ak),e(ir,nk),e(lr,rk),e(lr,Cd),e(J,ok),e(J,ur),e(ur,xu),e(xu,lk),e(ur,ik),e(ur,Su),e(Su,uk),e(J,ck),e(J,cr),e(cr,Iu),e(Iu,pk),e(cr,fk),e(cr,Hu),e(Hu,hk),e(J,dk),e(J,pr),e(pr,Bu),e(Bu,Gd),e(Gd,gk),e(pr,mk),e(pr,Cu),e(Cu,_k),e(J,$k),e(J,fr),e(fr,Gu),e(Gu,qk),e(fr,vk),e(fr,Xt),e(Xt,yk),e(Xt,Ud),e(Ud,Ek),e(Xt,wk),e(J,bk),e(J,hr),e(hr,Uu),e(Uu,jk),e(hr,Tk),e(hr,Qt),e(Qt,kk),e(Qt,Ld),e(Ld,Ak),e(Qt,Dk),e(J,Ok),e(J,dr),e(dr,Lu),e(Lu,Pk),e(dr,Rk),e(dr,Zt),e(Zt,Nk),e(Zt,zd),e(zd,xk),e(Zt,Sk),m(a,rq,g),m(a,zu,g),e(zu,Ik),m(a,oq,g),y(es,a,g),m(a,lq,g),m(a,ts,g),e(ts,Md),e(Md,gr),e(gr,Mu),e(Mu,Hk),e(gr,Bk),e(gr,Fd),e(ts,Ck),e(ts,ue),e(ue,mr),e(mr,Fu),e(Fu,Jd),e(Jd,Gk),e(mr,Uk),e(mr,Ju),e(Ju,Lk),e(ue,zk),e(ue,_r),e(_r,Ku),e(Ku,Kd),e(Kd,Mk),e(_r,Fk),e(_r,Wu),e(Wu,Jk),e(ue,Kk),e(ue,$r),e($r,Yu),e(Yu,Wd),e(Wd,Wk),e($r,Yk),e($r,Vu),e(Vu,Vk),e(ue,Xk),e(ue,qr),e(qr,Xu),e(Xu,Yd),e(Yd,Qk),e(qr,Zk),e(qr,Qu),e(Qu,e4),m(a,iq,g),m(a,Ge,g),e(Ge,ss),e(ss,Vd),y(vr,Vd,null),e(Ge,t4),e(Ge,Xd),e(Xd,s4),m(a,uq,g),m(a,Zu,g),e(Zu,a4),m(a,cq,g),y(as,a,g),m(a,pq,g),m(a,Ue,g),e(Ue,n4),e(Ue,yr),e(yr,r4),e(Ue,o4),e(Ue,Er),e(Er,l4),m(a,fq,g),m(a,ec,g),e(ec,i4),m(a,hq,g),y(ns,a,g),m(a,dq,g),m(a,tc,g),e(tc,u4),m(a,gq,g),m(a,sc,g),e(sc,c4),m(a,mq,g),y(rs,a,g),m(a,_q,g),m(a,os,g),e(os,Qd),e(Qd,wr),e(wr,ac),e(ac,p4),e(wr,f4),e(wr,Zd),e(os,h4),e(os,ce),e(ce,br),e(br,nc),e(nc,eg),e(eg,d4),e(br,g4),e(br,rc),e(rc,m4),e(ce,_4),e(ce,jr),e(jr,oc),e(oc,tg),e(tg,$4),e(jr,q4),e(jr,lc),e(lc,v4),e(ce,y4),e(ce,Tr),e(Tr,ic),e(ic,sg),e(sg,E4),e(Tr,w4),e(Tr,ls),e(ls,b4),e(ls,ag),e(ag,j4),e(ls,T4),e(ce,k4),e(ce,kr),e(kr,uc),e(uc,ng),e(ng,A4),e(kr,D4),e(kr,is),e(is,O4),e(is,rg),e(rg,P4),e(is,R4),m(a,$q,g),m(a,Le,g),e(Le,us),e(us,og),y(Ar,og,null),e(Le,N4),e(Le,lg),e(lg,x4),m(a,qq,g),m(a,cc,g),e(cc,S4),m(a,vq,g),y(cs,a,g),m(a,yq,g),m(a,Dr,g),e(Dr,I4),e(Dr,Or),e(Or,H4),m(a,Eq,g),m(a,pc,g),e(pc,B4),m(a,wq,g),y(ps,a,g),m(a,bq,g),m(a,fc,g),e(fc,C4),m(a,jq,g),m(a,fs,g),e(fs,ig),e(ig,Pr),e(Pr,hc),e(hc,G4),e(Pr,U4),e(Pr,ug),e(fs,L4),e(fs,ee),e(ee,Rr),e(Rr,Nr),e(Nr,cg),e(cg,z4),e(Nr,M4),e(Rr,F4),e(Rr,dc),e(dc,J4),e(ee,K4),e(ee,xr),e(xr,gc),e(gc,pg),e(pg,W4),e(xr,Y4),e(xr,mc),e(mc,V4),e(ee,X4),e(ee,Sr),e(Sr,_c),e(_c,Q4),e(Sr,Z4),e(Sr,hs),e(hs,e7),e(hs,fg),e(fg,t7),e(hs,s7),e(ee,a7),e(ee,Ir),e(Ir,$c),e($c,n7),e(Ir,r7),e(Ir,ds),e(ds,o7),e(ds,hg),e(hg,l7),e(ds,i7),e(ee,u7),e(ee,Hr),e(Hr,qc),e(qc,c7),e(Hr,p7),e(Hr,gs),e(gs,f7),e(gs,dg),e(dg,h7),e(gs,d7),m(a,Tq,g),m(a,vc,g),e(vc,g7),m(a,kq,g),y(ms,a,g),m(a,Aq,g),m(a,_s,g),e(_s,gg),e(gg,Br),e(Br,yc),e(yc,m7),e(Br,_7),e(Br,mg),e(_s,$7),e(_s,Cr),e(Cr,Gr),e(Gr,Ec),e(Ec,_g),e(_g,q7),e(Gr,v7),e(Gr,wc),e(wc,y7),e(Cr,E7),e(Cr,Ur),e(Ur,bc),e(bc,$g),e($g,w7),e(Ur,b7),e(Ur,jc),e(jc,j7),m(a,Dq,g),m(a,ze,g),e(ze,$s),e($s,qg),y(Lr,qg,null),e(ze,T7),e(ze,vg),e(vg,k7),m(a,Oq,g),m(a,zr,g),e(zr,A7),e(zr,Tc),e(Tc,D7),m(a,Pq,g),m(a,Me,g),e(Me,qs),e(qs,yg),y(Mr,yg,null),e(Me,O7),e(Me,Eg),e(Eg,P7),m(a,Rq,g),m(a,kc,g),e(kc,R7),m(a,Nq,g),y(vs,a,g),m(a,xq,g),m(a,Fe,g),e(Fe,N7),e(Fe,Fr),e(Fr,x7),e(Fe,S7),e(Fe,Jr),e(Jr,I7),m(a,Sq,g),m(a,Ac,g),e(Ac,H7),m(a,Iq,g),y(ys,a,g),m(a,Hq,g),m(a,Dc,g),e(Dc,B7),m(a,Bq,g),m(a,Es,g),e(Es,wg),e(wg,Kr),e(Kr,Oc),e(Oc,C7),e(Kr,G7),e(Kr,bg),e(Es,U7),e(Es,K),e(K,Wr),e(Wr,Yr),e(Yr,jg),e(jg,L7),e(Yr,z7),e(Wr,M7),e(Wr,Pc),e(Pc,F7),e(K,J7),e(K,Vr),e(Vr,Rc),e(Rc,Tg),e(Tg,K7),e(Vr,W7),e(Vr,Nc),e(Nc,Y7),e(K,V7),e(K,Xr),e(Xr,xc),e(xc,X7),e(Xr,Q7),e(Xr,S),e(S,Z7),e(S,kg),e(kg,e6),e(S,t6),e(S,s6),e(S,a6),e(S,Ag),e(Ag,n6),e(S,r6),e(S,o6),e(S,l6),e(S,Dg),e(Dg,i6),e(S,u6),e(S,c6),e(S,p6),e(S,Og),e(Og,f6),e(S,h6),e(S,Pg),e(Pg,d6),e(S,g6),e(S,m6),e(S,_6),e(S,Rg),e(Rg,$6),e(S,q6),e(S,Ng),e(Ng,v6),e(S,y6),e(S,E6),e(S,w6),e(S,xg),e(xg,b6),e(S,j6),e(S,Sg),e(Sg,T6),e(S,k6),e(K,A6),e(K,Qr),e(Qr,Sc),e(Sc,Ig),e(Ig,D6),e(Qr,O6),e(Qr,Ic),e(Ic,P6),e(K,R6),e(K,Zr),e(Zr,Hc),e(Hc,N6),e(Zr,x6),e(Zr,ws),e(ws,S6),e(ws,Hg),e(Hg,I6),e(ws,H6),e(K,B6),e(K,eo),e(eo,Bc),e(Bc,C6),e(eo,G6),e(eo,bs),e(bs,U6),e(bs,Bg),e(Bg,L6),e(bs,z6),e(K,M6),e(K,to),e(to,Cc),e(Cc,F6),e(to,J6),e(to,js),e(js,K6),e(js,Cg),e(Cg,W6),e(js,Y6),m(a,Cq,g),m(a,Gc,g),e(Gc,V6),m(a,Gq,g),y(Ts,a,g),m(a,Uq,g),m(a,ks,g),e(ks,Gg),e(Gg,so),e(so,Uc),e(Uc,X6),e(so,Q6),e(so,Ug),e(ks,Z6),e(ks,te),e(te,ao),e(ao,Lc),e(Lc,Lg),e(Lg,e9),e(ao,t9),e(ao,zc),e(zc,s9),e(te,a9),e(te,no),e(no,Mc),e(Mc,zg),e(zg,n9),e(no,r9),e(no,Fc),e(Fc,o9),e(te,l9),e(te,ro),e(ro,Jc),e(Jc,Mg),e(Mg,i9),e(ro,u9),e(ro,Kc),e(Kc,c9),e(te,p9),e(te,oo),e(oo,Wc),e(Wc,Fg),e(Fg,f9),e(oo,h9),e(oo,As),e(As,d9),e(As,Jg),e(Jg,g9),e(As,m9),e(te,_9),e(te,lo),e(lo,Yc),e(Yc,Kg),e(Kg,$9),e(lo,q9),e(lo,Ds),e(Ds,v9),e(Ds,Wg),e(Wg,y9),e(Ds,E9),m(a,Lq,g),m(a,Je,g),e(Je,Os),e(Os,Yg),y(io,Yg,null),e(Je,w9),e(Je,Vg),e(Vg,b9),m(a,zq,g),m(a,Vc,g),e(Vc,j9),m(a,Mq,g),y(Ps,a,g),m(a,Fq,g),m(a,uo,g),e(uo,T9),e(uo,co),e(co,k9),m(a,Jq,g),m(a,Xc,g),e(Xc,A9),m(a,Kq,g),y(Rs,a,g),m(a,Wq,g),m(a,Qc,g),e(Qc,D9),m(a,Yq,g),m(a,Ns,g),e(Ns,Xg),e(Xg,po),e(po,Zc),e(Zc,O9),e(po,P9),e(po,Qg),e(Ns,R9),e(Ns,I),e(I,fo),e(fo,ho),e(ho,Zg),e(Zg,N9),e(ho,x9),e(fo,S9),e(fo,ep),e(ep,I9),e(I,H9),e(I,go),e(go,tp),e(tp,em),e(em,B9),e(go,C9),e(go,sp),e(sp,G9),e(I,U9),e(I,mo),e(mo,ap),e(ap,L9),e(mo,z9),e(mo,Ee),e(Ee,M9),e(Ee,tm),e(tm,F9),e(Ee,J9),e(Ee,sm),e(sm,K9),e(Ee,W9),e(I,Y9),e(I,_o),e(_o,np),e(np,V9),e(_o,X9),e(_o,le),e(le,Q9),e(le,am),e(am,Z9),e(le,e8),e(le,nm),e(nm,t8),e(le,s8),e(le,rm),e(rm,a8),e(le,n8),e(I,r8),e(I,$o),e($o,rp),e(rp,o8),e($o,l8),e($o,we),e(we,i8),e(we,om),e(om,u8),e(we,c8),e(we,lm),e(lm,p8),e(we,f8),e(I,h8),e(I,qo),e(qo,op),e(op,d8),e(qo,g8),e(qo,xs),e(xs,m8),e(xs,im),e(im,_8),e(xs,$8),e(I,q8),e(I,vo),e(vo,lp),e(lp,v8),e(vo,y8),e(vo,be),e(be,E8),e(be,um),e(um,w8),e(be,b8),e(be,cm),e(cm,j8),e(be,T8),e(I,k8),e(I,yo),e(yo,ip),e(ip,A8),e(yo,D8),e(yo,je),e(je,O8),e(je,pm),e(pm,P8),e(je,R8),e(je,fm),e(fm,N8),e(je,x8),e(I,S8),e(I,Eo),e(Eo,up),e(up,I8),e(Eo,H8),e(Eo,Te),e(Te,B8),e(Te,hm),e(hm,C8),e(Te,G8),e(Te,dm),e(dm,U8),e(Te,L8),e(I,z8),e(I,wo),e(wo,cp),e(cp,M8),e(wo,F8),e(wo,Ss),e(Ss,J8),e(Ss,gm),e(gm,K8),e(Ss,W8),e(I,Y8),e(I,bo),e(bo,pp),e(pp,V8),e(bo,X8),e(bo,Is),e(Is,Q8),e(Is,mm),e(mm,Z8),e(Is,eA),e(I,tA),e(I,jo),e(jo,fp),e(fp,_m),e(_m,sA),e(jo,aA),e(jo,hp),e(hp,nA),e(I,rA),e(I,To),e(To,dp),e(dp,oA),e(To,lA),e(To,Hs),e(Hs,iA),e(Hs,$m),e($m,uA),e(Hs,cA),e(I,pA),e(I,ko),e(ko,gp),e(gp,fA),e(ko,hA),e(ko,Bs),e(Bs,dA),e(Bs,qm),e(qm,gA),e(Bs,mA),e(I,_A),e(I,Ao),e(Ao,mp),e(mp,$A),e(Ao,qA),e(Ao,Cs),e(Cs,vA),e(Cs,vm),e(vm,yA),e(Cs,EA),m(a,Vq,g),m(a,_p,g),e(_p,wA),m(a,Xq,g),y(Gs,a,g),m(a,Qq,g),m(a,Us,g),e(Us,ym),e(ym,Do),e(Do,$p),e($p,bA),e(Do,jA),e(Do,Em),e(Us,TA),e(Us,wm),e(wm,Oo),e(Oo,qp),e(qp,bm),e(bm,kA),e(Oo,AA),e(Oo,vp),e(vp,DA),m(a,Zq,g),m(a,Ke,g),e(Ke,Ls),e(Ls,jm),y(Po,jm,null),e(Ke,OA),e(Ke,Tm),e(Tm,PA),m(a,e1,g),m(a,zs,g),e(zs,RA),e(zs,yp),e(yp,NA),e(zs,xA),m(a,t1,g),m(a,We,g),e(We,Ms),e(Ms,km),y(Ro,km,null),e(We,SA),e(We,Am),e(Am,IA),m(a,s1,g),m(a,Ep,g),e(Ep,HA),m(a,a1,g),y(Fs,a,g),m(a,n1,g),m(a,No,g),e(No,BA),e(No,xo),e(xo,CA),m(a,r1,g),m(a,wp,g),e(wp,GA),m(a,o1,g),y(Js,a,g),m(a,l1,g),m(a,bp,g),e(bp,UA),m(a,i1,g),m(a,Ks,g),e(Ks,Dm),e(Dm,So),e(So,jp),e(jp,LA),e(So,zA),e(So,Om),e(Ks,MA),e(Ks,se),e(se,Io),e(Io,Ho),e(Ho,Pm),e(Pm,FA),e(Ho,JA),e(Io,KA),e(Io,Tp),e(Tp,WA),e(se,YA),e(se,Bo),e(Bo,kp),e(kp,Rm),e(Rm,VA),e(Bo,XA),e(Bo,Ap),e(Ap,QA),e(se,ZA),e(se,Co),e(Co,Dp),e(Dp,eD),e(Co,tD),e(Co,Ws),e(Ws,sD),e(Ws,Nm),e(Nm,aD),e(Ws,nD),e(se,rD),e(se,Go),e(Go,Op),e(Op,oD),e(Go,lD),e(Go,Ys),e(Ys,iD),e(Ys,xm),e(xm,uD),e(Ys,cD),e(se,pD),e(se,Uo),e(Uo,Pp),e(Pp,fD),e(Uo,hD),e(Uo,Vs),e(Vs,dD),e(Vs,Sm),e(Sm,gD),e(Vs,mD),m(a,u1,g),m(a,Rp,g),e(Rp,_D),m(a,c1,g),y(Xs,a,g),m(a,p1,g),m(a,Qs,g),e(Qs,Im),e(Im,Lo),e(Lo,Np),e(Np,$D),e(Lo,qD),e(Lo,Hm),e(Qs,vD),e(Qs,pe),e(pe,zo),e(zo,xp),e(xp,Bm),e(Bm,yD),e(zo,ED),e(zo,Sp),e(Sp,wD),e(pe,bD),e(pe,Mo),e(Mo,Ip),e(Ip,Cm),e(Cm,jD),e(Mo,TD),e(Mo,Hp),e(Hp,kD),e(pe,AD),e(pe,Fo),e(Fo,Bp),e(Bp,Gm),e(Gm,DD),e(Fo,OD),e(Fo,Cp),e(Cp,PD),e(pe,RD),e(pe,Jo),e(Jo,Gp),e(Gp,Um),e(Um,ND),e(Jo,xD),e(Jo,Up),e(Up,SD),m(a,f1,g),m(a,Ye,g),e(Ye,Zs),e(Zs,Lm),y(Ko,Lm,null),e(Ye,ID),e(Ye,zm),e(zm,HD),m(a,h1,g),m(a,Lp,g),e(Lp,BD),m(a,d1,g),y(ea,a,g),m(a,g1,g),y(ta,a,g),m(a,m1,g),m(a,fe,g),e(fe,CD),e(fe,Wo),e(Wo,GD),e(fe,UD),e(fe,Yo),e(Yo,LD),e(fe,zD),e(fe,Vo),e(Vo,MD),m(a,_1,g),m(a,zp,g),e(zp,FD),m(a,$1,g),y(sa,a,g),m(a,q1,g),m(a,Mp,g),e(Mp,JD),m(a,v1,g),m(a,aa,g),e(aa,Mm),e(Mm,Xo),e(Xo,Fp),e(Fp,KD),e(Xo,WD),e(Xo,Fm),e(aa,YD),e(aa,Jm),e(Jm,Qo),e(Qo,Zo),e(Zo,Km),e(Km,VD),e(Zo,XD),e(Qo,QD),e(Qo,Jp),e(Jp,ZD),m(a,y1,g),m(a,Kp,g),e(Kp,eO),m(a,E1,g),m(a,Wp,g),e(Wp,tO),m(a,w1,g),y(na,a,g),m(a,b1,g),m(a,ra,g),e(ra,Wm),e(Wm,el),e(el,Yp),e(Yp,sO),e(el,aO),e(el,Ym),e(ra,nO),e(ra,Vm),e(Vm,tl),e(tl,Vp),e(Vp,Xm),e(Xm,rO),e(tl,oO),e(tl,Xp),e(Xp,lO),m(a,j1,g),m(a,Ve,g),e(Ve,oa),e(oa,Qm),y(sl,Qm,null),e(Ve,iO),e(Ve,Zm),e(Zm,uO),m(a,T1,g),m(a,Qp,g),e(Qp,cO),m(a,k1,g),y(la,a,g),m(a,A1,g),m(a,Xe,g),e(Xe,pO),e(Xe,al),e(al,fO),e(Xe,hO),e(Xe,nl),e(nl,dO),m(a,D1,g),m(a,Zp,g),e(Zp,gO),m(a,O1,g),m(a,ia,g),e(ia,e_),e(e_,rl),e(rl,ef),e(ef,mO),e(rl,_O),e(rl,t_),e(ia,$O),e(ia,ae),e(ae,ol),e(ol,ll),e(ll,s_),e(s_,qO),e(ll,vO),e(ol,yO),e(ol,tf),e(tf,EO),e(ae,wO),e(ae,il),e(il,sf),e(sf,a_),e(a_,bO),e(il,jO),e(il,af),e(af,TO),e(ae,kO),e(ae,ul),e(ul,nf),e(nf,AO),e(ul,DO),e(ul,ua),e(ua,OO),e(ua,n_),e(n_,PO),e(ua,RO),e(ae,NO),e(ae,cl),e(cl,rf),e(rf,xO),e(cl,SO),e(cl,ca),e(ca,IO),e(ca,r_),e(r_,HO),e(ca,BO),e(ae,CO),e(ae,pl),e(pl,of),e(of,GO),e(pl,UO),e(pl,pa),e(pa,LO),e(pa,o_),e(o_,zO),e(pa,MO),m(a,P1,g),m(a,lf,g),e(lf,FO),m(a,R1,g),m(a,fa,g),e(fa,l_),e(l_,fl),e(fl,uf),e(uf,JO),e(fl,KO),e(fl,i_),e(fa,WO),e(fa,u_),e(u_,hl),e(hl,cf),e(cf,c_),e(c_,YO),e(hl,VO),e(hl,pf),e(pf,XO),m(a,N1,g),m(a,ff,g),e(ff,QO),m(a,x1,g),m(a,Qe,g),e(Qe,ha),e(ha,p_),y(dl,p_,null),e(Qe,ZO),e(Qe,f_),e(f_,eP),m(a,S1,g),m(a,hf,g),e(hf,tP),m(a,I1,g),y(da,a,g),m(a,H1,g),m(a,Ze,g),e(Ze,sP),e(Ze,gl),e(gl,aP),e(Ze,nP),e(Ze,ml),e(ml,rP),m(a,B1,g),m(a,df,g),e(df,oP),m(a,C1,g),y(ga,a,g),m(a,G1,g),m(a,gf,g),e(gf,lP),m(a,U1,g),m(a,ma,g),e(ma,h_),e(h_,_l),e(_l,mf),e(mf,iP),e(_l,uP),e(_l,d_),e(ma,cP),e(ma,g_),e(g_,$l),e($l,ql),e(ql,m_),e(m_,pP),e(ql,fP),e($l,hP),e($l,_f),e(_f,dP),m(a,L1,g),m(a,$f,g),e($f,gP),m(a,z1,g),y(_a,a,g),m(a,M1,g),m(a,$a,g),e($a,__),e(__,vl),e(vl,qf),e(qf,mP),e(vl,_P),e(vl,$_),e($a,$P),e($a,yl),e(yl,El),e(El,vf),e(vf,q_),e(q_,qP),e(El,vP),e(El,yf),e(yf,yP),e(yl,EP),e(yl,wl),e(wl,Ef),e(Ef,v_),e(v_,wP),e(wl,bP),e(wl,wf),e(wf,jP),m(a,F1,g),m(a,et,g),e(et,qa),e(qa,y_),y(bl,y_,null),e(et,TP),e(et,E_),e(E_,kP),m(a,J1,g),m(a,bf,g),e(bf,AP),m(a,K1,g),y(va,a,g),m(a,W1,g),m(a,jl,g),e(jl,DP),e(jl,Tl),e(Tl,OP),m(a,Y1,g),m(a,jf,g),e(jf,PP),m(a,V1,g),y(ya,a,g),m(a,X1,g),m(a,Ea,g),e(Ea,RP),e(Ea,kl),e(kl,NP),e(Ea,xP),m(a,Q1,g),m(a,wa,g),e(wa,w_),e(w_,Al),e(Al,Tf),e(Tf,SP),e(Al,IP),e(Al,b_),e(wa,HP),e(wa,j_),e(j_,Dl),e(Dl,Ol),e(Ol,T_),e(T_,BP),e(Ol,CP),e(Dl,GP),e(Dl,kf),e(kf,UP),m(a,Z1,g),m(a,Af,g),e(Af,LP),m(a,ev,g),y(ba,a,g),m(a,tv,g),m(a,ja,g),e(ja,k_),e(k_,Pl),e(Pl,Df),e(Df,zP),e(Pl,MP),e(Pl,A_),e(ja,FP),e(ja,tt),e(tt,Rl),e(Rl,Of),e(Of,D_),e(D_,JP),e(Rl,KP),e(Rl,Pf),e(Pf,WP),e(tt,YP),e(tt,Nl),e(Nl,Rf),e(Rf,O_),e(O_,VP),e(Nl,XP),e(Nl,Nf),e(Nf,QP),e(tt,ZP),e(tt,xl),e(xl,xf),e(xf,P_),e(P_,eR),e(xl,tR),e(xl,Sf),e(Sf,sR),sv=!0},p(a,[g]){const Sl={};g&2&&(Sl.$$scope={dirty:g,ctx:a}),lt.$set(Sl);const R_={};g&2&&(R_.$$scope={dirty:g,ctx:a}),it.$set(R_);const N_={};g&2&&(N_.$$scope={dirty:g,ctx:a}),dt.$set(N_);const x_={};g&2&&(x_.$$scope={dirty:g,ctx:a}),$t.$set(x_);const Il={};g&2&&(Il.$$scope={dirty:g,ctx:a}),qt.$set(Il);const S_={};g&2&&(S_.$$scope={dirty:g,ctx:a}),kt.$set(S_);const I_={};g&2&&(I_.$$scope={dirty:g,ctx:a}),At.$set(I_);const H_={};g&2&&(H_.$$scope={dirty:g,ctx:a}),Ht.$set(H_);const B_={};g&2&&(B_.$$scope={dirty:g,ctx:a}),Bt.$set(B_);const C_={};g&2&&(C_.$$scope={dirty:g,ctx:a}),Wt.$set(C_);const Hl={};g&2&&(Hl.$$scope={dirty:g,ctx:a}),Yt.$set(Hl);const G_={};g&2&&(G_.$$scope={dirty:g,ctx:a}),es.$set(G_);const U_={};g&2&&(U_.$$scope={dirty:g,ctx:a}),as.$set(U_);const L_={};g&2&&(L_.$$scope={dirty:g,ctx:a}),ns.$set(L_);const z_={};g&2&&(z_.$$scope={dirty:g,ctx:a}),rs.$set(z_);const If={};g&2&&(If.$$scope={dirty:g,ctx:a}),cs.$set(If);const M_={};g&2&&(M_.$$scope={dirty:g,ctx:a}),ps.$set(M_);const F_={};g&2&&(F_.$$scope={dirty:g,ctx:a}),ms.$set(F_);const J_={};g&2&&(J_.$$scope={dirty:g,ctx:a}),vs.$set(J_);const Bl={};g&2&&(Bl.$$scope={dirty:g,ctx:a}),ys.$set(Bl);const K_={};g&2&&(K_.$$scope={dirty:g,ctx:a}),Ts.$set(K_);const Cl={};g&2&&(Cl.$$scope={dirty:g,ctx:a}),Ps.$set(Cl);const W_={};g&2&&(W_.$$scope={dirty:g,ctx:a}),Rs.$set(W_);const M={};g&2&&(M.$$scope={dirty:g,ctx:a}),Gs.$set(M);const Gl={};g&2&&(Gl.$$scope={dirty:g,ctx:a}),Fs.$set(Gl);const Hf={};g&2&&(Hf.$$scope={dirty:g,ctx:a}),Js.$set(Hf);const Y_={};g&2&&(Y_.$$scope={dirty:g,ctx:a}),Xs.$set(Y_);const V_={};g&2&&(V_.$$scope={dirty:g,ctx:a}),ea.$set(V_);const Ul={};g&2&&(Ul.$$scope={dirty:g,ctx:a}),ta.$set(Ul);const Bf={};g&2&&(Bf.$$scope={dirty:g,ctx:a}),sa.$set(Bf);const X_={};g&2&&(X_.$$scope={dirty:g,ctx:a}),na.$set(X_);const Q_={};g&2&&(Q_.$$scope={dirty:g,ctx:a}),la.$set(Q_);const Ll={};g&2&&(Ll.$$scope={dirty:g,ctx:a}),da.$set(Ll);const Z_={};g&2&&(Z_.$$scope={dirty:g,ctx:a}),ga.$set(Z_);const st={};g&2&&(st.$$scope={dirty:g,ctx:a}),_a.$set(st);const e$={};g&2&&(e$.$$scope={dirty:g,ctx:a}),va.$set(e$);const t$={};g&2&&(t$.$$scope={dirty:g,ctx:a}),ya.$set(t$);const zl={};g&2&&(zl.$$scope={dirty:g,ctx:a}),ba.$set(zl)},i(a){sv||(E(k.$$.fragment,a),E(Q.$$.fragment,a),E(xa.$$.fragment,a),E(lt.$$.fragment,a),E(it.$$.fragment,a),E(dt.$$.fragment,a),E(Qa.$$.fragment,a),E($t.$$.fragment,a),E(qt.$$.fragment,a),E(pn.$$.fragment,a),E(kt.$$.fragment,a),E(At.$$.fragment,a),E(Pn.$$.fragment,a),E(Ht.$$.fragment,a),E(Bt.$$.fragment,a),E(ar.$$.fragment,a),E(Wt.$$.fragment,a),E(Yt.$$.fragment,a),E(es.$$.fragment,a),E(vr.$$.fragment,a),E(as.$$.fragment,a),E(ns.$$.fragment,a),E(rs.$$.fragment,a),E(Ar.$$.fragment,a),E(cs.$$.fragment,a),E(ps.$$.fragment,a),E(ms.$$.fragment,a),E(Lr.$$.fragment,a),E(Mr.$$.fragment,a),E(vs.$$.fragment,a),E(ys.$$.fragment,a),E(Ts.$$.fragment,a),E(io.$$.fragment,a),E(Ps.$$.fragment,a),E(Rs.$$.fragment,a),E(Gs.$$.fragment,a),E(Po.$$.fragment,a),E(Ro.$$.fragment,a),E(Fs.$$.fragment,a),E(Js.$$.fragment,a),E(Xs.$$.fragment,a),E(Ko.$$.fragment,a),E(ea.$$.fragment,a),E(ta.$$.fragment,a),E(sa.$$.fragment,a),E(na.$$.fragment,a),E(sl.$$.fragment,a),E(la.$$.fragment,a),E(dl.$$.fragment,a),E(da.$$.fragment,a),E(ga.$$.fragment,a),E(_a.$$.fragment,a),E(bl.$$.fragment,a),E(va.$$.fragment,a),E(ya.$$.fragment,a),E(ba.$$.fragment,a),sv=!0)},o(a){w(k.$$.fragment,a),w(Q.$$.fragment,a),w(xa.$$.fragment,a),w(lt.$$.fragment,a),w(it.$$.fragment,a),w(dt.$$.fragment,a),w(Qa.$$.fragment,a),w($t.$$.fragment,a),w(qt.$$.fragment,a),w(pn.$$.fragment,a),w(kt.$$.fragment,a),w(At.$$.fragment,a),w(Pn.$$.fragment,a),w(Ht.$$.fragment,a),w(Bt.$$.fragment,a),w(ar.$$.fragment,a),w(Wt.$$.fragment,a),w(Yt.$$.fragment,a),w(es.$$.fragment,a),w(vr.$$.fragment,a),w(as.$$.fragment,a),w(ns.$$.fragment,a),w(rs.$$.fragment,a),w(Ar.$$.fragment,a),w(cs.$$.fragment,a),w(ps.$$.fragment,a),w(ms.$$.fragment,a),w(Lr.$$.fragment,a),w(Mr.$$.fragment,a),w(vs.$$.fragment,a),w(ys.$$.fragment,a),w(Ts.$$.fragment,a),w(io.$$.fragment,a),w(Ps.$$.fragment,a),w(Rs.$$.fragment,a),w(Gs.$$.fragment,a),w(Po.$$.fragment,a),w(Ro.$$.fragment,a),w(Fs.$$.fragment,a),w(Js.$$.fragment,a),w(Xs.$$.fragment,a),w(Ko.$$.fragment,a),w(ea.$$.fragment,a),w(ta.$$.fragment,a),w(sa.$$.fragment,a),w(na.$$.fragment,a),w(sl.$$.fragment,a),w(la.$$.fragment,a),w(dl.$$.fragment,a),w(da.$$.fragment,a),w(ga.$$.fragment,a),w(_a.$$.fragment,a),w(bl.$$.fragment,a),w(va.$$.fragment,a),w(ya.$$.fragment,a),w(ba.$$.fragment,a),sv=!1},d(a){t(n),a&&t(c),a&&t(s),b(k),a&&t(O),a&&t(D),b(Q),a&&t(Na),a&&t(Ne),a&&t(o$),a&&t(Jl),a&&t(l$),a&&t(nt),a&&t(i$),a&&t(rt),a&&t(u$),a&&t(xe),b(xa),a&&t(c$),a&&t(Kl),a&&t(p$),b(lt,a),a&&t(f$),a&&t(Sa),a&&t(h$),a&&t(Wl),a&&t(d$),b(it,a),a&&t(g$),a&&t(Yl),a&&t(m$),a&&t(ut),a&&t(_$),a&&t(oi),a&&t($$),a&&t(li),a&&t(q$),b(dt,a),a&&t(v$),a&&t(gt),a&&t(y$),a&&t(Ie),b(Qa),a&&t(E$),a&&t(di),a&&t(w$),b($t,a),a&&t(b$),a&&t(Za),a&&t(j$),a&&t(gi),a&&t(T$),b(qt,a),a&&t(k$),a&&t(mi),a&&t(A$),a&&t(vt),a&&t(D$),a&&t(bi),a&&t(O$),a&&t(bt),a&&t(P$),a&&t(He),b(pn),a&&t(R$),a&&t(Tt),a&&t(N$),b(kt,a),a&&t(x$),a&&t(fn),a&&t(S$),a&&t(Di),a&&t(I$),b(At,a),a&&t(H$),a&&t(Oi),a&&t(B$),a&&t(Dt),a&&t(C$),a&&t(Ki),a&&t(G$),a&&t(St),a&&t(U$),a&&t(Be),b(Pn),a&&t(L$),a&&t(Xi),a&&t(z$),b(Ht,a),a&&t(M$),a&&t(Rn),a&&t(F$),a&&t(Qi),a&&t(J$),b(Bt,a),a&&t(K$),a&&t(Zi),a&&t(W$),a&&t(Ct),a&&t(Y$),a&&t(vu),a&&t(V$),a&&t(Jt),a&&t(X$),a&&t(Ce),b(ar),a&&t(Q$),a&&t(Ou),a&&t(Z$),b(Wt,a),a&&t(eq),a&&t(nr),a&&t(tq),a&&t(Pu),a&&t(sq),b(Yt,a),a&&t(aq),a&&t(Ru),a&&t(nq),a&&t(Vt),a&&t(rq),a&&t(zu),a&&t(oq),b(es,a),a&&t(lq),a&&t(ts),a&&t(iq),a&&t(Ge),b(vr),a&&t(uq),a&&t(Zu),a&&t(cq),b(as,a),a&&t(pq),a&&t(Ue),a&&t(fq),a&&t(ec),a&&t(hq),b(ns,a),a&&t(dq),a&&t(tc),a&&t(gq),a&&t(sc),a&&t(mq),b(rs,a),a&&t(_q),a&&t(os),a&&t($q),a&&t(Le),b(Ar),a&&t(qq),a&&t(cc),a&&t(vq),b(cs,a),a&&t(yq),a&&t(Dr),a&&t(Eq),a&&t(pc),a&&t(wq),b(ps,a),a&&t(bq),a&&t(fc),a&&t(jq),a&&t(fs),a&&t(Tq),a&&t(vc),a&&t(kq),b(ms,a),a&&t(Aq),a&&t(_s),a&&t(Dq),a&&t(ze),b(Lr),a&&t(Oq),a&&t(zr),a&&t(Pq),a&&t(Me),b(Mr),a&&t(Rq),a&&t(kc),a&&t(Nq),b(vs,a),a&&t(xq),a&&t(Fe),a&&t(Sq),a&&t(Ac),a&&t(Iq),b(ys,a),a&&t(Hq),a&&t(Dc),a&&t(Bq),a&&t(Es),a&&t(Cq),a&&t(Gc),a&&t(Gq),b(Ts,a),a&&t(Uq),a&&t(ks),a&&t(Lq),a&&t(Je),b(io),a&&t(zq),a&&t(Vc),a&&t(Mq),b(Ps,a),a&&t(Fq),a&&t(uo),a&&t(Jq),a&&t(Xc),a&&t(Kq),b(Rs,a),a&&t(Wq),a&&t(Qc),a&&t(Yq),a&&t(Ns),a&&t(Vq),a&&t(_p),a&&t(Xq),b(Gs,a),a&&t(Qq),a&&t(Us),a&&t(Zq),a&&t(Ke),b(Po),a&&t(e1),a&&t(zs),a&&t(t1),a&&t(We),b(Ro),a&&t(s1),a&&t(Ep),a&&t(a1),b(Fs,a),a&&t(n1),a&&t(No),a&&t(r1),a&&t(wp),a&&t(o1),b(Js,a),a&&t(l1),a&&t(bp),a&&t(i1),a&&t(Ks),a&&t(u1),a&&t(Rp),a&&t(c1),b(Xs,a),a&&t(p1),a&&t(Qs),a&&t(f1),a&&t(Ye),b(Ko),a&&t(h1),a&&t(Lp),a&&t(d1),b(ea,a),a&&t(g1),b(ta,a),a&&t(m1),a&&t(fe),a&&t(_1),a&&t(zp),a&&t($1),b(sa,a),a&&t(q1),a&&t(Mp),a&&t(v1),a&&t(aa),a&&t(y1),a&&t(Kp),a&&t(E1),a&&t(Wp),a&&t(w1),b(na,a),a&&t(b1),a&&t(ra),a&&t(j1),a&&t(Ve),b(sl),a&&t(T1),a&&t(Qp),a&&t(k1),b(la,a),a&&t(A1),a&&t(Xe),a&&t(D1),a&&t(Zp),a&&t(O1),a&&t(ia),a&&t(P1),a&&t(lf),a&&t(R1),a&&t(fa),a&&t(N1),a&&t(ff),a&&t(x1),a&&t(Qe),b(dl),a&&t(S1),a&&t(hf),a&&t(I1),b(da,a),a&&t(H1),a&&t(Ze),a&&t(B1),a&&t(df),a&&t(C1),b(ga,a),a&&t(G1),a&&t(gf),a&&t(U1),a&&t(ma),a&&t(L1),a&&t($f),a&&t(z1),b(_a,a),a&&t(M1),a&&t($a),a&&t(F1),a&&t(et),b(bl),a&&t(J1),a&&t(bf),a&&t(K1),b(va,a),a&&t(W1),a&&t(jl),a&&t(Y1),a&&t(jf),a&&t(V1),b(ya,a),a&&t(X1),a&&t(Ea),a&&t(Q1),a&&t(wa),a&&t(Z1),a&&t(Af),a&&t(ev),b(ba,a),a&&t(tv),a&&t(ja)}}}const Vz={local:"detailed-parameters",sections:[{local:"which-task-is-used-by-this-model",title:"Which task is used by this model ?"},{local:"zeroshot-classification-task",title:"Zero-shot classification task"},{local:"translation-task",title:"Translation task"},{local:"summarization-task",title:"Summarization task"},{local:"conversational-task",title:"Conversational task"},{local:"table-question-answering-task",title:"Table question answering task"},{local:"question-answering-task",title:"Question answering task"},{local:"textclassification-task",title:"Text-classification task"},{local:"named-entity-recognition-ner-task",title:"Named Entity Recognition (NER) task"},{local:"tokenclassification-task",title:"Token-classification task"},{local:"textgeneration-task",title:"Text-generation task"},{local:"text2textgeneration-task",title:"Text2text-generation task"},{local:"fill-mask-task",title:"Fill mask task"},{local:"automatic-speech-recognition-task",title:"Automatic speech recognition task"},{local:"featureextraction-task",title:"Feature-extraction task"},{local:"audioclassification-task",title:"Audio-classification task"},{local:"objectdetection-task",title:"Object-detection task"}],title:"Detailed parameters"};function Xz($){return zU(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class sM extends CU{constructor(n){super();GU(this,n,Xz,Yz,UU,{})}}export{sM as default,Vz as metadata};
