import{S as tF,i as sF,s as aF,e as r,k as f,w as _,t as i,M as nF,c as o,d as s,m as p,a as l,x as v,h as u,b as h,N as eF,F as e,g as m,y as E,q as y,o as w,B as b,v as rF,L as O}from"../chunks/vendor-7c454903.js";import{T as W}from"../chunks/Tip-735285fc.js";import{I as z}from"../chunks/IconCopyLink-5457534b.js";import{I as L,M as P,C as R}from"../chunks/InferenceApi-041dc1b2.js";function oF($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("facebook/bart-large-mnli"),A=i("."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,`:
`),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"facebook/bart-large-mnli"),D.forEach(s),A=u(T,"."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/facebook/bart-large-mnli"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function lF($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/facebook/bart-large-mnli"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query(
    {
        "inputs": "Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!",
        "parameters": {"candidate_labels": ["refund", "legal", "faq"]},
    }
)`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/bart-large-mnli&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(
    {
        <span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!&quot;</span>,
        <span class="hljs-string">&quot;parameters&quot;</span>: {<span class="hljs-string">&quot;candidate_labels&quot;</span>: [<span class="hljs-string">&quot;refund&quot;</span>, <span class="hljs-string">&quot;legal&quot;</span>, <span class="hljs-string">&quot;faq&quot;</span>]},
    }
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function iF($){let n,c;return n=new P({props:{$$slots:{default:[lF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function uF($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/facebook/bart-large-mnli",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs: "Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!", parameters: {candidate_labels: ["refund", "legal", "faq"]}}).then((response) => {
    console.log(JSON.stringify(response));
});
// {"sequence":"Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!","labels":["refund","faq","legal"],"scores":[0.8778, 0.1052, 0.017]}`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/bart-large-mnli&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>({<span class="hljs-attr">inputs</span>: <span class="hljs-string">&quot;Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!&quot;</span>, <span class="hljs-attr">parameters</span>: {<span class="hljs-attr">candidate_labels</span>: [<span class="hljs-string">&quot;refund&quot;</span>, <span class="hljs-string">&quot;legal&quot;</span>, <span class="hljs-string">&quot;faq&quot;</span>]}}).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// {&quot;sequence&quot;:&quot;Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!&quot;,&quot;labels&quot;:[&quot;refund&quot;,&quot;faq&quot;,&quot;legal&quot;],&quot;scores&quot;:[0.8778, 0.1052, 0.017]}</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function cF($){let n,c;return n=new P({props:{$$slots:{default:[uF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function fF($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/facebook/bart-large-mnli \\
        -X POST \\
        -d '{"inputs": "Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!", "parameters": {"candidate_labels": ["refund", "legal", "faq"]}}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# {"sequence":"Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!","labels":["refund","faq","legal"],"scores":[0.8778, 0.1052, 0.017]}`,highlighted:`curl https://api-inference.huggingface.co/models/facebook/bart-large-mnli \\
        -X POST \\
        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;: &quot;Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!&quot;, &quot;parameters&quot;: {&quot;candidate_labels&quot;: [&quot;refund&quot;, &quot;legal&quot;, &quot;faq&quot;]}}&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># {&quot;sequence&quot;:&quot;Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!&quot;,&quot;labels&quot;:[&quot;refund&quot;,&quot;faq&quot;,&quot;legal&quot;],&quot;scores&quot;:[0.8778, 0.1052, 0.017]}</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function pF($){let n,c;return n=new P({props:{$$slots:{default:[fF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function hF($){let n,c;return n=new R({props:{code:`self.assertEqual(
    deep_round(data),
    {
        "sequence": "Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!",
        "labels": ["refund", "faq", "legal"],
        "scores": [
            # 88% refund
            0.8778,
            0.1052,
            0.017,
        ],
    },
)`,highlighted:`self.assertEqual(
    deep_round(data),
    {
        <span class="hljs-string">&quot;sequence&quot;</span>: <span class="hljs-string">&quot;Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!&quot;</span>,
        <span class="hljs-string">&quot;labels&quot;</span>: [<span class="hljs-string">&quot;refund&quot;</span>, <span class="hljs-string">&quot;faq&quot;</span>, <span class="hljs-string">&quot;legal&quot;</span>],
        <span class="hljs-string">&quot;scores&quot;</span>: [
            <span class="hljs-comment"># 88% refund</span>
            <span class="hljs-number">0.8778</span>,
            <span class="hljs-number">0.1052</span>,
            <span class="hljs-number">0.017</span>,
        ],
    },
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function dF($){let n,c;return n=new P({props:{$$slots:{default:[hF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function gF($){let n,c,t,d,q,k,A,j,T,S,D,ne,Re;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("Helsinki-NLP/opus-mt-ru-en"),A=i(`.
Helsinki-NLP uploaded many models with many language pairs.
`),j=r("strong"),T=i("Recommended model"),S=i(": "),D=r("a"),ne=i("t5-base"),Re=i("."),this.h()},l(Q){n=o(Q,"P",{});var Y=l(n);c=o(Y,"STRONG",{});var ot=l(c);t=u(ot,"Recommended model"),ot.forEach(s),d=u(Y,`:
`),q=o(Y,"A",{href:!0,rel:!0});var Ri=l(q);k=u(Ri,"Helsinki-NLP/opus-mt-ru-en"),Ri.forEach(s),A=u(Y,`.
Helsinki-NLP uploaded many models with many language pairs.
`),j=o(Y,"STRONG",{});var Va=l(j);T=u(Va,"Recommended model"),Va.forEach(s),S=u(Y,": "),D=o(Y,"A",{href:!0,rel:!0});var Se=l(D);ne=u(Se,"t5-base"),Se.forEach(s),Re=u(Y,"."),Y.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/Helsinki-NLP/opus-mt-ru-en"),h(q,"rel","nofollow"),h(D,"href","https://huggingface.co/t5-base"),h(D,"rel","nofollow")},m(Q,Y){m(Q,n,Y),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A),e(n,j),e(j,T),e(n,S),e(n,D),e(D,ne),e(n,Re)},d(Q){Q&&s(n)}}}function mF($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-ru-en"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query(
    {
        "inputs": "\u041C\u0435\u043D\u044F \u0437\u043E\u0432\u0443\u0442 \u0412\u043E\u043B\u044C\u0444\u0433\u0430\u043D\u0433 \u0438 \u044F \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043B\u0438\u043D\u0435",
    }
)
# Response
self.assertEqual(
    data,
    [
        {
            "translation_text": "My name is Wolfgang and I live in Berlin.",
        },
    ],
)`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-ru-en&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(
    {
        <span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;\u041C\u0435\u043D\u044F \u0437\u043E\u0432\u0443\u0442 \u0412\u043E\u043B\u044C\u0444\u0433\u0430\u043D\u0433 \u0438 \u044F \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043B\u0438\u043D\u0435&quot;</span>,
    }
)
<span class="hljs-comment"># Response</span>
self.assertEqual(
    data,
    [
        {
            <span class="hljs-string">&quot;translation_text&quot;</span>: <span class="hljs-string">&quot;My name is Wolfgang and I live in Berlin.&quot;</span>,
        },
    ],
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function qF($){let n,c;return n=new P({props:{$$slots:{default:[mF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function $F($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-ru-en",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs: "\u041C\u0435\u043D\u044F \u0437\u043E\u0432\u0443\u0442 \u0412\u043E\u043B\u044C\u0444\u0433\u0430\u043D\u0433 \u0438 \u044F \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043B\u0438\u043D\u0435"}).then((response) => {
    console.log(JSON.stringify(response));
});
// [{"translation_text":"My name is Wolfgang and I live in Berlin."}]`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-ru-en&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>({<span class="hljs-attr">inputs</span>: <span class="hljs-string">&quot;\u041C\u0435\u043D\u044F \u0437\u043E\u0432\u0443\u0442 \u0412\u043E\u043B\u044C\u0444\u0433\u0430\u043D\u0433 \u0438 \u044F \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043B\u0438\u043D\u0435&quot;</span>}).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// [{&quot;translation_text&quot;:&quot;My name is Wolfgang and I live in Berlin.&quot;}]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function _F($){let n,c;return n=new P({props:{$$slots:{default:[$F]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function vF($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-ru-en \\
        -X POST \\
        -d '{"inputs": "\u041C\u0435\u043D\u044F \u0437\u043E\u0432\u0443\u0442 \u0412\u043E\u043B\u044C\u0444\u0433\u0430\u043D\u0433 \u0438 \u044F \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043B\u0438\u043D\u0435"}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"translation_text":"My name is Wolfgang and I live in Berlin."}]`,highlighted:`curl https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-ru-en \\
        -X POST \\
        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;: &quot;\u041C\u0435\u043D\u044F \u0437\u043E\u0432\u0443\u0442 \u0412\u043E\u043B\u044C\u0444\u0433\u0430\u043D\u0433 \u0438 \u044F \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043B\u0438\u043D\u0435&quot;}&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># [{&quot;translation_text&quot;:&quot;My name is Wolfgang and I live in Berlin.&quot;}]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function EF($){let n,c;return n=new P({props:{$$slots:{default:[vF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function yF($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("facebook/bart-large-cnn"),A=i("."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,`:
`),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"facebook/bart-large-cnn"),D.forEach(s),A=u(T,"."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/facebook/bart-large-cnn"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function wF($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/facebook/bart-large-cnn"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query(
    {
        "inputs": "The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.",
        "parameters": {"do_sample": False},
    }
)
# Response
self.assertEqual(
    data,
    [
        {
            "summary_text": "The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world.",
        },
    ],
)`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/bart-large-cnn&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(
    {
        <span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.&quot;</span>,
        <span class="hljs-string">&quot;parameters&quot;</span>: {<span class="hljs-string">&quot;do_sample&quot;</span>: <span class="hljs-literal">False</span>},
    }
)
<span class="hljs-comment"># Response</span>
self.assertEqual(
    data,
    [
        {
            <span class="hljs-string">&quot;summary_text&quot;</span>: <span class="hljs-string">&quot;The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world.&quot;</span>,
        },
    ],
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function bF($){let n,c;return n=new P({props:{$$slots:{default:[wF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function TF($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/facebook/bart-large-cnn",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs: "The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct."}).then((response) => {
    console.log(JSON.stringify(response));
});
// [{"summary_text":"The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. It was the first structure to reach a height of 300 metres."}]`,highlighted:`import fetch from <span class="hljs-comment">&quot;node-fetch&quot;</span>;
async function query(data) {
    const response = await fetch(
        <span class="hljs-comment">&quot;https://api-inference.huggingface.co/models/facebook/bart-large-cnn&quot;</span>,
        {
            headers: { <span class="hljs-type">Authorization</span>: \`<span class="hljs-type">Bearer</span> <span class="hljs-string">\${</span><span class="hljs-type">API_TOKEN</span>}\` },
            method: <span class="hljs-comment">&quot;POST&quot;</span>,
            body: <span class="hljs-type">JSON</span>.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs: <span class="hljs-comment">&quot;The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.&quot;</span>}).then((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// [{<span class="hljs-comment">&quot;summary_text&quot;</span>:<span class="hljs-comment">&quot;The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. It was the first structure to reach a height of 300 metres.&quot;</span>}]`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function jF($){let n,c;return n=new P({props:{$$slots:{default:[TF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function kF($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/facebook/bart-large-cnn \\
        -X POST \\
        -d '{"inputs": "The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.", "parameters": {"do_sample": false}}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"summary_text":"The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world."}]`,highlighted:`curl https://api-inference.huggingface.co/models/facebook/bart-large-cnn \\
        -X POST \\
        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;: &quot;The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.&quot;, &quot;parameters&quot;: {&quot;do_sample&quot;: false}}&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># [{&quot;summary_text&quot;:&quot;The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world.&quot;}]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function AF($){let n,c;return n=new P({props:{$$slots:{default:[kF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function DF($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("microsoft/DialoGPT-large"),A=i("."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,`:
`),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"microsoft/DialoGPT-large"),D.forEach(s),A=u(T,"."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/microsoft/DialoGPT-large"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function OF($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-large"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query(
    {
        "inputs": {
            "past_user_inputs": ["Which movie is the best ?"],
            "generated_responses": ["It's Die Hard for sure."],
            "text": "Can you explain why ?",
        },
    }
)
# Response
self.assertEqual(
    data,
    {
        "generated_text": "It's the best movie ever.",
        "conversation": {
            "past_user_inputs": [
                "Which movie is the best ?",
                "Can you explain why ?",
            ],
            "generated_responses": [
                "It's Die Hard for sure.",
                "It's the best movie ever.",
            ],
        },
        "warnings": ["Setting \`pad_token_id\` to \`eos_token_id\`:50256 for open-end generation."],
    },
)`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/microsoft/DialoGPT-large&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(
    {
        <span class="hljs-string">&quot;inputs&quot;</span>: {
            <span class="hljs-string">&quot;past_user_inputs&quot;</span>: [<span class="hljs-string">&quot;Which movie is the best ?&quot;</span>],
            <span class="hljs-string">&quot;generated_responses&quot;</span>: [<span class="hljs-string">&quot;It&#x27;s Die Hard for sure.&quot;</span>],
            <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Can you explain why ?&quot;</span>,
        },
    }
)
<span class="hljs-comment"># Response</span>
self.assertEqual(
    data,
    {
        <span class="hljs-string">&quot;generated_text&quot;</span>: <span class="hljs-string">&quot;It&#x27;s the best movie ever.&quot;</span>,
        <span class="hljs-string">&quot;conversation&quot;</span>: {
            <span class="hljs-string">&quot;past_user_inputs&quot;</span>: [
                <span class="hljs-string">&quot;Which movie is the best ?&quot;</span>,
                <span class="hljs-string">&quot;Can you explain why ?&quot;</span>,
            ],
            <span class="hljs-string">&quot;generated_responses&quot;</span>: [
                <span class="hljs-string">&quot;It&#x27;s Die Hard for sure.&quot;</span>,
                <span class="hljs-string">&quot;It&#x27;s the best movie ever.&quot;</span>,
            ],
        },
        <span class="hljs-string">&quot;warnings&quot;</span>: [<span class="hljs-string">&quot;Setting \`pad_token_id\` to \`eos_token_id\`:50256 for open-end generation.&quot;</span>],
    },
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function PF($){let n,c;return n=new P({props:{$$slots:{default:[OF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function RF($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/microsoft/DialoGPT-large",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs: {past_user_inputs: ["Which movie is the best ?"], generated_responses: ["It is Die Hard for sure."], text:"Can you explain why ?"}}).then((response) => {
    console.log(JSON.stringify(response));
});
// {"generated_text":"It's the best movie ever.","conversation":{"past_user_inputs":["Which movie is the best ?","Can you explain why ?"],"generated_responses":["It is Die Hard for sure.","It's the best movie ever."]},"warnings":["Setting \`pad_token_id\` to \`eos_token_id\`:50256 for open-end generation."]}`,highlighted:`<span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
async <span class="hljs-keyword">function</span> query(data) {
    const response = await <span class="hljs-keyword">fetch</span>(
        &quot;https://api-inference.huggingface.co/models/microsoft/DialoGPT-large&quot;,
        {
            headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
            <span class="hljs-keyword">method</span>: &quot;POST&quot;,
            body: <span class="hljs-type">JSON</span>.stringify(data),
        }
    );
    const result = await response.json();
    <span class="hljs-keyword">return</span> result;
}
query({inputs: {past_user_inputs: [&quot;Which movie is the best ?&quot;], generated_responses: [&quot;It is Die Hard for sure.&quot;], <span class="hljs-type">text</span>:&quot;Can you explain why ?&quot;}}).<span class="hljs-keyword">then</span>((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// {&quot;generated_text&quot;:&quot;It&#x27;s the best movie ever.&quot;,&quot;conversation&quot;:{&quot;past_user_inputs&quot;:[&quot;Which movie is the best ?&quot;,&quot;Can you explain why ?&quot;],&quot;generated_responses&quot;:[&quot;It is Die Hard for sure.&quot;,&quot;It&#x27;s the best movie ever.&quot;]},&quot;warnings&quot;:[&quot;Setting \`pad_token_id\` to \`eos_token_id\`:50256 for open-end generation.&quot;]}`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function SF($){let n,c;return n=new P({props:{$$slots:{default:[RF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function NF($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/microsoft/DialoGPT-large \\
        -X POST \\
        -d '{"inputs": {"past_user_inputs": ["Which movie is the best ?"], "generated_responses": ["It is Die Hard for sure."], "text":"Can you explain why ?"}}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# {"generated_text":"It's the best movie ever.","conversation":{"past_user_inputs":["Which movie is the best ?","Can you explain why ?"],"generated_responses":["It is Die Hard for sure.","It's the best movie ever."]},"warnings":["Setting \`pad_token_id\` to \`eos_token_id\`:50256 for open-end generation."]}`,highlighted:'curl https://api-inference.huggingface.co/models/microsoft/DialoGPT-large \\\n        -X POST \\\n        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;: {&quot;past_user_inputs&quot;: [&quot;Which movie is the best ?&quot;], &quot;generated_responses&quot;: [&quot;It is Die Hard for sure.&quot;], &quot;text&quot;:&quot;Can you explain why ?&quot;}}&#x27;</span> \\\n        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">${HF_API_TOKEN}</span>&quot;</span>\n<span class="hljs-comment"># {&quot;generated_text&quot;:&quot;It&#x27;s the best movie ever.&quot;,&quot;conversation&quot;:{&quot;past_user_inputs&quot;:[&quot;Which movie is the best ?&quot;,&quot;Can you explain why ?&quot;],&quot;generated_responses&quot;:[&quot;It is Die Hard for sure.&quot;,&quot;It&#x27;s the best movie ever.&quot;]},&quot;warnings&quot;:[&quot;Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.&quot;]}</span>'}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function xF($){let n,c;return n=new P({props:{$$slots:{default:[NF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function IF($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("google/tapas-base-finetuned-wtq"),A=i("."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,`:
`),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"google/tapas-base-finetuned-wtq"),D.forEach(s),A=u(T,"."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/google/tapas-base-finetuned-wtq"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function HF($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query(
    {
        "inputs": {
            "query": "How many stars does the transformers repository have?",
            "table": {
                "Repository": ["Transformers", "Datasets", "Tokenizers"],
                "Stars": ["36542", "4512", "3934"],
                "Contributors": ["651", "77", "34"],
                "Programming language": [
                    "Python",
                    "Python",
                    "Rust, Python and NodeJS",
                ],
            },
        }
    }
)`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(
    {
        <span class="hljs-string">&quot;inputs&quot;</span>: {
            <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;How many stars does the transformers repository have?&quot;</span>,
            <span class="hljs-string">&quot;table&quot;</span>: {
                <span class="hljs-string">&quot;Repository&quot;</span>: [<span class="hljs-string">&quot;Transformers&quot;</span>, <span class="hljs-string">&quot;Datasets&quot;</span>, <span class="hljs-string">&quot;Tokenizers&quot;</span>],
                <span class="hljs-string">&quot;Stars&quot;</span>: [<span class="hljs-string">&quot;36542&quot;</span>, <span class="hljs-string">&quot;4512&quot;</span>, <span class="hljs-string">&quot;3934&quot;</span>],
                <span class="hljs-string">&quot;Contributors&quot;</span>: [<span class="hljs-string">&quot;651&quot;</span>, <span class="hljs-string">&quot;77&quot;</span>, <span class="hljs-string">&quot;34&quot;</span>],
                <span class="hljs-string">&quot;Programming language&quot;</span>: [
                    <span class="hljs-string">&quot;Python&quot;</span>,
                    <span class="hljs-string">&quot;Python&quot;</span>,
                    <span class="hljs-string">&quot;Rust, Python and NodeJS&quot;</span>,
                ],
            },
        }
    }
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function BF($){let n,c;return n=new P({props:{$$slots:{default:[HF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function CF($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs:{query:"How many stars does the transformers repository have?",table:{Repository:["Transformers","Datasets","Tokenizers"],Stars:["36542","4512","3934"],Contributors:["651","77","34"],"Programming language":["Python","Python","Rust, Python and NodeJS"]}}}).then((response) => {
    console.log(JSON.stringify(response));
});
// {"answer":"AVERAGE > 36542","coordinates":[[0,1]],"cells":["36542"],"aggregator":"AVERAGE"}`,highlighted:`<span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
async <span class="hljs-keyword">function</span> query(data) {
    const response = await <span class="hljs-keyword">fetch</span>(
        &quot;https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq&quot;,
        {
            headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
            <span class="hljs-keyword">method</span>: &quot;POST&quot;,
            body: <span class="hljs-type">JSON</span>.stringify(data),
        }
    );
    const result = await response.json();
    <span class="hljs-keyword">return</span> result;
}
query({inputs:{query:&quot;How many stars does the transformers repository have?&quot;,<span class="hljs-keyword">table</span>:{Repository:[&quot;Transformers&quot;,&quot;Datasets&quot;,&quot;Tokenizers&quot;],Stars:[&quot;36542&quot;,&quot;4512&quot;,&quot;3934&quot;],Contributors:[&quot;651&quot;,&quot;77&quot;,&quot;34&quot;],&quot;Programming language&quot;:[&quot;Python&quot;,&quot;Python&quot;,&quot;Rust, Python and NodeJS&quot;]}}}).<span class="hljs-keyword">then</span>((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// {&quot;answer&quot;:&quot;AVERAGE &gt; 36542&quot;,&quot;coordinates&quot;:[[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]],&quot;cells&quot;:[&quot;36542&quot;],&quot;aggregator&quot;:&quot;AVERAGE&quot;}`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function GF($){let n,c;return n=new P({props:{$$slots:{default:[CF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function LF($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq \\
        -X POST \\
        -d '{"inputs":{"query":"How many stars does the transformers repository have?","table":{"Repository":["Transformers","Datasets","Tokenizers"],"Stars":["36542","4512","3934"],"Contributors":["651","77","34"],"Programming language":["Python","Python","Rust, Python and NodeJS"]}}}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# {"answer":"AVERAGE > 36542","coordinates":[[0,1]],"cells":["36542"],"aggregator":"AVERAGE"}`,highlighted:`curl https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq \\
        -X POST \\
        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;:{&quot;query&quot;:&quot;How many stars does the transformers repository have?&quot;,&quot;table&quot;:{&quot;Repository&quot;:[&quot;Transformers&quot;,&quot;Datasets&quot;,&quot;Tokenizers&quot;],&quot;Stars&quot;:[&quot;36542&quot;,&quot;4512&quot;,&quot;3934&quot;],&quot;Contributors&quot;:[&quot;651&quot;,&quot;77&quot;,&quot;34&quot;],&quot;Programming language&quot;:[&quot;Python&quot;,&quot;Python&quot;,&quot;Rust, Python and NodeJS&quot;]}}}&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># {&quot;answer&quot;:&quot;AVERAGE &gt; 36542&quot;,&quot;coordinates&quot;:[[0,1]],&quot;cells&quot;:[&quot;36542&quot;],&quot;aggregator&quot;:&quot;AVERAGE&quot;}</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function UF($){let n,c;return n=new P({props:{$$slots:{default:[LF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function zF($){let n,c;return n=new R({props:{code:`self.assertEqual(
    data,
    {
        "answer": "AVERAGE > 36542",
        "coordinates": [[0, 1]],
        "cells": ["36542"],
        "aggregator": "AVERAGE",
    },
)`,highlighted:`self.assertEqual(
    data,
    {
        <span class="hljs-string">&quot;answer&quot;</span>: <span class="hljs-string">&quot;AVERAGE &gt; 36542&quot;</span>,
        <span class="hljs-string">&quot;coordinates&quot;</span>: [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]],
        <span class="hljs-string">&quot;cells&quot;</span>: [<span class="hljs-string">&quot;36542&quot;</span>],
        <span class="hljs-string">&quot;aggregator&quot;</span>: <span class="hljs-string">&quot;AVERAGE&quot;</span>,
    },
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function MF($){let n,c;return n=new P({props:{$$slots:{default:[zF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function KF($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("deepset/roberta-base-squad2"),A=i("."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,`:
`),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"deepset/roberta-base-squad2"),D.forEach(s),A=u(T,"."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/deepset/roberta-base-squad2"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function FF($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/deepset/roberta-base-squad2"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query(
    {
        "inputs": {
            "question": "What's my name?",
            "context": "My name is Clara and I live in Berkeley.",
        }
    }
)`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/deepset/roberta-base-squad2&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(
    {
        <span class="hljs-string">&quot;inputs&quot;</span>: {
            <span class="hljs-string">&quot;question&quot;</span>: <span class="hljs-string">&quot;What&#x27;s my name?&quot;</span>,
            <span class="hljs-string">&quot;context&quot;</span>: <span class="hljs-string">&quot;My name is Clara and I live in Berkeley.&quot;</span>,
        }
    }
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function JF($){let n,c;return n=new P({props:{$$slots:{default:[FF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function WF($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/deepset/roberta-base-squad2",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs:{question:"What is my name?",context:"My name is Clara and I live in Berkeley."}}).then((response) => {
    console.log(JSON.stringify(response));
});
// {"score":0.933128833770752,"start":11,"end":16,"answer":"Clara"}`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/deepset/roberta-base-squad2&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>({<span class="hljs-attr">inputs</span>:{<span class="hljs-attr">question</span>:<span class="hljs-string">&quot;What is my name?&quot;</span>,<span class="hljs-attr">context</span>:<span class="hljs-string">&quot;My name is Clara and I live in Berkeley.&quot;</span>}}).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// {&quot;score&quot;:0.933128833770752,&quot;start&quot;:11,&quot;end&quot;:16,&quot;answer&quot;:&quot;Clara&quot;}</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function YF($){let n,c;return n=new P({props:{$$slots:{default:[WF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function VF($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/deepset/roberta-base-squad2 \\
        -X POST \\
        -d '{"inputs":{"question":"What is my name?","context":"My name is Clara and I live in Berkeley."}}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# {"score":0.933128833770752,"start":11,"end":16,"answer":"Clara"}`,highlighted:`curl https://api-inference.huggingface.co/models/deepset/roberta-base-squad2 \\
        -X POST \\
        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;:{&quot;question&quot;:&quot;What is my name?&quot;,&quot;context&quot;:&quot;My name is Clara and I live in Berkeley.&quot;}}&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># {&quot;score&quot;:0.933128833770752,&quot;start&quot;:11,&quot;end&quot;:16,&quot;answer&quot;:&quot;Clara&quot;}</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function XF($){let n,c;return n=new P({props:{$$slots:{default:[VF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function QF($){let n,c;return n=new R({props:{code:`self.assertEqual(
    deep_round(data),
    {"score": 0.9327, "start": 11, "end": 16, "answer": "Clara"},
)`,highlighted:`self.assertEqual(
    deep_round(data),
    {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9327</span>, <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">16</span>, <span class="hljs-string">&quot;answer&quot;</span>: <span class="hljs-string">&quot;Clara&quot;</span>},
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function ZF($){let n,c;return n=new P({props:{$$slots:{default:[QF]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function eJ($){let n,c,t,d,q,k;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("distilbert-base-uncased-finetuned-sst-2-english"),this.h()},l(A){n=o(A,"P",{});var j=l(n);c=o(j,"STRONG",{});var T=l(c);t=u(T,"Recommended model"),T.forEach(s),d=u(j,`:
`),q=o(j,"A",{href:!0,rel:!0});var S=l(q);k=u(S,"distilbert-base-uncased-finetuned-sst-2-english"),S.forEach(s),j.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english"),h(q,"rel","nofollow")},m(A,j){m(A,n,j),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k)},d(A){A&&s(n)}}}function tJ($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query({"inputs": "I like you. I love you"})`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query({<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;I like you. I love you&quot;</span>})`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function sJ($){let n,c;return n=new P({props:{$$slots:{default:[tJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function aJ($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs:"I like you. I love you"}).then((response) => {
    console.log(JSON.stringify(response));
});
// [[{"label":"NEGATIVE","score":0.0001261125144083053},{"label":"POSITIVE","score":0.9998738765716553}]]`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>({<span class="hljs-attr">inputs</span>:<span class="hljs-string">&quot;I like you. I love you&quot;</span>}).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// [[{&quot;label&quot;:&quot;NEGATIVE&quot;,&quot;score&quot;:0.0001261125144083053},{&quot;label&quot;:&quot;POSITIVE&quot;,&quot;score&quot;:0.9998738765716553}]]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function nJ($){let n,c;return n=new P({props:{$$slots:{default:[aJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function rJ($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english \\
        -X POST \\
        -d '{"inputs":"I like you. I love you"}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [[{"label":"NEGATIVE","score":0.0001261125144083053},{"label":"POSITIVE","score":0.9998738765716553}]]`,highlighted:`curl https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english \\
        -X POST \\
        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;:&quot;I like you. I love you&quot;}&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># [[{&quot;label&quot;:&quot;NEGATIVE&quot;,&quot;score&quot;:0.0001261125144083053},{&quot;label&quot;:&quot;POSITIVE&quot;,&quot;score&quot;:0.9998738765716553}]]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function oJ($){let n,c;return n=new P({props:{$$slots:{default:[rJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function lJ($){let n,c;return n=new R({props:{code:`self.assertEqual(
    deep_round(data),
    [
        [
            {"label": "NEGATIVE", "score": 0.0001},
            {"label": "POSITIVE", "score": 0.9999},
        ]
    ],
)`,highlighted:`self.assertEqual(
    deep_round(data),
    [
        [
            {<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;NEGATIVE&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.0001</span>},
            {<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;POSITIVE&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9999</span>},
        ]
    ],
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function iJ($){let n,c;return n=new P({props:{$$slots:{default:[lJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function uJ($){let n,c,t,d,q,k;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("dbmdz/bert-large-cased-finetuned-conll03-english"),this.h()},l(A){n=o(A,"P",{});var j=l(n);c=o(j,"STRONG",{});var T=l(c);t=u(T,"Recommended model"),T.forEach(s),d=u(j,`:
`),q=o(j,"A",{href:!0,rel:!0});var S=l(q);k=u(S,"dbmdz/bert-large-cased-finetuned-conll03-english"),S.forEach(s),j.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/dbmdz/bert-large-cased-finetuned-conll03-english"),h(q,"rel","nofollow")},m(A,j){m(A,n,j),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k)},d(A){A&&s(n)}}}function cJ($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query({"inputs": "My name is Sarah Jessica Parker but you can call me Jessica"})`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query({<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;My name is Sarah Jessica Parker but you can call me Jessica&quot;</span>})`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function fJ($){let n,c;return n=new P({props:{$$slots:{default:[cJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function pJ($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs:"My name is Sarah Jessica Parker but you can call me Jessica"}).then((response) => {
    console.log(JSON.stringify(response));
});
// [{"entity_group":"PER","score":0.9991337060928345,"word":"Sarah Jessica Parker","start":11,"end":31},{"entity_group":"PER","score":0.9979912042617798,"word":"Jessica","start":52,"end":59}]`,highlighted:`<span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
async <span class="hljs-keyword">function</span> query(data) {
    const response = await <span class="hljs-keyword">fetch</span>(
        &quot;https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english&quot;,
        {
            headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
            <span class="hljs-keyword">method</span>: &quot;POST&quot;,
            body: <span class="hljs-type">JSON</span>.stringify(data),
        }
    );
    const result = await response.json();
    <span class="hljs-keyword">return</span> result;
}
query({inputs:&quot;My name is Sarah Jessica Parker but you can call me Jessica&quot;}).<span class="hljs-keyword">then</span>((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// [{&quot;entity_group&quot;:&quot;PER&quot;,&quot;score&quot;:<span class="hljs-number">0.9991337060928345</span>,&quot;word&quot;:&quot;Sarah Jessica Parker&quot;,&quot;start&quot;:<span class="hljs-number">11</span>,&quot;end&quot;:<span class="hljs-number">31</span>},{&quot;entity_group&quot;:&quot;PER&quot;,&quot;score&quot;:<span class="hljs-number">0.9979912042617798</span>,&quot;word&quot;:&quot;Jessica&quot;,&quot;start&quot;:<span class="hljs-number">52</span>,&quot;end&quot;:<span class="hljs-number">59</span>}]`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function hJ($){let n,c;return n=new P({props:{$$slots:{default:[pJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function dJ($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english \\
        -X POST \\
        -d '{"inputs":"My name is Sarah Jessica Parker but you can call me Jessica"}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"entity_group":"PER","score":0.9991337060928345,"word":"Sarah Jessica Parker","start":11,"end":31},{"entity_group":"PER","score":0.9979912042617798,"word":"Jessica","start":52,"end":59}]`,highlighted:`curl https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english \\
        -X POST \\
        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;:&quot;My name is Sarah Jessica Parker but you can call me Jessica&quot;}&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># [{&quot;entity_group&quot;:&quot;PER&quot;,&quot;score&quot;:0.9991337060928345,&quot;word&quot;:&quot;Sarah Jessica Parker&quot;,&quot;start&quot;:11,&quot;end&quot;:31},{&quot;entity_group&quot;:&quot;PER&quot;,&quot;score&quot;:0.9979912042617798,&quot;word&quot;:&quot;Jessica&quot;,&quot;start&quot;:52,&quot;end&quot;:59}]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function gJ($){let n,c;return n=new P({props:{$$slots:{default:[dJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function mJ($){let n,c;return n=new R({props:{code:`self.assertEqual(
    deep_round(data),
    [
        {
            "entity_group": "PER",
            "score": 0.9991,
            "word": "Sarah Jessica Parker",
            "start": 11,
            "end": 31,
        },
        {
            "entity_group": "PER",
            "score": 0.998,
            "word": "Jessica",
            "start": 52,
            "end": 59,
        },
    ],
)`,highlighted:`self.assertEqual(
    deep_round(data),
    [
        {
            <span class="hljs-string">&quot;entity_group&quot;</span>: <span class="hljs-string">&quot;PER&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9991</span>,
            <span class="hljs-string">&quot;word&quot;</span>: <span class="hljs-string">&quot;Sarah Jessica Parker&quot;</span>,
            <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">11</span>,
            <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">31</span>,
        },
        {
            <span class="hljs-string">&quot;entity_group&quot;</span>: <span class="hljs-string">&quot;PER&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.998</span>,
            <span class="hljs-string">&quot;word&quot;</span>: <span class="hljs-string">&quot;Jessica&quot;</span>,
            <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">52</span>,
            <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">59</span>,
        },
    ],
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function qJ($){let n,c;return n=new P({props:{$$slots:{default:[mJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function $J($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(": "),q=r("a"),k=i("gpt2"),A=i(" (it\u2019s a simple model, but fun to play with)."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,": "),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"gpt2"),D.forEach(s),A=u(T," (it\u2019s a simple model, but fun to play with)."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/gpt2"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function _J($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/gpt2"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query({"inputs": "The answer to the universe is"})`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/gpt2&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query({<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;The answer to the universe is&quot;</span>})`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function vJ($){let n,c;return n=new P({props:{$$slots:{default:[_J]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function EJ($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/gpt2",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs:"The answer to the universe is"}).then((response) => {
    console.log(JSON.stringify(response));
});
// [{"generated_text":"The answer to the universe is in a different shape (or shapeless) than"}]`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/gpt2&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>({<span class="hljs-attr">inputs</span>:<span class="hljs-string">&quot;The answer to the universe is&quot;</span>}).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// [{&quot;generated_text&quot;:&quot;The answer to the universe is in a different shape (or shapeless) than&quot;}]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function yJ($){let n,c;return n=new P({props:{$$slots:{default:[EJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function wJ($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/gpt2 \\
        -X POST \\
        -d '{"inputs":"The answer to the universe is"}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"generated_text":"The answer to the universe is in a different shape (or shapeless) than"}]`,highlighted:`curl https://api-inference.huggingface.co/models/gpt2 \\
        -X POST \\
        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;:&quot;The answer to the universe is&quot;}&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># [{&quot;generated_text&quot;:&quot;The answer to the universe is in a different shape (or shapeless) than&quot;}]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function bJ($){let n,c;return n=new P({props:{$$slots:{default:[wJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function TJ($){let n,c;return n=new R({props:{code:`data == [
    {
        "generated_text": 'The answer to the universe is that we are the creation of the entire universe," says Fitch.\\n\\nAs of the 1960s, six times as many Americans still make fewer than six bucks ($17) per year on their way to retirement.'
    }
]`,highlighted:`data == [
    {
        <span class="hljs-string">&quot;generated_text&quot;</span>: <span class="hljs-string">&#x27;The answer to the universe is that we are the creation of the entire universe,&quot; says Fitch.\\n\\nAs of the 1960s, six times as many Americans still make fewer than six bucks ($17) per year on their way to retirement.&#x27;</span>
    }
]`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function jJ($){let n,c;return n=new P({props:{$$slots:{default:[TJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function kJ($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("bert-base-uncased"),A=i(" (it\u2019s a simple model, but fun to play with)."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,`:
`),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"bert-base-uncased"),D.forEach(s),A=u(T," (it\u2019s a simple model, but fun to play with)."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/bert-base-uncased"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function AJ($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/bert-base-uncased"
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query({"inputs": "The answer to the universe is [MASK]."})`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/bert-base-uncased&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query({<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;The answer to the universe is [MASK].&quot;</span>})`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function DJ($){let n,c;return n=new P({props:{$$slots:{default:[AJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function OJ($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/bert-base-uncased",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query({inputs:"The answer to the universe is [MASK]."}).then((response) => {
    console.log(JSON.stringify(response));
});
// [{"sequence":"the answer to the universe is no.","score":0.16963955760002136,"token":2053,"token_str":"no"},{"sequence":"the answer to the universe is nothing.","score":0.07344776391983032,"token":2498,"token_str":"nothing"},{"sequence":"the answer to the universe is yes.","score":0.05803241208195686,"token":2748,"token_str":"yes"},{"sequence":"the answer to the universe is unknown.","score":0.043957844376564026,"token":4242,"token_str":"unknown"},{"sequence":"the answer to the universe is simple.","score":0.04015745222568512,"token":3722,"token_str":"simple"}]`,highlighted:`<span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
async <span class="hljs-keyword">function</span> query(data) {
    const response = await <span class="hljs-keyword">fetch</span>(
        &quot;https://api-inference.huggingface.co/models/bert-base-uncased&quot;,
        {
            headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
            <span class="hljs-keyword">method</span>: &quot;POST&quot;,
            body: <span class="hljs-type">JSON</span>.stringify(data),
        }
    );
    const result = await response.json();
    <span class="hljs-keyword">return</span> result;
}
query({inputs:&quot;The answer to the universe is [MASK].&quot;}).<span class="hljs-keyword">then</span>((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// [{&quot;sequence&quot;:&quot;the answer to the universe is no.&quot;,&quot;score&quot;:<span class="hljs-number">0.16963955760002136</span>,&quot;token&quot;:<span class="hljs-number">2053</span>,&quot;token_str&quot;:&quot;no&quot;},{&quot;sequence&quot;:&quot;the answer to the universe is nothing.&quot;,&quot;score&quot;:<span class="hljs-number">0.07344776391983032</span>,&quot;token&quot;:<span class="hljs-number">2498</span>,&quot;token_str&quot;:&quot;nothing&quot;},{&quot;sequence&quot;:&quot;the answer to the universe is yes.&quot;,&quot;score&quot;:<span class="hljs-number">0.05803241208195686</span>,&quot;token&quot;:<span class="hljs-number">2748</span>,&quot;token_str&quot;:&quot;yes&quot;},{&quot;sequence&quot;:&quot;the answer to the universe is unknown.&quot;,&quot;score&quot;:<span class="hljs-number">0.043957844376564026</span>,&quot;token&quot;:<span class="hljs-number">4242</span>,&quot;token_str&quot;:&quot;unknown&quot;},{&quot;sequence&quot;:&quot;the answer to the universe is simple.&quot;,&quot;score&quot;:<span class="hljs-number">0.04015745222568512</span>,&quot;token&quot;:<span class="hljs-number">3722</span>,&quot;token_str&quot;:&quot;simple&quot;}]`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function PJ($){let n,c;return n=new P({props:{$$slots:{default:[OJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function RJ($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/bert-base-uncased \\
        -X POST \\
        -d '{"inputs":"The answer to the universe is [MASK]."}' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"sequence":"the answer to the universe is no.","score":0.16963955760002136,"token":2053,"token_str":"no"},{"sequence":"the answer to the universe is nothing.","score":0.07344776391983032,"token":2498,"token_str":"nothing"},{"sequence":"the answer to the universe is yes.","score":0.05803241208195686,"token":2748,"token_str":"yes"},{"sequence":"the answer to the universe is unknown.","score":0.043957844376564026,"token":4242,"token_str":"unknown"},{"sequence":"the answer to the universe is simple.","score":0.04015745222568512,"token":3722,"token_str":"simple"}]`,highlighted:`curl https://api-inference.huggingface.co/models/bert-base-uncased \\
        -X POST \\
        -d <span class="hljs-string">&#x27;{&quot;inputs&quot;:&quot;The answer to the universe is [MASK].&quot;}&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># [{&quot;sequence&quot;:&quot;the answer to the universe is no.&quot;,&quot;score&quot;:0.16963955760002136,&quot;token&quot;:2053,&quot;token_str&quot;:&quot;no&quot;},{&quot;sequence&quot;:&quot;the answer to the universe is nothing.&quot;,&quot;score&quot;:0.07344776391983032,&quot;token&quot;:2498,&quot;token_str&quot;:&quot;nothing&quot;},{&quot;sequence&quot;:&quot;the answer to the universe is yes.&quot;,&quot;score&quot;:0.05803241208195686,&quot;token&quot;:2748,&quot;token_str&quot;:&quot;yes&quot;},{&quot;sequence&quot;:&quot;the answer to the universe is unknown.&quot;,&quot;score&quot;:0.043957844376564026,&quot;token&quot;:4242,&quot;token_str&quot;:&quot;unknown&quot;},{&quot;sequence&quot;:&quot;the answer to the universe is simple.&quot;,&quot;score&quot;:0.04015745222568512,&quot;token&quot;:3722,&quot;token_str&quot;:&quot;simple&quot;}]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function SJ($){let n,c;return n=new P({props:{$$slots:{default:[RJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function NJ($){let n,c;return n=new R({props:{code:`self.assertEqual(
    deep_round(data),
    [
        {
            "sequence": "the answer to the universe is no.",
            "score": 0.1696,
            "token": 2053,
            "token_str": "no",
        },
        {
            "sequence": "the answer to the universe is nothing.",
            "score": 0.0734,
            "token": 2498,
            "token_str": "nothing",
        },
        {
            "sequence": "the answer to the universe is yes.",
            "score": 0.0580,
            "token": 2748,
            "token_str": "yes",
        },
        {
            "sequence": "the answer to the universe is unknown.",
            "score": 0.044,
            "token": 4242,
            "token_str": "unknown",
        },
        {
            "sequence": "the answer to the universe is simple.",
            "score": 0.0402,
            "token": 3722,
            "token_str": "simple",
        },
    ],
)`,highlighted:`self.assertEqual(
    deep_round(data),
    [
        {
            <span class="hljs-string">&quot;sequence&quot;</span>: <span class="hljs-string">&quot;the answer to the universe is no.&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.1696</span>,
            <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-number">2053</span>,
            <span class="hljs-string">&quot;token_str&quot;</span>: <span class="hljs-string">&quot;no&quot;</span>,
        },
        {
            <span class="hljs-string">&quot;sequence&quot;</span>: <span class="hljs-string">&quot;the answer to the universe is nothing.&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.0734</span>,
            <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-number">2498</span>,
            <span class="hljs-string">&quot;token_str&quot;</span>: <span class="hljs-string">&quot;nothing&quot;</span>,
        },
        {
            <span class="hljs-string">&quot;sequence&quot;</span>: <span class="hljs-string">&quot;the answer to the universe is yes.&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.0580</span>,
            <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-number">2748</span>,
            <span class="hljs-string">&quot;token_str&quot;</span>: <span class="hljs-string">&quot;yes&quot;</span>,
        },
        {
            <span class="hljs-string">&quot;sequence&quot;</span>: <span class="hljs-string">&quot;the answer to the universe is unknown.&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.044</span>,
            <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-number">4242</span>,
            <span class="hljs-string">&quot;token_str&quot;</span>: <span class="hljs-string">&quot;unknown&quot;</span>,
        },
        {
            <span class="hljs-string">&quot;sequence&quot;</span>: <span class="hljs-string">&quot;the answer to the universe is simple.&quot;</span>,
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.0402</span>,
            <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-number">3722</span>,
            <span class="hljs-string">&quot;token_str&quot;</span>: <span class="hljs-string">&quot;simple&quot;</span>,
        },
    ],
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function xJ($){let n,c;return n=new P({props:{$$slots:{default:[NJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function IJ($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(": "),q=r("a"),k=i(`Check your
langage`),A=i("."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,": "),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,`Check your
langage`),D.forEach(s),A=u(T,"."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/models?pipeline_tag=automatic-speech-recognition"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function HJ($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("English"),d=i(`:
`),q=r("a"),k=i("facebook/wav2vec2-large-960h-lv60-self"),A=i("."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"English"),S.forEach(s),d=u(T,`:
`),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"facebook/wav2vec2-large-960h-lv60-self"),D.forEach(s),A=u(T,"."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/facebook/wav2vec2-large-960h-lv60-self"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function BJ($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/facebook/wav2vec2-base-960h"
def query(filename):
    with open(filename, "rb") as f:
        data = f.read()
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query("sample1.flac")`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/wav2vec2-base-960h&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">filename</span>):
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
        data = f.read()
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(<span class="hljs-string">&quot;sample1.flac&quot;</span>)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function CJ($){let n,c;return n=new P({props:{$$slots:{default:[BJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function GJ($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
import fs from "fs";
async function query(filename) {
    const data = fs.readFileSync(filename);
    const response = await fetch(
        "https://api-inference.huggingface.co/models/facebook/wav2vec2-base-960h",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: data,
        }
    );
    const result = await response.json();
    return result;
}
query("sample1.flac").then((response) => {
    console.log(JSON.stringify(response));
});
// {"text":"GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE'LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS"}`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;fs&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">filename</span>) {
    <span class="hljs-keyword">const</span> data = fs.<span class="hljs-title function_">readFileSync</span>(filename);
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/wav2vec2-base-960h&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: data,
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>(<span class="hljs-string">&quot;sample1.flac&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// {&quot;text&quot;:&quot;GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE&#x27;LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS&quot;}</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function LJ($){let n,c;return n=new P({props:{$$slots:{default:[GJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function UJ($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/facebook/wav2vec2-base-960h \\
        -X POST \\
        --data-binary '@sample1.flac' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# {"text":"GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE'LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS"}`,highlighted:`curl https://api-inference.huggingface.co/models/facebook/wav2vec2-base-960h \\
        -X POST \\
        --data-binary <span class="hljs-string">&#x27;@sample1.flac&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># {&quot;text&quot;:&quot;GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE&#x27;LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS&quot;}</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function zJ($){let n,c;return n=new P({props:{$$slots:{default:[UJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function MJ($){let n,c;return n=new R({props:{code:`self.assertEqual(
    data,
    {
        "text": "GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE'LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS"
    },
)`,highlighted:`self.assertEqual(
    data,
    {
        <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE&#x27;LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS&quot;</span>
    },
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function KJ($){let n,c;return n=new P({props:{$$slots:{default:[MJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function FJ($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("Sentence-transformers"),A=i("."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,`:
`),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"Sentence-transformers"),D.forEach(s),A=u(T,"."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/sentence-transformers/paraphrase-xlm-r-multilingual-v1"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function JJ($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("superb/hubert-large-superb-er"),A=i("."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,`:
`),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"superb/hubert-large-superb-er"),D.forEach(s),A=u(T,"."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/superb/hubert-large-superb-er"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function WJ($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/superb/hubert-large-superb-er"
def query(filename):
    with open(filename, "rb") as f:
        data = f.read()
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query("sample1.flac")`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/superb/hubert-large-superb-er&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">filename</span>):
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
        data = f.read()
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(<span class="hljs-string">&quot;sample1.flac&quot;</span>)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function YJ($){let n,c;return n=new P({props:{$$slots:{default:[WJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function VJ($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
import fs from "fs";
async function query(filename) {
    const data = fs.readFileSync(filename);
    const response = await fetch(
        "https://api-inference.huggingface.co/models/superb/hubert-large-superb-er",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: data,
        }
    );
    const result = await response.json();
    return result;
}
query("sample1.flac").then((response) => {
    console.log(JSON.stringify(response));
});
// [{"score":0.5927661657333374,"label":"neu"},{"score":0.2002529799938202,"label":"hap"},{"score":0.12795612215995789,"label":"ang"},{"score":0.07902472466230392,"label":"sad"}]`,highlighted:`<span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
<span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> &quot;fs&quot;;
async <span class="hljs-keyword">function</span> query(filename) {
    const data = fs.readFileSync(filename);
    const response = await <span class="hljs-keyword">fetch</span>(
        &quot;https://api-inference.huggingface.co/models/superb/hubert-large-superb-er&quot;,
        {
            headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
            <span class="hljs-keyword">method</span>: &quot;POST&quot;,
            body: data,
        }
    );
    const result = await response.json();
    <span class="hljs-keyword">return</span> result;
}
query(&quot;sample1.flac&quot;).<span class="hljs-keyword">then</span>((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// [{&quot;score&quot;:<span class="hljs-number">0.5927661657333374</span>,&quot;label&quot;:&quot;neu&quot;},{&quot;score&quot;:<span class="hljs-number">0.2002529799938202</span>,&quot;label&quot;:&quot;hap&quot;},{&quot;score&quot;:<span class="hljs-number">0.12795612215995789</span>,&quot;label&quot;:&quot;ang&quot;},{&quot;score&quot;:<span class="hljs-number">0.07902472466230392</span>,&quot;label&quot;:&quot;sad&quot;}]`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function XJ($){let n,c;return n=new P({props:{$$slots:{default:[VJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function QJ($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/superb/hubert-large-superb-er \\
        -X POST \\
        --data-binary '@sample1.flac' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"score":0.5927661657333374,"label":"neu"},{"score":0.2002529799938202,"label":"hap"},{"score":0.12795612215995789,"label":"ang"},{"score":0.07902472466230392,"label":"sad"}]`,highlighted:`curl https://api-inference.huggingface.co/models/superb/hubert-large-superb-er \\
        -X POST \\
        --data-binary <span class="hljs-string">&#x27;@sample1.flac&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># [{&quot;score&quot;:0.5927661657333374,&quot;label&quot;:&quot;neu&quot;},{&quot;score&quot;:0.2002529799938202,&quot;label&quot;:&quot;hap&quot;},{&quot;score&quot;:0.12795612215995789,&quot;label&quot;:&quot;ang&quot;},{&quot;score&quot;:0.07902472466230392,&quot;label&quot;:&quot;sad&quot;}]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function ZJ($){let n,c;return n=new P({props:{$$slots:{default:[QJ]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function eW($){let n,c;return n=new R({props:{code:`self.assertEqual(
    deep_round(data, 4),
    [
        {"score": 0.5928, "label": "neu"},
        {"score": 0.2003, "label": "hap"},
        {"score": 0.128, "label": "ang"},
        {"score": 0.079, "label": "sad"},
    ],
)`,highlighted:`self.assertEqual(
    deep_round(data, <span class="hljs-number">4</span>),
    [
        {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.5928</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;neu&quot;</span>},
        {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.2003</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;hap&quot;</span>},
        {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.128</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;ang&quot;</span>},
        {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.079</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;sad&quot;</span>},
    ],
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function tW($){let n,c;return n=new P({props:{$$slots:{default:[eW]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function sW($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("facebook/detr-resnet-50"),A=i("."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,`:
`),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"facebook/detr-resnet-50"),D.forEach(s),A=u(T,"."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/facebook/detr-resnet-50"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function aW($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/facebook/detr-resnet-50"
def query(filename):
    with open(filename, "rb") as f:
        data = f.read()
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query("cats.jpg")`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/detr-resnet-50&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">filename</span>):
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
        data = f.read()
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(<span class="hljs-string">&quot;cats.jpg&quot;</span>)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function nW($){let n,c;return n=new P({props:{$$slots:{default:[aW]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function rW($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
import fs from "fs";
async function query(filename) {
    const data = fs.readFileSync(filename);
    const response = await fetch(
        "https://api-inference.huggingface.co/models/facebook/detr-resnet-50",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: data,
        }
    );
    const result = await response.json();
    return result;
}
query("cats.jpg").then((response) => {
    console.log(JSON.stringify(response));
});
// [{"score":0.9982201457023621,"label":"remote","box":{"xmin":40,"ymin":70,"xmax":175,"ymax":117}},{"score":0.9960021376609802,"label":"remote","box":{"xmin":333,"ymin":72,"xmax":368,"ymax":187}},{"score":0.9954745173454285,"label":"couch","box":{"xmin":0,"ymin":1,"xmax":639,"ymax":473}},{"score":0.9988006353378296,"label":"cat","box":{"xmin":13,"ymin":52,"xmax":314,"ymax":470}},{"score":0.9986783862113953,"label":"cat","box":{"xmin":345,"ymin":23,"xmax":640,"ymax":368}}]`,highlighted:`<span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
<span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> &quot;fs&quot;;
async <span class="hljs-keyword">function</span> query(filename) {
    const data = fs.readFileSync(filename);
    const response = await <span class="hljs-keyword">fetch</span>(
        &quot;https://api-inference.huggingface.co/models/facebook/detr-resnet-50&quot;,
        {
            headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
            <span class="hljs-keyword">method</span>: &quot;POST&quot;,
            body: data,
        }
    );
    const result = await response.json();
    <span class="hljs-keyword">return</span> result;
}
query(&quot;cats.jpg&quot;).<span class="hljs-keyword">then</span>((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// [{&quot;score&quot;:<span class="hljs-number">0.9982201457023621</span>,&quot;label&quot;:&quot;remote&quot;,&quot;box&quot;:{&quot;xmin&quot;:<span class="hljs-number">40</span>,&quot;ymin&quot;:<span class="hljs-number">70</span>,&quot;xmax&quot;:<span class="hljs-number">175</span>,&quot;ymax&quot;:<span class="hljs-number">117</span>}},{&quot;score&quot;:<span class="hljs-number">0.9960021376609802</span>,&quot;label&quot;:&quot;remote&quot;,&quot;box&quot;:{&quot;xmin&quot;:<span class="hljs-number">333</span>,&quot;ymin&quot;:<span class="hljs-number">72</span>,&quot;xmax&quot;:<span class="hljs-number">368</span>,&quot;ymax&quot;:<span class="hljs-number">187</span>}},{&quot;score&quot;:<span class="hljs-number">0.9954745173454285</span>,&quot;label&quot;:&quot;couch&quot;,&quot;box&quot;:{&quot;xmin&quot;:<span class="hljs-number">0</span>,&quot;ymin&quot;:<span class="hljs-number">1</span>,&quot;xmax&quot;:<span class="hljs-number">639</span>,&quot;ymax&quot;:<span class="hljs-number">473</span>}},{&quot;score&quot;:<span class="hljs-number">0.9988006353378296</span>,&quot;label&quot;:&quot;cat&quot;,&quot;box&quot;:{&quot;xmin&quot;:<span class="hljs-number">13</span>,&quot;ymin&quot;:<span class="hljs-number">52</span>,&quot;xmax&quot;:<span class="hljs-number">314</span>,&quot;ymax&quot;:<span class="hljs-number">470</span>}},{&quot;score&quot;:<span class="hljs-number">0.9986783862113953</span>,&quot;label&quot;:&quot;cat&quot;,&quot;box&quot;:{&quot;xmin&quot;:<span class="hljs-number">345</span>,&quot;ymin&quot;:<span class="hljs-number">23</span>,&quot;xmax&quot;:<span class="hljs-number">640</span>,&quot;ymax&quot;:<span class="hljs-number">368</span>}}]`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function oW($){let n,c;return n=new P({props:{$$slots:{default:[rW]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function lW($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/facebook/detr-resnet-50 \\
        -X POST \\
        --data-binary '@cats.jpg' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"score":0.9982201457023621,"label":"remote","box":{"xmin":40,"ymin":70,"xmax":175,"ymax":117}},{"score":0.9960021376609802,"label":"remote","box":{"xmin":333,"ymin":72,"xmax":368,"ymax":187}},{"score":0.9954745173454285,"label":"couch","box":{"xmin":0,"ymin":1,"xmax":639,"ymax":473}},{"score":0.9988006353378296,"label":"cat","box":{"xmin":13,"ymin":52,"xmax":314,"ymax":470}},{"score":0.9986783862113953,"label":"cat","box":{"xmin":345,"ymin":23,"xmax":640,"ymax":368}}]`,highlighted:`curl https://api-inference.huggingface.co/models/facebook/detr-resnet-50 \\
        -X POST \\
        --data-binary <span class="hljs-string">&#x27;@cats.jpg&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># [{&quot;score&quot;:0.9982201457023621,&quot;label&quot;:&quot;remote&quot;,&quot;box&quot;:{&quot;xmin&quot;:40,&quot;ymin&quot;:70,&quot;xmax&quot;:175,&quot;ymax&quot;:117}},{&quot;score&quot;:0.9960021376609802,&quot;label&quot;:&quot;remote&quot;,&quot;box&quot;:{&quot;xmin&quot;:333,&quot;ymin&quot;:72,&quot;xmax&quot;:368,&quot;ymax&quot;:187}},{&quot;score&quot;:0.9954745173454285,&quot;label&quot;:&quot;couch&quot;,&quot;box&quot;:{&quot;xmin&quot;:0,&quot;ymin&quot;:1,&quot;xmax&quot;:639,&quot;ymax&quot;:473}},{&quot;score&quot;:0.9988006353378296,&quot;label&quot;:&quot;cat&quot;,&quot;box&quot;:{&quot;xmin&quot;:13,&quot;ymin&quot;:52,&quot;xmax&quot;:314,&quot;ymax&quot;:470}},{&quot;score&quot;:0.9986783862113953,&quot;label&quot;:&quot;cat&quot;,&quot;box&quot;:{&quot;xmin&quot;:345,&quot;ymin&quot;:23,&quot;xmax&quot;:640,&quot;ymax&quot;:368}}]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function iW($){let n,c;return n=new P({props:{$$slots:{default:[lW]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function uW($){let n,c;return n=new R({props:{code:`self.assertEqual(
    deep_round(data, 4),
    [
        {
            "score": 0.9982,
            "label": "remote",
            "box": {"xmin": 40, "ymin": 70, "xmax": 175, "ymax": 117},
        },
        {
            "score": 0.9960,
            "label": "remote",
            "box": {"xmin": 333, "ymin": 72, "xmax": 368, "ymax": 187},
        },
        {
            "score": 0.9955,
            "label": "couch",
            "box": {"xmin": 0, "ymin": 1, "xmax": 639, "ymax": 473},
        },
        {
            "score": 0.9988,
            "label": "cat",
            "box": {"xmin": 13, "ymin": 52, "xmax": 314, "ymax": 470},
        },
        {
            "score": 0.9987,
            "label": "cat",
            "box": {"xmin": 345, "ymin": 23, "xmax": 640, "ymax": 368},
        },
    ],
)`,highlighted:`self.assertEqual(
    deep_round(data, <span class="hljs-number">4</span>),
    [
        {
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9982</span>,
            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;remote&quot;</span>,
            <span class="hljs-string">&quot;box&quot;</span>: {<span class="hljs-string">&quot;xmin&quot;</span>: <span class="hljs-number">40</span>, <span class="hljs-string">&quot;ymin&quot;</span>: <span class="hljs-number">70</span>, <span class="hljs-string">&quot;xmax&quot;</span>: <span class="hljs-number">175</span>, <span class="hljs-string">&quot;ymax&quot;</span>: <span class="hljs-number">117</span>},
        },
        {
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9960</span>,
            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;remote&quot;</span>,
            <span class="hljs-string">&quot;box&quot;</span>: {<span class="hljs-string">&quot;xmin&quot;</span>: <span class="hljs-number">333</span>, <span class="hljs-string">&quot;ymin&quot;</span>: <span class="hljs-number">72</span>, <span class="hljs-string">&quot;xmax&quot;</span>: <span class="hljs-number">368</span>, <span class="hljs-string">&quot;ymax&quot;</span>: <span class="hljs-number">187</span>},
        },
        {
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9955</span>,
            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;couch&quot;</span>,
            <span class="hljs-string">&quot;box&quot;</span>: {<span class="hljs-string">&quot;xmin&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;ymin&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;xmax&quot;</span>: <span class="hljs-number">639</span>, <span class="hljs-string">&quot;ymax&quot;</span>: <span class="hljs-number">473</span>},
        },
        {
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9988</span>,
            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;cat&quot;</span>,
            <span class="hljs-string">&quot;box&quot;</span>: {<span class="hljs-string">&quot;xmin&quot;</span>: <span class="hljs-number">13</span>, <span class="hljs-string">&quot;ymin&quot;</span>: <span class="hljs-number">52</span>, <span class="hljs-string">&quot;xmax&quot;</span>: <span class="hljs-number">314</span>, <span class="hljs-string">&quot;ymax&quot;</span>: <span class="hljs-number">470</span>},
        },
        {
            <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9987</span>,
            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;cat&quot;</span>,
            <span class="hljs-string">&quot;box&quot;</span>: {<span class="hljs-string">&quot;xmin&quot;</span>: <span class="hljs-number">345</span>, <span class="hljs-string">&quot;ymin&quot;</span>: <span class="hljs-number">23</span>, <span class="hljs-string">&quot;xmax&quot;</span>: <span class="hljs-number">640</span>, <span class="hljs-string">&quot;ymax&quot;</span>: <span class="hljs-number">368</span>},
        },
    ],
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function cW($){let n,c;return n=new P({props:{$$slots:{default:[uW]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function fW($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("facebook/detr-resnet-50-panoptic"),A=i("."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,`:
`),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"facebook/detr-resnet-50-panoptic"),D.forEach(s),A=u(T,"."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/facebook/detr-resnet-50-panoptic"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function pW($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/facebook/detr-resnet-50-panoptic"
def query(filename):
    with open(filename, "rb") as f:
        data = f.read()
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query("cats.jpg")`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/facebook/detr-resnet-50-panoptic&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">filename</span>):
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
        data = f.read()
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(<span class="hljs-string">&quot;cats.jpg&quot;</span>)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function hW($){let n,c;return n=new P({props:{$$slots:{default:[pW]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function dW($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
import fs from "fs";
async function query(filename) {
    const data = fs.readFileSync(filename);
    const response = await fetch(
        "https://api-inference.huggingface.co/models/facebook/detr-resnet-50-panoptic",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: data,
        }
    );
    const result = await response.json();
    return result;
}
query("cats.jpg").then((response) => {
    console.log(JSON.stringify(response));
});
// [{"score": 0.9094282388687134, "label": "blanket", "mask": "BASE64ENCODED_MASK"}, {"score": 0.9940965175628662, "label": "cat", "mask": "BASE64ENCODED_MASK"}, {"score": 0.9986692667007446, "label": "remote", "mask": "BASE64ENCODED_MASK"}, {"score": 0.9994757771492004, "label": "remote", "mask": "BASE64ENCODED_MASK"}, {"score": 0.9722068309783936, "label": "couch", "mask": "BASE64ENCODED_MASK"}, {"score": 0.9994235038757324, "label": "cat", "mask": "BASE64ENCODED_MASK"}]`,highlighted:`<span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
<span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> &quot;fs&quot;;
async <span class="hljs-keyword">function</span> query(filename) {
    const data = fs.readFileSync(filename);
    const response = await <span class="hljs-keyword">fetch</span>(
        &quot;https://api-inference.huggingface.co/models/facebook/detr-resnet-50-panoptic&quot;,
        {
            headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
            <span class="hljs-keyword">method</span>: &quot;POST&quot;,
            body: data,
        }
    );
    const result = await response.json();
    <span class="hljs-keyword">return</span> result;
}
query(&quot;cats.jpg&quot;).<span class="hljs-keyword">then</span>((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// [{&quot;score&quot;: <span class="hljs-number">0.9094282388687134</span>, &quot;label&quot;: &quot;blanket&quot;, &quot;mask&quot;: &quot;BASE64ENCODED_MASK&quot;}, {&quot;score&quot;: <span class="hljs-number">0.9940965175628662</span>, &quot;label&quot;: &quot;cat&quot;, &quot;mask&quot;: &quot;BASE64ENCODED_MASK&quot;}, {&quot;score&quot;: <span class="hljs-number">0.9986692667007446</span>, &quot;label&quot;: &quot;remote&quot;, &quot;mask&quot;: &quot;BASE64ENCODED_MASK&quot;}, {&quot;score&quot;: <span class="hljs-number">0.9994757771492004</span>, &quot;label&quot;: &quot;remote&quot;, &quot;mask&quot;: &quot;BASE64ENCODED_MASK&quot;}, {&quot;score&quot;: <span class="hljs-number">0.9722068309783936</span>, &quot;label&quot;: &quot;couch&quot;, &quot;mask&quot;: &quot;BASE64ENCODED_MASK&quot;}, {&quot;score&quot;: <span class="hljs-number">0.9994235038757324</span>, &quot;label&quot;: &quot;cat&quot;, &quot;mask&quot;: &quot;BASE64ENCODED_MASK&quot;}]`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function gW($){let n,c;return n=new P({props:{$$slots:{default:[dW]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function mW($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/facebook/detr-resnet-50-panoptic \\
        -X POST \\
        --data-binary '@cats.jpg' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"score": 0.9094282388687134, "label": "blanket", "mask": "BASE64ENCODED_MASK"}, {"score": 0.9940965175628662, "label": "cat", "mask": "BASE64ENCODED_MASK"}, {"score": 0.9986692667007446, "label": "remote", "mask": "BASE64ENCODED_MASK"}, {"score": 0.9994757771492004, "label": "remote", "mask": "BASE64ENCODED_MASK"}, {"score": 0.9722068309783936, "label": "couch", "mask": "BASE64ENCODED_MASK"}, {"score": 0.9994235038757324, "label": "cat", "mask": "BASE64ENCODED_MASK"}]`,highlighted:`curl https://api-inference.huggingface.co/models/facebook/detr-resnet-50-panoptic \\
        -X POST \\
        --data-binary <span class="hljs-string">&#x27;@cats.jpg&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># [{&quot;score&quot;: 0.9094282388687134, &quot;label&quot;: &quot;blanket&quot;, &quot;mask&quot;: &quot;BASE64ENCODED_MASK&quot;}, {&quot;score&quot;: 0.9940965175628662, &quot;label&quot;: &quot;cat&quot;, &quot;mask&quot;: &quot;BASE64ENCODED_MASK&quot;}, {&quot;score&quot;: 0.9986692667007446, &quot;label&quot;: &quot;remote&quot;, &quot;mask&quot;: &quot;BASE64ENCODED_MASK&quot;}, {&quot;score&quot;: 0.9994757771492004, &quot;label&quot;: &quot;remote&quot;, &quot;mask&quot;: &quot;BASE64ENCODED_MASK&quot;}, {&quot;score&quot;: 0.9722068309783936, &quot;label&quot;: &quot;couch&quot;, &quot;mask&quot;: &quot;BASE64ENCODED_MASK&quot;}, {&quot;score&quot;: 0.9994235038757324, &quot;label&quot;: &quot;cat&quot;, &quot;mask&quot;: &quot;BASE64ENCODED_MASK&quot;}]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function qW($){let n,c;return n=new P({props:{$$slots:{default:[mW]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function $W($){let n,c;return n=new R({props:{code:`import base64
from io import BytesIO
from PIL import Image
with Image.open("cats.jpg") as img:
    masks = [d["mask"] for d in data]
    self.assertEqual(img.size, (640, 480))
    mask_imgs = [Image.open(BytesIO(base64.b64decode(mask))) for mask in masks]
    for mask_img in mask_imgs:
        self.assertEqual(mask_img.size, img.size)
        self.assertEqual(mask_img.mode, "L")  # L (8-bit pixels, black and white)
    first_mask_img = mask_imgs[0]
    min_pxl_val, max_pxl_val = first_mask_img.getextrema()
    self.assertGreaterEqual(min_pxl_val, 0)
    self.assertLessEqual(max_pxl_val, 255)`,highlighted:`<span class="hljs-keyword">import</span> base64
<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO
<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-keyword">with</span> Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;cats.jpg&quot;</span>) <span class="hljs-keyword">as</span> img:
    masks = [d[<span class="hljs-string">&quot;mask&quot;</span>] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data]
    self.assertEqual(img.size, (<span class="hljs-number">640</span>, <span class="hljs-number">480</span>))
    mask_imgs = [Image.<span class="hljs-built_in">open</span>(BytesIO(base64.b64decode(mask))) <span class="hljs-keyword">for</span> mask <span class="hljs-keyword">in</span> masks]
    <span class="hljs-keyword">for</span> mask_img <span class="hljs-keyword">in</span> mask_imgs:
        self.assertEqual(mask_img.size, img.size)
        self.assertEqual(mask_img.mode, <span class="hljs-string">&quot;L&quot;</span>)  <span class="hljs-comment"># L (8-bit pixels, black and white)</span>
    first_mask_img = mask_imgs[<span class="hljs-number">0</span>]
    min_pxl_val, max_pxl_val = first_mask_img.getextrema()
    self.assertGreaterEqual(min_pxl_val, <span class="hljs-number">0</span>)
    self.assertLessEqual(max_pxl_val, <span class="hljs-number">255</span>)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function _W($){let n,c;return n=new P({props:{$$slots:{default:[$W]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function vW($){let n,c,t,d,q,k,A;return{c(){n=r("p"),c=r("strong"),t=i("Recommended model"),d=i(`:
`),q=r("a"),k=i("google/vit-base-patch16-224"),A=i("."),this.h()},l(j){n=o(j,"P",{});var T=l(n);c=o(T,"STRONG",{});var S=l(c);t=u(S,"Recommended model"),S.forEach(s),d=u(T,`:
`),q=o(T,"A",{href:!0,rel:!0});var D=l(q);k=u(D,"google/vit-base-patch16-224"),D.forEach(s),A=u(T,"."),T.forEach(s),this.h()},h(){h(q,"href","https://huggingface.co/google/vit-base-patch16-224"),h(q,"rel","nofollow")},m(j,T){m(j,n,T),e(n,c),e(c,t),e(n,d),e(n,q),e(q,k),e(n,A)},d(j){j&&s(n)}}}function EW($){let n,c;return n=new R({props:{code:`import json
import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://api-inference.huggingface.co/models/google/vit-base-patch16-224"
def query(filename):
    with open(filename, "rb") as f:
        data = f.read()
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query("cats.jpg")`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/google/vit-base-patch16-224&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">filename</span>):
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
        data = f.read()
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(<span class="hljs-string">&quot;cats.jpg&quot;</span>)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function yW($){let n,c;return n=new P({props:{$$slots:{default:[EW]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function wW($){let n,c;return n=new R({props:{code:`import fetch from "node-fetch";
import fs from "fs";
async function query(filename) {
    const data = fs.readFileSync(filename);
    const response = await fetch(
        "https://api-inference.huggingface.co/models/google/vit-base-patch16-224",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: data,
        }
    );
    const result = await response.json();
    return result;
}
query("cats.jpg").then((response) => {
    console.log(JSON.stringify(response));
});
// [{"score":0.9374412894248962,"label":"Egyptian cat"},{"score":0.03844260051846504,"label":"tabby, tabby cat"},{"score":0.014411412179470062,"label":"tiger cat"},{"score":0.003274323185905814,"label":"lynx, catamount"},{"score":0.0006795919616706669,"label":"Siamese cat, Siamese"}]`,highlighted:`<span class="hljs-keyword">import</span> <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">from</span> &quot;node-fetch&quot;;
<span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> &quot;fs&quot;;
async <span class="hljs-keyword">function</span> query(filename) {
    const data = fs.readFileSync(filename);
    const response = await <span class="hljs-keyword">fetch</span>(
        &quot;https://api-inference.huggingface.co/models/google/vit-base-patch16-224&quot;,
        {
            headers: { <span class="hljs-keyword">Authorization</span>: \`Bearer \${API_TOKEN}\` },
            <span class="hljs-keyword">method</span>: &quot;POST&quot;,
            body: data,
        }
    );
    const result = await response.json();
    <span class="hljs-keyword">return</span> result;
}
query(&quot;cats.jpg&quot;).<span class="hljs-keyword">then</span>((response) =&gt; {
    console.log(<span class="hljs-type">JSON</span>.stringify(response));
});
// [{&quot;score&quot;:<span class="hljs-number">0.9374412894248962</span>,&quot;label&quot;:&quot;Egyptian cat&quot;},{&quot;score&quot;:<span class="hljs-number">0.03844260051846504</span>,&quot;label&quot;:&quot;tabby, tabby cat&quot;},{&quot;score&quot;:<span class="hljs-number">0.014411412179470062</span>,&quot;label&quot;:&quot;tiger cat&quot;},{&quot;score&quot;:<span class="hljs-number">0.003274323185905814</span>,&quot;label&quot;:&quot;lynx, catamount&quot;},{&quot;score&quot;:<span class="hljs-number">0.0006795919616706669</span>,&quot;label&quot;:&quot;Siamese cat, Siamese&quot;}]`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function bW($){let n,c;return n=new P({props:{$$slots:{default:[wW]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function TW($){let n,c;return n=new R({props:{code:`curl https://api-inference.huggingface.co/models/google/vit-base-patch16-224 \\
        -X POST \\
        --data-binary '@cats.jpg' \\
        -H "Authorization: Bearer \${HF_API_TOKEN}"
# [{"score":0.9374412894248962,"label":"Egyptian cat"},{"score":0.03844260051846504,"label":"tabby, tabby cat"},{"score":0.014411412179470062,"label":"tiger cat"},{"score":0.003274323185905814,"label":"lynx, catamount"},{"score":0.0006795919616706669,"label":"Siamese cat, Siamese"}]`,highlighted:`curl https://api-inference.huggingface.co/models/google/vit-base-patch16-224 \\
        -X POST \\
        --data-binary <span class="hljs-string">&#x27;@cats.jpg&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${HF_API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># [{&quot;score&quot;:0.9374412894248962,&quot;label&quot;:&quot;Egyptian cat&quot;},{&quot;score&quot;:0.03844260051846504,&quot;label&quot;:&quot;tabby, tabby cat&quot;},{&quot;score&quot;:0.014411412179470062,&quot;label&quot;:&quot;tiger cat&quot;},{&quot;score&quot;:0.003274323185905814,&quot;label&quot;:&quot;lynx, catamount&quot;},{&quot;score&quot;:0.0006795919616706669,&quot;label&quot;:&quot;Siamese cat, Siamese&quot;}]</span>`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function jW($){let n,c;return n=new P({props:{$$slots:{default:[TW]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function kW($){let n,c;return n=new R({props:{code:`self.assertEqual(
    deep_round(data, 4),
    [
        {"score": 0.9374, "label": "Egyptian cat"},
        {"score": 0.0384, "label": "tabby, tabby cat"},
        {"score": 0.0144, "label": "tiger cat"},
        {"score": 0.0033, "label": "lynx, catamount"},
        {"score": 0.0007, "label": "Siamese cat, Siamese"},
    ],
)`,highlighted:`self.assertEqual(
    deep_round(data, <span class="hljs-number">4</span>),
    [
        {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.9374</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;Egyptian cat&quot;</span>},
        {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.0384</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;tabby, tabby cat&quot;</span>},
        {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.0144</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;tiger cat&quot;</span>},
        {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.0033</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;lynx, catamount&quot;</span>},
        {<span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0.0007</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;Siamese cat, Siamese&quot;</span>},
    ],
)`}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p:O,i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function AW($){let n,c;return n=new P({props:{$$slots:{default:[kW]},$$scope:{ctx:$}}}),{c(){_(n.$$.fragment)},l(t){v(n.$$.fragment,t)},m(t,d){E(n,t,d),c=!0},p(t,d){const q={};d&2&&(q.$$scope={dirty:d,ctx:t}),n.$set(q)},i(t){c||(y(n.$$.fragment,t),c=!0)},o(t){w(n.$$.fragment,t),c=!1},d(t){b(n,t)}}}function DW($){let n,c,t,d,q,k,A,j,T,S,D,ne,Re,Q,Y,ot,Ri,Va,Se,Kb,L_,Si,Fb,U_,lt,Zx,z_,it,eI,M_,Ne,ut,cd,Xa,Jb,fd,Wb,K_,Ni,Yb,F_,ct,J_,Qa,Vb,Za,Xb,W_,xi,Qb,Y_,ft,V_,Ii,Zb,X_,pt,pd,en,Hi,e3,t3,hd,s3,M,tn,sn,dd,a3,n3,r3,Bi,o3,l3,an,nn,gd,i3,u3,c3,Ci,f3,p3,rn,Gi,h3,d3,he,g3,md,m3,q3,qd,$3,_3,v3,on,Li,E3,y3,ht,w3,$d,b3,T3,j3,ln,Ui,_d,k3,A3,zi,D3,O3,un,Mi,P3,R3,dt,S3,vd,N3,x3,I3,cn,Ki,H3,B3,gt,C3,Ed,G3,L3,U3,fn,Fi,z3,M3,mt,K3,yd,F3,J3,Q_,Ji,W3,Z_,Wi,Y3,e1,qt,t1,$t,wd,pn,Yi,V3,X3,bd,Q3,xe,hn,Vi,Td,Z3,eT,Xi,tT,sT,dn,Qi,jd,aT,nT,Zi,rT,oT,gn,eu,kd,lT,iT,_t,uT,Ad,cT,fT,s1,Ie,vt,Dd,mn,pT,Od,hT,a1,tu,dT,n1,Et,r1,qn,gT,$n,mT,o1,su,qT,l1,yt,i1,au,$T,u1,wt,Pd,_n,nu,_T,vT,Rd,ET,Z,vn,En,Sd,yT,wT,bT,ru,TT,jT,yn,ou,Nd,kT,AT,lu,DT,OT,wn,iu,PT,RT,bt,ST,xd,NT,xT,IT,bn,uu,HT,BT,Tt,CT,Id,GT,LT,UT,Tn,cu,zT,MT,jt,KT,Hd,FT,JT,c1,fu,WT,f1,kt,Bd,jn,pu,YT,VT,Cd,XT,Gd,kn,hu,Ld,QT,ZT,du,ej,p1,He,At,Ud,An,tj,zd,sj,h1,Dt,aj,gu,nj,rj,d1,Ot,g1,Dn,oj,On,lj,m1,mu,ij,q1,Pt,$1,qu,uj,_1,Rt,Md,Pn,$u,cj,fj,Kd,pj,G,Rn,Sn,Fd,hj,dj,gj,_u,mj,qj,Nn,vu,Jd,$j,_j,Eu,vj,Ej,xn,yu,yj,wj,de,bj,Wd,Tj,jj,Yd,kj,Aj,Dj,In,wu,Oj,Pj,ge,Rj,Vd,Sj,Nj,Xd,xj,Ij,Hj,Hn,bu,Bj,Cj,me,Gj,Qd,Lj,Uj,Zd,zj,Mj,Kj,Bn,Tu,Fj,Jj,re,Wj,eg,Yj,Vj,tg,Xj,Qj,sg,Zj,e4,t4,Cn,ju,s4,a4,qe,n4,ag,r4,o4,ng,l4,i4,u4,Gn,ku,c4,f4,St,p4,rg,h4,d4,g4,Ln,Au,m4,q4,Nt,$4,og,_4,v4,E4,Un,Du,lg,y4,w4,Ou,b4,T4,zn,Pu,j4,k4,xt,A4,ig,D4,O4,P4,Mn,Ru,R4,S4,It,N4,ug,x4,I4,H4,Kn,Su,B4,C4,Ht,G4,cg,L4,U4,v1,Nu,z4,E1,Bt,fg,Fn,xu,M4,K4,pg,F4,hg,Jn,Iu,dg,J4,W4,Hu,Y4,y1,Be,Ct,gg,Wn,V4,mg,X4,w1,Bu,Q4,b1,Gt,T1,Yn,Z4,Vn,ek,j1,Cu,tk,k1,Lt,A1,Gu,sk,D1,Ut,qg,Xn,Lu,ak,nk,$g,rk,N,Qn,Zn,_g,ok,lk,ik,vg,uk,er,Uu,ck,fk,zu,pk,hk,tr,Mu,dk,gk,Ku,mk,qk,sr,Fu,$k,_k,zt,vk,Eg,Ek,yk,wk,ar,Ju,yg,bk,Tk,Wu,jk,kk,nr,Yu,Ak,Dk,$e,Ok,wg,Pk,Rk,bg,Sk,Nk,xk,rr,Vu,Ik,Hk,_e,Bk,Tg,Ck,Gk,jg,Lk,Uk,zk,or,Xu,Mk,Kk,ve,Fk,kg,Jk,Wk,Ag,Yk,Vk,Xk,lr,Qu,Qk,Zk,oe,e5,Dg,t5,s5,Og,a5,n5,Pg,r5,o5,l5,ir,Zu,i5,u5,Ee,c5,Rg,f5,p5,Sg,h5,d5,g5,ur,ec,m5,q5,Mt,$5,Ng,_5,v5,E5,cr,tc,y5,w5,Kt,b5,xg,T5,j5,k5,fr,sc,Ig,A5,D5,ac,O5,P5,pr,nc,R5,S5,Ft,N5,Hg,x5,I5,H5,hr,rc,B5,C5,Jt,G5,Bg,L5,U5,z5,dr,oc,M5,K5,Wt,F5,Cg,J5,W5,O1,lc,Y5,P1,Yt,Gg,gr,ic,V5,X5,Lg,Q5,ie,mr,uc,Ug,Z5,e6,cc,t6,s6,qr,fc,zg,a6,n6,pc,r6,o6,$r,hc,l6,i6,dc,u6,c6,_r,gc,f6,p6,mc,h6,R1,Ce,Vt,Mg,vr,d6,Kg,g6,S1,qc,m6,N1,Xt,x1,Er,q6,yr,$6,I1,$c,_6,H1,Qt,B1,_c,v6,C1,Zt,Fg,wr,vc,E6,y6,Jg,w6,F,br,Tr,Wg,b6,T6,j6,Yg,k6,jr,Ec,A6,D6,yc,O6,P6,kr,wc,R6,S6,bc,N6,x6,Ar,Tc,Vg,I6,H6,jc,B6,C6,Dr,kc,G6,L6,es,U6,Xg,z6,M6,K6,Or,Ac,F6,J6,ts,W6,Qg,Y6,V6,X6,Pr,Dc,Q6,Z6,ss,e7,Zg,t7,s7,G1,Oc,a7,L1,as,U1,ns,em,Rr,Pc,n7,r7,tm,o7,ue,Sr,Rc,sm,l7,i7,Sc,u7,c7,Nr,Nc,am,f7,p7,xc,h7,d7,xr,Ic,nm,g7,m7,Hc,q7,$7,Ir,Bc,rm,_7,v7,Cc,E7,z1,Ge,rs,om,Hr,y7,lm,w7,M1,Gc,b7,K1,os,F1,Le,T7,Br,j7,k7,Cr,A7,J1,Lc,D7,W1,ls,Y1,Uc,O7,V1,zc,P7,X1,is,Q1,us,im,Gr,Mc,R7,S7,um,N7,ce,Lr,Kc,cm,x7,I7,Fc,H7,B7,Ur,Jc,fm,C7,G7,Wc,L7,U7,zr,Yc,pm,z7,M7,cs,K7,hm,F7,J7,W7,Mr,Vc,dm,Y7,V7,fs,X7,gm,Q7,Z7,Z1,Ue,ps,mm,Kr,e9,qm,t9,e2,Xc,s9,t2,hs,s2,Fr,a9,Jr,n9,a2,Qc,r9,n2,ds,r2,Zc,o9,o2,gs,$m,Wr,ef,l9,i9,_m,u9,ee,Yr,Vr,vm,c9,f9,p9,tf,h9,d9,Xr,sf,Em,g9,m9,af,q9,$9,Qr,nf,_9,v9,ms,E9,ym,y9,w9,b9,Zr,rf,T9,j9,qs,k9,wm,A9,D9,O9,eo,of,P9,R9,$s,S9,bm,N9,x9,l2,lf,I9,i2,_s,u2,vs,Tm,to,uf,H9,B9,jm,C9,so,ao,cf,km,G9,L9,ff,U9,z9,no,pf,Am,M9,K9,hf,F9,c2,ze,Es,Dm,ro,J9,Om,W9,f2,oo,Y9,df,V9,p2,Me,ys,Pm,lo,X9,Rm,Q9,h2,gf,Z9,d2,ws,g2,Ke,e8,io,t8,s8,uo,a8,m2,mf,n8,q2,bs,$2,qf,r8,_2,Ts,Sm,co,$f,o8,l8,Nm,i8,J,fo,po,xm,u8,c8,f8,_f,p8,h8,ho,vf,Im,d8,g8,Ef,m8,q8,go,yf,$8,_8,x,v8,Hm,E8,y8,w8,b8,Bm,T8,j8,k8,A8,Cm,D8,O8,P8,R8,Gm,S8,N8,Lm,x8,I8,H8,B8,Um,C8,G8,zm,L8,U8,z8,M8,Mm,K8,F8,Km,J8,W8,Y8,mo,wf,Fm,V8,X8,bf,Q8,Z8,qo,Tf,eA,tA,js,sA,Jm,aA,nA,rA,$o,jf,oA,lA,ks,iA,Wm,uA,cA,fA,_o,kf,pA,hA,As,dA,Ym,gA,mA,v2,Af,qA,E2,Ds,y2,Os,Vm,vo,Df,$A,_A,Xm,vA,te,Eo,Of,Qm,EA,yA,Pf,wA,bA,yo,Rf,Zm,TA,jA,Sf,kA,AA,wo,Nf,eq,DA,OA,xf,PA,RA,bo,If,tq,SA,NA,Ps,xA,sq,IA,HA,BA,To,Hf,aq,CA,GA,Rs,LA,nq,UA,zA,w2,Fe,Ss,rq,jo,MA,oq,KA,b2,Bf,FA,T2,Ns,j2,ko,JA,Ao,WA,k2,Cf,YA,A2,xs,D2,Gf,VA,O2,Is,lq,Do,Lf,XA,QA,iq,ZA,I,Oo,Po,uq,eD,tD,sD,Uf,aD,nD,Ro,zf,cq,rD,oD,Mf,lD,iD,So,Kf,uD,cD,ye,fD,fq,pD,hD,pq,dD,gD,mD,No,Ff,qD,$D,le,_D,hq,vD,ED,dq,yD,wD,gq,bD,TD,jD,xo,Jf,kD,AD,we,DD,mq,OD,PD,qq,RD,SD,ND,Io,Wf,xD,ID,Hs,HD,$q,BD,CD,GD,Ho,Yf,LD,UD,be,zD,_q,MD,KD,vq,FD,JD,WD,Bo,Vf,YD,VD,Te,XD,Eq,QD,ZD,yq,eO,tO,sO,Co,Xf,aO,nO,je,rO,wq,oO,lO,bq,iO,uO,cO,Go,Qf,fO,pO,Bs,hO,Tq,dO,gO,mO,Lo,Zf,qO,$O,Cs,_O,jq,vO,EO,yO,Uo,ep,kq,wO,bO,tp,TO,jO,zo,sp,kO,AO,Gs,DO,Aq,OO,PO,RO,Mo,ap,SO,NO,Ls,xO,Dq,IO,HO,BO,Ko,np,CO,GO,Us,LO,Oq,UO,zO,P2,rp,MO,R2,zs,S2,Ms,Pq,Fo,op,KO,FO,Rq,JO,Sq,Jo,lp,Nq,WO,YO,ip,VO,N2,Je,Ks,xq,Wo,XO,Iq,QO,x2,Fs,ZO,up,eP,tP,I2,We,Js,Hq,Yo,sP,Bq,aP,H2,cp,nP,B2,Ws,C2,Vo,rP,Xo,oP,G2,fp,lP,L2,Ys,U2,pp,iP,z2,Vs,Cq,Qo,hp,uP,cP,Gq,fP,se,Zo,el,Lq,pP,hP,dP,dp,gP,mP,tl,gp,Uq,qP,$P,mp,_P,vP,sl,qp,EP,yP,Xs,wP,zq,bP,TP,jP,al,$p,kP,AP,Qs,DP,Mq,OP,PP,RP,nl,_p,SP,NP,Zs,xP,Kq,IP,HP,M2,vp,BP,K2,ea,F2,ta,Fq,rl,Ep,CP,GP,Jq,LP,fe,ol,yp,Wq,UP,zP,wp,MP,KP,ll,bp,Yq,FP,JP,Tp,WP,YP,il,jp,Vq,VP,XP,kp,QP,ZP,ul,Ap,Xq,eR,tR,Dp,sR,J2,Ye,sa,Qq,cl,aR,Zq,nR,W2,Op,rR,Y2,aa,V2,na,X2,pe,oR,fl,lR,iR,pl,uR,cR,hl,fR,Q2,Pp,pR,Z2,ra,ev,Rp,hR,tv,oa,e$,dl,Sp,dR,gR,t$,mR,s$,gl,ml,a$,qR,$R,_R,Np,vR,sv,xp,ER,av,Ip,yR,nv,la,rv,ia,n$,ql,Hp,wR,bR,r$,TR,o$,$l,Bp,l$,jR,kR,Cp,AR,ov,Ve,ua,i$,_l,DR,u$,OR,lv,Gp,PR,iv,ca,uv,Xe,RR,vl,SR,NR,El,xR,cv,Lp,IR,fv,fa,c$,yl,Up,HR,BR,f$,CR,ae,wl,bl,p$,GR,LR,UR,zp,zR,MR,Tl,Mp,h$,KR,FR,Kp,JR,WR,jl,Fp,YR,VR,pa,XR,d$,QR,ZR,eS,kl,Jp,tS,sS,ha,aS,g$,nS,rS,oS,Al,Wp,lS,iS,da,uS,m$,cS,fS,pv,Yp,pS,hv,ga,q$,Dl,Vp,hS,dS,$$,gS,_$,Ol,Xp,v$,mS,qS,Qp,$S,dv,Zp,_S,gv,Qe,ma,E$,Pl,vS,y$,ES,mv,eh,yS,qv,qa,$v,Ze,wS,Rl,bS,TS,Sl,jS,_v,th,kS,vv,$a,Ev,sh,AS,yv,_a,w$,Nl,ah,DS,OS,b$,PS,T$,xl,Il,j$,RS,SS,NS,nh,xS,wv,rh,IS,bv,va,Tv,Ea,k$,Hl,oh,HS,BS,A$,CS,Bl,Cl,lh,D$,GS,LS,ih,US,zS,Gl,uh,O$,MS,KS,ch,FS,jv,et,ya,P$,Ll,JS,R$,WS,kv,fh,YS,Av,wa,Dv,Ul,VS,zl,XS,Ov,ph,QS,Pv,ba,Rv,Ta,ZS,Ml,eN,tN,Sv,ja,S$,Kl,hh,sN,aN,N$,nN,x$,Fl,Jl,I$,rN,oN,lN,dh,iN,Nv,gh,uN,xv,ka,Iv,Aa,H$,Wl,mh,cN,fN,B$,pN,tt,Yl,qh,C$,hN,dN,$h,gN,mN,Vl,_h,G$,qN,$N,vh,_N,vN,Xl,Eh,L$,EN,yN,yh,wN,Hv,st,Da,U$,Ql,bN,z$,TN,Bv,wh,jN,Cv,Oa,Gv,Zl,kN,ei,AN,Lv,bh,DN,Uv,Pa,zv,Ra,ON,ti,PN,RN,Mv,Sa,M$,si,Th,SN,NN,K$,xN,F$,ai,ni,J$,IN,HN,BN,jh,CN,Kv,kh,GN,Fv,Na,Jv,xa,W$,ri,Ah,LN,UN,Y$,zN,at,oi,Dh,V$,MN,KN,Oh,FN,JN,li,Ph,X$,WN,YN,Rh,VN,XN,ii,Sh,Q$,QN,ZN,Nh,ex,Wv,nt,Ia,Z$,ui,tx,e_,sx,Yv,xh,ax,Vv,Ha,Xv,ci,nx,fi,rx,Qv,Ih,ox,Zv,Ba,eE,Ca,lx,pi,ix,ux,tE,Ga,t_,hi,Hh,cx,fx,s_,px,a_,di,gi,n_,hx,dx,gx,Bh,mx,sE,Ch,qx,aE,La,nE,Ua,r_,mi,Gh,$x,_x,o_,vx,qi,$i,Lh,l_,Ex,yx,Uh,wx,bx,_i,zh,i_,Tx,jx,Mh,kx,rE;return k=new z({}),Q=new z({}),Xa=new z({}),ct=new W({props:{$$slots:{default:[oF]},$$scope:{ctx:$}}}),ft=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[pF],js:[cF],python:[iF]},$$scope:{ctx:$}}}),qt=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[dF]},$$scope:{ctx:$}}}),mn=new z({}),Et=new W({props:{$$slots:{default:[gF]},$$scope:{ctx:$}}}),yt=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[EF],js:[_F],python:[qF]},$$scope:{ctx:$}}}),An=new z({}),Ot=new W({props:{$$slots:{default:[yF]},$$scope:{ctx:$}}}),Pt=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[AF],js:[jF],python:[bF]},$$scope:{ctx:$}}}),Wn=new z({}),Gt=new W({props:{$$slots:{default:[DF]},$$scope:{ctx:$}}}),Lt=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[xF],js:[SF],python:[PF]},$$scope:{ctx:$}}}),vr=new z({}),Xt=new W({props:{$$slots:{default:[IF]},$$scope:{ctx:$}}}),Qt=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[UF],js:[GF],python:[BF]},$$scope:{ctx:$}}}),as=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[MF]},$$scope:{ctx:$}}}),Hr=new z({}),os=new W({props:{$$slots:{default:[KF]},$$scope:{ctx:$}}}),ls=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[XF],js:[YF],python:[JF]},$$scope:{ctx:$}}}),is=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[ZF]},$$scope:{ctx:$}}}),Kr=new z({}),hs=new W({props:{$$slots:{default:[eJ]},$$scope:{ctx:$}}}),ds=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[oJ],js:[nJ],python:[sJ]},$$scope:{ctx:$}}}),_s=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[iJ]},$$scope:{ctx:$}}}),ro=new z({}),lo=new z({}),ws=new W({props:{$$slots:{default:[uJ]},$$scope:{ctx:$}}}),bs=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[gJ],js:[hJ],python:[fJ]},$$scope:{ctx:$}}}),Ds=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[qJ]},$$scope:{ctx:$}}}),jo=new z({}),Ns=new W({props:{$$slots:{default:[$J]},$$scope:{ctx:$}}}),xs=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[bJ],js:[yJ],python:[vJ]},$$scope:{ctx:$}}}),zs=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[jJ]},$$scope:{ctx:$}}}),Wo=new z({}),Yo=new z({}),Ws=new W({props:{$$slots:{default:[kJ]},$$scope:{ctx:$}}}),Ys=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[SJ],js:[PJ],python:[DJ]},$$scope:{ctx:$}}}),ea=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[xJ]},$$scope:{ctx:$}}}),cl=new z({}),aa=new W({props:{$$slots:{default:[IJ]},$$scope:{ctx:$}}}),na=new W({props:{$$slots:{default:[HJ]},$$scope:{ctx:$}}}),ra=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[zJ],js:[LJ],python:[CJ]},$$scope:{ctx:$}}}),la=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[KJ]},$$scope:{ctx:$}}}),_l=new z({}),ca=new W({props:{$$slots:{default:[FJ]},$$scope:{ctx:$}}}),Pl=new z({}),qa=new W({props:{$$slots:{default:[JJ]},$$scope:{ctx:$}}}),$a=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[ZJ],js:[XJ],python:[YJ]},$$scope:{ctx:$}}}),va=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[tW]},$$scope:{ctx:$}}}),Ll=new z({}),wa=new W({props:{$$slots:{default:[sW]},$$scope:{ctx:$}}}),ba=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[iW],js:[oW],python:[nW]},$$scope:{ctx:$}}}),ka=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[cW]},$$scope:{ctx:$}}}),Ql=new z({}),Oa=new W({props:{$$slots:{default:[fW]},$$scope:{ctx:$}}}),Pa=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[qW],js:[gW],python:[hW]},$$scope:{ctx:$}}}),Na=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[_W]},$$scope:{ctx:$}}}),ui=new z({}),Ha=new W({props:{$$slots:{default:[vW]},$$scope:{ctx:$}}}),Ba=new L({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[jW],js:[bW],python:[yW]},$$scope:{ctx:$}}}),La=new L({props:{python:!0,js:!0,curl:!0,$$slots:{python:[AW]},$$scope:{ctx:$}}}),{c(){n=r("meta"),c=f(),t=r("h1"),d=r("a"),q=r("span"),_(k.$$.fragment),A=f(),j=r("span"),T=i("Detailed parameters"),S=f(),D=r("h2"),ne=r("a"),Re=r("span"),_(Q.$$.fragment),Y=f(),ot=r("span"),Ri=i("Which task is used by this model ?"),Va=f(),Se=r("p"),Kb=i(`In general the \u{1F917} Hosted API Inference accepts a simple string as an
input. However, more advanced usage depends on the \u201Ctask\u201D that the
model solves.`),L_=f(),Si=r("p"),Fb=i("The \u201Ctask\u201D of a model is defined here on it\u2019s model page:"),U_=f(),lt=r("img"),z_=f(),it=r("img"),M_=f(),Ne=r("h2"),ut=r("a"),cd=r("span"),_(Xa.$$.fragment),Jb=f(),fd=r("span"),Wb=i("Zero-shot classification task"),K_=f(),Ni=r("p"),Yb=i(`This task is super useful to try out classification with zero code,
you simply pass a sentence/paragraph and the possible labels for that
sentence, and you get a result.`),F_=f(),_(ct.$$.fragment),J_=f(),Qa=r("p"),Vb=i("Available with: "),Za=r("a"),Xb=i("\u{1F917} Transformers"),W_=f(),xi=r("p"),Qb=i("Request:"),Y_=f(),_(ft.$$.fragment),V_=f(),Ii=r("p"),Zb=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),X_=f(),pt=r("table"),pd=r("thead"),en=r("tr"),Hi=r("th"),e3=i("All parameters"),t3=f(),hd=r("th"),s3=f(),M=r("tbody"),tn=r("tr"),sn=r("td"),dd=r("strong"),a3=i("inputs"),n3=i(" (required)"),r3=f(),Bi=r("td"),o3=i("a string or list of strings"),l3=f(),an=r("tr"),nn=r("td"),gd=r("strong"),i3=i("parameters"),u3=i(" (required)"),c3=f(),Ci=r("td"),f3=i("a dict containing the following keys:"),p3=f(),rn=r("tr"),Gi=r("td"),h3=i("candidate_labels (required)"),d3=f(),he=r("td"),g3=i("a list of strings that are potential classes for "),md=r("code"),m3=i("inputs"),q3=i(". (max 10 candidate_labels, for more, simply run multiple requests, results are going to be misleading if using too many candidate_labels anyway. If you want to keep the exact same, you can simply run "),qd=r("code"),$3=i("multi_label=True"),_3=i(" and do the scaling on your end. )"),v3=f(),on=r("tr"),Li=r("td"),E3=i("multi_label"),y3=f(),ht=r("td"),w3=i("(Default: "),$d=r("code"),b3=i("false"),T3=i(") Boolean that is set to True if classes can overlap"),j3=f(),ln=r("tr"),Ui=r("td"),_d=r("strong"),k3=i("options"),A3=f(),zi=r("td"),D3=i("a dict containing the following keys:"),O3=f(),un=r("tr"),Mi=r("td"),P3=i("use_gpu"),R3=f(),dt=r("td"),S3=i("(Default: "),vd=r("code"),N3=i("false"),x3=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),I3=f(),cn=r("tr"),Ki=r("td"),H3=i("use_cache"),B3=f(),gt=r("td"),C3=i("(Default: "),Ed=r("code"),G3=i("true"),L3=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),U3=f(),fn=r("tr"),Fi=r("td"),z3=i("wait_for_model"),M3=f(),mt=r("td"),K3=i("(Default: "),yd=r("code"),F3=i("false"),J3=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),Q_=f(),Ji=r("p"),W3=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),Z_=f(),Wi=r("p"),Y3=i("Response:"),e1=f(),_(qt.$$.fragment),t1=f(),$t=r("table"),wd=r("thead"),pn=r("tr"),Yi=r("th"),V3=i("Returned values"),X3=f(),bd=r("th"),Q3=f(),xe=r("tbody"),hn=r("tr"),Vi=r("td"),Td=r("strong"),Z3=i("sequence"),eT=f(),Xi=r("td"),tT=i("The string sent as an input"),sT=f(),dn=r("tr"),Qi=r("td"),jd=r("strong"),aT=i("labels"),nT=f(),Zi=r("td"),rT=i("The list of strings for labels that you sent (in order)"),oT=f(),gn=r("tr"),eu=r("td"),kd=r("strong"),lT=i("scores"),iT=f(),_t=r("td"),uT=i("a list of floats that correspond the the probability of label, in the same order as "),Ad=r("code"),cT=i("labels"),fT=i("."),s1=f(),Ie=r("h2"),vt=r("a"),Dd=r("span"),_(mn.$$.fragment),pT=f(),Od=r("span"),hT=i("Translation task"),a1=f(),tu=r("p"),dT=i("This task is well known to translate text from one language to another"),n1=f(),_(Et.$$.fragment),r1=f(),qn=r("p"),gT=i("Available with: "),$n=r("a"),mT=i("\u{1F917} Transformers"),o1=f(),su=r("p"),qT=i("Example:"),l1=f(),_(yt.$$.fragment),i1=f(),au=r("p"),$T=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),u1=f(),wt=r("table"),Pd=r("thead"),_n=r("tr"),nu=r("th"),_T=i("All parameters"),vT=f(),Rd=r("th"),ET=f(),Z=r("tbody"),vn=r("tr"),En=r("td"),Sd=r("strong"),yT=i("inputs"),wT=i(" (required)"),bT=f(),ru=r("td"),TT=i("a string to be translated in the original languages"),jT=f(),yn=r("tr"),ou=r("td"),Nd=r("strong"),kT=i("options"),AT=f(),lu=r("td"),DT=i("a dict containing the following keys:"),OT=f(),wn=r("tr"),iu=r("td"),PT=i("use_gpu"),RT=f(),bt=r("td"),ST=i("(Default: "),xd=r("code"),NT=i("false"),xT=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),IT=f(),bn=r("tr"),uu=r("td"),HT=i("use_cache"),BT=f(),Tt=r("td"),CT=i("(Default: "),Id=r("code"),GT=i("true"),LT=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),UT=f(),Tn=r("tr"),cu=r("td"),zT=i("wait_for_model"),MT=f(),jt=r("td"),KT=i("(Default: "),Hd=r("code"),FT=i("false"),JT=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),c1=f(),fu=r("p"),WT=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),f1=f(),kt=r("table"),Bd=r("thead"),jn=r("tr"),pu=r("th"),YT=i("Returned values"),VT=f(),Cd=r("th"),XT=f(),Gd=r("tbody"),kn=r("tr"),hu=r("td"),Ld=r("strong"),QT=i("translation_text"),ZT=f(),du=r("td"),ej=i("The string after translation"),p1=f(),He=r("h2"),At=r("a"),Ud=r("span"),_(An.$$.fragment),tj=f(),zd=r("span"),sj=i("Summarization task"),h1=f(),Dt=r("p"),aj=i(`This task is well known to summarize longer text into shorter text.
Be careful, some models have a maximum length of input. That means that
the summary cannot handle full books for instance. Be careful when
choosing your model. If you want to discuss your summarization needs,
please get in touch with us: <`),gu=r("a"),nj=i("api-enterprise@huggingface.co"),rj=i(">"),d1=f(),_(Ot.$$.fragment),g1=f(),Dn=r("p"),oj=i("Available with: "),On=r("a"),lj=i("\u{1F917} Transformers"),m1=f(),mu=r("p"),ij=i("Example:"),q1=f(),_(Pt.$$.fragment),$1=f(),qu=r("p"),uj=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),_1=f(),Rt=r("table"),Md=r("thead"),Pn=r("tr"),$u=r("th"),cj=i("All parameters"),fj=f(),Kd=r("th"),pj=f(),G=r("tbody"),Rn=r("tr"),Sn=r("td"),Fd=r("strong"),hj=i("inputs"),dj=i(" (required)"),gj=f(),_u=r("td"),mj=i("a string to be summarized"),qj=f(),Nn=r("tr"),vu=r("td"),Jd=r("strong"),$j=i("parameters"),_j=f(),Eu=r("td"),vj=i("a dict containing the following keys:"),Ej=f(),xn=r("tr"),yu=r("td"),yj=i("min_length"),wj=f(),de=r("td"),bj=i("(Default: "),Wd=r("code"),Tj=i("None"),jj=i("). Integer to define the minimum length "),Yd=r("strong"),kj=i("in tokens"),Aj=i(" of the output summary."),Dj=f(),In=r("tr"),wu=r("td"),Oj=i("max_length"),Pj=f(),ge=r("td"),Rj=i("(Default: "),Vd=r("code"),Sj=i("None"),Nj=i("). Integer to define the maximum length "),Xd=r("strong"),xj=i("in tokens"),Ij=i(" of the output summary."),Hj=f(),Hn=r("tr"),bu=r("td"),Bj=i("top_k"),Cj=f(),me=r("td"),Gj=i("(Default: "),Qd=r("code"),Lj=i("None"),Uj=i("). Integer to define the top tokens considered within the "),Zd=r("code"),zj=i("sample"),Mj=i(" operation to create new text."),Kj=f(),Bn=r("tr"),Tu=r("td"),Fj=i("top_p"),Jj=f(),re=r("td"),Wj=i("(Default: "),eg=r("code"),Yj=i("None"),Vj=i("). Float to define the tokens that are within the "),tg=r("code"),Xj=i("sample"),Qj=i(" operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than "),sg=r("code"),Zj=i("top_p"),e4=i("."),t4=f(),Cn=r("tr"),ju=r("td"),s4=i("temperature"),a4=f(),qe=r("td"),n4=i("(Default: "),ag=r("code"),r4=i("1.0"),o4=i("). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means "),ng=r("code"),l4=i("100.0"),i4=i(" is getting closer to uniform probability."),u4=f(),Gn=r("tr"),ku=r("td"),c4=i("repetition_penalty"),f4=f(),St=r("td"),p4=i("(Default: "),rg=r("code"),h4=i("None"),d4=i("). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."),g4=f(),Ln=r("tr"),Au=r("td"),m4=i("max_time"),q4=f(),Nt=r("td"),$4=i("(Default: "),og=r("code"),_4=i("None"),v4=i("). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit."),E4=f(),Un=r("tr"),Du=r("td"),lg=r("strong"),y4=i("options"),w4=f(),Ou=r("td"),b4=i("a dict containing the following keys:"),T4=f(),zn=r("tr"),Pu=r("td"),j4=i("use_gpu"),k4=f(),xt=r("td"),A4=i("(Default: "),ig=r("code"),D4=i("false"),O4=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),P4=f(),Mn=r("tr"),Ru=r("td"),R4=i("use_cache"),S4=f(),It=r("td"),N4=i("(Default: "),ug=r("code"),x4=i("true"),I4=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),H4=f(),Kn=r("tr"),Su=r("td"),B4=i("wait_for_model"),C4=f(),Ht=r("td"),G4=i("(Default: "),cg=r("code"),L4=i("false"),U4=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),v1=f(),Nu=r("p"),z4=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),E1=f(),Bt=r("table"),fg=r("thead"),Fn=r("tr"),xu=r("th"),M4=i("Returned values"),K4=f(),pg=r("th"),F4=f(),hg=r("tbody"),Jn=r("tr"),Iu=r("td"),dg=r("strong"),J4=i("summarization_text"),W4=f(),Hu=r("td"),Y4=i("The string after translation"),y1=f(),Be=r("h2"),Ct=r("a"),gg=r("span"),_(Wn.$$.fragment),V4=f(),mg=r("span"),X4=i("Conversational task"),w1=f(),Bu=r("p"),Q4=i(`This task corresponds to any chatbot like structure. Models tend to have
shorter max_length, so please check with caution when using a given
model if you need long range dependency or not.`),b1=f(),_(Gt.$$.fragment),T1=f(),Yn=r("p"),Z4=i("Available with: "),Vn=r("a"),ek=i("\u{1F917} Transformers"),j1=f(),Cu=r("p"),tk=i("Example:"),k1=f(),_(Lt.$$.fragment),A1=f(),Gu=r("p"),sk=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),D1=f(),Ut=r("table"),qg=r("thead"),Xn=r("tr"),Lu=r("th"),ak=i("All parameters"),nk=f(),$g=r("th"),rk=f(),N=r("tbody"),Qn=r("tr"),Zn=r("td"),_g=r("strong"),ok=i("inputs"),lk=i(" (required)"),ik=f(),vg=r("td"),uk=f(),er=r("tr"),Uu=r("td"),ck=i("text (required)"),fk=f(),zu=r("td"),pk=i("The last input from the user in the conversation."),hk=f(),tr=r("tr"),Mu=r("td"),dk=i("generated_responses"),gk=f(),Ku=r("td"),mk=i("A list of strings corresponding to the earlier replies from the model."),qk=f(),sr=r("tr"),Fu=r("td"),$k=i("past_user_inputs"),_k=f(),zt=r("td"),vk=i("A list of strings corresponding to the earlier replies from the user. Should be of the same length of "),Eg=r("code"),Ek=i("generated_responses"),yk=i("."),wk=f(),ar=r("tr"),Ju=r("td"),yg=r("strong"),bk=i("parameters"),Tk=f(),Wu=r("td"),jk=i("a dict containing the following keys:"),kk=f(),nr=r("tr"),Yu=r("td"),Ak=i("min_length"),Dk=f(),$e=r("td"),Ok=i("(Default: "),wg=r("code"),Pk=i("None"),Rk=i("). Integer to define the minimum length "),bg=r("strong"),Sk=i("in tokens"),Nk=i(" of the output summary."),xk=f(),rr=r("tr"),Vu=r("td"),Ik=i("max_length"),Hk=f(),_e=r("td"),Bk=i("(Default: "),Tg=r("code"),Ck=i("None"),Gk=i("). Integer to define the maximum length "),jg=r("strong"),Lk=i("in tokens"),Uk=i(" of the output summary."),zk=f(),or=r("tr"),Xu=r("td"),Mk=i("top_k"),Kk=f(),ve=r("td"),Fk=i("(Default: "),kg=r("code"),Jk=i("None"),Wk=i("). Integer to define the top tokens considered within the "),Ag=r("code"),Yk=i("sample"),Vk=i(" operation to create new text."),Xk=f(),lr=r("tr"),Qu=r("td"),Qk=i("top_p"),Zk=f(),oe=r("td"),e5=i("(Default: "),Dg=r("code"),t5=i("None"),s5=i("). Float to define the tokens that are within the "),Og=r("code"),a5=i("sample"),n5=i(" operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than "),Pg=r("code"),r5=i("top_p"),o5=i("."),l5=f(),ir=r("tr"),Zu=r("td"),i5=i("temperature"),u5=f(),Ee=r("td"),c5=i("(Default: "),Rg=r("code"),f5=i("1.0"),p5=i("). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means "),Sg=r("code"),h5=i("100.0"),d5=i(" is getting closer to uniform probability."),g5=f(),ur=r("tr"),ec=r("td"),m5=i("repetition_penalty"),q5=f(),Mt=r("td"),$5=i("(Default: "),Ng=r("code"),_5=i("None"),v5=i("). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."),E5=f(),cr=r("tr"),tc=r("td"),y5=i("max_time"),w5=f(),Kt=r("td"),b5=i("(Default: "),xg=r("code"),T5=i("None"),j5=i("). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit."),k5=f(),fr=r("tr"),sc=r("td"),Ig=r("strong"),A5=i("options"),D5=f(),ac=r("td"),O5=i("a dict containing the following keys:"),P5=f(),pr=r("tr"),nc=r("td"),R5=i("use_gpu"),S5=f(),Ft=r("td"),N5=i("(Default: "),Hg=r("code"),x5=i("false"),I5=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),H5=f(),hr=r("tr"),rc=r("td"),B5=i("use_cache"),C5=f(),Jt=r("td"),G5=i("(Default: "),Bg=r("code"),L5=i("true"),U5=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),z5=f(),dr=r("tr"),oc=r("td"),M5=i("wait_for_model"),K5=f(),Wt=r("td"),F5=i("(Default: "),Cg=r("code"),J5=i("false"),W5=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),O1=f(),lc=r("p"),Y5=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),P1=f(),Yt=r("table"),Gg=r("thead"),gr=r("tr"),ic=r("th"),V5=i("Returned values"),X5=f(),Lg=r("th"),Q5=f(),ie=r("tbody"),mr=r("tr"),uc=r("td"),Ug=r("strong"),Z5=i("generated_text"),e6=f(),cc=r("td"),t6=i("The answer of the bot"),s6=f(),qr=r("tr"),fc=r("td"),zg=r("strong"),a6=i("conversation"),n6=f(),pc=r("td"),r6=i("A facility dictionnary to send back for the next input (with the new user input addition)."),o6=f(),$r=r("tr"),hc=r("td"),l6=i("past_user_inputs"),i6=f(),dc=r("td"),u6=i("List of strings. The last inputs from the user in the conversation, <em>after the model has run."),c6=f(),_r=r("tr"),gc=r("td"),f6=i("generated_responses"),p6=f(),mc=r("td"),h6=i("List of strings. The last outputs from the model in the conversation, <em>after the model has run."),R1=f(),Ce=r("h2"),Vt=r("a"),Mg=r("span"),_(vr.$$.fragment),d6=f(),Kg=r("span"),g6=i("Table question answering task"),S1=f(),qc=r("p"),m6=i(`Don\u2019t know SQL? Don\u2019t want to dive into a large spreadsheet? Ask
questions in plain english!`),N1=f(),_(Xt.$$.fragment),x1=f(),Er=r("p"),q6=i("Available with: "),yr=r("a"),$6=i("\u{1F917} Transformers"),I1=f(),$c=r("p"),_6=i("Example:"),H1=f(),_(Qt.$$.fragment),B1=f(),_c=r("p"),v6=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),C1=f(),Zt=r("table"),Fg=r("thead"),wr=r("tr"),vc=r("th"),E6=i("All parameters"),y6=f(),Jg=r("th"),w6=f(),F=r("tbody"),br=r("tr"),Tr=r("td"),Wg=r("strong"),b6=i("inputs"),T6=i(" (required)"),j6=f(),Yg=r("td"),k6=f(),jr=r("tr"),Ec=r("td"),A6=i("query (required)"),D6=f(),yc=r("td"),O6=i("The query in plain text that you want to ask the table"),P6=f(),kr=r("tr"),wc=r("td"),R6=i("table (required)"),S6=f(),bc=r("td"),N6=i("A table of data represented as a dict of list where entries are headers and the lists are all the values, all lists must have the same size."),x6=f(),Ar=r("tr"),Tc=r("td"),Vg=r("strong"),I6=i("options"),H6=f(),jc=r("td"),B6=i("a dict containing the following keys:"),C6=f(),Dr=r("tr"),kc=r("td"),G6=i("use_gpu"),L6=f(),es=r("td"),U6=i("(Default: "),Xg=r("code"),z6=i("false"),M6=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),K6=f(),Or=r("tr"),Ac=r("td"),F6=i("use_cache"),J6=f(),ts=r("td"),W6=i("(Default: "),Qg=r("code"),Y6=i("true"),V6=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),X6=f(),Pr=r("tr"),Dc=r("td"),Q6=i("wait_for_model"),Z6=f(),ss=r("td"),e7=i("(Default: "),Zg=r("code"),t7=i("false"),s7=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),G1=f(),Oc=r("p"),a7=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),L1=f(),_(as.$$.fragment),U1=f(),ns=r("table"),em=r("thead"),Rr=r("tr"),Pc=r("th"),n7=i("Returned values"),r7=f(),tm=r("th"),o7=f(),ue=r("tbody"),Sr=r("tr"),Rc=r("td"),sm=r("strong"),l7=i("answer"),i7=f(),Sc=r("td"),u7=i("The plaintext answer"),c7=f(),Nr=r("tr"),Nc=r("td"),am=r("strong"),f7=i("coordinates"),p7=f(),xc=r("td"),h7=i("a list of coordinates of the cells referenced in the answer"),d7=f(),xr=r("tr"),Ic=r("td"),nm=r("strong"),g7=i("cells"),m7=f(),Hc=r("td"),q7=i("a list of coordinates of the cells contents"),$7=f(),Ir=r("tr"),Bc=r("td"),rm=r("strong"),_7=i("aggregator"),v7=f(),Cc=r("td"),E7=i("The aggregator used to get the answer"),z1=f(),Ge=r("h2"),rs=r("a"),om=r("span"),_(Hr.$$.fragment),y7=f(),lm=r("span"),w7=i("Question answering task"),M1=f(),Gc=r("p"),b7=i("Want to have a nice know-it-all bot that can answer any question?"),K1=f(),_(os.$$.fragment),F1=f(),Le=r("p"),T7=i("Available with: "),Br=r("a"),j7=i("\u{1F917}Transformers"),k7=i(` and
`),Cr=r("a"),A7=i("AllenNLP"),J1=f(),Lc=r("p"),D7=i("Example:"),W1=f(),_(ls.$$.fragment),Y1=f(),Uc=r("p"),O7=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),V1=f(),zc=r("p"),P7=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),X1=f(),_(is.$$.fragment),Q1=f(),us=r("table"),im=r("thead"),Gr=r("tr"),Mc=r("th"),R7=i("Returned values"),S7=f(),um=r("th"),N7=f(),ce=r("tbody"),Lr=r("tr"),Kc=r("td"),cm=r("strong"),x7=i("answer"),I7=f(),Fc=r("td"),H7=i("A string that\u2019s the answer within the text."),B7=f(),Ur=r("tr"),Jc=r("td"),fm=r("strong"),C7=i("score"),G7=f(),Wc=r("td"),L7=i("A float that represents how likely that the answer is correct"),U7=f(),zr=r("tr"),Yc=r("td"),pm=r("strong"),z7=i("start"),M7=f(),cs=r("td"),K7=i("The index (string wise) of the start of the answer within "),hm=r("code"),F7=i("context"),J7=i("."),W7=f(),Mr=r("tr"),Vc=r("td"),dm=r("strong"),Y7=i("stop"),V7=f(),fs=r("td"),X7=i("The index (string wise) of the stop of the answer within "),gm=r("code"),Q7=i("context"),Z7=i("."),Z1=f(),Ue=r("h2"),ps=r("a"),mm=r("span"),_(Kr.$$.fragment),e9=f(),qm=r("span"),t9=i("Text-classification task"),e2=f(),Xc=r("p"),s9=i(`Usually used for sentiment-analysis this will output the likelihood of
classes of an input.`),t2=f(),_(hs.$$.fragment),s2=f(),Fr=r("p"),a9=i("Available with: "),Jr=r("a"),n9=i("\u{1F917} Transformers"),a2=f(),Qc=r("p"),r9=i("Example:"),n2=f(),_(ds.$$.fragment),r2=f(),Zc=r("p"),o9=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),o2=f(),gs=r("table"),$m=r("thead"),Wr=r("tr"),ef=r("th"),l9=i("All parameters"),i9=f(),_m=r("th"),u9=f(),ee=r("tbody"),Yr=r("tr"),Vr=r("td"),vm=r("strong"),c9=i("inputs"),f9=i(" (required)"),p9=f(),tf=r("td"),h9=i("a string to be classified"),d9=f(),Xr=r("tr"),sf=r("td"),Em=r("strong"),g9=i("options"),m9=f(),af=r("td"),q9=i("a dict containing the following keys:"),$9=f(),Qr=r("tr"),nf=r("td"),_9=i("use_gpu"),v9=f(),ms=r("td"),E9=i("(Default: "),ym=r("code"),y9=i("false"),w9=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),b9=f(),Zr=r("tr"),rf=r("td"),T9=i("use_cache"),j9=f(),qs=r("td"),k9=i("(Default: "),wm=r("code"),A9=i("true"),D9=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),O9=f(),eo=r("tr"),of=r("td"),P9=i("wait_for_model"),R9=f(),$s=r("td"),S9=i("(Default: "),bm=r("code"),N9=i("false"),x9=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),l2=f(),lf=r("p"),I9=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),i2=f(),_(_s.$$.fragment),u2=f(),vs=r("table"),Tm=r("thead"),to=r("tr"),uf=r("th"),H9=i("Returned values"),B9=f(),jm=r("th"),C9=f(),so=r("tbody"),ao=r("tr"),cf=r("td"),km=r("strong"),G9=i("label"),L9=f(),ff=r("td"),U9=i("The label for the class (model specific)"),z9=f(),no=r("tr"),pf=r("td"),Am=r("strong"),M9=i("score"),K9=f(),hf=r("td"),F9=i("A floats that represents how likely is that the text belongs the this class."),c2=f(),ze=r("h2"),Es=r("a"),Dm=r("span"),_(ro.$$.fragment),J9=f(),Om=r("span"),W9=i("Named Entity Recognition (NER) task"),f2=f(),oo=r("p"),Y9=i("See "),df=r("a"),V9=i("Token-classification task"),p2=f(),Me=r("h2"),ys=r("a"),Pm=r("span"),_(lo.$$.fragment),X9=f(),Rm=r("span"),Q9=i("Token-classification task"),h2=f(),gf=r("p"),Z9=i(`Usually used for sentence parsing, either grammatical, or Named Entity
Recognition (NER) to understand keywords contained within text.`),d2=f(),_(ws.$$.fragment),g2=f(),Ke=r("p"),e8=i("Available with: "),io=r("a"),t8=i("\u{1F917} Transformers"),s8=i(`,
`),uo=r("a"),a8=i("Flair"),m2=f(),mf=r("p"),n8=i("Example:"),q2=f(),_(bs.$$.fragment),$2=f(),qf=r("p"),r8=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),_2=f(),Ts=r("table"),Sm=r("thead"),co=r("tr"),$f=r("th"),o8=i("All parameters"),l8=f(),Nm=r("th"),i8=f(),J=r("tbody"),fo=r("tr"),po=r("td"),xm=r("strong"),u8=i("inputs"),c8=i(" (required)"),f8=f(),_f=r("td"),p8=i("a string to be classified"),h8=f(),ho=r("tr"),vf=r("td"),Im=r("strong"),d8=i("parameters"),g8=f(),Ef=r("td"),m8=i("a dict containing the following key:"),q8=f(),go=r("tr"),yf=r("td"),$8=i("aggregation_strategy"),_8=f(),x=r("td"),v8=i("(Default: "),Hm=r("code"),E8=i("simple"),y8=i("). There are several aggregation strategies: "),w8=r("br"),b8=f(),Bm=r("code"),T8=i("none"),j8=i(": Every token gets classified without further aggregation. "),k8=r("br"),A8=f(),Cm=r("code"),D8=i("simple"),O8=i(": Entities are grouped according to the default schema (B-, I- tags get merged when the tag is similar). "),P8=r("br"),R8=f(),Gm=r("code"),S8=i("first"),N8=i(": Same as the "),Lm=r("code"),x8=i("simple"),I8=i(" strategy except words cannot end up with different tags. Words will use the tag of the first token when there is ambiguity. "),H8=r("br"),B8=f(),Um=r("code"),C8=i("average"),G8=i(": Same as the "),zm=r("code"),L8=i("simple"),U8=i(" strategy except words cannot end up with different tags. Scores are averaged across tokens and then the maximum label is applied. "),z8=r("br"),M8=f(),Mm=r("code"),K8=i("max"),F8=i(": Same as the "),Km=r("code"),J8=i("simple"),W8=i(" strategy except words cannot end up with different tags. Word entity will be the token with the maximum score."),Y8=f(),mo=r("tr"),wf=r("td"),Fm=r("strong"),V8=i("options"),X8=f(),bf=r("td"),Q8=i("a dict containing the following keys:"),Z8=f(),qo=r("tr"),Tf=r("td"),eA=i("use_gpu"),tA=f(),js=r("td"),sA=i("(Default: "),Jm=r("code"),aA=i("false"),nA=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),rA=f(),$o=r("tr"),jf=r("td"),oA=i("use_cache"),lA=f(),ks=r("td"),iA=i("(Default: "),Wm=r("code"),uA=i("true"),cA=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),fA=f(),_o=r("tr"),kf=r("td"),pA=i("wait_for_model"),hA=f(),As=r("td"),dA=i("(Default: "),Ym=r("code"),gA=i("false"),mA=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),v2=f(),Af=r("p"),qA=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),E2=f(),_(Ds.$$.fragment),y2=f(),Os=r("table"),Vm=r("thead"),vo=r("tr"),Df=r("th"),$A=i("Returned values"),_A=f(),Xm=r("th"),vA=f(),te=r("tbody"),Eo=r("tr"),Of=r("td"),Qm=r("strong"),EA=i("entity_group"),yA=f(),Pf=r("td"),wA=i("The type for the entity being recognized (model specific)."),bA=f(),yo=r("tr"),Rf=r("td"),Zm=r("strong"),TA=i("score"),jA=f(),Sf=r("td"),kA=i("How likely the entity was recognized."),AA=f(),wo=r("tr"),Nf=r("td"),eq=r("strong"),DA=i("word"),OA=f(),xf=r("td"),PA=i("The string that was captured"),RA=f(),bo=r("tr"),If=r("td"),tq=r("strong"),SA=i("start"),NA=f(),Ps=r("td"),xA=i("The offset stringwise where the answer is located. Useful to disambiguate if "),sq=r("code"),IA=i("word"),HA=i(" occurs multiple times."),BA=f(),To=r("tr"),Hf=r("td"),aq=r("strong"),CA=i("end"),GA=f(),Rs=r("td"),LA=i("The offset stringwise where the answer is located. Useful to disambiguate if "),nq=r("code"),UA=i("word"),zA=i(" occurs multiple times."),w2=f(),Fe=r("h2"),Ss=r("a"),rq=r("span"),_(jo.$$.fragment),MA=f(),oq=r("span"),KA=i("Text-generation task"),b2=f(),Bf=r("p"),FA=i("Use to continue text from a prompt. This is a very generic task."),T2=f(),_(Ns.$$.fragment),j2=f(),ko=r("p"),JA=i("Available with: "),Ao=r("a"),WA=i("\u{1F917} Transformers"),k2=f(),Cf=r("p"),YA=i("Example:"),A2=f(),_(xs.$$.fragment),D2=f(),Gf=r("p"),VA=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),O2=f(),Is=r("table"),lq=r("thead"),Do=r("tr"),Lf=r("th"),XA=i("All parameters"),QA=f(),iq=r("th"),ZA=f(),I=r("tbody"),Oo=r("tr"),Po=r("td"),uq=r("strong"),eD=i("inputs"),tD=i(" (required):"),sD=f(),Uf=r("td"),aD=i("a string to be generated from"),nD=f(),Ro=r("tr"),zf=r("td"),cq=r("strong"),rD=i("parameters"),oD=f(),Mf=r("td"),lD=i("dict containing the following keys:"),iD=f(),So=r("tr"),Kf=r("td"),uD=i("top_k"),cD=f(),ye=r("td"),fD=i("(Default: "),fq=r("code"),pD=i("None"),hD=i("). Integer to define the top tokens considered within the "),pq=r("code"),dD=i("sample"),gD=i(" operation to create new text."),mD=f(),No=r("tr"),Ff=r("td"),qD=i("top_p"),$D=f(),le=r("td"),_D=i("(Default: "),hq=r("code"),vD=i("None"),ED=i("). Float to define the tokens that are within the "),dq=r("code"),yD=i("sample"),wD=i(" operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than "),gq=r("code"),bD=i("top_p"),TD=i("."),jD=f(),xo=r("tr"),Jf=r("td"),kD=i("temperature"),AD=f(),we=r("td"),DD=i("(Default: "),mq=r("code"),OD=i("1.0"),PD=i("). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means "),qq=r("code"),RD=i("100.0"),SD=i(" is getting closer to uniform probability."),ND=f(),Io=r("tr"),Wf=r("td"),xD=i("repetition_penalty"),ID=f(),Hs=r("td"),HD=i("(Default: "),$q=r("code"),BD=i("None"),CD=i("). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."),GD=f(),Ho=r("tr"),Yf=r("td"),LD=i("max_new_tokens"),UD=f(),be=r("td"),zD=i("(Default: "),_q=r("code"),MD=i("None"),KD=i("). Int (0-250). The amount of new tokens to be generated, this does "),vq=r("strong"),FD=i("not"),JD=i(" include the input length it is a estimate of the size of generated text you want. Each new tokens slows down the request, so look for balance between response times and length of text generated."),WD=f(),Bo=r("tr"),Vf=r("td"),YD=i("max_time"),VD=f(),Te=r("td"),XD=i("(Default: "),Eq=r("code"),QD=i("None"),ZD=i("). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit. Use that in combination with "),yq=r("code"),eO=i("max_new_tokens"),tO=i(" for best results."),sO=f(),Co=r("tr"),Xf=r("td"),aO=i("return_full_text"),nO=f(),je=r("td"),rO=i("(Default: "),wq=r("code"),oO=i("True"),lO=i("). Bool. If set to False, the return results will "),bq=r("strong"),iO=i("not"),uO=i(" contain the original query making it easier for prompting."),cO=f(),Go=r("tr"),Qf=r("td"),fO=i("num_return_sequences"),pO=f(),Bs=r("td"),hO=i("(Default: "),Tq=r("code"),dO=i("1"),gO=i("). Integer. The number of proposition you want to be returned."),mO=f(),Lo=r("tr"),Zf=r("td"),qO=i("do_sample"),$O=f(),Cs=r("td"),_O=i("(Optional: "),jq=r("code"),vO=i("True"),EO=i("). Bool. Whether or not to use sampling, use greedy decoding otherwise."),yO=f(),Uo=r("tr"),ep=r("td"),kq=r("strong"),wO=i("options"),bO=f(),tp=r("td"),TO=i("a dict containing the following keys:"),jO=f(),zo=r("tr"),sp=r("td"),kO=i("use_gpu"),AO=f(),Gs=r("td"),DO=i("(Default: "),Aq=r("code"),OO=i("false"),PO=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),RO=f(),Mo=r("tr"),ap=r("td"),SO=i("use_cache"),NO=f(),Ls=r("td"),xO=i("(Default: "),Dq=r("code"),IO=i("true"),HO=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),BO=f(),Ko=r("tr"),np=r("td"),CO=i("wait_for_model"),GO=f(),Us=r("td"),LO=i("(Default: "),Oq=r("code"),UO=i("false"),zO=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),P2=f(),rp=r("p"),MO=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),R2=f(),_(zs.$$.fragment),S2=f(),Ms=r("table"),Pq=r("thead"),Fo=r("tr"),op=r("th"),KO=i("Returned values"),FO=f(),Rq=r("th"),JO=f(),Sq=r("tbody"),Jo=r("tr"),lp=r("td"),Nq=r("strong"),WO=i("generated_text"),YO=f(),ip=r("td"),VO=i("The continuated string"),N2=f(),Je=r("h2"),Ks=r("a"),xq=r("span"),_(Wo.$$.fragment),XO=f(),Iq=r("span"),QO=i("Text2text-generation task"),x2=f(),Fs=r("p"),ZO=i("Essentially "),up=r("a"),eP=i("Text-generation task"),tP=i(`. But uses
Encoder-Decoder architecture, so might change in the future for more
options.`),I2=f(),We=r("h2"),Js=r("a"),Hq=r("span"),_(Yo.$$.fragment),sP=f(),Bq=r("span"),aP=i("Fill mask task"),H2=f(),cp=r("p"),nP=i(`Tries to fill in a hole with a missing word (token to be precise).
That\u2019s the base task for BERT models.`),B2=f(),_(Ws.$$.fragment),C2=f(),Vo=r("p"),rP=i("Available with: "),Xo=r("a"),oP=i("\u{1F917} Transformers"),G2=f(),fp=r("p"),lP=i("Example:"),L2=f(),_(Ys.$$.fragment),U2=f(),pp=r("p"),iP=i(`When sending your request, you should send a JSON encoded payload. Here
are all the options`),z2=f(),Vs=r("table"),Cq=r("thead"),Qo=r("tr"),hp=r("th"),uP=i("All parameters"),cP=f(),Gq=r("th"),fP=f(),se=r("tbody"),Zo=r("tr"),el=r("td"),Lq=r("strong"),pP=i("inputs"),hP=i(" (required):"),dP=f(),dp=r("td"),gP=i("a string to be filled from, must contain the [MASK] token (check model card for exact name of the mask)"),mP=f(),tl=r("tr"),gp=r("td"),Uq=r("strong"),qP=i("options"),$P=f(),mp=r("td"),_P=i("a dict containing the following keys:"),vP=f(),sl=r("tr"),qp=r("td"),EP=i("use_gpu"),yP=f(),Xs=r("td"),wP=i("(Default: "),zq=r("code"),bP=i("false"),TP=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),jP=f(),al=r("tr"),$p=r("td"),kP=i("use_cache"),AP=f(),Qs=r("td"),DP=i("(Default: "),Mq=r("code"),OP=i("true"),PP=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),RP=f(),nl=r("tr"),_p=r("td"),SP=i("wait_for_model"),NP=f(),Zs=r("td"),xP=i("(Default: "),Kq=r("code"),IP=i("false"),HP=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),M2=f(),vp=r("p"),BP=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),K2=f(),_(ea.$$.fragment),F2=f(),ta=r("table"),Fq=r("thead"),rl=r("tr"),Ep=r("th"),CP=i("Returned values"),GP=f(),Jq=r("th"),LP=f(),fe=r("tbody"),ol=r("tr"),yp=r("td"),Wq=r("strong"),UP=i("sequence"),zP=f(),wp=r("td"),MP=i("The actual sequence of tokens that ran against the model (may contain special tokens)"),KP=f(),ll=r("tr"),bp=r("td"),Yq=r("strong"),FP=i("score"),JP=f(),Tp=r("td"),WP=i("The probability for this token."),YP=f(),il=r("tr"),jp=r("td"),Vq=r("strong"),VP=i("token"),XP=f(),kp=r("td"),QP=i("The id of the token"),ZP=f(),ul=r("tr"),Ap=r("td"),Xq=r("strong"),eR=i("token_str"),tR=f(),Dp=r("td"),sR=i("The string representation of the token"),J2=f(),Ye=r("h2"),sa=r("a"),Qq=r("span"),_(cl.$$.fragment),aR=f(),Zq=r("span"),nR=i("Automatic speech recognition task"),W2=f(),Op=r("p"),rR=i(`This task reads some audio input and outputs the said words within the
audio files.`),Y2=f(),_(aa.$$.fragment),V2=f(),_(na.$$.fragment),X2=f(),pe=r("p"),oR=i("Available with: "),fl=r("a"),lR=i("\u{1F917} Transformers"),iR=f(),pl=r("a"),uR=i("ESPnet"),cR=i(` and
`),hl=r("a"),fR=i("SpeechBrain"),Q2=f(),Pp=r("p"),pR=i("Request:"),Z2=f(),_(ra.$$.fragment),ev=f(),Rp=r("p"),hR=i(`When sending your request, you should send a binary payload that simply
contains your audio file. We try to support most formats (Flac, Wav,
Mp3, Ogg etc...). And we automatically rescale the sampling rate to the
appropriate rate for the given model (usually 16KHz).`),tv=f(),oa=r("table"),e$=r("thead"),dl=r("tr"),Sp=r("th"),dR=i("All parameters"),gR=f(),t$=r("th"),mR=f(),s$=r("tbody"),gl=r("tr"),ml=r("td"),a$=r("strong"),qR=i("no parameter"),$R=i(" (required)"),_R=f(),Np=r("td"),vR=i("a binary representation of the audio file. No other parameters are currently allowed."),sv=f(),xp=r("p"),ER=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),av=f(),Ip=r("p"),yR=i("Response:"),nv=f(),_(la.$$.fragment),rv=f(),ia=r("table"),n$=r("thead"),ql=r("tr"),Hp=r("th"),wR=i("Returned values"),bR=f(),r$=r("th"),TR=f(),o$=r("tbody"),$l=r("tr"),Bp=r("td"),l$=r("strong"),jR=i("text"),kR=f(),Cp=r("td"),AR=i("The string that was recognized within the audio file."),ov=f(),Ve=r("h2"),ua=r("a"),i$=r("span"),_(_l.$$.fragment),DR=f(),u$=r("span"),OR=i("Feature-extraction task"),lv=f(),Gp=r("p"),PR=i(`This task reads some text and outputs raw float values, that are usually
consumed as part of a semantic database/semantic search.`),iv=f(),_(ca.$$.fragment),uv=f(),Xe=r("p"),RR=i("Available with: "),vl=r("a"),SR=i("\u{1F917} Transformers"),NR=f(),El=r("a"),xR=i("Sentence-transformers"),cv=f(),Lp=r("p"),IR=i("Request:"),fv=f(),fa=r("table"),c$=r("thead"),yl=r("tr"),Up=r("th"),HR=i("All parameters"),BR=f(),f$=r("th"),CR=f(),ae=r("tbody"),wl=r("tr"),bl=r("td"),p$=r("strong"),GR=i("inputs"),LR=i(" (required):"),UR=f(),zp=r("td"),zR=i("a string or a list of strings to get the features from."),MR=f(),Tl=r("tr"),Mp=r("td"),h$=r("strong"),KR=i("options"),FR=f(),Kp=r("td"),JR=i("a dict containing the following keys:"),WR=f(),jl=r("tr"),Fp=r("td"),YR=i("use_gpu"),VR=f(),pa=r("td"),XR=i("(Default: "),d$=r("code"),QR=i("false"),ZR=i("). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),eS=f(),kl=r("tr"),Jp=r("td"),tS=i("use_cache"),sS=f(),ha=r("td"),aS=i("(Default: "),g$=r("code"),nS=i("true"),rS=i("). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),oS=f(),Al=r("tr"),Wp=r("td"),lS=i("wait_for_model"),iS=f(),da=r("td"),uS=i("(Default: "),m$=r("code"),cS=i("false"),fS=i(") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),pv=f(),Yp=r("p"),pS=i("Return value is either a dict or a list of dicts if you sent a list of inputs"),hv=f(),ga=r("table"),q$=r("thead"),Dl=r("tr"),Vp=r("th"),hS=i("Returned values"),dS=f(),$$=r("th"),gS=f(),_$=r("tbody"),Ol=r("tr"),Xp=r("td"),v$=r("strong"),mS=i("A list of float (or list of list of floats)"),qS=f(),Qp=r("td"),$S=i("The numbers that are the representation features of the input."),dv=f(),Zp=r("small"),_S=i(`Returned values are a list of floats, or a list of list of floats
(depending on if you sent a string or a list of string, and if the
automatic reduction, usually mean_pooling for instance was applied for
you or not. This should be explained on the model's README.`),gv=f(),Qe=r("h2"),ma=r("a"),E$=r("span"),_(Pl.$$.fragment),vS=f(),y$=r("span"),ES=i("Audio-classification task"),mv=f(),eh=r("p"),yS=i("This task reads some audio input and outputs the likelihood of classes."),qv=f(),_(qa.$$.fragment),$v=f(),Ze=r("p"),wS=i("Available with: "),Rl=r("a"),bS=i("\u{1F917} Transformers"),TS=f(),Sl=r("a"),jS=i("SpeechBrain"),_v=f(),th=r("p"),kS=i("Request:"),vv=f(),_($a.$$.fragment),Ev=f(),sh=r("p"),AS=i(`When sending your request, you should send a binary payload that simply
contains your audio file. We try to support most formats (Flac, Wav,
Mp3, Ogg etc...). And we automatically rescale the sampling rate to the
appropriate rate for the given model (usually 16KHz).`),yv=f(),_a=r("table"),w$=r("thead"),Nl=r("tr"),ah=r("th"),DS=i("All parameters"),OS=f(),b$=r("th"),PS=f(),T$=r("tbody"),xl=r("tr"),Il=r("td"),j$=r("strong"),RS=i("no parameter"),SS=i(" (required)"),NS=f(),nh=r("td"),xS=i("a binary representation of the audio file. No other parameters are currently allowed."),wv=f(),rh=r("p"),IS=i("Return value is a dict"),bv=f(),_(va.$$.fragment),Tv=f(),Ea=r("table"),k$=r("thead"),Hl=r("tr"),oh=r("th"),HS=i("Returned values"),BS=f(),A$=r("th"),CS=f(),Bl=r("tbody"),Cl=r("tr"),lh=r("td"),D$=r("strong"),GS=i("label"),LS=f(),ih=r("td"),US=i("The label for the class (model specific)"),zS=f(),Gl=r("tr"),uh=r("td"),O$=r("strong"),MS=i("score"),KS=f(),ch=r("td"),FS=i("A float that represents how likely it is that the audio file belongs to this class."),jv=f(),et=r("h2"),ya=r("a"),P$=r("span"),_(Ll.$$.fragment),JS=f(),R$=r("span"),WS=i("Object-detection task"),kv=f(),fh=r("p"),YS=i(`This task reads some image input and outputs the likelihood of classes &
bounding boxes of detected objects.`),Av=f(),_(wa.$$.fragment),Dv=f(),Ul=r("p"),VS=i("Available with: "),zl=r("a"),XS=i("\u{1F917} Transformers"),Ov=f(),ph=r("p"),QS=i("Request:"),Pv=f(),_(ba.$$.fragment),Rv=f(),Ta=r("p"),ZS=i(`When sending your request, you should send a binary payload that simply
contains your image file. We support all image formats `),Ml=r("a"),eN=i(`Pillow
supports`),tN=i("."),Sv=f(),ja=r("table"),S$=r("thead"),Kl=r("tr"),hh=r("th"),sN=i("All parameters"),aN=f(),N$=r("th"),nN=f(),x$=r("tbody"),Fl=r("tr"),Jl=r("td"),I$=r("strong"),rN=i("no parameter"),oN=i(" (required)"),lN=f(),dh=r("td"),iN=i("a binary representation of the image file. No other parameters are currently allowed."),Nv=f(),gh=r("p"),uN=i("Return value is a dict"),xv=f(),_(ka.$$.fragment),Iv=f(),Aa=r("table"),H$=r("thead"),Wl=r("tr"),mh=r("th"),cN=i("Returned values"),fN=f(),B$=r("th"),pN=f(),tt=r("tbody"),Yl=r("tr"),qh=r("td"),C$=r("strong"),hN=i("label"),dN=f(),$h=r("td"),gN=i("The label for the class (model specific) of a detected object."),mN=f(),Vl=r("tr"),_h=r("td"),G$=r("strong"),qN=i("score"),$N=f(),vh=r("td"),_N=i("A float that represents how likely it is that the detected object belongs to the given class."),vN=f(),Xl=r("tr"),Eh=r("td"),L$=r("strong"),EN=i("box"),yN=f(),yh=r("td"),wN=i("A dict (with keys [xmin,ymin,xmax,ymax]) representing the bounding box of a detected object."),Hv=f(),st=r("h2"),Da=r("a"),U$=r("span"),_(Ql.$$.fragment),bN=f(),z$=r("span"),TN=i("Image Segmentation task"),Bv=f(),wh=r("p"),jN=i(`This task reads some image input and outputs the likelihood of classes &
bounding boxes of detected objects.`),Cv=f(),_(Oa.$$.fragment),Gv=f(),Zl=r("p"),kN=i("Available with: "),ei=r("a"),AN=i("\u{1F917} Transformers"),Lv=f(),bh=r("p"),DN=i("Request:"),Uv=f(),_(Pa.$$.fragment),zv=f(),Ra=r("p"),ON=i(`When sending your request, you should send a binary payload that simply
contains your image file. We support all image formats `),ti=r("a"),PN=i(`Pillow
supports`),RN=i("."),Mv=f(),Sa=r("table"),M$=r("thead"),si=r("tr"),Th=r("th"),SN=i("All parameters"),NN=f(),K$=r("th"),xN=f(),F$=r("tbody"),ai=r("tr"),ni=r("td"),J$=r("strong"),IN=i("no parameter"),HN=i(" (required)"),BN=f(),jh=r("td"),CN=i("a binary representation of the image file. No other parameters are currently allowed."),Kv=f(),kh=r("p"),GN=i("Return value is a dict"),Fv=f(),_(Na.$$.fragment),Jv=f(),xa=r("table"),W$=r("thead"),ri=r("tr"),Ah=r("th"),LN=i("Returned values"),UN=f(),Y$=r("th"),zN=f(),at=r("tbody"),oi=r("tr"),Dh=r("td"),V$=r("strong"),MN=i("label"),KN=f(),Oh=r("td"),FN=i("The label for the class (model specific) of a segment."),JN=f(),li=r("tr"),Ph=r("td"),X$=r("strong"),WN=i("score"),YN=f(),Rh=r("td"),VN=i("A float that represents how likely it is that the segment belongs to the given class."),XN=f(),ii=r("tr"),Sh=r("td"),Q$=r("strong"),QN=i("mask"),ZN=f(),Nh=r("td"),ex=i("A str (base64 str of a single channel black-and-white img) representing the mask of a segment."),Wv=f(),nt=r("h2"),Ia=r("a"),Z$=r("span"),_(ui.$$.fragment),tx=f(),e_=r("span"),sx=i("Image Classification task"),Yv=f(),xh=r("p"),ax=i("This task reads some image input and outputs the likelihood of classes."),Vv=f(),_(Ha.$$.fragment),Xv=f(),ci=r("p"),nx=i("Available with: "),fi=r("a"),rx=i("\u{1F917} Transformers"),Qv=f(),Ih=r("p"),ox=i("Request:"),Zv=f(),_(Ba.$$.fragment),eE=f(),Ca=r("p"),lx=i(`When sending your request, you should send a binary payload that simply
contains your image file. We support all image formats `),pi=r("a"),ix=i(`Pillow
supports`),ux=i("."),tE=f(),Ga=r("table"),t_=r("thead"),hi=r("tr"),Hh=r("th"),cx=i("All parameters"),fx=f(),s_=r("th"),px=f(),a_=r("tbody"),di=r("tr"),gi=r("td"),n_=r("strong"),hx=i("no parameter"),dx=i(" (required)"),gx=f(),Bh=r("td"),mx=i("a binary representation of the image file. No other parameters are currently allowed."),sE=f(),Ch=r("p"),qx=i("Return value is a dict"),aE=f(),_(La.$$.fragment),nE=f(),Ua=r("table"),r_=r("thead"),mi=r("tr"),Gh=r("th"),$x=i("Returned values"),_x=f(),o_=r("th"),vx=f(),qi=r("tbody"),$i=r("tr"),Lh=r("td"),l_=r("strong"),Ex=i("label"),yx=f(),Uh=r("td"),wx=i("The label for the class (model specific)"),bx=f(),_i=r("tr"),zh=r("td"),i_=r("strong"),Tx=i("score"),jx=f(),Mh=r("td"),kx=i("A float that represents how likely it is that the image file belongs to this class."),this.h()},l(a){const g=nF('[data-svelte="svelte-1phssyn"]',document.head);n=o(g,"META",{name:!0,content:!0}),g.forEach(s),c=p(a),t=o(a,"H1",{class:!0});var vi=l(t);d=o(vi,"A",{id:!0,class:!0,href:!0});var u_=l(d);q=o(u_,"SPAN",{});var c_=l(q);v(k.$$.fragment,c_),c_.forEach(s),u_.forEach(s),A=p(vi),j=o(vi,"SPAN",{});var f_=l(j);T=u(f_,"Detailed parameters"),f_.forEach(s),vi.forEach(s),S=p(a),D=o(a,"H2",{class:!0});var Ei=l(D);ne=o(Ei,"A",{id:!0,class:!0,href:!0});var p_=l(ne);Re=o(p_,"SPAN",{});var h_=l(Re);v(Q.$$.fragment,h_),h_.forEach(s),p_.forEach(s),Y=p(Ei),ot=o(Ei,"SPAN",{});var d_=l(ot);Ri=u(d_,"Which task is used by this model ?"),d_.forEach(s),Ei.forEach(s),Va=p(a),Se=o(a,"P",{});var g_=l(Se);Kb=u(g_,`In general the \u{1F917} Hosted API Inference accepts a simple string as an
input. However, more advanced usage depends on the \u201Ctask\u201D that the
model solves.`),g_.forEach(s),L_=p(a),Si=o(a,"P",{});var m_=l(Si);Fb=u(m_,"The \u201Ctask\u201D of a model is defined here on it\u2019s model page:"),m_.forEach(s),U_=p(a),lt=o(a,"IMG",{class:!0,src:!0,width:!0}),z_=p(a),it=o(a,"IMG",{class:!0,src:!0,width:!0}),M_=p(a),Ne=o(a,"H2",{class:!0});var yi=l(Ne);ut=o(yi,"A",{id:!0,class:!0,href:!0});var q_=l(ut);cd=o(q_,"SPAN",{});var $_=l(cd);v(Xa.$$.fragment,$_),$_.forEach(s),q_.forEach(s),Jb=p(yi),fd=o(yi,"SPAN",{});var __=l(fd);Wb=u(__,"Zero-shot classification task"),__.forEach(s),yi.forEach(s),K_=p(a),Ni=o(a,"P",{});var v_=l(Ni);Yb=u(v_,`This task is super useful to try out classification with zero code,
you simply pass a sentence/paragraph and the possible labels for that
sentence, and you get a result.`),v_.forEach(s),F_=p(a),v(ct.$$.fragment,a),J_=p(a),Qa=o(a,"P",{});var Kh=l(Qa);Vb=u(Kh,"Available with: "),Za=o(Kh,"A",{href:!0,rel:!0});var E_=l(Za);Xb=u(E_,"\u{1F917} Transformers"),E_.forEach(s),Kh.forEach(s),W_=p(a),xi=o(a,"P",{});var y_=l(xi);Qb=u(y_,"Request:"),y_.forEach(s),Y_=p(a),v(ft.$$.fragment,a),V_=p(a),Ii=o(a,"P",{});var w_=l(Ii);Zb=u(w_,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),w_.forEach(s),X_=p(a),pt=o(a,"TABLE",{});var wi=l(pt);pd=o(wi,"THEAD",{});var b_=l(pd);en=o(b_,"TR",{});var bi=l(en);Hi=o(bi,"TH",{align:!0});var T_=l(Hi);e3=u(T_,"All parameters"),T_.forEach(s),t3=p(bi),hd=o(bi,"TH",{align:!0}),l(hd).forEach(s),bi.forEach(s),b_.forEach(s),s3=p(wi),M=o(wi,"TBODY",{});var K=l(M);tn=o(K,"TR",{});var Ti=l(tn);sn=o(Ti,"TD",{align:!0});var Fh=l(sn);dd=o(Fh,"STRONG",{});var j_=l(dd);a3=u(j_,"inputs"),j_.forEach(s),n3=u(Fh," (required)"),Fh.forEach(s),r3=p(Ti),Bi=o(Ti,"TD",{align:!0});var k_=l(Bi);o3=u(k_,"a string or list of strings"),k_.forEach(s),Ti.forEach(s),l3=p(K),an=o(K,"TR",{});var ji=l(an);nn=o(ji,"TD",{align:!0});var Jh=l(nn);gd=o(Jh,"STRONG",{});var A_=l(gd);i3=u(A_,"parameters"),A_.forEach(s),u3=u(Jh," (required)"),Jh.forEach(s),c3=p(ji),Ci=o(ji,"TD",{align:!0});var D_=l(Ci);f3=u(D_,"a dict containing the following keys:"),D_.forEach(s),ji.forEach(s),p3=p(K),rn=o(K,"TR",{});var ki=l(rn);Gi=o(ki,"TD",{align:!0});var O_=l(Gi);h3=u(O_,"candidate_labels (required)"),O_.forEach(s),d3=p(ki),he=o(ki,"TD",{align:!0});var rt=l(he);g3=u(rt,"a list of strings that are potential classes for "),md=o(rt,"CODE",{});var P_=l(md);m3=u(P_,"inputs"),P_.forEach(s),q3=u(rt,". (max 10 candidate_labels, for more, simply run multiple requests, results are going to be misleading if using too many candidate_labels anyway. If you want to keep the exact same, you can simply run "),qd=o(rt,"CODE",{});var R_=l(qd);$3=u(R_,"multi_label=True"),R_.forEach(s),_3=u(rt," and do the scaling on your end. )"),rt.forEach(s),ki.forEach(s),v3=p(K),on=o(K,"TR",{});var Ai=l(on);Li=o(Ai,"TD",{align:!0});var S_=l(Li);E3=u(S_,"multi_label"),S_.forEach(s),y3=p(Ai),ht=o(Ai,"TD",{align:!0});var Di=l(ht);w3=u(Di,"(Default: "),$d=o(Di,"CODE",{});var N_=l($d);b3=u(N_,"false"),N_.forEach(s),T3=u(Di,") Boolean that is set to True if classes can overlap"),Di.forEach(s),Ai.forEach(s),j3=p(K),ln=o(K,"TR",{});var Oi=l(ln);Ui=o(Oi,"TD",{align:!0});var x_=l(Ui);_d=o(x_,"STRONG",{});var I_=l(_d);k3=u(I_,"options"),I_.forEach(s),x_.forEach(s),A3=p(Oi),zi=o(Oi,"TD",{align:!0});var tI=l(zi);D3=u(tI,"a dict containing the following keys:"),tI.forEach(s),Oi.forEach(s),O3=p(K),un=o(K,"TR",{});var oE=l(un);Mi=o(oE,"TD",{align:!0});var sI=l(Mi);P3=u(sI,"use_gpu"),sI.forEach(s),R3=p(oE),dt=o(oE,"TD",{align:!0});var lE=l(dt);S3=u(lE,"(Default: "),vd=o(lE,"CODE",{});var aI=l(vd);N3=u(aI,"false"),aI.forEach(s),x3=u(lE,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),lE.forEach(s),oE.forEach(s),I3=p(K),cn=o(K,"TR",{});var iE=l(cn);Ki=o(iE,"TD",{align:!0});var nI=l(Ki);H3=u(nI,"use_cache"),nI.forEach(s),B3=p(iE),gt=o(iE,"TD",{align:!0});var uE=l(gt);C3=u(uE,"(Default: "),Ed=o(uE,"CODE",{});var rI=l(Ed);G3=u(rI,"true"),rI.forEach(s),L3=u(uE,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),uE.forEach(s),iE.forEach(s),U3=p(K),fn=o(K,"TR",{});var cE=l(fn);Fi=o(cE,"TD",{align:!0});var oI=l(Fi);z3=u(oI,"wait_for_model"),oI.forEach(s),M3=p(cE),mt=o(cE,"TD",{align:!0});var fE=l(mt);K3=u(fE,"(Default: "),yd=o(fE,"CODE",{});var lI=l(yd);F3=u(lI,"false"),lI.forEach(s),J3=u(fE,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),fE.forEach(s),cE.forEach(s),K.forEach(s),wi.forEach(s),Q_=p(a),Ji=o(a,"P",{});var iI=l(Ji);W3=u(iI,"Return value is either a dict or a list of dicts if you sent a list of inputs"),iI.forEach(s),Z_=p(a),Wi=o(a,"P",{});var uI=l(Wi);Y3=u(uI,"Response:"),uI.forEach(s),e1=p(a),v(qt.$$.fragment,a),t1=p(a),$t=o(a,"TABLE",{});var pE=l($t);wd=o(pE,"THEAD",{});var cI=l(wd);pn=o(cI,"TR",{});var hE=l(pn);Yi=o(hE,"TH",{align:!0});var fI=l(Yi);V3=u(fI,"Returned values"),fI.forEach(s),X3=p(hE),bd=o(hE,"TH",{align:!0}),l(bd).forEach(s),hE.forEach(s),cI.forEach(s),Q3=p(pE),xe=o(pE,"TBODY",{});var Wh=l(xe);hn=o(Wh,"TR",{});var dE=l(hn);Vi=o(dE,"TD",{align:!0});var pI=l(Vi);Td=o(pI,"STRONG",{});var hI=l(Td);Z3=u(hI,"sequence"),hI.forEach(s),pI.forEach(s),eT=p(dE),Xi=o(dE,"TD",{align:!0});var dI=l(Xi);tT=u(dI,"The string sent as an input"),dI.forEach(s),dE.forEach(s),sT=p(Wh),dn=o(Wh,"TR",{});var gE=l(dn);Qi=o(gE,"TD",{align:!0});var gI=l(Qi);jd=o(gI,"STRONG",{});var mI=l(jd);aT=u(mI,"labels"),mI.forEach(s),gI.forEach(s),nT=p(gE),Zi=o(gE,"TD",{align:!0});var qI=l(Zi);rT=u(qI,"The list of strings for labels that you sent (in order)"),qI.forEach(s),gE.forEach(s),oT=p(Wh),gn=o(Wh,"TR",{});var mE=l(gn);eu=o(mE,"TD",{align:!0});var $I=l(eu);kd=o($I,"STRONG",{});var _I=l(kd);lT=u(_I,"scores"),_I.forEach(s),$I.forEach(s),iT=p(mE),_t=o(mE,"TD",{align:!0});var qE=l(_t);uT=u(qE,"a list of floats that correspond the the probability of label, in the same order as "),Ad=o(qE,"CODE",{});var vI=l(Ad);cT=u(vI,"labels"),vI.forEach(s),fT=u(qE,"."),qE.forEach(s),mE.forEach(s),Wh.forEach(s),pE.forEach(s),s1=p(a),Ie=o(a,"H2",{class:!0});var $E=l(Ie);vt=o($E,"A",{id:!0,class:!0,href:!0});var EI=l(vt);Dd=o(EI,"SPAN",{});var yI=l(Dd);v(mn.$$.fragment,yI),yI.forEach(s),EI.forEach(s),pT=p($E),Od=o($E,"SPAN",{});var wI=l(Od);hT=u(wI,"Translation task"),wI.forEach(s),$E.forEach(s),a1=p(a),tu=o(a,"P",{});var bI=l(tu);dT=u(bI,"This task is well known to translate text from one language to another"),bI.forEach(s),n1=p(a),v(Et.$$.fragment,a),r1=p(a),qn=o(a,"P",{});var Ax=l(qn);gT=u(Ax,"Available with: "),$n=o(Ax,"A",{href:!0,rel:!0});var TI=l($n);mT=u(TI,"\u{1F917} Transformers"),TI.forEach(s),Ax.forEach(s),o1=p(a),su=o(a,"P",{});var jI=l(su);qT=u(jI,"Example:"),jI.forEach(s),l1=p(a),v(yt.$$.fragment,a),i1=p(a),au=o(a,"P",{});var kI=l(au);$T=u(kI,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),kI.forEach(s),u1=p(a),wt=o(a,"TABLE",{});var _E=l(wt);Pd=o(_E,"THEAD",{});var AI=l(Pd);_n=o(AI,"TR",{});var vE=l(_n);nu=o(vE,"TH",{align:!0});var DI=l(nu);_T=u(DI,"All parameters"),DI.forEach(s),vT=p(vE),Rd=o(vE,"TH",{align:!0}),l(Rd).forEach(s),vE.forEach(s),AI.forEach(s),ET=p(_E),Z=o(_E,"TBODY",{});var ke=l(Z);vn=o(ke,"TR",{});var EE=l(vn);En=o(EE,"TD",{align:!0});var Dx=l(En);Sd=o(Dx,"STRONG",{});var OI=l(Sd);yT=u(OI,"inputs"),OI.forEach(s),wT=u(Dx," (required)"),Dx.forEach(s),bT=p(EE),ru=o(EE,"TD",{align:!0});var PI=l(ru);TT=u(PI,"a string to be translated in the original languages"),PI.forEach(s),EE.forEach(s),jT=p(ke),yn=o(ke,"TR",{});var yE=l(yn);ou=o(yE,"TD",{align:!0});var RI=l(ou);Nd=o(RI,"STRONG",{});var SI=l(Nd);kT=u(SI,"options"),SI.forEach(s),RI.forEach(s),AT=p(yE),lu=o(yE,"TD",{align:!0});var NI=l(lu);DT=u(NI,"a dict containing the following keys:"),NI.forEach(s),yE.forEach(s),OT=p(ke),wn=o(ke,"TR",{});var wE=l(wn);iu=o(wE,"TD",{align:!0});var xI=l(iu);PT=u(xI,"use_gpu"),xI.forEach(s),RT=p(wE),bt=o(wE,"TD",{align:!0});var bE=l(bt);ST=u(bE,"(Default: "),xd=o(bE,"CODE",{});var II=l(xd);NT=u(II,"false"),II.forEach(s),xT=u(bE,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),bE.forEach(s),wE.forEach(s),IT=p(ke),bn=o(ke,"TR",{});var TE=l(bn);uu=o(TE,"TD",{align:!0});var HI=l(uu);HT=u(HI,"use_cache"),HI.forEach(s),BT=p(TE),Tt=o(TE,"TD",{align:!0});var jE=l(Tt);CT=u(jE,"(Default: "),Id=o(jE,"CODE",{});var BI=l(Id);GT=u(BI,"true"),BI.forEach(s),LT=u(jE,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),jE.forEach(s),TE.forEach(s),UT=p(ke),Tn=o(ke,"TR",{});var kE=l(Tn);cu=o(kE,"TD",{align:!0});var CI=l(cu);zT=u(CI,"wait_for_model"),CI.forEach(s),MT=p(kE),jt=o(kE,"TD",{align:!0});var AE=l(jt);KT=u(AE,"(Default: "),Hd=o(AE,"CODE",{});var GI=l(Hd);FT=u(GI,"false"),GI.forEach(s),JT=u(AE,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),AE.forEach(s),kE.forEach(s),ke.forEach(s),_E.forEach(s),c1=p(a),fu=o(a,"P",{});var LI=l(fu);WT=u(LI,"Return value is either a dict or a list of dicts if you sent a list of inputs"),LI.forEach(s),f1=p(a),kt=o(a,"TABLE",{});var DE=l(kt);Bd=o(DE,"THEAD",{});var UI=l(Bd);jn=o(UI,"TR",{});var OE=l(jn);pu=o(OE,"TH",{align:!0});var zI=l(pu);YT=u(zI,"Returned values"),zI.forEach(s),VT=p(OE),Cd=o(OE,"TH",{align:!0}),l(Cd).forEach(s),OE.forEach(s),UI.forEach(s),XT=p(DE),Gd=o(DE,"TBODY",{});var MI=l(Gd);kn=o(MI,"TR",{});var PE=l(kn);hu=o(PE,"TD",{align:!0});var KI=l(hu);Ld=o(KI,"STRONG",{});var FI=l(Ld);QT=u(FI,"translation_text"),FI.forEach(s),KI.forEach(s),ZT=p(PE),du=o(PE,"TD",{align:!0});var JI=l(du);ej=u(JI,"The string after translation"),JI.forEach(s),PE.forEach(s),MI.forEach(s),DE.forEach(s),p1=p(a),He=o(a,"H2",{class:!0});var RE=l(He);At=o(RE,"A",{id:!0,class:!0,href:!0});var WI=l(At);Ud=o(WI,"SPAN",{});var YI=l(Ud);v(An.$$.fragment,YI),YI.forEach(s),WI.forEach(s),tj=p(RE),zd=o(RE,"SPAN",{});var VI=l(zd);sj=u(VI,"Summarization task"),VI.forEach(s),RE.forEach(s),h1=p(a),Dt=o(a,"P",{});var SE=l(Dt);aj=u(SE,`This task is well known to summarize longer text into shorter text.
Be careful, some models have a maximum length of input. That means that
the summary cannot handle full books for instance. Be careful when
choosing your model. If you want to discuss your summarization needs,
please get in touch with us: <`),gu=o(SE,"A",{href:!0});var XI=l(gu);nj=u(XI,"api-enterprise@huggingface.co"),XI.forEach(s),rj=u(SE,">"),SE.forEach(s),d1=p(a),v(Ot.$$.fragment,a),g1=p(a),Dn=o(a,"P",{});var Ox=l(Dn);oj=u(Ox,"Available with: "),On=o(Ox,"A",{href:!0,rel:!0});var QI=l(On);lj=u(QI,"\u{1F917} Transformers"),QI.forEach(s),Ox.forEach(s),m1=p(a),mu=o(a,"P",{});var ZI=l(mu);ij=u(ZI,"Example:"),ZI.forEach(s),q1=p(a),v(Pt.$$.fragment,a),$1=p(a),qu=o(a,"P",{});var eH=l(qu);uj=u(eH,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),eH.forEach(s),_1=p(a),Rt=o(a,"TABLE",{});var NE=l(Rt);Md=o(NE,"THEAD",{});var tH=l(Md);Pn=o(tH,"TR",{});var xE=l(Pn);$u=o(xE,"TH",{align:!0});var sH=l($u);cj=u(sH,"All parameters"),sH.forEach(s),fj=p(xE),Kd=o(xE,"TH",{align:!0}),l(Kd).forEach(s),xE.forEach(s),tH.forEach(s),pj=p(NE),G=o(NE,"TBODY",{});var U=l(G);Rn=o(U,"TR",{});var IE=l(Rn);Sn=o(IE,"TD",{align:!0});var Px=l(Sn);Fd=o(Px,"STRONG",{});var aH=l(Fd);hj=u(aH,"inputs"),aH.forEach(s),dj=u(Px," (required)"),Px.forEach(s),gj=p(IE),_u=o(IE,"TD",{align:!0});var nH=l(_u);mj=u(nH,"a string to be summarized"),nH.forEach(s),IE.forEach(s),qj=p(U),Nn=o(U,"TR",{});var HE=l(Nn);vu=o(HE,"TD",{align:!0});var rH=l(vu);Jd=o(rH,"STRONG",{});var oH=l(Jd);$j=u(oH,"parameters"),oH.forEach(s),rH.forEach(s),_j=p(HE),Eu=o(HE,"TD",{align:!0});var lH=l(Eu);vj=u(lH,"a dict containing the following keys:"),lH.forEach(s),HE.forEach(s),Ej=p(U),xn=o(U,"TR",{});var BE=l(xn);yu=o(BE,"TD",{align:!0});var iH=l(yu);yj=u(iH,"min_length"),iH.forEach(s),wj=p(BE),de=o(BE,"TD",{align:!0});var Yh=l(de);bj=u(Yh,"(Default: "),Wd=o(Yh,"CODE",{});var uH=l(Wd);Tj=u(uH,"None"),uH.forEach(s),jj=u(Yh,"). Integer to define the minimum length "),Yd=o(Yh,"STRONG",{});var cH=l(Yd);kj=u(cH,"in tokens"),cH.forEach(s),Aj=u(Yh," of the output summary."),Yh.forEach(s),BE.forEach(s),Dj=p(U),In=o(U,"TR",{});var CE=l(In);wu=o(CE,"TD",{align:!0});var fH=l(wu);Oj=u(fH,"max_length"),fH.forEach(s),Pj=p(CE),ge=o(CE,"TD",{align:!0});var Vh=l(ge);Rj=u(Vh,"(Default: "),Vd=o(Vh,"CODE",{});var pH=l(Vd);Sj=u(pH,"None"),pH.forEach(s),Nj=u(Vh,"). Integer to define the maximum length "),Xd=o(Vh,"STRONG",{});var hH=l(Xd);xj=u(hH,"in tokens"),hH.forEach(s),Ij=u(Vh," of the output summary."),Vh.forEach(s),CE.forEach(s),Hj=p(U),Hn=o(U,"TR",{});var GE=l(Hn);bu=o(GE,"TD",{align:!0});var dH=l(bu);Bj=u(dH,"top_k"),dH.forEach(s),Cj=p(GE),me=o(GE,"TD",{align:!0});var Xh=l(me);Gj=u(Xh,"(Default: "),Qd=o(Xh,"CODE",{});var gH=l(Qd);Lj=u(gH,"None"),gH.forEach(s),Uj=u(Xh,"). Integer to define the top tokens considered within the "),Zd=o(Xh,"CODE",{});var mH=l(Zd);zj=u(mH,"sample"),mH.forEach(s),Mj=u(Xh," operation to create new text."),Xh.forEach(s),GE.forEach(s),Kj=p(U),Bn=o(U,"TR",{});var LE=l(Bn);Tu=o(LE,"TD",{align:!0});var qH=l(Tu);Fj=u(qH,"top_p"),qH.forEach(s),Jj=p(LE),re=o(LE,"TD",{align:!0});var za=l(re);Wj=u(za,"(Default: "),eg=o(za,"CODE",{});var $H=l(eg);Yj=u($H,"None"),$H.forEach(s),Vj=u(za,"). Float to define the tokens that are within the "),tg=o(za,"CODE",{});var _H=l(tg);Xj=u(_H,"sample"),_H.forEach(s),Qj=u(za," operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than "),sg=o(za,"CODE",{});var vH=l(sg);Zj=u(vH,"top_p"),vH.forEach(s),e4=u(za,"."),za.forEach(s),LE.forEach(s),t4=p(U),Cn=o(U,"TR",{});var UE=l(Cn);ju=o(UE,"TD",{align:!0});var EH=l(ju);s4=u(EH,"temperature"),EH.forEach(s),a4=p(UE),qe=o(UE,"TD",{align:!0});var Qh=l(qe);n4=u(Qh,"(Default: "),ag=o(Qh,"CODE",{});var yH=l(ag);r4=u(yH,"1.0"),yH.forEach(s),o4=u(Qh,"). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means "),ng=o(Qh,"CODE",{});var wH=l(ng);l4=u(wH,"100.0"),wH.forEach(s),i4=u(Qh," is getting closer to uniform probability."),Qh.forEach(s),UE.forEach(s),u4=p(U),Gn=o(U,"TR",{});var zE=l(Gn);ku=o(zE,"TD",{align:!0});var bH=l(ku);c4=u(bH,"repetition_penalty"),bH.forEach(s),f4=p(zE),St=o(zE,"TD",{align:!0});var ME=l(St);p4=u(ME,"(Default: "),rg=o(ME,"CODE",{});var TH=l(rg);h4=u(TH,"None"),TH.forEach(s),d4=u(ME,"). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."),ME.forEach(s),zE.forEach(s),g4=p(U),Ln=o(U,"TR",{});var KE=l(Ln);Au=o(KE,"TD",{align:!0});var jH=l(Au);m4=u(jH,"max_time"),jH.forEach(s),q4=p(KE),Nt=o(KE,"TD",{align:!0});var FE=l(Nt);$4=u(FE,"(Default: "),og=o(FE,"CODE",{});var kH=l(og);_4=u(kH,"None"),kH.forEach(s),v4=u(FE,"). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit."),FE.forEach(s),KE.forEach(s),E4=p(U),Un=o(U,"TR",{});var JE=l(Un);Du=o(JE,"TD",{align:!0});var AH=l(Du);lg=o(AH,"STRONG",{});var DH=l(lg);y4=u(DH,"options"),DH.forEach(s),AH.forEach(s),w4=p(JE),Ou=o(JE,"TD",{align:!0});var OH=l(Ou);b4=u(OH,"a dict containing the following keys:"),OH.forEach(s),JE.forEach(s),T4=p(U),zn=o(U,"TR",{});var WE=l(zn);Pu=o(WE,"TD",{align:!0});var PH=l(Pu);j4=u(PH,"use_gpu"),PH.forEach(s),k4=p(WE),xt=o(WE,"TD",{align:!0});var YE=l(xt);A4=u(YE,"(Default: "),ig=o(YE,"CODE",{});var RH=l(ig);D4=u(RH,"false"),RH.forEach(s),O4=u(YE,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),YE.forEach(s),WE.forEach(s),P4=p(U),Mn=o(U,"TR",{});var VE=l(Mn);Ru=o(VE,"TD",{align:!0});var SH=l(Ru);R4=u(SH,"use_cache"),SH.forEach(s),S4=p(VE),It=o(VE,"TD",{align:!0});var XE=l(It);N4=u(XE,"(Default: "),ug=o(XE,"CODE",{});var NH=l(ug);x4=u(NH,"true"),NH.forEach(s),I4=u(XE,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),XE.forEach(s),VE.forEach(s),H4=p(U),Kn=o(U,"TR",{});var QE=l(Kn);Su=o(QE,"TD",{align:!0});var xH=l(Su);B4=u(xH,"wait_for_model"),xH.forEach(s),C4=p(QE),Ht=o(QE,"TD",{align:!0});var ZE=l(Ht);G4=u(ZE,"(Default: "),cg=o(ZE,"CODE",{});var IH=l(cg);L4=u(IH,"false"),IH.forEach(s),U4=u(ZE,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),ZE.forEach(s),QE.forEach(s),U.forEach(s),NE.forEach(s),v1=p(a),Nu=o(a,"P",{});var HH=l(Nu);z4=u(HH,"Return value is either a dict or a list of dicts if you sent a list of inputs"),HH.forEach(s),E1=p(a),Bt=o(a,"TABLE",{});var ey=l(Bt);fg=o(ey,"THEAD",{});var BH=l(fg);Fn=o(BH,"TR",{});var ty=l(Fn);xu=o(ty,"TH",{align:!0});var CH=l(xu);M4=u(CH,"Returned values"),CH.forEach(s),K4=p(ty),pg=o(ty,"TH",{align:!0}),l(pg).forEach(s),ty.forEach(s),BH.forEach(s),F4=p(ey),hg=o(ey,"TBODY",{});var GH=l(hg);Jn=o(GH,"TR",{});var sy=l(Jn);Iu=o(sy,"TD",{align:!0});var LH=l(Iu);dg=o(LH,"STRONG",{});var UH=l(dg);J4=u(UH,"summarization_text"),UH.forEach(s),LH.forEach(s),W4=p(sy),Hu=o(sy,"TD",{align:!0});var zH=l(Hu);Y4=u(zH,"The string after translation"),zH.forEach(s),sy.forEach(s),GH.forEach(s),ey.forEach(s),y1=p(a),Be=o(a,"H2",{class:!0});var ay=l(Be);Ct=o(ay,"A",{id:!0,class:!0,href:!0});var MH=l(Ct);gg=o(MH,"SPAN",{});var KH=l(gg);v(Wn.$$.fragment,KH),KH.forEach(s),MH.forEach(s),V4=p(ay),mg=o(ay,"SPAN",{});var FH=l(mg);X4=u(FH,"Conversational task"),FH.forEach(s),ay.forEach(s),w1=p(a),Bu=o(a,"P",{});var JH=l(Bu);Q4=u(JH,`This task corresponds to any chatbot like structure. Models tend to have
shorter max_length, so please check with caution when using a given
model if you need long range dependency or not.`),JH.forEach(s),b1=p(a),v(Gt.$$.fragment,a),T1=p(a),Yn=o(a,"P",{});var Rx=l(Yn);Z4=u(Rx,"Available with: "),Vn=o(Rx,"A",{href:!0,rel:!0});var WH=l(Vn);ek=u(WH,"\u{1F917} Transformers"),WH.forEach(s),Rx.forEach(s),j1=p(a),Cu=o(a,"P",{});var YH=l(Cu);tk=u(YH,"Example:"),YH.forEach(s),k1=p(a),v(Lt.$$.fragment,a),A1=p(a),Gu=o(a,"P",{});var VH=l(Gu);sk=u(VH,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),VH.forEach(s),D1=p(a),Ut=o(a,"TABLE",{});var ny=l(Ut);qg=o(ny,"THEAD",{});var XH=l(qg);Xn=o(XH,"TR",{});var ry=l(Xn);Lu=o(ry,"TH",{align:!0});var QH=l(Lu);ak=u(QH,"All parameters"),QH.forEach(s),nk=p(ry),$g=o(ry,"TH",{align:!0}),l($g).forEach(s),ry.forEach(s),XH.forEach(s),rk=p(ny),N=o(ny,"TBODY",{});var H=l(N);Qn=o(H,"TR",{});var oy=l(Qn);Zn=o(oy,"TD",{align:!0});var Sx=l(Zn);_g=o(Sx,"STRONG",{});var ZH=l(_g);ok=u(ZH,"inputs"),ZH.forEach(s),lk=u(Sx," (required)"),Sx.forEach(s),ik=p(oy),vg=o(oy,"TD",{align:!0}),l(vg).forEach(s),oy.forEach(s),uk=p(H),er=o(H,"TR",{});var ly=l(er);Uu=o(ly,"TD",{align:!0});var eB=l(Uu);ck=u(eB,"text (required)"),eB.forEach(s),fk=p(ly),zu=o(ly,"TD",{align:!0});var tB=l(zu);pk=u(tB,"The last input from the user in the conversation."),tB.forEach(s),ly.forEach(s),hk=p(H),tr=o(H,"TR",{});var iy=l(tr);Mu=o(iy,"TD",{align:!0});var sB=l(Mu);dk=u(sB,"generated_responses"),sB.forEach(s),gk=p(iy),Ku=o(iy,"TD",{align:!0});var aB=l(Ku);mk=u(aB,"A list of strings corresponding to the earlier replies from the model."),aB.forEach(s),iy.forEach(s),qk=p(H),sr=o(H,"TR",{});var uy=l(sr);Fu=o(uy,"TD",{align:!0});var nB=l(Fu);$k=u(nB,"past_user_inputs"),nB.forEach(s),_k=p(uy),zt=o(uy,"TD",{align:!0});var cy=l(zt);vk=u(cy,"A list of strings corresponding to the earlier replies from the user. Should be of the same length of "),Eg=o(cy,"CODE",{});var rB=l(Eg);Ek=u(rB,"generated_responses"),rB.forEach(s),yk=u(cy,"."),cy.forEach(s),uy.forEach(s),wk=p(H),ar=o(H,"TR",{});var fy=l(ar);Ju=o(fy,"TD",{align:!0});var oB=l(Ju);yg=o(oB,"STRONG",{});var lB=l(yg);bk=u(lB,"parameters"),lB.forEach(s),oB.forEach(s),Tk=p(fy),Wu=o(fy,"TD",{align:!0});var iB=l(Wu);jk=u(iB,"a dict containing the following keys:"),iB.forEach(s),fy.forEach(s),kk=p(H),nr=o(H,"TR",{});var py=l(nr);Yu=o(py,"TD",{align:!0});var uB=l(Yu);Ak=u(uB,"min_length"),uB.forEach(s),Dk=p(py),$e=o(py,"TD",{align:!0});var Zh=l($e);Ok=u(Zh,"(Default: "),wg=o(Zh,"CODE",{});var cB=l(wg);Pk=u(cB,"None"),cB.forEach(s),Rk=u(Zh,"). Integer to define the minimum length "),bg=o(Zh,"STRONG",{});var fB=l(bg);Sk=u(fB,"in tokens"),fB.forEach(s),Nk=u(Zh," of the output summary."),Zh.forEach(s),py.forEach(s),xk=p(H),rr=o(H,"TR",{});var hy=l(rr);Vu=o(hy,"TD",{align:!0});var pB=l(Vu);Ik=u(pB,"max_length"),pB.forEach(s),Hk=p(hy),_e=o(hy,"TD",{align:!0});var ed=l(_e);Bk=u(ed,"(Default: "),Tg=o(ed,"CODE",{});var hB=l(Tg);Ck=u(hB,"None"),hB.forEach(s),Gk=u(ed,"). Integer to define the maximum length "),jg=o(ed,"STRONG",{});var dB=l(jg);Lk=u(dB,"in tokens"),dB.forEach(s),Uk=u(ed," of the output summary."),ed.forEach(s),hy.forEach(s),zk=p(H),or=o(H,"TR",{});var dy=l(or);Xu=o(dy,"TD",{align:!0});var gB=l(Xu);Mk=u(gB,"top_k"),gB.forEach(s),Kk=p(dy),ve=o(dy,"TD",{align:!0});var td=l(ve);Fk=u(td,"(Default: "),kg=o(td,"CODE",{});var mB=l(kg);Jk=u(mB,"None"),mB.forEach(s),Wk=u(td,"). Integer to define the top tokens considered within the "),Ag=o(td,"CODE",{});var qB=l(Ag);Yk=u(qB,"sample"),qB.forEach(s),Vk=u(td," operation to create new text."),td.forEach(s),dy.forEach(s),Xk=p(H),lr=o(H,"TR",{});var gy=l(lr);Qu=o(gy,"TD",{align:!0});var $B=l(Qu);Qk=u($B,"top_p"),$B.forEach(s),Zk=p(gy),oe=o(gy,"TD",{align:!0});var Ma=l(oe);e5=u(Ma,"(Default: "),Dg=o(Ma,"CODE",{});var _B=l(Dg);t5=u(_B,"None"),_B.forEach(s),s5=u(Ma,"). Float to define the tokens that are within the "),Og=o(Ma,"CODE",{});var vB=l(Og);a5=u(vB,"sample"),vB.forEach(s),n5=u(Ma," operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than "),Pg=o(Ma,"CODE",{});var EB=l(Pg);r5=u(EB,"top_p"),EB.forEach(s),o5=u(Ma,"."),Ma.forEach(s),gy.forEach(s),l5=p(H),ir=o(H,"TR",{});var my=l(ir);Zu=o(my,"TD",{align:!0});var yB=l(Zu);i5=u(yB,"temperature"),yB.forEach(s),u5=p(my),Ee=o(my,"TD",{align:!0});var sd=l(Ee);c5=u(sd,"(Default: "),Rg=o(sd,"CODE",{});var wB=l(Rg);f5=u(wB,"1.0"),wB.forEach(s),p5=u(sd,"). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means "),Sg=o(sd,"CODE",{});var bB=l(Sg);h5=u(bB,"100.0"),bB.forEach(s),d5=u(sd," is getting closer to uniform probability."),sd.forEach(s),my.forEach(s),g5=p(H),ur=o(H,"TR",{});var qy=l(ur);ec=o(qy,"TD",{align:!0});var TB=l(ec);m5=u(TB,"repetition_penalty"),TB.forEach(s),q5=p(qy),Mt=o(qy,"TD",{align:!0});var $y=l(Mt);$5=u($y,"(Default: "),Ng=o($y,"CODE",{});var jB=l(Ng);_5=u(jB,"None"),jB.forEach(s),v5=u($y,"). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."),$y.forEach(s),qy.forEach(s),E5=p(H),cr=o(H,"TR",{});var _y=l(cr);tc=o(_y,"TD",{align:!0});var kB=l(tc);y5=u(kB,"max_time"),kB.forEach(s),w5=p(_y),Kt=o(_y,"TD",{align:!0});var vy=l(Kt);b5=u(vy,"(Default: "),xg=o(vy,"CODE",{});var AB=l(xg);T5=u(AB,"None"),AB.forEach(s),j5=u(vy,"). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit."),vy.forEach(s),_y.forEach(s),k5=p(H),fr=o(H,"TR",{});var Ey=l(fr);sc=o(Ey,"TD",{align:!0});var DB=l(sc);Ig=o(DB,"STRONG",{});var OB=l(Ig);A5=u(OB,"options"),OB.forEach(s),DB.forEach(s),D5=p(Ey),ac=o(Ey,"TD",{align:!0});var PB=l(ac);O5=u(PB,"a dict containing the following keys:"),PB.forEach(s),Ey.forEach(s),P5=p(H),pr=o(H,"TR",{});var yy=l(pr);nc=o(yy,"TD",{align:!0});var RB=l(nc);R5=u(RB,"use_gpu"),RB.forEach(s),S5=p(yy),Ft=o(yy,"TD",{align:!0});var wy=l(Ft);N5=u(wy,"(Default: "),Hg=o(wy,"CODE",{});var SB=l(Hg);x5=u(SB,"false"),SB.forEach(s),I5=u(wy,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),wy.forEach(s),yy.forEach(s),H5=p(H),hr=o(H,"TR",{});var by=l(hr);rc=o(by,"TD",{align:!0});var NB=l(rc);B5=u(NB,"use_cache"),NB.forEach(s),C5=p(by),Jt=o(by,"TD",{align:!0});var Ty=l(Jt);G5=u(Ty,"(Default: "),Bg=o(Ty,"CODE",{});var xB=l(Bg);L5=u(xB,"true"),xB.forEach(s),U5=u(Ty,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),Ty.forEach(s),by.forEach(s),z5=p(H),dr=o(H,"TR",{});var jy=l(dr);oc=o(jy,"TD",{align:!0});var IB=l(oc);M5=u(IB,"wait_for_model"),IB.forEach(s),K5=p(jy),Wt=o(jy,"TD",{align:!0});var ky=l(Wt);F5=u(ky,"(Default: "),Cg=o(ky,"CODE",{});var HB=l(Cg);J5=u(HB,"false"),HB.forEach(s),W5=u(ky,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),ky.forEach(s),jy.forEach(s),H.forEach(s),ny.forEach(s),O1=p(a),lc=o(a,"P",{});var BB=l(lc);Y5=u(BB,"Return value is either a dict or a list of dicts if you sent a list of inputs"),BB.forEach(s),P1=p(a),Yt=o(a,"TABLE",{});var Ay=l(Yt);Gg=o(Ay,"THEAD",{});var CB=l(Gg);gr=o(CB,"TR",{});var Dy=l(gr);ic=o(Dy,"TH",{align:!0});var GB=l(ic);V5=u(GB,"Returned values"),GB.forEach(s),X5=p(Dy),Lg=o(Dy,"TH",{align:!0}),l(Lg).forEach(s),Dy.forEach(s),CB.forEach(s),Q5=p(Ay),ie=o(Ay,"TBODY",{});var Ka=l(ie);mr=o(Ka,"TR",{});var Oy=l(mr);uc=o(Oy,"TD",{align:!0});var LB=l(uc);Ug=o(LB,"STRONG",{});var UB=l(Ug);Z5=u(UB,"generated_text"),UB.forEach(s),LB.forEach(s),e6=p(Oy),cc=o(Oy,"TD",{align:!0});var zB=l(cc);t6=u(zB,"The answer of the bot"),zB.forEach(s),Oy.forEach(s),s6=p(Ka),qr=o(Ka,"TR",{});var Py=l(qr);fc=o(Py,"TD",{align:!0});var MB=l(fc);zg=o(MB,"STRONG",{});var KB=l(zg);a6=u(KB,"conversation"),KB.forEach(s),MB.forEach(s),n6=p(Py),pc=o(Py,"TD",{align:!0});var FB=l(pc);r6=u(FB,"A facility dictionnary to send back for the next input (with the new user input addition)."),FB.forEach(s),Py.forEach(s),o6=p(Ka),$r=o(Ka,"TR",{});var Ry=l($r);hc=o(Ry,"TD",{align:!0});var JB=l(hc);l6=u(JB,"past_user_inputs"),JB.forEach(s),i6=p(Ry),dc=o(Ry,"TD",{align:!0});var WB=l(dc);u6=u(WB,"List of strings. The last inputs from the user in the conversation, <em>after the model has run."),WB.forEach(s),Ry.forEach(s),c6=p(Ka),_r=o(Ka,"TR",{});var Sy=l(_r);gc=o(Sy,"TD",{align:!0});var YB=l(gc);f6=u(YB,"generated_responses"),YB.forEach(s),p6=p(Sy),mc=o(Sy,"TD",{align:!0});var VB=l(mc);h6=u(VB,"List of strings. The last outputs from the model in the conversation, <em>after the model has run."),VB.forEach(s),Sy.forEach(s),Ka.forEach(s),Ay.forEach(s),R1=p(a),Ce=o(a,"H2",{class:!0});var Ny=l(Ce);Vt=o(Ny,"A",{id:!0,class:!0,href:!0});var XB=l(Vt);Mg=o(XB,"SPAN",{});var QB=l(Mg);v(vr.$$.fragment,QB),QB.forEach(s),XB.forEach(s),d6=p(Ny),Kg=o(Ny,"SPAN",{});var ZB=l(Kg);g6=u(ZB,"Table question answering task"),ZB.forEach(s),Ny.forEach(s),S1=p(a),qc=o(a,"P",{});var eC=l(qc);m6=u(eC,`Don\u2019t know SQL? Don\u2019t want to dive into a large spreadsheet? Ask
questions in plain english!`),eC.forEach(s),N1=p(a),v(Xt.$$.fragment,a),x1=p(a),Er=o(a,"P",{});var Nx=l(Er);q6=u(Nx,"Available with: "),yr=o(Nx,"A",{href:!0,rel:!0});var tC=l(yr);$6=u(tC,"\u{1F917} Transformers"),tC.forEach(s),Nx.forEach(s),I1=p(a),$c=o(a,"P",{});var sC=l($c);_6=u(sC,"Example:"),sC.forEach(s),H1=p(a),v(Qt.$$.fragment,a),B1=p(a),_c=o(a,"P",{});var aC=l(_c);v6=u(aC,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),aC.forEach(s),C1=p(a),Zt=o(a,"TABLE",{});var xy=l(Zt);Fg=o(xy,"THEAD",{});var nC=l(Fg);wr=o(nC,"TR",{});var Iy=l(wr);vc=o(Iy,"TH",{align:!0});var rC=l(vc);E6=u(rC,"All parameters"),rC.forEach(s),y6=p(Iy),Jg=o(Iy,"TH",{align:!0}),l(Jg).forEach(s),Iy.forEach(s),nC.forEach(s),w6=p(xy),F=o(xy,"TBODY",{});var V=l(F);br=o(V,"TR",{});var Hy=l(br);Tr=o(Hy,"TD",{align:!0});var xx=l(Tr);Wg=o(xx,"STRONG",{});var oC=l(Wg);b6=u(oC,"inputs"),oC.forEach(s),T6=u(xx," (required)"),xx.forEach(s),j6=p(Hy),Yg=o(Hy,"TD",{align:!0}),l(Yg).forEach(s),Hy.forEach(s),k6=p(V),jr=o(V,"TR",{});var By=l(jr);Ec=o(By,"TD",{align:!0});var lC=l(Ec);A6=u(lC,"query (required)"),lC.forEach(s),D6=p(By),yc=o(By,"TD",{align:!0});var iC=l(yc);O6=u(iC,"The query in plain text that you want to ask the table"),iC.forEach(s),By.forEach(s),P6=p(V),kr=o(V,"TR",{});var Cy=l(kr);wc=o(Cy,"TD",{align:!0});var uC=l(wc);R6=u(uC,"table (required)"),uC.forEach(s),S6=p(Cy),bc=o(Cy,"TD",{align:!0});var cC=l(bc);N6=u(cC,"A table of data represented as a dict of list where entries are headers and the lists are all the values, all lists must have the same size."),cC.forEach(s),Cy.forEach(s),x6=p(V),Ar=o(V,"TR",{});var Gy=l(Ar);Tc=o(Gy,"TD",{align:!0});var fC=l(Tc);Vg=o(fC,"STRONG",{});var pC=l(Vg);I6=u(pC,"options"),pC.forEach(s),fC.forEach(s),H6=p(Gy),jc=o(Gy,"TD",{align:!0});var hC=l(jc);B6=u(hC,"a dict containing the following keys:"),hC.forEach(s),Gy.forEach(s),C6=p(V),Dr=o(V,"TR",{});var Ly=l(Dr);kc=o(Ly,"TD",{align:!0});var dC=l(kc);G6=u(dC,"use_gpu"),dC.forEach(s),L6=p(Ly),es=o(Ly,"TD",{align:!0});var Uy=l(es);U6=u(Uy,"(Default: "),Xg=o(Uy,"CODE",{});var gC=l(Xg);z6=u(gC,"false"),gC.forEach(s),M6=u(Uy,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),Uy.forEach(s),Ly.forEach(s),K6=p(V),Or=o(V,"TR",{});var zy=l(Or);Ac=o(zy,"TD",{align:!0});var mC=l(Ac);F6=u(mC,"use_cache"),mC.forEach(s),J6=p(zy),ts=o(zy,"TD",{align:!0});var My=l(ts);W6=u(My,"(Default: "),Qg=o(My,"CODE",{});var qC=l(Qg);Y6=u(qC,"true"),qC.forEach(s),V6=u(My,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),My.forEach(s),zy.forEach(s),X6=p(V),Pr=o(V,"TR",{});var Ky=l(Pr);Dc=o(Ky,"TD",{align:!0});var $C=l(Dc);Q6=u($C,"wait_for_model"),$C.forEach(s),Z6=p(Ky),ss=o(Ky,"TD",{align:!0});var Fy=l(ss);e7=u(Fy,"(Default: "),Zg=o(Fy,"CODE",{});var _C=l(Zg);t7=u(_C,"false"),_C.forEach(s),s7=u(Fy,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),Fy.forEach(s),Ky.forEach(s),V.forEach(s),xy.forEach(s),G1=p(a),Oc=o(a,"P",{});var vC=l(Oc);a7=u(vC,"Return value is either a dict or a list of dicts if you sent a list of inputs"),vC.forEach(s),L1=p(a),v(as.$$.fragment,a),U1=p(a),ns=o(a,"TABLE",{});var Jy=l(ns);em=o(Jy,"THEAD",{});var EC=l(em);Rr=o(EC,"TR",{});var Wy=l(Rr);Pc=o(Wy,"TH",{align:!0});var yC=l(Pc);n7=u(yC,"Returned values"),yC.forEach(s),r7=p(Wy),tm=o(Wy,"TH",{align:!0}),l(tm).forEach(s),Wy.forEach(s),EC.forEach(s),o7=p(Jy),ue=o(Jy,"TBODY",{});var Fa=l(ue);Sr=o(Fa,"TR",{});var Yy=l(Sr);Rc=o(Yy,"TD",{align:!0});var wC=l(Rc);sm=o(wC,"STRONG",{});var bC=l(sm);l7=u(bC,"answer"),bC.forEach(s),wC.forEach(s),i7=p(Yy),Sc=o(Yy,"TD",{align:!0});var TC=l(Sc);u7=u(TC,"The plaintext answer"),TC.forEach(s),Yy.forEach(s),c7=p(Fa),Nr=o(Fa,"TR",{});var Vy=l(Nr);Nc=o(Vy,"TD",{align:!0});var jC=l(Nc);am=o(jC,"STRONG",{});var kC=l(am);f7=u(kC,"coordinates"),kC.forEach(s),jC.forEach(s),p7=p(Vy),xc=o(Vy,"TD",{align:!0});var AC=l(xc);h7=u(AC,"a list of coordinates of the cells referenced in the answer"),AC.forEach(s),Vy.forEach(s),d7=p(Fa),xr=o(Fa,"TR",{});var Xy=l(xr);Ic=o(Xy,"TD",{align:!0});var DC=l(Ic);nm=o(DC,"STRONG",{});var OC=l(nm);g7=u(OC,"cells"),OC.forEach(s),DC.forEach(s),m7=p(Xy),Hc=o(Xy,"TD",{align:!0});var PC=l(Hc);q7=u(PC,"a list of coordinates of the cells contents"),PC.forEach(s),Xy.forEach(s),$7=p(Fa),Ir=o(Fa,"TR",{});var Qy=l(Ir);Bc=o(Qy,"TD",{align:!0});var RC=l(Bc);rm=o(RC,"STRONG",{});var SC=l(rm);_7=u(SC,"aggregator"),SC.forEach(s),RC.forEach(s),v7=p(Qy),Cc=o(Qy,"TD",{align:!0});var NC=l(Cc);E7=u(NC,"The aggregator used to get the answer"),NC.forEach(s),Qy.forEach(s),Fa.forEach(s),Jy.forEach(s),z1=p(a),Ge=o(a,"H2",{class:!0});var Zy=l(Ge);rs=o(Zy,"A",{id:!0,class:!0,href:!0});var xC=l(rs);om=o(xC,"SPAN",{});var IC=l(om);v(Hr.$$.fragment,IC),IC.forEach(s),xC.forEach(s),y7=p(Zy),lm=o(Zy,"SPAN",{});var HC=l(lm);w7=u(HC,"Question answering task"),HC.forEach(s),Zy.forEach(s),M1=p(a),Gc=o(a,"P",{});var BC=l(Gc);b7=u(BC,"Want to have a nice know-it-all bot that can answer any question?"),BC.forEach(s),K1=p(a),v(os.$$.fragment,a),F1=p(a),Le=o(a,"P",{});var H_=l(Le);T7=u(H_,"Available with: "),Br=o(H_,"A",{href:!0,rel:!0});var CC=l(Br);j7=u(CC,"\u{1F917}Transformers"),CC.forEach(s),k7=u(H_,` and
`),Cr=o(H_,"A",{href:!0,rel:!0});var GC=l(Cr);A7=u(GC,"AllenNLP"),GC.forEach(s),H_.forEach(s),J1=p(a),Lc=o(a,"P",{});var LC=l(Lc);D7=u(LC,"Example:"),LC.forEach(s),W1=p(a),v(ls.$$.fragment,a),Y1=p(a),Uc=o(a,"P",{});var UC=l(Uc);O7=u(UC,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),UC.forEach(s),V1=p(a),zc=o(a,"P",{});var zC=l(zc);P7=u(zC,"Return value is either a dict or a list of dicts if you sent a list of inputs"),zC.forEach(s),X1=p(a),v(is.$$.fragment,a),Q1=p(a),us=o(a,"TABLE",{});var ew=l(us);im=o(ew,"THEAD",{});var MC=l(im);Gr=o(MC,"TR",{});var tw=l(Gr);Mc=o(tw,"TH",{align:!0});var KC=l(Mc);R7=u(KC,"Returned values"),KC.forEach(s),S7=p(tw),um=o(tw,"TH",{align:!0}),l(um).forEach(s),tw.forEach(s),MC.forEach(s),N7=p(ew),ce=o(ew,"TBODY",{});var Ja=l(ce);Lr=o(Ja,"TR",{});var sw=l(Lr);Kc=o(sw,"TD",{align:!0});var FC=l(Kc);cm=o(FC,"STRONG",{});var JC=l(cm);x7=u(JC,"answer"),JC.forEach(s),FC.forEach(s),I7=p(sw),Fc=o(sw,"TD",{align:!0});var WC=l(Fc);H7=u(WC,"A string that\u2019s the answer within the text."),WC.forEach(s),sw.forEach(s),B7=p(Ja),Ur=o(Ja,"TR",{});var aw=l(Ur);Jc=o(aw,"TD",{align:!0});var YC=l(Jc);fm=o(YC,"STRONG",{});var VC=l(fm);C7=u(VC,"score"),VC.forEach(s),YC.forEach(s),G7=p(aw),Wc=o(aw,"TD",{align:!0});var XC=l(Wc);L7=u(XC,"A float that represents how likely that the answer is correct"),XC.forEach(s),aw.forEach(s),U7=p(Ja),zr=o(Ja,"TR",{});var nw=l(zr);Yc=o(nw,"TD",{align:!0});var QC=l(Yc);pm=o(QC,"STRONG",{});var ZC=l(pm);z7=u(ZC,"start"),ZC.forEach(s),QC.forEach(s),M7=p(nw),cs=o(nw,"TD",{align:!0});var rw=l(cs);K7=u(rw,"The index (string wise) of the start of the answer within "),hm=o(rw,"CODE",{});var eG=l(hm);F7=u(eG,"context"),eG.forEach(s),J7=u(rw,"."),rw.forEach(s),nw.forEach(s),W7=p(Ja),Mr=o(Ja,"TR",{});var ow=l(Mr);Vc=o(ow,"TD",{align:!0});var tG=l(Vc);dm=o(tG,"STRONG",{});var sG=l(dm);Y7=u(sG,"stop"),sG.forEach(s),tG.forEach(s),V7=p(ow),fs=o(ow,"TD",{align:!0});var lw=l(fs);X7=u(lw,"The index (string wise) of the stop of the answer within "),gm=o(lw,"CODE",{});var aG=l(gm);Q7=u(aG,"context"),aG.forEach(s),Z7=u(lw,"."),lw.forEach(s),ow.forEach(s),Ja.forEach(s),ew.forEach(s),Z1=p(a),Ue=o(a,"H2",{class:!0});var iw=l(Ue);ps=o(iw,"A",{id:!0,class:!0,href:!0});var nG=l(ps);mm=o(nG,"SPAN",{});var rG=l(mm);v(Kr.$$.fragment,rG),rG.forEach(s),nG.forEach(s),e9=p(iw),qm=o(iw,"SPAN",{});var oG=l(qm);t9=u(oG,"Text-classification task"),oG.forEach(s),iw.forEach(s),e2=p(a),Xc=o(a,"P",{});var lG=l(Xc);s9=u(lG,`Usually used for sentiment-analysis this will output the likelihood of
classes of an input.`),lG.forEach(s),t2=p(a),v(hs.$$.fragment,a),s2=p(a),Fr=o(a,"P",{});var Ix=l(Fr);a9=u(Ix,"Available with: "),Jr=o(Ix,"A",{href:!0,rel:!0});var iG=l(Jr);n9=u(iG,"\u{1F917} Transformers"),iG.forEach(s),Ix.forEach(s),a2=p(a),Qc=o(a,"P",{});var uG=l(Qc);r9=u(uG,"Example:"),uG.forEach(s),n2=p(a),v(ds.$$.fragment,a),r2=p(a),Zc=o(a,"P",{});var cG=l(Zc);o9=u(cG,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),cG.forEach(s),o2=p(a),gs=o(a,"TABLE",{});var uw=l(gs);$m=o(uw,"THEAD",{});var fG=l($m);Wr=o(fG,"TR",{});var cw=l(Wr);ef=o(cw,"TH",{align:!0});var pG=l(ef);l9=u(pG,"All parameters"),pG.forEach(s),i9=p(cw),_m=o(cw,"TH",{align:!0}),l(_m).forEach(s),cw.forEach(s),fG.forEach(s),u9=p(uw),ee=o(uw,"TBODY",{});var Ae=l(ee);Yr=o(Ae,"TR",{});var fw=l(Yr);Vr=o(fw,"TD",{align:!0});var Hx=l(Vr);vm=o(Hx,"STRONG",{});var hG=l(vm);c9=u(hG,"inputs"),hG.forEach(s),f9=u(Hx," (required)"),Hx.forEach(s),p9=p(fw),tf=o(fw,"TD",{align:!0});var dG=l(tf);h9=u(dG,"a string to be classified"),dG.forEach(s),fw.forEach(s),d9=p(Ae),Xr=o(Ae,"TR",{});var pw=l(Xr);sf=o(pw,"TD",{align:!0});var gG=l(sf);Em=o(gG,"STRONG",{});var mG=l(Em);g9=u(mG,"options"),mG.forEach(s),gG.forEach(s),m9=p(pw),af=o(pw,"TD",{align:!0});var qG=l(af);q9=u(qG,"a dict containing the following keys:"),qG.forEach(s),pw.forEach(s),$9=p(Ae),Qr=o(Ae,"TR",{});var hw=l(Qr);nf=o(hw,"TD",{align:!0});var $G=l(nf);_9=u($G,"use_gpu"),$G.forEach(s),v9=p(hw),ms=o(hw,"TD",{align:!0});var dw=l(ms);E9=u(dw,"(Default: "),ym=o(dw,"CODE",{});var _G=l(ym);y9=u(_G,"false"),_G.forEach(s),w9=u(dw,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),dw.forEach(s),hw.forEach(s),b9=p(Ae),Zr=o(Ae,"TR",{});var gw=l(Zr);rf=o(gw,"TD",{align:!0});var vG=l(rf);T9=u(vG,"use_cache"),vG.forEach(s),j9=p(gw),qs=o(gw,"TD",{align:!0});var mw=l(qs);k9=u(mw,"(Default: "),wm=o(mw,"CODE",{});var EG=l(wm);A9=u(EG,"true"),EG.forEach(s),D9=u(mw,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),mw.forEach(s),gw.forEach(s),O9=p(Ae),eo=o(Ae,"TR",{});var qw=l(eo);of=o(qw,"TD",{align:!0});var yG=l(of);P9=u(yG,"wait_for_model"),yG.forEach(s),R9=p(qw),$s=o(qw,"TD",{align:!0});var $w=l($s);S9=u($w,"(Default: "),bm=o($w,"CODE",{});var wG=l(bm);N9=u(wG,"false"),wG.forEach(s),x9=u($w,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),$w.forEach(s),qw.forEach(s),Ae.forEach(s),uw.forEach(s),l2=p(a),lf=o(a,"P",{});var bG=l(lf);I9=u(bG,"Return value is either a dict or a list of dicts if you sent a list of inputs"),bG.forEach(s),i2=p(a),v(_s.$$.fragment,a),u2=p(a),vs=o(a,"TABLE",{});var _w=l(vs);Tm=o(_w,"THEAD",{});var TG=l(Tm);to=o(TG,"TR",{});var vw=l(to);uf=o(vw,"TH",{align:!0});var jG=l(uf);H9=u(jG,"Returned values"),jG.forEach(s),B9=p(vw),jm=o(vw,"TH",{align:!0}),l(jm).forEach(s),vw.forEach(s),TG.forEach(s),C9=p(_w),so=o(_w,"TBODY",{});var Ew=l(so);ao=o(Ew,"TR",{});var yw=l(ao);cf=o(yw,"TD",{align:!0});var kG=l(cf);km=o(kG,"STRONG",{});var AG=l(km);G9=u(AG,"label"),AG.forEach(s),kG.forEach(s),L9=p(yw),ff=o(yw,"TD",{align:!0});var DG=l(ff);U9=u(DG,"The label for the class (model specific)"),DG.forEach(s),yw.forEach(s),z9=p(Ew),no=o(Ew,"TR",{});var ww=l(no);pf=o(ww,"TD",{align:!0});var OG=l(pf);Am=o(OG,"STRONG",{});var PG=l(Am);M9=u(PG,"score"),PG.forEach(s),OG.forEach(s),K9=p(ww),hf=o(ww,"TD",{align:!0});var RG=l(hf);F9=u(RG,"A floats that represents how likely is that the text belongs the this class."),RG.forEach(s),ww.forEach(s),Ew.forEach(s),_w.forEach(s),c2=p(a),ze=o(a,"H2",{class:!0});var bw=l(ze);Es=o(bw,"A",{id:!0,class:!0,href:!0});var SG=l(Es);Dm=o(SG,"SPAN",{});var NG=l(Dm);v(ro.$$.fragment,NG),NG.forEach(s),SG.forEach(s),J9=p(bw),Om=o(bw,"SPAN",{});var xG=l(Om);W9=u(xG,"Named Entity Recognition (NER) task"),xG.forEach(s),bw.forEach(s),f2=p(a),oo=o(a,"P",{});var Bx=l(oo);Y9=u(Bx,"See "),df=o(Bx,"A",{href:!0});var IG=l(df);V9=u(IG,"Token-classification task"),IG.forEach(s),Bx.forEach(s),p2=p(a),Me=o(a,"H2",{class:!0});var Tw=l(Me);ys=o(Tw,"A",{id:!0,class:!0,href:!0});var HG=l(ys);Pm=o(HG,"SPAN",{});var BG=l(Pm);v(lo.$$.fragment,BG),BG.forEach(s),HG.forEach(s),X9=p(Tw),Rm=o(Tw,"SPAN",{});var CG=l(Rm);Q9=u(CG,"Token-classification task"),CG.forEach(s),Tw.forEach(s),h2=p(a),gf=o(a,"P",{});var GG=l(gf);Z9=u(GG,`Usually used for sentence parsing, either grammatical, or Named Entity
Recognition (NER) to understand keywords contained within text.`),GG.forEach(s),d2=p(a),v(ws.$$.fragment,a),g2=p(a),Ke=o(a,"P",{});var B_=l(Ke);e8=u(B_,"Available with: "),io=o(B_,"A",{href:!0,rel:!0});var LG=l(io);t8=u(LG,"\u{1F917} Transformers"),LG.forEach(s),s8=u(B_,`,
`),uo=o(B_,"A",{href:!0,rel:!0});var UG=l(uo);a8=u(UG,"Flair"),UG.forEach(s),B_.forEach(s),m2=p(a),mf=o(a,"P",{});var zG=l(mf);n8=u(zG,"Example:"),zG.forEach(s),q2=p(a),v(bs.$$.fragment,a),$2=p(a),qf=o(a,"P",{});var MG=l(qf);r8=u(MG,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),MG.forEach(s),_2=p(a),Ts=o(a,"TABLE",{});var jw=l(Ts);Sm=o(jw,"THEAD",{});var KG=l(Sm);co=o(KG,"TR",{});var kw=l(co);$f=o(kw,"TH",{align:!0});var FG=l($f);o8=u(FG,"All parameters"),FG.forEach(s),l8=p(kw),Nm=o(kw,"TH",{align:!0}),l(Nm).forEach(s),kw.forEach(s),KG.forEach(s),i8=p(jw),J=o(jw,"TBODY",{});var X=l(J);fo=o(X,"TR",{});var Aw=l(fo);po=o(Aw,"TD",{align:!0});var Cx=l(po);xm=o(Cx,"STRONG",{});var JG=l(xm);u8=u(JG,"inputs"),JG.forEach(s),c8=u(Cx," (required)"),Cx.forEach(s),f8=p(Aw),_f=o(Aw,"TD",{align:!0});var WG=l(_f);p8=u(WG,"a string to be classified"),WG.forEach(s),Aw.forEach(s),h8=p(X),ho=o(X,"TR",{});var Dw=l(ho);vf=o(Dw,"TD",{align:!0});var YG=l(vf);Im=o(YG,"STRONG",{});var VG=l(Im);d8=u(VG,"parameters"),VG.forEach(s),YG.forEach(s),g8=p(Dw),Ef=o(Dw,"TD",{align:!0});var XG=l(Ef);m8=u(XG,"a dict containing the following key:"),XG.forEach(s),Dw.forEach(s),q8=p(X),go=o(X,"TR",{});var Ow=l(go);yf=o(Ow,"TD",{align:!0});var QG=l(yf);$8=u(QG,"aggregation_strategy"),QG.forEach(s),_8=p(Ow),x=o(Ow,"TD",{align:!0});var B=l(x);v8=u(B,"(Default: "),Hm=o(B,"CODE",{});var ZG=l(Hm);E8=u(ZG,"simple"),ZG.forEach(s),y8=u(B,"). There are several aggregation strategies: "),w8=o(B,"BR",{}),b8=p(B),Bm=o(B,"CODE",{});var eL=l(Bm);T8=u(eL,"none"),eL.forEach(s),j8=u(B,": Every token gets classified without further aggregation. "),k8=o(B,"BR",{}),A8=p(B),Cm=o(B,"CODE",{});var tL=l(Cm);D8=u(tL,"simple"),tL.forEach(s),O8=u(B,": Entities are grouped according to the default schema (B-, I- tags get merged when the tag is similar). "),P8=o(B,"BR",{}),R8=p(B),Gm=o(B,"CODE",{});var sL=l(Gm);S8=u(sL,"first"),sL.forEach(s),N8=u(B,": Same as the "),Lm=o(B,"CODE",{});var aL=l(Lm);x8=u(aL,"simple"),aL.forEach(s),I8=u(B," strategy except words cannot end up with different tags. Words will use the tag of the first token when there is ambiguity. "),H8=o(B,"BR",{}),B8=p(B),Um=o(B,"CODE",{});var nL=l(Um);C8=u(nL,"average"),nL.forEach(s),G8=u(B,": Same as the "),zm=o(B,"CODE",{});var rL=l(zm);L8=u(rL,"simple"),rL.forEach(s),U8=u(B," strategy except words cannot end up with different tags. Scores are averaged across tokens and then the maximum label is applied. "),z8=o(B,"BR",{}),M8=p(B),Mm=o(B,"CODE",{});var oL=l(Mm);K8=u(oL,"max"),oL.forEach(s),F8=u(B,": Same as the "),Km=o(B,"CODE",{});var lL=l(Km);J8=u(lL,"simple"),lL.forEach(s),W8=u(B," strategy except words cannot end up with different tags. Word entity will be the token with the maximum score."),B.forEach(s),Ow.forEach(s),Y8=p(X),mo=o(X,"TR",{});var Pw=l(mo);wf=o(Pw,"TD",{align:!0});var iL=l(wf);Fm=o(iL,"STRONG",{});var uL=l(Fm);V8=u(uL,"options"),uL.forEach(s),iL.forEach(s),X8=p(Pw),bf=o(Pw,"TD",{align:!0});var cL=l(bf);Q8=u(cL,"a dict containing the following keys:"),cL.forEach(s),Pw.forEach(s),Z8=p(X),qo=o(X,"TR",{});var Rw=l(qo);Tf=o(Rw,"TD",{align:!0});var fL=l(Tf);eA=u(fL,"use_gpu"),fL.forEach(s),tA=p(Rw),js=o(Rw,"TD",{align:!0});var Sw=l(js);sA=u(Sw,"(Default: "),Jm=o(Sw,"CODE",{});var pL=l(Jm);aA=u(pL,"false"),pL.forEach(s),nA=u(Sw,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),Sw.forEach(s),Rw.forEach(s),rA=p(X),$o=o(X,"TR",{});var Nw=l($o);jf=o(Nw,"TD",{align:!0});var hL=l(jf);oA=u(hL,"use_cache"),hL.forEach(s),lA=p(Nw),ks=o(Nw,"TD",{align:!0});var xw=l(ks);iA=u(xw,"(Default: "),Wm=o(xw,"CODE",{});var dL=l(Wm);uA=u(dL,"true"),dL.forEach(s),cA=u(xw,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),xw.forEach(s),Nw.forEach(s),fA=p(X),_o=o(X,"TR",{});var Iw=l(_o);kf=o(Iw,"TD",{align:!0});var gL=l(kf);pA=u(gL,"wait_for_model"),gL.forEach(s),hA=p(Iw),As=o(Iw,"TD",{align:!0});var Hw=l(As);dA=u(Hw,"(Default: "),Ym=o(Hw,"CODE",{});var mL=l(Ym);gA=u(mL,"false"),mL.forEach(s),mA=u(Hw,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),Hw.forEach(s),Iw.forEach(s),X.forEach(s),jw.forEach(s),v2=p(a),Af=o(a,"P",{});var qL=l(Af);qA=u(qL,"Return value is either a dict or a list of dicts if you sent a list of inputs"),qL.forEach(s),E2=p(a),v(Ds.$$.fragment,a),y2=p(a),Os=o(a,"TABLE",{});var Bw=l(Os);Vm=o(Bw,"THEAD",{});var $L=l(Vm);vo=o($L,"TR",{});var Cw=l(vo);Df=o(Cw,"TH",{align:!0});var _L=l(Df);$A=u(_L,"Returned values"),_L.forEach(s),_A=p(Cw),Xm=o(Cw,"TH",{align:!0}),l(Xm).forEach(s),Cw.forEach(s),$L.forEach(s),vA=p(Bw),te=o(Bw,"TBODY",{});var De=l(te);Eo=o(De,"TR",{});var Gw=l(Eo);Of=o(Gw,"TD",{align:!0});var vL=l(Of);Qm=o(vL,"STRONG",{});var EL=l(Qm);EA=u(EL,"entity_group"),EL.forEach(s),vL.forEach(s),yA=p(Gw),Pf=o(Gw,"TD",{align:!0});var yL=l(Pf);wA=u(yL,"The type for the entity being recognized (model specific)."),yL.forEach(s),Gw.forEach(s),bA=p(De),yo=o(De,"TR",{});var Lw=l(yo);Rf=o(Lw,"TD",{align:!0});var wL=l(Rf);Zm=o(wL,"STRONG",{});var bL=l(Zm);TA=u(bL,"score"),bL.forEach(s),wL.forEach(s),jA=p(Lw),Sf=o(Lw,"TD",{align:!0});var TL=l(Sf);kA=u(TL,"How likely the entity was recognized."),TL.forEach(s),Lw.forEach(s),AA=p(De),wo=o(De,"TR",{});var Uw=l(wo);Nf=o(Uw,"TD",{align:!0});var jL=l(Nf);eq=o(jL,"STRONG",{});var kL=l(eq);DA=u(kL,"word"),kL.forEach(s),jL.forEach(s),OA=p(Uw),xf=o(Uw,"TD",{align:!0});var AL=l(xf);PA=u(AL,"The string that was captured"),AL.forEach(s),Uw.forEach(s),RA=p(De),bo=o(De,"TR",{});var zw=l(bo);If=o(zw,"TD",{align:!0});var DL=l(If);tq=o(DL,"STRONG",{});var OL=l(tq);SA=u(OL,"start"),OL.forEach(s),DL.forEach(s),NA=p(zw),Ps=o(zw,"TD",{align:!0});var Mw=l(Ps);xA=u(Mw,"The offset stringwise where the answer is located. Useful to disambiguate if "),sq=o(Mw,"CODE",{});var PL=l(sq);IA=u(PL,"word"),PL.forEach(s),HA=u(Mw," occurs multiple times."),Mw.forEach(s),zw.forEach(s),BA=p(De),To=o(De,"TR",{});var Kw=l(To);Hf=o(Kw,"TD",{align:!0});var RL=l(Hf);aq=o(RL,"STRONG",{});var SL=l(aq);CA=u(SL,"end"),SL.forEach(s),RL.forEach(s),GA=p(Kw),Rs=o(Kw,"TD",{align:!0});var Fw=l(Rs);LA=u(Fw,"The offset stringwise where the answer is located. Useful to disambiguate if "),nq=o(Fw,"CODE",{});var NL=l(nq);UA=u(NL,"word"),NL.forEach(s),zA=u(Fw," occurs multiple times."),Fw.forEach(s),Kw.forEach(s),De.forEach(s),Bw.forEach(s),w2=p(a),Fe=o(a,"H2",{class:!0});var Jw=l(Fe);Ss=o(Jw,"A",{id:!0,class:!0,href:!0});var xL=l(Ss);rq=o(xL,"SPAN",{});var IL=l(rq);v(jo.$$.fragment,IL),IL.forEach(s),xL.forEach(s),MA=p(Jw),oq=o(Jw,"SPAN",{});var HL=l(oq);KA=u(HL,"Text-generation task"),HL.forEach(s),Jw.forEach(s),b2=p(a),Bf=o(a,"P",{});var BL=l(Bf);FA=u(BL,"Use to continue text from a prompt. This is a very generic task."),BL.forEach(s),T2=p(a),v(Ns.$$.fragment,a),j2=p(a),ko=o(a,"P",{});var Gx=l(ko);JA=u(Gx,"Available with: "),Ao=o(Gx,"A",{href:!0,rel:!0});var CL=l(Ao);WA=u(CL,"\u{1F917} Transformers"),CL.forEach(s),Gx.forEach(s),k2=p(a),Cf=o(a,"P",{});var GL=l(Cf);YA=u(GL,"Example:"),GL.forEach(s),A2=p(a),v(xs.$$.fragment,a),D2=p(a),Gf=o(a,"P",{});var LL=l(Gf);VA=u(LL,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),LL.forEach(s),O2=p(a),Is=o(a,"TABLE",{});var Ww=l(Is);lq=o(Ww,"THEAD",{});var UL=l(lq);Do=o(UL,"TR",{});var Yw=l(Do);Lf=o(Yw,"TH",{align:!0});var zL=l(Lf);XA=u(zL,"All parameters"),zL.forEach(s),QA=p(Yw),iq=o(Yw,"TH",{align:!0}),l(iq).forEach(s),Yw.forEach(s),UL.forEach(s),ZA=p(Ww),I=o(Ww,"TBODY",{});var C=l(I);Oo=o(C,"TR",{});var Vw=l(Oo);Po=o(Vw,"TD",{align:!0});var Lx=l(Po);uq=o(Lx,"STRONG",{});var ML=l(uq);eD=u(ML,"inputs"),ML.forEach(s),tD=u(Lx," (required):"),Lx.forEach(s),sD=p(Vw),Uf=o(Vw,"TD",{align:!0});var KL=l(Uf);aD=u(KL,"a string to be generated from"),KL.forEach(s),Vw.forEach(s),nD=p(C),Ro=o(C,"TR",{});var Xw=l(Ro);zf=o(Xw,"TD",{align:!0});var FL=l(zf);cq=o(FL,"STRONG",{});var JL=l(cq);rD=u(JL,"parameters"),JL.forEach(s),FL.forEach(s),oD=p(Xw),Mf=o(Xw,"TD",{align:!0});var WL=l(Mf);lD=u(WL,"dict containing the following keys:"),WL.forEach(s),Xw.forEach(s),iD=p(C),So=o(C,"TR",{});var Qw=l(So);Kf=o(Qw,"TD",{align:!0});var YL=l(Kf);uD=u(YL,"top_k"),YL.forEach(s),cD=p(Qw),ye=o(Qw,"TD",{align:!0});var ad=l(ye);fD=u(ad,"(Default: "),fq=o(ad,"CODE",{});var VL=l(fq);pD=u(VL,"None"),VL.forEach(s),hD=u(ad,"). Integer to define the top tokens considered within the "),pq=o(ad,"CODE",{});var XL=l(pq);dD=u(XL,"sample"),XL.forEach(s),gD=u(ad," operation to create new text."),ad.forEach(s),Qw.forEach(s),mD=p(C),No=o(C,"TR",{});var Zw=l(No);Ff=o(Zw,"TD",{align:!0});var QL=l(Ff);qD=u(QL,"top_p"),QL.forEach(s),$D=p(Zw),le=o(Zw,"TD",{align:!0});var Wa=l(le);_D=u(Wa,"(Default: "),hq=o(Wa,"CODE",{});var ZL=l(hq);vD=u(ZL,"None"),ZL.forEach(s),ED=u(Wa,"). Float to define the tokens that are within the "),dq=o(Wa,"CODE",{});var eU=l(dq);yD=u(eU,"sample"),eU.forEach(s),wD=u(Wa," operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than "),gq=o(Wa,"CODE",{});var tU=l(gq);bD=u(tU,"top_p"),tU.forEach(s),TD=u(Wa,"."),Wa.forEach(s),Zw.forEach(s),jD=p(C),xo=o(C,"TR",{});var e0=l(xo);Jf=o(e0,"TD",{align:!0});var sU=l(Jf);kD=u(sU,"temperature"),sU.forEach(s),AD=p(e0),we=o(e0,"TD",{align:!0});var nd=l(we);DD=u(nd,"(Default: "),mq=o(nd,"CODE",{});var aU=l(mq);OD=u(aU,"1.0"),aU.forEach(s),PD=u(nd,"). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means "),qq=o(nd,"CODE",{});var nU=l(qq);RD=u(nU,"100.0"),nU.forEach(s),SD=u(nd," is getting closer to uniform probability."),nd.forEach(s),e0.forEach(s),ND=p(C),Io=o(C,"TR",{});var t0=l(Io);Wf=o(t0,"TD",{align:!0});var rU=l(Wf);xD=u(rU,"repetition_penalty"),rU.forEach(s),ID=p(t0),Hs=o(t0,"TD",{align:!0});var s0=l(Hs);HD=u(s0,"(Default: "),$q=o(s0,"CODE",{});var oU=l($q);BD=u(oU,"None"),oU.forEach(s),CD=u(s0,"). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."),s0.forEach(s),t0.forEach(s),GD=p(C),Ho=o(C,"TR",{});var a0=l(Ho);Yf=o(a0,"TD",{align:!0});var lU=l(Yf);LD=u(lU,"max_new_tokens"),lU.forEach(s),UD=p(a0),be=o(a0,"TD",{align:!0});var rd=l(be);zD=u(rd,"(Default: "),_q=o(rd,"CODE",{});var iU=l(_q);MD=u(iU,"None"),iU.forEach(s),KD=u(rd,"). Int (0-250). The amount of new tokens to be generated, this does "),vq=o(rd,"STRONG",{});var uU=l(vq);FD=u(uU,"not"),uU.forEach(s),JD=u(rd," include the input length it is a estimate of the size of generated text you want. Each new tokens slows down the request, so look for balance between response times and length of text generated."),rd.forEach(s),a0.forEach(s),WD=p(C),Bo=o(C,"TR",{});var n0=l(Bo);Vf=o(n0,"TD",{align:!0});var cU=l(Vf);YD=u(cU,"max_time"),cU.forEach(s),VD=p(n0),Te=o(n0,"TD",{align:!0});var od=l(Te);XD=u(od,"(Default: "),Eq=o(od,"CODE",{});var fU=l(Eq);QD=u(fU,"None"),fU.forEach(s),ZD=u(od,"). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit. Use that in combination with "),yq=o(od,"CODE",{});var pU=l(yq);eO=u(pU,"max_new_tokens"),pU.forEach(s),tO=u(od," for best results."),od.forEach(s),n0.forEach(s),sO=p(C),Co=o(C,"TR",{});var r0=l(Co);Xf=o(r0,"TD",{align:!0});var hU=l(Xf);aO=u(hU,"return_full_text"),hU.forEach(s),nO=p(r0),je=o(r0,"TD",{align:!0});var ld=l(je);rO=u(ld,"(Default: "),wq=o(ld,"CODE",{});var dU=l(wq);oO=u(dU,"True"),dU.forEach(s),lO=u(ld,"). Bool. If set to False, the return results will "),bq=o(ld,"STRONG",{});var gU=l(bq);iO=u(gU,"not"),gU.forEach(s),uO=u(ld," contain the original query making it easier for prompting."),ld.forEach(s),r0.forEach(s),cO=p(C),Go=o(C,"TR",{});var o0=l(Go);Qf=o(o0,"TD",{align:!0});var mU=l(Qf);fO=u(mU,"num_return_sequences"),mU.forEach(s),pO=p(o0),Bs=o(o0,"TD",{align:!0});var l0=l(Bs);hO=u(l0,"(Default: "),Tq=o(l0,"CODE",{});var qU=l(Tq);dO=u(qU,"1"),qU.forEach(s),gO=u(l0,"). Integer. The number of proposition you want to be returned."),l0.forEach(s),o0.forEach(s),mO=p(C),Lo=o(C,"TR",{});var i0=l(Lo);Zf=o(i0,"TD",{align:!0});var $U=l(Zf);qO=u($U,"do_sample"),$U.forEach(s),$O=p(i0),Cs=o(i0,"TD",{align:!0});var u0=l(Cs);_O=u(u0,"(Optional: "),jq=o(u0,"CODE",{});var _U=l(jq);vO=u(_U,"True"),_U.forEach(s),EO=u(u0,"). Bool. Whether or not to use sampling, use greedy decoding otherwise."),u0.forEach(s),i0.forEach(s),yO=p(C),Uo=o(C,"TR",{});var c0=l(Uo);ep=o(c0,"TD",{align:!0});var vU=l(ep);kq=o(vU,"STRONG",{});var EU=l(kq);wO=u(EU,"options"),EU.forEach(s),vU.forEach(s),bO=p(c0),tp=o(c0,"TD",{align:!0});var yU=l(tp);TO=u(yU,"a dict containing the following keys:"),yU.forEach(s),c0.forEach(s),jO=p(C),zo=o(C,"TR",{});var f0=l(zo);sp=o(f0,"TD",{align:!0});var wU=l(sp);kO=u(wU,"use_gpu"),wU.forEach(s),AO=p(f0),Gs=o(f0,"TD",{align:!0});var p0=l(Gs);DO=u(p0,"(Default: "),Aq=o(p0,"CODE",{});var bU=l(Aq);OO=u(bU,"false"),bU.forEach(s),PO=u(p0,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),p0.forEach(s),f0.forEach(s),RO=p(C),Mo=o(C,"TR",{});var h0=l(Mo);ap=o(h0,"TD",{align:!0});var TU=l(ap);SO=u(TU,"use_cache"),TU.forEach(s),NO=p(h0),Ls=o(h0,"TD",{align:!0});var d0=l(Ls);xO=u(d0,"(Default: "),Dq=o(d0,"CODE",{});var jU=l(Dq);IO=u(jU,"true"),jU.forEach(s),HO=u(d0,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),d0.forEach(s),h0.forEach(s),BO=p(C),Ko=o(C,"TR",{});var g0=l(Ko);np=o(g0,"TD",{align:!0});var kU=l(np);CO=u(kU,"wait_for_model"),kU.forEach(s),GO=p(g0),Us=o(g0,"TD",{align:!0});var m0=l(Us);LO=u(m0,"(Default: "),Oq=o(m0,"CODE",{});var AU=l(Oq);UO=u(AU,"false"),AU.forEach(s),zO=u(m0,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),m0.forEach(s),g0.forEach(s),C.forEach(s),Ww.forEach(s),P2=p(a),rp=o(a,"P",{});var DU=l(rp);MO=u(DU,"Return value is either a dict or a list of dicts if you sent a list of inputs"),DU.forEach(s),R2=p(a),v(zs.$$.fragment,a),S2=p(a),Ms=o(a,"TABLE",{});var q0=l(Ms);Pq=o(q0,"THEAD",{});var OU=l(Pq);Fo=o(OU,"TR",{});var $0=l(Fo);op=o($0,"TH",{align:!0});var PU=l(op);KO=u(PU,"Returned values"),PU.forEach(s),FO=p($0),Rq=o($0,"TH",{align:!0}),l(Rq).forEach(s),$0.forEach(s),OU.forEach(s),JO=p(q0),Sq=o(q0,"TBODY",{});var RU=l(Sq);Jo=o(RU,"TR",{});var _0=l(Jo);lp=o(_0,"TD",{align:!0});var SU=l(lp);Nq=o(SU,"STRONG",{});var NU=l(Nq);WO=u(NU,"generated_text"),NU.forEach(s),SU.forEach(s),YO=p(_0),ip=o(_0,"TD",{align:!0});var xU=l(ip);VO=u(xU,"The continuated string"),xU.forEach(s),_0.forEach(s),RU.forEach(s),q0.forEach(s),N2=p(a),Je=o(a,"H2",{class:!0});var v0=l(Je);Ks=o(v0,"A",{id:!0,class:!0,href:!0});var IU=l(Ks);xq=o(IU,"SPAN",{});var HU=l(xq);v(Wo.$$.fragment,HU),HU.forEach(s),IU.forEach(s),XO=p(v0),Iq=o(v0,"SPAN",{});var BU=l(Iq);QO=u(BU,"Text2text-generation task"),BU.forEach(s),v0.forEach(s),x2=p(a),Fs=o(a,"P",{});var E0=l(Fs);ZO=u(E0,"Essentially "),up=o(E0,"A",{href:!0});var CU=l(up);eP=u(CU,"Text-generation task"),CU.forEach(s),tP=u(E0,`. But uses
Encoder-Decoder architecture, so might change in the future for more
options.`),E0.forEach(s),I2=p(a),We=o(a,"H2",{class:!0});var y0=l(We);Js=o(y0,"A",{id:!0,class:!0,href:!0});var GU=l(Js);Hq=o(GU,"SPAN",{});var LU=l(Hq);v(Yo.$$.fragment,LU),LU.forEach(s),GU.forEach(s),sP=p(y0),Bq=o(y0,"SPAN",{});var UU=l(Bq);aP=u(UU,"Fill mask task"),UU.forEach(s),y0.forEach(s),H2=p(a),cp=o(a,"P",{});var zU=l(cp);nP=u(zU,`Tries to fill in a hole with a missing word (token to be precise).
That\u2019s the base task for BERT models.`),zU.forEach(s),B2=p(a),v(Ws.$$.fragment,a),C2=p(a),Vo=o(a,"P",{});var Ux=l(Vo);rP=u(Ux,"Available with: "),Xo=o(Ux,"A",{href:!0,rel:!0});var MU=l(Xo);oP=u(MU,"\u{1F917} Transformers"),MU.forEach(s),Ux.forEach(s),G2=p(a),fp=o(a,"P",{});var KU=l(fp);lP=u(KU,"Example:"),KU.forEach(s),L2=p(a),v(Ys.$$.fragment,a),U2=p(a),pp=o(a,"P",{});var FU=l(pp);iP=u(FU,`When sending your request, you should send a JSON encoded payload. Here
are all the options`),FU.forEach(s),z2=p(a),Vs=o(a,"TABLE",{});var w0=l(Vs);Cq=o(w0,"THEAD",{});var JU=l(Cq);Qo=o(JU,"TR",{});var b0=l(Qo);hp=o(b0,"TH",{align:!0});var WU=l(hp);uP=u(WU,"All parameters"),WU.forEach(s),cP=p(b0),Gq=o(b0,"TH",{align:!0}),l(Gq).forEach(s),b0.forEach(s),JU.forEach(s),fP=p(w0),se=o(w0,"TBODY",{});var Oe=l(se);Zo=o(Oe,"TR",{});var T0=l(Zo);el=o(T0,"TD",{align:!0});var zx=l(el);Lq=o(zx,"STRONG",{});var YU=l(Lq);pP=u(YU,"inputs"),YU.forEach(s),hP=u(zx," (required):"),zx.forEach(s),dP=p(T0),dp=o(T0,"TD",{align:!0});var VU=l(dp);gP=u(VU,"a string to be filled from, must contain the [MASK] token (check model card for exact name of the mask)"),VU.forEach(s),T0.forEach(s),mP=p(Oe),tl=o(Oe,"TR",{});var j0=l(tl);gp=o(j0,"TD",{align:!0});var XU=l(gp);Uq=o(XU,"STRONG",{});var QU=l(Uq);qP=u(QU,"options"),QU.forEach(s),XU.forEach(s),$P=p(j0),mp=o(j0,"TD",{align:!0});var ZU=l(mp);_P=u(ZU,"a dict containing the following keys:"),ZU.forEach(s),j0.forEach(s),vP=p(Oe),sl=o(Oe,"TR",{});var k0=l(sl);qp=o(k0,"TD",{align:!0});var ez=l(qp);EP=u(ez,"use_gpu"),ez.forEach(s),yP=p(k0),Xs=o(k0,"TD",{align:!0});var A0=l(Xs);wP=u(A0,"(Default: "),zq=o(A0,"CODE",{});var tz=l(zq);bP=u(tz,"false"),tz.forEach(s),TP=u(A0,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),A0.forEach(s),k0.forEach(s),jP=p(Oe),al=o(Oe,"TR",{});var D0=l(al);$p=o(D0,"TD",{align:!0});var sz=l($p);kP=u(sz,"use_cache"),sz.forEach(s),AP=p(D0),Qs=o(D0,"TD",{align:!0});var O0=l(Qs);DP=u(O0,"(Default: "),Mq=o(O0,"CODE",{});var az=l(Mq);OP=u(az,"true"),az.forEach(s),PP=u(O0,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),O0.forEach(s),D0.forEach(s),RP=p(Oe),nl=o(Oe,"TR",{});var P0=l(nl);_p=o(P0,"TD",{align:!0});var nz=l(_p);SP=u(nz,"wait_for_model"),nz.forEach(s),NP=p(P0),Zs=o(P0,"TD",{align:!0});var R0=l(Zs);xP=u(R0,"(Default: "),Kq=o(R0,"CODE",{});var rz=l(Kq);IP=u(rz,"false"),rz.forEach(s),HP=u(R0,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),R0.forEach(s),P0.forEach(s),Oe.forEach(s),w0.forEach(s),M2=p(a),vp=o(a,"P",{});var oz=l(vp);BP=u(oz,"Return value is either a dict or a list of dicts if you sent a list of inputs"),oz.forEach(s),K2=p(a),v(ea.$$.fragment,a),F2=p(a),ta=o(a,"TABLE",{});var S0=l(ta);Fq=o(S0,"THEAD",{});var lz=l(Fq);rl=o(lz,"TR",{});var N0=l(rl);Ep=o(N0,"TH",{align:!0});var iz=l(Ep);CP=u(iz,"Returned values"),iz.forEach(s),GP=p(N0),Jq=o(N0,"TH",{align:!0}),l(Jq).forEach(s),N0.forEach(s),lz.forEach(s),LP=p(S0),fe=o(S0,"TBODY",{});var Ya=l(fe);ol=o(Ya,"TR",{});var x0=l(ol);yp=o(x0,"TD",{align:!0});var uz=l(yp);Wq=o(uz,"STRONG",{});var cz=l(Wq);UP=u(cz,"sequence"),cz.forEach(s),uz.forEach(s),zP=p(x0),wp=o(x0,"TD",{align:!0});var fz=l(wp);MP=u(fz,"The actual sequence of tokens that ran against the model (may contain special tokens)"),fz.forEach(s),x0.forEach(s),KP=p(Ya),ll=o(Ya,"TR",{});var I0=l(ll);bp=o(I0,"TD",{align:!0});var pz=l(bp);Yq=o(pz,"STRONG",{});var hz=l(Yq);FP=u(hz,"score"),hz.forEach(s),pz.forEach(s),JP=p(I0),Tp=o(I0,"TD",{align:!0});var dz=l(Tp);WP=u(dz,"The probability for this token."),dz.forEach(s),I0.forEach(s),YP=p(Ya),il=o(Ya,"TR",{});var H0=l(il);jp=o(H0,"TD",{align:!0});var gz=l(jp);Vq=o(gz,"STRONG",{});var mz=l(Vq);VP=u(mz,"token"),mz.forEach(s),gz.forEach(s),XP=p(H0),kp=o(H0,"TD",{align:!0});var qz=l(kp);QP=u(qz,"The id of the token"),qz.forEach(s),H0.forEach(s),ZP=p(Ya),ul=o(Ya,"TR",{});var B0=l(ul);Ap=o(B0,"TD",{align:!0});var $z=l(Ap);Xq=o($z,"STRONG",{});var _z=l(Xq);eR=u(_z,"token_str"),_z.forEach(s),$z.forEach(s),tR=p(B0),Dp=o(B0,"TD",{align:!0});var vz=l(Dp);sR=u(vz,"The string representation of the token"),vz.forEach(s),B0.forEach(s),Ya.forEach(s),S0.forEach(s),J2=p(a),Ye=o(a,"H2",{class:!0});var C0=l(Ye);sa=o(C0,"A",{id:!0,class:!0,href:!0});var Ez=l(sa);Qq=o(Ez,"SPAN",{});var yz=l(Qq);v(cl.$$.fragment,yz),yz.forEach(s),Ez.forEach(s),aR=p(C0),Zq=o(C0,"SPAN",{});var wz=l(Zq);nR=u(wz,"Automatic speech recognition task"),wz.forEach(s),C0.forEach(s),W2=p(a),Op=o(a,"P",{});var bz=l(Op);rR=u(bz,`This task reads some audio input and outputs the said words within the
audio files.`),bz.forEach(s),Y2=p(a),v(aa.$$.fragment,a),V2=p(a),v(na.$$.fragment,a),X2=p(a),pe=o(a,"P",{});var Pi=l(pe);oR=u(Pi,"Available with: "),fl=o(Pi,"A",{href:!0,rel:!0});var Tz=l(fl);lR=u(Tz,"\u{1F917} Transformers"),Tz.forEach(s),iR=p(Pi),pl=o(Pi,"A",{href:!0,rel:!0});var jz=l(pl);uR=u(jz,"ESPnet"),jz.forEach(s),cR=u(Pi,` and
`),hl=o(Pi,"A",{href:!0,rel:!0});var kz=l(hl);fR=u(kz,"SpeechBrain"),kz.forEach(s),Pi.forEach(s),Q2=p(a),Pp=o(a,"P",{});var Az=l(Pp);pR=u(Az,"Request:"),Az.forEach(s),Z2=p(a),v(ra.$$.fragment,a),ev=p(a),Rp=o(a,"P",{});var Dz=l(Rp);hR=u(Dz,`When sending your request, you should send a binary payload that simply
contains your audio file. We try to support most formats (Flac, Wav,
Mp3, Ogg etc...). And we automatically rescale the sampling rate to the
appropriate rate for the given model (usually 16KHz).`),Dz.forEach(s),tv=p(a),oa=o(a,"TABLE",{});var G0=l(oa);e$=o(G0,"THEAD",{});var Oz=l(e$);dl=o(Oz,"TR",{});var L0=l(dl);Sp=o(L0,"TH",{align:!0});var Pz=l(Sp);dR=u(Pz,"All parameters"),Pz.forEach(s),gR=p(L0),t$=o(L0,"TH",{align:!0}),l(t$).forEach(s),L0.forEach(s),Oz.forEach(s),mR=p(G0),s$=o(G0,"TBODY",{});var Rz=l(s$);gl=o(Rz,"TR",{});var U0=l(gl);ml=o(U0,"TD",{align:!0});var Mx=l(ml);a$=o(Mx,"STRONG",{});var Sz=l(a$);qR=u(Sz,"no parameter"),Sz.forEach(s),$R=u(Mx," (required)"),Mx.forEach(s),_R=p(U0),Np=o(U0,"TD",{align:!0});var Nz=l(Np);vR=u(Nz,"a binary representation of the audio file. No other parameters are currently allowed."),Nz.forEach(s),U0.forEach(s),Rz.forEach(s),G0.forEach(s),sv=p(a),xp=o(a,"P",{});var xz=l(xp);ER=u(xz,"Return value is either a dict or a list of dicts if you sent a list of inputs"),xz.forEach(s),av=p(a),Ip=o(a,"P",{});var Iz=l(Ip);yR=u(Iz,"Response:"),Iz.forEach(s),nv=p(a),v(la.$$.fragment,a),rv=p(a),ia=o(a,"TABLE",{});var z0=l(ia);n$=o(z0,"THEAD",{});var Hz=l(n$);ql=o(Hz,"TR",{});var M0=l(ql);Hp=o(M0,"TH",{align:!0});var Bz=l(Hp);wR=u(Bz,"Returned values"),Bz.forEach(s),bR=p(M0),r$=o(M0,"TH",{align:!0}),l(r$).forEach(s),M0.forEach(s),Hz.forEach(s),TR=p(z0),o$=o(z0,"TBODY",{});var Cz=l(o$);$l=o(Cz,"TR",{});var K0=l($l);Bp=o(K0,"TD",{align:!0});var Gz=l(Bp);l$=o(Gz,"STRONG",{});var Lz=l(l$);jR=u(Lz,"text"),Lz.forEach(s),Gz.forEach(s),kR=p(K0),Cp=o(K0,"TD",{align:!0});var Uz=l(Cp);AR=u(Uz,"The string that was recognized within the audio file."),Uz.forEach(s),K0.forEach(s),Cz.forEach(s),z0.forEach(s),ov=p(a),Ve=o(a,"H2",{class:!0});var F0=l(Ve);ua=o(F0,"A",{id:!0,class:!0,href:!0});var zz=l(ua);i$=o(zz,"SPAN",{});var Mz=l(i$);v(_l.$$.fragment,Mz),Mz.forEach(s),zz.forEach(s),DR=p(F0),u$=o(F0,"SPAN",{});var Kz=l(u$);OR=u(Kz,"Feature-extraction task"),Kz.forEach(s),F0.forEach(s),lv=p(a),Gp=o(a,"P",{});var Fz=l(Gp);PR=u(Fz,`This task reads some text and outputs raw float values, that are usually
consumed as part of a semantic database/semantic search.`),Fz.forEach(s),iv=p(a),v(ca.$$.fragment,a),uv=p(a),Xe=o(a,"P",{});var C_=l(Xe);RR=u(C_,"Available with: "),vl=o(C_,"A",{href:!0,rel:!0});var Jz=l(vl);SR=u(Jz,"\u{1F917} Transformers"),Jz.forEach(s),NR=p(C_),El=o(C_,"A",{href:!0,rel:!0});var Wz=l(El);xR=u(Wz,"Sentence-transformers"),Wz.forEach(s),C_.forEach(s),cv=p(a),Lp=o(a,"P",{});var Yz=l(Lp);IR=u(Yz,"Request:"),Yz.forEach(s),fv=p(a),fa=o(a,"TABLE",{});var J0=l(fa);c$=o(J0,"THEAD",{});var Vz=l(c$);yl=o(Vz,"TR",{});var W0=l(yl);Up=o(W0,"TH",{align:!0});var Xz=l(Up);HR=u(Xz,"All parameters"),Xz.forEach(s),BR=p(W0),f$=o(W0,"TH",{align:!0}),l(f$).forEach(s),W0.forEach(s),Vz.forEach(s),CR=p(J0),ae=o(J0,"TBODY",{});var Pe=l(ae);wl=o(Pe,"TR",{});var Y0=l(wl);bl=o(Y0,"TD",{align:!0});var Kx=l(bl);p$=o(Kx,"STRONG",{});var Qz=l(p$);GR=u(Qz,"inputs"),Qz.forEach(s),LR=u(Kx," (required):"),Kx.forEach(s),UR=p(Y0),zp=o(Y0,"TD",{align:!0});var Zz=l(zp);zR=u(Zz,"a string or a list of strings to get the features from."),Zz.forEach(s),Y0.forEach(s),MR=p(Pe),Tl=o(Pe,"TR",{});var V0=l(Tl);Mp=o(V0,"TD",{align:!0});var eM=l(Mp);h$=o(eM,"STRONG",{});var tM=l(h$);KR=u(tM,"options"),tM.forEach(s),eM.forEach(s),FR=p(V0),Kp=o(V0,"TD",{align:!0});var sM=l(Kp);JR=u(sM,"a dict containing the following keys:"),sM.forEach(s),V0.forEach(s),WR=p(Pe),jl=o(Pe,"TR",{});var X0=l(jl);Fp=o(X0,"TD",{align:!0});var aM=l(Fp);YR=u(aM,"use_gpu"),aM.forEach(s),VR=p(X0),pa=o(X0,"TD",{align:!0});var Q0=l(pa);XR=u(Q0,"(Default: "),d$=o(Q0,"CODE",{});var nM=l(d$);QR=u(nM,"false"),nM.forEach(s),ZR=u(Q0,"). Boolean to use GPU instead of CPU for inference (requires Startup plan at least)"),Q0.forEach(s),X0.forEach(s),eS=p(Pe),kl=o(Pe,"TR",{});var Z0=l(kl);Jp=o(Z0,"TD",{align:!0});var rM=l(Jp);tS=u(rM,"use_cache"),rM.forEach(s),sS=p(Z0),ha=o(Z0,"TD",{align:!0});var eb=l(ha);aS=u(eb,"(Default: "),g$=o(eb,"CODE",{});var oM=l(g$);nS=u(oM,"true"),oM.forEach(s),rS=u(eb,"). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."),eb.forEach(s),Z0.forEach(s),oS=p(Pe),Al=o(Pe,"TR",{});var tb=l(Al);Wp=o(tb,"TD",{align:!0});var lM=l(Wp);lS=u(lM,"wait_for_model"),lM.forEach(s),iS=p(tb),da=o(tb,"TD",{align:!0});var sb=l(da);uS=u(sb,"(Default: "),m$=o(sb,"CODE",{});var iM=l(m$);cS=u(iM,"false"),iM.forEach(s),fS=u(sb,") Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."),sb.forEach(s),tb.forEach(s),Pe.forEach(s),J0.forEach(s),pv=p(a),Yp=o(a,"P",{});var uM=l(Yp);pS=u(uM,"Return value is either a dict or a list of dicts if you sent a list of inputs"),uM.forEach(s),hv=p(a),ga=o(a,"TABLE",{});var ab=l(ga);q$=o(ab,"THEAD",{});var cM=l(q$);Dl=o(cM,"TR",{});var nb=l(Dl);Vp=o(nb,"TH",{align:!0});var fM=l(Vp);hS=u(fM,"Returned values"),fM.forEach(s),dS=p(nb),$$=o(nb,"TH",{align:!0}),l($$).forEach(s),nb.forEach(s),cM.forEach(s),gS=p(ab),_$=o(ab,"TBODY",{});var pM=l(_$);Ol=o(pM,"TR",{});var rb=l(Ol);Xp=o(rb,"TD",{align:!0});var hM=l(Xp);v$=o(hM,"STRONG",{});var dM=l(v$);mS=u(dM,"A list of float (or list of list of floats)"),dM.forEach(s),hM.forEach(s),qS=p(rb),Qp=o(rb,"TD",{align:!0});var gM=l(Qp);$S=u(gM,"The numbers that are the representation features of the input."),gM.forEach(s),rb.forEach(s),pM.forEach(s),ab.forEach(s),dv=p(a),Zp=o(a,"SMALL",{});var mM=l(Zp);_S=u(mM,`Returned values are a list of floats, or a list of list of floats
(depending on if you sent a string or a list of string, and if the
automatic reduction, usually mean_pooling for instance was applied for
you or not. This should be explained on the model's README.`),mM.forEach(s),gv=p(a),Qe=o(a,"H2",{class:!0});var ob=l(Qe);ma=o(ob,"A",{id:!0,class:!0,href:!0});var qM=l(ma);E$=o(qM,"SPAN",{});var $M=l(E$);v(Pl.$$.fragment,$M),$M.forEach(s),qM.forEach(s),vS=p(ob),y$=o(ob,"SPAN",{});var _M=l(y$);ES=u(_M,"Audio-classification task"),_M.forEach(s),ob.forEach(s),mv=p(a),eh=o(a,"P",{});var vM=l(eh);yS=u(vM,"This task reads some audio input and outputs the likelihood of classes."),vM.forEach(s),qv=p(a),v(qa.$$.fragment,a),$v=p(a),Ze=o(a,"P",{});var G_=l(Ze);wS=u(G_,"Available with: "),Rl=o(G_,"A",{href:!0,rel:!0});var EM=l(Rl);bS=u(EM,"\u{1F917} Transformers"),EM.forEach(s),TS=p(G_),Sl=o(G_,"A",{href:!0,rel:!0});var yM=l(Sl);jS=u(yM,"SpeechBrain"),yM.forEach(s),G_.forEach(s),_v=p(a),th=o(a,"P",{});var wM=l(th);kS=u(wM,"Request:"),wM.forEach(s),vv=p(a),v($a.$$.fragment,a),Ev=p(a),sh=o(a,"P",{});var bM=l(sh);AS=u(bM,`When sending your request, you should send a binary payload that simply
contains your audio file. We try to support most formats (Flac, Wav,
Mp3, Ogg etc...). And we automatically rescale the sampling rate to the
appropriate rate for the given model (usually 16KHz).`),bM.forEach(s),yv=p(a),_a=o(a,"TABLE",{});var lb=l(_a);w$=o(lb,"THEAD",{});var TM=l(w$);Nl=o(TM,"TR",{});var ib=l(Nl);ah=o(ib,"TH",{align:!0});var jM=l(ah);DS=u(jM,"All parameters"),jM.forEach(s),OS=p(ib),b$=o(ib,"TH",{align:!0}),l(b$).forEach(s),ib.forEach(s),TM.forEach(s),PS=p(lb),T$=o(lb,"TBODY",{});var kM=l(T$);xl=o(kM,"TR",{});var ub=l(xl);Il=o(ub,"TD",{align:!0});var Fx=l(Il);j$=o(Fx,"STRONG",{});var AM=l(j$);RS=u(AM,"no parameter"),AM.forEach(s),SS=u(Fx," (required)"),Fx.forEach(s),NS=p(ub),nh=o(ub,"TD",{align:!0});var DM=l(nh);xS=u(DM,"a binary representation of the audio file. No other parameters are currently allowed."),DM.forEach(s),ub.forEach(s),kM.forEach(s),lb.forEach(s),wv=p(a),rh=o(a,"P",{});var OM=l(rh);IS=u(OM,"Return value is a dict"),OM.forEach(s),bv=p(a),v(va.$$.fragment,a),Tv=p(a),Ea=o(a,"TABLE",{});var cb=l(Ea);k$=o(cb,"THEAD",{});var PM=l(k$);Hl=o(PM,"TR",{});var fb=l(Hl);oh=o(fb,"TH",{align:!0});var RM=l(oh);HS=u(RM,"Returned values"),RM.forEach(s),BS=p(fb),A$=o(fb,"TH",{align:!0}),l(A$).forEach(s),fb.forEach(s),PM.forEach(s),CS=p(cb),Bl=o(cb,"TBODY",{});var pb=l(Bl);Cl=o(pb,"TR",{});var hb=l(Cl);lh=o(hb,"TD",{align:!0});var SM=l(lh);D$=o(SM,"STRONG",{});var NM=l(D$);GS=u(NM,"label"),NM.forEach(s),SM.forEach(s),LS=p(hb),ih=o(hb,"TD",{align:!0});var xM=l(ih);US=u(xM,"The label for the class (model specific)"),xM.forEach(s),hb.forEach(s),zS=p(pb),Gl=o(pb,"TR",{});var db=l(Gl);uh=o(db,"TD",{align:!0});var IM=l(uh);O$=o(IM,"STRONG",{});var HM=l(O$);MS=u(HM,"score"),HM.forEach(s),IM.forEach(s),KS=p(db),ch=o(db,"TD",{align:!0});var BM=l(ch);FS=u(BM,"A float that represents how likely it is that the audio file belongs to this class."),BM.forEach(s),db.forEach(s),pb.forEach(s),cb.forEach(s),jv=p(a),et=o(a,"H2",{class:!0});var gb=l(et);ya=o(gb,"A",{id:!0,class:!0,href:!0});var CM=l(ya);P$=o(CM,"SPAN",{});var GM=l(P$);v(Ll.$$.fragment,GM),GM.forEach(s),CM.forEach(s),JS=p(gb),R$=o(gb,"SPAN",{});var LM=l(R$);WS=u(LM,"Object-detection task"),LM.forEach(s),gb.forEach(s),kv=p(a),fh=o(a,"P",{});var UM=l(fh);YS=u(UM,`This task reads some image input and outputs the likelihood of classes &
bounding boxes of detected objects.`),UM.forEach(s),Av=p(a),v(wa.$$.fragment,a),Dv=p(a),Ul=o(a,"P",{});var Jx=l(Ul);VS=u(Jx,"Available with: "),zl=o(Jx,"A",{href:!0,rel:!0});var zM=l(zl);XS=u(zM,"\u{1F917} Transformers"),zM.forEach(s),Jx.forEach(s),Ov=p(a),ph=o(a,"P",{});var MM=l(ph);QS=u(MM,"Request:"),MM.forEach(s),Pv=p(a),v(ba.$$.fragment,a),Rv=p(a),Ta=o(a,"P",{});var mb=l(Ta);ZS=u(mb,`When sending your request, you should send a binary payload that simply
contains your image file. We support all image formats `),Ml=o(mb,"A",{href:!0,rel:!0});var KM=l(Ml);eN=u(KM,`Pillow
supports`),KM.forEach(s),tN=u(mb,"."),mb.forEach(s),Sv=p(a),ja=o(a,"TABLE",{});var qb=l(ja);S$=o(qb,"THEAD",{});var FM=l(S$);Kl=o(FM,"TR",{});var $b=l(Kl);hh=o($b,"TH",{align:!0});var JM=l(hh);sN=u(JM,"All parameters"),JM.forEach(s),aN=p($b),N$=o($b,"TH",{align:!0}),l(N$).forEach(s),$b.forEach(s),FM.forEach(s),nN=p(qb),x$=o(qb,"TBODY",{});var WM=l(x$);Fl=o(WM,"TR",{});var _b=l(Fl);Jl=o(_b,"TD",{align:!0});var Wx=l(Jl);I$=o(Wx,"STRONG",{});var YM=l(I$);rN=u(YM,"no parameter"),YM.forEach(s),oN=u(Wx," (required)"),Wx.forEach(s),lN=p(_b),dh=o(_b,"TD",{align:!0});var VM=l(dh);iN=u(VM,"a binary representation of the image file. No other parameters are currently allowed."),VM.forEach(s),_b.forEach(s),WM.forEach(s),qb.forEach(s),Nv=p(a),gh=o(a,"P",{});var XM=l(gh);uN=u(XM,"Return value is a dict"),XM.forEach(s),xv=p(a),v(ka.$$.fragment,a),Iv=p(a),Aa=o(a,"TABLE",{});var vb=l(Aa);H$=o(vb,"THEAD",{});var QM=l(H$);Wl=o(QM,"TR",{});var Eb=l(Wl);mh=o(Eb,"TH",{align:!0});var ZM=l(mh);cN=u(ZM,"Returned values"),ZM.forEach(s),fN=p(Eb),B$=o(Eb,"TH",{align:!0}),l(B$).forEach(s),Eb.forEach(s),QM.forEach(s),pN=p(vb),tt=o(vb,"TBODY",{});var id=l(tt);Yl=o(id,"TR",{});var yb=l(Yl);qh=o(yb,"TD",{align:!0});var eK=l(qh);C$=o(eK,"STRONG",{});var tK=l(C$);hN=u(tK,"label"),tK.forEach(s),eK.forEach(s),dN=p(yb),$h=o(yb,"TD",{align:!0});var sK=l($h);gN=u(sK,"The label for the class (model specific) of a detected object."),sK.forEach(s),yb.forEach(s),mN=p(id),Vl=o(id,"TR",{});var wb=l(Vl);_h=o(wb,"TD",{align:!0});var aK=l(_h);G$=o(aK,"STRONG",{});var nK=l(G$);qN=u(nK,"score"),nK.forEach(s),aK.forEach(s),$N=p(wb),vh=o(wb,"TD",{align:!0});var rK=l(vh);_N=u(rK,"A float that represents how likely it is that the detected object belongs to the given class."),rK.forEach(s),wb.forEach(s),vN=p(id),Xl=o(id,"TR",{});var bb=l(Xl);Eh=o(bb,"TD",{align:!0});var oK=l(Eh);L$=o(oK,"STRONG",{});var lK=l(L$);EN=u(lK,"box"),lK.forEach(s),oK.forEach(s),yN=p(bb),yh=o(bb,"TD",{align:!0});var iK=l(yh);wN=u(iK,"A dict (with keys [xmin,ymin,xmax,ymax]) representing the bounding box of a detected object."),iK.forEach(s),bb.forEach(s),id.forEach(s),vb.forEach(s),Hv=p(a),st=o(a,"H2",{class:!0});var Tb=l(st);Da=o(Tb,"A",{id:!0,class:!0,href:!0});var uK=l(Da);U$=o(uK,"SPAN",{});var cK=l(U$);v(Ql.$$.fragment,cK),cK.forEach(s),uK.forEach(s),bN=p(Tb),z$=o(Tb,"SPAN",{});var fK=l(z$);TN=u(fK,"Image Segmentation task"),fK.forEach(s),Tb.forEach(s),Bv=p(a),wh=o(a,"P",{});var pK=l(wh);jN=u(pK,`This task reads some image input and outputs the likelihood of classes &
bounding boxes of detected objects.`),pK.forEach(s),Cv=p(a),v(Oa.$$.fragment,a),Gv=p(a),Zl=o(a,"P",{});var Yx=l(Zl);kN=u(Yx,"Available with: "),ei=o(Yx,"A",{href:!0,rel:!0});var hK=l(ei);AN=u(hK,"\u{1F917} Transformers"),hK.forEach(s),Yx.forEach(s),Lv=p(a),bh=o(a,"P",{});var dK=l(bh);DN=u(dK,"Request:"),dK.forEach(s),Uv=p(a),v(Pa.$$.fragment,a),zv=p(a),Ra=o(a,"P",{});var jb=l(Ra);ON=u(jb,`When sending your request, you should send a binary payload that simply
contains your image file. We support all image formats `),ti=o(jb,"A",{href:!0,rel:!0});var gK=l(ti);PN=u(gK,`Pillow
supports`),gK.forEach(s),RN=u(jb,"."),jb.forEach(s),Mv=p(a),Sa=o(a,"TABLE",{});var kb=l(Sa);M$=o(kb,"THEAD",{});var mK=l(M$);si=o(mK,"TR",{});var Ab=l(si);Th=o(Ab,"TH",{align:!0});var qK=l(Th);SN=u(qK,"All parameters"),qK.forEach(s),NN=p(Ab),K$=o(Ab,"TH",{align:!0}),l(K$).forEach(s),Ab.forEach(s),mK.forEach(s),xN=p(kb),F$=o(kb,"TBODY",{});var $K=l(F$);ai=o($K,"TR",{});var Db=l(ai);ni=o(Db,"TD",{align:!0});var Vx=l(ni);J$=o(Vx,"STRONG",{});var _K=l(J$);IN=u(_K,"no parameter"),_K.forEach(s),HN=u(Vx," (required)"),Vx.forEach(s),BN=p(Db),jh=o(Db,"TD",{align:!0});var vK=l(jh);CN=u(vK,"a binary representation of the image file. No other parameters are currently allowed."),vK.forEach(s),Db.forEach(s),$K.forEach(s),kb.forEach(s),Kv=p(a),kh=o(a,"P",{});var EK=l(kh);GN=u(EK,"Return value is a dict"),EK.forEach(s),Fv=p(a),v(Na.$$.fragment,a),Jv=p(a),xa=o(a,"TABLE",{});var Ob=l(xa);W$=o(Ob,"THEAD",{});var yK=l(W$);ri=o(yK,"TR",{});var Pb=l(ri);Ah=o(Pb,"TH",{align:!0});var wK=l(Ah);LN=u(wK,"Returned values"),wK.forEach(s),UN=p(Pb),Y$=o(Pb,"TH",{align:!0}),l(Y$).forEach(s),Pb.forEach(s),yK.forEach(s),zN=p(Ob),at=o(Ob,"TBODY",{});var ud=l(at);oi=o(ud,"TR",{});var Rb=l(oi);Dh=o(Rb,"TD",{align:!0});var bK=l(Dh);V$=o(bK,"STRONG",{});var TK=l(V$);MN=u(TK,"label"),TK.forEach(s),bK.forEach(s),KN=p(Rb),Oh=o(Rb,"TD",{align:!0});var jK=l(Oh);FN=u(jK,"The label for the class (model specific) of a segment."),jK.forEach(s),Rb.forEach(s),JN=p(ud),li=o(ud,"TR",{});var Sb=l(li);Ph=o(Sb,"TD",{align:!0});var kK=l(Ph);X$=o(kK,"STRONG",{});var AK=l(X$);WN=u(AK,"score"),AK.forEach(s),kK.forEach(s),YN=p(Sb),Rh=o(Sb,"TD",{align:!0});var DK=l(Rh);VN=u(DK,"A float that represents how likely it is that the segment belongs to the given class."),DK.forEach(s),Sb.forEach(s),XN=p(ud),ii=o(ud,"TR",{});var Nb=l(ii);Sh=o(Nb,"TD",{align:!0});var OK=l(Sh);Q$=o(OK,"STRONG",{});var PK=l(Q$);QN=u(PK,"mask"),PK.forEach(s),OK.forEach(s),ZN=p(Nb),Nh=o(Nb,"TD",{align:!0});var RK=l(Nh);ex=u(RK,"A str (base64 str of a single channel black-and-white img) representing the mask of a segment."),RK.forEach(s),Nb.forEach(s),ud.forEach(s),Ob.forEach(s),Wv=p(a),nt=o(a,"H2",{class:!0});var xb=l(nt);Ia=o(xb,"A",{id:!0,class:!0,href:!0});var SK=l(Ia);Z$=o(SK,"SPAN",{});var NK=l(Z$);v(ui.$$.fragment,NK),NK.forEach(s),SK.forEach(s),tx=p(xb),e_=o(xb,"SPAN",{});var xK=l(e_);sx=u(xK,"Image Classification task"),xK.forEach(s),xb.forEach(s),Yv=p(a),xh=o(a,"P",{});var IK=l(xh);ax=u(IK,"This task reads some image input and outputs the likelihood of classes."),IK.forEach(s),Vv=p(a),v(Ha.$$.fragment,a),Xv=p(a),ci=o(a,"P",{});var Xx=l(ci);nx=u(Xx,"Available with: "),fi=o(Xx,"A",{href:!0,rel:!0});var HK=l(fi);rx=u(HK,"\u{1F917} Transformers"),HK.forEach(s),Xx.forEach(s),Qv=p(a),Ih=o(a,"P",{});var BK=l(Ih);ox=u(BK,"Request:"),BK.forEach(s),Zv=p(a),v(Ba.$$.fragment,a),eE=p(a),Ca=o(a,"P",{});var Ib=l(Ca);lx=u(Ib,`When sending your request, you should send a binary payload that simply
contains your image file. We support all image formats `),pi=o(Ib,"A",{href:!0,rel:!0});var CK=l(pi);ix=u(CK,`Pillow
supports`),CK.forEach(s),ux=u(Ib,"."),Ib.forEach(s),tE=p(a),Ga=o(a,"TABLE",{});var Hb=l(Ga);t_=o(Hb,"THEAD",{});var GK=l(t_);hi=o(GK,"TR",{});var Bb=l(hi);Hh=o(Bb,"TH",{align:!0});var LK=l(Hh);cx=u(LK,"All parameters"),LK.forEach(s),fx=p(Bb),s_=o(Bb,"TH",{align:!0}),l(s_).forEach(s),Bb.forEach(s),GK.forEach(s),px=p(Hb),a_=o(Hb,"TBODY",{});var UK=l(a_);di=o(UK,"TR",{});var Cb=l(di);gi=o(Cb,"TD",{align:!0});var Qx=l(gi);n_=o(Qx,"STRONG",{});var zK=l(n_);hx=u(zK,"no parameter"),zK.forEach(s),dx=u(Qx," (required)"),Qx.forEach(s),gx=p(Cb),Bh=o(Cb,"TD",{align:!0});var MK=l(Bh);mx=u(MK,"a binary representation of the image file. No other parameters are currently allowed."),MK.forEach(s),Cb.forEach(s),UK.forEach(s),Hb.forEach(s),sE=p(a),Ch=o(a,"P",{});var KK=l(Ch);qx=u(KK,"Return value is a dict"),KK.forEach(s),aE=p(a),v(La.$$.fragment,a),nE=p(a),Ua=o(a,"TABLE",{});var Gb=l(Ua);r_=o(Gb,"THEAD",{});var FK=l(r_);mi=o(FK,"TR",{});var Lb=l(mi);Gh=o(Lb,"TH",{align:!0});var JK=l(Gh);$x=u(JK,"Returned values"),JK.forEach(s),_x=p(Lb),o_=o(Lb,"TH",{align:!0}),l(o_).forEach(s),Lb.forEach(s),FK.forEach(s),vx=p(Gb),qi=o(Gb,"TBODY",{});var Ub=l(qi);$i=o(Ub,"TR",{});var zb=l($i);Lh=o(zb,"TD",{align:!0});var WK=l(Lh);l_=o(WK,"STRONG",{});var YK=l(l_);Ex=u(YK,"label"),YK.forEach(s),WK.forEach(s),yx=p(zb),Uh=o(zb,"TD",{align:!0});var VK=l(Uh);wx=u(VK,"The label for the class (model specific)"),VK.forEach(s),zb.forEach(s),bx=p(Ub),_i=o(Ub,"TR",{});var Mb=l(_i);zh=o(Mb,"TD",{align:!0});var XK=l(zh);i_=o(XK,"STRONG",{});var QK=l(i_);Tx=u(QK,"score"),QK.forEach(s),XK.forEach(s),jx=p(Mb),Mh=o(Mb,"TD",{align:!0});var ZK=l(Mh);kx=u(ZK,"A float that represents how likely it is that the image file belongs to this class."),ZK.forEach(s),Mb.forEach(s),Ub.forEach(s),Gb.forEach(s),this.h()},h(){h(n,"name","hf:doc:metadata"),h(n,"content",JSON.stringify(OW)),h(d,"id","detailed-parameters"),h(d,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(d,"href","#detailed-parameters"),h(t,"class","relative group"),h(ne,"id","which-task-is-used-by-this-model"),h(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ne,"href","#which-task-is-used-by-this-model"),h(D,"class","relative group"),h(lt,"class","block dark:hidden"),eF(lt.src,Zx="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/inference-api/task.png")||h(lt,"src",Zx),h(lt,"width","300"),h(it,"class","hidden dark:block invert"),eF(it.src,eI="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/inference-api/task-dark.png")||h(it,"src",eI),h(it,"width","300"),h(ut,"id","zeroshot-classification-task"),h(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ut,"href","#zeroshot-classification-task"),h(Ne,"class","relative group"),h(Za,"href","https://github.com/huggingface/transformers"),h(Za,"rel","nofollow"),h(Hi,"align","left"),h(hd,"align","left"),h(sn,"align","left"),h(Bi,"align","left"),h(nn,"align","left"),h(Ci,"align","left"),h(Gi,"align","left"),h(he,"align","left"),h(Li,"align","left"),h(ht,"align","left"),h(Ui,"align","left"),h(zi,"align","left"),h(Mi,"align","left"),h(dt,"align","left"),h(Ki,"align","left"),h(gt,"align","left"),h(Fi,"align","left"),h(mt,"align","left"),h(Yi,"align","left"),h(bd,"align","left"),h(Vi,"align","left"),h(Xi,"align","left"),h(Qi,"align","left"),h(Zi,"align","left"),h(eu,"align","left"),h(_t,"align","left"),h(vt,"id","translation-task"),h(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(vt,"href","#translation-task"),h(Ie,"class","relative group"),h($n,"href","https://github.com/huggingface/transformers"),h($n,"rel","nofollow"),h(nu,"align","left"),h(Rd,"align","left"),h(En,"align","left"),h(ru,"align","left"),h(ou,"align","left"),h(lu,"align","left"),h(iu,"align","left"),h(bt,"align","left"),h(uu,"align","left"),h(Tt,"align","left"),h(cu,"align","left"),h(jt,"align","left"),h(pu,"align","left"),h(Cd,"align","left"),h(hu,"align","left"),h(du,"align","left"),h(At,"id","summarization-task"),h(At,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(At,"href","#summarization-task"),h(He,"class","relative group"),h(gu,"href","mailto:api-enterprise@huggingface.co"),h(On,"href","https://github.com/huggingface/transformers"),h(On,"rel","nofollow"),h($u,"align","left"),h(Kd,"align","left"),h(Sn,"align","left"),h(_u,"align","left"),h(vu,"align","left"),h(Eu,"align","left"),h(yu,"align","left"),h(de,"align","left"),h(wu,"align","left"),h(ge,"align","left"),h(bu,"align","left"),h(me,"align","left"),h(Tu,"align","left"),h(re,"align","left"),h(ju,"align","left"),h(qe,"align","left"),h(ku,"align","left"),h(St,"align","left"),h(Au,"align","left"),h(Nt,"align","left"),h(Du,"align","left"),h(Ou,"align","left"),h(Pu,"align","left"),h(xt,"align","left"),h(Ru,"align","left"),h(It,"align","left"),h(Su,"align","left"),h(Ht,"align","left"),h(xu,"align","left"),h(pg,"align","left"),h(Iu,"align","left"),h(Hu,"align","left"),h(Ct,"id","conversational-task"),h(Ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ct,"href","#conversational-task"),h(Be,"class","relative group"),h(Vn,"href","https://github.com/huggingface/transformers"),h(Vn,"rel","nofollow"),h(Lu,"align","left"),h($g,"align","left"),h(Zn,"align","left"),h(vg,"align","left"),h(Uu,"align","left"),h(zu,"align","left"),h(Mu,"align","left"),h(Ku,"align","left"),h(Fu,"align","left"),h(zt,"align","left"),h(Ju,"align","left"),h(Wu,"align","left"),h(Yu,"align","left"),h($e,"align","left"),h(Vu,"align","left"),h(_e,"align","left"),h(Xu,"align","left"),h(ve,"align","left"),h(Qu,"align","left"),h(oe,"align","left"),h(Zu,"align","left"),h(Ee,"align","left"),h(ec,"align","left"),h(Mt,"align","left"),h(tc,"align","left"),h(Kt,"align","left"),h(sc,"align","left"),h(ac,"align","left"),h(nc,"align","left"),h(Ft,"align","left"),h(rc,"align","left"),h(Jt,"align","left"),h(oc,"align","left"),h(Wt,"align","left"),h(ic,"align","left"),h(Lg,"align","left"),h(uc,"align","left"),h(cc,"align","left"),h(fc,"align","left"),h(pc,"align","left"),h(hc,"align","left"),h(dc,"align","left"),h(gc,"align","left"),h(mc,"align","left"),h(Vt,"id","table-question-answering-task"),h(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Vt,"href","#table-question-answering-task"),h(Ce,"class","relative group"),h(yr,"href","https://github.com/huggingface/transformers"),h(yr,"rel","nofollow"),h(vc,"align","left"),h(Jg,"align","left"),h(Tr,"align","left"),h(Yg,"align","left"),h(Ec,"align","left"),h(yc,"align","left"),h(wc,"align","left"),h(bc,"align","left"),h(Tc,"align","left"),h(jc,"align","left"),h(kc,"align","left"),h(es,"align","left"),h(Ac,"align","left"),h(ts,"align","left"),h(Dc,"align","left"),h(ss,"align","left"),h(Pc,"align","left"),h(tm,"align","left"),h(Rc,"align","left"),h(Sc,"align","left"),h(Nc,"align","left"),h(xc,"align","left"),h(Ic,"align","left"),h(Hc,"align","left"),h(Bc,"align","left"),h(Cc,"align","left"),h(rs,"id","question-answering-task"),h(rs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(rs,"href","#question-answering-task"),h(Ge,"class","relative group"),h(Br,"href","https://github.com/huggingface/transformers"),h(Br,"rel","nofollow"),h(Cr,"href","https://github.com/allenai/allennlp"),h(Cr,"rel","nofollow"),h(Mc,"align","left"),h(um,"align","left"),h(Kc,"align","left"),h(Fc,"align","left"),h(Jc,"align","left"),h(Wc,"align","left"),h(Yc,"align","left"),h(cs,"align","left"),h(Vc,"align","left"),h(fs,"align","left"),h(ps,"id","textclassification-task"),h(ps,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ps,"href","#textclassification-task"),h(Ue,"class","relative group"),h(Jr,"href","https://github.com/huggingface/transformers"),h(Jr,"rel","nofollow"),h(ef,"align","left"),h(_m,"align","left"),h(Vr,"align","left"),h(tf,"align","left"),h(sf,"align","left"),h(af,"align","left"),h(nf,"align","left"),h(ms,"align","left"),h(rf,"align","left"),h(qs,"align","left"),h(of,"align","left"),h($s,"align","left"),h(uf,"align","left"),h(jm,"align","left"),h(cf,"align","left"),h(ff,"align","left"),h(pf,"align","left"),h(hf,"align","left"),h(Es,"id","named-entity-recognition-ner-task"),h(Es,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Es,"href","#named-entity-recognition-ner-task"),h(ze,"class","relative group"),h(df,"href","#token-classification-task"),h(ys,"id","tokenclassification-task"),h(ys,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ys,"href","#tokenclassification-task"),h(Me,"class","relative group"),h(io,"href","https://github.com/huggingface/transformers"),h(io,"rel","nofollow"),h(uo,"href","https://github.com/flairNLP/flair"),h(uo,"rel","nofollow"),h($f,"align","left"),h(Nm,"align","left"),h(po,"align","left"),h(_f,"align","left"),h(vf,"align","left"),h(Ef,"align","left"),h(yf,"align","left"),h(x,"align","left"),h(wf,"align","left"),h(bf,"align","left"),h(Tf,"align","left"),h(js,"align","left"),h(jf,"align","left"),h(ks,"align","left"),h(kf,"align","left"),h(As,"align","left"),h(Df,"align","left"),h(Xm,"align","left"),h(Of,"align","left"),h(Pf,"align","left"),h(Rf,"align","left"),h(Sf,"align","left"),h(Nf,"align","left"),h(xf,"align","left"),h(If,"align","left"),h(Ps,"align","left"),h(Hf,"align","left"),h(Rs,"align","left"),h(Ss,"id","textgeneration-task"),h(Ss,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ss,"href","#textgeneration-task"),h(Fe,"class","relative group"),h(Ao,"href","https://github.com/huggingface/transformers"),h(Ao,"rel","nofollow"),h(Lf,"align","left"),h(iq,"align","left"),h(Po,"align","left"),h(Uf,"align","left"),h(zf,"align","left"),h(Mf,"align","left"),h(Kf,"align","left"),h(ye,"align","left"),h(Ff,"align","left"),h(le,"align","left"),h(Jf,"align","left"),h(we,"align","left"),h(Wf,"align","left"),h(Hs,"align","left"),h(Yf,"align","left"),h(be,"align","left"),h(Vf,"align","left"),h(Te,"align","left"),h(Xf,"align","left"),h(je,"align","left"),h(Qf,"align","left"),h(Bs,"align","left"),h(Zf,"align","left"),h(Cs,"align","left"),h(ep,"align","left"),h(tp,"align","left"),h(sp,"align","left"),h(Gs,"align","left"),h(ap,"align","left"),h(Ls,"align","left"),h(np,"align","left"),h(Us,"align","left"),h(op,"align","left"),h(Rq,"align","left"),h(lp,"align","left"),h(ip,"align","left"),h(Ks,"id","text2textgeneration-task"),h(Ks,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ks,"href","#text2textgeneration-task"),h(Je,"class","relative group"),h(up,"href","#text-generation-task"),h(Js,"id","fill-mask-task"),h(Js,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Js,"href","#fill-mask-task"),h(We,"class","relative group"),h(Xo,"href","https://github.com/huggingface/transformers"),h(Xo,"rel","nofollow"),h(hp,"align","left"),h(Gq,"align","left"),h(el,"align","left"),h(dp,"align","left"),h(gp,"align","left"),h(mp,"align","left"),h(qp,"align","left"),h(Xs,"align","left"),h($p,"align","left"),h(Qs,"align","left"),h(_p,"align","left"),h(Zs,"align","left"),h(Ep,"align","left"),h(Jq,"align","left"),h(yp,"align","left"),h(wp,"align","left"),h(bp,"align","left"),h(Tp,"align","left"),h(jp,"align","left"),h(kp,"align","left"),h(Ap,"align","left"),h(Dp,"align","left"),h(sa,"id","automatic-speech-recognition-task"),h(sa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(sa,"href","#automatic-speech-recognition-task"),h(Ye,"class","relative group"),h(fl,"href","https://github.com/huggingface/transformers"),h(fl,"rel","nofollow"),h(pl,"href","https://github.com/espnet/espnet"),h(pl,"rel","nofollow"),h(hl,"href","https://github.com/speechbrain/speechbrain"),h(hl,"rel","nofollow"),h(Sp,"align","left"),h(t$,"align","left"),h(ml,"align","left"),h(Np,"align","left"),h(Hp,"align","left"),h(r$,"align","left"),h(Bp,"align","left"),h(Cp,"align","left"),h(ua,"id","featureextraction-task"),h(ua,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ua,"href","#featureextraction-task"),h(Ve,"class","relative group"),h(vl,"href","https://github.com/huggingface/transformers"),h(vl,"rel","nofollow"),h(El,"href","https://github.com/UKPLab/sentence-transformers"),h(El,"rel","nofollow"),h(Up,"align","left"),h(f$,"align","left"),h(bl,"align","left"),h(zp,"align","left"),h(Mp,"align","left"),h(Kp,"align","left"),h(Fp,"align","left"),h(pa,"align","left"),h(Jp,"align","left"),h(ha,"align","left"),h(Wp,"align","left"),h(da,"align","left"),h(Vp,"align","left"),h($$,"align","left"),h(Xp,"align","left"),h(Qp,"align","left"),h(ma,"id","audioclassification-task"),h(ma,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ma,"href","#audioclassification-task"),h(Qe,"class","relative group"),h(Rl,"href","https://github.com/huggingface/transformers"),h(Rl,"rel","nofollow"),h(Sl,"href","https://github.com/speechbrain/speechbrain"),h(Sl,"rel","nofollow"),h(ah,"align","left"),h(b$,"align","left"),h(Il,"align","left"),h(nh,"align","left"),h(oh,"align","left"),h(A$,"align","left"),h(lh,"align","left"),h(ih,"align","left"),h(uh,"align","left"),h(ch,"align","left"),h(ya,"id","objectdetection-task"),h(ya,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ya,"href","#objectdetection-task"),h(et,"class","relative group"),h(zl,"href","https://github.com/huggingface/transformers"),h(zl,"rel","nofollow"),h(Ml,"href","https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html"),h(Ml,"rel","nofollow"),h(hh,"align","left"),h(N$,"align","left"),h(Jl,"align","left"),h(dh,"align","left"),h(mh,"align","left"),h(B$,"align","left"),h(qh,"align","left"),h($h,"align","left"),h(_h,"align","left"),h(vh,"align","left"),h(Eh,"align","left"),h(yh,"align","left"),h(Da,"id","image-segmentation-task"),h(Da,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Da,"href","#image-segmentation-task"),h(st,"class","relative group"),h(ei,"href","https://github.com/huggingface/transformers"),h(ei,"rel","nofollow"),h(ti,"href","https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html"),h(ti,"rel","nofollow"),h(Th,"align","left"),h(K$,"align","left"),h(ni,"align","left"),h(jh,"align","left"),h(Ah,"align","left"),h(Y$,"align","left"),h(Dh,"align","left"),h(Oh,"align","left"),h(Ph,"align","left"),h(Rh,"align","left"),h(Sh,"align","left"),h(Nh,"align","left"),h(Ia,"id","image-classification-task"),h(Ia,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ia,"href","#image-classification-task"),h(nt,"class","relative group"),h(fi,"href","https://github.com/huggingface/transformers"),h(fi,"rel","nofollow"),h(pi,"href","https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html"),h(pi,"rel","nofollow"),h(Hh,"align","left"),h(s_,"align","left"),h(gi,"align","left"),h(Bh,"align","left"),h(Gh,"align","left"),h(o_,"align","left"),h(Lh,"align","left"),h(Uh,"align","left"),h(zh,"align","left"),h(Mh,"align","left")},m(a,g){e(document.head,n),m(a,c,g),m(a,t,g),e(t,d),e(d,q),E(k,q,null),e(t,A),e(t,j),e(j,T),m(a,S,g),m(a,D,g),e(D,ne),e(ne,Re),E(Q,Re,null),e(D,Y),e(D,ot),e(ot,Ri),m(a,Va,g),m(a,Se,g),e(Se,Kb),m(a,L_,g),m(a,Si,g),e(Si,Fb),m(a,U_,g),m(a,lt,g),m(a,z_,g),m(a,it,g),m(a,M_,g),m(a,Ne,g),e(Ne,ut),e(ut,cd),E(Xa,cd,null),e(Ne,Jb),e(Ne,fd),e(fd,Wb),m(a,K_,g),m(a,Ni,g),e(Ni,Yb),m(a,F_,g),E(ct,a,g),m(a,J_,g),m(a,Qa,g),e(Qa,Vb),e(Qa,Za),e(Za,Xb),m(a,W_,g),m(a,xi,g),e(xi,Qb),m(a,Y_,g),E(ft,a,g),m(a,V_,g),m(a,Ii,g),e(Ii,Zb),m(a,X_,g),m(a,pt,g),e(pt,pd),e(pd,en),e(en,Hi),e(Hi,e3),e(en,t3),e(en,hd),e(pt,s3),e(pt,M),e(M,tn),e(tn,sn),e(sn,dd),e(dd,a3),e(sn,n3),e(tn,r3),e(tn,Bi),e(Bi,o3),e(M,l3),e(M,an),e(an,nn),e(nn,gd),e(gd,i3),e(nn,u3),e(an,c3),e(an,Ci),e(Ci,f3),e(M,p3),e(M,rn),e(rn,Gi),e(Gi,h3),e(rn,d3),e(rn,he),e(he,g3),e(he,md),e(md,m3),e(he,q3),e(he,qd),e(qd,$3),e(he,_3),e(M,v3),e(M,on),e(on,Li),e(Li,E3),e(on,y3),e(on,ht),e(ht,w3),e(ht,$d),e($d,b3),e(ht,T3),e(M,j3),e(M,ln),e(ln,Ui),e(Ui,_d),e(_d,k3),e(ln,A3),e(ln,zi),e(zi,D3),e(M,O3),e(M,un),e(un,Mi),e(Mi,P3),e(un,R3),e(un,dt),e(dt,S3),e(dt,vd),e(vd,N3),e(dt,x3),e(M,I3),e(M,cn),e(cn,Ki),e(Ki,H3),e(cn,B3),e(cn,gt),e(gt,C3),e(gt,Ed),e(Ed,G3),e(gt,L3),e(M,U3),e(M,fn),e(fn,Fi),e(Fi,z3),e(fn,M3),e(fn,mt),e(mt,K3),e(mt,yd),e(yd,F3),e(mt,J3),m(a,Q_,g),m(a,Ji,g),e(Ji,W3),m(a,Z_,g),m(a,Wi,g),e(Wi,Y3),m(a,e1,g),E(qt,a,g),m(a,t1,g),m(a,$t,g),e($t,wd),e(wd,pn),e(pn,Yi),e(Yi,V3),e(pn,X3),e(pn,bd),e($t,Q3),e($t,xe),e(xe,hn),e(hn,Vi),e(Vi,Td),e(Td,Z3),e(hn,eT),e(hn,Xi),e(Xi,tT),e(xe,sT),e(xe,dn),e(dn,Qi),e(Qi,jd),e(jd,aT),e(dn,nT),e(dn,Zi),e(Zi,rT),e(xe,oT),e(xe,gn),e(gn,eu),e(eu,kd),e(kd,lT),e(gn,iT),e(gn,_t),e(_t,uT),e(_t,Ad),e(Ad,cT),e(_t,fT),m(a,s1,g),m(a,Ie,g),e(Ie,vt),e(vt,Dd),E(mn,Dd,null),e(Ie,pT),e(Ie,Od),e(Od,hT),m(a,a1,g),m(a,tu,g),e(tu,dT),m(a,n1,g),E(Et,a,g),m(a,r1,g),m(a,qn,g),e(qn,gT),e(qn,$n),e($n,mT),m(a,o1,g),m(a,su,g),e(su,qT),m(a,l1,g),E(yt,a,g),m(a,i1,g),m(a,au,g),e(au,$T),m(a,u1,g),m(a,wt,g),e(wt,Pd),e(Pd,_n),e(_n,nu),e(nu,_T),e(_n,vT),e(_n,Rd),e(wt,ET),e(wt,Z),e(Z,vn),e(vn,En),e(En,Sd),e(Sd,yT),e(En,wT),e(vn,bT),e(vn,ru),e(ru,TT),e(Z,jT),e(Z,yn),e(yn,ou),e(ou,Nd),e(Nd,kT),e(yn,AT),e(yn,lu),e(lu,DT),e(Z,OT),e(Z,wn),e(wn,iu),e(iu,PT),e(wn,RT),e(wn,bt),e(bt,ST),e(bt,xd),e(xd,NT),e(bt,xT),e(Z,IT),e(Z,bn),e(bn,uu),e(uu,HT),e(bn,BT),e(bn,Tt),e(Tt,CT),e(Tt,Id),e(Id,GT),e(Tt,LT),e(Z,UT),e(Z,Tn),e(Tn,cu),e(cu,zT),e(Tn,MT),e(Tn,jt),e(jt,KT),e(jt,Hd),e(Hd,FT),e(jt,JT),m(a,c1,g),m(a,fu,g),e(fu,WT),m(a,f1,g),m(a,kt,g),e(kt,Bd),e(Bd,jn),e(jn,pu),e(pu,YT),e(jn,VT),e(jn,Cd),e(kt,XT),e(kt,Gd),e(Gd,kn),e(kn,hu),e(hu,Ld),e(Ld,QT),e(kn,ZT),e(kn,du),e(du,ej),m(a,p1,g),m(a,He,g),e(He,At),e(At,Ud),E(An,Ud,null),e(He,tj),e(He,zd),e(zd,sj),m(a,h1,g),m(a,Dt,g),e(Dt,aj),e(Dt,gu),e(gu,nj),e(Dt,rj),m(a,d1,g),E(Ot,a,g),m(a,g1,g),m(a,Dn,g),e(Dn,oj),e(Dn,On),e(On,lj),m(a,m1,g),m(a,mu,g),e(mu,ij),m(a,q1,g),E(Pt,a,g),m(a,$1,g),m(a,qu,g),e(qu,uj),m(a,_1,g),m(a,Rt,g),e(Rt,Md),e(Md,Pn),e(Pn,$u),e($u,cj),e(Pn,fj),e(Pn,Kd),e(Rt,pj),e(Rt,G),e(G,Rn),e(Rn,Sn),e(Sn,Fd),e(Fd,hj),e(Sn,dj),e(Rn,gj),e(Rn,_u),e(_u,mj),e(G,qj),e(G,Nn),e(Nn,vu),e(vu,Jd),e(Jd,$j),e(Nn,_j),e(Nn,Eu),e(Eu,vj),e(G,Ej),e(G,xn),e(xn,yu),e(yu,yj),e(xn,wj),e(xn,de),e(de,bj),e(de,Wd),e(Wd,Tj),e(de,jj),e(de,Yd),e(Yd,kj),e(de,Aj),e(G,Dj),e(G,In),e(In,wu),e(wu,Oj),e(In,Pj),e(In,ge),e(ge,Rj),e(ge,Vd),e(Vd,Sj),e(ge,Nj),e(ge,Xd),e(Xd,xj),e(ge,Ij),e(G,Hj),e(G,Hn),e(Hn,bu),e(bu,Bj),e(Hn,Cj),e(Hn,me),e(me,Gj),e(me,Qd),e(Qd,Lj),e(me,Uj),e(me,Zd),e(Zd,zj),e(me,Mj),e(G,Kj),e(G,Bn),e(Bn,Tu),e(Tu,Fj),e(Bn,Jj),e(Bn,re),e(re,Wj),e(re,eg),e(eg,Yj),e(re,Vj),e(re,tg),e(tg,Xj),e(re,Qj),e(re,sg),e(sg,Zj),e(re,e4),e(G,t4),e(G,Cn),e(Cn,ju),e(ju,s4),e(Cn,a4),e(Cn,qe),e(qe,n4),e(qe,ag),e(ag,r4),e(qe,o4),e(qe,ng),e(ng,l4),e(qe,i4),e(G,u4),e(G,Gn),e(Gn,ku),e(ku,c4),e(Gn,f4),e(Gn,St),e(St,p4),e(St,rg),e(rg,h4),e(St,d4),e(G,g4),e(G,Ln),e(Ln,Au),e(Au,m4),e(Ln,q4),e(Ln,Nt),e(Nt,$4),e(Nt,og),e(og,_4),e(Nt,v4),e(G,E4),e(G,Un),e(Un,Du),e(Du,lg),e(lg,y4),e(Un,w4),e(Un,Ou),e(Ou,b4),e(G,T4),e(G,zn),e(zn,Pu),e(Pu,j4),e(zn,k4),e(zn,xt),e(xt,A4),e(xt,ig),e(ig,D4),e(xt,O4),e(G,P4),e(G,Mn),e(Mn,Ru),e(Ru,R4),e(Mn,S4),e(Mn,It),e(It,N4),e(It,ug),e(ug,x4),e(It,I4),e(G,H4),e(G,Kn),e(Kn,Su),e(Su,B4),e(Kn,C4),e(Kn,Ht),e(Ht,G4),e(Ht,cg),e(cg,L4),e(Ht,U4),m(a,v1,g),m(a,Nu,g),e(Nu,z4),m(a,E1,g),m(a,Bt,g),e(Bt,fg),e(fg,Fn),e(Fn,xu),e(xu,M4),e(Fn,K4),e(Fn,pg),e(Bt,F4),e(Bt,hg),e(hg,Jn),e(Jn,Iu),e(Iu,dg),e(dg,J4),e(Jn,W4),e(Jn,Hu),e(Hu,Y4),m(a,y1,g),m(a,Be,g),e(Be,Ct),e(Ct,gg),E(Wn,gg,null),e(Be,V4),e(Be,mg),e(mg,X4),m(a,w1,g),m(a,Bu,g),e(Bu,Q4),m(a,b1,g),E(Gt,a,g),m(a,T1,g),m(a,Yn,g),e(Yn,Z4),e(Yn,Vn),e(Vn,ek),m(a,j1,g),m(a,Cu,g),e(Cu,tk),m(a,k1,g),E(Lt,a,g),m(a,A1,g),m(a,Gu,g),e(Gu,sk),m(a,D1,g),m(a,Ut,g),e(Ut,qg),e(qg,Xn),e(Xn,Lu),e(Lu,ak),e(Xn,nk),e(Xn,$g),e(Ut,rk),e(Ut,N),e(N,Qn),e(Qn,Zn),e(Zn,_g),e(_g,ok),e(Zn,lk),e(Qn,ik),e(Qn,vg),e(N,uk),e(N,er),e(er,Uu),e(Uu,ck),e(er,fk),e(er,zu),e(zu,pk),e(N,hk),e(N,tr),e(tr,Mu),e(Mu,dk),e(tr,gk),e(tr,Ku),e(Ku,mk),e(N,qk),e(N,sr),e(sr,Fu),e(Fu,$k),e(sr,_k),e(sr,zt),e(zt,vk),e(zt,Eg),e(Eg,Ek),e(zt,yk),e(N,wk),e(N,ar),e(ar,Ju),e(Ju,yg),e(yg,bk),e(ar,Tk),e(ar,Wu),e(Wu,jk),e(N,kk),e(N,nr),e(nr,Yu),e(Yu,Ak),e(nr,Dk),e(nr,$e),e($e,Ok),e($e,wg),e(wg,Pk),e($e,Rk),e($e,bg),e(bg,Sk),e($e,Nk),e(N,xk),e(N,rr),e(rr,Vu),e(Vu,Ik),e(rr,Hk),e(rr,_e),e(_e,Bk),e(_e,Tg),e(Tg,Ck),e(_e,Gk),e(_e,jg),e(jg,Lk),e(_e,Uk),e(N,zk),e(N,or),e(or,Xu),e(Xu,Mk),e(or,Kk),e(or,ve),e(ve,Fk),e(ve,kg),e(kg,Jk),e(ve,Wk),e(ve,Ag),e(Ag,Yk),e(ve,Vk),e(N,Xk),e(N,lr),e(lr,Qu),e(Qu,Qk),e(lr,Zk),e(lr,oe),e(oe,e5),e(oe,Dg),e(Dg,t5),e(oe,s5),e(oe,Og),e(Og,a5),e(oe,n5),e(oe,Pg),e(Pg,r5),e(oe,o5),e(N,l5),e(N,ir),e(ir,Zu),e(Zu,i5),e(ir,u5),e(ir,Ee),e(Ee,c5),e(Ee,Rg),e(Rg,f5),e(Ee,p5),e(Ee,Sg),e(Sg,h5),e(Ee,d5),e(N,g5),e(N,ur),e(ur,ec),e(ec,m5),e(ur,q5),e(ur,Mt),e(Mt,$5),e(Mt,Ng),e(Ng,_5),e(Mt,v5),e(N,E5),e(N,cr),e(cr,tc),e(tc,y5),e(cr,w5),e(cr,Kt),e(Kt,b5),e(Kt,xg),e(xg,T5),e(Kt,j5),e(N,k5),e(N,fr),e(fr,sc),e(sc,Ig),e(Ig,A5),e(fr,D5),e(fr,ac),e(ac,O5),e(N,P5),e(N,pr),e(pr,nc),e(nc,R5),e(pr,S5),e(pr,Ft),e(Ft,N5),e(Ft,Hg),e(Hg,x5),e(Ft,I5),e(N,H5),e(N,hr),e(hr,rc),e(rc,B5),e(hr,C5),e(hr,Jt),e(Jt,G5),e(Jt,Bg),e(Bg,L5),e(Jt,U5),e(N,z5),e(N,dr),e(dr,oc),e(oc,M5),e(dr,K5),e(dr,Wt),e(Wt,F5),e(Wt,Cg),e(Cg,J5),e(Wt,W5),m(a,O1,g),m(a,lc,g),e(lc,Y5),m(a,P1,g),m(a,Yt,g),e(Yt,Gg),e(Gg,gr),e(gr,ic),e(ic,V5),e(gr,X5),e(gr,Lg),e(Yt,Q5),e(Yt,ie),e(ie,mr),e(mr,uc),e(uc,Ug),e(Ug,Z5),e(mr,e6),e(mr,cc),e(cc,t6),e(ie,s6),e(ie,qr),e(qr,fc),e(fc,zg),e(zg,a6),e(qr,n6),e(qr,pc),e(pc,r6),e(ie,o6),e(ie,$r),e($r,hc),e(hc,l6),e($r,i6),e($r,dc),e(dc,u6),e(ie,c6),e(ie,_r),e(_r,gc),e(gc,f6),e(_r,p6),e(_r,mc),e(mc,h6),m(a,R1,g),m(a,Ce,g),e(Ce,Vt),e(Vt,Mg),E(vr,Mg,null),e(Ce,d6),e(Ce,Kg),e(Kg,g6),m(a,S1,g),m(a,qc,g),e(qc,m6),m(a,N1,g),E(Xt,a,g),m(a,x1,g),m(a,Er,g),e(Er,q6),e(Er,yr),e(yr,$6),m(a,I1,g),m(a,$c,g),e($c,_6),m(a,H1,g),E(Qt,a,g),m(a,B1,g),m(a,_c,g),e(_c,v6),m(a,C1,g),m(a,Zt,g),e(Zt,Fg),e(Fg,wr),e(wr,vc),e(vc,E6),e(wr,y6),e(wr,Jg),e(Zt,w6),e(Zt,F),e(F,br),e(br,Tr),e(Tr,Wg),e(Wg,b6),e(Tr,T6),e(br,j6),e(br,Yg),e(F,k6),e(F,jr),e(jr,Ec),e(Ec,A6),e(jr,D6),e(jr,yc),e(yc,O6),e(F,P6),e(F,kr),e(kr,wc),e(wc,R6),e(kr,S6),e(kr,bc),e(bc,N6),e(F,x6),e(F,Ar),e(Ar,Tc),e(Tc,Vg),e(Vg,I6),e(Ar,H6),e(Ar,jc),e(jc,B6),e(F,C6),e(F,Dr),e(Dr,kc),e(kc,G6),e(Dr,L6),e(Dr,es),e(es,U6),e(es,Xg),e(Xg,z6),e(es,M6),e(F,K6),e(F,Or),e(Or,Ac),e(Ac,F6),e(Or,J6),e(Or,ts),e(ts,W6),e(ts,Qg),e(Qg,Y6),e(ts,V6),e(F,X6),e(F,Pr),e(Pr,Dc),e(Dc,Q6),e(Pr,Z6),e(Pr,ss),e(ss,e7),e(ss,Zg),e(Zg,t7),e(ss,s7),m(a,G1,g),m(a,Oc,g),e(Oc,a7),m(a,L1,g),E(as,a,g),m(a,U1,g),m(a,ns,g),e(ns,em),e(em,Rr),e(Rr,Pc),e(Pc,n7),e(Rr,r7),e(Rr,tm),e(ns,o7),e(ns,ue),e(ue,Sr),e(Sr,Rc),e(Rc,sm),e(sm,l7),e(Sr,i7),e(Sr,Sc),e(Sc,u7),e(ue,c7),e(ue,Nr),e(Nr,Nc),e(Nc,am),e(am,f7),e(Nr,p7),e(Nr,xc),e(xc,h7),e(ue,d7),e(ue,xr),e(xr,Ic),e(Ic,nm),e(nm,g7),e(xr,m7),e(xr,Hc),e(Hc,q7),e(ue,$7),e(ue,Ir),e(Ir,Bc),e(Bc,rm),e(rm,_7),e(Ir,v7),e(Ir,Cc),e(Cc,E7),m(a,z1,g),m(a,Ge,g),e(Ge,rs),e(rs,om),E(Hr,om,null),e(Ge,y7),e(Ge,lm),e(lm,w7),m(a,M1,g),m(a,Gc,g),e(Gc,b7),m(a,K1,g),E(os,a,g),m(a,F1,g),m(a,Le,g),e(Le,T7),e(Le,Br),e(Br,j7),e(Le,k7),e(Le,Cr),e(Cr,A7),m(a,J1,g),m(a,Lc,g),e(Lc,D7),m(a,W1,g),E(ls,a,g),m(a,Y1,g),m(a,Uc,g),e(Uc,O7),m(a,V1,g),m(a,zc,g),e(zc,P7),m(a,X1,g),E(is,a,g),m(a,Q1,g),m(a,us,g),e(us,im),e(im,Gr),e(Gr,Mc),e(Mc,R7),e(Gr,S7),e(Gr,um),e(us,N7),e(us,ce),e(ce,Lr),e(Lr,Kc),e(Kc,cm),e(cm,x7),e(Lr,I7),e(Lr,Fc),e(Fc,H7),e(ce,B7),e(ce,Ur),e(Ur,Jc),e(Jc,fm),e(fm,C7),e(Ur,G7),e(Ur,Wc),e(Wc,L7),e(ce,U7),e(ce,zr),e(zr,Yc),e(Yc,pm),e(pm,z7),e(zr,M7),e(zr,cs),e(cs,K7),e(cs,hm),e(hm,F7),e(cs,J7),e(ce,W7),e(ce,Mr),e(Mr,Vc),e(Vc,dm),e(dm,Y7),e(Mr,V7),e(Mr,fs),e(fs,X7),e(fs,gm),e(gm,Q7),e(fs,Z7),m(a,Z1,g),m(a,Ue,g),e(Ue,ps),e(ps,mm),E(Kr,mm,null),e(Ue,e9),e(Ue,qm),e(qm,t9),m(a,e2,g),m(a,Xc,g),e(Xc,s9),m(a,t2,g),E(hs,a,g),m(a,s2,g),m(a,Fr,g),e(Fr,a9),e(Fr,Jr),e(Jr,n9),m(a,a2,g),m(a,Qc,g),e(Qc,r9),m(a,n2,g),E(ds,a,g),m(a,r2,g),m(a,Zc,g),e(Zc,o9),m(a,o2,g),m(a,gs,g),e(gs,$m),e($m,Wr),e(Wr,ef),e(ef,l9),e(Wr,i9),e(Wr,_m),e(gs,u9),e(gs,ee),e(ee,Yr),e(Yr,Vr),e(Vr,vm),e(vm,c9),e(Vr,f9),e(Yr,p9),e(Yr,tf),e(tf,h9),e(ee,d9),e(ee,Xr),e(Xr,sf),e(sf,Em),e(Em,g9),e(Xr,m9),e(Xr,af),e(af,q9),e(ee,$9),e(ee,Qr),e(Qr,nf),e(nf,_9),e(Qr,v9),e(Qr,ms),e(ms,E9),e(ms,ym),e(ym,y9),e(ms,w9),e(ee,b9),e(ee,Zr),e(Zr,rf),e(rf,T9),e(Zr,j9),e(Zr,qs),e(qs,k9),e(qs,wm),e(wm,A9),e(qs,D9),e(ee,O9),e(ee,eo),e(eo,of),e(of,P9),e(eo,R9),e(eo,$s),e($s,S9),e($s,bm),e(bm,N9),e($s,x9),m(a,l2,g),m(a,lf,g),e(lf,I9),m(a,i2,g),E(_s,a,g),m(a,u2,g),m(a,vs,g),e(vs,Tm),e(Tm,to),e(to,uf),e(uf,H9),e(to,B9),e(to,jm),e(vs,C9),e(vs,so),e(so,ao),e(ao,cf),e(cf,km),e(km,G9),e(ao,L9),e(ao,ff),e(ff,U9),e(so,z9),e(so,no),e(no,pf),e(pf,Am),e(Am,M9),e(no,K9),e(no,hf),e(hf,F9),m(a,c2,g),m(a,ze,g),e(ze,Es),e(Es,Dm),E(ro,Dm,null),e(ze,J9),e(ze,Om),e(Om,W9),m(a,f2,g),m(a,oo,g),e(oo,Y9),e(oo,df),e(df,V9),m(a,p2,g),m(a,Me,g),e(Me,ys),e(ys,Pm),E(lo,Pm,null),e(Me,X9),e(Me,Rm),e(Rm,Q9),m(a,h2,g),m(a,gf,g),e(gf,Z9),m(a,d2,g),E(ws,a,g),m(a,g2,g),m(a,Ke,g),e(Ke,e8),e(Ke,io),e(io,t8),e(Ke,s8),e(Ke,uo),e(uo,a8),m(a,m2,g),m(a,mf,g),e(mf,n8),m(a,q2,g),E(bs,a,g),m(a,$2,g),m(a,qf,g),e(qf,r8),m(a,_2,g),m(a,Ts,g),e(Ts,Sm),e(Sm,co),e(co,$f),e($f,o8),e(co,l8),e(co,Nm),e(Ts,i8),e(Ts,J),e(J,fo),e(fo,po),e(po,xm),e(xm,u8),e(po,c8),e(fo,f8),e(fo,_f),e(_f,p8),e(J,h8),e(J,ho),e(ho,vf),e(vf,Im),e(Im,d8),e(ho,g8),e(ho,Ef),e(Ef,m8),e(J,q8),e(J,go),e(go,yf),e(yf,$8),e(go,_8),e(go,x),e(x,v8),e(x,Hm),e(Hm,E8),e(x,y8),e(x,w8),e(x,b8),e(x,Bm),e(Bm,T8),e(x,j8),e(x,k8),e(x,A8),e(x,Cm),e(Cm,D8),e(x,O8),e(x,P8),e(x,R8),e(x,Gm),e(Gm,S8),e(x,N8),e(x,Lm),e(Lm,x8),e(x,I8),e(x,H8),e(x,B8),e(x,Um),e(Um,C8),e(x,G8),e(x,zm),e(zm,L8),e(x,U8),e(x,z8),e(x,M8),e(x,Mm),e(Mm,K8),e(x,F8),e(x,Km),e(Km,J8),e(x,W8),e(J,Y8),e(J,mo),e(mo,wf),e(wf,Fm),e(Fm,V8),e(mo,X8),e(mo,bf),e(bf,Q8),e(J,Z8),e(J,qo),e(qo,Tf),e(Tf,eA),e(qo,tA),e(qo,js),e(js,sA),e(js,Jm),e(Jm,aA),e(js,nA),e(J,rA),e(J,$o),e($o,jf),e(jf,oA),e($o,lA),e($o,ks),e(ks,iA),e(ks,Wm),e(Wm,uA),e(ks,cA),e(J,fA),e(J,_o),e(_o,kf),e(kf,pA),e(_o,hA),e(_o,As),e(As,dA),e(As,Ym),e(Ym,gA),e(As,mA),m(a,v2,g),m(a,Af,g),e(Af,qA),m(a,E2,g),E(Ds,a,g),m(a,y2,g),m(a,Os,g),e(Os,Vm),e(Vm,vo),e(vo,Df),e(Df,$A),e(vo,_A),e(vo,Xm),e(Os,vA),e(Os,te),e(te,Eo),e(Eo,Of),e(Of,Qm),e(Qm,EA),e(Eo,yA),e(Eo,Pf),e(Pf,wA),e(te,bA),e(te,yo),e(yo,Rf),e(Rf,Zm),e(Zm,TA),e(yo,jA),e(yo,Sf),e(Sf,kA),e(te,AA),e(te,wo),e(wo,Nf),e(Nf,eq),e(eq,DA),e(wo,OA),e(wo,xf),e(xf,PA),e(te,RA),e(te,bo),e(bo,If),e(If,tq),e(tq,SA),e(bo,NA),e(bo,Ps),e(Ps,xA),e(Ps,sq),e(sq,IA),e(Ps,HA),e(te,BA),e(te,To),e(To,Hf),e(Hf,aq),e(aq,CA),e(To,GA),e(To,Rs),e(Rs,LA),e(Rs,nq),e(nq,UA),e(Rs,zA),m(a,w2,g),m(a,Fe,g),e(Fe,Ss),e(Ss,rq),E(jo,rq,null),e(Fe,MA),e(Fe,oq),e(oq,KA),m(a,b2,g),m(a,Bf,g),e(Bf,FA),m(a,T2,g),E(Ns,a,g),m(a,j2,g),m(a,ko,g),e(ko,JA),e(ko,Ao),e(Ao,WA),m(a,k2,g),m(a,Cf,g),e(Cf,YA),m(a,A2,g),E(xs,a,g),m(a,D2,g),m(a,Gf,g),e(Gf,VA),m(a,O2,g),m(a,Is,g),e(Is,lq),e(lq,Do),e(Do,Lf),e(Lf,XA),e(Do,QA),e(Do,iq),e(Is,ZA),e(Is,I),e(I,Oo),e(Oo,Po),e(Po,uq),e(uq,eD),e(Po,tD),e(Oo,sD),e(Oo,Uf),e(Uf,aD),e(I,nD),e(I,Ro),e(Ro,zf),e(zf,cq),e(cq,rD),e(Ro,oD),e(Ro,Mf),e(Mf,lD),e(I,iD),e(I,So),e(So,Kf),e(Kf,uD),e(So,cD),e(So,ye),e(ye,fD),e(ye,fq),e(fq,pD),e(ye,hD),e(ye,pq),e(pq,dD),e(ye,gD),e(I,mD),e(I,No),e(No,Ff),e(Ff,qD),e(No,$D),e(No,le),e(le,_D),e(le,hq),e(hq,vD),e(le,ED),e(le,dq),e(dq,yD),e(le,wD),e(le,gq),e(gq,bD),e(le,TD),e(I,jD),e(I,xo),e(xo,Jf),e(Jf,kD),e(xo,AD),e(xo,we),e(we,DD),e(we,mq),e(mq,OD),e(we,PD),e(we,qq),e(qq,RD),e(we,SD),e(I,ND),e(I,Io),e(Io,Wf),e(Wf,xD),e(Io,ID),e(Io,Hs),e(Hs,HD),e(Hs,$q),e($q,BD),e(Hs,CD),e(I,GD),e(I,Ho),e(Ho,Yf),e(Yf,LD),e(Ho,UD),e(Ho,be),e(be,zD),e(be,_q),e(_q,MD),e(be,KD),e(be,vq),e(vq,FD),e(be,JD),e(I,WD),e(I,Bo),e(Bo,Vf),e(Vf,YD),e(Bo,VD),e(Bo,Te),e(Te,XD),e(Te,Eq),e(Eq,QD),e(Te,ZD),e(Te,yq),e(yq,eO),e(Te,tO),e(I,sO),e(I,Co),e(Co,Xf),e(Xf,aO),e(Co,nO),e(Co,je),e(je,rO),e(je,wq),e(wq,oO),e(je,lO),e(je,bq),e(bq,iO),e(je,uO),e(I,cO),e(I,Go),e(Go,Qf),e(Qf,fO),e(Go,pO),e(Go,Bs),e(Bs,hO),e(Bs,Tq),e(Tq,dO),e(Bs,gO),e(I,mO),e(I,Lo),e(Lo,Zf),e(Zf,qO),e(Lo,$O),e(Lo,Cs),e(Cs,_O),e(Cs,jq),e(jq,vO),e(Cs,EO),e(I,yO),e(I,Uo),e(Uo,ep),e(ep,kq),e(kq,wO),e(Uo,bO),e(Uo,tp),e(tp,TO),e(I,jO),e(I,zo),e(zo,sp),e(sp,kO),e(zo,AO),e(zo,Gs),e(Gs,DO),e(Gs,Aq),e(Aq,OO),e(Gs,PO),e(I,RO),e(I,Mo),e(Mo,ap),e(ap,SO),e(Mo,NO),e(Mo,Ls),e(Ls,xO),e(Ls,Dq),e(Dq,IO),e(Ls,HO),e(I,BO),e(I,Ko),e(Ko,np),e(np,CO),e(Ko,GO),e(Ko,Us),e(Us,LO),e(Us,Oq),e(Oq,UO),e(Us,zO),m(a,P2,g),m(a,rp,g),e(rp,MO),m(a,R2,g),E(zs,a,g),m(a,S2,g),m(a,Ms,g),e(Ms,Pq),e(Pq,Fo),e(Fo,op),e(op,KO),e(Fo,FO),e(Fo,Rq),e(Ms,JO),e(Ms,Sq),e(Sq,Jo),e(Jo,lp),e(lp,Nq),e(Nq,WO),e(Jo,YO),e(Jo,ip),e(ip,VO),m(a,N2,g),m(a,Je,g),e(Je,Ks),e(Ks,xq),E(Wo,xq,null),e(Je,XO),e(Je,Iq),e(Iq,QO),m(a,x2,g),m(a,Fs,g),e(Fs,ZO),e(Fs,up),e(up,eP),e(Fs,tP),m(a,I2,g),m(a,We,g),e(We,Js),e(Js,Hq),E(Yo,Hq,null),e(We,sP),e(We,Bq),e(Bq,aP),m(a,H2,g),m(a,cp,g),e(cp,nP),m(a,B2,g),E(Ws,a,g),m(a,C2,g),m(a,Vo,g),e(Vo,rP),e(Vo,Xo),e(Xo,oP),m(a,G2,g),m(a,fp,g),e(fp,lP),m(a,L2,g),E(Ys,a,g),m(a,U2,g),m(a,pp,g),e(pp,iP),m(a,z2,g),m(a,Vs,g),e(Vs,Cq),e(Cq,Qo),e(Qo,hp),e(hp,uP),e(Qo,cP),e(Qo,Gq),e(Vs,fP),e(Vs,se),e(se,Zo),e(Zo,el),e(el,Lq),e(Lq,pP),e(el,hP),e(Zo,dP),e(Zo,dp),e(dp,gP),e(se,mP),e(se,tl),e(tl,gp),e(gp,Uq),e(Uq,qP),e(tl,$P),e(tl,mp),e(mp,_P),e(se,vP),e(se,sl),e(sl,qp),e(qp,EP),e(sl,yP),e(sl,Xs),e(Xs,wP),e(Xs,zq),e(zq,bP),e(Xs,TP),e(se,jP),e(se,al),e(al,$p),e($p,kP),e(al,AP),e(al,Qs),e(Qs,DP),e(Qs,Mq),e(Mq,OP),e(Qs,PP),e(se,RP),e(se,nl),e(nl,_p),e(_p,SP),e(nl,NP),e(nl,Zs),e(Zs,xP),e(Zs,Kq),e(Kq,IP),e(Zs,HP),m(a,M2,g),m(a,vp,g),e(vp,BP),m(a,K2,g),E(ea,a,g),m(a,F2,g),m(a,ta,g),e(ta,Fq),e(Fq,rl),e(rl,Ep),e(Ep,CP),e(rl,GP),e(rl,Jq),e(ta,LP),e(ta,fe),e(fe,ol),e(ol,yp),e(yp,Wq),e(Wq,UP),e(ol,zP),e(ol,wp),e(wp,MP),e(fe,KP),e(fe,ll),e(ll,bp),e(bp,Yq),e(Yq,FP),e(ll,JP),e(ll,Tp),e(Tp,WP),e(fe,YP),e(fe,il),e(il,jp),e(jp,Vq),e(Vq,VP),e(il,XP),e(il,kp),e(kp,QP),e(fe,ZP),e(fe,ul),e(ul,Ap),e(Ap,Xq),e(Xq,eR),e(ul,tR),e(ul,Dp),e(Dp,sR),m(a,J2,g),m(a,Ye,g),e(Ye,sa),e(sa,Qq),E(cl,Qq,null),e(Ye,aR),e(Ye,Zq),e(Zq,nR),m(a,W2,g),m(a,Op,g),e(Op,rR),m(a,Y2,g),E(aa,a,g),m(a,V2,g),E(na,a,g),m(a,X2,g),m(a,pe,g),e(pe,oR),e(pe,fl),e(fl,lR),e(pe,iR),e(pe,pl),e(pl,uR),e(pe,cR),e(pe,hl),e(hl,fR),m(a,Q2,g),m(a,Pp,g),e(Pp,pR),m(a,Z2,g),E(ra,a,g),m(a,ev,g),m(a,Rp,g),e(Rp,hR),m(a,tv,g),m(a,oa,g),e(oa,e$),e(e$,dl),e(dl,Sp),e(Sp,dR),e(dl,gR),e(dl,t$),e(oa,mR),e(oa,s$),e(s$,gl),e(gl,ml),e(ml,a$),e(a$,qR),e(ml,$R),e(gl,_R),e(gl,Np),e(Np,vR),m(a,sv,g),m(a,xp,g),e(xp,ER),m(a,av,g),m(a,Ip,g),e(Ip,yR),m(a,nv,g),E(la,a,g),m(a,rv,g),m(a,ia,g),e(ia,n$),e(n$,ql),e(ql,Hp),e(Hp,wR),e(ql,bR),e(ql,r$),e(ia,TR),e(ia,o$),e(o$,$l),e($l,Bp),e(Bp,l$),e(l$,jR),e($l,kR),e($l,Cp),e(Cp,AR),m(a,ov,g),m(a,Ve,g),e(Ve,ua),e(ua,i$),E(_l,i$,null),e(Ve,DR),e(Ve,u$),e(u$,OR),m(a,lv,g),m(a,Gp,g),e(Gp,PR),m(a,iv,g),E(ca,a,g),m(a,uv,g),m(a,Xe,g),e(Xe,RR),e(Xe,vl),e(vl,SR),e(Xe,NR),e(Xe,El),e(El,xR),m(a,cv,g),m(a,Lp,g),e(Lp,IR),m(a,fv,g),m(a,fa,g),e(fa,c$),e(c$,yl),e(yl,Up),e(Up,HR),e(yl,BR),e(yl,f$),e(fa,CR),e(fa,ae),e(ae,wl),e(wl,bl),e(bl,p$),e(p$,GR),e(bl,LR),e(wl,UR),e(wl,zp),e(zp,zR),e(ae,MR),e(ae,Tl),e(Tl,Mp),e(Mp,h$),e(h$,KR),e(Tl,FR),e(Tl,Kp),e(Kp,JR),e(ae,WR),e(ae,jl),e(jl,Fp),e(Fp,YR),e(jl,VR),e(jl,pa),e(pa,XR),e(pa,d$),e(d$,QR),e(pa,ZR),e(ae,eS),e(ae,kl),e(kl,Jp),e(Jp,tS),e(kl,sS),e(kl,ha),e(ha,aS),e(ha,g$),e(g$,nS),e(ha,rS),e(ae,oS),e(ae,Al),e(Al,Wp),e(Wp,lS),e(Al,iS),e(Al,da),e(da,uS),e(da,m$),e(m$,cS),e(da,fS),m(a,pv,g),m(a,Yp,g),e(Yp,pS),m(a,hv,g),m(a,ga,g),e(ga,q$),e(q$,Dl),e(Dl,Vp),e(Vp,hS),e(Dl,dS),e(Dl,$$),e(ga,gS),e(ga,_$),e(_$,Ol),e(Ol,Xp),e(Xp,v$),e(v$,mS),e(Ol,qS),e(Ol,Qp),e(Qp,$S),m(a,dv,g),m(a,Zp,g),e(Zp,_S),m(a,gv,g),m(a,Qe,g),e(Qe,ma),e(ma,E$),E(Pl,E$,null),e(Qe,vS),e(Qe,y$),e(y$,ES),m(a,mv,g),m(a,eh,g),e(eh,yS),m(a,qv,g),E(qa,a,g),m(a,$v,g),m(a,Ze,g),e(Ze,wS),e(Ze,Rl),e(Rl,bS),e(Ze,TS),e(Ze,Sl),e(Sl,jS),m(a,_v,g),m(a,th,g),e(th,kS),m(a,vv,g),E($a,a,g),m(a,Ev,g),m(a,sh,g),e(sh,AS),m(a,yv,g),m(a,_a,g),e(_a,w$),e(w$,Nl),e(Nl,ah),e(ah,DS),e(Nl,OS),e(Nl,b$),e(_a,PS),e(_a,T$),e(T$,xl),e(xl,Il),e(Il,j$),e(j$,RS),e(Il,SS),e(xl,NS),e(xl,nh),e(nh,xS),m(a,wv,g),m(a,rh,g),e(rh,IS),m(a,bv,g),E(va,a,g),m(a,Tv,g),m(a,Ea,g),e(Ea,k$),e(k$,Hl),e(Hl,oh),e(oh,HS),e(Hl,BS),e(Hl,A$),e(Ea,CS),e(Ea,Bl),e(Bl,Cl),e(Cl,lh),e(lh,D$),e(D$,GS),e(Cl,LS),e(Cl,ih),e(ih,US),e(Bl,zS),e(Bl,Gl),e(Gl,uh),e(uh,O$),e(O$,MS),e(Gl,KS),e(Gl,ch),e(ch,FS),m(a,jv,g),m(a,et,g),e(et,ya),e(ya,P$),E(Ll,P$,null),e(et,JS),e(et,R$),e(R$,WS),m(a,kv,g),m(a,fh,g),e(fh,YS),m(a,Av,g),E(wa,a,g),m(a,Dv,g),m(a,Ul,g),e(Ul,VS),e(Ul,zl),e(zl,XS),m(a,Ov,g),m(a,ph,g),e(ph,QS),m(a,Pv,g),E(ba,a,g),m(a,Rv,g),m(a,Ta,g),e(Ta,ZS),e(Ta,Ml),e(Ml,eN),e(Ta,tN),m(a,Sv,g),m(a,ja,g),e(ja,S$),e(S$,Kl),e(Kl,hh),e(hh,sN),e(Kl,aN),e(Kl,N$),e(ja,nN),e(ja,x$),e(x$,Fl),e(Fl,Jl),e(Jl,I$),e(I$,rN),e(Jl,oN),e(Fl,lN),e(Fl,dh),e(dh,iN),m(a,Nv,g),m(a,gh,g),e(gh,uN),m(a,xv,g),E(ka,a,g),m(a,Iv,g),m(a,Aa,g),e(Aa,H$),e(H$,Wl),e(Wl,mh),e(mh,cN),e(Wl,fN),e(Wl,B$),e(Aa,pN),e(Aa,tt),e(tt,Yl),e(Yl,qh),e(qh,C$),e(C$,hN),e(Yl,dN),e(Yl,$h),e($h,gN),e(tt,mN),e(tt,Vl),e(Vl,_h),e(_h,G$),e(G$,qN),e(Vl,$N),e(Vl,vh),e(vh,_N),e(tt,vN),e(tt,Xl),e(Xl,Eh),e(Eh,L$),e(L$,EN),e(Xl,yN),e(Xl,yh),e(yh,wN),m(a,Hv,g),m(a,st,g),e(st,Da),e(Da,U$),E(Ql,U$,null),e(st,bN),e(st,z$),e(z$,TN),m(a,Bv,g),m(a,wh,g),e(wh,jN),m(a,Cv,g),E(Oa,a,g),m(a,Gv,g),m(a,Zl,g),e(Zl,kN),e(Zl,ei),e(ei,AN),m(a,Lv,g),m(a,bh,g),e(bh,DN),m(a,Uv,g),E(Pa,a,g),m(a,zv,g),m(a,Ra,g),e(Ra,ON),e(Ra,ti),e(ti,PN),e(Ra,RN),m(a,Mv,g),m(a,Sa,g),e(Sa,M$),e(M$,si),e(si,Th),e(Th,SN),e(si,NN),e(si,K$),e(Sa,xN),e(Sa,F$),e(F$,ai),e(ai,ni),e(ni,J$),e(J$,IN),e(ni,HN),e(ai,BN),e(ai,jh),e(jh,CN),m(a,Kv,g),m(a,kh,g),e(kh,GN),m(a,Fv,g),E(Na,a,g),m(a,Jv,g),m(a,xa,g),e(xa,W$),e(W$,ri),e(ri,Ah),e(Ah,LN),e(ri,UN),e(ri,Y$),e(xa,zN),e(xa,at),e(at,oi),e(oi,Dh),e(Dh,V$),e(V$,MN),e(oi,KN),e(oi,Oh),e(Oh,FN),e(at,JN),e(at,li),e(li,Ph),e(Ph,X$),e(X$,WN),e(li,YN),e(li,Rh),e(Rh,VN),e(at,XN),e(at,ii),e(ii,Sh),e(Sh,Q$),e(Q$,QN),e(ii,ZN),e(ii,Nh),e(Nh,ex),m(a,Wv,g),m(a,nt,g),e(nt,Ia),e(Ia,Z$),E(ui,Z$,null),e(nt,tx),e(nt,e_),e(e_,sx),m(a,Yv,g),m(a,xh,g),e(xh,ax),m(a,Vv,g),E(Ha,a,g),m(a,Xv,g),m(a,ci,g),e(ci,nx),e(ci,fi),e(fi,rx),m(a,Qv,g),m(a,Ih,g),e(Ih,ox),m(a,Zv,g),E(Ba,a,g),m(a,eE,g),m(a,Ca,g),e(Ca,lx),e(Ca,pi),e(pi,ix),e(Ca,ux),m(a,tE,g),m(a,Ga,g),e(Ga,t_),e(t_,hi),e(hi,Hh),e(Hh,cx),e(hi,fx),e(hi,s_),e(Ga,px),e(Ga,a_),e(a_,di),e(di,gi),e(gi,n_),e(n_,hx),e(gi,dx),e(di,gx),e(di,Bh),e(Bh,mx),m(a,sE,g),m(a,Ch,g),e(Ch,qx),m(a,aE,g),E(La,a,g),m(a,nE,g),m(a,Ua,g),e(Ua,r_),e(r_,mi),e(mi,Gh),e(Gh,$x),e(mi,_x),e(mi,o_),e(Ua,vx),e(Ua,qi),e(qi,$i),e($i,Lh),e(Lh,l_),e(l_,Ex),e($i,yx),e($i,Uh),e(Uh,wx),e(qi,bx),e(qi,_i),e(_i,zh),e(zh,i_),e(i_,Tx),e(_i,jx),e(_i,Mh),e(Mh,kx),rE=!0},p(a,[g]){const vi={};g&2&&(vi.$$scope={dirty:g,ctx:a}),ct.$set(vi);const u_={};g&2&&(u_.$$scope={dirty:g,ctx:a}),ft.$set(u_);const c_={};g&2&&(c_.$$scope={dirty:g,ctx:a}),qt.$set(c_);const f_={};g&2&&(f_.$$scope={dirty:g,ctx:a}),Et.$set(f_);const Ei={};g&2&&(Ei.$$scope={dirty:g,ctx:a}),yt.$set(Ei);const p_={};g&2&&(p_.$$scope={dirty:g,ctx:a}),Ot.$set(p_);const h_={};g&2&&(h_.$$scope={dirty:g,ctx:a}),Pt.$set(h_);const d_={};g&2&&(d_.$$scope={dirty:g,ctx:a}),Gt.$set(d_);const g_={};g&2&&(g_.$$scope={dirty:g,ctx:a}),Lt.$set(g_);const m_={};g&2&&(m_.$$scope={dirty:g,ctx:a}),Xt.$set(m_);const yi={};g&2&&(yi.$$scope={dirty:g,ctx:a}),Qt.$set(yi);const q_={};g&2&&(q_.$$scope={dirty:g,ctx:a}),as.$set(q_);const $_={};g&2&&($_.$$scope={dirty:g,ctx:a}),os.$set($_);const __={};g&2&&(__.$$scope={dirty:g,ctx:a}),ls.$set(__);const v_={};g&2&&(v_.$$scope={dirty:g,ctx:a}),is.$set(v_);const Kh={};g&2&&(Kh.$$scope={dirty:g,ctx:a}),hs.$set(Kh);const E_={};g&2&&(E_.$$scope={dirty:g,ctx:a}),ds.$set(E_);const y_={};g&2&&(y_.$$scope={dirty:g,ctx:a}),_s.$set(y_);const w_={};g&2&&(w_.$$scope={dirty:g,ctx:a}),ws.$set(w_);const wi={};g&2&&(wi.$$scope={dirty:g,ctx:a}),bs.$set(wi);const b_={};g&2&&(b_.$$scope={dirty:g,ctx:a}),Ds.$set(b_);const bi={};g&2&&(bi.$$scope={dirty:g,ctx:a}),Ns.$set(bi);const T_={};g&2&&(T_.$$scope={dirty:g,ctx:a}),xs.$set(T_);const K={};g&2&&(K.$$scope={dirty:g,ctx:a}),zs.$set(K);const Ti={};g&2&&(Ti.$$scope={dirty:g,ctx:a}),Ws.$set(Ti);const Fh={};g&2&&(Fh.$$scope={dirty:g,ctx:a}),Ys.$set(Fh);const j_={};g&2&&(j_.$$scope={dirty:g,ctx:a}),ea.$set(j_);const k_={};g&2&&(k_.$$scope={dirty:g,ctx:a}),aa.$set(k_);const ji={};g&2&&(ji.$$scope={dirty:g,ctx:a}),na.$set(ji);const Jh={};g&2&&(Jh.$$scope={dirty:g,ctx:a}),ra.$set(Jh);const A_={};g&2&&(A_.$$scope={dirty:g,ctx:a}),la.$set(A_);const D_={};g&2&&(D_.$$scope={dirty:g,ctx:a}),ca.$set(D_);const ki={};g&2&&(ki.$$scope={dirty:g,ctx:a}),qa.$set(ki);const O_={};g&2&&(O_.$$scope={dirty:g,ctx:a}),$a.$set(O_);const rt={};g&2&&(rt.$$scope={dirty:g,ctx:a}),va.$set(rt);const P_={};g&2&&(P_.$$scope={dirty:g,ctx:a}),wa.$set(P_);const R_={};g&2&&(R_.$$scope={dirty:g,ctx:a}),ba.$set(R_);const Ai={};g&2&&(Ai.$$scope={dirty:g,ctx:a}),ka.$set(Ai);const S_={};g&2&&(S_.$$scope={dirty:g,ctx:a}),Oa.$set(S_);const Di={};g&2&&(Di.$$scope={dirty:g,ctx:a}),Pa.$set(Di);const N_={};g&2&&(N_.$$scope={dirty:g,ctx:a}),Na.$set(N_);const Oi={};g&2&&(Oi.$$scope={dirty:g,ctx:a}),Ha.$set(Oi);const x_={};g&2&&(x_.$$scope={dirty:g,ctx:a}),Ba.$set(x_);const I_={};g&2&&(I_.$$scope={dirty:g,ctx:a}),La.$set(I_)},i(a){rE||(y(k.$$.fragment,a),y(Q.$$.fragment,a),y(Xa.$$.fragment,a),y(ct.$$.fragment,a),y(ft.$$.fragment,a),y(qt.$$.fragment,a),y(mn.$$.fragment,a),y(Et.$$.fragment,a),y(yt.$$.fragment,a),y(An.$$.fragment,a),y(Ot.$$.fragment,a),y(Pt.$$.fragment,a),y(Wn.$$.fragment,a),y(Gt.$$.fragment,a),y(Lt.$$.fragment,a),y(vr.$$.fragment,a),y(Xt.$$.fragment,a),y(Qt.$$.fragment,a),y(as.$$.fragment,a),y(Hr.$$.fragment,a),y(os.$$.fragment,a),y(ls.$$.fragment,a),y(is.$$.fragment,a),y(Kr.$$.fragment,a),y(hs.$$.fragment,a),y(ds.$$.fragment,a),y(_s.$$.fragment,a),y(ro.$$.fragment,a),y(lo.$$.fragment,a),y(ws.$$.fragment,a),y(bs.$$.fragment,a),y(Ds.$$.fragment,a),y(jo.$$.fragment,a),y(Ns.$$.fragment,a),y(xs.$$.fragment,a),y(zs.$$.fragment,a),y(Wo.$$.fragment,a),y(Yo.$$.fragment,a),y(Ws.$$.fragment,a),y(Ys.$$.fragment,a),y(ea.$$.fragment,a),y(cl.$$.fragment,a),y(aa.$$.fragment,a),y(na.$$.fragment,a),y(ra.$$.fragment,a),y(la.$$.fragment,a),y(_l.$$.fragment,a),y(ca.$$.fragment,a),y(Pl.$$.fragment,a),y(qa.$$.fragment,a),y($a.$$.fragment,a),y(va.$$.fragment,a),y(Ll.$$.fragment,a),y(wa.$$.fragment,a),y(ba.$$.fragment,a),y(ka.$$.fragment,a),y(Ql.$$.fragment,a),y(Oa.$$.fragment,a),y(Pa.$$.fragment,a),y(Na.$$.fragment,a),y(ui.$$.fragment,a),y(Ha.$$.fragment,a),y(Ba.$$.fragment,a),y(La.$$.fragment,a),rE=!0)},o(a){w(k.$$.fragment,a),w(Q.$$.fragment,a),w(Xa.$$.fragment,a),w(ct.$$.fragment,a),w(ft.$$.fragment,a),w(qt.$$.fragment,a),w(mn.$$.fragment,a),w(Et.$$.fragment,a),w(yt.$$.fragment,a),w(An.$$.fragment,a),w(Ot.$$.fragment,a),w(Pt.$$.fragment,a),w(Wn.$$.fragment,a),w(Gt.$$.fragment,a),w(Lt.$$.fragment,a),w(vr.$$.fragment,a),w(Xt.$$.fragment,a),w(Qt.$$.fragment,a),w(as.$$.fragment,a),w(Hr.$$.fragment,a),w(os.$$.fragment,a),w(ls.$$.fragment,a),w(is.$$.fragment,a),w(Kr.$$.fragment,a),w(hs.$$.fragment,a),w(ds.$$.fragment,a),w(_s.$$.fragment,a),w(ro.$$.fragment,a),w(lo.$$.fragment,a),w(ws.$$.fragment,a),w(bs.$$.fragment,a),w(Ds.$$.fragment,a),w(jo.$$.fragment,a),w(Ns.$$.fragment,a),w(xs.$$.fragment,a),w(zs.$$.fragment,a),w(Wo.$$.fragment,a),w(Yo.$$.fragment,a),w(Ws.$$.fragment,a),w(Ys.$$.fragment,a),w(ea.$$.fragment,a),w(cl.$$.fragment,a),w(aa.$$.fragment,a),w(na.$$.fragment,a),w(ra.$$.fragment,a),w(la.$$.fragment,a),w(_l.$$.fragment,a),w(ca.$$.fragment,a),w(Pl.$$.fragment,a),w(qa.$$.fragment,a),w($a.$$.fragment,a),w(va.$$.fragment,a),w(Ll.$$.fragment,a),w(wa.$$.fragment,a),w(ba.$$.fragment,a),w(ka.$$.fragment,a),w(Ql.$$.fragment,a),w(Oa.$$.fragment,a),w(Pa.$$.fragment,a),w(Na.$$.fragment,a),w(ui.$$.fragment,a),w(Ha.$$.fragment,a),w(Ba.$$.fragment,a),w(La.$$.fragment,a),rE=!1},d(a){s(n),a&&s(c),a&&s(t),b(k),a&&s(S),a&&s(D),b(Q),a&&s(Va),a&&s(Se),a&&s(L_),a&&s(Si),a&&s(U_),a&&s(lt),a&&s(z_),a&&s(it),a&&s(M_),a&&s(Ne),b(Xa),a&&s(K_),a&&s(Ni),a&&s(F_),b(ct,a),a&&s(J_),a&&s(Qa),a&&s(W_),a&&s(xi),a&&s(Y_),b(ft,a),a&&s(V_),a&&s(Ii),a&&s(X_),a&&s(pt),a&&s(Q_),a&&s(Ji),a&&s(Z_),a&&s(Wi),a&&s(e1),b(qt,a),a&&s(t1),a&&s($t),a&&s(s1),a&&s(Ie),b(mn),a&&s(a1),a&&s(tu),a&&s(n1),b(Et,a),a&&s(r1),a&&s(qn),a&&s(o1),a&&s(su),a&&s(l1),b(yt,a),a&&s(i1),a&&s(au),a&&s(u1),a&&s(wt),a&&s(c1),a&&s(fu),a&&s(f1),a&&s(kt),a&&s(p1),a&&s(He),b(An),a&&s(h1),a&&s(Dt),a&&s(d1),b(Ot,a),a&&s(g1),a&&s(Dn),a&&s(m1),a&&s(mu),a&&s(q1),b(Pt,a),a&&s($1),a&&s(qu),a&&s(_1),a&&s(Rt),a&&s(v1),a&&s(Nu),a&&s(E1),a&&s(Bt),a&&s(y1),a&&s(Be),b(Wn),a&&s(w1),a&&s(Bu),a&&s(b1),b(Gt,a),a&&s(T1),a&&s(Yn),a&&s(j1),a&&s(Cu),a&&s(k1),b(Lt,a),a&&s(A1),a&&s(Gu),a&&s(D1),a&&s(Ut),a&&s(O1),a&&s(lc),a&&s(P1),a&&s(Yt),a&&s(R1),a&&s(Ce),b(vr),a&&s(S1),a&&s(qc),a&&s(N1),b(Xt,a),a&&s(x1),a&&s(Er),a&&s(I1),a&&s($c),a&&s(H1),b(Qt,a),a&&s(B1),a&&s(_c),a&&s(C1),a&&s(Zt),a&&s(G1),a&&s(Oc),a&&s(L1),b(as,a),a&&s(U1),a&&s(ns),a&&s(z1),a&&s(Ge),b(Hr),a&&s(M1),a&&s(Gc),a&&s(K1),b(os,a),a&&s(F1),a&&s(Le),a&&s(J1),a&&s(Lc),a&&s(W1),b(ls,a),a&&s(Y1),a&&s(Uc),a&&s(V1),a&&s(zc),a&&s(X1),b(is,a),a&&s(Q1),a&&s(us),a&&s(Z1),a&&s(Ue),b(Kr),a&&s(e2),a&&s(Xc),a&&s(t2),b(hs,a),a&&s(s2),a&&s(Fr),a&&s(a2),a&&s(Qc),a&&s(n2),b(ds,a),a&&s(r2),a&&s(Zc),a&&s(o2),a&&s(gs),a&&s(l2),a&&s(lf),a&&s(i2),b(_s,a),a&&s(u2),a&&s(vs),a&&s(c2),a&&s(ze),b(ro),a&&s(f2),a&&s(oo),a&&s(p2),a&&s(Me),b(lo),a&&s(h2),a&&s(gf),a&&s(d2),b(ws,a),a&&s(g2),a&&s(Ke),a&&s(m2),a&&s(mf),a&&s(q2),b(bs,a),a&&s($2),a&&s(qf),a&&s(_2),a&&s(Ts),a&&s(v2),a&&s(Af),a&&s(E2),b(Ds,a),a&&s(y2),a&&s(Os),a&&s(w2),a&&s(Fe),b(jo),a&&s(b2),a&&s(Bf),a&&s(T2),b(Ns,a),a&&s(j2),a&&s(ko),a&&s(k2),a&&s(Cf),a&&s(A2),b(xs,a),a&&s(D2),a&&s(Gf),a&&s(O2),a&&s(Is),a&&s(P2),a&&s(rp),a&&s(R2),b(zs,a),a&&s(S2),a&&s(Ms),a&&s(N2),a&&s(Je),b(Wo),a&&s(x2),a&&s(Fs),a&&s(I2),a&&s(We),b(Yo),a&&s(H2),a&&s(cp),a&&s(B2),b(Ws,a),a&&s(C2),a&&s(Vo),a&&s(G2),a&&s(fp),a&&s(L2),b(Ys,a),a&&s(U2),a&&s(pp),a&&s(z2),a&&s(Vs),a&&s(M2),a&&s(vp),a&&s(K2),b(ea,a),a&&s(F2),a&&s(ta),a&&s(J2),a&&s(Ye),b(cl),a&&s(W2),a&&s(Op),a&&s(Y2),b(aa,a),a&&s(V2),b(na,a),a&&s(X2),a&&s(pe),a&&s(Q2),a&&s(Pp),a&&s(Z2),b(ra,a),a&&s(ev),a&&s(Rp),a&&s(tv),a&&s(oa),a&&s(sv),a&&s(xp),a&&s(av),a&&s(Ip),a&&s(nv),b(la,a),a&&s(rv),a&&s(ia),a&&s(ov),a&&s(Ve),b(_l),a&&s(lv),a&&s(Gp),a&&s(iv),b(ca,a),a&&s(uv),a&&s(Xe),a&&s(cv),a&&s(Lp),a&&s(fv),a&&s(fa),a&&s(pv),a&&s(Yp),a&&s(hv),a&&s(ga),a&&s(dv),a&&s(Zp),a&&s(gv),a&&s(Qe),b(Pl),a&&s(mv),a&&s(eh),a&&s(qv),b(qa,a),a&&s($v),a&&s(Ze),a&&s(_v),a&&s(th),a&&s(vv),b($a,a),a&&s(Ev),a&&s(sh),a&&s(yv),a&&s(_a),a&&s(wv),a&&s(rh),a&&s(bv),b(va,a),a&&s(Tv),a&&s(Ea),a&&s(jv),a&&s(et),b(Ll),a&&s(kv),a&&s(fh),a&&s(Av),b(wa,a),a&&s(Dv),a&&s(Ul),a&&s(Ov),a&&s(ph),a&&s(Pv),b(ba,a),a&&s(Rv),a&&s(Ta),a&&s(Sv),a&&s(ja),a&&s(Nv),a&&s(gh),a&&s(xv),b(ka,a),a&&s(Iv),a&&s(Aa),a&&s(Hv),a&&s(st),b(Ql),a&&s(Bv),a&&s(wh),a&&s(Cv),b(Oa,a),a&&s(Gv),a&&s(Zl),a&&s(Lv),a&&s(bh),a&&s(Uv),b(Pa,a),a&&s(zv),a&&s(Ra),a&&s(Mv),a&&s(Sa),a&&s(Kv),a&&s(kh),a&&s(Fv),b(Na,a),a&&s(Jv),a&&s(xa),a&&s(Wv),a&&s(nt),b(ui),a&&s(Yv),a&&s(xh),a&&s(Vv),b(Ha,a),a&&s(Xv),a&&s(ci),a&&s(Qv),a&&s(Ih),a&&s(Zv),b(Ba,a),a&&s(eE),a&&s(Ca),a&&s(tE),a&&s(Ga),a&&s(sE),a&&s(Ch),a&&s(aE),b(La,a),a&&s(nE),a&&s(Ua)}}}const OW={local:"detailed-parameters",sections:[{local:"which-task-is-used-by-this-model",title:"Which task is used by this model ?"},{local:"zeroshot-classification-task",title:"Zero-shot classification task"},{local:"translation-task",title:"Translation task"},{local:"summarization-task",title:"Summarization task"},{local:"conversational-task",title:"Conversational task"},{local:"table-question-answering-task",title:"Table question answering task"},{local:"question-answering-task",title:"Question answering task"},{local:"textclassification-task",title:"Text-classification task"},{local:"named-entity-recognition-ner-task",title:"Named Entity Recognition (NER) task"},{local:"tokenclassification-task",title:"Token-classification task"},{local:"textgeneration-task",title:"Text-generation task"},{local:"text2textgeneration-task",title:"Text2text-generation task"},{local:"fill-mask-task",title:"Fill mask task"},{local:"automatic-speech-recognition-task",title:"Automatic speech recognition task"},{local:"featureextraction-task",title:"Feature-extraction task"},{local:"audioclassification-task",title:"Audio-classification task"},{local:"objectdetection-task",title:"Object-detection task"},{local:"image-segmentation-task",title:"Image Segmentation task"},{local:"image-classification-task",title:"Image Classification task"}],title:"Detailed parameters"};function PW($){return rF(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class IW extends tF{constructor(n){super();sF(this,n,PW,DW,aF,{})}}export{IW as default,OW as metadata};
