import{S as Hn,i as zn,s as Dn,e as o,k as h,w,t as s,M as Fn,c as r,d as a,m as d,a as n,x as $,h as l,b as p,F as t,g as f,y as _,q as b,o as P,B as E,v as Jn,L as Tr}from"../chunks/vendor-7c454903.js";import{I as R}from"../chunks/IconCopyLink-5457534b.js";import{C as jt,I as Kn,M as Sr}from"../chunks/InferenceApi-ceeeb92c.js";function Wn(k){let c,m;return c=new jt({props:{code:`data == [
    {
        "generated_text": "Can you please let us know more details about your ids as a subscriber or other related project? Be sure to update your username and password or it will be stolen via email. Our information is only accessible through our website, and the payment support services"
    }
]`,highlighted:`data == [
    {
        <span class="hljs-string">&quot;generated_text&quot;</span>: <span class="hljs-string">&quot;Can you please let us know more details about your ids as a subscriber or other related project? Be sure to update your username and password or it will be stolen via email. Our information is only accessible through our website, and the payment support services&quot;</span>
    }
]`}}),{c(){w(c.$$.fragment)},l(i){$(c.$$.fragment,i)},m(i,g){_(c,i,g),m=!0},p:Tr,i(i){m||(b(c.$$.fragment,i),m=!0)},o(i){P(c.$$.fragment,i),m=!1},d(i){E(c,i)}}}function Qn(k){let c,m;return c=new Sr({props:{$$slots:{default:[Wn]},$$scope:{ctx:k}}}),{c(){w(c.$$.fragment)},l(i){$(c.$$.fragment,i)},m(i,g){_(c,i,g),m=!0},p(i,g){const A={};g&2&&(A.$$scope={dirty:g,ctx:i}),c.$set(A)},i(i){m||(b(c.$$.fragment,i),m=!0)},o(i){P(c.$$.fragment,i),m=!1},d(i){E(c,i)}}}function Yn(k){let c,m;return c=new jt({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/gpt2",
        {
            headers: { Authorization: \`Bearer $}{API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query("Can you please let us know more details about your ").then((response) => {
    console.log(JSON.stringify(response));
});
// [{"generated_text":"Can you please let us know more details about your ids as a subscriber or other related project? Be sure to update your username and password or it will be stolen via email. Our information is only accessible through our website, and the payment support services"}]`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/gpt2&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">$}{API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>(<span class="hljs-string">&quot;Can you please let us know more details about your &quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// [{&quot;generated_text&quot;:&quot;Can you please let us know more details about your ids as a subscriber or other related project? Be sure to update your username and password or it will be stolen via email. Our information is only accessible through our website, and the payment support services&quot;}]</span>`}}),{c(){w(c.$$.fragment)},l(i){$(c.$$.fragment,i)},m(i,g){_(c,i,g),m=!0},p:Tr,i(i){m||(b(c.$$.fragment,i),m=!0)},o(i){P(c.$$.fragment,i),m=!1},d(i){E(c,i)}}}function Vn(k){let c,m;return c=new Sr({props:{$$slots:{default:[Yn]},$$scope:{ctx:k}}}),{c(){w(c.$$.fragment)},l(i){$(c.$$.fragment,i)},m(i,g){_(c,i,g),m=!0},p(i,g){const A={};g&2&&(A.$$scope={dirty:g,ctx:i}),c.$set(A)},i(i){m||(b(c.$$.fragment,i),m=!0)},o(i){P(c.$$.fragment,i),m=!1},d(i){E(c,i)}}}function Zn(k){let c,m;return c=new jt({props:{code:`curl https://api-inference.huggingface.co/models/gpt2 \\
        -X POST \\
        -d '"Can you please let us know more details about your "' \\
        -H "Authorization: Bearer $}{API_TOKEN}"
# [{"generated_text":"Can you please let us know more details about your ids as a subscriber or other related project? Be sure to update your username and password or it will be stolen via email. Our information is only accessible through our website, and the payment support services"}]`,highlighted:`curl https:<span class="hljs-regexp">//</span>api-inference.huggingface.co<span class="hljs-regexp">/models/g</span>pt2 \\
        -X POST \\
        -d <span class="hljs-string">&#x27;&quot;Can you please let us know more details about your &quot;&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer $}{API_TOKEN}&quot;</span>
<span class="hljs-comment"># [{&quot;generated_text&quot;:&quot;Can you please let us know more details about your ids as a subscriber or other related project? Be sure to update your username and password or it will be stolen via email. Our information is only accessible through our website, and the payment support services&quot;}]</span>`}}),{c(){w(c.$$.fragment)},l(i){$(c.$$.fragment,i)},m(i,g){_(c,i,g),m=!0},p:Tr,i(i){m||(b(c.$$.fragment,i),m=!0)},o(i){P(c.$$.fragment,i),m=!1},d(i){E(c,i)}}}function es(k){let c,m;return c=new Sr({props:{$$slots:{default:[Zn]},$$scope:{ctx:k}}}),{c(){w(c.$$.fragment)},l(i){$(c.$$.fragment,i)},m(i,g){_(c,i,g),m=!0},p(i,g){const A={};g&2&&(A.$$scope={dirty:g,ctx:i}),c.$set(A)},i(i){m||(b(c.$$.fragment,i),m=!0)},o(i){P(c.$$.fragment,i),m=!1},d(i){E(c,i)}}}function ts(k){let c,m,i,g,A,le,qa,Qe,ja,xt,Ge,xa,Tt,S,M,Ye,ie,Ta,Ve,Sa,St,v,ue,Na,Ze,Ua,Ga,Oa,Oe,La,et,Ca,Xa,tt,Ra,Ma,pe,Ba,at,Ha,za,Da,q,Fa,ot,Ja,Ka,rt,Wa,Qa,ce,Ya,Va,Za,fe,eo,nt,to,ao,oo,he,ro,st,no,so,lo,Le,lt,io,uo,po,it,co,Nt,N,B,ut,de,fo,pt,ho,Ut,Ce,mo,Gt,H,z,me,go,vo,ge,yo,wo,$o,ve,_o,ye,bo,Po,Ot,I,Eo,ct,Ao,ko,ft,Io,qo,ht,jo,xo,Lt,Xe,To,Ct,U,D,dt,we,So,mt,No,Xt,j,Uo,$e,Go,Oo,_e,Lo,Co,Rt,be,Mt,F,Xo,Pe,Ro,Mo,Bt,J,Ht,G,K,gt,Ee,Bo,vt,Ho,zt,x,zo,Ae,Do,Fo,yt,Jo,Ko,Dt,O,W,wt,ke,Wo,$t,Qo,Ft,Q,Yo,_t,Vo,Zo,Jt,Re,er,Kt,Y,tr,Me,ar,or,Wt,L,V,bt,Ie,rr,Pt,nr,Qt,Z,sr,qe,lr,ir,Yt,je,Vt,Be,ur,Zt,He,pr,ea,ee,cr,ze,fr,hr,ta,C,te,Et,xe,dr,At,mr,aa,ae,gr,De,vr,yr,oa,X,oe,kt,Te,wr,It,$r,ra,re,_r,Se,br,Pr,na,T,Er,Ne,Ar,kr,Fe,Ir,qr,sa;return le=new R({}),ie=new R({}),de=new R({}),we=new R({}),be=new jt({props:{code:"ENDPOINT = https://api-inference.huggingface.co/models/<MODEL_ID>",highlighted:'ENDPOINT = https:<span class="hljs-regexp">//</span>api-inference.huggingface.co<span class="hljs-regexp">/models/</span>&lt;MODEL_ID&gt;'}}),J=new Kn({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[es],js:[Vn],python:[Qn]},$$scope:{ctx:k}}}),Ee=new R({}),ke=new R({}),Ie=new R({}),je=new jt({props:{code:'{"inputs": "...REGULAR INPUT...", "options": {"use_gpu": true}}',highlighted:'<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;inputs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;...REGULAR INPUT...&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;use_gpu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">}</span>'}}),xe=new R({}),Te=new R({}),{c(){c=o("meta"),m=h(),i=o("h1"),g=o("a"),A=o("span"),w(le.$$.fragment),qa=h(),Qe=o("span"),ja=s("Overview"),xt=h(),Ge=o("p"),xa=s("Let\u2019s have a quick look at the \u{1F917} Accelerated Inference API."),Tt=h(),S=o("h2"),M=o("a"),Ye=o("span"),w(ie.$$.fragment),Ta=h(),Ve=o("span"),Sa=s("Main features:"),St=h(),v=o("ul"),ue=o("li"),Na=s("Leverage "),Ze=o("strong"),Ua=s("10,000+ Transformer models"),Ga=s(" (T5, Blenderbot, Bart, GPT-2, Pegasus...)"),Oa=h(),Oe=o("li"),La=s("Upload, manage and serve your "),et=o("strong"),Ca=s("own models privately"),Xa=h(),tt=o("li"),Ra=s("Run Classification, NER, Conversational, Summarization, Translation, Question-Answering, Embeddings Extraction tasks"),Ma=h(),pe=o("li"),Ba=s("Get up to "),at=o("strong"),Ha=s("10x inference speedup"),za=s(" to reduce user latency"),Da=h(),q=o("li"),Fa=s("Accelerated inference on "),ot=o("strong"),Ja=s("CPU"),Ka=s(" and "),rt=o("strong"),Wa=s("GPU"),Qa=s(" (GPU requires a "),ce=o("a"),Ya=s("Startup or Enterprise plan"),Va=s(")"),Za=h(),fe=o("li"),eo=s("Run "),nt=o("strong"),to=s("large models"),ao=s(" that are challenging to deploy in production"),oo=h(),he=o("li"),ro=s("Scale to 1,000 requests per second with "),st=o("strong"),no=s("automatic scaling"),so=s(" built-in"),lo=h(),Le=o("li"),lt=o("strong"),io=s("Ship new NLP features faster"),uo=s(" as new models become available"),po=h(),it=o("li"),co=s("Build your business on a platform powered by the reference open source project in NLP"),Nt=h(),N=o("h2"),B=o("a"),ut=o("span"),w(de.$$.fragment),fo=h(),pt=o("span"),ho=s("Get your API Token"),Ut=h(),Ce=o("p"),mo=s("To get started you need to:"),Gt=h(),H=o("ul"),z=o("li"),me=o("a"),go=s("Register"),vo=s(" or "),ge=o("a"),yo=s("Login"),wo=s("."),$o=h(),ve=o("li"),_o=s("Get your API token "),ye=o("a"),bo=s("in your Hugging Face profile"),Po=s("."),Ot=h(),I=o("p"),Eo=s("You should see a token "),ct=o("code"),Ao=s("hf_xxxxx"),ko=s(" (old tokens are "),ft=o("code"),Io=s("api_XXXXXXXX"),qo=s(" or "),ht=o("code"),jo=s("api_org_XXXXXXX"),xo=s(")."),Lt=h(),Xe=o("p"),To=s(`If you do not submit your API token when sending requests to the API,
you will not be able to run inference on your private models, or
benefits from the model pinning and acceleration features of the API.`),Ct=h(),U=o("h2"),D=o("a"),dt=o("span"),w(we.$$.fragment),So=h(),mt=o("span"),No=s("Running Inference with API Requests"),Xt=h(),j=o("p"),Uo=s(`The first step is to choose which model you are going to run. Go to the
`),$e=o("a"),Go=s("Model Hub"),Oo=s(` and select the model you want
to use. If you are unsure where to start, make sure to check our
`),_e=o("a"),Lo=s(`recommended models for each NLP
task`),Co=s(`
available.`),Rt=h(),w(be.$$.fragment),Mt=h(),F=o("p"),Xo=s("Let\u2019s use "),Pe=o("a"),Ro=s("gpt2"),Mo=s(` as an example. To run
inference, simply use this code:`),Bt=h(),w(J.$$.fragment),Ht=h(),G=o("h2"),K=o("a"),gt=o("span"),w(Ee.$$.fragment),Bo=h(),vt=o("span"),Ho=s("API Options and Parameters"),zt=h(),x=o("p"),zo=s(`Depending on the task (aka pipeline) the model is configured for, the
request will accept specific parameters. When sending requests to run
any model, API options allow you to specify the caching and model
loading behavior, and inference on GPU (`),Ae=o("a"),Do=s(`Startup or Enterprise
plan`),Fo=s(` required) All API options and
parameters are detailed here `),yt=o("code"),Jo=s("detailed_parameters"),Ko=s("."),Dt=h(),O=o("h2"),W=o("a"),wt=o("span"),w(ke.$$.fragment),Wo=h(),$t=o("span"),Qo=s("Using CPU-Accelerated Inference (~up to 10x speedup)"),Ft=h(),Q=o("p"),Yo=s(`As an API customer, your API token will automatically enable
CPU-Accelerated inference on your requests. For instance, if you compare
gpt2 model inference through our API with
CPU-Acceleration, compared to running inference on the model out of the
box on a local setup, you should measure a `),_t=o("strong"),Vo=s("~10x speedup"),Zo=s(`. The
specific performance boost depends on the model and input payload (and
your local hardware).`),Jt=h(),Re=o("p"),er=s(`To verify you are using the CPU-Accelerated version of a model you can
check the x-compute-type header of your requests, which
should be cpu+optimized. If you do not see it, it simply
means not all optimizations are turned on. This can be for various
factors, the model might have been added recently to transformers, or
the model can be optimized in several different ways and the best one
depends on your use case.`),Kt=h(),Y=o("p"),tr=s("If you contact us at "),Me=o("a"),ar=s("api-enterprise@huggingface.co"),or=s(`, we\u2019ll be able to
increase the inference speed for you, depending on your actual use case.`),Wt=h(),L=o("h2"),V=o("a"),bt=o("span"),w(Ie.$$.fragment),rr=h(),Pt=o("span"),nr=s("Using GPU-Accelerated Inference"),Qt=h(),Z=o("p"),sr=s("In order to use GPU-Accelerated inference, you need a "),qe=o("a"),lr=s(`Startup or
Enterprise plan`),ir=s(`. To run any model on a
GPU, you need to specify it via an option in your request:`),Yt=h(),w(je.$$.fragment),Vt=h(),Be=o("p"),ur=s(`Using GPU-Accelerated inference should produce a significant speedup for
all models.`),Zt=h(),He=o("p"),pr=s(`To verify you are using the GPU-Accelerated version of the model you can
check the x-compute-type header of your requests, which
should be gpu.`),ea=h(),ee=o("p"),cr=s("Please note: Contact us at "),ze=o("a"),fr=s("api-enterprise@huggingface.co"),hr=s(` to discuss
your use case and usage profile when running GPU-Accelerated inference
on many models or large models, so we can optimize the infrastructure
accordingly.`),ta=h(),C=o("h2"),te=o("a"),Et=o("span"),w(xe.$$.fragment),dr=h(),At=o("span"),mr=s("Using Large Models (>10 Go)"),aa=h(),ae=o("p"),gr=s(`Large models do not get loaded automatically to protect quality of
service. Contact us at `),De=o("a"),vr=s("api-enterprise@huggingface.co"),yr=s(` so we can
configure large models for your endpoints.`),oa=h(),X=o("h2"),oe=o("a"),kt=o("span"),w(Te.$$.fragment),wr=h(),It=o("span"),$r=s("Model Pinning / Preloading"),ra=h(),re=o("p"),_r=s("With over 10,000 models available in the "),Se=o("a"),br=s(`Model
Hub`),Pr=s(`, not all can be loaded in compute
memory to be instantly available for inference. To guarantee model
availability for API customers who integrate them in production
applications, we offer to pin frequently used model(s) to their API
endpoints, so these models are always instantly available for inference.`),na=h(),T=o("p"),Er=s("The number of models that can be pinned depends on the selected "),Ne=o("a"),Ar=s(`API
plan`),kr=s(`. To get a model pinned to your
account, please contact us at `),Fe=o("a"),Ir=s("api-enterprise@huggingface.co"),qr=s("."),this.h()},l(e){const u=Fn('[data-svelte="svelte-1phssyn"]',document.head);c=r(u,"META",{name:!0,content:!0}),u.forEach(a),m=d(e),i=r(e,"H1",{class:!0});var Ue=n(i);g=r(Ue,"A",{id:!0,class:!0,href:!0});var Nr=n(g);A=r(Nr,"SPAN",{});var Ur=n(A);$(le.$$.fragment,Ur),Ur.forEach(a),Nr.forEach(a),qa=d(Ue),Qe=r(Ue,"SPAN",{});var Gr=n(Qe);ja=l(Gr,"Overview"),Gr.forEach(a),Ue.forEach(a),xt=d(e),Ge=r(e,"P",{});var Or=n(Ge);xa=l(Or,"Let\u2019s have a quick look at the \u{1F917} Accelerated Inference API."),Or.forEach(a),Tt=d(e),S=r(e,"H2",{class:!0});var la=n(S);M=r(la,"A",{id:!0,class:!0,href:!0});var Lr=n(M);Ye=r(Lr,"SPAN",{});var Cr=n(Ye);$(ie.$$.fragment,Cr),Cr.forEach(a),Lr.forEach(a),Ta=d(la),Ve=r(la,"SPAN",{});var Xr=n(Ve);Sa=l(Xr,"Main features:"),Xr.forEach(a),la.forEach(a),St=d(e),v=r(e,"UL",{});var y=n(v);ue=r(y,"LI",{});var ia=n(ue);Na=l(ia,"Leverage "),Ze=r(ia,"STRONG",{});var Rr=n(Ze);Ua=l(Rr,"10,000+ Transformer models"),Rr.forEach(a),Ga=l(ia," (T5, Blenderbot, Bart, GPT-2, Pegasus...)"),ia.forEach(a),Oa=d(y),Oe=r(y,"LI",{});var jr=n(Oe);La=l(jr,"Upload, manage and serve your "),et=r(jr,"STRONG",{});var Mr=n(et);Ca=l(Mr,"own models privately"),Mr.forEach(a),jr.forEach(a),Xa=d(y),tt=r(y,"LI",{});var Br=n(tt);Ra=l(Br,"Run Classification, NER, Conversational, Summarization, Translation, Question-Answering, Embeddings Extraction tasks"),Br.forEach(a),Ma=d(y),pe=r(y,"LI",{});var ua=n(pe);Ba=l(ua,"Get up to "),at=r(ua,"STRONG",{});var Hr=n(at);Ha=l(Hr,"10x inference speedup"),Hr.forEach(a),za=l(ua," to reduce user latency"),ua.forEach(a),Da=d(y),q=r(y,"LI",{});var ne=n(q);Fa=l(ne,"Accelerated inference on "),ot=r(ne,"STRONG",{});var zr=n(ot);Ja=l(zr,"CPU"),zr.forEach(a),Ka=l(ne," and "),rt=r(ne,"STRONG",{});var Dr=n(rt);Wa=l(Dr,"GPU"),Dr.forEach(a),Qa=l(ne," (GPU requires a "),ce=r(ne,"A",{href:!0,rel:!0});var Fr=n(ce);Ya=l(Fr,"Startup or Enterprise plan"),Fr.forEach(a),Va=l(ne,")"),ne.forEach(a),Za=d(y),fe=r(y,"LI",{});var pa=n(fe);eo=l(pa,"Run "),nt=r(pa,"STRONG",{});var Jr=n(nt);to=l(Jr,"large models"),Jr.forEach(a),ao=l(pa," that are challenging to deploy in production"),pa.forEach(a),oo=d(y),he=r(y,"LI",{});var ca=n(he);ro=l(ca,"Scale to 1,000 requests per second with "),st=r(ca,"STRONG",{});var Kr=n(st);no=l(Kr,"automatic scaling"),Kr.forEach(a),so=l(ca," built-in"),ca.forEach(a),lo=d(y),Le=r(y,"LI",{});var xr=n(Le);lt=r(xr,"STRONG",{});var Wr=n(lt);io=l(Wr,"Ship new NLP features faster"),Wr.forEach(a),uo=l(xr," as new models become available"),xr.forEach(a),po=d(y),it=r(y,"LI",{});var Qr=n(it);co=l(Qr,"Build your business on a platform powered by the reference open source project in NLP"),Qr.forEach(a),y.forEach(a),Nt=d(e),N=r(e,"H2",{class:!0});var fa=n(N);B=r(fa,"A",{id:!0,class:!0,href:!0});var Yr=n(B);ut=r(Yr,"SPAN",{});var Vr=n(ut);$(de.$$.fragment,Vr),Vr.forEach(a),Yr.forEach(a),fo=d(fa),pt=r(fa,"SPAN",{});var Zr=n(pt);ho=l(Zr,"Get your API Token"),Zr.forEach(a),fa.forEach(a),Ut=d(e),Ce=r(e,"P",{});var en=n(Ce);mo=l(en,"To get started you need to:"),en.forEach(a),Gt=d(e),H=r(e,"UL",{});var ha=n(H);z=r(ha,"LI",{});var qt=n(z);me=r(qt,"A",{href:!0,rel:!0});var tn=n(me);go=l(tn,"Register"),tn.forEach(a),vo=l(qt," or "),ge=r(qt,"A",{href:!0,rel:!0});var an=n(ge);yo=l(an,"Login"),an.forEach(a),wo=l(qt,"."),qt.forEach(a),$o=d(ha),ve=r(ha,"LI",{});var da=n(ve);_o=l(da,"Get your API token "),ye=r(da,"A",{href:!0,rel:!0});var on=n(ye);bo=l(on,"in your Hugging Face profile"),on.forEach(a),Po=l(da,"."),da.forEach(a),ha.forEach(a),Ot=d(e),I=r(e,"P",{});var se=n(I);Eo=l(se,"You should see a token "),ct=r(se,"CODE",{});var rn=n(ct);Ao=l(rn,"hf_xxxxx"),rn.forEach(a),ko=l(se," (old tokens are "),ft=r(se,"CODE",{});var nn=n(ft);Io=l(nn,"api_XXXXXXXX"),nn.forEach(a),qo=l(se," or "),ht=r(se,"CODE",{});var sn=n(ht);jo=l(sn,"api_org_XXXXXXX"),sn.forEach(a),xo=l(se,")."),se.forEach(a),Lt=d(e),Xe=r(e,"P",{});var ln=n(Xe);To=l(ln,`If you do not submit your API token when sending requests to the API,
you will not be able to run inference on your private models, or
benefits from the model pinning and acceleration features of the API.`),ln.forEach(a),Ct=d(e),U=r(e,"H2",{class:!0});var ma=n(U);D=r(ma,"A",{id:!0,class:!0,href:!0});var un=n(D);dt=r(un,"SPAN",{});var pn=n(dt);$(we.$$.fragment,pn),pn.forEach(a),un.forEach(a),So=d(ma),mt=r(ma,"SPAN",{});var cn=n(mt);No=l(cn,"Running Inference with API Requests"),cn.forEach(a),ma.forEach(a),Xt=d(e),j=r(e,"P",{});var Je=n(j);Uo=l(Je,`The first step is to choose which model you are going to run. Go to the
`),$e=r(Je,"A",{href:!0,rel:!0});var fn=n($e);Go=l(fn,"Model Hub"),fn.forEach(a),Oo=l(Je,` and select the model you want
to use. If you are unsure where to start, make sure to check our
`),_e=r(Je,"A",{href:!0,rel:!0});var hn=n(_e);Lo=l(hn,`recommended models for each NLP
task`),hn.forEach(a),Co=l(Je,`
available.`),Je.forEach(a),Rt=d(e),$(be.$$.fragment,e),Mt=d(e),F=r(e,"P",{});var ga=n(F);Xo=l(ga,"Let\u2019s use "),Pe=r(ga,"A",{href:!0,rel:!0});var dn=n(Pe);Ro=l(dn,"gpt2"),dn.forEach(a),Mo=l(ga,` as an example. To run
inference, simply use this code:`),ga.forEach(a),Bt=d(e),$(J.$$.fragment,e),Ht=d(e),G=r(e,"H2",{class:!0});var va=n(G);K=r(va,"A",{id:!0,class:!0,href:!0});var mn=n(K);gt=r(mn,"SPAN",{});var gn=n(gt);$(Ee.$$.fragment,gn),gn.forEach(a),mn.forEach(a),Bo=d(va),vt=r(va,"SPAN",{});var vn=n(vt);Ho=l(vn,"API Options and Parameters"),vn.forEach(a),va.forEach(a),zt=d(e),x=r(e,"P",{});var Ke=n(x);zo=l(Ke,`Depending on the task (aka pipeline) the model is configured for, the
request will accept specific parameters. When sending requests to run
any model, API options allow you to specify the caching and model
loading behavior, and inference on GPU (`),Ae=r(Ke,"A",{href:!0,rel:!0});var yn=n(Ae);Do=l(yn,`Startup or Enterprise
plan`),yn.forEach(a),Fo=l(Ke,` required) All API options and
parameters are detailed here `),yt=r(Ke,"CODE",{});var wn=n(yt);Jo=l(wn,"detailed_parameters"),wn.forEach(a),Ko=l(Ke,"."),Ke.forEach(a),Dt=d(e),O=r(e,"H2",{class:!0});var ya=n(O);W=r(ya,"A",{id:!0,class:!0,href:!0});var $n=n(W);wt=r($n,"SPAN",{});var _n=n(wt);$(ke.$$.fragment,_n),_n.forEach(a),$n.forEach(a),Wo=d(ya),$t=r(ya,"SPAN",{});var bn=n($t);Qo=l(bn,"Using CPU-Accelerated Inference (~up to 10x speedup)"),bn.forEach(a),ya.forEach(a),Ft=d(e),Q=r(e,"P",{});var wa=n(Q);Yo=l(wa,`As an API customer, your API token will automatically enable
CPU-Accelerated inference on your requests. For instance, if you compare
gpt2 model inference through our API with
CPU-Acceleration, compared to running inference on the model out of the
box on a local setup, you should measure a `),_t=r(wa,"STRONG",{});var Pn=n(_t);Vo=l(Pn,"~10x speedup"),Pn.forEach(a),Zo=l(wa,`. The
specific performance boost depends on the model and input payload (and
your local hardware).`),wa.forEach(a),Jt=d(e),Re=r(e,"P",{});var En=n(Re);er=l(En,`To verify you are using the CPU-Accelerated version of a model you can
check the x-compute-type header of your requests, which
should be cpu+optimized. If you do not see it, it simply
means not all optimizations are turned on. This can be for various
factors, the model might have been added recently to transformers, or
the model can be optimized in several different ways and the best one
depends on your use case.`),En.forEach(a),Kt=d(e),Y=r(e,"P",{});var $a=n(Y);tr=l($a,"If you contact us at "),Me=r($a,"A",{href:!0});var An=n(Me);ar=l(An,"api-enterprise@huggingface.co"),An.forEach(a),or=l($a,`, we\u2019ll be able to
increase the inference speed for you, depending on your actual use case.`),$a.forEach(a),Wt=d(e),L=r(e,"H2",{class:!0});var _a=n(L);V=r(_a,"A",{id:!0,class:!0,href:!0});var kn=n(V);bt=r(kn,"SPAN",{});var In=n(bt);$(Ie.$$.fragment,In),In.forEach(a),kn.forEach(a),rr=d(_a),Pt=r(_a,"SPAN",{});var qn=n(Pt);nr=l(qn,"Using GPU-Accelerated Inference"),qn.forEach(a),_a.forEach(a),Qt=d(e),Z=r(e,"P",{});var ba=n(Z);sr=l(ba,"In order to use GPU-Accelerated inference, you need a "),qe=r(ba,"A",{href:!0,rel:!0});var jn=n(qe);lr=l(jn,`Startup or
Enterprise plan`),jn.forEach(a),ir=l(ba,`. To run any model on a
GPU, you need to specify it via an option in your request:`),ba.forEach(a),Yt=d(e),$(je.$$.fragment,e),Vt=d(e),Be=r(e,"P",{});var xn=n(Be);ur=l(xn,`Using GPU-Accelerated inference should produce a significant speedup for
all models.`),xn.forEach(a),Zt=d(e),He=r(e,"P",{});var Tn=n(He);pr=l(Tn,`To verify you are using the GPU-Accelerated version of the model you can
check the x-compute-type header of your requests, which
should be gpu.`),Tn.forEach(a),ea=d(e),ee=r(e,"P",{});var Pa=n(ee);cr=l(Pa,"Please note: Contact us at "),ze=r(Pa,"A",{href:!0});var Sn=n(ze);fr=l(Sn,"api-enterprise@huggingface.co"),Sn.forEach(a),hr=l(Pa,` to discuss
your use case and usage profile when running GPU-Accelerated inference
on many models or large models, so we can optimize the infrastructure
accordingly.`),Pa.forEach(a),ta=d(e),C=r(e,"H2",{class:!0});var Ea=n(C);te=r(Ea,"A",{id:!0,class:!0,href:!0});var Nn=n(te);Et=r(Nn,"SPAN",{});var Un=n(Et);$(xe.$$.fragment,Un),Un.forEach(a),Nn.forEach(a),dr=d(Ea),At=r(Ea,"SPAN",{});var Gn=n(At);mr=l(Gn,"Using Large Models (>10 Go)"),Gn.forEach(a),Ea.forEach(a),aa=d(e),ae=r(e,"P",{});var Aa=n(ae);gr=l(Aa,`Large models do not get loaded automatically to protect quality of
service. Contact us at `),De=r(Aa,"A",{href:!0});var On=n(De);vr=l(On,"api-enterprise@huggingface.co"),On.forEach(a),yr=l(Aa,` so we can
configure large models for your endpoints.`),Aa.forEach(a),oa=d(e),X=r(e,"H2",{class:!0});var ka=n(X);oe=r(ka,"A",{id:!0,class:!0,href:!0});var Ln=n(oe);kt=r(Ln,"SPAN",{});var Cn=n(kt);$(Te.$$.fragment,Cn),Cn.forEach(a),Ln.forEach(a),wr=d(ka),It=r(ka,"SPAN",{});var Xn=n(It);$r=l(Xn,"Model Pinning / Preloading"),Xn.forEach(a),ka.forEach(a),ra=d(e),re=r(e,"P",{});var Ia=n(re);_r=l(Ia,"With over 10,000 models available in the "),Se=r(Ia,"A",{href:!0,rel:!0});var Rn=n(Se);br=l(Rn,`Model
Hub`),Rn.forEach(a),Pr=l(Ia,`, not all can be loaded in compute
memory to be instantly available for inference. To guarantee model
availability for API customers who integrate them in production
applications, we offer to pin frequently used model(s) to their API
endpoints, so these models are always instantly available for inference.`),Ia.forEach(a),na=d(e),T=r(e,"P",{});var We=n(T);Er=l(We,"The number of models that can be pinned depends on the selected "),Ne=r(We,"A",{href:!0,rel:!0});var Mn=n(Ne);Ar=l(Mn,`API
plan`),Mn.forEach(a),kr=l(We,`. To get a model pinned to your
account, please contact us at `),Fe=r(We,"A",{href:!0});var Bn=n(Fe);Ir=l(Bn,"api-enterprise@huggingface.co"),Bn.forEach(a),qr=l(We,"."),We.forEach(a),this.h()},h(){p(c,"name","hf:doc:metadata"),p(c,"content",JSON.stringify(as)),p(g,"id","overview"),p(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(g,"href","#overview"),p(i,"class","relative group"),p(M,"id","main-features"),p(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(M,"href","#main-features"),p(S,"class","relative group"),p(ce,"href","https://huggingface.co/pricing"),p(ce,"rel","nofollow"),p(B,"id","get-your-api-token"),p(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(B,"href","#get-your-api-token"),p(N,"class","relative group"),p(me,"href","https://huggingface.co/join"),p(me,"rel","nofollow"),p(ge,"href","https://huggingface.co/login"),p(ge,"rel","nofollow"),p(ye,"href","https://huggingface.co/settings/tokens"),p(ye,"rel","nofollow"),p(D,"id","running-inference-with-api-requests"),p(D,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(D,"href","#running-inference-with-api-requests"),p(U,"class","relative group"),p($e,"href","https://huggingface.co/models"),p($e,"rel","nofollow"),p(_e,"href","https://api-inference.huggingface.co/docs/python/html/detailed_parameters.html#detailed-parameters"),p(_e,"rel","nofollow"),p(Pe,"href","https://huggingface.co/gpt2"),p(Pe,"rel","nofollow"),p(K,"id","api-options-and-parameters"),p(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(K,"href","#api-options-and-parameters"),p(G,"class","relative group"),p(Ae,"href","https://huggingface.co/pricing"),p(Ae,"rel","nofollow"),p(W,"id","using-cpuaccelerated-inference-up-to-10x-speedup"),p(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(W,"href","#using-cpuaccelerated-inference-up-to-10x-speedup"),p(O,"class","relative group"),p(Me,"href","mailto:api-enterprise@huggingface.co"),p(V,"id","using-gpuaccelerated-inference"),p(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(V,"href","#using-gpuaccelerated-inference"),p(L,"class","relative group"),p(qe,"href","https://huggingface.co/pricing"),p(qe,"rel","nofollow"),p(ze,"href","mailto:api-enterprise@huggingface.co"),p(te,"id","using-large-models-10-go"),p(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(te,"href","#using-large-models-10-go"),p(C,"class","relative group"),p(De,"href","mailto:api-enterprise@huggingface.co"),p(oe,"id","model-pinning-preloading"),p(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(oe,"href","#model-pinning-preloading"),p(X,"class","relative group"),p(Se,"href","https://huggingface.co/models"),p(Se,"rel","nofollow"),p(Ne,"href","https://huggingface.co/pricing"),p(Ne,"rel","nofollow"),p(Fe,"href","mailto:api-enterprise@huggingface.co")},m(e,u){t(document.head,c),f(e,m,u),f(e,i,u),t(i,g),t(g,A),_(le,A,null),t(i,qa),t(i,Qe),t(Qe,ja),f(e,xt,u),f(e,Ge,u),t(Ge,xa),f(e,Tt,u),f(e,S,u),t(S,M),t(M,Ye),_(ie,Ye,null),t(S,Ta),t(S,Ve),t(Ve,Sa),f(e,St,u),f(e,v,u),t(v,ue),t(ue,Na),t(ue,Ze),t(Ze,Ua),t(ue,Ga),t(v,Oa),t(v,Oe),t(Oe,La),t(Oe,et),t(et,Ca),t(v,Xa),t(v,tt),t(tt,Ra),t(v,Ma),t(v,pe),t(pe,Ba),t(pe,at),t(at,Ha),t(pe,za),t(v,Da),t(v,q),t(q,Fa),t(q,ot),t(ot,Ja),t(q,Ka),t(q,rt),t(rt,Wa),t(q,Qa),t(q,ce),t(ce,Ya),t(q,Va),t(v,Za),t(v,fe),t(fe,eo),t(fe,nt),t(nt,to),t(fe,ao),t(v,oo),t(v,he),t(he,ro),t(he,st),t(st,no),t(he,so),t(v,lo),t(v,Le),t(Le,lt),t(lt,io),t(Le,uo),t(v,po),t(v,it),t(it,co),f(e,Nt,u),f(e,N,u),t(N,B),t(B,ut),_(de,ut,null),t(N,fo),t(N,pt),t(pt,ho),f(e,Ut,u),f(e,Ce,u),t(Ce,mo),f(e,Gt,u),f(e,H,u),t(H,z),t(z,me),t(me,go),t(z,vo),t(z,ge),t(ge,yo),t(z,wo),t(H,$o),t(H,ve),t(ve,_o),t(ve,ye),t(ye,bo),t(ve,Po),f(e,Ot,u),f(e,I,u),t(I,Eo),t(I,ct),t(ct,Ao),t(I,ko),t(I,ft),t(ft,Io),t(I,qo),t(I,ht),t(ht,jo),t(I,xo),f(e,Lt,u),f(e,Xe,u),t(Xe,To),f(e,Ct,u),f(e,U,u),t(U,D),t(D,dt),_(we,dt,null),t(U,So),t(U,mt),t(mt,No),f(e,Xt,u),f(e,j,u),t(j,Uo),t(j,$e),t($e,Go),t(j,Oo),t(j,_e),t(_e,Lo),t(j,Co),f(e,Rt,u),_(be,e,u),f(e,Mt,u),f(e,F,u),t(F,Xo),t(F,Pe),t(Pe,Ro),t(F,Mo),f(e,Bt,u),_(J,e,u),f(e,Ht,u),f(e,G,u),t(G,K),t(K,gt),_(Ee,gt,null),t(G,Bo),t(G,vt),t(vt,Ho),f(e,zt,u),f(e,x,u),t(x,zo),t(x,Ae),t(Ae,Do),t(x,Fo),t(x,yt),t(yt,Jo),t(x,Ko),f(e,Dt,u),f(e,O,u),t(O,W),t(W,wt),_(ke,wt,null),t(O,Wo),t(O,$t),t($t,Qo),f(e,Ft,u),f(e,Q,u),t(Q,Yo),t(Q,_t),t(_t,Vo),t(Q,Zo),f(e,Jt,u),f(e,Re,u),t(Re,er),f(e,Kt,u),f(e,Y,u),t(Y,tr),t(Y,Me),t(Me,ar),t(Y,or),f(e,Wt,u),f(e,L,u),t(L,V),t(V,bt),_(Ie,bt,null),t(L,rr),t(L,Pt),t(Pt,nr),f(e,Qt,u),f(e,Z,u),t(Z,sr),t(Z,qe),t(qe,lr),t(Z,ir),f(e,Yt,u),_(je,e,u),f(e,Vt,u),f(e,Be,u),t(Be,ur),f(e,Zt,u),f(e,He,u),t(He,pr),f(e,ea,u),f(e,ee,u),t(ee,cr),t(ee,ze),t(ze,fr),t(ee,hr),f(e,ta,u),f(e,C,u),t(C,te),t(te,Et),_(xe,Et,null),t(C,dr),t(C,At),t(At,mr),f(e,aa,u),f(e,ae,u),t(ae,gr),t(ae,De),t(De,vr),t(ae,yr),f(e,oa,u),f(e,X,u),t(X,oe),t(oe,kt),_(Te,kt,null),t(X,wr),t(X,It),t(It,$r),f(e,ra,u),f(e,re,u),t(re,_r),t(re,Se),t(Se,br),t(re,Pr),f(e,na,u),f(e,T,u),t(T,Er),t(T,Ne),t(Ne,Ar),t(T,kr),t(T,Fe),t(Fe,Ir),t(T,qr),sa=!0},p(e,[u]){const Ue={};u&2&&(Ue.$$scope={dirty:u,ctx:e}),J.$set(Ue)},i(e){sa||(b(le.$$.fragment,e),b(ie.$$.fragment,e),b(de.$$.fragment,e),b(we.$$.fragment,e),b(be.$$.fragment,e),b(J.$$.fragment,e),b(Ee.$$.fragment,e),b(ke.$$.fragment,e),b(Ie.$$.fragment,e),b(je.$$.fragment,e),b(xe.$$.fragment,e),b(Te.$$.fragment,e),sa=!0)},o(e){P(le.$$.fragment,e),P(ie.$$.fragment,e),P(de.$$.fragment,e),P(we.$$.fragment,e),P(be.$$.fragment,e),P(J.$$.fragment,e),P(Ee.$$.fragment,e),P(ke.$$.fragment,e),P(Ie.$$.fragment,e),P(je.$$.fragment,e),P(xe.$$.fragment,e),P(Te.$$.fragment,e),sa=!1},d(e){a(c),e&&a(m),e&&a(i),E(le),e&&a(xt),e&&a(Ge),e&&a(Tt),e&&a(S),E(ie),e&&a(St),e&&a(v),e&&a(Nt),e&&a(N),E(de),e&&a(Ut),e&&a(Ce),e&&a(Gt),e&&a(H),e&&a(Ot),e&&a(I),e&&a(Lt),e&&a(Xe),e&&a(Ct),e&&a(U),E(we),e&&a(Xt),e&&a(j),e&&a(Rt),E(be,e),e&&a(Mt),e&&a(F),e&&a(Bt),E(J,e),e&&a(Ht),e&&a(G),E(Ee),e&&a(zt),e&&a(x),e&&a(Dt),e&&a(O),E(ke),e&&a(Ft),e&&a(Q),e&&a(Jt),e&&a(Re),e&&a(Kt),e&&a(Y),e&&a(Wt),e&&a(L),E(Ie),e&&a(Qt),e&&a(Z),e&&a(Yt),E(je,e),e&&a(Vt),e&&a(Be),e&&a(Zt),e&&a(He),e&&a(ea),e&&a(ee),e&&a(ta),e&&a(C),E(xe),e&&a(aa),e&&a(ae),e&&a(oa),e&&a(X),E(Te),e&&a(ra),e&&a(re),e&&a(na),e&&a(T)}}}const as={local:"overview",sections:[{local:"main-features",title:"Main features:"},{local:"get-your-api-token",title:"Get your API Token"},{local:"running-inference-with-api-requests",title:"Running Inference with API Requests"},{local:"api-options-and-parameters",title:"API Options and Parameters"},{local:"using-cpuaccelerated-inference-up-to-10x-speedup",title:"Using CPU-Accelerated Inference (~up to 10x speedup)"},{local:"using-gpuaccelerated-inference",title:"Using GPU-Accelerated Inference"},{local:"using-large-models-10-go",title:"Using Large Models (>10 Go)"},{local:"model-pinning-preloading",title:"Model Pinning / Preloading"}],title:"Overview"};function os(k){return Jn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ls extends Hn{constructor(c){super();zn(this,c,os,ts,Dn,{})}}export{ls as default,as as metadata};
