import{S as Ds,i as Cs,s as xs,e as s,k as i,w as m,t as r,M as Ls,c as n,d as a,m as p,a as l,x as h,h as o,b as u,F as t,g as d,y as g,L as Ps,q as f,o as _,B as v,v as Os}from"../chunks/vendor-19e06bd2.js";import{D as b}from"../chunks/Docstring-395e5a9c.js";import{C as He}from"../chunks/CodeBlock-9dd1fdfb.js";import{I as Ta}from"../chunks/IconCopyLink-3c713d38.js";function Is(Io){let P,Ot,O,W,Fe,ae,ja,Ue,Aa,It,re,Da,Oe,Ca,qt,I,V,Je,oe,xa,Ke,La,Bt,M,Pa,Qe,Oa,Ia,St,y,se,qa,q,Ba,Xe,Sa,za,Ye,Na,Wa,Va,G,ne,Ma,le,Ga,Ze,Ra,Ha,Fa,R,ce,Ua,ie,Ja,et,Ka,Qa,Xa,H,pe,Ya,de,Za,tt,er,tr,zt,k,ue,ar,B,rr,at,or,sr,rt,nr,lr,cr,F,me,ir,he,pr,ot,dr,ur,mr,U,ge,hr,fe,gr,st,fr,_r,vr,J,_e,yr,ve,kr,nt,$r,br,Nt,$,ye,wr,S,Er,lt,Tr,jr,ct,Ar,Dr,Cr,it,xr,Lr,K,ke,Pr,$e,Or,pt,Ir,qr,Br,Q,be,Sr,we,zr,dt,Nr,Wr,Wt,w,Vr,ut,Mr,Gr,mt,Rr,Hr,Vt,Ee,Mt,X,Fr,ht,Ur,Jr,Gt,Te,Rt,E,Kr,Ie,Qr,Xr,gt,Yr,Zr,Ht,je,Ft,qe,eo,Ut,Ae,Jt,z,Y,ft,De,to,_t,ao,Kt,T,ro,vt,oo,so,yt,no,lo,Qt,j,Z,kt,co,io,$t,po,uo,mo,ee,bt,ho,go,wt,fo,_o,vo,A,Et,yo,ko,Tt,$o,bo,jt,wo,Eo,Xt,Be,To,Yt,Ce,Zt,N,te,At,xe,jo,Dt,Ao,ea,D,Do,Ct,Co,xo,xt,Lo,Po,ta,Le,aa;return ae=new Ta({}),oe=new Ta({}),se=new b({props:{name:"class accelerate.tracking.TensorBoardTracker",anchor:"accelerate.tracking.TensorBoardTracker",parameters:[{name:"run_name",val:": str"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = ''"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/tracking.py#L92",parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run`,name:"run_name"},{anchor:"accelerate.tracking.TensorBoardTracker.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>) &#x2014;
Location for TensorBoard logs to be stored.`,name:"logging_dir"}]}}),ne=new b({props:{name:"finish",anchor:"accelerate.tracking.TensorBoardTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/tracking.py#L143"}}),ce=new b({props:{name:"log",anchor:"accelerate.tracking.TensorBoardTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/tracking.py#L125",parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.TensorBoardTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}]}}),pe=new b({props:{name:"store_init_configuration",anchor:"accelerate.tracking.TensorBoardTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/tracking.py#L112",parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}]}}),ue=new b({props:{name:"class accelerate.tracking.WandBTracker",anchor:"accelerate.tracking.WandBTracker",parameters:[{name:"run_name",val:": str"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/tracking.py#L151",parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run.`,name:"run_name"}]}}),me=new b({props:{name:"finish",anchor:"accelerate.tracking.WandBTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/tracking.py#L193"}}),ge=new b({props:{name:"log",anchor:"accelerate.tracking.WandBTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/tracking.py#L180",parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.WandBTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}]}}),_e=new b({props:{name:"store_init_configuration",anchor:"accelerate.tracking.WandBTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/tracking.py#L168",parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}]}}),ye=new b({props:{name:"class accelerate.tracking.CometMLTracker",anchor:"accelerate.tracking.CometMLTracker",parameters:[{name:"run_name",val:": str"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/tracking.py#L201",parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run.`,name:"run_name"}]}}),ke=new b({props:{name:"log",anchor:"accelerate.tracking.CometMLTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/tracking.py#L232",parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.CometMLTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}]}}),be=new b({props:{name:"store_init_configuration",anchor:"accelerate.tracking.CometMLTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/tracking.py#L220",parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}]}}),Ee=new He({props:{code:`from accelerate import Accelerate
from accelerate.utils import LoggerType

accelerator = Accelerate(log_with="all")  # For all available trackers in the environment
accelerator = Accelerate(log_with="wandb")
accelerator = Accelerate(log_with=["wandb", LoggerType.TENSORBOARD])`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerate
<span class="hljs-keyword">from</span> accelerate.utils <span class="hljs-keyword">import</span> LoggerType

accelerator = Accelerate(log_with=<span class="hljs-string">&quot;all&quot;</span>)  <span class="hljs-comment"># For all available trackers in the environment</span>
accelerator = Accelerate(log_with=<span class="hljs-string">&quot;wandb&quot;</span>)
accelerator = Accelerate(log_with=[<span class="hljs-string">&quot;wandb&quot;</span>, LoggerType.TENSORBOARD])`}}),Te=new He({props:{code:`hps = {"num_iterations": 5, "learning_rate": 1e-2}
accelerator.init_trackers("my_project", config=hps)`,highlighted:`hps = {<span class="hljs-string">&quot;num_iterations&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;learning_rate&quot;</span>: <span class="hljs-number">1e-2</span>}
accelerator.init_trackers(<span class="hljs-string">&quot;my_project&quot;</span>, config=hps)`}}),je=new He({props:{code:'accelerator.log({"train_loss": 1.12, "valid_loss": 0.8}, step=1)',highlighted:'accelerator.log({<span class="hljs-string">&quot;train_loss&quot;</span>: <span class="hljs-number">1.12</span>, <span class="hljs-string">&quot;valid_loss&quot;</span>: <span class="hljs-number">0.8</span>}, step=<span class="hljs-number">1</span>)'}}),Ae=new He({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(log_with="all")
config = {
    "num_iterations": 5,
    "learning_rate": 1e-2,
    "loss_function": str(my_loss_function),
}

accelerator.init_trackers("example_project", config=config)

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

for iteration in config["num_iterations"]:
    for step, batch in my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        accelerator.backward(loss)
        my_optimizer.step()
        accelerator.log({"training_loss": loss}, step=step)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

accelerator = Accelerator(log_with=<span class="hljs-string">&quot;all&quot;</span>)
config = {
    <span class="hljs-string">&quot;num_iterations&quot;</span>: <span class="hljs-number">5</span>,
    <span class="hljs-string">&quot;learning_rate&quot;</span>: <span class="hljs-number">1e-2</span>,
    <span class="hljs-string">&quot;loss_function&quot;</span>: <span class="hljs-built_in">str</span>(my_loss_function),
}

accelerator.init_trackers(<span class="hljs-string">&quot;example_project&quot;</span>, config=config)

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

<span class="hljs-keyword">for</span> iteration <span class="hljs-keyword">in</span> config[<span class="hljs-string">&quot;num_iterations&quot;</span>]:
    <span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        accelerator.backward(loss)
        my_optimizer.step()
        accelerator.log({<span class="hljs-string">&quot;training_loss&quot;</span>: loss}, step=step)`}}),De=new Ta({}),Ce=new He({props:{code:`from accelerate.tracking import GeneralTracker
from typing import Optional

import wandb


class WandBTracker(GeneralTracker):
    def __init__(self, run_name: str):
        self.run_name = run_name
        wandb.init(self.run_name)

    def store_init_configuration(self, values: dict):
        wandb.config(values)

    def log(self, values: dict, step: Optional[int] = None):
        wandb.log(values, step=step)`,highlighted:`<span class="hljs-keyword">from</span> accelerate.tracking <span class="hljs-keyword">import</span> GeneralTracker
<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span>

<span class="hljs-keyword">import</span> wandb


<span class="hljs-keyword">class</span> <span class="hljs-title class_">WandBTracker</span>(<span class="hljs-title class_ inherited__">GeneralTracker</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, run_name: <span class="hljs-built_in">str</span></span>):
        self.run_name = run_name
        wandb.init(self.run_name)

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">store_init_configuration</span>(<span class="hljs-params">self, values: <span class="hljs-built_in">dict</span></span>):
        wandb.config(values)

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">self, values: <span class="hljs-built_in">dict</span>, step: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span></span>):
        wandb.log(values, step=step)`}}),xe=new Ta({}),Le=new He({props:{code:`from accelerate import Accelerator
+ import neptune.new as neptune

accelerator = Accelerator()
+ run = neptune.init(...)

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

for iteration in config["num_iterations"]:
    for batch in my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        total_loss += loss
        accelerator.backward(loss)
        my_optimizer.step()
+       if accelerator.is_main_process:
+           run["logs/training/batch/loss"].log(loss)`,highlighted:`from accelerate import Accelerator
<span class="hljs-addition">+ import neptune.new as neptune</span>

accelerator = Accelerator()
<span class="hljs-addition">+ run = neptune.init(...)</span>

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

for iteration in config[&quot;num_iterations&quot;]:
    for batch in my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        total_loss += loss
        accelerator.backward(loss)
        my_optimizer.step()
<span class="hljs-addition">+       if accelerator.is_main_process:</span>
<span class="hljs-addition">+           run[&quot;logs/training/batch/loss&quot;].log(loss)</span>`}}),{c(){P=s("meta"),Ot=i(),O=s("h1"),W=s("a"),Fe=s("span"),m(ae.$$.fragment),ja=i(),Ue=s("span"),Aa=r("Tracking"),It=i(),re=s("p"),Da=r(`There are a large number of experiment tracking API\u2019s available, however getting them all to work with in a multi-processing environment can oftentimes be complex.
Accelerate provides a general tracking API that can be used to log useful items during your script through `),Oe=s("a"),Ca=r("log()"),qt=i(),I=s("h2"),V=s("a"),Je=s("span"),m(oe.$$.fragment),xa=i(),Ke=s("span"),La=r("Integrated Trackers"),Bt=i(),M=s("p"),Pa=r("Currently "),Qe=s("code"),Oa=r("Accelerate"),Ia=r(" supports three trackers out-of-the-box:"),St=i(),y=s("div"),m(se.$$.fragment),qa=i(),q=s("p"),Ba=r("A "),Xe=s("code"),Sa=r("Tracker"),za=r(" class that supports "),Ye=s("code"),Na=r("tensorboard"),Wa=r(". Should be initialized at the start of your script."),Va=i(),G=s("div"),m(ne.$$.fragment),Ma=i(),le=s("p"),Ga=r("Closes "),Ze=s("code"),Ra=r("TensorBoard"),Ha=r(" writer"),Fa=i(),R=s("div"),m(ce.$$.fragment),Ua=i(),ie=s("p"),Ja=r("Logs "),et=s("code"),Ka=r("values"),Qa=r(" to the current run."),Xa=i(),H=s("div"),m(pe.$$.fragment),Ya=i(),de=s("p"),Za=r("Logs "),tt=s("code"),er=r("values"),tr=r(" as hyperparameters for the run. Should be run at the beginning of your experiment."),zt=i(),k=s("div"),m(ue.$$.fragment),ar=i(),B=s("p"),rr=r("A "),at=s("code"),or=r("Tracker"),sr=r(" class that supports "),rt=s("code"),nr=r("wandb"),lr=r(". Should be initialized at the start of your script."),cr=i(),F=s("div"),m(me.$$.fragment),ir=i(),he=s("p"),pr=r("Closes "),ot=s("code"),dr=r("wandb"),ur=r(" writer"),mr=i(),U=s("div"),m(ge.$$.fragment),hr=i(),fe=s("p"),gr=r("Logs "),st=s("code"),fr=r("values"),_r=r(" to the current run."),vr=i(),J=s("div"),m(_e.$$.fragment),yr=i(),ve=s("p"),kr=r("Logs "),nt=s("code"),$r=r("values"),br=r(" as hyperparameters for the run. Should be run at the beginning of your experiment."),Nt=i(),$=s("div"),m(ye.$$.fragment),wr=i(),S=s("p"),Er=r("A "),lt=s("code"),Tr=r("Tracker"),jr=r(" class that supports "),ct=s("code"),Ar=r("comet_ml"),Dr=r(". Should be initialized at the start of your script."),Cr=i(),it=s("p"),xr=r("API keys must be stored in a Comet config file."),Lr=i(),K=s("div"),m(ke.$$.fragment),Pr=i(),$e=s("p"),Or=r("Logs "),pt=s("code"),Ir=r("values"),qr=r(" to the current run."),Br=i(),Q=s("div"),m(be.$$.fragment),Sr=i(),we=s("p"),zr=r("Logs "),dt=s("code"),Nr=r("values"),Wr=r(" as hyperparameters for the run. Should be run at the beginning of your experiment."),Wt=i(),w=s("p"),Vr=r("To use any of them, pass in the selected type(s) to the "),ut=s("code"),Mr=r("log_with"),Gr=r(" parameter in "),mt=s("code"),Rr=r("__init__"),Hr=r(":"),Vt=i(),m(Ee.$$.fragment),Mt=i(),X=s("p"),Fr=r("At the start of your experiment "),ht=s("code"),Ur=r("init_tracker"),Jr=r(" should be used to setup your project, and potentially add any experiment hyperparameters to be logged:"),Gt=i(),m(Te.$$.fragment),Rt=i(),E=s("p"),Kr=r("When you are ready to log any data, "),Ie=s("a"),Qr=r("log()"),Xr=r(` should be used.
A `),gt=s("code"),Yr=r("step"),Zr=r(" can also be passed in to correlate the data with a particular step in the training loop."),Ht=i(),m(je.$$.fragment),Ft=i(),qe=s("p"),eo=r("A full example is below:"),Ut=i(),m(Ae.$$.fragment),Jt=i(),z=s("h2"),Y=s("a"),ft=s("span"),m(De.$$.fragment),to=i(),_t=s("span"),ao=r("Implementing Custom Trackers"),Kt=i(),T=s("p"),ro=r("To implement a new tracker to be used in "),vt=s("code"),oo=r("Accelerator"),so=r(", a new one can be made through implementing the "),yt=s("code"),no=r("~GeneralTracker"),lo=r(` class.
Every tracker must implement three functions:`),Qt=i(),j=s("ul"),Z=s("li"),kt=s("code"),co=r("__init__"),io=r(": Should store a "),$t=s("code"),po=r("run_name"),uo=r(" and initialize the tracker API of the integrated library"),mo=i(),ee=s("li"),bt=s("code"),ho=r("store_init_configuration"),go=r(": Should take in a "),wt=s("code"),fo=r("values"),_o=r(" dictionary and store them as a one-time experiment configuration"),vo=i(),A=s("li"),Et=s("code"),yo=r("log"),ko=r(": Should take in a "),Tt=s("code"),$o=r("values"),bo=r(" dictionary and a "),jt=s("code"),wo=r("step"),Eo=r(", and should log them to the run"),Xt=i(),Be=s("p"),To=r("A brief example can be seen below with an integration with Weights and Biases, containing only the relevent information:"),Yt=i(),m(Ce.$$.fragment),Zt=i(),N=s("h2"),te=s("a"),At=s("span"),m(xe.$$.fragment),jo=i(),Dt=s("span"),Ao=r("When a wrapper cannot work"),ea=i(),D=s("p"),Do=r("If a library has an API that does not follow a strict "),Ct=s("code"),Co=r(".log"),xo=r(" with an overall dictionary such as Neptune.AI, logging can be done manually under an "),xt=s("code"),Lo=r("if accelerator.is_main_process"),Po=r(" statement:"),ta=i(),m(Le.$$.fragment),this.h()},l(e){const c=Ls('[data-svelte="svelte-1phssyn"]',document.head);P=n(c,"META",{name:!0,content:!0}),c.forEach(a),Ot=p(e),O=n(e,"H1",{class:!0});var ra=l(O);W=n(ra,"A",{id:!0,class:!0,href:!0});var qo=l(W);Fe=n(qo,"SPAN",{});var Bo=l(Fe);h(ae.$$.fragment,Bo),Bo.forEach(a),qo.forEach(a),ja=p(ra),Ue=n(ra,"SPAN",{});var So=l(Ue);Aa=o(So,"Tracking"),So.forEach(a),ra.forEach(a),It=p(e),re=n(e,"P",{});var Oo=l(re);Da=o(Oo,`There are a large number of experiment tracking API\u2019s available, however getting them all to work with in a multi-processing environment can oftentimes be complex.
Accelerate provides a general tracking API that can be used to log useful items during your script through `),Oe=n(Oo,"A",{href:!0});var zo=l(Oe);Ca=o(zo,"log()"),zo.forEach(a),Oo.forEach(a),qt=p(e),I=n(e,"H2",{class:!0});var oa=l(I);V=n(oa,"A",{id:!0,class:!0,href:!0});var No=l(V);Je=n(No,"SPAN",{});var Wo=l(Je);h(oe.$$.fragment,Wo),Wo.forEach(a),No.forEach(a),xa=p(oa),Ke=n(oa,"SPAN",{});var Vo=l(Ke);La=o(Vo,"Integrated Trackers"),Vo.forEach(a),oa.forEach(a),Bt=p(e),M=n(e,"P",{});var sa=l(M);Pa=o(sa,"Currently "),Qe=n(sa,"CODE",{});var Mo=l(Qe);Oa=o(Mo,"Accelerate"),Mo.forEach(a),Ia=o(sa," supports three trackers out-of-the-box:"),sa.forEach(a),St=p(e),y=n(e,"DIV",{class:!0});var C=l(y);h(se.$$.fragment,C),qa=p(C),q=n(C,"P",{});var Se=l(q);Ba=o(Se,"A "),Xe=n(Se,"CODE",{});var Go=l(Xe);Sa=o(Go,"Tracker"),Go.forEach(a),za=o(Se," class that supports "),Ye=n(Se,"CODE",{});var Ro=l(Ye);Na=o(Ro,"tensorboard"),Ro.forEach(a),Wa=o(Se,". Should be initialized at the start of your script."),Se.forEach(a),Va=p(C),G=n(C,"DIV",{class:!0});var na=l(G);h(ne.$$.fragment,na),Ma=p(na),le=n(na,"P",{});var la=l(le);Ga=o(la,"Closes "),Ze=n(la,"CODE",{});var Ho=l(Ze);Ra=o(Ho,"TensorBoard"),Ho.forEach(a),Ha=o(la," writer"),la.forEach(a),na.forEach(a),Fa=p(C),R=n(C,"DIV",{class:!0});var ca=l(R);h(ce.$$.fragment,ca),Ua=p(ca),ie=n(ca,"P",{});var ia=l(ie);Ja=o(ia,"Logs "),et=n(ia,"CODE",{});var Fo=l(et);Ka=o(Fo,"values"),Fo.forEach(a),Qa=o(ia," to the current run."),ia.forEach(a),ca.forEach(a),Xa=p(C),H=n(C,"DIV",{class:!0});var pa=l(H);h(pe.$$.fragment,pa),Ya=p(pa),de=n(pa,"P",{});var da=l(de);Za=o(da,"Logs "),tt=n(da,"CODE",{});var Uo=l(tt);er=o(Uo,"values"),Uo.forEach(a),tr=o(da," as hyperparameters for the run. Should be run at the beginning of your experiment."),da.forEach(a),pa.forEach(a),C.forEach(a),zt=p(e),k=n(e,"DIV",{class:!0});var x=l(k);h(ue.$$.fragment,x),ar=p(x),B=n(x,"P",{});var ze=l(B);rr=o(ze,"A "),at=n(ze,"CODE",{});var Jo=l(at);or=o(Jo,"Tracker"),Jo.forEach(a),sr=o(ze," class that supports "),rt=n(ze,"CODE",{});var Ko=l(rt);nr=o(Ko,"wandb"),Ko.forEach(a),lr=o(ze,". Should be initialized at the start of your script."),ze.forEach(a),cr=p(x),F=n(x,"DIV",{class:!0});var ua=l(F);h(me.$$.fragment,ua),ir=p(ua),he=n(ua,"P",{});var ma=l(he);pr=o(ma,"Closes "),ot=n(ma,"CODE",{});var Qo=l(ot);dr=o(Qo,"wandb"),Qo.forEach(a),ur=o(ma," writer"),ma.forEach(a),ua.forEach(a),mr=p(x),U=n(x,"DIV",{class:!0});var ha=l(U);h(ge.$$.fragment,ha),hr=p(ha),fe=n(ha,"P",{});var ga=l(fe);gr=o(ga,"Logs "),st=n(ga,"CODE",{});var Xo=l(st);fr=o(Xo,"values"),Xo.forEach(a),_r=o(ga," to the current run."),ga.forEach(a),ha.forEach(a),vr=p(x),J=n(x,"DIV",{class:!0});var fa=l(J);h(_e.$$.fragment,fa),yr=p(fa),ve=n(fa,"P",{});var _a=l(ve);kr=o(_a,"Logs "),nt=n(_a,"CODE",{});var Yo=l(nt);$r=o(Yo,"values"),Yo.forEach(a),br=o(_a," as hyperparameters for the run. Should be run at the beginning of your experiment."),_a.forEach(a),fa.forEach(a),x.forEach(a),Nt=p(e),$=n(e,"DIV",{class:!0});var L=l($);h(ye.$$.fragment,L),wr=p(L),S=n(L,"P",{});var Ne=l(S);Er=o(Ne,"A "),lt=n(Ne,"CODE",{});var Zo=l(lt);Tr=o(Zo,"Tracker"),Zo.forEach(a),jr=o(Ne," class that supports "),ct=n(Ne,"CODE",{});var es=l(ct);Ar=o(es,"comet_ml"),es.forEach(a),Dr=o(Ne,". Should be initialized at the start of your script."),Ne.forEach(a),Cr=p(L),it=n(L,"P",{});var ts=l(it);xr=o(ts,"API keys must be stored in a Comet config file."),ts.forEach(a),Lr=p(L),K=n(L,"DIV",{class:!0});var va=l(K);h(ke.$$.fragment,va),Pr=p(va),$e=n(va,"P",{});var ya=l($e);Or=o(ya,"Logs "),pt=n(ya,"CODE",{});var as=l(pt);Ir=o(as,"values"),as.forEach(a),qr=o(ya," to the current run."),ya.forEach(a),va.forEach(a),Br=p(L),Q=n(L,"DIV",{class:!0});var ka=l(Q);h(be.$$.fragment,ka),Sr=p(ka),we=n(ka,"P",{});var $a=l(we);zr=o($a,"Logs "),dt=n($a,"CODE",{});var rs=l(dt);Nr=o(rs,"values"),rs.forEach(a),Wr=o($a," as hyperparameters for the run. Should be run at the beginning of your experiment."),$a.forEach(a),ka.forEach(a),L.forEach(a),Wt=p(e),w=n(e,"P",{});var We=l(w);Vr=o(We,"To use any of them, pass in the selected type(s) to the "),ut=n(We,"CODE",{});var os=l(ut);Mr=o(os,"log_with"),os.forEach(a),Gr=o(We," parameter in "),mt=n(We,"CODE",{});var ss=l(mt);Rr=o(ss,"__init__"),ss.forEach(a),Hr=o(We,":"),We.forEach(a),Vt=p(e),h(Ee.$$.fragment,e),Mt=p(e),X=n(e,"P",{});var ba=l(X);Fr=o(ba,"At the start of your experiment "),ht=n(ba,"CODE",{});var ns=l(ht);Ur=o(ns,"init_tracker"),ns.forEach(a),Jr=o(ba," should be used to setup your project, and potentially add any experiment hyperparameters to be logged:"),ba.forEach(a),Gt=p(e),h(Te.$$.fragment,e),Rt=p(e),E=n(e,"P",{});var Ve=l(E);Kr=o(Ve,"When you are ready to log any data, "),Ie=n(Ve,"A",{href:!0});var ls=l(Ie);Qr=o(ls,"log()"),ls.forEach(a),Xr=o(Ve,` should be used.
A `),gt=n(Ve,"CODE",{});var cs=l(gt);Yr=o(cs,"step"),cs.forEach(a),Zr=o(Ve," can also be passed in to correlate the data with a particular step in the training loop."),Ve.forEach(a),Ht=p(e),h(je.$$.fragment,e),Ft=p(e),qe=n(e,"P",{});var is=l(qe);eo=o(is,"A full example is below:"),is.forEach(a),Ut=p(e),h(Ae.$$.fragment,e),Jt=p(e),z=n(e,"H2",{class:!0});var wa=l(z);Y=n(wa,"A",{id:!0,class:!0,href:!0});var ps=l(Y);ft=n(ps,"SPAN",{});var ds=l(ft);h(De.$$.fragment,ds),ds.forEach(a),ps.forEach(a),to=p(wa),_t=n(wa,"SPAN",{});var us=l(_t);ao=o(us,"Implementing Custom Trackers"),us.forEach(a),wa.forEach(a),Kt=p(e),T=n(e,"P",{});var Me=l(T);ro=o(Me,"To implement a new tracker to be used in "),vt=n(Me,"CODE",{});var ms=l(vt);oo=o(ms,"Accelerator"),ms.forEach(a),so=o(Me,", a new one can be made through implementing the "),yt=n(Me,"CODE",{});var hs=l(yt);no=o(hs,"~GeneralTracker"),hs.forEach(a),lo=o(Me,` class.
Every tracker must implement three functions:`),Me.forEach(a),Qt=p(e),j=n(e,"UL",{});var Ge=l(j);Z=n(Ge,"LI",{});var Lt=l(Z);kt=n(Lt,"CODE",{});var gs=l(kt);co=o(gs,"__init__"),gs.forEach(a),io=o(Lt,": Should store a "),$t=n(Lt,"CODE",{});var fs=l($t);po=o(fs,"run_name"),fs.forEach(a),uo=o(Lt," and initialize the tracker API of the integrated library"),Lt.forEach(a),mo=p(Ge),ee=n(Ge,"LI",{});var Pt=l(ee);bt=n(Pt,"CODE",{});var _s=l(bt);ho=o(_s,"store_init_configuration"),_s.forEach(a),go=o(Pt,": Should take in a "),wt=n(Pt,"CODE",{});var vs=l(wt);fo=o(vs,"values"),vs.forEach(a),_o=o(Pt," dictionary and store them as a one-time experiment configuration"),Pt.forEach(a),vo=p(Ge),A=n(Ge,"LI",{});var Pe=l(A);Et=n(Pe,"CODE",{});var ys=l(Et);yo=o(ys,"log"),ys.forEach(a),ko=o(Pe,": Should take in a "),Tt=n(Pe,"CODE",{});var ks=l(Tt);$o=o(ks,"values"),ks.forEach(a),bo=o(Pe," dictionary and a "),jt=n(Pe,"CODE",{});var $s=l(jt);wo=o($s,"step"),$s.forEach(a),Eo=o(Pe,", and should log them to the run"),Pe.forEach(a),Ge.forEach(a),Xt=p(e),Be=n(e,"P",{});var bs=l(Be);To=o(bs,"A brief example can be seen below with an integration with Weights and Biases, containing only the relevent information:"),bs.forEach(a),Yt=p(e),h(Ce.$$.fragment,e),Zt=p(e),N=n(e,"H2",{class:!0});var Ea=l(N);te=n(Ea,"A",{id:!0,class:!0,href:!0});var ws=l(te);At=n(ws,"SPAN",{});var Es=l(At);h(xe.$$.fragment,Es),Es.forEach(a),ws.forEach(a),jo=p(Ea),Dt=n(Ea,"SPAN",{});var Ts=l(Dt);Ao=o(Ts,"When a wrapper cannot work"),Ts.forEach(a),Ea.forEach(a),ea=p(e),D=n(e,"P",{});var Re=l(D);Do=o(Re,"If a library has an API that does not follow a strict "),Ct=n(Re,"CODE",{});var js=l(Ct);Co=o(js,".log"),js.forEach(a),xo=o(Re," with an overall dictionary such as Neptune.AI, logging can be done manually under an "),xt=n(Re,"CODE",{});var As=l(xt);Lo=o(As,"if accelerator.is_main_process"),As.forEach(a),Po=o(Re," statement:"),Re.forEach(a),ta=p(e),h(Le.$$.fragment,e),this.h()},h(){u(P,"name","hf:doc:metadata"),u(P,"content",JSON.stringify(qs)),u(W,"id","tracking"),u(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(W,"href","#tracking"),u(O,"class","relative group"),u(Oe,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator.log"),u(V,"id","accelerate.tracking.TensorBoardTracker"),u(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(V,"href","#accelerate.tracking.TensorBoardTracker"),u(I,"class","relative group"),u(G,"class","docstring"),u(R,"class","docstring"),u(H,"class","docstring"),u(y,"class","docstring"),u(F,"class","docstring"),u(U,"class","docstring"),u(J,"class","docstring"),u(k,"class","docstring"),u(K,"class","docstring"),u(Q,"class","docstring"),u($,"class","docstring"),u(Ie,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator.log"),u(Y,"id","implementing-custom-trackers"),u(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Y,"href","#implementing-custom-trackers"),u(z,"class","relative group"),u(te,"id","when-a-wrapper-cannot-work"),u(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(te,"href","#when-a-wrapper-cannot-work"),u(N,"class","relative group")},m(e,c){t(document.head,P),d(e,Ot,c),d(e,O,c),t(O,W),t(W,Fe),g(ae,Fe,null),t(O,ja),t(O,Ue),t(Ue,Aa),d(e,It,c),d(e,re,c),t(re,Da),t(re,Oe),t(Oe,Ca),d(e,qt,c),d(e,I,c),t(I,V),t(V,Je),g(oe,Je,null),t(I,xa),t(I,Ke),t(Ke,La),d(e,Bt,c),d(e,M,c),t(M,Pa),t(M,Qe),t(Qe,Oa),t(M,Ia),d(e,St,c),d(e,y,c),g(se,y,null),t(y,qa),t(y,q),t(q,Ba),t(q,Xe),t(Xe,Sa),t(q,za),t(q,Ye),t(Ye,Na),t(q,Wa),t(y,Va),t(y,G),g(ne,G,null),t(G,Ma),t(G,le),t(le,Ga),t(le,Ze),t(Ze,Ra),t(le,Ha),t(y,Fa),t(y,R),g(ce,R,null),t(R,Ua),t(R,ie),t(ie,Ja),t(ie,et),t(et,Ka),t(ie,Qa),t(y,Xa),t(y,H),g(pe,H,null),t(H,Ya),t(H,de),t(de,Za),t(de,tt),t(tt,er),t(de,tr),d(e,zt,c),d(e,k,c),g(ue,k,null),t(k,ar),t(k,B),t(B,rr),t(B,at),t(at,or),t(B,sr),t(B,rt),t(rt,nr),t(B,lr),t(k,cr),t(k,F),g(me,F,null),t(F,ir),t(F,he),t(he,pr),t(he,ot),t(ot,dr),t(he,ur),t(k,mr),t(k,U),g(ge,U,null),t(U,hr),t(U,fe),t(fe,gr),t(fe,st),t(st,fr),t(fe,_r),t(k,vr),t(k,J),g(_e,J,null),t(J,yr),t(J,ve),t(ve,kr),t(ve,nt),t(nt,$r),t(ve,br),d(e,Nt,c),d(e,$,c),g(ye,$,null),t($,wr),t($,S),t(S,Er),t(S,lt),t(lt,Tr),t(S,jr),t(S,ct),t(ct,Ar),t(S,Dr),t($,Cr),t($,it),t(it,xr),t($,Lr),t($,K),g(ke,K,null),t(K,Pr),t(K,$e),t($e,Or),t($e,pt),t(pt,Ir),t($e,qr),t($,Br),t($,Q),g(be,Q,null),t(Q,Sr),t(Q,we),t(we,zr),t(we,dt),t(dt,Nr),t(we,Wr),d(e,Wt,c),d(e,w,c),t(w,Vr),t(w,ut),t(ut,Mr),t(w,Gr),t(w,mt),t(mt,Rr),t(w,Hr),d(e,Vt,c),g(Ee,e,c),d(e,Mt,c),d(e,X,c),t(X,Fr),t(X,ht),t(ht,Ur),t(X,Jr),d(e,Gt,c),g(Te,e,c),d(e,Rt,c),d(e,E,c),t(E,Kr),t(E,Ie),t(Ie,Qr),t(E,Xr),t(E,gt),t(gt,Yr),t(E,Zr),d(e,Ht,c),g(je,e,c),d(e,Ft,c),d(e,qe,c),t(qe,eo),d(e,Ut,c),g(Ae,e,c),d(e,Jt,c),d(e,z,c),t(z,Y),t(Y,ft),g(De,ft,null),t(z,to),t(z,_t),t(_t,ao),d(e,Kt,c),d(e,T,c),t(T,ro),t(T,vt),t(vt,oo),t(T,so),t(T,yt),t(yt,no),t(T,lo),d(e,Qt,c),d(e,j,c),t(j,Z),t(Z,kt),t(kt,co),t(Z,io),t(Z,$t),t($t,po),t(Z,uo),t(j,mo),t(j,ee),t(ee,bt),t(bt,ho),t(ee,go),t(ee,wt),t(wt,fo),t(ee,_o),t(j,vo),t(j,A),t(A,Et),t(Et,yo),t(A,ko),t(A,Tt),t(Tt,$o),t(A,bo),t(A,jt),t(jt,wo),t(A,Eo),d(e,Xt,c),d(e,Be,c),t(Be,To),d(e,Yt,c),g(Ce,e,c),d(e,Zt,c),d(e,N,c),t(N,te),t(te,At),g(xe,At,null),t(N,jo),t(N,Dt),t(Dt,Ao),d(e,ea,c),d(e,D,c),t(D,Do),t(D,Ct),t(Ct,Co),t(D,xo),t(D,xt),t(xt,Lo),t(D,Po),d(e,ta,c),g(Le,e,c),aa=!0},p:Ps,i(e){aa||(f(ae.$$.fragment,e),f(oe.$$.fragment,e),f(se.$$.fragment,e),f(ne.$$.fragment,e),f(ce.$$.fragment,e),f(pe.$$.fragment,e),f(ue.$$.fragment,e),f(me.$$.fragment,e),f(ge.$$.fragment,e),f(_e.$$.fragment,e),f(ye.$$.fragment,e),f(ke.$$.fragment,e),f(be.$$.fragment,e),f(Ee.$$.fragment,e),f(Te.$$.fragment,e),f(je.$$.fragment,e),f(Ae.$$.fragment,e),f(De.$$.fragment,e),f(Ce.$$.fragment,e),f(xe.$$.fragment,e),f(Le.$$.fragment,e),aa=!0)},o(e){_(ae.$$.fragment,e),_(oe.$$.fragment,e),_(se.$$.fragment,e),_(ne.$$.fragment,e),_(ce.$$.fragment,e),_(pe.$$.fragment,e),_(ue.$$.fragment,e),_(me.$$.fragment,e),_(ge.$$.fragment,e),_(_e.$$.fragment,e),_(ye.$$.fragment,e),_(ke.$$.fragment,e),_(be.$$.fragment,e),_(Ee.$$.fragment,e),_(Te.$$.fragment,e),_(je.$$.fragment,e),_(Ae.$$.fragment,e),_(De.$$.fragment,e),_(Ce.$$.fragment,e),_(xe.$$.fragment,e),_(Le.$$.fragment,e),aa=!1},d(e){a(P),e&&a(Ot),e&&a(O),v(ae),e&&a(It),e&&a(re),e&&a(qt),e&&a(I),v(oe),e&&a(Bt),e&&a(M),e&&a(St),e&&a(y),v(se),v(ne),v(ce),v(pe),e&&a(zt),e&&a(k),v(ue),v(me),v(ge),v(_e),e&&a(Nt),e&&a($),v(ye),v(ke),v(be),e&&a(Wt),e&&a(w),e&&a(Vt),v(Ee,e),e&&a(Mt),e&&a(X),e&&a(Gt),v(Te,e),e&&a(Rt),e&&a(E),e&&a(Ht),v(je,e),e&&a(Ft),e&&a(qe),e&&a(Ut),v(Ae,e),e&&a(Jt),e&&a(z),v(De),e&&a(Kt),e&&a(T),e&&a(Qt),e&&a(j),e&&a(Xt),e&&a(Be),e&&a(Yt),v(Ce,e),e&&a(Zt),e&&a(N),v(xe),e&&a(ea),e&&a(D),e&&a(ta),v(Le,e)}}}const qs={local:"tracking",sections:[{local:"accelerate.tracking.TensorBoardTracker",title:"Integrated Trackers"},{local:"implementing-custom-trackers",title:"Implementing Custom Trackers"},{local:"when-a-wrapper-cannot-work",title:"When a wrapper cannot work"}],title:"Tracking"};function Bs(Io){return Os(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Vs extends Ds{constructor(P){super();Cs(this,P,Bs,Is,xs,{})}}export{Vs as default,qs as metadata};
