import{S as wl,i as Al,s as xl,e as o,k as l,w as m,t,M as Dl,c,d as a,m as i,a as n,x as f,h as r,b as h,F as e,g as L,y as g,q as u,o as _,B as v,v as kl}from"../chunks/vendor-19e06bd2.js";import{T as Tl}from"../chunks/Tip-f0fa2d82.js";import{D as $}from"../chunks/Docstring-395e5a9c.js";import{I as Ll}from"../chunks/IconCopyLink-3c713d38.js";function Pl(qr){let b,Q,A,P,R,k,ke,G,M,Z,I;return{c(){b=o("p"),Q=t("Every "),A=o("code"),P=t("object"),R=t(" must have a "),k=o("code"),ke=t("load_state_dict"),G=t(" and "),M=o("code"),Z=t("state_dict"),I=t(" function to be stored.")},l(W){b=c(W,"P",{});var w=n(b);Q=r(w,"Every "),A=c(w,"CODE",{});var ht=n(A);P=r(ht,"object"),ht.forEach(a),R=r(w," must have a "),k=c(w,"CODE",{});var mt=n(k);ke=r(mt,"load_state_dict"),mt.forEach(a),G=r(w," and "),M=c(w,"CODE",{});var Te=n(M);Z=r(Te,"state_dict"),Te.forEach(a),I=r(w," function to be stored."),w.forEach(a)},m(W,w){L(W,b,w),e(b,Q),e(b,A),e(A,P),e(b,R),e(b,k),e(k,ke),e(b,G),e(b,M),e(M,Z),e(b,I)},d(W){W&&a(b)}}}function Il(qr){let b,Q,A,P,R,k,ke,G,M,Z,I,W,w,ht,mt,Te,x,F,wa,ft,Aa,xa,zt,Da,ka,Ta,Le,La,gt,Pa,Ia,Oa,C,Ua,Nt,Ca,ja,qt,za,Na,St,qa,Sa,Va,H,Ra,Vt,Ga,Ma,Rt,Wa,Fa,Ha,Pe,Ka,ut,Xa,Ya,Sr,ee,Ba,Gt,Ja,Qa,Vr,y,te,Mt,Za,eo,_t,to,ro,ao,Ie,oo,Wt,co,no,so,Oe,lo,Ft,io,po,ho,Ue,mo,vt,fo,go,uo,Ce,_o,bt,vo,bo,$o,K,yo,$t,Eo,wo,Ht,Ao,xo,Do,T,ko,re,To,Kt,Lo,Po,Io,Xt,Oo,Uo,ae,Co,Yt,jo,zo,No,Bt,qo,So,Rr,d,je,Vo,Jt,Ro,Go,Qt,Mo,Wo,ze,oe,Zt,Fo,Ho,er,Ko,Xo,Yo,ce,tr,Bo,Jo,yt,Qo,Zo,ec,ne,Ne,tc,rr,rc,ac,se,qe,oc,X,cc,ar,nc,sc,or,lc,ic,dc,le,Se,pc,Ve,hc,cr,mc,fc,gc,ie,Re,uc,Ge,_c,nr,vc,bc,$c,de,Me,yc,sr,Ec,wc,pe,We,Ac,lr,xc,Dc,z,Fe,kc,He,Tc,ir,Lc,Pc,Ic,dr,Oc,Uc,he,Ke,Cc,Xe,jc,pr,zc,Nc,qc,me,Ye,Sc,hr,Vc,Rc,N,Be,Gc,mr,Mc,Wc,fr,Fc,Hc,fe,Je,Kc,Y,Xc,gr,Yc,Bc,ur,Jc,Qc,Zc,q,Qe,en,_r,tn,rn,vr,an,on,ge,Ze,cn,br,nn,sn,O,et,ln,tt,dn,$r,pn,hn,mn,yr,fn,gn,B,Et,Er,un,_n,vn,wt,wr,bn,$n,yn,At,Ar,En,wn,An,ue,rt,xn,at,Dn,xr,kn,Tn,Ln,U,ot,Pn,j,In,Dr,On,Un,kr,Cn,jn,Tr,zn,Nn,qn,Lr,Sn,Vn,_e,Rn,ve,ct,Gn,nt,Mn,Pr,Wn,Fn,Hn,be,st,Kn,Ir,Xn,Yn,$e,lt,Bn,Or,Jn,Qn,ye,it,Zn,J,es,Ur,ts,rs,xt,as,os,cs,Ee,dt,ns,Cr,ss,Gr;return k=new Ll({}),je=new $({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.PrecisionType, str] = None"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.LoggerType]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = ''"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.kwargs_handlers.KwargsHandler]] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L61",parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code> &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code> or <code>LoggerType</code> <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code></li>
</ul>
<p>If <code>&quot;all</code>&#x201D; is selected, will pick up all available trackers in the environment and intialize them.`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}]}}),Ne=new $({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L771"}}),qe=new $({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L495"}}),Se=new $({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L526"}}),Re=new $({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L533"}}),Me=new $({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L629"}}),We=new $({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L693"}}),Fe=new $({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L540",parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),Ke=new $({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L593",parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"}]}}),Ye=new $({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L668",parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}]}}),Be=new $({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L284"}}),Je=new $({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L615",parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}]}}),Qe=new $({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L293"}}),Ze=new $({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L558",parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}]}}),et=new $({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L331"}}),rt=new $({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L311"}}),ot=new $({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L747"}}),_e=new Tl({props:{$$slots:{default:[Pl]},$$scope:{ctx:qr}}}),ct=new $({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L637",parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}]}}),st=new $({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L648",parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}]}}),lt=new $({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L506",parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}]}}),it=new $({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L575",parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}]}}),dt=new $({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_293/src/accelerate/accelerator.py#L586"}}),{c(){b=o("meta"),Q=l(),A=o("h1"),P=o("a"),R=o("span"),m(k.$$.fragment),ke=l(),G=o("span"),M=t("Accelerator"),Z=l(),I=o("p"),W=t("The "),w=o("a"),ht=t("Accelerator"),mt=t(` is the main class provided by \u{1F917} Accelerate. It serves at the main entrypoint for
the API. To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate juste:`),Te=l(),x=o("ol"),F=o("li"),wa=t("Initialize an "),ft=o("a"),Aa=t("Accelerator"),xa=t(" object (that we will call "),zt=o("code"),Da=t("accelerator"),ka=t(` in the rest of this
page) as early as possible in your script.`),Ta=l(),Le=o("li"),La=t("Pass along your model(s), optimizer(s), dataloader(s) to the "),gt=o("a"),Pa=t("prepare()"),Ia=t(" method."),Oa=l(),C=o("li"),Ua=t("(Optional but best practice) Remove all the "),Nt=o("code"),Ca=t(".cuda()"),ja=t(" or "),qt=o("code"),za=t(".to(device)"),Na=t(` in your code and let the
`),St=o("code"),qa=t("accelerator"),Sa=t(" handle device placement for you."),Va=l(),H=o("li"),Ra=t("Replace the "),Vt=o("code"),Ga=t("loss.backward()"),Ma=t(" in your code by "),Rt=o("code"),Wa=t("accelerator.backward(loss)"),Fa=t("."),Ha=l(),Pe=o("li"),Ka=t(`(Optional, when using distributed evaluation) Gather your predictions and labelsbefore storing them or using them
for metric computation using `),ut=o("a"),Xa=t("gather()"),Ya=t("."),Sr=l(),ee=o("p"),Ba=t(`This is all what is needed in most cases. For more advanced case or a nicer experience here are the functions you
should search for and replace by the corresponding methods of your `),Gt=o("code"),Ja=t("accelerator"),Qa=t(":"),Vr=l(),y=o("ul"),te=o("li"),Mt=o("code"),Za=t("print"),eo=t(" statements should be replaced by "),_t=o("a"),to=t("print()"),ro=t(` to be only printed once per
process.`),ao=l(),Ie=o("li"),oo=t("Use "),Wt=o("code"),co=t("is_local_main_process()"),no=t("for statements that should be executed once per server."),so=l(),Oe=o("li"),lo=t("Use "),Ft=o("code"),io=t("is_main_process()"),po=t("for statements that should be executed once only."),ho=l(),Ue=o("li"),mo=t("Use "),vt=o("a"),fo=t("wait_for_everyone()"),go=t(` to make sure all processes join that point before continuing
(useful before a model save for instance).`),uo=l(),Ce=o("li"),_o=t("Use "),bt=o("a"),vo=t("unwrap_model()"),bo=t(" to unwrap your model before saving it."),$o=l(),K=o("li"),yo=t("Use "),$t=o("a"),Eo=t("save()"),wo=t(" instead of "),Ht=o("code"),Ao=t("torch.save"),xo=t("."),Do=l(),T=o("li"),ko=t("Use "),re=o("a"),To=t("clip"),Kt=o("em"),Lo=t("grad_norm"),Po=t("()"),Io=t(" instead of "),Xt=o("code"),Oo=t("torch.nn.utils.clip_grad_norm_"),Uo=t(` and
`),ae=o("a"),Co=t("clip"),Yt=o("em"),jo=t("grad_value"),zo=t("()"),No=t(" instead of "),Bt=o("code"),qo=t("torch.nn.utils.clip_grad_value_"),So=t("."),Rr=l(),d=o("div"),m(je.$$.fragment),Vo=l(),Jt=o("p"),Ro=t("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Go=l(),Qt=o("p"),Mo=t("Attributes"),Wo=l(),ze=o("ul"),oe=o("li"),Zt=o("strong"),Fo=t("device"),Ho=t(" ("),er=o("code"),Ko=t("torch.device"),Xo=t(") \u2014 The device to use."),Yo=l(),ce=o("li"),tr=o("strong"),Bo=t("state"),Jo=t(" ("),yt=o("a"),Qo=t("AcceleratorState"),Zo=t(") \u2014 The distributed setup state."),ec=l(),ne=o("div"),m(Ne.$$.fragment),tc=l(),rr=o("p"),rc=t(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),ac=l(),se=o("div"),m(qe.$$.fragment),oc=l(),X=o("p"),cc=t("Use "),ar=o("code"),nc=t("accelerator.backward(loss)"),sc=t(" in lieu of "),or=o("code"),lc=t("loss.backward()"),ic=t("."),dc=l(),le=o("div"),m(Se.$$.fragment),pc=l(),Ve=o("p"),hc=t("Should be used in place of "),cr=o("code"),mc=t("torch.nn.utils.clip_grad_norm_"),fc=t("."),gc=l(),ie=o("div"),m(Re.$$.fragment),uc=l(),Ge=o("p"),_c=t("Should be used in place of "),nr=o("code"),vc=t("torch.nn.utils.clip_grad_value_"),bc=t("."),$c=l(),de=o("div"),m(Me.$$.fragment),yc=l(),sr=o("p"),Ec=t("Runs any special end training behaviors, such as stopping trackers"),wc=l(),pe=o("div"),m(We.$$.fragment),Ac=l(),lr=o("p"),xc=t(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Dc=l(),z=o("div"),m(Fe.$$.fragment),kc=l(),He=o("p"),Tc=t("Gather the values in "),ir=o("em"),Lc=t("tensor"),Pc=t(` accross all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Ic=l(),dr=o("p"),Oc=t(`Note:
This gather happens in all processes.`),Uc=l(),he=o("div"),m(Ke.$$.fragment),Cc=l(),Xe=o("p"),jc=t("Initializes a run for all trackers stored in "),pr=o("code"),zc=t("self.log_with"),Nc=t(", potentially with starting configurations"),qc=l(),me=o("div"),m(Ye.$$.fragment),Sc=l(),hr=o("p"),Vc=t("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Rc=l(),N=o("div"),m(Be.$$.fragment),Gc=l(),mr=o("p"),Mc=t("Lets the local main process go inside a with block."),Wc=l(),fr=o("p"),Fc=t("The other processes will enter the with block after the main process exits."),Hc=l(),fe=o("div"),m(Je.$$.fragment),Kc=l(),Y=o("p"),Xc=t("Logs "),gr=o("code"),Yc=t("values"),Bc=t(" to all stored trackers in "),ur=o("code"),Jc=t("self.trackers"),Qc=t("."),Zc=l(),q=o("div"),m(Qe.$$.fragment),en=l(),_r=o("p"),tn=t("Lets the main process go first inside a with block."),rn=l(),vr=o("p"),an=t("The other processes will enter the with block after the main process exits."),on=l(),ge=o("div"),m(Ze.$$.fragment),cn=l(),br=o("p"),nn=t(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),sn=l(),O=o("div"),m(et.$$.fragment),ln=l(),tt=o("p"),dn=t("Prepare all objects passed in "),$r=o("code"),pn=t("args"),hn=t(` for distributed training and mixed precision, then return them in the same
order.`),mn=l(),yr=o("p"),fn=t("Accepts the following type of objects:"),gn=l(),B=o("ul"),Et=o("li"),Er=o("code"),un=t("torch.utils.data.DataLoader"),_n=t(": PyTorch Dataloader"),vn=l(),wt=o("li"),wr=o("code"),bn=t("torch.nn.Module"),$n=t(": PyTorch Module"),yn=l(),At=o("li"),Ar=o("code"),En=t("torch.optim.Optimizer"),wn=t(": PyTorch Optimizer"),An=l(),ue=o("div"),m(rt.$$.fragment),xn=l(),at=o("p"),Dn=t("Use in replacement of "),xr=o("code"),kn=t("print()"),Tn=t(" to only print once per server."),Ln=l(),U=o("div"),m(ot.$$.fragment),Pn=l(),j=o("p"),In=t("Makes note of "),Dr=o("code"),On=t("objects"),Un=t(" and will save or load them in during "),kr=o("code"),Cn=t("save_state"),jn=t(" or "),Tr=o("code"),zn=t("load_state"),Nn=t("."),qn=l(),Lr=o("p"),Sn=t(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Vn=l(),m(_e.$$.fragment),Rn=l(),ve=o("div"),m(ct.$$.fragment),Gn=l(),nt=o("p"),Mn=t("Save the object passed to disk once per machine. Use in place of "),Pr=o("code"),Wn=t("torch.save"),Fn=t("."),Hn=l(),be=o("div"),m(st.$$.fragment),Kn=l(),Ir=o("p"),Xn=t("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Yn=l(),$e=o("div"),m(lt.$$.fragment),Bn=l(),Or=o("p"),Jn=t("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Qn=l(),ye=o("div"),m(it.$$.fragment),Zn=l(),J=o("p"),es=t("Unwraps the "),Ur=o("code"),ts=t("model"),rs=t(" from the additional layer possible added by "),xt=o("a"),as=t("prepare()"),os=t(`. Useful before saving
the model.`),cs=l(),Ee=o("div"),m(dt.$$.fragment),ns=l(),Cr=o("p"),ss=t(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(s){const E=Dl('[data-svelte="svelte-1phssyn"]',document.head);b=c(E,"META",{name:!0,content:!0}),E.forEach(a),Q=i(s),A=c(s,"H1",{class:!0});var pt=n(A);P=c(pt,"A",{id:!0,class:!0,href:!0});var ps=n(P);R=c(ps,"SPAN",{});var hs=n(R);f(k.$$.fragment,hs),hs.forEach(a),ps.forEach(a),ke=i(pt),G=c(pt,"SPAN",{});var ms=n(G);M=r(ms,"Accelerator"),ms.forEach(a),pt.forEach(a),Z=i(s),I=c(s,"P",{});var Mr=n(I);W=r(Mr,"The "),w=c(Mr,"A",{href:!0});var fs=n(w);ht=r(fs,"Accelerator"),fs.forEach(a),mt=r(Mr,` is the main class provided by \u{1F917} Accelerate. It serves at the main entrypoint for
the API. To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate juste:`),Mr.forEach(a),Te=i(s),x=c(s,"OL",{});var S=n(x);F=c(S,"LI",{});var Dt=n(F);wa=r(Dt,"Initialize an "),ft=c(Dt,"A",{href:!0});var gs=n(ft);Aa=r(gs,"Accelerator"),gs.forEach(a),xa=r(Dt," object (that we will call "),zt=c(Dt,"CODE",{});var us=n(zt);Da=r(us,"accelerator"),us.forEach(a),ka=r(Dt,` in the rest of this
page) as early as possible in your script.`),Dt.forEach(a),Ta=i(S),Le=c(S,"LI",{});var Wr=n(Le);La=r(Wr,"Pass along your model(s), optimizer(s), dataloader(s) to the "),gt=c(Wr,"A",{href:!0});var _s=n(gt);Pa=r(_s,"prepare()"),_s.forEach(a),Ia=r(Wr," method."),Wr.forEach(a),Oa=i(S),C=c(S,"LI",{});var we=n(C);Ua=r(we,"(Optional but best practice) Remove all the "),Nt=c(we,"CODE",{});var vs=n(Nt);Ca=r(vs,".cuda()"),vs.forEach(a),ja=r(we," or "),qt=c(we,"CODE",{});var bs=n(qt);za=r(bs,".to(device)"),bs.forEach(a),Na=r(we,` in your code and let the
`),St=c(we,"CODE",{});var $s=n(St);qa=r($s,"accelerator"),$s.forEach(a),Sa=r(we," handle device placement for you."),we.forEach(a),Va=i(S),H=c(S,"LI",{});var kt=n(H);Ra=r(kt,"Replace the "),Vt=c(kt,"CODE",{});var ys=n(Vt);Ga=r(ys,"loss.backward()"),ys.forEach(a),Ma=r(kt," in your code by "),Rt=c(kt,"CODE",{});var Es=n(Rt);Wa=r(Es,"accelerator.backward(loss)"),Es.forEach(a),Fa=r(kt,"."),kt.forEach(a),Ha=i(S),Pe=c(S,"LI",{});var Fr=n(Pe);Ka=r(Fr,`(Optional, when using distributed evaluation) Gather your predictions and labelsbefore storing them or using them
for metric computation using `),ut=c(Fr,"A",{href:!0});var ws=n(ut);Xa=r(ws,"gather()"),ws.forEach(a),Ya=r(Fr,"."),Fr.forEach(a),S.forEach(a),Sr=i(s),ee=c(s,"P",{});var Hr=n(ee);Ba=r(Hr,`This is all what is needed in most cases. For more advanced case or a nicer experience here are the functions you
should search for and replace by the corresponding methods of your `),Gt=c(Hr,"CODE",{});var As=n(Gt);Ja=r(As,"accelerator"),As.forEach(a),Qa=r(Hr,":"),Hr.forEach(a),Vr=i(s),y=c(s,"UL",{});var D=n(y);te=c(D,"LI",{});var jr=n(te);Mt=c(jr,"CODE",{});var xs=n(Mt);Za=r(xs,"print"),xs.forEach(a),eo=r(jr," statements should be replaced by "),_t=c(jr,"A",{href:!0});var Ds=n(_t);to=r(Ds,"print()"),Ds.forEach(a),ro=r(jr,` to be only printed once per
process.`),jr.forEach(a),ao=i(D),Ie=c(D,"LI",{});var Kr=n(Ie);oo=r(Kr,"Use "),Wt=c(Kr,"CODE",{});var ks=n(Wt);co=r(ks,"is_local_main_process()"),ks.forEach(a),no=r(Kr,"for statements that should be executed once per server."),Kr.forEach(a),so=i(D),Oe=c(D,"LI",{});var Xr=n(Oe);lo=r(Xr,"Use "),Ft=c(Xr,"CODE",{});var Ts=n(Ft);io=r(Ts,"is_main_process()"),Ts.forEach(a),po=r(Xr,"for statements that should be executed once only."),Xr.forEach(a),ho=i(D),Ue=c(D,"LI",{});var Yr=n(Ue);mo=r(Yr,"Use "),vt=c(Yr,"A",{href:!0});var Ls=n(vt);fo=r(Ls,"wait_for_everyone()"),Ls.forEach(a),go=r(Yr,` to make sure all processes join that point before continuing
(useful before a model save for instance).`),Yr.forEach(a),uo=i(D),Ce=c(D,"LI",{});var Br=n(Ce);_o=r(Br,"Use "),bt=c(Br,"A",{href:!0});var Ps=n(bt);vo=r(Ps,"unwrap_model()"),Ps.forEach(a),bo=r(Br," to unwrap your model before saving it."),Br.forEach(a),$o=i(D),K=c(D,"LI",{});var Tt=n(K);yo=r(Tt,"Use "),$t=c(Tt,"A",{href:!0});var Is=n($t);Eo=r(Is,"save()"),Is.forEach(a),wo=r(Tt," instead of "),Ht=c(Tt,"CODE",{});var Os=n(Ht);Ao=r(Os,"torch.save"),Os.forEach(a),xo=r(Tt,"."),Tt.forEach(a),Do=i(D),T=c(D,"LI",{});var V=n(T);ko=r(V,"Use "),re=c(V,"A",{href:!0});var Jr=n(re);To=r(Jr,"clip"),Kt=c(Jr,"EM",{});var Us=n(Kt);Lo=r(Us,"grad_norm"),Us.forEach(a),Po=r(Jr,"()"),Jr.forEach(a),Io=r(V," instead of "),Xt=c(V,"CODE",{});var Cs=n(Xt);Oo=r(Cs,"torch.nn.utils.clip_grad_norm_"),Cs.forEach(a),Uo=r(V,` and
`),ae=c(V,"A",{href:!0});var Qr=n(ae);Co=r(Qr,"clip"),Yt=c(Qr,"EM",{});var js=n(Yt);jo=r(js,"grad_value"),js.forEach(a),zo=r(Qr,"()"),Qr.forEach(a),No=r(V," instead of "),Bt=c(V,"CODE",{});var zs=n(Bt);qo=r(zs,"torch.nn.utils.clip_grad_value_"),zs.forEach(a),So=r(V,"."),V.forEach(a),D.forEach(a),Rr=i(s),d=c(s,"DIV",{class:!0});var p=n(d);f(je.$$.fragment,p),Vo=i(p),Jt=c(p,"P",{});var Ns=n(Jt);Ro=r(Ns,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Ns.forEach(a),Go=i(p),Qt=c(p,"P",{});var qs=n(Qt);Mo=r(qs,"Attributes"),qs.forEach(a),Wo=i(p),ze=c(p,"UL",{});var Zr=n(ze);oe=c(Zr,"LI",{});var zr=n(oe);Zt=c(zr,"STRONG",{});var Ss=n(Zt);Fo=r(Ss,"device"),Ss.forEach(a),Ho=r(zr," ("),er=c(zr,"CODE",{});var Vs=n(er);Ko=r(Vs,"torch.device"),Vs.forEach(a),Xo=r(zr,") \u2014 The device to use."),zr.forEach(a),Yo=i(Zr),ce=c(Zr,"LI",{});var Nr=n(ce);tr=c(Nr,"STRONG",{});var Rs=n(tr);Bo=r(Rs,"state"),Rs.forEach(a),Jo=r(Nr," ("),yt=c(Nr,"A",{href:!0});var Gs=n(yt);Qo=r(Gs,"AcceleratorState"),Gs.forEach(a),Zo=r(Nr,") \u2014 The distributed setup state."),Nr.forEach(a),Zr.forEach(a),ec=i(p),ne=c(p,"DIV",{class:!0});var ea=n(ne);f(Ne.$$.fragment,ea),tc=i(ea),rr=c(ea,"P",{});var Ms=n(rr);rc=r(Ms,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Ms.forEach(a),ea.forEach(a),ac=i(p),se=c(p,"DIV",{class:!0});var ta=n(se);f(qe.$$.fragment,ta),oc=i(ta),X=c(ta,"P",{});var Lt=n(X);cc=r(Lt,"Use "),ar=c(Lt,"CODE",{});var Ws=n(ar);nc=r(Ws,"accelerator.backward(loss)"),Ws.forEach(a),sc=r(Lt," in lieu of "),or=c(Lt,"CODE",{});var Fs=n(or);lc=r(Fs,"loss.backward()"),Fs.forEach(a),ic=r(Lt,"."),Lt.forEach(a),ta.forEach(a),dc=i(p),le=c(p,"DIV",{class:!0});var ra=n(le);f(Se.$$.fragment,ra),pc=i(ra),Ve=c(ra,"P",{});var aa=n(Ve);hc=r(aa,"Should be used in place of "),cr=c(aa,"CODE",{});var Hs=n(cr);mc=r(Hs,"torch.nn.utils.clip_grad_norm_"),Hs.forEach(a),fc=r(aa,"."),aa.forEach(a),ra.forEach(a),gc=i(p),ie=c(p,"DIV",{class:!0});var oa=n(ie);f(Re.$$.fragment,oa),uc=i(oa),Ge=c(oa,"P",{});var ca=n(Ge);_c=r(ca,"Should be used in place of "),nr=c(ca,"CODE",{});var Ks=n(nr);vc=r(Ks,"torch.nn.utils.clip_grad_value_"),Ks.forEach(a),bc=r(ca,"."),ca.forEach(a),oa.forEach(a),$c=i(p),de=c(p,"DIV",{class:!0});var na=n(de);f(Me.$$.fragment,na),yc=i(na),sr=c(na,"P",{});var Xs=n(sr);Ec=r(Xs,"Runs any special end training behaviors, such as stopping trackers"),Xs.forEach(a),na.forEach(a),wc=i(p),pe=c(p,"DIV",{class:!0});var sa=n(pe);f(We.$$.fragment,sa),Ac=i(sa),lr=c(sa,"P",{});var Ys=n(lr);xc=r(Ys,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Ys.forEach(a),sa.forEach(a),Dc=i(p),z=c(p,"DIV",{class:!0});var Pt=n(z);f(Fe.$$.fragment,Pt),kc=i(Pt),He=c(Pt,"P",{});var la=n(He);Tc=r(la,"Gather the values in "),ir=c(la,"EM",{});var Bs=n(ir);Lc=r(Bs,"tensor"),Bs.forEach(a),Pc=r(la,` accross all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),la.forEach(a),Ic=i(Pt),dr=c(Pt,"P",{});var Js=n(dr);Oc=r(Js,`Note:
This gather happens in all processes.`),Js.forEach(a),Pt.forEach(a),Uc=i(p),he=c(p,"DIV",{class:!0});var ia=n(he);f(Ke.$$.fragment,ia),Cc=i(ia),Xe=c(ia,"P",{});var da=n(Xe);jc=r(da,"Initializes a run for all trackers stored in "),pr=c(da,"CODE",{});var Qs=n(pr);zc=r(Qs,"self.log_with"),Qs.forEach(a),Nc=r(da,", potentially with starting configurations"),da.forEach(a),ia.forEach(a),qc=i(p),me=c(p,"DIV",{class:!0});var pa=n(me);f(Ye.$$.fragment,pa),Sc=i(pa),hr=c(pa,"P",{});var Zs=n(hr);Vc=r(Zs,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Zs.forEach(a),pa.forEach(a),Rc=i(p),N=c(p,"DIV",{class:!0});var It=n(N);f(Be.$$.fragment,It),Gc=i(It),mr=c(It,"P",{});var el=n(mr);Mc=r(el,"Lets the local main process go inside a with block."),el.forEach(a),Wc=i(It),fr=c(It,"P",{});var tl=n(fr);Fc=r(tl,"The other processes will enter the with block after the main process exits."),tl.forEach(a),It.forEach(a),Hc=i(p),fe=c(p,"DIV",{class:!0});var ha=n(fe);f(Je.$$.fragment,ha),Kc=i(ha),Y=c(ha,"P",{});var Ot=n(Y);Xc=r(Ot,"Logs "),gr=c(Ot,"CODE",{});var rl=n(gr);Yc=r(rl,"values"),rl.forEach(a),Bc=r(Ot," to all stored trackers in "),ur=c(Ot,"CODE",{});var al=n(ur);Jc=r(al,"self.trackers"),al.forEach(a),Qc=r(Ot,"."),Ot.forEach(a),ha.forEach(a),Zc=i(p),q=c(p,"DIV",{class:!0});var Ut=n(q);f(Qe.$$.fragment,Ut),en=i(Ut),_r=c(Ut,"P",{});var ol=n(_r);tn=r(ol,"Lets the main process go first inside a with block."),ol.forEach(a),rn=i(Ut),vr=c(Ut,"P",{});var cl=n(vr);an=r(cl,"The other processes will enter the with block after the main process exits."),cl.forEach(a),Ut.forEach(a),on=i(p),ge=c(p,"DIV",{class:!0});var ma=n(ge);f(Ze.$$.fragment,ma),cn=i(ma),br=c(ma,"P",{});var nl=n(br);nn=r(nl,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),nl.forEach(a),ma.forEach(a),sn=i(p),O=c(p,"DIV",{class:!0});var Ae=n(O);f(et.$$.fragment,Ae),ln=i(Ae),tt=c(Ae,"P",{});var fa=n(tt);dn=r(fa,"Prepare all objects passed in "),$r=c(fa,"CODE",{});var sl=n($r);pn=r(sl,"args"),sl.forEach(a),hn=r(fa,` for distributed training and mixed precision, then return them in the same
order.`),fa.forEach(a),mn=i(Ae),yr=c(Ae,"P",{});var ll=n(yr);fn=r(ll,"Accepts the following type of objects:"),ll.forEach(a),gn=i(Ae),B=c(Ae,"UL",{});var Ct=n(B);Et=c(Ct,"LI",{});var ls=n(Et);Er=c(ls,"CODE",{});var il=n(Er);un=r(il,"torch.utils.data.DataLoader"),il.forEach(a),_n=r(ls,": PyTorch Dataloader"),ls.forEach(a),vn=i(Ct),wt=c(Ct,"LI",{});var is=n(wt);wr=c(is,"CODE",{});var dl=n(wr);bn=r(dl,"torch.nn.Module"),dl.forEach(a),$n=r(is,": PyTorch Module"),is.forEach(a),yn=i(Ct),At=c(Ct,"LI",{});var ds=n(At);Ar=c(ds,"CODE",{});var pl=n(Ar);En=r(pl,"torch.optim.Optimizer"),pl.forEach(a),wn=r(ds,": PyTorch Optimizer"),ds.forEach(a),Ct.forEach(a),Ae.forEach(a),An=i(p),ue=c(p,"DIV",{class:!0});var ga=n(ue);f(rt.$$.fragment,ga),xn=i(ga),at=c(ga,"P",{});var ua=n(at);Dn=r(ua,"Use in replacement of "),xr=c(ua,"CODE",{});var hl=n(xr);kn=r(hl,"print()"),hl.forEach(a),Tn=r(ua," to only print once per server."),ua.forEach(a),ga.forEach(a),Ln=i(p),U=c(p,"DIV",{class:!0});var xe=n(U);f(ot.$$.fragment,xe),Pn=i(xe),j=c(xe,"P",{});var De=n(j);In=r(De,"Makes note of "),Dr=c(De,"CODE",{});var ml=n(Dr);On=r(ml,"objects"),ml.forEach(a),Un=r(De," and will save or load them in during "),kr=c(De,"CODE",{});var fl=n(kr);Cn=r(fl,"save_state"),fl.forEach(a),jn=r(De," or "),Tr=c(De,"CODE",{});var gl=n(Tr);zn=r(gl,"load_state"),gl.forEach(a),Nn=r(De,"."),De.forEach(a),qn=i(xe),Lr=c(xe,"P",{});var ul=n(Lr);Sn=r(ul,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),ul.forEach(a),Vn=i(xe),f(_e.$$.fragment,xe),xe.forEach(a),Rn=i(p),ve=c(p,"DIV",{class:!0});var _a=n(ve);f(ct.$$.fragment,_a),Gn=i(_a),nt=c(_a,"P",{});var va=n(nt);Mn=r(va,"Save the object passed to disk once per machine. Use in place of "),Pr=c(va,"CODE",{});var _l=n(Pr);Wn=r(_l,"torch.save"),_l.forEach(a),Fn=r(va,"."),va.forEach(a),_a.forEach(a),Hn=i(p),be=c(p,"DIV",{class:!0});var ba=n(be);f(st.$$.fragment,ba),Kn=i(ba),Ir=c(ba,"P",{});var vl=n(Ir);Xn=r(vl,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),vl.forEach(a),ba.forEach(a),Yn=i(p),$e=c(p,"DIV",{class:!0});var $a=n($e);f(lt.$$.fragment,$a),Bn=i($a),Or=c($a,"P",{});var bl=n(Or);Jn=r(bl,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),bl.forEach(a),$a.forEach(a),Qn=i(p),ye=c(p,"DIV",{class:!0});var ya=n(ye);f(it.$$.fragment,ya),Zn=i(ya),J=c(ya,"P",{});var jt=n(J);es=r(jt,"Unwraps the "),Ur=c(jt,"CODE",{});var $l=n(Ur);ts=r($l,"model"),$l.forEach(a),rs=r(jt," from the additional layer possible added by "),xt=c(jt,"A",{href:!0});var yl=n(xt);as=r(yl,"prepare()"),yl.forEach(a),os=r(jt,`. Useful before saving
the model.`),jt.forEach(a),ya.forEach(a),cs=i(p),Ee=c(p,"DIV",{class:!0});var Ea=n(Ee);f(dt.$$.fragment,Ea),ns=i(Ea),Cr=c(Ea,"P",{});var El=n(Cr);ss=r(El,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),El.forEach(a),Ea.forEach(a),p.forEach(a),this.h()},h(){h(b,"name","hf:doc:metadata"),h(b,"content",JSON.stringify(Ol)),h(P,"id","accelerate.Accelerator"),h(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(P,"href","#accelerate.Accelerator"),h(A,"class","relative group"),h(w,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator"),h(ft,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator"),h(gt,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator.prepare"),h(ut,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator.gather"),h(_t,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator.print"),h(vt,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator.wait_for_everyone"),h(bt,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator.unwrap_model"),h($t,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator.save"),h(re,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator.clip_grad_norm_"),h(ae,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator.clip_grad_value_"),h(yt,"href","/docs/accelerate/pr_293/en/internal#accelerate.state.AcceleratorState"),h(ne,"class","docstring"),h(se,"class","docstring"),h(le,"class","docstring"),h(ie,"class","docstring"),h(de,"class","docstring"),h(pe,"class","docstring"),h(z,"class","docstring"),h(he,"class","docstring"),h(me,"class","docstring"),h(N,"class","docstring"),h(fe,"class","docstring"),h(q,"class","docstring"),h(ge,"class","docstring"),h(O,"class","docstring"),h(ue,"class","docstring"),h(U,"class","docstring"),h(ve,"class","docstring"),h(be,"class","docstring"),h($e,"class","docstring"),h(xt,"href","/docs/accelerate/pr_293/en/accelerator#accelerate.Accelerator.prepare"),h(ye,"class","docstring"),h(Ee,"class","docstring"),h(d,"class","docstring")},m(s,E){e(document.head,b),L(s,Q,E),L(s,A,E),e(A,P),e(P,R),g(k,R,null),e(A,ke),e(A,G),e(G,M),L(s,Z,E),L(s,I,E),e(I,W),e(I,w),e(w,ht),e(I,mt),L(s,Te,E),L(s,x,E),e(x,F),e(F,wa),e(F,ft),e(ft,Aa),e(F,xa),e(F,zt),e(zt,Da),e(F,ka),e(x,Ta),e(x,Le),e(Le,La),e(Le,gt),e(gt,Pa),e(Le,Ia),e(x,Oa),e(x,C),e(C,Ua),e(C,Nt),e(Nt,Ca),e(C,ja),e(C,qt),e(qt,za),e(C,Na),e(C,St),e(St,qa),e(C,Sa),e(x,Va),e(x,H),e(H,Ra),e(H,Vt),e(Vt,Ga),e(H,Ma),e(H,Rt),e(Rt,Wa),e(H,Fa),e(x,Ha),e(x,Pe),e(Pe,Ka),e(Pe,ut),e(ut,Xa),e(Pe,Ya),L(s,Sr,E),L(s,ee,E),e(ee,Ba),e(ee,Gt),e(Gt,Ja),e(ee,Qa),L(s,Vr,E),L(s,y,E),e(y,te),e(te,Mt),e(Mt,Za),e(te,eo),e(te,_t),e(_t,to),e(te,ro),e(y,ao),e(y,Ie),e(Ie,oo),e(Ie,Wt),e(Wt,co),e(Ie,no),e(y,so),e(y,Oe),e(Oe,lo),e(Oe,Ft),e(Ft,io),e(Oe,po),e(y,ho),e(y,Ue),e(Ue,mo),e(Ue,vt),e(vt,fo),e(Ue,go),e(y,uo),e(y,Ce),e(Ce,_o),e(Ce,bt),e(bt,vo),e(Ce,bo),e(y,$o),e(y,K),e(K,yo),e(K,$t),e($t,Eo),e(K,wo),e(K,Ht),e(Ht,Ao),e(K,xo),e(y,Do),e(y,T),e(T,ko),e(T,re),e(re,To),e(re,Kt),e(Kt,Lo),e(re,Po),e(T,Io),e(T,Xt),e(Xt,Oo),e(T,Uo),e(T,ae),e(ae,Co),e(ae,Yt),e(Yt,jo),e(ae,zo),e(T,No),e(T,Bt),e(Bt,qo),e(T,So),L(s,Rr,E),L(s,d,E),g(je,d,null),e(d,Vo),e(d,Jt),e(Jt,Ro),e(d,Go),e(d,Qt),e(Qt,Mo),e(d,Wo),e(d,ze),e(ze,oe),e(oe,Zt),e(Zt,Fo),e(oe,Ho),e(oe,er),e(er,Ko),e(oe,Xo),e(ze,Yo),e(ze,ce),e(ce,tr),e(tr,Bo),e(ce,Jo),e(ce,yt),e(yt,Qo),e(ce,Zo),e(d,ec),e(d,ne),g(Ne,ne,null),e(ne,tc),e(ne,rr),e(rr,rc),e(d,ac),e(d,se),g(qe,se,null),e(se,oc),e(se,X),e(X,cc),e(X,ar),e(ar,nc),e(X,sc),e(X,or),e(or,lc),e(X,ic),e(d,dc),e(d,le),g(Se,le,null),e(le,pc),e(le,Ve),e(Ve,hc),e(Ve,cr),e(cr,mc),e(Ve,fc),e(d,gc),e(d,ie),g(Re,ie,null),e(ie,uc),e(ie,Ge),e(Ge,_c),e(Ge,nr),e(nr,vc),e(Ge,bc),e(d,$c),e(d,de),g(Me,de,null),e(de,yc),e(de,sr),e(sr,Ec),e(d,wc),e(d,pe),g(We,pe,null),e(pe,Ac),e(pe,lr),e(lr,xc),e(d,Dc),e(d,z),g(Fe,z,null),e(z,kc),e(z,He),e(He,Tc),e(He,ir),e(ir,Lc),e(He,Pc),e(z,Ic),e(z,dr),e(dr,Oc),e(d,Uc),e(d,he),g(Ke,he,null),e(he,Cc),e(he,Xe),e(Xe,jc),e(Xe,pr),e(pr,zc),e(Xe,Nc),e(d,qc),e(d,me),g(Ye,me,null),e(me,Sc),e(me,hr),e(hr,Vc),e(d,Rc),e(d,N),g(Be,N,null),e(N,Gc),e(N,mr),e(mr,Mc),e(N,Wc),e(N,fr),e(fr,Fc),e(d,Hc),e(d,fe),g(Je,fe,null),e(fe,Kc),e(fe,Y),e(Y,Xc),e(Y,gr),e(gr,Yc),e(Y,Bc),e(Y,ur),e(ur,Jc),e(Y,Qc),e(d,Zc),e(d,q),g(Qe,q,null),e(q,en),e(q,_r),e(_r,tn),e(q,rn),e(q,vr),e(vr,an),e(d,on),e(d,ge),g(Ze,ge,null),e(ge,cn),e(ge,br),e(br,nn),e(d,sn),e(d,O),g(et,O,null),e(O,ln),e(O,tt),e(tt,dn),e(tt,$r),e($r,pn),e(tt,hn),e(O,mn),e(O,yr),e(yr,fn),e(O,gn),e(O,B),e(B,Et),e(Et,Er),e(Er,un),e(Et,_n),e(B,vn),e(B,wt),e(wt,wr),e(wr,bn),e(wt,$n),e(B,yn),e(B,At),e(At,Ar),e(Ar,En),e(At,wn),e(d,An),e(d,ue),g(rt,ue,null),e(ue,xn),e(ue,at),e(at,Dn),e(at,xr),e(xr,kn),e(at,Tn),e(d,Ln),e(d,U),g(ot,U,null),e(U,Pn),e(U,j),e(j,In),e(j,Dr),e(Dr,On),e(j,Un),e(j,kr),e(kr,Cn),e(j,jn),e(j,Tr),e(Tr,zn),e(j,Nn),e(U,qn),e(U,Lr),e(Lr,Sn),e(U,Vn),g(_e,U,null),e(d,Rn),e(d,ve),g(ct,ve,null),e(ve,Gn),e(ve,nt),e(nt,Mn),e(nt,Pr),e(Pr,Wn),e(nt,Fn),e(d,Hn),e(d,be),g(st,be,null),e(be,Kn),e(be,Ir),e(Ir,Xn),e(d,Yn),e(d,$e),g(lt,$e,null),e($e,Bn),e($e,Or),e(Or,Jn),e(d,Qn),e(d,ye),g(it,ye,null),e(ye,Zn),e(ye,J),e(J,es),e(J,Ur),e(Ur,ts),e(J,rs),e(J,xt),e(xt,as),e(J,os),e(d,cs),e(d,Ee),g(dt,Ee,null),e(Ee,ns),e(Ee,Cr),e(Cr,ss),Gr=!0},p(s,[E]){const pt={};E&2&&(pt.$$scope={dirty:E,ctx:s}),_e.$set(pt)},i(s){Gr||(u(k.$$.fragment,s),u(je.$$.fragment,s),u(Ne.$$.fragment,s),u(qe.$$.fragment,s),u(Se.$$.fragment,s),u(Re.$$.fragment,s),u(Me.$$.fragment,s),u(We.$$.fragment,s),u(Fe.$$.fragment,s),u(Ke.$$.fragment,s),u(Ye.$$.fragment,s),u(Be.$$.fragment,s),u(Je.$$.fragment,s),u(Qe.$$.fragment,s),u(Ze.$$.fragment,s),u(et.$$.fragment,s),u(rt.$$.fragment,s),u(ot.$$.fragment,s),u(_e.$$.fragment,s),u(ct.$$.fragment,s),u(st.$$.fragment,s),u(lt.$$.fragment,s),u(it.$$.fragment,s),u(dt.$$.fragment,s),Gr=!0)},o(s){_(k.$$.fragment,s),_(je.$$.fragment,s),_(Ne.$$.fragment,s),_(qe.$$.fragment,s),_(Se.$$.fragment,s),_(Re.$$.fragment,s),_(Me.$$.fragment,s),_(We.$$.fragment,s),_(Fe.$$.fragment,s),_(Ke.$$.fragment,s),_(Ye.$$.fragment,s),_(Be.$$.fragment,s),_(Je.$$.fragment,s),_(Qe.$$.fragment,s),_(Ze.$$.fragment,s),_(et.$$.fragment,s),_(rt.$$.fragment,s),_(ot.$$.fragment,s),_(_e.$$.fragment,s),_(ct.$$.fragment,s),_(st.$$.fragment,s),_(lt.$$.fragment,s),_(it.$$.fragment,s),_(dt.$$.fragment,s),Gr=!1},d(s){a(b),s&&a(Q),s&&a(A),v(k),s&&a(Z),s&&a(I),s&&a(Te),s&&a(x),s&&a(Sr),s&&a(ee),s&&a(Vr),s&&a(y),s&&a(Rr),s&&a(d),v(je),v(Ne),v(qe),v(Se),v(Re),v(Me),v(We),v(Fe),v(Ke),v(Ye),v(Be),v(Je),v(Qe),v(Ze),v(et),v(rt),v(ot),v(_e),v(ct),v(st),v(lt),v(it),v(dt)}}}const Ol={local:"accelerate.Accelerator",title:"Accelerator"};function Ul(qr){return kl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ql extends wl{constructor(b){super();Al(this,b,Ul,Il,xl,{})}}export{ql as default,Ol as metadata};
