import{S as ac,i as rc,s as oc,e as r,k as l,w as u,t as n,M as sc,c as o,d as a,m as i,a as s,x as m,h as c,b as d,F as t,g as p,y as g,q as v,o as _,B as b,v as nc}from"../chunks/vendor-19e06bd2.js";import{T as Vs}from"../chunks/Tip-f0fa2d82.js";import{D as E}from"../chunks/Docstring-395e5a9c.js";import{I as U}from"../chunks/IconCopyLink-3c713d38.js";function cc(le){let f,S,$,y,k;return{c(){f=r("p"),S=n("This does not support "),$=r("code"),y=n("BatchSampler"),k=n(" with varying batch size yet.")},l(w){f=o(w,"P",{});var D=s(f);S=c(D,"This does not support "),$=o(D,"CODE",{});var L=s($);y=c(L,"BatchSampler"),L.forEach(a),k=c(D," with varying batch size yet."),D.forEach(a)},m(w,D){p(w,f,D),t(f,S),t(f,$),t($,y),t(f,k)},d(w){w&&a(f)}}}function lc(le){let f,S,$,y,k;return{c(){f=r("p"),S=n("This does not support "),$=r("code"),y=n("BatchSampler"),k=n(" with varying batch size yet.")},l(w){f=o(w,"P",{});var D=s(f);S=c(D,"This does not support "),$=o(D,"CODE",{});var L=s($);y=c(L,"BatchSampler"),L.forEach(a),k=c(D," with varying batch size yet."),D.forEach(a)},m(w,D){p(w,f,D),t(f,S),t(f,$),t($,y),t(f,k)},d(w){w&&a(f)}}}function ic(le){let f,S;return{c(){f=r("p"),S=n("Make sure all processes will reach this instruction otherwise one of your processes will hang forever.")},l($){f=o($,"P",{});var y=s(f);S=c(y,"Make sure all processes will reach this instruction otherwise one of your processes will hang forever."),y.forEach(a)},m($,y){p($,f,y),t(f,S)},d($){$&&a(f)}}}function dc(le){let f,S,$,y,k,w,D,L,yr,Ea,q,ie,yt,Ae,wr,wt,Er,Da,F,Ie,Dr,Et,Sr,Sa,R,de,Dt,ze,Tr,St,xr,Ta,he,kr,Tt,Pr,Ar,xa,P,Le,Ir,Ne,zr,xt,Lr,Nr,Or,W,Cr,kt,Gr,Ur,Pt,Br,Vr,qr,pe,ka,H,fe,At,Oe,Fr,It,Rr,Pa,M,Ce,Wr,Ge,Hr,zt,Mr,jr,Aa,j,ue,Lt,Ue,Xr,Nt,Jr,Ia,N,Be,Kr,O,Qr,Ot,Yr,Zr,Ct,eo,to,Gt,ao,ro,oo,me,za,X,ge,Ut,Ve,so,Bt,no,La,J,qe,co,T,lo,Vt,io,ho,qt,po,fo,Ft,uo,mo,Rt,go,vo,Wt,_o,bo,Na,K,ve,Ht,Fe,$o,Mt,yo,Oa,Q,_e,jt,Re,wo,Xt,Eo,Ca,Y,We,Do,Z,So,He,To,xo,Jt,ko,Po,Ga,ee,be,Kt,Me,Ao,Qt,Io,Ua,A,je,zo,Yt,Lo,No,Zt,Oo,Co,I,ht,ea,Go,Uo,Bo,pt,ta,Vo,qo,Fo,ft,aa,Ro,Wo,Ho,ut,ra,Mo,jo,Xo,mt,oa,Jo,Ko,Ba,te,$e,sa,Xe,Qo,na,Yo,Va,x,Je,Zo,ca,es,ts,ye,Ke,as,la,rs,os,we,Qe,ss,ae,ns,ia,cs,ls,da,is,ds,hs,Ee,Ye,ps,Ze,fs,ha,us,ms,qa,re,De,pa,et,gs,fa,vs,Fa,oe,tt,_s,ua,bs,Ra,se,at,$s,ma,ys,Wa,ne,rt,ws,ga,Es,Ha,ce,ot,Ds,C,Ss,va,Ts,xs,_a,ks,Ps,ba,As,Is,Ma,st,nt,ja,ct,lt,Xa,G,it,zs,$a,Ls,Ns,Se,Ja;return w=new U({}),Ae=new U({}),Ie=new E({props:{name:"class accelerate.optimizer.AcceleratedOptimizer",anchor:"accelerate.optimizer.AcceleratedOptimizer",parameters:[{name:"optimizer",val:""},{name:"device_placement",val:" = True"},{name:"scaler",val:" = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/optimizer.py#L39",parametersDescription:[{anchor:"accelerate.optimizer.AcceleratedOptimizer.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.optimizer.Optimizer</code>) &#x2014;
The optimizer to wrap.`,name:"optimizer"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the optimizer should handle device placement. If so, it will place the state dictionary of
<code>optimizer</code> on the right device.`,name:"device_placement"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.scaler",description:`<strong>scaler</strong> (<code>torch.cuda.amp.grad_scaler.GradScaler</code>, <em>optional</em>) &#x2014;
The scaler to use in the step function if training with mixed precision.`,name:"scaler"}]}}),ze=new U({}),Le=new E({props:{name:"accelerate.data_loader.prepare_data_loader",anchor:"accelerate.data_loader.prepare_data_loader",parameters:[{name:"dataloader",val:": DataLoader"},{name:"device",val:": typing.Optional[torch.device] = None"},{name:"num_processes",val:": typing.Optional[int] = None"},{name:"process_index",val:": typing.Optional[int] = None"},{name:"split_batches",val:": bool = False"},{name:"put_on_device",val:": bool = False"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.RNGType]], NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/data_loader.py#L417",parametersDescription:[{anchor:"accelerate.data_loader.prepare_data_loader.dataloader",description:`<strong>dataloader</strong> (<code>torch.utils.data.dataloader.DataLoader</code>) &#x2014;
The data loader to split across several devices.`,name:"dataloader"},{anchor:"accelerate.data_loader.prepare_data_loader.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
The target device for the returned <code>DataLoader</code>.`,name:"device"},{anchor:"accelerate.data_loader.prepare_data_loader.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of processes running concurrently. Will default to the value given by
<a href="/docs/accelerate/pr_23/en/internal#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"num_processes"},{anchor:"accelerate.data_loader.prepare_data_loader.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The index of the current process. Will default to the value given by <a href="/docs/accelerate/pr_23/en/internal#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"process_index"},{anchor:"accelerate.data_loader.prepare_data_loader.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the resulting <code>DataLoader</code> should split the batches of the original data loader across devices or
yield full batches (in which case it will yield batches starting at the <code>process_index</code>-th and advancing of
<code>num_processes</code> batches at each iteration).</p>
<p>Another way to see this is that the observed batch size will be the same as the initial <code>dataloader</code> if
this option is set to <code>True</code>, the batch size of the initial <code>dataloader</code> multiplied by <code>num_processes</code>
otherwise.</p>
<p>Setting this option to <code>True</code> requires that the batch size of the <code>dataloader</code> is a round multiple of
<code>batch_size</code>.`,name:"split_batches"},{anchor:"accelerate.data_loader.prepare_data_loader.put_on_device",description:`<strong>put_on_device</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to put the batches on <code>device</code> (only works if the batches are nested list, tuples or
dictionaries of tensors).`,name:"put_on_device"},{anchor:"accelerate.data_loader.prepare_data_loader.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code> &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.prepare_data_loader.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the datalaoder prepared is only iterated through on the main process and then the batches
are split and broadcast to each process. Will default to <code>True</code> when the underlying dataset is an
<code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"}],returnDescription:`
<p>A new data loader that will yield the portion of the batches</p>
`,returnType:`
<p><code>torch.utils.data.dataloader.DataLoader</code></p>
`}}),pe=new Vs({props:{warning:!0,$$slots:{default:[cc]},$$scope:{ctx:le}}}),Oe=new U({}),Ce=new E({props:{name:"class accelerate.data_loader.DataLoaderShard",anchor:"accelerate.data_loader.DataLoaderShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/data_loader.py#L270",parametersDescription:[{anchor:"accelerate.data_loader.DataLoaderShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.Dataset</code>) &#x2014;
The dataset to use to build this datalaoder.`,name:"dataset"},{anchor:"accelerate.data_loader.DataLoaderShard.device",description:`<strong>device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
If passed, the device to put all batches on.`,name:"device"},{anchor:"accelerate.data_loader.DataLoaderShard.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code> &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: an optional <code>torch.Generator</code></li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.DataLoaderShard.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A random number generator to keep synchronized across processes.
kwargs &#x2014;
All other keyword arguments to pass to the regular <code>DataLoader</code> initialization.`,name:"generator"}]}}),Ue=new U({}),Be=new E({props:{name:"class accelerate.data_loader.BatchSamplerShard",anchor:"accelerate.data_loader.BatchSamplerShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/data_loader.py#L68",parametersDescription:[{anchor:"accelerate.data_loader.BatchSamplerShard.batch_sampler",description:`<strong>batch_sampler</strong> (<code>torch.utils.data.sampler.BatchSampler</code>) &#x2014;
The batch sampler to split in several shards.`,name:"batch_sampler"},{anchor:"accelerate.data_loader.BatchSamplerShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.BatchSamplerShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.BatchSamplerShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with a sampler of <code>[[0, 1, 2, 3], [4, 5, 6, 7]]</code>, this will result in:</p>
<ul>
<li>the sampler on process 0 to yield <code>[0, 1, 2, 3]</code> and the sampler on process 1 to yield <code>[4, 5, 6, 7]</code> if
this argument is set to <code>False</code>.</li>
<li>the sampler on process 0 to yield <code>[0, 1]</code> then <code>[4, 5]</code> and the sampler on process 1 to yield <code>[2, 3]</code>
then <code>[6, 7]</code> if this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}]}}),me=new Vs({props:{warning:!0,$$slots:{default:[lc]},$$scope:{ctx:le}}}),Ve=new U({}),qe=new E({props:{name:"class accelerate.data_loader.IterableDatasetShard",anchor:"accelerate.data_loader.IterableDatasetShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/data_loader.py#L189",parametersDescription:[{anchor:"accelerate.data_loader.IterableDatasetShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.IterableDataset</code>) &#x2014;
The batch sampler to split in several shards.`,name:"dataset"},{anchor:"accelerate.data_loader.IterableDatasetShard.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The size of the batches per shard (if <code>split_batches=False</code>) or the size of the batches (if
<code>split_batches=True</code>).`,name:"batch_size"},{anchor:"accelerate.data_loader.IterableDatasetShard.drop_last",description:`<strong>drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to drop the last incomplete batch or complete the last batches by using the samples from the
beginning.`,name:"drop_last"},{anchor:"accelerate.data_loader.IterableDatasetShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.IterableDatasetShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.IterableDatasetShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with an iterable dataset yielding of <code>[0, 1, 2, 3, 4, 5, 6, 7]</code>, this will result in:</p>
<ul>
<li>the shard on process 0 to yield <code>[0, 1, 2, 3]</code> and the shard on process 1 to yield <code>[4, 5, 6, 7]</code> if this
argument is set to <code>False</code>.</li>
<li>the shard on process 0 to yield <code>[0, 1, 4, 5]</code> and the sampler on process 1 to yield <code>[2, 3, 6, 7]</code> if
this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}]}}),Fe=new U({}),Re=new U({}),We=new E({props:{name:"class accelerate.state.AcceleratorState",anchor:"accelerate.state.AcceleratorState",parameters:[{name:"mixed_precision",val:": str = None"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:" = None"},{name:"_from_accelerator",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/state.py#L128",parametersDescription:[{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>device</strong> (<code>torch.device</code>) &#x2014; The device to use. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:`<strong>-</strong> <strong>distributed_type</strong> (<code>~accelerate.state.DistributedType</code>) &#x2014; The type of distributed environment currently &#x2014;
in use.`,name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>num_processes</strong> (<code>int</code>) &#x2014; The number of processes currently launched in parallel. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>process_index</strong> (<code>int</code>) &#x2014; The index of the current process. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>local_process_index</strong> (<code>int</code>) &#x2014; The index of the current process on the current server. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:`<strong>-</strong> <strong>mixed_precision</strong> (<code>str</code>) &#x2014; Whether or not the current script will use mixed precision. If you are using &#x2014;
mixed precision, define if you want to use FP16 or BF16 (bfloat16) as the floating point.`,name:"-"}]}}),Me=new U({}),je=new E({props:{name:"class accelerate.DistributedType",anchor:"accelerate.DistributedType",parameters:[{name:"value",val:""},{name:"names",val:" = None"},{name:"module",val:" = None"},{name:"qualname",val:" = None"},{name:"type",val:" = None"},{name:"start",val:" = 1"}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/state.py#L74"}}),Xe=new U({}),Je=new E({props:{name:"class accelerate.tracking.GeneralTracker",anchor:"accelerate.tracking.GeneralTracker",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/tracking.py#L52"}}),Ke=new E({props:{name:"finish",anchor:"accelerate.tracking.GeneralTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/tracking.py#L84"}}),Qe=new E({props:{name:"log",anchor:"accelerate.tracking.GeneralTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int]"}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/tracking.py#L70",parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.GeneralTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}]}}),Ye=new E({props:{name:"store_init_configuration",anchor:"accelerate.tracking.GeneralTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/tracking.py#L57",parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}]}}),et=new U({}),tt=new E({props:{name:"accelerate.utils.extract_model_from_parallel",anchor:"accelerate.utils.extract_model_from_parallel",parameters:[{name:"model",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/utils.py#L354",parametersDescription:[{anchor:"accelerate.utils.extract_model_from_parallel.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model to extract.",name:"model"}],returnDescription:`
<p>The extracted model.</p>
`,returnType:`
<p><code>torch.nn.Module</code></p>
`}}),at=new E({props:{name:"accelerate.utils.gather",anchor:"accelerate.utils.gather",parameters:[{name:"tensor",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/utils.py#L399",parametersDescription:[{anchor:"accelerate.utils.gather.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"}],returnDescription:`
<p>The same data structure as <code>tensor</code> with all tensors sent to the proper device.</p>
`}}),rt=new E({props:{name:"accelerate.utils.send_to_device",anchor:"accelerate.utils.send_to_device",parameters:[{name:"tensor",val:""},{name:"device",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/utils.py#L249",parametersDescription:[{anchor:"accelerate.utils.send_to_device.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to send to a given device.`,name:"tensor"},{anchor:"accelerate.utils.send_to_device.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
The device to send the data to.`,name:"device"}],returnDescription:`
<p>The same data structure as <code>tensor</code> with all tensors sent to the proper device.</p>
`}}),ot=new E({props:{name:"accelerate.utils.set_seed",anchor:"accelerate.utils.set_seed",parameters:[{name:"seed",val:": int"},{name:"device_specific",val:": bool = False"}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/utils.py#L119",parametersDescription:[{anchor:"accelerate.utils.set_seed.seed",description:"<strong>seed</strong> (<code>int</code>) &#x2014; The seed to set.",name:"seed"},{anchor:"accelerate.utils.set_seed.device_specific",description:`<strong>device_specific</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to differ the seed on each device slightly with <code>self.process_index</code>.`,name:"device_specific"}]}}),nt=new E({props:{name:"accelerate.utils.synchronize_rng_state",anchor:"accelerate.utils.synchronize_rng_state",parameters:[{name:"rng_type",val:": typing.Optional[accelerate.utils.RNGType] = None"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/utils.py#L139"}}),lt=new E({props:{name:"accelerate.synchronize_rng_states",anchor:"accelerate.synchronize_rng_states",parameters:[{name:"rng_types",val:": typing.List[typing.Union[str, accelerate.utils.RNGType]]"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/utils.py#L174"}}),it=new E({props:{name:"accelerate.utils.wait_for_everyone",anchor:"accelerate.utils.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_23/src/accelerate/utils.py#L623"}}),Se=new Vs({props:{warning:!0,$$slots:{default:[ic]},$$scope:{ctx:le}}}),{c(){f=r("meta"),S=l(),$=r("h1"),y=r("a"),k=r("span"),u(w.$$.fragment),D=l(),L=r("span"),yr=n("Internals"),Ea=l(),q=r("h2"),ie=r("a"),yt=r("span"),u(Ae.$$.fragment),wr=l(),wt=r("span"),Er=n("Optimizer"),Da=l(),F=r("div"),u(Ie.$$.fragment),Dr=l(),Et=r("p"),Sr=n("Internal wrapper around a torch optimizer."),Sa=l(),R=r("h2"),de=r("a"),Dt=r("span"),u(ze.$$.fragment),Tr=l(),St=r("span"),xr=n("DataLoader"),Ta=l(),he=r("p"),kr=n("The main work on your PyTorch "),Tt=r("code"),Pr=n("DataLoader"),Ar=n(" is done by the following function:"),xa=l(),P=r("div"),u(Le.$$.fragment),Ir=l(),Ne=r("p"),zr=n("Wraps a PyTorch "),xt=r("code"),Lr=n("DataLoader"),Nr=n(" to generate batches for one of the processes only."),Or=l(),W=r("p"),Cr=n("Depending on the value of the "),kt=r("code"),Gr=n("drop_last"),Ur=n(" attribute of the "),Pt=r("code"),Br=n("dataloader"),Vr=n(` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),qr=l(),u(pe.$$.fragment),ka=l(),H=r("h3"),fe=r("a"),At=r("span"),u(Oe.$$.fragment),Fr=l(),It=r("span"),Rr=n("BatchSamplerShard"),Pa=l(),M=r("div"),u(Ce.$$.fragment),Wr=l(),Ge=r("p"),Hr=n("Subclass of a PyTorch "),zt=r("code"),Mr=n("DataLoader"),jr=n(" that will deal with device placement and current distributed setup."),Aa=l(),j=r("h3"),ue=r("a"),Lt=r("span"),u(Ue.$$.fragment),Xr=l(),Nt=r("span"),Jr=n("BatchSamplerShard"),Ia=l(),N=r("div"),u(Be.$$.fragment),Kr=l(),O=r("p"),Qr=n("Wraps a PyTorch "),Ot=r("code"),Yr=n("BatchSampler"),Zr=n(` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),Ct=r("code"),eo=n("num_processes"),to=n(` and that all have the same size.
Depending on the value of the `),Gt=r("code"),ao=n("drop_last"),ro=n(` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),oo=l(),u(me.$$.fragment),za=l(),X=r("h3"),ge=r("a"),Ut=r("span"),u(Ve.$$.fragment),so=l(),Bt=r("span"),no=n("IterableDatasetShard"),La=l(),J=r("div"),u(qe.$$.fragment),co=l(),T=r("p"),lo=n("Wraps a PyTorch "),Vt=r("code"),io=n("IterableDataset"),ho=n(` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),qt=r("code"),po=n("split_batches"),fo=n(", this is either "),Ft=r("code"),uo=n("batch_size"),mo=n(" or "),Rt=r("code"),go=n("batch_size x num_processes"),vo=n(`). Depending on the value of the
`),Wt=r("code"),_o=n("drop_last"),bo=n(` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),Na=l(),K=r("h2"),ve=r("a"),Ht=r("span"),u(Fe.$$.fragment),$o=l(),Mt=r("span"),yo=n("Distributed Config"),Oa=l(),Q=r("h3"),_e=r("a"),jt=r("span"),u(Re.$$.fragment),wo=l(),Xt=r("span"),Eo=n("AcceleratorState"),Ca=l(),Y=r("div"),u(We.$$.fragment),Do=l(),Z=r("p"),So=n("This is a variation of a "),He=r("a"),To=n("singleton class"),xo=n(` in the sense that all
instance of `),Jt=r("code"),ko=n("AcceleratorState"),Po=n(" share the same state, which is initialized on the first instantiation."),Ga=l(),ee=r("h3"),be=r("a"),Kt=r("span"),u(Me.$$.fragment),Ao=l(),Qt=r("span"),Io=n("DistributedType"),Ua=l(),A=r("div"),u(je.$$.fragment),zo=l(),Yt=r("p"),Lo=n("Represents a type of distributed environment."),No=l(),Zt=r("p"),Oo=n("Values:"),Co=l(),I=r("ul"),ht=r("li"),ea=r("strong"),Go=n("NO"),Uo=n(" \u2014 Not a distributed environment, just a single process."),Bo=l(),pt=r("li"),ta=r("strong"),Vo=n("MULTI_CPU"),qo=n(" \u2014 Distributed on multiple CPU nodes."),Fo=l(),ft=r("li"),aa=r("strong"),Ro=n("MULTI_GPU"),Wo=n(" \u2014 Distributed on multiple GPUs."),Ho=l(),ut=r("li"),ra=r("strong"),Mo=n("DEEPSPEED"),jo=n(" \u2014 Using DeepSpeed."),Xo=l(),mt=r("li"),oa=r("strong"),Jo=n("TPU"),Ko=n(" \u2014 Distributed on TPUs."),Ba=l(),te=r("h2"),$e=r("a"),sa=r("span"),u(Xe.$$.fragment),Qo=l(),na=r("span"),Yo=n("Tracking"),Va=l(),x=r("div"),u(Je.$$.fragment),Zo=l(),ca=r("p"),es=n("A base Tracker class to be used for all logging integration implementations."),ts=l(),ye=r("div"),u(Ke.$$.fragment),as=l(),la=r("p"),rs=n(`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),os=l(),we=r("div"),u(Qe.$$.fragment),ss=l(),ae=r("p"),ns=n("Logs "),ia=r("code"),cs=n("values"),ls=n(" to the current run. Base "),da=r("code"),is=n("log"),ds=n(" implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),hs=l(),Ee=r("div"),u(Ye.$$.fragment),ps=l(),Ze=r("p"),fs=n("Logs "),ha=r("code"),us=n("values"),ms=n(` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),qa=l(),re=r("h2"),De=r("a"),pa=r("span"),u(et.$$.fragment),gs=l(),fa=r("span"),vs=n("Utilities"),Fa=l(),oe=r("div"),u(tt.$$.fragment),_s=l(),ua=r("p"),bs=n("Extract a model from its distributed containers."),Ra=l(),se=r("div"),u(at.$$.fragment),$s=l(),ma=r("p"),ys=n("Recursively gather tensor in a nested list/tuple/dictionary of tensors from all devices."),Wa=l(),ne=r("div"),u(rt.$$.fragment),ws=l(),ga=r("p"),Es=n("Recursively sends the elements in a nested list/tuple/dictionary of tensors to a given device."),Ha=l(),ce=r("div"),u(ot.$$.fragment),Ds=l(),C=r("p"),Ss=n("Helper function for reproducible behavior to set the seed in "),va=r("code"),Ts=n("random"),xs=n(", "),_a=r("code"),ks=n("numpy"),Ps=n(", "),ba=r("code"),As=n("torch"),Is=n("."),Ma=l(),st=r("div"),u(nt.$$.fragment),ja=l(),ct=r("div"),u(lt.$$.fragment),Xa=l(),G=r("div"),u(it.$$.fragment),zs=l(),$a=r("p"),Ls=n("Introduces a blocking point in the script, making sure all processes have reached this point before continuing."),Ns=l(),u(Se.$$.fragment),this.h()},l(e){const h=sc('[data-svelte="svelte-1phssyn"]',document.head);f=o(h,"META",{name:!0,content:!0}),h.forEach(a),S=i(e),$=o(e,"H1",{class:!0});var dt=s($);y=o(dt,"A",{id:!0,class:!0,href:!0});var ya=s(y);k=o(ya,"SPAN",{});var wa=s(k);m(w.$$.fragment,wa),wa.forEach(a),ya.forEach(a),D=i(dt),L=o(dt,"SPAN",{});var qs=s(L);yr=c(qs,"Internals"),qs.forEach(a),dt.forEach(a),Ea=i(e),q=o(e,"H2",{class:!0});var Ka=s(q);ie=o(Ka,"A",{id:!0,class:!0,href:!0});var Fs=s(ie);yt=o(Fs,"SPAN",{});var Rs=s(yt);m(Ae.$$.fragment,Rs),Rs.forEach(a),Fs.forEach(a),wr=i(Ka),wt=o(Ka,"SPAN",{});var Ws=s(wt);Er=c(Ws,"Optimizer"),Ws.forEach(a),Ka.forEach(a),Da=i(e),F=o(e,"DIV",{class:!0});var Qa=s(F);m(Ie.$$.fragment,Qa),Dr=i(Qa),Et=o(Qa,"P",{});var Hs=s(Et);Sr=c(Hs,"Internal wrapper around a torch optimizer."),Hs.forEach(a),Qa.forEach(a),Sa=i(e),R=o(e,"H2",{class:!0});var Ya=s(R);de=o(Ya,"A",{id:!0,class:!0,href:!0});var Ms=s(de);Dt=o(Ms,"SPAN",{});var js=s(Dt);m(ze.$$.fragment,js),js.forEach(a),Ms.forEach(a),Tr=i(Ya),St=o(Ya,"SPAN",{});var Xs=s(St);xr=c(Xs,"DataLoader"),Xs.forEach(a),Ya.forEach(a),Ta=i(e),he=o(e,"P",{});var Za=s(he);kr=c(Za,"The main work on your PyTorch "),Tt=o(Za,"CODE",{});var Js=s(Tt);Pr=c(Js,"DataLoader"),Js.forEach(a),Ar=c(Za," is done by the following function:"),Za.forEach(a),xa=i(e),P=o(e,"DIV",{class:!0});var Te=s(P);m(Le.$$.fragment,Te),Ir=i(Te),Ne=o(Te,"P",{});var er=s(Ne);zr=c(er,"Wraps a PyTorch "),xt=o(er,"CODE",{});var Ks=s(xt);Lr=c(Ks,"DataLoader"),Ks.forEach(a),Nr=c(er," to generate batches for one of the processes only."),er.forEach(a),Or=i(Te),W=o(Te,"P",{});var gt=s(W);Cr=c(gt,"Depending on the value of the "),kt=o(gt,"CODE",{});var Qs=s(kt);Gr=c(Qs,"drop_last"),Qs.forEach(a),Ur=c(gt," attribute of the "),Pt=o(gt,"CODE",{});var Ys=s(Pt);Br=c(Ys,"dataloader"),Ys.forEach(a),Vr=c(gt,` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),gt.forEach(a),qr=i(Te),m(pe.$$.fragment,Te),Te.forEach(a),ka=i(e),H=o(e,"H3",{class:!0});var tr=s(H);fe=o(tr,"A",{id:!0,class:!0,href:!0});var Zs=s(fe);At=o(Zs,"SPAN",{});var en=s(At);m(Oe.$$.fragment,en),en.forEach(a),Zs.forEach(a),Fr=i(tr),It=o(tr,"SPAN",{});var tn=s(It);Rr=c(tn,"BatchSamplerShard"),tn.forEach(a),tr.forEach(a),Pa=i(e),M=o(e,"DIV",{class:!0});var ar=s(M);m(Ce.$$.fragment,ar),Wr=i(ar),Ge=o(ar,"P",{});var rr=s(Ge);Hr=c(rr,"Subclass of a PyTorch "),zt=o(rr,"CODE",{});var an=s(zt);Mr=c(an,"DataLoader"),an.forEach(a),jr=c(rr," that will deal with device placement and current distributed setup."),rr.forEach(a),ar.forEach(a),Aa=i(e),j=o(e,"H3",{class:!0});var or=s(j);ue=o(or,"A",{id:!0,class:!0,href:!0});var rn=s(ue);Lt=o(rn,"SPAN",{});var on=s(Lt);m(Ue.$$.fragment,on),on.forEach(a),rn.forEach(a),Xr=i(or),Nt=o(or,"SPAN",{});var sn=s(Nt);Jr=c(sn,"BatchSamplerShard"),sn.forEach(a),or.forEach(a),Ia=i(e),N=o(e,"DIV",{class:!0});var vt=s(N);m(Be.$$.fragment,vt),Kr=i(vt),O=o(vt,"P",{});var xe=s(O);Qr=c(xe,"Wraps a PyTorch "),Ot=o(xe,"CODE",{});var nn=s(Ot);Yr=c(nn,"BatchSampler"),nn.forEach(a),Zr=c(xe,` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),Ct=o(xe,"CODE",{});var cn=s(Ct);eo=c(cn,"num_processes"),cn.forEach(a),to=c(xe,` and that all have the same size.
Depending on the value of the `),Gt=o(xe,"CODE",{});var ln=s(Gt);ao=c(ln,"drop_last"),ln.forEach(a),ro=c(xe,` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),xe.forEach(a),oo=i(vt),m(me.$$.fragment,vt),vt.forEach(a),za=i(e),X=o(e,"H3",{class:!0});var sr=s(X);ge=o(sr,"A",{id:!0,class:!0,href:!0});var dn=s(ge);Ut=o(dn,"SPAN",{});var hn=s(Ut);m(Ve.$$.fragment,hn),hn.forEach(a),dn.forEach(a),so=i(sr),Bt=o(sr,"SPAN",{});var pn=s(Bt);no=c(pn,"IterableDatasetShard"),pn.forEach(a),sr.forEach(a),La=i(e),J=o(e,"DIV",{class:!0});var nr=s(J);m(qe.$$.fragment,nr),co=i(nr),T=o(nr,"P",{});var z=s(T);lo=c(z,"Wraps a PyTorch "),Vt=o(z,"CODE",{});var fn=s(Vt);io=c(fn,"IterableDataset"),fn.forEach(a),ho=c(z,` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),qt=o(z,"CODE",{});var un=s(qt);po=c(un,"split_batches"),un.forEach(a),fo=c(z,", this is either "),Ft=o(z,"CODE",{});var mn=s(Ft);uo=c(mn,"batch_size"),mn.forEach(a),mo=c(z," or "),Rt=o(z,"CODE",{});var gn=s(Rt);go=c(gn,"batch_size x num_processes"),gn.forEach(a),vo=c(z,`). Depending on the value of the
`),Wt=o(z,"CODE",{});var vn=s(Wt);_o=c(vn,"drop_last"),vn.forEach(a),bo=c(z,` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),z.forEach(a),nr.forEach(a),Na=i(e),K=o(e,"H2",{class:!0});var cr=s(K);ve=o(cr,"A",{id:!0,class:!0,href:!0});var _n=s(ve);Ht=o(_n,"SPAN",{});var bn=s(Ht);m(Fe.$$.fragment,bn),bn.forEach(a),_n.forEach(a),$o=i(cr),Mt=o(cr,"SPAN",{});var $n=s(Mt);yo=c($n,"Distributed Config"),$n.forEach(a),cr.forEach(a),Oa=i(e),Q=o(e,"H3",{class:!0});var lr=s(Q);_e=o(lr,"A",{id:!0,class:!0,href:!0});var yn=s(_e);jt=o(yn,"SPAN",{});var wn=s(jt);m(Re.$$.fragment,wn),wn.forEach(a),yn.forEach(a),wo=i(lr),Xt=o(lr,"SPAN",{});var En=s(Xt);Eo=c(En,"AcceleratorState"),En.forEach(a),lr.forEach(a),Ca=i(e),Y=o(e,"DIV",{class:!0});var ir=s(Y);m(We.$$.fragment,ir),Do=i(ir),Z=o(ir,"P",{});var _t=s(Z);So=c(_t,"This is a variation of a "),He=o(_t,"A",{href:!0,rel:!0});var Dn=s(He);To=c(Dn,"singleton class"),Dn.forEach(a),xo=c(_t,` in the sense that all
instance of `),Jt=o(_t,"CODE",{});var Sn=s(Jt);ko=c(Sn,"AcceleratorState"),Sn.forEach(a),Po=c(_t," share the same state, which is initialized on the first instantiation."),_t.forEach(a),ir.forEach(a),Ga=i(e),ee=o(e,"H3",{class:!0});var dr=s(ee);be=o(dr,"A",{id:!0,class:!0,href:!0});var Tn=s(be);Kt=o(Tn,"SPAN",{});var xn=s(Kt);m(Me.$$.fragment,xn),xn.forEach(a),Tn.forEach(a),Ao=i(dr),Qt=o(dr,"SPAN",{});var kn=s(Qt);Io=c(kn,"DistributedType"),kn.forEach(a),dr.forEach(a),Ua=i(e),A=o(e,"DIV",{class:!0});var ke=s(A);m(je.$$.fragment,ke),zo=i(ke),Yt=o(ke,"P",{});var Pn=s(Yt);Lo=c(Pn,"Represents a type of distributed environment."),Pn.forEach(a),No=i(ke),Zt=o(ke,"P",{});var An=s(Zt);Oo=c(An,"Values:"),An.forEach(a),Co=i(ke),I=o(ke,"UL",{});var B=s(I);ht=o(B,"LI",{});var Os=s(ht);ea=o(Os,"STRONG",{});var In=s(ea);Go=c(In,"NO"),In.forEach(a),Uo=c(Os," \u2014 Not a distributed environment, just a single process."),Os.forEach(a),Bo=i(B),pt=o(B,"LI",{});var Cs=s(pt);ta=o(Cs,"STRONG",{});var zn=s(ta);Vo=c(zn,"MULTI_CPU"),zn.forEach(a),qo=c(Cs," \u2014 Distributed on multiple CPU nodes."),Cs.forEach(a),Fo=i(B),ft=o(B,"LI",{});var Gs=s(ft);aa=o(Gs,"STRONG",{});var Ln=s(aa);Ro=c(Ln,"MULTI_GPU"),Ln.forEach(a),Wo=c(Gs," \u2014 Distributed on multiple GPUs."),Gs.forEach(a),Ho=i(B),ut=o(B,"LI",{});var Us=s(ut);ra=o(Us,"STRONG",{});var Nn=s(ra);Mo=c(Nn,"DEEPSPEED"),Nn.forEach(a),jo=c(Us," \u2014 Using DeepSpeed."),Us.forEach(a),Xo=i(B),mt=o(B,"LI",{});var Bs=s(mt);oa=o(Bs,"STRONG",{});var On=s(oa);Jo=c(On,"TPU"),On.forEach(a),Ko=c(Bs," \u2014 Distributed on TPUs."),Bs.forEach(a),B.forEach(a),ke.forEach(a),Ba=i(e),te=o(e,"H2",{class:!0});var hr=s(te);$e=o(hr,"A",{id:!0,class:!0,href:!0});var Cn=s($e);sa=o(Cn,"SPAN",{});var Gn=s(sa);m(Xe.$$.fragment,Gn),Gn.forEach(a),Cn.forEach(a),Qo=i(hr),na=o(hr,"SPAN",{});var Un=s(na);Yo=c(Un,"Tracking"),Un.forEach(a),hr.forEach(a),Va=i(e),x=o(e,"DIV",{class:!0});var V=s(x);m(Je.$$.fragment,V),Zo=i(V),ca=o(V,"P",{});var Bn=s(ca);es=c(Bn,"A base Tracker class to be used for all logging integration implementations."),Bn.forEach(a),ts=i(V),ye=o(V,"DIV",{class:!0});var pr=s(ye);m(Ke.$$.fragment,pr),as=i(pr),la=o(pr,"P",{});var Vn=s(la);rs=c(Vn,`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),Vn.forEach(a),pr.forEach(a),os=i(V),we=o(V,"DIV",{class:!0});var fr=s(we);m(Qe.$$.fragment,fr),ss=i(fr),ae=o(fr,"P",{});var bt=s(ae);ns=c(bt,"Logs "),ia=o(bt,"CODE",{});var qn=s(ia);cs=c(qn,"values"),qn.forEach(a),ls=c(bt," to the current run. Base "),da=o(bt,"CODE",{});var Fn=s(da);is=c(Fn,"log"),Fn.forEach(a),ds=c(bt," implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),bt.forEach(a),fr.forEach(a),hs=i(V),Ee=o(V,"DIV",{class:!0});var ur=s(Ee);m(Ye.$$.fragment,ur),ps=i(ur),Ze=o(ur,"P",{});var mr=s(Ze);fs=c(mr,"Logs "),ha=o(mr,"CODE",{});var Rn=s(ha);us=c(Rn,"values"),Rn.forEach(a),ms=c(mr,` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),mr.forEach(a),ur.forEach(a),V.forEach(a),qa=i(e),re=o(e,"H2",{class:!0});var gr=s(re);De=o(gr,"A",{id:!0,class:!0,href:!0});var Wn=s(De);pa=o(Wn,"SPAN",{});var Hn=s(pa);m(et.$$.fragment,Hn),Hn.forEach(a),Wn.forEach(a),gs=i(gr),fa=o(gr,"SPAN",{});var Mn=s(fa);vs=c(Mn,"Utilities"),Mn.forEach(a),gr.forEach(a),Fa=i(e),oe=o(e,"DIV",{class:!0});var vr=s(oe);m(tt.$$.fragment,vr),_s=i(vr),ua=o(vr,"P",{});var jn=s(ua);bs=c(jn,"Extract a model from its distributed containers."),jn.forEach(a),vr.forEach(a),Ra=i(e),se=o(e,"DIV",{class:!0});var _r=s(se);m(at.$$.fragment,_r),$s=i(_r),ma=o(_r,"P",{});var Xn=s(ma);ys=c(Xn,"Recursively gather tensor in a nested list/tuple/dictionary of tensors from all devices."),Xn.forEach(a),_r.forEach(a),Wa=i(e),ne=o(e,"DIV",{class:!0});var br=s(ne);m(rt.$$.fragment,br),ws=i(br),ga=o(br,"P",{});var Jn=s(ga);Es=c(Jn,"Recursively sends the elements in a nested list/tuple/dictionary of tensors to a given device."),Jn.forEach(a),br.forEach(a),Ha=i(e),ce=o(e,"DIV",{class:!0});var $r=s(ce);m(ot.$$.fragment,$r),Ds=i($r),C=o($r,"P",{});var Pe=s(C);Ss=c(Pe,"Helper function for reproducible behavior to set the seed in "),va=o(Pe,"CODE",{});var Kn=s(va);Ts=c(Kn,"random"),Kn.forEach(a),xs=c(Pe,", "),_a=o(Pe,"CODE",{});var Qn=s(_a);ks=c(Qn,"numpy"),Qn.forEach(a),Ps=c(Pe,", "),ba=o(Pe,"CODE",{});var Yn=s(ba);As=c(Yn,"torch"),Yn.forEach(a),Is=c(Pe,"."),Pe.forEach(a),$r.forEach(a),Ma=i(e),st=o(e,"DIV",{class:!0});var Zn=s(st);m(nt.$$.fragment,Zn),Zn.forEach(a),ja=i(e),ct=o(e,"DIV",{class:!0});var ec=s(ct);m(lt.$$.fragment,ec),ec.forEach(a),Xa=i(e),G=o(e,"DIV",{class:!0});var $t=s(G);m(it.$$.fragment,$t),zs=i($t),$a=o($t,"P",{});var tc=s($a);Ls=c(tc,"Introduces a blocking point in the script, making sure all processes have reached this point before continuing."),tc.forEach(a),Ns=i($t),m(Se.$$.fragment,$t),$t.forEach(a),this.h()},h(){d(f,"name","hf:doc:metadata"),d(f,"content",JSON.stringify(hc)),d(y,"id","internals"),d(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y,"href","#internals"),d($,"class","relative group"),d(ie,"id","accelerate.optimizer.AcceleratedOptimizer"),d(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ie,"href","#accelerate.optimizer.AcceleratedOptimizer"),d(q,"class","relative group"),d(F,"class","docstring"),d(de,"id","accelerate.data_loader.prepare_data_loader"),d(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(de,"href","#accelerate.data_loader.prepare_data_loader"),d(R,"class","relative group"),d(P,"class","docstring"),d(fe,"id","accelerate.data_loader.DataLoaderShard"),d(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fe,"href","#accelerate.data_loader.DataLoaderShard"),d(H,"class","relative group"),d(M,"class","docstring"),d(ue,"id","accelerate.data_loader.BatchSamplerShard"),d(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ue,"href","#accelerate.data_loader.BatchSamplerShard"),d(j,"class","relative group"),d(N,"class","docstring"),d(ge,"id","accelerate.data_loader.IterableDatasetShard"),d(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ge,"href","#accelerate.data_loader.IterableDatasetShard"),d(X,"class","relative group"),d(J,"class","docstring"),d(ve,"id","distributed-config"),d(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ve,"href","#distributed-config"),d(K,"class","relative group"),d(_e,"id","accelerate.state.AcceleratorState"),d(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_e,"href","#accelerate.state.AcceleratorState"),d(Q,"class","relative group"),d(He,"href","https://en.wikipedia.org/wiki/Singleton_pattern"),d(He,"rel","nofollow"),d(Y,"class","docstring"),d(be,"id","accelerate.DistributedType"),d(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(be,"href","#accelerate.DistributedType"),d(ee,"class","relative group"),d(A,"class","docstring"),d($e,"id","accelerate.tracking.GeneralTracker"),d($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($e,"href","#accelerate.tracking.GeneralTracker"),d(te,"class","relative group"),d(ye,"class","docstring"),d(we,"class","docstring"),d(Ee,"class","docstring"),d(x,"class","docstring"),d(De,"id","accelerate.utils.extract_model_from_parallel"),d(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(De,"href","#accelerate.utils.extract_model_from_parallel"),d(re,"class","relative group"),d(oe,"class","docstring"),d(se,"class","docstring"),d(ne,"class","docstring"),d(ce,"class","docstring"),d(st,"class","docstring"),d(ct,"class","docstring"),d(G,"class","docstring")},m(e,h){t(document.head,f),p(e,S,h),p(e,$,h),t($,y),t(y,k),g(w,k,null),t($,D),t($,L),t(L,yr),p(e,Ea,h),p(e,q,h),t(q,ie),t(ie,yt),g(Ae,yt,null),t(q,wr),t(q,wt),t(wt,Er),p(e,Da,h),p(e,F,h),g(Ie,F,null),t(F,Dr),t(F,Et),t(Et,Sr),p(e,Sa,h),p(e,R,h),t(R,de),t(de,Dt),g(ze,Dt,null),t(R,Tr),t(R,St),t(St,xr),p(e,Ta,h),p(e,he,h),t(he,kr),t(he,Tt),t(Tt,Pr),t(he,Ar),p(e,xa,h),p(e,P,h),g(Le,P,null),t(P,Ir),t(P,Ne),t(Ne,zr),t(Ne,xt),t(xt,Lr),t(Ne,Nr),t(P,Or),t(P,W),t(W,Cr),t(W,kt),t(kt,Gr),t(W,Ur),t(W,Pt),t(Pt,Br),t(W,Vr),t(P,qr),g(pe,P,null),p(e,ka,h),p(e,H,h),t(H,fe),t(fe,At),g(Oe,At,null),t(H,Fr),t(H,It),t(It,Rr),p(e,Pa,h),p(e,M,h),g(Ce,M,null),t(M,Wr),t(M,Ge),t(Ge,Hr),t(Ge,zt),t(zt,Mr),t(Ge,jr),p(e,Aa,h),p(e,j,h),t(j,ue),t(ue,Lt),g(Ue,Lt,null),t(j,Xr),t(j,Nt),t(Nt,Jr),p(e,Ia,h),p(e,N,h),g(Be,N,null),t(N,Kr),t(N,O),t(O,Qr),t(O,Ot),t(Ot,Yr),t(O,Zr),t(O,Ct),t(Ct,eo),t(O,to),t(O,Gt),t(Gt,ao),t(O,ro),t(N,oo),g(me,N,null),p(e,za,h),p(e,X,h),t(X,ge),t(ge,Ut),g(Ve,Ut,null),t(X,so),t(X,Bt),t(Bt,no),p(e,La,h),p(e,J,h),g(qe,J,null),t(J,co),t(J,T),t(T,lo),t(T,Vt),t(Vt,io),t(T,ho),t(T,qt),t(qt,po),t(T,fo),t(T,Ft),t(Ft,uo),t(T,mo),t(T,Rt),t(Rt,go),t(T,vo),t(T,Wt),t(Wt,_o),t(T,bo),p(e,Na,h),p(e,K,h),t(K,ve),t(ve,Ht),g(Fe,Ht,null),t(K,$o),t(K,Mt),t(Mt,yo),p(e,Oa,h),p(e,Q,h),t(Q,_e),t(_e,jt),g(Re,jt,null),t(Q,wo),t(Q,Xt),t(Xt,Eo),p(e,Ca,h),p(e,Y,h),g(We,Y,null),t(Y,Do),t(Y,Z),t(Z,So),t(Z,He),t(He,To),t(Z,xo),t(Z,Jt),t(Jt,ko),t(Z,Po),p(e,Ga,h),p(e,ee,h),t(ee,be),t(be,Kt),g(Me,Kt,null),t(ee,Ao),t(ee,Qt),t(Qt,Io),p(e,Ua,h),p(e,A,h),g(je,A,null),t(A,zo),t(A,Yt),t(Yt,Lo),t(A,No),t(A,Zt),t(Zt,Oo),t(A,Co),t(A,I),t(I,ht),t(ht,ea),t(ea,Go),t(ht,Uo),t(I,Bo),t(I,pt),t(pt,ta),t(ta,Vo),t(pt,qo),t(I,Fo),t(I,ft),t(ft,aa),t(aa,Ro),t(ft,Wo),t(I,Ho),t(I,ut),t(ut,ra),t(ra,Mo),t(ut,jo),t(I,Xo),t(I,mt),t(mt,oa),t(oa,Jo),t(mt,Ko),p(e,Ba,h),p(e,te,h),t(te,$e),t($e,sa),g(Xe,sa,null),t(te,Qo),t(te,na),t(na,Yo),p(e,Va,h),p(e,x,h),g(Je,x,null),t(x,Zo),t(x,ca),t(ca,es),t(x,ts),t(x,ye),g(Ke,ye,null),t(ye,as),t(ye,la),t(la,rs),t(x,os),t(x,we),g(Qe,we,null),t(we,ss),t(we,ae),t(ae,ns),t(ae,ia),t(ia,cs),t(ae,ls),t(ae,da),t(da,is),t(ae,ds),t(x,hs),t(x,Ee),g(Ye,Ee,null),t(Ee,ps),t(Ee,Ze),t(Ze,fs),t(Ze,ha),t(ha,us),t(Ze,ms),p(e,qa,h),p(e,re,h),t(re,De),t(De,pa),g(et,pa,null),t(re,gs),t(re,fa),t(fa,vs),p(e,Fa,h),p(e,oe,h),g(tt,oe,null),t(oe,_s),t(oe,ua),t(ua,bs),p(e,Ra,h),p(e,se,h),g(at,se,null),t(se,$s),t(se,ma),t(ma,ys),p(e,Wa,h),p(e,ne,h),g(rt,ne,null),t(ne,ws),t(ne,ga),t(ga,Es),p(e,Ha,h),p(e,ce,h),g(ot,ce,null),t(ce,Ds),t(ce,C),t(C,Ss),t(C,va),t(va,Ts),t(C,xs),t(C,_a),t(_a,ks),t(C,Ps),t(C,ba),t(ba,As),t(C,Is),p(e,Ma,h),p(e,st,h),g(nt,st,null),p(e,ja,h),p(e,ct,h),g(lt,ct,null),p(e,Xa,h),p(e,G,h),g(it,G,null),t(G,zs),t(G,$a),t($a,Ls),t(G,Ns),g(Se,G,null),Ja=!0},p(e,[h]){const dt={};h&2&&(dt.$$scope={dirty:h,ctx:e}),pe.$set(dt);const ya={};h&2&&(ya.$$scope={dirty:h,ctx:e}),me.$set(ya);const wa={};h&2&&(wa.$$scope={dirty:h,ctx:e}),Se.$set(wa)},i(e){Ja||(v(w.$$.fragment,e),v(Ae.$$.fragment,e),v(Ie.$$.fragment,e),v(ze.$$.fragment,e),v(Le.$$.fragment,e),v(pe.$$.fragment,e),v(Oe.$$.fragment,e),v(Ce.$$.fragment,e),v(Ue.$$.fragment,e),v(Be.$$.fragment,e),v(me.$$.fragment,e),v(Ve.$$.fragment,e),v(qe.$$.fragment,e),v(Fe.$$.fragment,e),v(Re.$$.fragment,e),v(We.$$.fragment,e),v(Me.$$.fragment,e),v(je.$$.fragment,e),v(Xe.$$.fragment,e),v(Je.$$.fragment,e),v(Ke.$$.fragment,e),v(Qe.$$.fragment,e),v(Ye.$$.fragment,e),v(et.$$.fragment,e),v(tt.$$.fragment,e),v(at.$$.fragment,e),v(rt.$$.fragment,e),v(ot.$$.fragment,e),v(nt.$$.fragment,e),v(lt.$$.fragment,e),v(it.$$.fragment,e),v(Se.$$.fragment,e),Ja=!0)},o(e){_(w.$$.fragment,e),_(Ae.$$.fragment,e),_(Ie.$$.fragment,e),_(ze.$$.fragment,e),_(Le.$$.fragment,e),_(pe.$$.fragment,e),_(Oe.$$.fragment,e),_(Ce.$$.fragment,e),_(Ue.$$.fragment,e),_(Be.$$.fragment,e),_(me.$$.fragment,e),_(Ve.$$.fragment,e),_(qe.$$.fragment,e),_(Fe.$$.fragment,e),_(Re.$$.fragment,e),_(We.$$.fragment,e),_(Me.$$.fragment,e),_(je.$$.fragment,e),_(Xe.$$.fragment,e),_(Je.$$.fragment,e),_(Ke.$$.fragment,e),_(Qe.$$.fragment,e),_(Ye.$$.fragment,e),_(et.$$.fragment,e),_(tt.$$.fragment,e),_(at.$$.fragment,e),_(rt.$$.fragment,e),_(ot.$$.fragment,e),_(nt.$$.fragment,e),_(lt.$$.fragment,e),_(it.$$.fragment,e),_(Se.$$.fragment,e),Ja=!1},d(e){a(f),e&&a(S),e&&a($),b(w),e&&a(Ea),e&&a(q),b(Ae),e&&a(Da),e&&a(F),b(Ie),e&&a(Sa),e&&a(R),b(ze),e&&a(Ta),e&&a(he),e&&a(xa),e&&a(P),b(Le),b(pe),e&&a(ka),e&&a(H),b(Oe),e&&a(Pa),e&&a(M),b(Ce),e&&a(Aa),e&&a(j),b(Ue),e&&a(Ia),e&&a(N),b(Be),b(me),e&&a(za),e&&a(X),b(Ve),e&&a(La),e&&a(J),b(qe),e&&a(Na),e&&a(K),b(Fe),e&&a(Oa),e&&a(Q),b(Re),e&&a(Ca),e&&a(Y),b(We),e&&a(Ga),e&&a(ee),b(Me),e&&a(Ua),e&&a(A),b(je),e&&a(Ba),e&&a(te),b(Xe),e&&a(Va),e&&a(x),b(Je),b(Ke),b(Qe),b(Ye),e&&a(qa),e&&a(re),b(et),e&&a(Fa),e&&a(oe),b(tt),e&&a(Ra),e&&a(se),b(at),e&&a(Wa),e&&a(ne),b(rt),e&&a(Ha),e&&a(ce),b(ot),e&&a(Ma),e&&a(st),b(nt),e&&a(ja),e&&a(ct),b(lt),e&&a(Xa),e&&a(G),b(it),b(Se)}}}const hc={local:"internals",sections:[{local:"accelerate.optimizer.AcceleratedOptimizer",title:"Optimizer"},{local:"accelerate.data_loader.prepare_data_loader",sections:[{local:"accelerate.data_loader.DataLoaderShard",title:"BatchSamplerShard"},{local:"accelerate.data_loader.BatchSamplerShard",title:"BatchSamplerShard"},{local:"accelerate.data_loader.IterableDatasetShard",title:"IterableDatasetShard"}],title:"DataLoader"},{local:"distributed-config",sections:[{local:"accelerate.state.AcceleratorState",title:"AcceleratorState"},{local:"accelerate.DistributedType",title:"DistributedType"}],title:"Distributed Config"},{local:"accelerate.tracking.GeneralTracker",title:"Tracking"},{local:"accelerate.utils.extract_model_from_parallel",title:"Utilities"}],title:"Internals"};function pc(le){return nc(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class vc extends ac{constructor(f){super();rc(this,f,pc,dc,oc,{})}}export{vc as default,hc as metadata};
