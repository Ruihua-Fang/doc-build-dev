import{S as Pn,i as In,s as Ln,e as r,k as i,w as m,t as n,M as kn,c as o,d as a,m as d,a as s,x as f,h as l,b as h,F as t,g as p,y as g,q as v,o as _,B as b,v as Nn}from"../chunks/vendor-19e06bd2.js";import{T as gs}from"../chunks/Tip-f0fa2d82.js";import{D as x}from"../chunks/Docstring-395e5a9c.js";import{I as B}from"../chunks/IconCopyLink-3c713d38.js";function On(ne){let u,S,$,y,T;return{c(){u=r("p"),S=n("This does not support "),$=r("code"),y=n("BatchSampler"),T=n(" with varying batch size yet.")},l(w){u=o(w,"P",{});var E=s(u);S=l(E,"This does not support "),$=o(E,"CODE",{});var L=s($);y=l(L,"BatchSampler"),L.forEach(a),T=l(E," with varying batch size yet."),E.forEach(a)},m(w,E){p(w,u,E),t(u,S),t(u,$),t($,y),t(u,T)},d(w){w&&a(u)}}}function Un(ne){let u,S,$,y,T;return{c(){u=r("p"),S=n("This does not support "),$=r("code"),y=n("BatchSampler"),T=n(" with varying batch size yet.")},l(w){u=o(w,"P",{});var E=s(u);S=l(E,"This does not support "),$=o(E,"CODE",{});var L=s($);y=l(L,"BatchSampler"),L.forEach(a),T=l(E," with varying batch size yet."),E.forEach(a)},m(w,E){p(w,u,E),t(u,S),t(u,$),t($,y),t(u,T)},d(w){w&&a(u)}}}function Cn(ne){let u,S;return{c(){u=r("p"),S=n("Make sure all processes will reach this instruction otherwise one of your processes will hang forever.")},l($){u=o($,"P",{});var y=s(u);S=l(y,"Make sure all processes will reach this instruction otherwise one of your processes will hang forever."),y.forEach(a)},m($,y){p($,u,y),t(u,S)},d($){$&&a(u)}}}function Bn(ne){let u,S,$,y,T,w,E,L,cr,ua,q,le,ut,De,ir,mt,dr,ma,F,xe,hr,ft,pr,fa,W,ce,gt,Te,ur,vt,mr,ga,ie,fr,_t,gr,vr,va,A,Ae,_r,ze,br,bt,$r,yr,wr,R,Er,$t,Sr,Dr,yt,xr,Tr,Ar,de,_a,V,he,wt,Pe,zr,Et,Pr,ba,H,Ie,Ir,Le,Lr,St,kr,Nr,$a,M,pe,Dt,ke,Or,xt,Ur,ya,k,Ne,Cr,N,Br,Tt,Gr,qr,At,Fr,Wr,zt,Rr,Vr,Hr,ue,wa,j,me,Pt,Oe,Mr,It,jr,Ea,X,Ue,Xr,D,Jr,Lt,Kr,Qr,kt,Yr,Zr,Nt,eo,to,Ot,ao,ro,Ut,oo,so,Sa,J,fe,Ct,Ce,no,Bt,lo,Da,O,Be,co,Gt,io,ho,Ge,qt,po,uo,Ft,mo,xa,K,ge,Wt,qe,fo,Rt,go,Ta,Q,ve,Vt,Fe,vo,Ht,_o,Aa,Y,We,bo,Z,$o,Re,yo,wo,Mt,Eo,So,za,ee,_e,jt,Ve,Do,Xt,xo,Pa,z,He,To,Jt,Ao,zo,Kt,Po,Io,P,rt,Qt,Lo,ko,No,ot,Yt,Oo,Uo,Co,st,Zt,Bo,Go,qo,nt,ea,Fo,Wo,Ro,lt,ta,Vo,Ho,Ia,te,be,aa,Me,Mo,ra,jo,La,ae,je,Xo,oa,Jo,ka,re,Xe,Ko,sa,Qo,Na,oe,Je,Yo,na,Zo,Oa,se,Ke,es,U,ts,la,as,rs,ca,os,ss,ia,ns,ls,Ua,Qe,Ye,Ca,Ze,et,Ba,C,tt,cs,da,is,ds,$e,Ga;return w=new B({}),De=new B({}),xe=new x({props:{name:"class accelerate.optimizer.AcceleratedOptimizer",anchor:"accelerate.optimizer.AcceleratedOptimizer",parameters:[{name:"optimizer",val:""},{name:"device_placement",val:" = True"},{name:"scaler",val:" = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/optimizer.py#L40",parametersDescription:[{anchor:"accelerate.optimizer.AcceleratedOptimizer.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.optimizer.Optimizer</code>) &#x2014;
The optimizer to wrap.`,name:"optimizer"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the optimizer should handle device placement. If so, it will place the state dictionary of
<code>optimizer</code> on the right device.`,name:"device_placement"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.scaler",description:`<strong>scaler</strong> (<code>torch.cuda.amp.grad_scaler.GradScaler</code>, <em>optional</em>) &#x2014;
The scaler to use in the step function if training with mixed precision.`,name:"scaler"}]}}),Te=new B({}),Ae=new x({props:{name:"accelerate.data_loader.prepare_data_loader",anchor:"accelerate.data_loader.prepare_data_loader",parameters:[{name:"dataloader",val:": DataLoader"},{name:"device",val:": typing.Optional[torch.device] = None"},{name:"num_processes",val:": typing.Optional[int] = None"},{name:"process_index",val:": typing.Optional[int] = None"},{name:"split_batches",val:": bool = False"},{name:"put_on_device",val:": bool = False"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.RNGType]], NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/data_loader.py#L417",parametersDescription:[{anchor:"accelerate.data_loader.prepare_data_loader.dataloader",description:`<strong>dataloader</strong> (<code>torch.utils.data.dataloader.DataLoader</code>) &#x2014;
The data loader to split across several devices.`,name:"dataloader"},{anchor:"accelerate.data_loader.prepare_data_loader.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
The target device for the returned <code>DataLoader</code>.`,name:"device"},{anchor:"accelerate.data_loader.prepare_data_loader.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of processes running concurrently. Will default to the value given by
<a href="/docs/accelerate/pr_301/en/internal#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"num_processes"},{anchor:"accelerate.data_loader.prepare_data_loader.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The index of the current process. Will default to the value given by <a href="/docs/accelerate/pr_301/en/internal#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"process_index"},{anchor:"accelerate.data_loader.prepare_data_loader.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the resulting <code>DataLoader</code> should split the batches of the original data loader across devices or
yield full batches (in which case it will yield batches starting at the <code>process_index</code>-th and advancing of
<code>num_processes</code> batches at each iteration).</p>
<p>Another way to see this is that the observed batch size will be the same as the initial <code>dataloader</code> if
this option is set to <code>True</code>, the batch size of the initial <code>dataloader</code> multiplied by <code>num_processes</code>
otherwise.</p>
<p>Setting this option to <code>True</code> requires that the batch size of the <code>dataloader</code> is a round multiple of
<code>batch_size</code>.`,name:"split_batches"},{anchor:"accelerate.data_loader.prepare_data_loader.put_on_device",description:`<strong>put_on_device</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to put the batches on <code>device</code> (only works if the batches are nested list, tuples or
dictionaries of tensors).`,name:"put_on_device"},{anchor:"accelerate.data_loader.prepare_data_loader.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code> &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.prepare_data_loader.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the datalaoder prepared is only iterated through on the main process and then the batches
are split and broadcast to each process. Will default to <code>True</code> when the underlying dataset is an
<code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"}],returnDescription:`
<p>A new data loader that will yield the portion of the batches</p>
`,returnType:`
<p><code>torch.utils.data.dataloader.DataLoader</code></p>
`}}),de=new gs({props:{warning:!0,$$slots:{default:[On]},$$scope:{ctx:ne}}}),Pe=new B({}),Ie=new x({props:{name:"class accelerate.data_loader.DataLoaderShard",anchor:"accelerate.data_loader.DataLoaderShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/data_loader.py#L270",parametersDescription:[{anchor:"accelerate.data_loader.DataLoaderShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.Dataset</code>) &#x2014;
The dataset to use to build this datalaoder.`,name:"dataset"},{anchor:"accelerate.data_loader.DataLoaderShard.device",description:`<strong>device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
If passed, the device to put all batches on.`,name:"device"},{anchor:"accelerate.data_loader.DataLoaderShard.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code> &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: an optional <code>torch.Generator</code></li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.DataLoaderShard.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A random number generator to keep synchronized across processes.
kwargs &#x2014;
All other keyword arguments to pass to the regular <code>DataLoader</code> initialization.`,name:"generator"}]}}),ke=new B({}),Ne=new x({props:{name:"class accelerate.data_loader.BatchSamplerShard",anchor:"accelerate.data_loader.BatchSamplerShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/data_loader.py#L68",parametersDescription:[{anchor:"accelerate.data_loader.BatchSamplerShard.batch_sampler",description:`<strong>batch_sampler</strong> (<code>torch.utils.data.sampler.BatchSampler</code>) &#x2014;
The batch sampler to split in several shards.`,name:"batch_sampler"},{anchor:"accelerate.data_loader.BatchSamplerShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.BatchSamplerShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.BatchSamplerShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with a sampler of <code>[[0, 1, 2, 3], [4, 5, 6, 7]]</code>, this will result in:</p>
<ul>
<li>the sampler on process 0 to yield <code>[0, 1, 2, 3]</code> and the sampler on process 1 to yield <code>[4, 5, 6, 7]</code> if
this argument is set to <code>False</code>.</li>
<li>the sampler on process 0 to yield <code>[0, 1]</code> then <code>[4, 5]</code> and the sampler on process 1 to yield <code>[2, 3]</code>
then <code>[6, 7]</code> if this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}]}}),ue=new gs({props:{warning:!0,$$slots:{default:[Un]},$$scope:{ctx:ne}}}),Oe=new B({}),Ue=new x({props:{name:"class accelerate.data_loader.IterableDatasetShard",anchor:"accelerate.data_loader.IterableDatasetShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/data_loader.py#L189",parametersDescription:[{anchor:"accelerate.data_loader.IterableDatasetShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.IterableDataset</code>) &#x2014;
The batch sampler to split in several shards.`,name:"dataset"},{anchor:"accelerate.data_loader.IterableDatasetShard.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The size of the batches per shard (if <code>split_batches=False</code>) or the size of the batches (if
<code>split_batches=True</code>).`,name:"batch_size"},{anchor:"accelerate.data_loader.IterableDatasetShard.drop_last",description:`<strong>drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to drop the last incomplete batch or complete the last batches by using the samples from the
beginning.`,name:"drop_last"},{anchor:"accelerate.data_loader.IterableDatasetShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.IterableDatasetShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.IterableDatasetShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with an iterable dataset yielding of <code>[0, 1, 2, 3, 4, 5, 6, 7]</code>, this will result in:</p>
<ul>
<li>the shard on process 0 to yield <code>[0, 1, 2, 3]</code> and the shard on process 1 to yield <code>[4, 5, 6, 7]</code> if this
argument is set to <code>False</code>.</li>
<li>the shard on process 0 to yield <code>[0, 1, 4, 5]</code> and the sampler on process 1 to yield <code>[2, 3, 6, 7]</code> if
this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}]}}),Ce=new B({}),Be=new x({props:{name:"class accelerate.scheduler.AcceleratedScheduler",anchor:"accelerate.scheduler.AcceleratedScheduler",parameters:[{name:"scheduler",val:""},{name:"optimizers",val:""},{name:"step_with_optimizer",val:": bool = True"},{name:"split_batches",val:": bool = False"}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/scheduler.py#L18",parametersDescription:[{anchor:"accelerate.scheduler.AcceleratedScheduler.scheduler",description:"<strong>scheduler</strong> (<code>torch.optim.lr_scheduler._LRScheduler</code>) &#x2014; The scheduler to wrap.",name:"scheduler"},{anchor:"accelerate.scheduler.AcceleratedScheduler.optimizers",description:"<strong>optimizers</strong> (one or a list of <code>torch.optim.Optimizer</code>) &#x2014; The optimizers used.",name:"optimizers"},{anchor:"accelerate.scheduler.AcceleratedScheduler.step_with_optimizer",description:`<strong>step_with_optimizer</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the scheduler should be stepped at each optimizer step.`,name:"step_with_optimizer"},{anchor:"accelerate.scheduler.AcceleratedScheduler.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the dataloaders split one batch across the different processes (so batch size is the same
regardless of the number of processes) or create batches on each process (so batch size is the original
batch size multiplied by the number of processes).`,name:"split_batches"}]}}),qe=new B({}),Fe=new B({}),We=new x({props:{name:"class accelerate.state.AcceleratorState",anchor:"accelerate.state.AcceleratorState",parameters:[{name:"mixed_precision",val:": str = None"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:" = None"},{name:"_from_accelerator",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/state.py#L128",parametersDescription:[{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>device</strong> (<code>torch.device</code>) &#x2014; The device to use. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:`<strong>-</strong> <strong>distributed_type</strong> (<code>~accelerate.state.DistributedType</code>) &#x2014; The type of distributed environment currently &#x2014;
in use.`,name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>num_processes</strong> (<code>int</code>) &#x2014; The number of processes currently launched in parallel. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>process_index</strong> (<code>int</code>) &#x2014; The index of the current process. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>local_process_index</strong> (<code>int</code>) &#x2014; The index of the current process on the current server. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:`<strong>-</strong> <strong>mixed_precision</strong> (<code>str</code>) &#x2014; Whether or not the current script will use mixed precision. If you are using &#x2014;
mixed precision, define if you want to use FP16 or BF16 (bfloat16) as the floating point.`,name:"-"}]}}),Ve=new B({}),He=new x({props:{name:"class accelerate.DistributedType",anchor:"accelerate.DistributedType",parameters:[{name:"value",val:""},{name:"names",val:" = None"},{name:"module",val:" = None"},{name:"qualname",val:" = None"},{name:"type",val:" = None"},{name:"start",val:" = 1"}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/state.py#L74"}}),Me=new B({}),je=new x({props:{name:"accelerate.utils.extract_model_from_parallel",anchor:"accelerate.utils.extract_model_from_parallel",parameters:[{name:"model",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/utils.py#L332",parametersDescription:[{anchor:"accelerate.utils.extract_model_from_parallel.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model to extract.",name:"model"}],returnDescription:`
<p>The extracted model.</p>
`,returnType:`
<p><code>torch.nn.Module</code></p>
`}}),Xe=new x({props:{name:"accelerate.utils.gather",anchor:"accelerate.utils.gather",parameters:[{name:"tensor",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/utils.py#L377",parametersDescription:[{anchor:"accelerate.utils.gather.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"}],returnDescription:`
<p>The same data structure as <code>tensor</code> with all tensors sent to the proper device.</p>
`}}),Je=new x({props:{name:"accelerate.utils.send_to_device",anchor:"accelerate.utils.send_to_device",parameters:[{name:"tensor",val:""},{name:"device",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/utils.py#L227",parametersDescription:[{anchor:"accelerate.utils.send_to_device.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to send to a given device.`,name:"tensor"},{anchor:"accelerate.utils.send_to_device.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
The device to send the data to.`,name:"device"}],returnDescription:`
<p>The same data structure as <code>tensor</code> with all tensors sent to the proper device.</p>
`}}),Ke=new x({props:{name:"accelerate.utils.set_seed",anchor:"accelerate.utils.set_seed",parameters:[{name:"seed",val:": int"},{name:"device_specific",val:": bool = False"}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/utils.py#L97",parametersDescription:[{anchor:"accelerate.utils.set_seed.seed",description:"<strong>seed</strong> (<code>int</code>) &#x2014; The seed to set.",name:"seed"},{anchor:"accelerate.utils.set_seed.device_specific",description:`<strong>device_specific</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to differ the seed on each device slightly with <code>self.process_index</code>.`,name:"device_specific"}]}}),Ye=new x({props:{name:"accelerate.utils.synchronize_rng_state",anchor:"accelerate.utils.synchronize_rng_state",parameters:[{name:"rng_type",val:": typing.Optional[accelerate.utils.RNGType] = None"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/utils.py#L117"}}),et=new x({props:{name:"accelerate.synchronize_rng_states",anchor:"accelerate.synchronize_rng_states",parameters:[{name:"rng_types",val:": typing.List[typing.Union[str, accelerate.utils.RNGType]]"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/utils.py#L152"}}),tt=new x({props:{name:"accelerate.utils.wait_for_everyone",anchor:"accelerate.utils.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_301/src/accelerate/utils.py#L601"}}),$e=new gs({props:{warning:!0,$$slots:{default:[Cn]},$$scope:{ctx:ne}}}),{c(){u=r("meta"),S=i(),$=r("h1"),y=r("a"),T=r("span"),m(w.$$.fragment),E=i(),L=r("span"),cr=n("Internals"),ua=i(),q=r("h2"),le=r("a"),ut=r("span"),m(De.$$.fragment),ir=i(),mt=r("span"),dr=n("Optimizer"),ma=i(),F=r("div"),m(xe.$$.fragment),hr=i(),ft=r("p"),pr=n("Internal wrapper around a torch optimizer."),fa=i(),W=r("h2"),ce=r("a"),gt=r("span"),m(Te.$$.fragment),ur=i(),vt=r("span"),mr=n("DataLoader"),ga=i(),ie=r("p"),fr=n("The main work on your PyTorch "),_t=r("code"),gr=n("DataLoader"),vr=n(" is done by the following function:"),va=i(),A=r("div"),m(Ae.$$.fragment),_r=i(),ze=r("p"),br=n("Wraps a PyTorch "),bt=r("code"),$r=n("DataLoader"),yr=n(" to generate batches for one of the processes only."),wr=i(),R=r("p"),Er=n("Depending on the value of the "),$t=r("code"),Sr=n("drop_last"),Dr=n(" attribute of the "),yt=r("code"),xr=n("dataloader"),Tr=n(` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),Ar=i(),m(de.$$.fragment),_a=i(),V=r("h3"),he=r("a"),wt=r("span"),m(Pe.$$.fragment),zr=i(),Et=r("span"),Pr=n("BatchSamplerShard"),ba=i(),H=r("div"),m(Ie.$$.fragment),Ir=i(),Le=r("p"),Lr=n("Subclass of a PyTorch "),St=r("code"),kr=n("DataLoader"),Nr=n(" that will deal with device placement and current distributed setup."),$a=i(),M=r("h3"),pe=r("a"),Dt=r("span"),m(ke.$$.fragment),Or=i(),xt=r("span"),Ur=n("BatchSamplerShard"),ya=i(),k=r("div"),m(Ne.$$.fragment),Cr=i(),N=r("p"),Br=n("Wraps a PyTorch "),Tt=r("code"),Gr=n("BatchSampler"),qr=n(` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),At=r("code"),Fr=n("num_processes"),Wr=n(` and that all have the same size.
Depending on the value of the `),zt=r("code"),Rr=n("drop_last"),Vr=n(` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),Hr=i(),m(ue.$$.fragment),wa=i(),j=r("h3"),me=r("a"),Pt=r("span"),m(Oe.$$.fragment),Mr=i(),It=r("span"),jr=n("IterableDatasetShard"),Ea=i(),X=r("div"),m(Ue.$$.fragment),Xr=i(),D=r("p"),Jr=n("Wraps a PyTorch "),Lt=r("code"),Kr=n("IterableDataset"),Qr=n(` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),kt=r("code"),Yr=n("split_batches"),Zr=n(", this is either "),Nt=r("code"),eo=n("batch_size"),to=n(" or "),Ot=r("code"),ao=n("batch_size x num_processes"),ro=n(`). Depending on the value of the
`),Ut=r("code"),oo=n("drop_last"),so=n(` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),Sa=i(),J=r("h2"),fe=r("a"),Ct=r("span"),m(Ce.$$.fragment),no=i(),Bt=r("span"),lo=n("Scheduler"),Da=i(),O=r("div"),m(Be.$$.fragment),co=i(),Gt=r("p"),io=n(`A wrapper around a learning rate scheduler that will only step when the optimizer(s) have a training step. Useful
to avoid making a scheduler step too fast when:`),ho=i(),Ge=r("ul"),qt=r("li"),po=n("gradients went overflow and there was no training step (in mixed precision training)"),uo=i(),Ft=r("li"),mo=n("step was skipped because of gradient accumulation"),xa=i(),K=r("h2"),ge=r("a"),Wt=r("span"),m(qe.$$.fragment),fo=i(),Rt=r("span"),go=n("Distributed Config"),Ta=i(),Q=r("h3"),ve=r("a"),Vt=r("span"),m(Fe.$$.fragment),vo=i(),Ht=r("span"),_o=n("AcceleratorState"),Aa=i(),Y=r("div"),m(We.$$.fragment),bo=i(),Z=r("p"),$o=n("This is a variation of a "),Re=r("a"),yo=n("singleton class"),wo=n(` in the sense that all
instance of `),Mt=r("code"),Eo=n("AcceleratorState"),So=n(" share the same state, which is initialized on the first instantiation."),za=i(),ee=r("h3"),_e=r("a"),jt=r("span"),m(Ve.$$.fragment),Do=i(),Xt=r("span"),xo=n("DistributedType"),Pa=i(),z=r("div"),m(He.$$.fragment),To=i(),Jt=r("p"),Ao=n("Represents a type of distributed environment."),zo=i(),Kt=r("p"),Po=n("Values:"),Io=i(),P=r("ul"),rt=r("li"),Qt=r("strong"),Lo=n("NO"),ko=n(" \u2014 Not a distributed environment, just a single process."),No=i(),ot=r("li"),Yt=r("strong"),Oo=n("MULTI_CPU"),Uo=n(" \u2014 Distributed on multiple CPU nodes."),Co=i(),st=r("li"),Zt=r("strong"),Bo=n("MULTI_GPU"),Go=n(" \u2014 Distributed on multiple GPUs."),qo=i(),nt=r("li"),ea=r("strong"),Fo=n("DEEPSPEED"),Wo=n(" \u2014 Using DeepSpeed."),Ro=i(),lt=r("li"),ta=r("strong"),Vo=n("TPU"),Ho=n(" \u2014 Distributed on TPUs."),Ia=i(),te=r("h2"),be=r("a"),aa=r("span"),m(Me.$$.fragment),Mo=i(),ra=r("span"),jo=n("Utilities"),La=i(),ae=r("div"),m(je.$$.fragment),Xo=i(),oa=r("p"),Jo=n("Extract a model from its distributed containers."),ka=i(),re=r("div"),m(Xe.$$.fragment),Ko=i(),sa=r("p"),Qo=n("Recursively gather tensor in a nested list/tuple/dictionary of tensors from all devices."),Na=i(),oe=r("div"),m(Je.$$.fragment),Yo=i(),na=r("p"),Zo=n("Recursively sends the elements in a nested list/tuple/dictionary of tensors to a given device."),Oa=i(),se=r("div"),m(Ke.$$.fragment),es=i(),U=r("p"),ts=n("Helper function for reproducible behavior to set the seed in "),la=r("code"),as=n("random"),rs=n(", "),ca=r("code"),os=n("numpy"),ss=n(", "),ia=r("code"),ns=n("torch"),ls=n("."),Ua=i(),Qe=r("div"),m(Ye.$$.fragment),Ca=i(),Ze=r("div"),m(et.$$.fragment),Ba=i(),C=r("div"),m(tt.$$.fragment),cs=i(),da=r("p"),is=n("Introduces a blocking point in the script, making sure all processes have reached this point before continuing."),ds=i(),m($e.$$.fragment),this.h()},l(e){const c=kn('[data-svelte="svelte-1phssyn"]',document.head);u=o(c,"META",{name:!0,content:!0}),c.forEach(a),S=d(e),$=o(e,"H1",{class:!0});var at=s($);y=o(at,"A",{id:!0,class:!0,href:!0});var ha=s(y);T=o(ha,"SPAN",{});var pa=s(T);f(w.$$.fragment,pa),pa.forEach(a),ha.forEach(a),E=d(at),L=o(at,"SPAN",{});var vs=s(L);cr=l(vs,"Internals"),vs.forEach(a),at.forEach(a),ua=d(e),q=o(e,"H2",{class:!0});var qa=s(q);le=o(qa,"A",{id:!0,class:!0,href:!0});var _s=s(le);ut=o(_s,"SPAN",{});var bs=s(ut);f(De.$$.fragment,bs),bs.forEach(a),_s.forEach(a),ir=d(qa),mt=o(qa,"SPAN",{});var $s=s(mt);dr=l($s,"Optimizer"),$s.forEach(a),qa.forEach(a),ma=d(e),F=o(e,"DIV",{class:!0});var Fa=s(F);f(xe.$$.fragment,Fa),hr=d(Fa),ft=o(Fa,"P",{});var ys=s(ft);pr=l(ys,"Internal wrapper around a torch optimizer."),ys.forEach(a),Fa.forEach(a),fa=d(e),W=o(e,"H2",{class:!0});var Wa=s(W);ce=o(Wa,"A",{id:!0,class:!0,href:!0});var ws=s(ce);gt=o(ws,"SPAN",{});var Es=s(gt);f(Te.$$.fragment,Es),Es.forEach(a),ws.forEach(a),ur=d(Wa),vt=o(Wa,"SPAN",{});var Ss=s(vt);mr=l(Ss,"DataLoader"),Ss.forEach(a),Wa.forEach(a),ga=d(e),ie=o(e,"P",{});var Ra=s(ie);fr=l(Ra,"The main work on your PyTorch "),_t=o(Ra,"CODE",{});var Ds=s(_t);gr=l(Ds,"DataLoader"),Ds.forEach(a),vr=l(Ra," is done by the following function:"),Ra.forEach(a),va=d(e),A=o(e,"DIV",{class:!0});var ye=s(A);f(Ae.$$.fragment,ye),_r=d(ye),ze=o(ye,"P",{});var Va=s(ze);br=l(Va,"Wraps a PyTorch "),bt=o(Va,"CODE",{});var xs=s(bt);$r=l(xs,"DataLoader"),xs.forEach(a),yr=l(Va," to generate batches for one of the processes only."),Va.forEach(a),wr=d(ye),R=o(ye,"P",{});var ct=s(R);Er=l(ct,"Depending on the value of the "),$t=o(ct,"CODE",{});var Ts=s($t);Sr=l(Ts,"drop_last"),Ts.forEach(a),Dr=l(ct," attribute of the "),yt=o(ct,"CODE",{});var As=s(yt);xr=l(As,"dataloader"),As.forEach(a),Tr=l(ct,` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),ct.forEach(a),Ar=d(ye),f(de.$$.fragment,ye),ye.forEach(a),_a=d(e),V=o(e,"H3",{class:!0});var Ha=s(V);he=o(Ha,"A",{id:!0,class:!0,href:!0});var zs=s(he);wt=o(zs,"SPAN",{});var Ps=s(wt);f(Pe.$$.fragment,Ps),Ps.forEach(a),zs.forEach(a),zr=d(Ha),Et=o(Ha,"SPAN",{});var Is=s(Et);Pr=l(Is,"BatchSamplerShard"),Is.forEach(a),Ha.forEach(a),ba=d(e),H=o(e,"DIV",{class:!0});var Ma=s(H);f(Ie.$$.fragment,Ma),Ir=d(Ma),Le=o(Ma,"P",{});var ja=s(Le);Lr=l(ja,"Subclass of a PyTorch "),St=o(ja,"CODE",{});var Ls=s(St);kr=l(Ls,"DataLoader"),Ls.forEach(a),Nr=l(ja," that will deal with device placement and current distributed setup."),ja.forEach(a),Ma.forEach(a),$a=d(e),M=o(e,"H3",{class:!0});var Xa=s(M);pe=o(Xa,"A",{id:!0,class:!0,href:!0});var ks=s(pe);Dt=o(ks,"SPAN",{});var Ns=s(Dt);f(ke.$$.fragment,Ns),Ns.forEach(a),ks.forEach(a),Or=d(Xa),xt=o(Xa,"SPAN",{});var Os=s(xt);Ur=l(Os,"BatchSamplerShard"),Os.forEach(a),Xa.forEach(a),ya=d(e),k=o(e,"DIV",{class:!0});var it=s(k);f(Ne.$$.fragment,it),Cr=d(it),N=o(it,"P",{});var we=s(N);Br=l(we,"Wraps a PyTorch "),Tt=o(we,"CODE",{});var Us=s(Tt);Gr=l(Us,"BatchSampler"),Us.forEach(a),qr=l(we,` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),At=o(we,"CODE",{});var Cs=s(At);Fr=l(Cs,"num_processes"),Cs.forEach(a),Wr=l(we,` and that all have the same size.
Depending on the value of the `),zt=o(we,"CODE",{});var Bs=s(zt);Rr=l(Bs,"drop_last"),Bs.forEach(a),Vr=l(we,` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),we.forEach(a),Hr=d(it),f(ue.$$.fragment,it),it.forEach(a),wa=d(e),j=o(e,"H3",{class:!0});var Ja=s(j);me=o(Ja,"A",{id:!0,class:!0,href:!0});var Gs=s(me);Pt=o(Gs,"SPAN",{});var qs=s(Pt);f(Oe.$$.fragment,qs),qs.forEach(a),Gs.forEach(a),Mr=d(Ja),It=o(Ja,"SPAN",{});var Fs=s(It);jr=l(Fs,"IterableDatasetShard"),Fs.forEach(a),Ja.forEach(a),Ea=d(e),X=o(e,"DIV",{class:!0});var Ka=s(X);f(Ue.$$.fragment,Ka),Xr=d(Ka),D=o(Ka,"P",{});var I=s(D);Jr=l(I,"Wraps a PyTorch "),Lt=o(I,"CODE",{});var Ws=s(Lt);Kr=l(Ws,"IterableDataset"),Ws.forEach(a),Qr=l(I,` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),kt=o(I,"CODE",{});var Rs=s(kt);Yr=l(Rs,"split_batches"),Rs.forEach(a),Zr=l(I,", this is either "),Nt=o(I,"CODE",{});var Vs=s(Nt);eo=l(Vs,"batch_size"),Vs.forEach(a),to=l(I," or "),Ot=o(I,"CODE",{});var Hs=s(Ot);ao=l(Hs,"batch_size x num_processes"),Hs.forEach(a),ro=l(I,`). Depending on the value of the
`),Ut=o(I,"CODE",{});var Ms=s(Ut);oo=l(Ms,"drop_last"),Ms.forEach(a),so=l(I,` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),I.forEach(a),Ka.forEach(a),Sa=d(e),J=o(e,"H2",{class:!0});var Qa=s(J);fe=o(Qa,"A",{id:!0,class:!0,href:!0});var js=s(fe);Ct=o(js,"SPAN",{});var Xs=s(Ct);f(Ce.$$.fragment,Xs),Xs.forEach(a),js.forEach(a),no=d(Qa),Bt=o(Qa,"SPAN",{});var Js=s(Bt);lo=l(Js,"Scheduler"),Js.forEach(a),Qa.forEach(a),Da=d(e),O=o(e,"DIV",{class:!0});var dt=s(O);f(Be.$$.fragment,dt),co=d(dt),Gt=o(dt,"P",{});var Ks=s(Gt);io=l(Ks,`A wrapper around a learning rate scheduler that will only step when the optimizer(s) have a training step. Useful
to avoid making a scheduler step too fast when:`),Ks.forEach(a),ho=d(dt),Ge=o(dt,"UL",{});var Ya=s(Ge);qt=o(Ya,"LI",{});var Qs=s(qt);po=l(Qs,"gradients went overflow and there was no training step (in mixed precision training)"),Qs.forEach(a),uo=d(Ya),Ft=o(Ya,"LI",{});var Ys=s(Ft);mo=l(Ys,"step was skipped because of gradient accumulation"),Ys.forEach(a),Ya.forEach(a),dt.forEach(a),xa=d(e),K=o(e,"H2",{class:!0});var Za=s(K);ge=o(Za,"A",{id:!0,class:!0,href:!0});var Zs=s(ge);Wt=o(Zs,"SPAN",{});var en=s(Wt);f(qe.$$.fragment,en),en.forEach(a),Zs.forEach(a),fo=d(Za),Rt=o(Za,"SPAN",{});var tn=s(Rt);go=l(tn,"Distributed Config"),tn.forEach(a),Za.forEach(a),Ta=d(e),Q=o(e,"H3",{class:!0});var er=s(Q);ve=o(er,"A",{id:!0,class:!0,href:!0});var an=s(ve);Vt=o(an,"SPAN",{});var rn=s(Vt);f(Fe.$$.fragment,rn),rn.forEach(a),an.forEach(a),vo=d(er),Ht=o(er,"SPAN",{});var on=s(Ht);_o=l(on,"AcceleratorState"),on.forEach(a),er.forEach(a),Aa=d(e),Y=o(e,"DIV",{class:!0});var tr=s(Y);f(We.$$.fragment,tr),bo=d(tr),Z=o(tr,"P",{});var ht=s(Z);$o=l(ht,"This is a variation of a "),Re=o(ht,"A",{href:!0,rel:!0});var sn=s(Re);yo=l(sn,"singleton class"),sn.forEach(a),wo=l(ht,` in the sense that all
instance of `),Mt=o(ht,"CODE",{});var nn=s(Mt);Eo=l(nn,"AcceleratorState"),nn.forEach(a),So=l(ht," share the same state, which is initialized on the first instantiation."),ht.forEach(a),tr.forEach(a),za=d(e),ee=o(e,"H3",{class:!0});var ar=s(ee);_e=o(ar,"A",{id:!0,class:!0,href:!0});var ln=s(_e);jt=o(ln,"SPAN",{});var cn=s(jt);f(Ve.$$.fragment,cn),cn.forEach(a),ln.forEach(a),Do=d(ar),Xt=o(ar,"SPAN",{});var dn=s(Xt);xo=l(dn,"DistributedType"),dn.forEach(a),ar.forEach(a),Pa=d(e),z=o(e,"DIV",{class:!0});var Ee=s(z);f(He.$$.fragment,Ee),To=d(Ee),Jt=o(Ee,"P",{});var hn=s(Jt);Ao=l(hn,"Represents a type of distributed environment."),hn.forEach(a),zo=d(Ee),Kt=o(Ee,"P",{});var pn=s(Kt);Po=l(pn,"Values:"),pn.forEach(a),Io=d(Ee),P=o(Ee,"UL",{});var G=s(P);rt=o(G,"LI",{});var hs=s(rt);Qt=o(hs,"STRONG",{});var un=s(Qt);Lo=l(un,"NO"),un.forEach(a),ko=l(hs," \u2014 Not a distributed environment, just a single process."),hs.forEach(a),No=d(G),ot=o(G,"LI",{});var ps=s(ot);Yt=o(ps,"STRONG",{});var mn=s(Yt);Oo=l(mn,"MULTI_CPU"),mn.forEach(a),Uo=l(ps," \u2014 Distributed on multiple CPU nodes."),ps.forEach(a),Co=d(G),st=o(G,"LI",{});var us=s(st);Zt=o(us,"STRONG",{});var fn=s(Zt);Bo=l(fn,"MULTI_GPU"),fn.forEach(a),Go=l(us," \u2014 Distributed on multiple GPUs."),us.forEach(a),qo=d(G),nt=o(G,"LI",{});var ms=s(nt);ea=o(ms,"STRONG",{});var gn=s(ea);Fo=l(gn,"DEEPSPEED"),gn.forEach(a),Wo=l(ms," \u2014 Using DeepSpeed."),ms.forEach(a),Ro=d(G),lt=o(G,"LI",{});var fs=s(lt);ta=o(fs,"STRONG",{});var vn=s(ta);Vo=l(vn,"TPU"),vn.forEach(a),Ho=l(fs," \u2014 Distributed on TPUs."),fs.forEach(a),G.forEach(a),Ee.forEach(a),Ia=d(e),te=o(e,"H2",{class:!0});var rr=s(te);be=o(rr,"A",{id:!0,class:!0,href:!0});var _n=s(be);aa=o(_n,"SPAN",{});var bn=s(aa);f(Me.$$.fragment,bn),bn.forEach(a),_n.forEach(a),Mo=d(rr),ra=o(rr,"SPAN",{});var $n=s(ra);jo=l($n,"Utilities"),$n.forEach(a),rr.forEach(a),La=d(e),ae=o(e,"DIV",{class:!0});var or=s(ae);f(je.$$.fragment,or),Xo=d(or),oa=o(or,"P",{});var yn=s(oa);Jo=l(yn,"Extract a model from its distributed containers."),yn.forEach(a),or.forEach(a),ka=d(e),re=o(e,"DIV",{class:!0});var sr=s(re);f(Xe.$$.fragment,sr),Ko=d(sr),sa=o(sr,"P",{});var wn=s(sa);Qo=l(wn,"Recursively gather tensor in a nested list/tuple/dictionary of tensors from all devices."),wn.forEach(a),sr.forEach(a),Na=d(e),oe=o(e,"DIV",{class:!0});var nr=s(oe);f(Je.$$.fragment,nr),Yo=d(nr),na=o(nr,"P",{});var En=s(na);Zo=l(En,"Recursively sends the elements in a nested list/tuple/dictionary of tensors to a given device."),En.forEach(a),nr.forEach(a),Oa=d(e),se=o(e,"DIV",{class:!0});var lr=s(se);f(Ke.$$.fragment,lr),es=d(lr),U=o(lr,"P",{});var Se=s(U);ts=l(Se,"Helper function for reproducible behavior to set the seed in "),la=o(Se,"CODE",{});var Sn=s(la);as=l(Sn,"random"),Sn.forEach(a),rs=l(Se,", "),ca=o(Se,"CODE",{});var Dn=s(ca);os=l(Dn,"numpy"),Dn.forEach(a),ss=l(Se,", "),ia=o(Se,"CODE",{});var xn=s(ia);ns=l(xn,"torch"),xn.forEach(a),ls=l(Se,"."),Se.forEach(a),lr.forEach(a),Ua=d(e),Qe=o(e,"DIV",{class:!0});var Tn=s(Qe);f(Ye.$$.fragment,Tn),Tn.forEach(a),Ca=d(e),Ze=o(e,"DIV",{class:!0});var An=s(Ze);f(et.$$.fragment,An),An.forEach(a),Ba=d(e),C=o(e,"DIV",{class:!0});var pt=s(C);f(tt.$$.fragment,pt),cs=d(pt),da=o(pt,"P",{});var zn=s(da);is=l(zn,"Introduces a blocking point in the script, making sure all processes have reached this point before continuing."),zn.forEach(a),ds=d(pt),f($e.$$.fragment,pt),pt.forEach(a),this.h()},h(){h(u,"name","hf:doc:metadata"),h(u,"content",JSON.stringify(Gn)),h(y,"id","internals"),h(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(y,"href","#internals"),h($,"class","relative group"),h(le,"id","accelerate.optimizer.AcceleratedOptimizer"),h(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(le,"href","#accelerate.optimizer.AcceleratedOptimizer"),h(q,"class","relative group"),h(F,"class","docstring"),h(ce,"id","accelerate.data_loader.prepare_data_loader"),h(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ce,"href","#accelerate.data_loader.prepare_data_loader"),h(W,"class","relative group"),h(A,"class","docstring"),h(he,"id","accelerate.data_loader.DataLoaderShard"),h(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(he,"href","#accelerate.data_loader.DataLoaderShard"),h(V,"class","relative group"),h(H,"class","docstring"),h(pe,"id","accelerate.data_loader.BatchSamplerShard"),h(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(pe,"href","#accelerate.data_loader.BatchSamplerShard"),h(M,"class","relative group"),h(k,"class","docstring"),h(me,"id","accelerate.data_loader.IterableDatasetShard"),h(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(me,"href","#accelerate.data_loader.IterableDatasetShard"),h(j,"class","relative group"),h(X,"class","docstring"),h(fe,"id","accelerate.scheduler.AcceleratedScheduler"),h(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(fe,"href","#accelerate.scheduler.AcceleratedScheduler"),h(J,"class","relative group"),h(O,"class","docstring"),h(ge,"id","distributed-config"),h(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ge,"href","#distributed-config"),h(K,"class","relative group"),h(ve,"id","accelerate.state.AcceleratorState"),h(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ve,"href","#accelerate.state.AcceleratorState"),h(Q,"class","relative group"),h(Re,"href","https://en.wikipedia.org/wiki/Singleton_pattern"),h(Re,"rel","nofollow"),h(Y,"class","docstring"),h(_e,"id","accelerate.DistributedType"),h(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(_e,"href","#accelerate.DistributedType"),h(ee,"class","relative group"),h(z,"class","docstring"),h(be,"id","accelerate.utils.extract_model_from_parallel"),h(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(be,"href","#accelerate.utils.extract_model_from_parallel"),h(te,"class","relative group"),h(ae,"class","docstring"),h(re,"class","docstring"),h(oe,"class","docstring"),h(se,"class","docstring"),h(Qe,"class","docstring"),h(Ze,"class","docstring"),h(C,"class","docstring")},m(e,c){t(document.head,u),p(e,S,c),p(e,$,c),t($,y),t(y,T),g(w,T,null),t($,E),t($,L),t(L,cr),p(e,ua,c),p(e,q,c),t(q,le),t(le,ut),g(De,ut,null),t(q,ir),t(q,mt),t(mt,dr),p(e,ma,c),p(e,F,c),g(xe,F,null),t(F,hr),t(F,ft),t(ft,pr),p(e,fa,c),p(e,W,c),t(W,ce),t(ce,gt),g(Te,gt,null),t(W,ur),t(W,vt),t(vt,mr),p(e,ga,c),p(e,ie,c),t(ie,fr),t(ie,_t),t(_t,gr),t(ie,vr),p(e,va,c),p(e,A,c),g(Ae,A,null),t(A,_r),t(A,ze),t(ze,br),t(ze,bt),t(bt,$r),t(ze,yr),t(A,wr),t(A,R),t(R,Er),t(R,$t),t($t,Sr),t(R,Dr),t(R,yt),t(yt,xr),t(R,Tr),t(A,Ar),g(de,A,null),p(e,_a,c),p(e,V,c),t(V,he),t(he,wt),g(Pe,wt,null),t(V,zr),t(V,Et),t(Et,Pr),p(e,ba,c),p(e,H,c),g(Ie,H,null),t(H,Ir),t(H,Le),t(Le,Lr),t(Le,St),t(St,kr),t(Le,Nr),p(e,$a,c),p(e,M,c),t(M,pe),t(pe,Dt),g(ke,Dt,null),t(M,Or),t(M,xt),t(xt,Ur),p(e,ya,c),p(e,k,c),g(Ne,k,null),t(k,Cr),t(k,N),t(N,Br),t(N,Tt),t(Tt,Gr),t(N,qr),t(N,At),t(At,Fr),t(N,Wr),t(N,zt),t(zt,Rr),t(N,Vr),t(k,Hr),g(ue,k,null),p(e,wa,c),p(e,j,c),t(j,me),t(me,Pt),g(Oe,Pt,null),t(j,Mr),t(j,It),t(It,jr),p(e,Ea,c),p(e,X,c),g(Ue,X,null),t(X,Xr),t(X,D),t(D,Jr),t(D,Lt),t(Lt,Kr),t(D,Qr),t(D,kt),t(kt,Yr),t(D,Zr),t(D,Nt),t(Nt,eo),t(D,to),t(D,Ot),t(Ot,ao),t(D,ro),t(D,Ut),t(Ut,oo),t(D,so),p(e,Sa,c),p(e,J,c),t(J,fe),t(fe,Ct),g(Ce,Ct,null),t(J,no),t(J,Bt),t(Bt,lo),p(e,Da,c),p(e,O,c),g(Be,O,null),t(O,co),t(O,Gt),t(Gt,io),t(O,ho),t(O,Ge),t(Ge,qt),t(qt,po),t(Ge,uo),t(Ge,Ft),t(Ft,mo),p(e,xa,c),p(e,K,c),t(K,ge),t(ge,Wt),g(qe,Wt,null),t(K,fo),t(K,Rt),t(Rt,go),p(e,Ta,c),p(e,Q,c),t(Q,ve),t(ve,Vt),g(Fe,Vt,null),t(Q,vo),t(Q,Ht),t(Ht,_o),p(e,Aa,c),p(e,Y,c),g(We,Y,null),t(Y,bo),t(Y,Z),t(Z,$o),t(Z,Re),t(Re,yo),t(Z,wo),t(Z,Mt),t(Mt,Eo),t(Z,So),p(e,za,c),p(e,ee,c),t(ee,_e),t(_e,jt),g(Ve,jt,null),t(ee,Do),t(ee,Xt),t(Xt,xo),p(e,Pa,c),p(e,z,c),g(He,z,null),t(z,To),t(z,Jt),t(Jt,Ao),t(z,zo),t(z,Kt),t(Kt,Po),t(z,Io),t(z,P),t(P,rt),t(rt,Qt),t(Qt,Lo),t(rt,ko),t(P,No),t(P,ot),t(ot,Yt),t(Yt,Oo),t(ot,Uo),t(P,Co),t(P,st),t(st,Zt),t(Zt,Bo),t(st,Go),t(P,qo),t(P,nt),t(nt,ea),t(ea,Fo),t(nt,Wo),t(P,Ro),t(P,lt),t(lt,ta),t(ta,Vo),t(lt,Ho),p(e,Ia,c),p(e,te,c),t(te,be),t(be,aa),g(Me,aa,null),t(te,Mo),t(te,ra),t(ra,jo),p(e,La,c),p(e,ae,c),g(je,ae,null),t(ae,Xo),t(ae,oa),t(oa,Jo),p(e,ka,c),p(e,re,c),g(Xe,re,null),t(re,Ko),t(re,sa),t(sa,Qo),p(e,Na,c),p(e,oe,c),g(Je,oe,null),t(oe,Yo),t(oe,na),t(na,Zo),p(e,Oa,c),p(e,se,c),g(Ke,se,null),t(se,es),t(se,U),t(U,ts),t(U,la),t(la,as),t(U,rs),t(U,ca),t(ca,os),t(U,ss),t(U,ia),t(ia,ns),t(U,ls),p(e,Ua,c),p(e,Qe,c),g(Ye,Qe,null),p(e,Ca,c),p(e,Ze,c),g(et,Ze,null),p(e,Ba,c),p(e,C,c),g(tt,C,null),t(C,cs),t(C,da),t(da,is),t(C,ds),g($e,C,null),Ga=!0},p(e,[c]){const at={};c&2&&(at.$$scope={dirty:c,ctx:e}),de.$set(at);const ha={};c&2&&(ha.$$scope={dirty:c,ctx:e}),ue.$set(ha);const pa={};c&2&&(pa.$$scope={dirty:c,ctx:e}),$e.$set(pa)},i(e){Ga||(v(w.$$.fragment,e),v(De.$$.fragment,e),v(xe.$$.fragment,e),v(Te.$$.fragment,e),v(Ae.$$.fragment,e),v(de.$$.fragment,e),v(Pe.$$.fragment,e),v(Ie.$$.fragment,e),v(ke.$$.fragment,e),v(Ne.$$.fragment,e),v(ue.$$.fragment,e),v(Oe.$$.fragment,e),v(Ue.$$.fragment,e),v(Ce.$$.fragment,e),v(Be.$$.fragment,e),v(qe.$$.fragment,e),v(Fe.$$.fragment,e),v(We.$$.fragment,e),v(Ve.$$.fragment,e),v(He.$$.fragment,e),v(Me.$$.fragment,e),v(je.$$.fragment,e),v(Xe.$$.fragment,e),v(Je.$$.fragment,e),v(Ke.$$.fragment,e),v(Ye.$$.fragment,e),v(et.$$.fragment,e),v(tt.$$.fragment,e),v($e.$$.fragment,e),Ga=!0)},o(e){_(w.$$.fragment,e),_(De.$$.fragment,e),_(xe.$$.fragment,e),_(Te.$$.fragment,e),_(Ae.$$.fragment,e),_(de.$$.fragment,e),_(Pe.$$.fragment,e),_(Ie.$$.fragment,e),_(ke.$$.fragment,e),_(Ne.$$.fragment,e),_(ue.$$.fragment,e),_(Oe.$$.fragment,e),_(Ue.$$.fragment,e),_(Ce.$$.fragment,e),_(Be.$$.fragment,e),_(qe.$$.fragment,e),_(Fe.$$.fragment,e),_(We.$$.fragment,e),_(Ve.$$.fragment,e),_(He.$$.fragment,e),_(Me.$$.fragment,e),_(je.$$.fragment,e),_(Xe.$$.fragment,e),_(Je.$$.fragment,e),_(Ke.$$.fragment,e),_(Ye.$$.fragment,e),_(et.$$.fragment,e),_(tt.$$.fragment,e),_($e.$$.fragment,e),Ga=!1},d(e){a(u),e&&a(S),e&&a($),b(w),e&&a(ua),e&&a(q),b(De),e&&a(ma),e&&a(F),b(xe),e&&a(fa),e&&a(W),b(Te),e&&a(ga),e&&a(ie),e&&a(va),e&&a(A),b(Ae),b(de),e&&a(_a),e&&a(V),b(Pe),e&&a(ba),e&&a(H),b(Ie),e&&a($a),e&&a(M),b(ke),e&&a(ya),e&&a(k),b(Ne),b(ue),e&&a(wa),e&&a(j),b(Oe),e&&a(Ea),e&&a(X),b(Ue),e&&a(Sa),e&&a(J),b(Ce),e&&a(Da),e&&a(O),b(Be),e&&a(xa),e&&a(K),b(qe),e&&a(Ta),e&&a(Q),b(Fe),e&&a(Aa),e&&a(Y),b(We),e&&a(za),e&&a(ee),b(Ve),e&&a(Pa),e&&a(z),b(He),e&&a(Ia),e&&a(te),b(Me),e&&a(La),e&&a(ae),b(je),e&&a(ka),e&&a(re),b(Xe),e&&a(Na),e&&a(oe),b(Je),e&&a(Oa),e&&a(se),b(Ke),e&&a(Ua),e&&a(Qe),b(Ye),e&&a(Ca),e&&a(Ze),b(et),e&&a(Ba),e&&a(C),b(tt),b($e)}}}const Gn={local:"internals",sections:[{local:"accelerate.optimizer.AcceleratedOptimizer",title:"Optimizer"},{local:"accelerate.data_loader.prepare_data_loader",sections:[{local:"accelerate.data_loader.DataLoaderShard",title:"BatchSamplerShard"},{local:"accelerate.data_loader.BatchSamplerShard",title:"BatchSamplerShard"},{local:"accelerate.data_loader.IterableDatasetShard",title:"IterableDatasetShard"}],title:"DataLoader"},{local:"accelerate.scheduler.AcceleratedScheduler",title:"Scheduler"},{local:"distributed-config",sections:[{local:"accelerate.state.AcceleratorState",title:"AcceleratorState"},{local:"accelerate.DistributedType",title:"DistributedType"}],title:"Distributed Config"},{local:"accelerate.utils.extract_model_from_parallel",title:"Utilities"}],title:"Internals"};function qn(ne){return Nn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Hn extends Pn{constructor(u){super();In(this,u,qn,Bn,Ln,{})}}export{Hn as default,Gn as metadata};
