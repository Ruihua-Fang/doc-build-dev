import{S as Jn,i as Kn,s as Qn,e as s,k as i,w as m,t as r,M as Xn,c as n,d as a,m as p,a as l,x as h,h as o,b as u,F as t,g as d,y as f,L as Yn,q as g,o as _,B as v,v as Zn}from"../chunks/vendor-19e06bd2.js";import{D as E}from"../chunks/Docstring-395e5a9c.js";import{C as V}from"../chunks/CodeBlock-9dd1fdfb.js";import{I as pr}from"../chunks/IconCopyLink-3c713d38.js";function el(Rs){let P,ta,O,W,it,ne,dr,pt,ur,aa,le,mr,Je,hr,ra,I,G,dt,ce,fr,ut,gr,oa,R,_r,mt,vr,yr,sa,k,ie,kr,q,$r,ht,br,wr,ft,Er,Tr,Ar,U,pe,jr,de,Cr,gt,Dr,xr,Lr,H,ue,Pr,me,Or,_t,Ir,qr,Br,F,he,Sr,fe,zr,vt,Nr,Mr,na,$,ge,Vr,B,Wr,yt,Gr,Rr,kt,Ur,Hr,Fr,J,_e,Jr,ve,Kr,$t,Qr,Xr,Yr,K,ye,Zr,ke,eo,bt,to,ao,ro,Q,$e,oo,be,so,wt,no,lo,la,y,we,co,S,io,Et,po,uo,Tt,mo,ho,fo,At,go,_o,X,Ee,vo,Te,yo,jt,ko,$o,bo,Y,Ae,wo,je,Eo,Ct,To,Ao,jo,Z,Ce,Co,De,Do,Dt,xo,Lo,ca,T,Po,xt,Oo,Io,Lt,qo,Bo,ia,xe,pa,ee,So,Ke,zo,No,da,Le,ua,A,Mo,Qe,Vo,Wo,Pt,Go,Ro,ma,Pe,ha,te,Uo,Xe,Ho,Fo,fa,Oe,ga,Ye,Jo,_a,Ie,va,z,ae,Ot,qe,Ko,It,Qo,ya,j,Xo,qt,Yo,Zo,Bt,es,ts,ka,C,Be,St,as,rs,Se,ze,os,zt,ss,ns,ls,Ne,cs,Nt,is,ps,ds,Me,Mt,us,ms,Vt,Ve,hs,Wt,fs,gs,_s,We,Gt,vs,ys,Rt,N,ks,Ut,$s,bs,Ht,ws,Es,$a,Ze,Ts,ba,Ge,wa,b,As,Ft,js,Cs,Jt,Ds,xs,Kt,Ls,Ps,Ea,Re,Ta,re,Os,Qt,Is,qs,Aa,Ue,ja,M,oe,Xt,He,Bs,Yt,Ss,Ca,D,zs,Zt,Ns,Ms,ea,Vs,Ws,Da,Fe,xa;return ne=new pr({}),ce=new pr({}),ie=new E({props:{name:"class accelerate.tracking.TensorBoardTracker",anchor:"accelerate.tracking.TensorBoardTracker",parameters:[{name:"run_name",val:": str"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = ''"}],source:"https://github.com/huggingface/accelerate/blob/pr_308/src/accelerate/tracking.py#L92",parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run`,name:"run_name"},{anchor:"accelerate.tracking.TensorBoardTracker.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>) &#x2014;
Location for TensorBoard logs to be stored.`,name:"logging_dir"}]}}),pe=new E({props:{name:"finish",anchor:"accelerate.tracking.TensorBoardTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_308/src/accelerate/tracking.py#L143"}}),ue=new E({props:{name:"log",anchor:"accelerate.tracking.TensorBoardTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_308/src/accelerate/tracking.py#L125",parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.TensorBoardTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}]}}),he=new E({props:{name:"store_init_configuration",anchor:"accelerate.tracking.TensorBoardTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],source:"https://github.com/huggingface/accelerate/blob/pr_308/src/accelerate/tracking.py#L112",parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}]}}),ge=new E({props:{name:"class accelerate.tracking.WandBTracker",anchor:"accelerate.tracking.WandBTracker",parameters:[{name:"run_name",val:": str"}],source:"https://github.com/huggingface/accelerate/blob/pr_308/src/accelerate/tracking.py#L151",parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run.`,name:"run_name"}]}}),_e=new E({props:{name:"finish",anchor:"accelerate.tracking.WandBTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_308/src/accelerate/tracking.py#L193"}}),ye=new E({props:{name:"log",anchor:"accelerate.tracking.WandBTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_308/src/accelerate/tracking.py#L180",parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.WandBTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}]}}),$e=new E({props:{name:"store_init_configuration",anchor:"accelerate.tracking.WandBTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],source:"https://github.com/huggingface/accelerate/blob/pr_308/src/accelerate/tracking.py#L168",parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}]}}),we=new E({props:{name:"class accelerate.tracking.CometMLTracker",anchor:"accelerate.tracking.CometMLTracker",parameters:[{name:"run_name",val:": str"}],source:"https://github.com/huggingface/accelerate/blob/pr_308/src/accelerate/tracking.py#L201",parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run.`,name:"run_name"}]}}),Ee=new E({props:{name:"finish",anchor:"accelerate.tracking.CometMLTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_308/src/accelerate/tracking.py#L247"}}),Ae=new E({props:{name:"log",anchor:"accelerate.tracking.CometMLTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/accelerate/blob/pr_308/src/accelerate/tracking.py#L232",parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.CometMLTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}]}}),Ce=new E({props:{name:"store_init_configuration",anchor:"accelerate.tracking.CometMLTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],source:"https://github.com/huggingface/accelerate/blob/pr_308/src/accelerate/tracking.py#L220",parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}]}}),xe=new V({props:{code:`from accelerate import Accelerate
from accelerate.utils import LoggerType

accelerator = Accelerate(log_with="all")  # For all available trackers in the environment
accelerator = Accelerate(log_with="wandb")
accelerator = Accelerate(log_with=["wandb", LoggerType.TENSORBOARD])`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerate
<span class="hljs-keyword">from</span> accelerate.utils <span class="hljs-keyword">import</span> LoggerType

accelerator = Accelerate(log_with=<span class="hljs-string">&quot;all&quot;</span>)  <span class="hljs-comment"># For all available trackers in the environment</span>
accelerator = Accelerate(log_with=<span class="hljs-string">&quot;wandb&quot;</span>)
accelerator = Accelerate(log_with=[<span class="hljs-string">&quot;wandb&quot;</span>, LoggerType.TENSORBOARD])`}}),Le=new V({props:{code:`hps = {"num_iterations": 5, "learning_rate": 1e-2}
accelerator.init_trackers("my_project", config=hps)`,highlighted:`hps = {<span class="hljs-string">&quot;num_iterations&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;learning_rate&quot;</span>: <span class="hljs-number">1e-2</span>}
accelerator.init_trackers(<span class="hljs-string">&quot;my_project&quot;</span>, config=hps)`}}),Pe=new V({props:{code:'accelerator.log({"train_loss": 1.12, "valid_loss": 0.8}, step=1)',highlighted:'accelerator.log({<span class="hljs-string">&quot;train_loss&quot;</span>: <span class="hljs-number">1.12</span>, <span class="hljs-string">&quot;valid_loss&quot;</span>: <span class="hljs-number">0.8</span>}, step=<span class="hljs-number">1</span>)'}}),Oe=new V({props:{code:"accelerator.end_training()",highlighted:"accelerator.end_training()"}}),Ie=new V({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(log_with="all")
config = {
    "num_iterations": 5,
    "learning_rate": 1e-2,
    "loss_function": str(my_loss_function),
}

accelerator.init_trackers("example_project", config=config)

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

for iteration in config["num_iterations"]:
    for step, batch in my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        accelerator.backward(loss)
        my_optimizer.step()
        accelerator.log({"training_loss": loss}, step=step)
accelerator.end_training()`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

accelerator = Accelerator(log_with=<span class="hljs-string">&quot;all&quot;</span>)
config = {
    <span class="hljs-string">&quot;num_iterations&quot;</span>: <span class="hljs-number">5</span>,
    <span class="hljs-string">&quot;learning_rate&quot;</span>: <span class="hljs-number">1e-2</span>,
    <span class="hljs-string">&quot;loss_function&quot;</span>: <span class="hljs-built_in">str</span>(my_loss_function),
}

accelerator.init_trackers(<span class="hljs-string">&quot;example_project&quot;</span>, config=config)

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

<span class="hljs-keyword">for</span> iteration <span class="hljs-keyword">in</span> config[<span class="hljs-string">&quot;num_iterations&quot;</span>]:
    <span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        accelerator.backward(loss)
        my_optimizer.step()
        accelerator.log({<span class="hljs-string">&quot;training_loss&quot;</span>: loss}, step=step)
accelerator.end_training()`}}),qe=new pr({}),Ge=new V({props:{code:`from accelerate.tracking import GeneralTracker
from typing import Optional

import wandb


class MyCustomTracker(GeneralTracker):
    def __init__(self, run_name: str):
        self.run_name = run_name
        wandb.init(self.run_name)

    def store_init_configuration(self, values: dict):
        wandb.config(values)

    def log(self, values: dict, step: Optional[int] = None):
        wandb.log(values, step=step)`,highlighted:`<span class="hljs-keyword">from</span> accelerate.tracking <span class="hljs-keyword">import</span> GeneralTracker
<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span>

<span class="hljs-keyword">import</span> wandb


<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCustomTracker</span>(<span class="hljs-title class_ inherited__">GeneralTracker</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, run_name: <span class="hljs-built_in">str</span></span>):
        self.run_name = run_name
        wandb.init(self.run_name)

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">store_init_configuration</span>(<span class="hljs-params">self, values: <span class="hljs-built_in">dict</span></span>):
        wandb.config(values)

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">self, values: <span class="hljs-built_in">dict</span>, step: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span></span>):
        wandb.log(values, step=step)`}}),Re=new V({props:{code:`tracker = MyCustomTracker("some_run_name")
accelerator = Accelerate(log_with=tracker)`,highlighted:`tracker = MyCustomTracker(<span class="hljs-string">&quot;some_run_name&quot;</span>)
accelerator = Accelerate(log_with=tracker)`}}),Ue=new V({props:{code:`tracker = MyCustomTracker("some_run_name")
accelerator = Accelerate(log_with=[tracker, "all"])`,highlighted:`tracker = MyCustomTracker(<span class="hljs-string">&quot;some_run_name&quot;</span>)
accelerator = Accelerate(log_with=[tracker, <span class="hljs-string">&quot;all&quot;</span>])`}}),He=new pr({}),Fe=new V({props:{code:`from accelerate import Accelerator
+ import neptune.new as neptune

accelerator = Accelerator()
+ run = neptune.init(...)

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

for iteration in config["num_iterations"]:
    for batch in my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        total_loss += loss
        accelerator.backward(loss)
        my_optimizer.step()
+       if accelerator.is_main_process:
+           run["logs/training/batch/loss"].log(loss)`,highlighted:`from accelerate import Accelerator
<span class="hljs-addition">+ import neptune.new as neptune</span>

accelerator = Accelerator()
<span class="hljs-addition">+ run = neptune.init(...)</span>

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

for iteration in config[&quot;num_iterations&quot;]:
    for batch in my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        total_loss += loss
        accelerator.backward(loss)
        my_optimizer.step()
<span class="hljs-addition">+       if accelerator.is_main_process:</span>
<span class="hljs-addition">+           run[&quot;logs/training/batch/loss&quot;].log(loss)</span>`}}),{c(){P=s("meta"),ta=i(),O=s("h1"),W=s("a"),it=s("span"),m(ne.$$.fragment),dr=i(),pt=s("span"),ur=r("Tracking"),aa=i(),le=s("p"),mr=r(`There are a large number of experiment tracking API\u2019s available, however getting them all to work with in a multi-processing environment can oftentimes be complex.
Accelerate provides a general tracking API that can be used to log useful items during your script through `),Je=s("a"),hr=r("log()"),ra=i(),I=s("h2"),G=s("a"),dt=s("span"),m(ce.$$.fragment),fr=i(),ut=s("span"),gr=r("Integrated Trackers"),oa=i(),R=s("p"),_r=r("Currently "),mt=s("code"),vr=r("Accelerate"),yr=r(" supports three trackers out-of-the-box:"),sa=i(),k=s("div"),m(ie.$$.fragment),kr=i(),q=s("p"),$r=r("A "),ht=s("code"),br=r("Tracker"),wr=r(" class that supports "),ft=s("code"),Er=r("tensorboard"),Tr=r(". Should be initialized at the start of your script."),Ar=i(),U=s("div"),m(pe.$$.fragment),jr=i(),de=s("p"),Cr=r("Closes "),gt=s("code"),Dr=r("TensorBoard"),xr=r(" writer"),Lr=i(),H=s("div"),m(ue.$$.fragment),Pr=i(),me=s("p"),Or=r("Logs "),_t=s("code"),Ir=r("values"),qr=r(" to the current run."),Br=i(),F=s("div"),m(he.$$.fragment),Sr=i(),fe=s("p"),zr=r("Logs "),vt=s("code"),Nr=r("values"),Mr=r(" as hyperparameters for the run. Should be run at the beginning of your experiment."),na=i(),$=s("div"),m(ge.$$.fragment),Vr=i(),B=s("p"),Wr=r("A "),yt=s("code"),Gr=r("Tracker"),Rr=r(" class that supports "),kt=s("code"),Ur=r("wandb"),Hr=r(". Should be initialized at the start of your script."),Fr=i(),J=s("div"),m(_e.$$.fragment),Jr=i(),ve=s("p"),Kr=r("Closes "),$t=s("code"),Qr=r("wandb"),Xr=r(" writer"),Yr=i(),K=s("div"),m(ye.$$.fragment),Zr=i(),ke=s("p"),eo=r("Logs "),bt=s("code"),to=r("values"),ao=r(" to the current run."),ro=i(),Q=s("div"),m($e.$$.fragment),oo=i(),be=s("p"),so=r("Logs "),wt=s("code"),no=r("values"),lo=r(" as hyperparameters for the run. Should be run at the beginning of your experiment."),la=i(),y=s("div"),m(we.$$.fragment),co=i(),S=s("p"),io=r("A "),Et=s("code"),po=r("Tracker"),uo=r(" class that supports "),Tt=s("code"),mo=r("comet_ml"),ho=r(". Should be initialized at the start of your script."),fo=i(),At=s("p"),go=r("API keys must be stored in a Comet config file."),_o=i(),X=s("div"),m(Ee.$$.fragment),vo=i(),Te=s("p"),yo=r("Closes "),jt=s("code"),ko=r("comet-ml"),$o=r(" writer"),bo=i(),Y=s("div"),m(Ae.$$.fragment),wo=i(),je=s("p"),Eo=r("Logs "),Ct=s("code"),To=r("values"),Ao=r(" to the current run."),jo=i(),Z=s("div"),m(Ce.$$.fragment),Co=i(),De=s("p"),Do=r("Logs "),Dt=s("code"),xo=r("values"),Lo=r(" as hyperparameters for the run. Should be run at the beginning of your experiment."),ca=i(),T=s("p"),Po=r("To use any of them, pass in the selected type(s) to the "),xt=s("code"),Oo=r("log_with"),Io=r(" parameter in "),Lt=s("code"),qo=r("Accelerate"),Bo=r(":"),ia=i(),m(xe.$$.fragment),pa=i(),ee=s("p"),So=r("At the start of your experiment "),Ke=s("a"),zo=r("init_trackers()"),No=r(" should be used to setup your project, and potentially add any experiment hyperparameters to be logged:"),da=i(),m(Le.$$.fragment),ua=i(),A=s("p"),Mo=r("When you are ready to log any data, "),Qe=s("a"),Vo=r("log()"),Wo=r(` should be used.
A `),Pt=s("code"),Go=r("step"),Ro=r(" can also be passed in to correlate the data with a particular step in the training loop."),ma=i(),m(Pe.$$.fragment),ha=i(),te=s("p"),Uo=r("Once you\u2019ve finished training, make sure to run "),Xe=s("a"),Ho=r("end_training()"),Fo=r(" so that all the trackers can run their finish functionalities if they have any."),fa=i(),m(Oe.$$.fragment),ga=i(),Ye=s("p"),Jo=r("A full example is below:"),_a=i(),m(Ie.$$.fragment),va=i(),z=s("h2"),ae=s("a"),Ot=s("span"),m(qe.$$.fragment),Ko=i(),It=s("span"),Qo=r("Implementing Custom Trackers"),ya=i(),j=s("p"),Xo=r("To implement a new tracker to be used in "),qt=s("code"),Yo=r("Accelerator"),Zo=r(", a new one can be made through implementing the "),Bt=s("code"),es=r("~GeneralTracker"),ts=r(` class.
Every tracker must implement three functions:`),ka=i(),C=s("ul"),Be=s("li"),St=s("code"),as=r("__init__"),rs=r(": "),Se=s("ul"),ze=s("li"),os=r("Should store a "),zt=s("code"),ss=r("run_name"),ns=r(" and initialize the tracker API of the integrated library."),ls=i(),Ne=s("li"),cs=r("If a tracker stores their data locally (such as TensorBoard), a "),Nt=s("code"),is=r("logging_dir"),ps=r(" parameter can be added."),ds=i(),Me=s("li"),Mt=s("code"),us=r("store_init_configuration"),ms=r(": "),Vt=s("ul"),Ve=s("li"),hs=r("Should take in a "),Wt=s("code"),fs=r("values"),gs=r(" dictionary and store them as a one-time experiment configuration"),_s=i(),We=s("li"),Gt=s("code"),vs=r("log"),ys=r(": "),Rt=s("ul"),N=s("li"),ks=r("Should take in a "),Ut=s("code"),$s=r("values"),bs=r(" dictionary and a "),Ht=s("code"),ws=r("step"),Es=r(", and should log them to the run"),$a=i(),Ze=s("p"),Ts=r("A brief example can be seen below with an integration with Weights and Biases, containing only the relevent information:"),ba=i(),m(Ge.$$.fragment),wa=i(),b=s("p"),As=r("When you are ready to build your "),Ft=s("code"),js=r("Accelerator"),Cs=r(" object, pass in an "),Jt=s("strong"),Ds=r("instance"),xs=r(" of your tracker to "),Kt=s("code"),Ls=r("log_with"),Ps=r(` to have it automatically
be used with the API:`),Ea=i(),m(Re.$$.fragment),Ta=i(),re=s("p"),Os=r("These also can be mixed with existing trackers, including with "),Qt=s("code"),Is=r('"all"'),qs=r(":"),Aa=i(),m(Ue.$$.fragment),ja=i(),M=s("h2"),oe=s("a"),Xt=s("span"),m(He.$$.fragment),Bs=i(),Yt=s("span"),Ss=r("When a wrapper cannot work"),Ca=i(),D=s("p"),zs=r("If a library has an API that does not follow a strict "),Zt=s("code"),Ns=r(".log"),Ms=r(" with an overall dictionary such as Neptune.AI, logging can be done manually under an "),ea=s("code"),Vs=r("if accelerator.is_main_process"),Ws=r(" statement:"),Da=i(),m(Fe.$$.fragment),this.h()},l(e){const c=Xn('[data-svelte="svelte-1phssyn"]',document.head);P=n(c,"META",{name:!0,content:!0}),c.forEach(a),ta=p(e),O=n(e,"H1",{class:!0});var La=l(O);W=n(La,"A",{id:!0,class:!0,href:!0});var Us=l(W);it=n(Us,"SPAN",{});var Hs=l(it);h(ne.$$.fragment,Hs),Hs.forEach(a),Us.forEach(a),dr=p(La),pt=n(La,"SPAN",{});var Fs=l(pt);ur=o(Fs,"Tracking"),Fs.forEach(a),La.forEach(a),aa=p(e),le=n(e,"P",{});var Gs=l(le);mr=o(Gs,`There are a large number of experiment tracking API\u2019s available, however getting them all to work with in a multi-processing environment can oftentimes be complex.
Accelerate provides a general tracking API that can be used to log useful items during your script through `),Je=n(Gs,"A",{href:!0});var Js=l(Je);hr=o(Js,"log()"),Js.forEach(a),Gs.forEach(a),ra=p(e),I=n(e,"H2",{class:!0});var Pa=l(I);G=n(Pa,"A",{id:!0,class:!0,href:!0});var Ks=l(G);dt=n(Ks,"SPAN",{});var Qs=l(dt);h(ce.$$.fragment,Qs),Qs.forEach(a),Ks.forEach(a),fr=p(Pa),ut=n(Pa,"SPAN",{});var Xs=l(ut);gr=o(Xs,"Integrated Trackers"),Xs.forEach(a),Pa.forEach(a),oa=p(e),R=n(e,"P",{});var Oa=l(R);_r=o(Oa,"Currently "),mt=n(Oa,"CODE",{});var Ys=l(mt);vr=o(Ys,"Accelerate"),Ys.forEach(a),yr=o(Oa," supports three trackers out-of-the-box:"),Oa.forEach(a),sa=p(e),k=n(e,"DIV",{class:!0});var x=l(k);h(ie.$$.fragment,x),kr=p(x),q=n(x,"P",{});var et=l(q);$r=o(et,"A "),ht=n(et,"CODE",{});var Zs=l(ht);br=o(Zs,"Tracker"),Zs.forEach(a),wr=o(et," class that supports "),ft=n(et,"CODE",{});var en=l(ft);Er=o(en,"tensorboard"),en.forEach(a),Tr=o(et,". Should be initialized at the start of your script."),et.forEach(a),Ar=p(x),U=n(x,"DIV",{class:!0});var Ia=l(U);h(pe.$$.fragment,Ia),jr=p(Ia),de=n(Ia,"P",{});var qa=l(de);Cr=o(qa,"Closes "),gt=n(qa,"CODE",{});var tn=l(gt);Dr=o(tn,"TensorBoard"),tn.forEach(a),xr=o(qa," writer"),qa.forEach(a),Ia.forEach(a),Lr=p(x),H=n(x,"DIV",{class:!0});var Ba=l(H);h(ue.$$.fragment,Ba),Pr=p(Ba),me=n(Ba,"P",{});var Sa=l(me);Or=o(Sa,"Logs "),_t=n(Sa,"CODE",{});var an=l(_t);Ir=o(an,"values"),an.forEach(a),qr=o(Sa," to the current run."),Sa.forEach(a),Ba.forEach(a),Br=p(x),F=n(x,"DIV",{class:!0});var za=l(F);h(he.$$.fragment,za),Sr=p(za),fe=n(za,"P",{});var Na=l(fe);zr=o(Na,"Logs "),vt=n(Na,"CODE",{});var rn=l(vt);Nr=o(rn,"values"),rn.forEach(a),Mr=o(Na," as hyperparameters for the run. Should be run at the beginning of your experiment."),Na.forEach(a),za.forEach(a),x.forEach(a),na=p(e),$=n(e,"DIV",{class:!0});var L=l($);h(ge.$$.fragment,L),Vr=p(L),B=n(L,"P",{});var tt=l(B);Wr=o(tt,"A "),yt=n(tt,"CODE",{});var on=l(yt);Gr=o(on,"Tracker"),on.forEach(a),Rr=o(tt," class that supports "),kt=n(tt,"CODE",{});var sn=l(kt);Ur=o(sn,"wandb"),sn.forEach(a),Hr=o(tt,". Should be initialized at the start of your script."),tt.forEach(a),Fr=p(L),J=n(L,"DIV",{class:!0});var Ma=l(J);h(_e.$$.fragment,Ma),Jr=p(Ma),ve=n(Ma,"P",{});var Va=l(ve);Kr=o(Va,"Closes "),$t=n(Va,"CODE",{});var nn=l($t);Qr=o(nn,"wandb"),nn.forEach(a),Xr=o(Va," writer"),Va.forEach(a),Ma.forEach(a),Yr=p(L),K=n(L,"DIV",{class:!0});var Wa=l(K);h(ye.$$.fragment,Wa),Zr=p(Wa),ke=n(Wa,"P",{});var Ga=l(ke);eo=o(Ga,"Logs "),bt=n(Ga,"CODE",{});var ln=l(bt);to=o(ln,"values"),ln.forEach(a),ao=o(Ga," to the current run."),Ga.forEach(a),Wa.forEach(a),ro=p(L),Q=n(L,"DIV",{class:!0});var Ra=l(Q);h($e.$$.fragment,Ra),oo=p(Ra),be=n(Ra,"P",{});var Ua=l(be);so=o(Ua,"Logs "),wt=n(Ua,"CODE",{});var cn=l(wt);no=o(cn,"values"),cn.forEach(a),lo=o(Ua," as hyperparameters for the run. Should be run at the beginning of your experiment."),Ua.forEach(a),Ra.forEach(a),L.forEach(a),la=p(e),y=n(e,"DIV",{class:!0});var w=l(y);h(we.$$.fragment,w),co=p(w),S=n(w,"P",{});var at=l(S);io=o(at,"A "),Et=n(at,"CODE",{});var pn=l(Et);po=o(pn,"Tracker"),pn.forEach(a),uo=o(at," class that supports "),Tt=n(at,"CODE",{});var dn=l(Tt);mo=o(dn,"comet_ml"),dn.forEach(a),ho=o(at,". Should be initialized at the start of your script."),at.forEach(a),fo=p(w),At=n(w,"P",{});var un=l(At);go=o(un,"API keys must be stored in a Comet config file."),un.forEach(a),_o=p(w),X=n(w,"DIV",{class:!0});var Ha=l(X);h(Ee.$$.fragment,Ha),vo=p(Ha),Te=n(Ha,"P",{});var Fa=l(Te);yo=o(Fa,"Closes "),jt=n(Fa,"CODE",{});var mn=l(jt);ko=o(mn,"comet-ml"),mn.forEach(a),$o=o(Fa," writer"),Fa.forEach(a),Ha.forEach(a),bo=p(w),Y=n(w,"DIV",{class:!0});var Ja=l(Y);h(Ae.$$.fragment,Ja),wo=p(Ja),je=n(Ja,"P",{});var Ka=l(je);Eo=o(Ka,"Logs "),Ct=n(Ka,"CODE",{});var hn=l(Ct);To=o(hn,"values"),hn.forEach(a),Ao=o(Ka," to the current run."),Ka.forEach(a),Ja.forEach(a),jo=p(w),Z=n(w,"DIV",{class:!0});var Qa=l(Z);h(Ce.$$.fragment,Qa),Co=p(Qa),De=n(Qa,"P",{});var Xa=l(De);Do=o(Xa,"Logs "),Dt=n(Xa,"CODE",{});var fn=l(Dt);xo=o(fn,"values"),fn.forEach(a),Lo=o(Xa," as hyperparameters for the run. Should be run at the beginning of your experiment."),Xa.forEach(a),Qa.forEach(a),w.forEach(a),ca=p(e),T=n(e,"P",{});var rt=l(T);Po=o(rt,"To use any of them, pass in the selected type(s) to the "),xt=n(rt,"CODE",{});var gn=l(xt);Oo=o(gn,"log_with"),gn.forEach(a),Io=o(rt," parameter in "),Lt=n(rt,"CODE",{});var _n=l(Lt);qo=o(_n,"Accelerate"),_n.forEach(a),Bo=o(rt,":"),rt.forEach(a),ia=p(e),h(xe.$$.fragment,e),pa=p(e),ee=n(e,"P",{});var Ya=l(ee);So=o(Ya,"At the start of your experiment "),Ke=n(Ya,"A",{href:!0});var vn=l(Ke);zo=o(vn,"init_trackers()"),vn.forEach(a),No=o(Ya," should be used to setup your project, and potentially add any experiment hyperparameters to be logged:"),Ya.forEach(a),da=p(e),h(Le.$$.fragment,e),ua=p(e),A=n(e,"P",{});var ot=l(A);Mo=o(ot,"When you are ready to log any data, "),Qe=n(ot,"A",{href:!0});var yn=l(Qe);Vo=o(yn,"log()"),yn.forEach(a),Wo=o(ot,` should be used.
A `),Pt=n(ot,"CODE",{});var kn=l(Pt);Go=o(kn,"step"),kn.forEach(a),Ro=o(ot," can also be passed in to correlate the data with a particular step in the training loop."),ot.forEach(a),ma=p(e),h(Pe.$$.fragment,e),ha=p(e),te=n(e,"P",{});var Za=l(te);Uo=o(Za,"Once you\u2019ve finished training, make sure to run "),Xe=n(Za,"A",{href:!0});var $n=l(Xe);Ho=o($n,"end_training()"),$n.forEach(a),Fo=o(Za," so that all the trackers can run their finish functionalities if they have any."),Za.forEach(a),fa=p(e),h(Oe.$$.fragment,e),ga=p(e),Ye=n(e,"P",{});var bn=l(Ye);Jo=o(bn,"A full example is below:"),bn.forEach(a),_a=p(e),h(Ie.$$.fragment,e),va=p(e),z=n(e,"H2",{class:!0});var er=l(z);ae=n(er,"A",{id:!0,class:!0,href:!0});var wn=l(ae);Ot=n(wn,"SPAN",{});var En=l(Ot);h(qe.$$.fragment,En),En.forEach(a),wn.forEach(a),Ko=p(er),It=n(er,"SPAN",{});var Tn=l(It);Qo=o(Tn,"Implementing Custom Trackers"),Tn.forEach(a),er.forEach(a),ya=p(e),j=n(e,"P",{});var st=l(j);Xo=o(st,"To implement a new tracker to be used in "),qt=n(st,"CODE",{});var An=l(qt);Yo=o(An,"Accelerator"),An.forEach(a),Zo=o(st,", a new one can be made through implementing the "),Bt=n(st,"CODE",{});var jn=l(Bt);es=o(jn,"~GeneralTracker"),jn.forEach(a),ts=o(st,` class.
Every tracker must implement three functions:`),st.forEach(a),ka=p(e),C=n(e,"UL",{});var nt=l(C);Be=n(nt,"LI",{});var tr=l(Be);St=n(tr,"CODE",{});var Cn=l(St);as=o(Cn,"__init__"),Cn.forEach(a),rs=o(tr,": "),Se=n(tr,"UL",{});var ar=l(Se);ze=n(ar,"LI",{});var rr=l(ze);os=o(rr,"Should store a "),zt=n(rr,"CODE",{});var Dn=l(zt);ss=o(Dn,"run_name"),Dn.forEach(a),ns=o(rr," and initialize the tracker API of the integrated library."),rr.forEach(a),ls=p(ar),Ne=n(ar,"LI",{});var or=l(Ne);cs=o(or,"If a tracker stores their data locally (such as TensorBoard), a "),Nt=n(or,"CODE",{});var xn=l(Nt);is=o(xn,"logging_dir"),xn.forEach(a),ps=o(or," parameter can be added."),or.forEach(a),ar.forEach(a),tr.forEach(a),ds=p(nt),Me=n(nt,"LI",{});var sr=l(Me);Mt=n(sr,"CODE",{});var Ln=l(Mt);us=o(Ln,"store_init_configuration"),Ln.forEach(a),ms=o(sr,": "),Vt=n(sr,"UL",{});var Pn=l(Vt);Ve=n(Pn,"LI",{});var nr=l(Ve);hs=o(nr,"Should take in a "),Wt=n(nr,"CODE",{});var On=l(Wt);fs=o(On,"values"),On.forEach(a),gs=o(nr," dictionary and store them as a one-time experiment configuration"),nr.forEach(a),Pn.forEach(a),sr.forEach(a),_s=p(nt),We=n(nt,"LI",{});var lr=l(We);Gt=n(lr,"CODE",{});var In=l(Gt);vs=o(In,"log"),In.forEach(a),ys=o(lr,": "),Rt=n(lr,"UL",{});var qn=l(Rt);N=n(qn,"LI",{});var lt=l(N);ks=o(lt,"Should take in a "),Ut=n(lt,"CODE",{});var Bn=l(Ut);$s=o(Bn,"values"),Bn.forEach(a),bs=o(lt," dictionary and a "),Ht=n(lt,"CODE",{});var Sn=l(Ht);ws=o(Sn,"step"),Sn.forEach(a),Es=o(lt,", and should log them to the run"),lt.forEach(a),qn.forEach(a),lr.forEach(a),nt.forEach(a),$a=p(e),Ze=n(e,"P",{});var zn=l(Ze);Ts=o(zn,"A brief example can be seen below with an integration with Weights and Biases, containing only the relevent information:"),zn.forEach(a),ba=p(e),h(Ge.$$.fragment,e),wa=p(e),b=n(e,"P",{});var se=l(b);As=o(se,"When you are ready to build your "),Ft=n(se,"CODE",{});var Nn=l(Ft);js=o(Nn,"Accelerator"),Nn.forEach(a),Cs=o(se," object, pass in an "),Jt=n(se,"STRONG",{});var Mn=l(Jt);Ds=o(Mn,"instance"),Mn.forEach(a),xs=o(se," of your tracker to "),Kt=n(se,"CODE",{});var Vn=l(Kt);Ls=o(Vn,"log_with"),Vn.forEach(a),Ps=o(se,` to have it automatically
be used with the API:`),se.forEach(a),Ea=p(e),h(Re.$$.fragment,e),Ta=p(e),re=n(e,"P",{});var cr=l(re);Os=o(cr,"These also can be mixed with existing trackers, including with "),Qt=n(cr,"CODE",{});var Wn=l(Qt);Is=o(Wn,'"all"'),Wn.forEach(a),qs=o(cr,":"),cr.forEach(a),Aa=p(e),h(Ue.$$.fragment,e),ja=p(e),M=n(e,"H2",{class:!0});var ir=l(M);oe=n(ir,"A",{id:!0,class:!0,href:!0});var Gn=l(oe);Xt=n(Gn,"SPAN",{});var Rn=l(Xt);h(He.$$.fragment,Rn),Rn.forEach(a),Gn.forEach(a),Bs=p(ir),Yt=n(ir,"SPAN",{});var Un=l(Yt);Ss=o(Un,"When a wrapper cannot work"),Un.forEach(a),ir.forEach(a),Ca=p(e),D=n(e,"P",{});var ct=l(D);zs=o(ct,"If a library has an API that does not follow a strict "),Zt=n(ct,"CODE",{});var Hn=l(Zt);Ns=o(Hn,".log"),Hn.forEach(a),Ms=o(ct," with an overall dictionary such as Neptune.AI, logging can be done manually under an "),ea=n(ct,"CODE",{});var Fn=l(ea);Vs=o(Fn,"if accelerator.is_main_process"),Fn.forEach(a),Ws=o(ct," statement:"),ct.forEach(a),Da=p(e),h(Fe.$$.fragment,e),this.h()},h(){u(P,"name","hf:doc:metadata"),u(P,"content",JSON.stringify(tl)),u(W,"id","tracking"),u(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(W,"href","#tracking"),u(O,"class","relative group"),u(Je,"href","/docs/accelerate/pr_308/en/accelerator#accelerate.Accelerator.log"),u(G,"id","accelerate.tracking.TensorBoardTracker"),u(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(G,"href","#accelerate.tracking.TensorBoardTracker"),u(I,"class","relative group"),u(U,"class","docstring"),u(H,"class","docstring"),u(F,"class","docstring"),u(k,"class","docstring"),u(J,"class","docstring"),u(K,"class","docstring"),u(Q,"class","docstring"),u($,"class","docstring"),u(X,"class","docstring"),u(Y,"class","docstring"),u(Z,"class","docstring"),u(y,"class","docstring"),u(Ke,"href","/docs/accelerate/pr_308/en/accelerator#accelerate.Accelerator.init_trackers"),u(Qe,"href","/docs/accelerate/pr_308/en/accelerator#accelerate.Accelerator.log"),u(Xe,"href","/docs/accelerate/pr_308/en/accelerator#accelerate.Accelerator.end_training"),u(ae,"id","implementing-custom-trackers"),u(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ae,"href","#implementing-custom-trackers"),u(z,"class","relative group"),u(oe,"id","when-a-wrapper-cannot-work"),u(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(oe,"href","#when-a-wrapper-cannot-work"),u(M,"class","relative group")},m(e,c){t(document.head,P),d(e,ta,c),d(e,O,c),t(O,W),t(W,it),f(ne,it,null),t(O,dr),t(O,pt),t(pt,ur),d(e,aa,c),d(e,le,c),t(le,mr),t(le,Je),t(Je,hr),d(e,ra,c),d(e,I,c),t(I,G),t(G,dt),f(ce,dt,null),t(I,fr),t(I,ut),t(ut,gr),d(e,oa,c),d(e,R,c),t(R,_r),t(R,mt),t(mt,vr),t(R,yr),d(e,sa,c),d(e,k,c),f(ie,k,null),t(k,kr),t(k,q),t(q,$r),t(q,ht),t(ht,br),t(q,wr),t(q,ft),t(ft,Er),t(q,Tr),t(k,Ar),t(k,U),f(pe,U,null),t(U,jr),t(U,de),t(de,Cr),t(de,gt),t(gt,Dr),t(de,xr),t(k,Lr),t(k,H),f(ue,H,null),t(H,Pr),t(H,me),t(me,Or),t(me,_t),t(_t,Ir),t(me,qr),t(k,Br),t(k,F),f(he,F,null),t(F,Sr),t(F,fe),t(fe,zr),t(fe,vt),t(vt,Nr),t(fe,Mr),d(e,na,c),d(e,$,c),f(ge,$,null),t($,Vr),t($,B),t(B,Wr),t(B,yt),t(yt,Gr),t(B,Rr),t(B,kt),t(kt,Ur),t(B,Hr),t($,Fr),t($,J),f(_e,J,null),t(J,Jr),t(J,ve),t(ve,Kr),t(ve,$t),t($t,Qr),t(ve,Xr),t($,Yr),t($,K),f(ye,K,null),t(K,Zr),t(K,ke),t(ke,eo),t(ke,bt),t(bt,to),t(ke,ao),t($,ro),t($,Q),f($e,Q,null),t(Q,oo),t(Q,be),t(be,so),t(be,wt),t(wt,no),t(be,lo),d(e,la,c),d(e,y,c),f(we,y,null),t(y,co),t(y,S),t(S,io),t(S,Et),t(Et,po),t(S,uo),t(S,Tt),t(Tt,mo),t(S,ho),t(y,fo),t(y,At),t(At,go),t(y,_o),t(y,X),f(Ee,X,null),t(X,vo),t(X,Te),t(Te,yo),t(Te,jt),t(jt,ko),t(Te,$o),t(y,bo),t(y,Y),f(Ae,Y,null),t(Y,wo),t(Y,je),t(je,Eo),t(je,Ct),t(Ct,To),t(je,Ao),t(y,jo),t(y,Z),f(Ce,Z,null),t(Z,Co),t(Z,De),t(De,Do),t(De,Dt),t(Dt,xo),t(De,Lo),d(e,ca,c),d(e,T,c),t(T,Po),t(T,xt),t(xt,Oo),t(T,Io),t(T,Lt),t(Lt,qo),t(T,Bo),d(e,ia,c),f(xe,e,c),d(e,pa,c),d(e,ee,c),t(ee,So),t(ee,Ke),t(Ke,zo),t(ee,No),d(e,da,c),f(Le,e,c),d(e,ua,c),d(e,A,c),t(A,Mo),t(A,Qe),t(Qe,Vo),t(A,Wo),t(A,Pt),t(Pt,Go),t(A,Ro),d(e,ma,c),f(Pe,e,c),d(e,ha,c),d(e,te,c),t(te,Uo),t(te,Xe),t(Xe,Ho),t(te,Fo),d(e,fa,c),f(Oe,e,c),d(e,ga,c),d(e,Ye,c),t(Ye,Jo),d(e,_a,c),f(Ie,e,c),d(e,va,c),d(e,z,c),t(z,ae),t(ae,Ot),f(qe,Ot,null),t(z,Ko),t(z,It),t(It,Qo),d(e,ya,c),d(e,j,c),t(j,Xo),t(j,qt),t(qt,Yo),t(j,Zo),t(j,Bt),t(Bt,es),t(j,ts),d(e,ka,c),d(e,C,c),t(C,Be),t(Be,St),t(St,as),t(Be,rs),t(Be,Se),t(Se,ze),t(ze,os),t(ze,zt),t(zt,ss),t(ze,ns),t(Se,ls),t(Se,Ne),t(Ne,cs),t(Ne,Nt),t(Nt,is),t(Ne,ps),t(C,ds),t(C,Me),t(Me,Mt),t(Mt,us),t(Me,ms),t(Me,Vt),t(Vt,Ve),t(Ve,hs),t(Ve,Wt),t(Wt,fs),t(Ve,gs),t(C,_s),t(C,We),t(We,Gt),t(Gt,vs),t(We,ys),t(We,Rt),t(Rt,N),t(N,ks),t(N,Ut),t(Ut,$s),t(N,bs),t(N,Ht),t(Ht,ws),t(N,Es),d(e,$a,c),d(e,Ze,c),t(Ze,Ts),d(e,ba,c),f(Ge,e,c),d(e,wa,c),d(e,b,c),t(b,As),t(b,Ft),t(Ft,js),t(b,Cs),t(b,Jt),t(Jt,Ds),t(b,xs),t(b,Kt),t(Kt,Ls),t(b,Ps),d(e,Ea,c),f(Re,e,c),d(e,Ta,c),d(e,re,c),t(re,Os),t(re,Qt),t(Qt,Is),t(re,qs),d(e,Aa,c),f(Ue,e,c),d(e,ja,c),d(e,M,c),t(M,oe),t(oe,Xt),f(He,Xt,null),t(M,Bs),t(M,Yt),t(Yt,Ss),d(e,Ca,c),d(e,D,c),t(D,zs),t(D,Zt),t(Zt,Ns),t(D,Ms),t(D,ea),t(ea,Vs),t(D,Ws),d(e,Da,c),f(Fe,e,c),xa=!0},p:Yn,i(e){xa||(g(ne.$$.fragment,e),g(ce.$$.fragment,e),g(ie.$$.fragment,e),g(pe.$$.fragment,e),g(ue.$$.fragment,e),g(he.$$.fragment,e),g(ge.$$.fragment,e),g(_e.$$.fragment,e),g(ye.$$.fragment,e),g($e.$$.fragment,e),g(we.$$.fragment,e),g(Ee.$$.fragment,e),g(Ae.$$.fragment,e),g(Ce.$$.fragment,e),g(xe.$$.fragment,e),g(Le.$$.fragment,e),g(Pe.$$.fragment,e),g(Oe.$$.fragment,e),g(Ie.$$.fragment,e),g(qe.$$.fragment,e),g(Ge.$$.fragment,e),g(Re.$$.fragment,e),g(Ue.$$.fragment,e),g(He.$$.fragment,e),g(Fe.$$.fragment,e),xa=!0)},o(e){_(ne.$$.fragment,e),_(ce.$$.fragment,e),_(ie.$$.fragment,e),_(pe.$$.fragment,e),_(ue.$$.fragment,e),_(he.$$.fragment,e),_(ge.$$.fragment,e),_(_e.$$.fragment,e),_(ye.$$.fragment,e),_($e.$$.fragment,e),_(we.$$.fragment,e),_(Ee.$$.fragment,e),_(Ae.$$.fragment,e),_(Ce.$$.fragment,e),_(xe.$$.fragment,e),_(Le.$$.fragment,e),_(Pe.$$.fragment,e),_(Oe.$$.fragment,e),_(Ie.$$.fragment,e),_(qe.$$.fragment,e),_(Ge.$$.fragment,e),_(Re.$$.fragment,e),_(Ue.$$.fragment,e),_(He.$$.fragment,e),_(Fe.$$.fragment,e),xa=!1},d(e){a(P),e&&a(ta),e&&a(O),v(ne),e&&a(aa),e&&a(le),e&&a(ra),e&&a(I),v(ce),e&&a(oa),e&&a(R),e&&a(sa),e&&a(k),v(ie),v(pe),v(ue),v(he),e&&a(na),e&&a($),v(ge),v(_e),v(ye),v($e),e&&a(la),e&&a(y),v(we),v(Ee),v(Ae),v(Ce),e&&a(ca),e&&a(T),e&&a(ia),v(xe,e),e&&a(pa),e&&a(ee),e&&a(da),v(Le,e),e&&a(ua),e&&a(A),e&&a(ma),v(Pe,e),e&&a(ha),e&&a(te),e&&a(fa),v(Oe,e),e&&a(ga),e&&a(Ye),e&&a(_a),v(Ie,e),e&&a(va),e&&a(z),v(qe),e&&a(ya),e&&a(j),e&&a(ka),e&&a(C),e&&a($a),e&&a(Ze),e&&a(ba),v(Ge,e),e&&a(wa),e&&a(b),e&&a(Ea),v(Re,e),e&&a(Ta),e&&a(re),e&&a(Aa),v(Ue,e),e&&a(ja),e&&a(M),v(He),e&&a(Ca),e&&a(D),e&&a(Da),v(Fe,e)}}}const tl={local:"tracking",sections:[{local:"accelerate.tracking.TensorBoardTracker",title:"Integrated Trackers"},{local:"implementing-custom-trackers",title:"Implementing Custom Trackers"},{local:"when-a-wrapper-cannot-work",title:"When a wrapper cannot work"}],title:"Tracking"};function al(Rs){return Zn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ll extends Jn{constructor(P){super();Kn(this,P,al,el,Qn,{})}}export{ll as default,tl as metadata};
