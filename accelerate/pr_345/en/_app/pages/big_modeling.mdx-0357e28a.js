import{S as ui,i as _i,s as gi,H as wi,e as s,w as b,k as c,c as n,a as i,x as $,d as t,m as h,b as u,g as l,F as a,y as k,P as yi,I as bi,J as $i,K as ki,q as w,o as y,B as x,v as vi,T as xi,U as ji,t as r,M as Pi,h as d,L as Ei}from"../chunks/vendor-a44ee391.js";import{T as fo}from"../chunks/Tip-77e4f213.js";import{D as He}from"../chunks/Docstring-b86362bf.js";import{C as D}from"../chunks/CodeBlock-5dad88d8.js";import{I as We}from"../chunks/IconCopyLink-d11810b0.js";const{window:Ai}=xi;function Ui(C){let p,g,m,_,j,f,v,L,E;_=new We({props:{classNames:"text-smd"}});const A=C[4].default,U=wi(A,C,C[3],null);return{c(){p=s("div"),g=s("a"),m=s("span"),b(_.$$.fragment),f=c(),U&&U.c(),this.h()},l(P){p=n(P,"DIV",{class:!0});var I=i(p);g=n(I,"A",{id:!0,class:!0,href:!0});var G=i(g);m=n(G,"SPAN",{});var we=i(m);$(_.$$.fragment,we),we.forEach(t),G.forEach(t),f=h(I),U&&U.l(I),I.forEach(t),this.h()},h(){u(g,"id",C[0]),u(g,"class","header-link block pr-0.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(g,"href",j=`#${C[0]}`),u(p,"class","relative group rounded-md")},m(P,I){l(P,p,I),a(p,g),a(g,m),k(_,m,null),a(p,f),U&&U.m(p,null),C[5](p),v=!0,L||(E=yi(Ai,"hashchange",C[2]),L=!0)},p(P,[I]){(!v||I&1)&&u(g,"id",P[0]),(!v||I&1&&j!==(j=`#${P[0]}`))&&u(g,"href",j),U&&U.p&&(!v||I&8)&&bi(U,A,P,P[3],v?ki(A,P[3],I,null):$i(P[3]),null)},i(P){v||(w(_.$$.fragment,P),w(U,P),v=!0)},o(P){y(_.$$.fragment,P),y(U,P),v=!1},d(P){P&&t(p),x(_),U&&U.d(P),C[5](null),L=!1,E()}}}const mi="bg-yellow-50 dark:bg-[#494a3d]";function Ci(C,p,g){let{$$slots:m={},$$scope:_}=p,{anchor:j}=p,f;function v(){const{hash:E}=window.location,A=E.substring(1);f&&f.classList.remove(...mi.split(" ")),A===j&&f.classList.add(...mi.split(" "))}vi(()=>{v()});function L(E){ji[E?"unshift":"push"](()=>{f=E,g(1,f)})}return C.$$set=E=>{"anchor"in E&&g(0,j=E.anchor),"$$scope"in E&&g(3,_=E.$$scope)},[j,f,v,_,m,L]}class Li extends ui{constructor(p){super();_i(this,p,Ci,Ui,gi,{anchor:0})}}function Ti(C){let p,g;return{c(){p=s("p"),g=r("You can\u2019t move a model initialized like this on CPU or another device directly, since it doesn\u2019t have any data. It\u2019s also very likely that a forward pass with that empty model will fail, as not all operations are supported on the meta device.")},l(m){p=n(m,"P",{});var _=i(p);g=d(_,"You can\u2019t move a model initialized like this on CPU or another device directly, since it doesn\u2019t have any data. It\u2019s also very likely that a forward pass with that empty model will fail, as not all operations are supported on the meta device."),_.forEach(t)},m(m,_){l(m,p,_),a(p,g)},d(m){m&&t(p)}}}function Ii(C){let p,g,m,_,j;return{c(){p=s("p"),g=r(`All computation is done analyzing sizes and dtypes of the model parameters. As a result, the model can be on the
meta device (as it would if initialized within the `),m=s("code"),_=r("init_empty_weights"),j=r(" context manager).")},l(f){p=n(f,"P",{});var v=i(p);g=d(v,`All computation is done analyzing sizes and dtypes of the model parameters. As a result, the model can be on the
meta device (as it would if initialized within the `),m=n(v,"CODE",{});var L=i(m);_=d(L,"init_empty_weights"),L.forEach(t),j=d(v," context manager)."),v.forEach(t)},m(f,v){l(f,p,v),a(p,g),a(p,m),a(m,_),a(p,j)},d(f){f&&t(p)}}}function qi(C){let p,g,m,_,j;return _=new D({props:{code:`import torch.nn as nn
from accelerate import init_empty_weights

<h1 class="relative group">
	<a 
		id="initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram" 
		class="header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full" 
		href="#initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram"
	>
		<span><IconCopyLink/></span>
	</a>
	<span>
		Initialize a model with 100 billions parameters in no time and without using any RAM.
	</span>
</h1>

with init_empty_weights():
    tst = nn.Sequential(*[nn.Linear(10000, 10000) for _ in range(1000)])`,highlighted:`<span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn
<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights

&lt;h1 id=&quot;initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram&quot;&gt;Initialize a model <span class="hljs-keyword">with</span> <span class="hljs-number">100</span> billions parameters <span class="hljs-keyword">in</span> <span class="hljs-keyword">no</span> <span class="hljs-type">time</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">without</span> <span class="hljs-keyword">using</span> <span class="hljs-keyword">any</span> RAM.&lt;/h1&gt;
<span class="hljs-keyword">with</span> init_empty_weights():
    tst = nn.Sequential(*[nn.Linear(<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000</span>)])`}}),{c(){p=s("p"),g=r("Example:"),m=c(),b(_.$$.fragment)},l(f){p=n(f,"P",{});var v=i(p);g=d(v,"Example:"),v.forEach(t),m=h(f),$(_.$$.fragment,f)},m(f,v){l(f,p,v),a(p,g),l(f,m,v),k(_,f,v),j=!0},p:Ei,i(f){j||(w(_.$$.fragment,f),j=!0)},o(f){y(_.$$.fragment,f),j=!1},d(f){f&&t(p),f&&t(m),x(_,f)}}}function Mi(C){let p,g,m,_,j,f,v,L;return{c(){p=s("p"),g=r(`Any model created under this context manager has no weights. As such you can\u2019t do something like
`),m=s("code"),_=r("model.to(some_device)"),j=r(" with it. To load weights inside your empty model, see "),f=s("a"),v=r("load_checkpoint_and_dispatch()"),L=r("."),this.h()},l(E){p=n(E,"P",{});var A=i(p);g=d(A,`Any model created under this context manager has no weights. As such you can\u2019t do something like
`),m=n(A,"CODE",{});var U=i(m);_=d(U,"model.to(some_device)"),U.forEach(t),j=d(A," with it. To load weights inside your empty model, see "),f=n(A,"A",{href:!0});var P=i(f);v=d(P,"load_checkpoint_and_dispatch()"),P.forEach(t),L=d(A,"."),A.forEach(t),this.h()},h(){u(f,"href","/docs/accelerate/pr_345/en/big_modeling#accelerate.load_checkpoint_and_dispatch")},m(E,A){l(E,p,A),a(p,g),a(p,m),a(m,_),a(p,j),a(p,f),a(f,v),a(p,L)},d(E){E&&t(p)}}}function zi(C){let p,g,m,_,j,f,v,L;return{c(){p=s("p"),g=r("Once loaded across devices, you still need to call "),m=s("a"),_=r("dispatch_model()"),j=r(` on your model to make it able to run. To
group the checkpoint loading and dispatch in one single call, use `),f=s("a"),v=r("load_checkpoint_and_dispatch()"),L=r("."),this.h()},l(E){p=n(E,"P",{});var A=i(p);g=d(A,"Once loaded across devices, you still need to call "),m=n(A,"A",{href:!0});var U=i(m);_=d(U,"dispatch_model()"),U.forEach(t),j=d(A,` on your model to make it able to run. To
group the checkpoint loading and dispatch in one single call, use `),f=n(A,"A",{href:!0});var P=i(f);v=d(P,"load_checkpoint_and_dispatch()"),P.forEach(t),L=d(A,"."),A.forEach(t),this.h()},h(){u(m,"href","/docs/accelerate/pr_345/en/big_modeling#accelerate.dispatch_model"),u(f,"href","/docs/accelerate/pr_345/en/big_modeling#accelerate.load_checkpoint_and_dispatch")},m(E,A){l(E,p,A),a(p,g),a(p,m),a(m,_),a(p,j),a(p,f),a(f,v),a(p,L)},d(E){E&&t(p)}}}function Di(C){let p,g,m,_,j,f,v,L,E,A,U,P,I,G,we,Je,mo,na,R,pt,uo,_o,ft,go,vo,mt,wo,ia,Ye,yo,la,H,te,ut,ye,bo,_t,$o,ra,ae,ko,Ve,xo,jo,da,be,ca,Ke,Po,ha,$e,pa,Qe,Eo,fa,oe,ma,W,se,gt,ke,Ao,vt,Uo,ua,Xe,Co,_a,Ze,Lo,ga,xe,va,et,To,wa,je,ya,T,Io,wt,qo,Mo,yt,zo,Do,bt,No,Bo,$t,Go,Ro,kt,Oo,So,xt,Fo,ba,J,ne,jt,Pe,Ho,Pt,Wo,$a,ie,Jo,tt,Yo,Vo,ka,le,Ko,Ee,Qo,Xo,xa,Ae,ja,at,Zo,Pa,Ue,Ea,ot,es,Aa,Ce,Ua,re,ts,Et,as,os,Ca,O,At,ss,ns,Ut,is,ls,Ct,rs,La,Y,Lt,ds,cs,Tt,hs,ps,Ta,S,fs,It,ms,us,qt,_s,gs,Ia,Le,qa,Te,Ma,de,vs,Mt,ws,ys,za,Ie,Da,V,ce,zt,qe,bs,Dt,$s,Na,st,ks,Ba,Me,Ga,nt,xs,Ra,F,Nt,js,Ps,Bt,Es,As,Gt,Us,Oa,it,Cs,Sa,K,he,Rt,ze,Ls,Ot,Ts,Fa,Q,De,Is,St,qs,Ha,X,Ne,Ms,Ft,zs,Wa,Z,Be,Ds,Ht,Ns,Ja,q,Ge,Bs,Wt,Gs,Rs,N,Jt,Os,Ss,Yt,Fs,Hs,Vt,Ws,Js,Kt,Ys,Vs,pe,Ya,M,Re,Ks,Qt,Qs,Xs,fe,Zs,me,Va,ee,Oe,en,Xt,tn,Ka,B,Se,an,Zt,on,sn,ue,Qa;return f=new We({}),G=new D({props:{code:`import torch

my_model = ModelClass(...)
state_dict = torch.load(checkpoint_file)
my_model.load_state_dict(state_dict)`,highlighted:`<span class="hljs-keyword">import</span> torch

my_model = ModelClass(...)
state_dict = torch.load(checkpoint_file)
my_model.load_state_dict(state_dict)`}}),ye=new We({}),be=new D({props:{code:`from accelerate import init_empty_weights

with init_empty_weights():
    my_model = ModelClass(...)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights

<span class="hljs-keyword">with</span> init_empty_weights():
    my_model = ModelClass(...)`}}),$e=new D({props:{code:`with init_empty_weights():
    model = nn.Sequential(*[nn.Linear(10000, 10000) for _ in range(1000)])`,highlighted:`<span class="hljs-keyword">with</span> init_empty_weights():
    model = nn.Sequential(*[nn.Linear(<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>)])`}}),oe=new fo({props:{warning:!0,$$slots:{default:[Ti]},$$scope:{ctx:C}}}),ke=new We({}),xe=new D({props:{code:`first_state_dict.bin
index.json
second_state_dict.bin`,highlighted:`first_state_dict.bin
index.json
second_state_dict.bin`}}),je=new D({props:{code:`{
  "linear1.weight": "first_state_dict.bin",
  "linear1.bias": "first_state_dict.bin",
  "linear2.weight": "second_state_dict.bin",
  "linear2.bias": "second_state_dict.bin"
}`,highlighted:`<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;linear1.weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear1.bias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear2.weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second_state_dict.bin&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;linear2.bias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second_state_dict.bin&quot;</span>
<span class="hljs-punctuation">}</span>`}}),Pe=new We({}),Ae=new D({props:{code:`git clone https://huggingface.co/sgugger/sharded-gpt-j-6B
cd sharded-gpt-j-6B
git-lfs install
git pull`,highlighted:`git <span class="hljs-built_in">clone</span> https://huggingface.co/sgugger/sharded-gpt-j-6B
<span class="hljs-built_in">cd</span> sharded-gpt-j-6B
git-lfs install
git pull`}}),Ue=new D({props:{code:`from accelerate import init_empty_weights
from transformers import AutoConfig, AutoModelForCausalLM

checkpoint = "EleutherAI/gpt-j-6B"
config = AutoConfig.from_pretrained(checkpoint)

with init_empty_weights():
    model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> init_empty_weights
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

checkpoint = <span class="hljs-string">&quot;EleutherAI/gpt-j-6B&quot;</span>
config = AutoConfig.from_pretrained(checkpoint)

<span class="hljs-keyword">with</span> init_empty_weights():
    model = AutoModelForCausalLM.from_config(config)`}}),Ce=new D({props:{code:`from accelerate import load_checkpoint_and_dispatch

model = load_checkpoint_and_dispatch(
    model, "sharded-gpt-j-6B", device_map="auto", no_split_module_classes=["GPTJBlock"]
)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> load_checkpoint_and_dispatch

model = load_checkpoint_and_dispatch(
    model, <span class="hljs-string">&quot;sharded-gpt-j-6B&quot;</span>, device_map=<span class="hljs-string">&quot;auto&quot;</span>, no_split_module_classes=[<span class="hljs-string">&quot;GPTJBlock&quot;</span>]
)`}}),Le=new D({props:{code:"model.hf_device_map",highlighted:"model.hf_device_map"}}),Te=new D({props:{code:`{'transformer.wte': 0,
 'transformer.drop': 0,
 'transformer.h.0': 0,
 'transformer.h.1': 0,
 'transformer.h.2': 0,
 'transformer.h.3': 0,
 'transformer.h.4': 0,
 'transformer.h.5': 0,
 'transformer.h.6': 0,
 'transformer.h.7': 0,
 'transformer.h.8': 0,
 'transformer.h.9': 0,
 'transformer.h.10': 0,
 'transformer.h.11': 0,
 'transformer.h.12': 0,
 'transformer.h.13': 0,
 'transformer.h.14': 0,
 'transformer.h.15': 0,
 'transformer.h.16': 0,
 'transformer.h.17': 0,
 'transformer.h.18': 0,
 'transformer.h.19': 0,
 'transformer.h.20': 0,
 'transformer.h.21': 0,
 'transformer.h.22': 0,
 'transformer.h.23': 0,
 'transformer.h.24': 1,
 'transformer.h.25': 1,
 'transformer.h.26': 1,
 'transformer.h.27': 1,
 'transformer.ln_f': 1,
 'lm_head': 1}`,highlighted:`{<span class="hljs-string">&#x27;transformer.wte&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.drop&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.0&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.1&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.2&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.3&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.4&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.5&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.6&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.7&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.8&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.9&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.10&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.11&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.12&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.13&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.14&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.15&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.16&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.17&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.18&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.19&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.20&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.21&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.22&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.23&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;transformer.h.24&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.25&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.26&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.h.27&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;transformer.ln_f&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;lm_head&#x27;</span>: <span class="hljs-number">1</span>}`}}),Ie=new D({props:{code:'model = load_checkpoint_and_dispatch(model, "sharded-gpt-j-6B", device_map=my_device_map)',highlighted:'model = load_checkpoint_and_dispatch(model, <span class="hljs-string">&quot;sharded-gpt-j-6B&quot;</span>, device_map=my_device_map)'}}),qe=new We({}),Me=new D({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(checkpoint)
inputs = tokenizer("Hello, my name is", return_tensors="pt")
inputs = inputs.to(0)
output = model.generate(inputs["input_ids"])
tokenizer.decode(output[0].tolist())`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(checkpoint)
inputs = tokenizer(<span class="hljs-string">&quot;Hello, my name is&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
inputs = inputs.to(<span class="hljs-number">0</span>)
output = model.generate(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])
tokenizer.decode(output[<span class="hljs-number">0</span>].tolist())`}}),ze=new We({}),De=new He({props:{name:"accelerate.cpu_offload",anchor:"accelerate.cpu_offload",parameters:[{name:"model",val:": Module"},{name:"execution_device",val:": typing.Optional[torch.device] = None"},{name:"offload_buffers",val:": bool = False"},{name:"state_dict",val:": typing.Union[typing.Dict[str, torch.Tensor], NoneType] = None"}],parametersDescription:[{anchor:"accelerate.cpu_offload.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to offload.`,name:"model"},{anchor:"accelerate.cpu_offload.execution_device",description:`<strong>execution_device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
The device on which the forward pass of the model will be executed (should be a GPU). Will default to the
model first parameter device.`,name:"execution_device"},{anchor:"accelerate.cpu_offload.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to offload the buffers with the model parameters.`,name:"offload_buffers"},{anchor:"accelerate.cpu_offload.state_dict",description:`<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>, <em>optional</em>) &#x2014;
The state dict of the model that will be kept on CPU.`,name:"state_dict"}],source:"https://github.com/huggingface/accelerate/blob/vr_345/src/accelerate/big_modeling.py#L86"}}),Ne=new He({props:{name:"accelerate.disk_offload",anchor:"accelerate.disk_offload",parameters:[{name:"model",val:": Module"},{name:"offload_dir",val:": typing.Union[str, os.PathLike]"},{name:"execution_device",val:": typing.Optional[torch.device] = None"},{name:"offload_buffers",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.disk_offload.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model to offload.",name:"model"},{anchor:"accelerate.disk_offload.offload_dir",description:`<strong>offload_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder in which to offload the model weights (or where the model weights are already offloaded).`,name:"offload_dir"},{anchor:"accelerate.disk_offload.execution_device",description:`<strong>execution_device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
The device on which the forward pass of the model will be executed (should be a GPU). Will default to the
model&#x2019;s first parameter device.`,name:"execution_device"},{anchor:"accelerate.disk_offload.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to offload the buffers with the model parameters.`,name:"offload_buffers"}],source:"https://github.com/huggingface/accelerate/blob/vr_345/src/accelerate/big_modeling.py#L119"}}),Be=new He({props:{name:"accelerate.dispatch_model",anchor:"accelerate.dispatch_model",parameters:[{name:"model",val:": Module"},{name:"device_map",val:": typing.Dict[str, typing.Union[int, str, torch.device]]"},{name:"main_device",val:": typing.Optional[torch.device] = None"},{name:"state_dict",val:": typing.Union[typing.Dict[str, torch.Tensor], NoneType] = None"},{name:"offload_dir",val:": typing.Union[str, os.PathLike] = None"},{name:"offload_buffers",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.dispatch_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to dispatch.`,name:"model"},{anchor:"accelerate.dispatch_model.device_map",description:`<strong>device_map</strong> (<code>Dict[str, Union[str, int, torch.device]]</code>) &#x2014;
A dictionary mapping module names in the models <code>state_dict</code> to the device they should go to. Note that
<code>&quot;disk&quot;</code> is accepted even if it&#x2019;s not a proper value for <code>torch.device</code>.`,name:"device_map"},{anchor:"accelerate.dispatch_model.main_device",description:`<strong>main_device</strong> (<code>str</code>, <code>int</code> or <code>torch.device</code>, <em>optional</em>) &#x2014;
The main execution device. Will default to the first device in the <code>device_map</code> different from <code>&quot;cpu&quot;</code> or
<code>&quot;disk&quot;</code>.`,name:"main_device"},{anchor:"accelerate.dispatch_model.state_dict",description:`<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>, <em>optional</em>) &#x2014;
The state dict of the part of the model that will be kept on CPU.`,name:"state_dict"},{anchor:"accelerate.dispatch_model.offload_dir",description:`<strong>offload_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder in which to offload the model weights (or where the model weights are already offloaded).`,name:"offload_dir"},{anchor:"accelerate.dispatch_model.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to offload the buffers with the model parameters.`,name:"offload_buffers"}],source:"https://github.com/huggingface/accelerate/blob/vr_345/src/accelerate/big_modeling.py#L156"}}),Ge=new He({props:{name:"accelerate.infer_auto_device_map",anchor:"accelerate.infer_auto_device_map",parameters:[{name:"model",val:": Module"},{name:"max_memory",val:": typing.Union[typing.Dict[typing.Union[int, str], typing.Union[int, str]], NoneType] = None"},{name:"no_split_module_classes",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"accelerate.infer_auto_device_map.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model to analyze.",name:"model"},{anchor:"accelerate.infer_auto_device_map.max_memory",description:`<strong>max_memory</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary device identifier to maximum memory. Will default to the maximum memory available if unset.`,name:"max_memory"},{anchor:"accelerate.infer_auto_device_map.no_split_module_classes",description:`<strong>no_split_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of layer class names that should never be split across device (for instance any layer that has a
residual connection).`,name:"no_split_module_classes"}],source:"https://github.com/huggingface/accelerate/blob/vr_345/src/accelerate/utils/modeling.py#L304"}}),pe=new fo({props:{$$slots:{default:[Ii]},$$scope:{ctx:C}}}),Re=new He({props:{name:"accelerate.init_empty_weights",anchor:"accelerate.init_empty_weights",parameters:[{name:"include_buffers",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.init_empty_weights.include_buffers",description:`<strong>include_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to also put all buffers on the meta device while initializing.`,name:"include_buffers"}],source:"https://github.com/huggingface/accelerate/blob/vr_345/src/accelerate/big_modeling.py#L33"}}),fe=new Li({props:{anchor:"accelerate.init_empty_weights.example",$$slots:{default:[qi]},$$scope:{ctx:C}}}),me=new fo({props:{warning:!0,$$slots:{default:[Mi]},$$scope:{ctx:C}}}),Oe=new He({props:{name:"accelerate.load_checkpoint_and_dispatch",anchor:"accelerate.load_checkpoint_and_dispatch",parameters:[{name:"model",val:": Module"},{name:"checkpoint",val:": typing.Union[str, os.PathLike]"},{name:"device_map",val:": typing.Union[str, typing.Dict[str, typing.Union[int, str, torch.device]], NoneType] = None"},{name:"max_memory",val:": typing.Union[typing.Dict[typing.Union[int, str], typing.Union[int, str]], NoneType] = None"},{name:"no_split_module_classes",val:": typing.Optional[typing.List[str]] = None"},{name:"offload_folder",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"offload_buffers",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.load_checkpoint_and_dispatch.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model in which we want to load a checkpoint.",name:"model"},{anchor:"accelerate.load_checkpoint_and_dispatch.checkpoint",description:`<strong>checkpoint</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder checkpoint to load. It can be:</p>
<ul>
<li>a path to a file containing a whole model state dict</li>
<li>a path to a <code>.json</code> file containing the index to a sharded checkpoint</li>
<li>a path to a folder containing a unique <code>.index.json</code> file and the shards of a checkpoint.</li>
</ul>`,name:"checkpoint"},{anchor:"accelerate.load_checkpoint_and_dispatch.device_map",description:`<strong>device_map</strong> (<code>Dict[str, Union[int, str, torch.device]]</code>, <em>optional</em>) &#x2014;
A map that specifies where each submodule should go. It doesn&#x2019;t need to be refined to each parameter/buffer
name, once a given module name is inside, every submodule of it will be sent to the same device.</p>
<p>To have Accelerate compute the most optimized <code>device_map</code> automatically, set <code>device_map=&quot;auto&quot;</code>.`,name:"device_map"},{anchor:"accelerate.load_checkpoint_and_dispatch.max_memory",description:`<strong>max_memory</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary device identifier to maximum memory. Will default to the maximum memory available for each GPU
and the available CPU RAM if unset.`,name:"max_memory"},{anchor:"accelerate.load_checkpoint_and_dispatch.no_split_module_classes",description:`<strong>no_split_module_classes</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of layer class names that should never be split across device (for instance any layer that has a
residual connection).`,name:"no_split_module_classes"},{anchor:"accelerate.load_checkpoint_and_dispatch.offload_folder",description:`<strong>offload_folder</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
If the <code>device_map</code> contains any value <code>&quot;disk&quot;</code>, the folder where we will offload weights.`,name:"offload_folder"},{anchor:"accelerate.load_checkpoint_and_dispatch.offload_buffers",description:`<strong>offload_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
In the layers that are offloaded on the CPU or the hard drive, whether or not to offload the buffers as
well as the parameters.`,name:"offload_buffers"}],source:"https://github.com/huggingface/accelerate/blob/vr_345/src/accelerate/big_modeling.py#L226"}}),Se=new He({props:{name:"accelerate.load_checkpoint_in_model",anchor:"accelerate.load_checkpoint_in_model",parameters:[{name:"model",val:": Module"},{name:"checkpoint",val:": typing.Union[str, os.PathLike]"},{name:"device_map",val:": typing.Union[typing.Dict[str, typing.Union[int, str, torch.device]], NoneType] = None"},{name:"offload_folder",val:": typing.Union[str, os.PathLike, NoneType] = None"}],parametersDescription:[{anchor:"accelerate.load_checkpoint_in_model.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model in which we want to load a checkpoint.",name:"model"},{anchor:"accelerate.load_checkpoint_in_model.checkpoint",description:`<strong>checkpoint</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The folder checkpoint to load. It can be:<ul>
<li>a path to a file containing a whole model state dict</li>
<li>a path to a <code>.json</code> file containing the index to a sharded checkpoint</li>
<li>a path to a folder containing a unique <code>.index.json</code> file and the shards of a checkpoint.</li>
</ul>`,name:"checkpoint"},{anchor:"accelerate.load_checkpoint_in_model.device_map",description:`<strong>device_map</strong> (<code>Dict[str, Union[int, str, torch.device]]</code>, <em>optional</em>) &#x2014;
A map that specifies where each submodule should go. It doesn&#x2019;t need to be refined to each parameter/buffer
name, once a given module name is inside, every submodule of it will be sent to the same device.`,name:"device_map"},{anchor:"accelerate.load_checkpoint_in_model.offload_folder",description:`<strong>offload_folder</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
If the <code>device_map</code> contains any value <code>&quot;disk&quot;</code>, the folder where we will offload weights.`,name:"offload_folder"}],source:"https://github.com/huggingface/accelerate/blob/vr_345/src/accelerate/utils/modeling.py#L465"}}),ue=new fo({props:{warning:!0,$$slots:{default:[zi]},$$scope:{ctx:C}}}),{c(){p=s("meta"),g=c(),m=s("h1"),_=s("a"),j=s("span"),b(f.$$.fragment),v=c(),L=s("span"),E=r("Handling big models"),A=c(),U=s("p"),P=r("When loading a pretrained model in PyTorch, the usual workflow looks like this:"),I=c(),b(G.$$.fragment),we=c(),Je=s("p"),mo=r("In plain English, those steps are:"),na=c(),R=s("ol"),pt=s("li"),uo=r("Create the model with randomly initialized weights"),_o=c(),ft=s("li"),go=r("Load the model weights (in a dictionary usually called a state dict) from the disk"),vo=c(),mt=s("li"),wo=r("Load those weights inside the model"),ia=c(),Ye=s("p"),yo=r("While this works very well for regularly sized models, this workflow has some clear limitation when we deal with a huge model: in step 1, we load a full version of the model in RAM, and spend some time randomly initializing the weights (which will be discarded in step 3). In step 2, we load another full version of the model in RAM, with the pretrained weights. If you\u2019re loading a model with 6 billions parameters, this needs you will need 24GB of RAM for each copy of the model, so 48GB in total (half of it to load the model in FP16)."),la=c(),H=s("h2"),te=s("a"),ut=s("span"),b(ye.$$.fragment),bo=c(),_t=s("span"),$o=r("Instantiating an empty model"),ra=c(),ae=s("p"),ko=r("The first tool Accelerate introduces to help with big models is a context manager "),Ve=s("a"),xo=r("init_empty_weights()"),jo=r(" that helps you initialize a model without using any RAM, so that step 1 can be done on models of any size. Here is how it works:"),da=c(),b(be.$$.fragment),ca=c(),Ke=s("p"),Po=r("For instance:"),ha=c(),b($e.$$.fragment),pa=c(),Qe=s("p"),Eo=r("initializes an empty model with a bit more than 100B parameters. Behind the scenes, this relies on the meta device introduced in PyTorch 1.9. During the initialization under the context manager, each time a parameter is created, it is instantly moved on that device."),fa=c(),b(oe.$$.fragment),ma=c(),W=s("h2"),se=s("a"),gt=s("span"),b(ke.$$.fragment),Ao=c(),vt=s("span"),Uo=r("Sharded checkpoints"),ua=c(),Xe=s("p"),Co=r("It\u2019s possible your model is so big that even a single copy won\u2019t fit in RAM. That doesn\u2019t mean it can\u2019t be loaded: if you have one or several GPUs, this is more memory available to store your model. In this case, it\u2019s better if your checkpoint is split in several smaller files that we call checkpoint shards."),_a=c(),Ze=s("p"),Lo=r("Accelerate will handle sharded checkpoints as long as you follow the following format: your checkpoint should be in a folder, with several files containing the partial state dicts, and there should be an index in the JSON format that contains a dictionary mapping parameter names to the file containing their weights. For instance we could have a folder containing:"),ga=c(),b(xe.$$.fragment),va=c(),et=s("p"),To=r("with index.json being the following file:"),wa=c(),b(je.$$.fragment),ya=c(),T=s("p"),Io=r("and "),wt=s("code"),qo=r("first_state_dict.bin"),Mo=r(" containing the weights for "),yt=s("code"),zo=r('"linear1.weight"'),Do=r(" and "),bt=s("code"),No=r('"linear1.bias"'),Bo=r(", "),$t=s("code"),Go=r("second_state_dict.bin"),Ro=r(" the ones for "),kt=s("code"),Oo=r('"linear2.weight"'),So=r(" and "),xt=s("code"),Fo=r('"linear2.bias"'),ba=c(),J=s("h2"),ne=s("a"),jt=s("span"),b(Pe.$$.fragment),Ho=c(),Pt=s("span"),Wo=r("Loading weights"),$a=c(),ie=s("p"),Jo=r("The second tool Accelerate introduces is a function "),tt=s("a"),Yo=r("load_checkpoint_and_dispatch()"),Vo=r(", that will allow you to load a checkpoint inside your empty model. This supports full checkpoints (a single file containing the whole state dict) as well as sharded checkpoints. It will also automatically dispatch those weights across the devices you have available (GPUs, CPU RAM), so if you are loading a sharded checkpoint, the maximum RAM usage will be the size of the biggest shard."),ka=c(),le=s("p"),Ko=r("Here is how we can use this to load the "),Ee=s("a"),Qo=r("GPT-J-6B"),Xo=r(" model. You clone the sharded version of this model with:"),xa=c(),b(Ae.$$.fragment),ja=c(),at=s("p"),Zo=r("then we can initialize the model with"),Pa=c(),b(Ue.$$.fragment),Ea=c(),ot=s("p"),es=r("and load the checkpoint we just downloaded with:"),Aa=c(),b(Ce.$$.fragment),Ua=c(),re=s("p"),ts=r("By passing "),Et=s("code"),as=r('device_map="auto"'),os=r(", we tell Accelerate to determine automatically where to put each layer of the model depending on the available resources:"),Ca=c(),O=s("ul"),At=s("li"),ss=r("first we use the maximum space available on the GPU(s)"),ns=c(),Ut=s("li"),is=r("if we still need space, we store the remaining weights on the CPU"),ls=c(),Ct=s("li"),rs=r("if there is not enough RAM, we store the remaining weights on the hard drive as memory-mapped tensors"),La=c(),Y=s("p"),Lt=s("code"),ds=r('no_split_module_classes=["GPTJBlock"]'),cs=r(" indicates that the modules that are "),Tt=s("code"),hs=r("GPTJBlock"),ps=r(" should not be split on different devices. You should set here all blocks that include a residual connection of some kind."),Ta=c(),S=s("p"),fs=r("You can see the "),It=s("code"),ms=r("device_map"),us=r(" that Accelerate picked by accessing the "),qt=s("code"),_s=r("hf_device_map"),gs=r(" attribute of your model:"),Ia=c(),b(Le.$$.fragment),qa=c(),b(Te.$$.fragment),Ma=c(),de=s("p"),vs=r("You can also design your "),Mt=s("code"),ws=r("device_map"),ys=r(" yourself, if you prefer to explicitly decide where each layer should be. In this case, the command above becomes:"),za=c(),b(Ie.$$.fragment),Da=c(),V=s("h2"),ce=s("a"),zt=s("span"),b(qe.$$.fragment),bs=c(),Dt=s("span"),$s=r("Run the model"),Na=c(),st=s("p"),ks=r("Now that we have done this, our model lies across several devices, and maybe the hard drive. But it can still be used as a regular PyTorch model:"),Ba=c(),b(Me.$$.fragment),Ga=c(),nt=s("p"),xs=r("Behind the scenes, Accelerate added hooks to the model, so that:"),Ra=c(),F=s("ul"),Nt=s("li"),js=r("at each layer, the inputs are put on the right device (so even if your model is spread across several GPUs, it works)"),Ps=c(),Bt=s("li"),Es=r("for the weights offloaded on the CPU, they are put on a GPU just before the forward pass, and cleaned up just after"),As=c(),Gt=s("li"),Us=r("for the weights offloaded on the hard drive, they are loaded in RAM then put on a GPU just before the forward pass, and cleaned up just after"),Oa=c(),it=s("p"),Cs=r("This way, you model can run for inference even if it doesn\u2019t fit on one of the GPUs or the CPU RAM!"),Sa=c(),K=s("h2"),he=s("a"),Rt=s("span"),b(ze.$$.fragment),Ls=c(),Ot=s("span"),Ts=r("API doc"),Fa=c(),Q=s("div"),b(De.$$.fragment),Is=c(),St=s("p"),qs=r(`Activates full CPU offload for a model. As a result, all parameters of the model will be offloaded and only one
copy of the state dict of the model will be kept. During the forward pass, parameters will be extracted from that
state dict and put on the execution device passed as they are needed, then offloaded again.`),Ha=c(),X=s("div"),b(Ne.$$.fragment),Ms=c(),Ft=s("p"),zs=r(`Activates full disk offload for a model. As a result, all parameters of the model will be offloaded as
memory-mapped array in a given folder. During the forward pass, parameters will be accessed from that folder and
put on the execution device passed as they are needed, then offloaded again.`),Wa=c(),Z=s("div"),b(Be.$$.fragment),Ds=c(),Ht=s("p"),Ns=r(`Dispatches a model according to a given device map. Layers of the model might be spread across GPUs, offloaded on
the CPU or even the disk.`),Ja=c(),q=s("div"),b(Ge.$$.fragment),Bs=c(),Wt=s("p"),Gs=r(`Compute a device map for a given model giving priority to GPUs, then offload on CPU and finally offload to disk,
such that:`),Rs=c(),N=s("ul"),Jt=s("li"),Os=r("we don\u2019t exceed the memory available of any of the GPU."),Ss=c(),Yt=s("li"),Fs=r(`if offload to the CPU is needed, there is always room left on GPU 0 to put back the layer offloaded on CPU that
has the largest size.`),Hs=c(),Vt=s("li"),Ws=r("if offload to the CPU is needed,we don\u2019t exceed the RAM available on the CPU."),Js=c(),Kt=s("li"),Ys=r(`if offload to the disk is needed, there is always room left on the CPU to put back the layer offloaded on disk
that has the largest size.`),Vs=c(),b(pe.$$.fragment),Ya=c(),M=s("div"),b(Re.$$.fragment),Ks=c(),Qt=s("p"),Qs=r(`A context manager under which models are initialized with all parameters on the meta device, therefore creating an
empty model. Useful when just initializing the model would blow the available RAM.`),Xs=c(),b(fe.$$.fragment),Zs=c(),b(me.$$.fragment),Va=c(),ee=s("div"),b(Oe.$$.fragment),en=c(),Xt=s("p"),tn=r(`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded and adds the various hooks that will make this model run properly (even if split across devices).`),Ka=c(),B=s("div"),b(Se.$$.fragment),an=c(),Zt=s("p"),on=r(`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded.`),sn=c(),b(ue.$$.fragment),this.h()},l(e){const o=Pi('[data-svelte="svelte-1phssyn"]',document.head);p=n(o,"META",{name:!0,content:!0}),o.forEach(t),g=h(e),m=n(e,"H1",{class:!0});var Fe=i(m);_=n(Fe,"A",{id:!0,class:!0,href:!0});var ea=i(_);j=n(ea,"SPAN",{});var ta=i(j);$(f.$$.fragment,ta),ta.forEach(t),ea.forEach(t),v=h(Fe),L=n(Fe,"SPAN",{});var aa=i(L);E=d(aa,"Handling big models"),aa.forEach(t),Fe.forEach(t),A=h(e),U=n(e,"P",{});var oa=i(U);P=d(oa,"When loading a pretrained model in PyTorch, the usual workflow looks like this:"),oa.forEach(t),I=h(e),$(G.$$.fragment,e),we=h(e),Je=n(e,"P",{});var nn=i(Je);mo=d(nn,"In plain English, those steps are:"),nn.forEach(t),na=h(e),R=n(e,"OL",{});var lt=i(R);pt=n(lt,"LI",{});var ln=i(pt);uo=d(ln,"Create the model with randomly initialized weights"),ln.forEach(t),_o=h(lt),ft=n(lt,"LI",{});var rn=i(ft);go=d(rn,"Load the model weights (in a dictionary usually called a state dict) from the disk"),rn.forEach(t),vo=h(lt),mt=n(lt,"LI",{});var dn=i(mt);wo=d(dn,"Load those weights inside the model"),dn.forEach(t),lt.forEach(t),ia=h(e),Ye=n(e,"P",{});var cn=i(Ye);yo=d(cn,"While this works very well for regularly sized models, this workflow has some clear limitation when we deal with a huge model: in step 1, we load a full version of the model in RAM, and spend some time randomly initializing the weights (which will be discarded in step 3). In step 2, we load another full version of the model in RAM, with the pretrained weights. If you\u2019re loading a model with 6 billions parameters, this needs you will need 24GB of RAM for each copy of the model, so 48GB in total (half of it to load the model in FP16)."),cn.forEach(t),la=h(e),H=n(e,"H2",{class:!0});var Xa=i(H);te=n(Xa,"A",{id:!0,class:!0,href:!0});var hn=i(te);ut=n(hn,"SPAN",{});var pn=i(ut);$(ye.$$.fragment,pn),pn.forEach(t),hn.forEach(t),bo=h(Xa),_t=n(Xa,"SPAN",{});var fn=i(_t);$o=d(fn,"Instantiating an empty model"),fn.forEach(t),Xa.forEach(t),ra=h(e),ae=n(e,"P",{});var Za=i(ae);ko=d(Za,"The first tool Accelerate introduces to help with big models is a context manager "),Ve=n(Za,"A",{href:!0});var mn=i(Ve);xo=d(mn,"init_empty_weights()"),mn.forEach(t),jo=d(Za," that helps you initialize a model without using any RAM, so that step 1 can be done on models of any size. Here is how it works:"),Za.forEach(t),da=h(e),$(be.$$.fragment,e),ca=h(e),Ke=n(e,"P",{});var un=i(Ke);Po=d(un,"For instance:"),un.forEach(t),ha=h(e),$($e.$$.fragment,e),pa=h(e),Qe=n(e,"P",{});var _n=i(Qe);Eo=d(_n,"initializes an empty model with a bit more than 100B parameters. Behind the scenes, this relies on the meta device introduced in PyTorch 1.9. During the initialization under the context manager, each time a parameter is created, it is instantly moved on that device."),_n.forEach(t),fa=h(e),$(oe.$$.fragment,e),ma=h(e),W=n(e,"H2",{class:!0});var eo=i(W);se=n(eo,"A",{id:!0,class:!0,href:!0});var gn=i(se);gt=n(gn,"SPAN",{});var vn=i(gt);$(ke.$$.fragment,vn),vn.forEach(t),gn.forEach(t),Ao=h(eo),vt=n(eo,"SPAN",{});var wn=i(vt);Uo=d(wn,"Sharded checkpoints"),wn.forEach(t),eo.forEach(t),ua=h(e),Xe=n(e,"P",{});var yn=i(Xe);Co=d(yn,"It\u2019s possible your model is so big that even a single copy won\u2019t fit in RAM. That doesn\u2019t mean it can\u2019t be loaded: if you have one or several GPUs, this is more memory available to store your model. In this case, it\u2019s better if your checkpoint is split in several smaller files that we call checkpoint shards."),yn.forEach(t),_a=h(e),Ze=n(e,"P",{});var bn=i(Ze);Lo=d(bn,"Accelerate will handle sharded checkpoints as long as you follow the following format: your checkpoint should be in a folder, with several files containing the partial state dicts, and there should be an index in the JSON format that contains a dictionary mapping parameter names to the file containing their weights. For instance we could have a folder containing:"),bn.forEach(t),ga=h(e),$(xe.$$.fragment,e),va=h(e),et=n(e,"P",{});var $n=i(et);To=d($n,"with index.json being the following file:"),$n.forEach(t),wa=h(e),$(je.$$.fragment,e),ya=h(e),T=n(e,"P",{});var z=i(T);Io=d(z,"and "),wt=n(z,"CODE",{});var kn=i(wt);qo=d(kn,"first_state_dict.bin"),kn.forEach(t),Mo=d(z," containing the weights for "),yt=n(z,"CODE",{});var xn=i(yt);zo=d(xn,'"linear1.weight"'),xn.forEach(t),Do=d(z," and "),bt=n(z,"CODE",{});var jn=i(bt);No=d(jn,'"linear1.bias"'),jn.forEach(t),Bo=d(z,", "),$t=n(z,"CODE",{});var Pn=i($t);Go=d(Pn,"second_state_dict.bin"),Pn.forEach(t),Ro=d(z," the ones for "),kt=n(z,"CODE",{});var En=i(kt);Oo=d(En,'"linear2.weight"'),En.forEach(t),So=d(z," and "),xt=n(z,"CODE",{});var An=i(xt);Fo=d(An,'"linear2.bias"'),An.forEach(t),z.forEach(t),ba=h(e),J=n(e,"H2",{class:!0});var to=i(J);ne=n(to,"A",{id:!0,class:!0,href:!0});var Un=i(ne);jt=n(Un,"SPAN",{});var Cn=i(jt);$(Pe.$$.fragment,Cn),Cn.forEach(t),Un.forEach(t),Ho=h(to),Pt=n(to,"SPAN",{});var Ln=i(Pt);Wo=d(Ln,"Loading weights"),Ln.forEach(t),to.forEach(t),$a=h(e),ie=n(e,"P",{});var ao=i(ie);Jo=d(ao,"The second tool Accelerate introduces is a function "),tt=n(ao,"A",{href:!0});var Tn=i(tt);Yo=d(Tn,"load_checkpoint_and_dispatch()"),Tn.forEach(t),Vo=d(ao,", that will allow you to load a checkpoint inside your empty model. This supports full checkpoints (a single file containing the whole state dict) as well as sharded checkpoints. It will also automatically dispatch those weights across the devices you have available (GPUs, CPU RAM), so if you are loading a sharded checkpoint, the maximum RAM usage will be the size of the biggest shard."),ao.forEach(t),ka=h(e),le=n(e,"P",{});var oo=i(le);Ko=d(oo,"Here is how we can use this to load the "),Ee=n(oo,"A",{href:!0,rel:!0});var In=i(Ee);Qo=d(In,"GPT-J-6B"),In.forEach(t),Xo=d(oo," model. You clone the sharded version of this model with:"),oo.forEach(t),xa=h(e),$(Ae.$$.fragment,e),ja=h(e),at=n(e,"P",{});var qn=i(at);Zo=d(qn,"then we can initialize the model with"),qn.forEach(t),Pa=h(e),$(Ue.$$.fragment,e),Ea=h(e),ot=n(e,"P",{});var Mn=i(ot);es=d(Mn,"and load the checkpoint we just downloaded with:"),Mn.forEach(t),Aa=h(e),$(Ce.$$.fragment,e),Ua=h(e),re=n(e,"P",{});var so=i(re);ts=d(so,"By passing "),Et=n(so,"CODE",{});var zn=i(Et);as=d(zn,'device_map="auto"'),zn.forEach(t),os=d(so,", we tell Accelerate to determine automatically where to put each layer of the model depending on the available resources:"),so.forEach(t),Ca=h(e),O=n(e,"UL",{});var rt=i(O);At=n(rt,"LI",{});var Dn=i(At);ss=d(Dn,"first we use the maximum space available on the GPU(s)"),Dn.forEach(t),ns=h(rt),Ut=n(rt,"LI",{});var Nn=i(Ut);is=d(Nn,"if we still need space, we store the remaining weights on the CPU"),Nn.forEach(t),ls=h(rt),Ct=n(rt,"LI",{});var Bn=i(Ct);rs=d(Bn,"if there is not enough RAM, we store the remaining weights on the hard drive as memory-mapped tensors"),Bn.forEach(t),rt.forEach(t),La=h(e),Y=n(e,"P",{});var sa=i(Y);Lt=n(sa,"CODE",{});var Gn=i(Lt);ds=d(Gn,'no_split_module_classes=["GPTJBlock"]'),Gn.forEach(t),cs=d(sa," indicates that the modules that are "),Tt=n(sa,"CODE",{});var Rn=i(Tt);hs=d(Rn,"GPTJBlock"),Rn.forEach(t),ps=d(sa," should not be split on different devices. You should set here all blocks that include a residual connection of some kind."),sa.forEach(t),Ta=h(e),S=n(e,"P",{});var dt=i(S);fs=d(dt,"You can see the "),It=n(dt,"CODE",{});var On=i(It);ms=d(On,"device_map"),On.forEach(t),us=d(dt," that Accelerate picked by accessing the "),qt=n(dt,"CODE",{});var Sn=i(qt);_s=d(Sn,"hf_device_map"),Sn.forEach(t),gs=d(dt," attribute of your model:"),dt.forEach(t),Ia=h(e),$(Le.$$.fragment,e),qa=h(e),$(Te.$$.fragment,e),Ma=h(e),de=n(e,"P",{});var no=i(de);vs=d(no,"You can also design your "),Mt=n(no,"CODE",{});var Fn=i(Mt);ws=d(Fn,"device_map"),Fn.forEach(t),ys=d(no," yourself, if you prefer to explicitly decide where each layer should be. In this case, the command above becomes:"),no.forEach(t),za=h(e),$(Ie.$$.fragment,e),Da=h(e),V=n(e,"H2",{class:!0});var io=i(V);ce=n(io,"A",{id:!0,class:!0,href:!0});var Hn=i(ce);zt=n(Hn,"SPAN",{});var Wn=i(zt);$(qe.$$.fragment,Wn),Wn.forEach(t),Hn.forEach(t),bs=h(io),Dt=n(io,"SPAN",{});var Jn=i(Dt);$s=d(Jn,"Run the model"),Jn.forEach(t),io.forEach(t),Na=h(e),st=n(e,"P",{});var Yn=i(st);ks=d(Yn,"Now that we have done this, our model lies across several devices, and maybe the hard drive. But it can still be used as a regular PyTorch model:"),Yn.forEach(t),Ba=h(e),$(Me.$$.fragment,e),Ga=h(e),nt=n(e,"P",{});var Vn=i(nt);xs=d(Vn,"Behind the scenes, Accelerate added hooks to the model, so that:"),Vn.forEach(t),Ra=h(e),F=n(e,"UL",{});var ct=i(F);Nt=n(ct,"LI",{});var Kn=i(Nt);js=d(Kn,"at each layer, the inputs are put on the right device (so even if your model is spread across several GPUs, it works)"),Kn.forEach(t),Ps=h(ct),Bt=n(ct,"LI",{});var Qn=i(Bt);Es=d(Qn,"for the weights offloaded on the CPU, they are put on a GPU just before the forward pass, and cleaned up just after"),Qn.forEach(t),As=h(ct),Gt=n(ct,"LI",{});var Xn=i(Gt);Us=d(Xn,"for the weights offloaded on the hard drive, they are loaded in RAM then put on a GPU just before the forward pass, and cleaned up just after"),Xn.forEach(t),ct.forEach(t),Oa=h(e),it=n(e,"P",{});var Zn=i(it);Cs=d(Zn,"This way, you model can run for inference even if it doesn\u2019t fit on one of the GPUs or the CPU RAM!"),Zn.forEach(t),Sa=h(e),K=n(e,"H2",{class:!0});var lo=i(K);he=n(lo,"A",{id:!0,class:!0,href:!0});var ei=i(he);Rt=n(ei,"SPAN",{});var ti=i(Rt);$(ze.$$.fragment,ti),ti.forEach(t),ei.forEach(t),Ls=h(lo),Ot=n(lo,"SPAN",{});var ai=i(Ot);Ts=d(ai,"API doc"),ai.forEach(t),lo.forEach(t),Fa=h(e),Q=n(e,"DIV",{class:!0});var ro=i(Q);$(De.$$.fragment,ro),Is=h(ro),St=n(ro,"P",{});var oi=i(St);qs=d(oi,`Activates full CPU offload for a model. As a result, all parameters of the model will be offloaded and only one
copy of the state dict of the model will be kept. During the forward pass, parameters will be extracted from that
state dict and put on the execution device passed as they are needed, then offloaded again.`),oi.forEach(t),ro.forEach(t),Ha=h(e),X=n(e,"DIV",{class:!0});var co=i(X);$(Ne.$$.fragment,co),Ms=h(co),Ft=n(co,"P",{});var si=i(Ft);zs=d(si,`Activates full disk offload for a model. As a result, all parameters of the model will be offloaded as
memory-mapped array in a given folder. During the forward pass, parameters will be accessed from that folder and
put on the execution device passed as they are needed, then offloaded again.`),si.forEach(t),co.forEach(t),Wa=h(e),Z=n(e,"DIV",{class:!0});var ho=i(Z);$(Be.$$.fragment,ho),Ds=h(ho),Ht=n(ho,"P",{});var ni=i(Ht);Ns=d(ni,`Dispatches a model according to a given device map. Layers of the model might be spread across GPUs, offloaded on
the CPU or even the disk.`),ni.forEach(t),ho.forEach(t),Ja=h(e),q=n(e,"DIV",{class:!0});var _e=i(q);$(Ge.$$.fragment,_e),Bs=h(_e),Wt=n(_e,"P",{});var ii=i(Wt);Gs=d(ii,`Compute a device map for a given model giving priority to GPUs, then offload on CPU and finally offload to disk,
such that:`),ii.forEach(t),Rs=h(_e),N=n(_e,"UL",{});var ge=i(N);Jt=n(ge,"LI",{});var li=i(Jt);Os=d(li,"we don\u2019t exceed the memory available of any of the GPU."),li.forEach(t),Ss=h(ge),Yt=n(ge,"LI",{});var ri=i(Yt);Fs=d(ri,`if offload to the CPU is needed, there is always room left on GPU 0 to put back the layer offloaded on CPU that
has the largest size.`),ri.forEach(t),Hs=h(ge),Vt=n(ge,"LI",{});var di=i(Vt);Ws=d(di,"if offload to the CPU is needed,we don\u2019t exceed the RAM available on the CPU."),di.forEach(t),Js=h(ge),Kt=n(ge,"LI",{});var ci=i(Kt);Ys=d(ci,`if offload to the disk is needed, there is always room left on the CPU to put back the layer offloaded on disk
that has the largest size.`),ci.forEach(t),ge.forEach(t),Vs=h(_e),$(pe.$$.fragment,_e),_e.forEach(t),Ya=h(e),M=n(e,"DIV",{class:!0});var ve=i(M);$(Re.$$.fragment,ve),Ks=h(ve),Qt=n(ve,"P",{});var hi=i(Qt);Qs=d(hi,`A context manager under which models are initialized with all parameters on the meta device, therefore creating an
empty model. Useful when just initializing the model would blow the available RAM.`),hi.forEach(t),Xs=h(ve),$(fe.$$.fragment,ve),Zs=h(ve),$(me.$$.fragment,ve),ve.forEach(t),Va=h(e),ee=n(e,"DIV",{class:!0});var po=i(ee);$(Oe.$$.fragment,po),en=h(po),Xt=n(po,"P",{});var pi=i(Xt);tn=d(pi,`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded and adds the various hooks that will make this model run properly (even if split across devices).`),pi.forEach(t),po.forEach(t),Ka=h(e),B=n(e,"DIV",{class:!0});var ht=i(B);$(Se.$$.fragment,ht),an=h(ht),Zt=n(ht,"P",{});var fi=i(Zt);on=d(fi,`Loads a (potentially sharded) checkpoint inside a model, potentially sending weights to a given device as they are
loaded.`),fi.forEach(t),sn=h(ht),$(ue.$$.fragment,ht),ht.forEach(t),this.h()},h(){u(p,"name","hf:doc:metadata"),u(p,"content",JSON.stringify(Ni)),u(_,"id","handling-big-models"),u(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(_,"href","#handling-big-models"),u(m,"class","relative group"),u(te,"id","instantiating-an-empty-model"),u(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(te,"href","#instantiating-an-empty-model"),u(H,"class","relative group"),u(Ve,"href","/docs/accelerate/pr_345/en/big_modeling#accelerate.init_empty_weights"),u(se,"id","sharded-checkpoints"),u(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(se,"href","#sharded-checkpoints"),u(W,"class","relative group"),u(ne,"id","accelerate.cpu_offload"),u(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ne,"href","#accelerate.cpu_offload"),u(J,"class","relative group"),u(tt,"href","/docs/accelerate/pr_345/en/big_modeling#accelerate.load_checkpoint_and_dispatch"),u(Ee,"href","https://huggingface.co/EleutherAI/gpt-j-6B"),u(Ee,"rel","nofollow"),u(ce,"id","run-the-model"),u(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ce,"href","#run-the-model"),u(V,"class","relative group"),u(he,"id","api-doc"),u(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(he,"href","#api-doc"),u(K,"class","relative group"),u(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,o){a(document.head,p),l(e,g,o),l(e,m,o),a(m,_),a(_,j),k(f,j,null),a(m,v),a(m,L),a(L,E),l(e,A,o),l(e,U,o),a(U,P),l(e,I,o),k(G,e,o),l(e,we,o),l(e,Je,o),a(Je,mo),l(e,na,o),l(e,R,o),a(R,pt),a(pt,uo),a(R,_o),a(R,ft),a(ft,go),a(R,vo),a(R,mt),a(mt,wo),l(e,ia,o),l(e,Ye,o),a(Ye,yo),l(e,la,o),l(e,H,o),a(H,te),a(te,ut),k(ye,ut,null),a(H,bo),a(H,_t),a(_t,$o),l(e,ra,o),l(e,ae,o),a(ae,ko),a(ae,Ve),a(Ve,xo),a(ae,jo),l(e,da,o),k(be,e,o),l(e,ca,o),l(e,Ke,o),a(Ke,Po),l(e,ha,o),k($e,e,o),l(e,pa,o),l(e,Qe,o),a(Qe,Eo),l(e,fa,o),k(oe,e,o),l(e,ma,o),l(e,W,o),a(W,se),a(se,gt),k(ke,gt,null),a(W,Ao),a(W,vt),a(vt,Uo),l(e,ua,o),l(e,Xe,o),a(Xe,Co),l(e,_a,o),l(e,Ze,o),a(Ze,Lo),l(e,ga,o),k(xe,e,o),l(e,va,o),l(e,et,o),a(et,To),l(e,wa,o),k(je,e,o),l(e,ya,o),l(e,T,o),a(T,Io),a(T,wt),a(wt,qo),a(T,Mo),a(T,yt),a(yt,zo),a(T,Do),a(T,bt),a(bt,No),a(T,Bo),a(T,$t),a($t,Go),a(T,Ro),a(T,kt),a(kt,Oo),a(T,So),a(T,xt),a(xt,Fo),l(e,ba,o),l(e,J,o),a(J,ne),a(ne,jt),k(Pe,jt,null),a(J,Ho),a(J,Pt),a(Pt,Wo),l(e,$a,o),l(e,ie,o),a(ie,Jo),a(ie,tt),a(tt,Yo),a(ie,Vo),l(e,ka,o),l(e,le,o),a(le,Ko),a(le,Ee),a(Ee,Qo),a(le,Xo),l(e,xa,o),k(Ae,e,o),l(e,ja,o),l(e,at,o),a(at,Zo),l(e,Pa,o),k(Ue,e,o),l(e,Ea,o),l(e,ot,o),a(ot,es),l(e,Aa,o),k(Ce,e,o),l(e,Ua,o),l(e,re,o),a(re,ts),a(re,Et),a(Et,as),a(re,os),l(e,Ca,o),l(e,O,o),a(O,At),a(At,ss),a(O,ns),a(O,Ut),a(Ut,is),a(O,ls),a(O,Ct),a(Ct,rs),l(e,La,o),l(e,Y,o),a(Y,Lt),a(Lt,ds),a(Y,cs),a(Y,Tt),a(Tt,hs),a(Y,ps),l(e,Ta,o),l(e,S,o),a(S,fs),a(S,It),a(It,ms),a(S,us),a(S,qt),a(qt,_s),a(S,gs),l(e,Ia,o),k(Le,e,o),l(e,qa,o),k(Te,e,o),l(e,Ma,o),l(e,de,o),a(de,vs),a(de,Mt),a(Mt,ws),a(de,ys),l(e,za,o),k(Ie,e,o),l(e,Da,o),l(e,V,o),a(V,ce),a(ce,zt),k(qe,zt,null),a(V,bs),a(V,Dt),a(Dt,$s),l(e,Na,o),l(e,st,o),a(st,ks),l(e,Ba,o),k(Me,e,o),l(e,Ga,o),l(e,nt,o),a(nt,xs),l(e,Ra,o),l(e,F,o),a(F,Nt),a(Nt,js),a(F,Ps),a(F,Bt),a(Bt,Es),a(F,As),a(F,Gt),a(Gt,Us),l(e,Oa,o),l(e,it,o),a(it,Cs),l(e,Sa,o),l(e,K,o),a(K,he),a(he,Rt),k(ze,Rt,null),a(K,Ls),a(K,Ot),a(Ot,Ts),l(e,Fa,o),l(e,Q,o),k(De,Q,null),a(Q,Is),a(Q,St),a(St,qs),l(e,Ha,o),l(e,X,o),k(Ne,X,null),a(X,Ms),a(X,Ft),a(Ft,zs),l(e,Wa,o),l(e,Z,o),k(Be,Z,null),a(Z,Ds),a(Z,Ht),a(Ht,Ns),l(e,Ja,o),l(e,q,o),k(Ge,q,null),a(q,Bs),a(q,Wt),a(Wt,Gs),a(q,Rs),a(q,N),a(N,Jt),a(Jt,Os),a(N,Ss),a(N,Yt),a(Yt,Fs),a(N,Hs),a(N,Vt),a(Vt,Ws),a(N,Js),a(N,Kt),a(Kt,Ys),a(q,Vs),k(pe,q,null),l(e,Ya,o),l(e,M,o),k(Re,M,null),a(M,Ks),a(M,Qt),a(Qt,Qs),a(M,Xs),k(fe,M,null),a(M,Zs),k(me,M,null),l(e,Va,o),l(e,ee,o),k(Oe,ee,null),a(ee,en),a(ee,Xt),a(Xt,tn),l(e,Ka,o),l(e,B,o),k(Se,B,null),a(B,an),a(B,Zt),a(Zt,on),a(B,sn),k(ue,B,null),Qa=!0},p(e,[o]){const Fe={};o&2&&(Fe.$$scope={dirty:o,ctx:e}),oe.$set(Fe);const ea={};o&2&&(ea.$$scope={dirty:o,ctx:e}),pe.$set(ea);const ta={};o&2&&(ta.$$scope={dirty:o,ctx:e}),fe.$set(ta);const aa={};o&2&&(aa.$$scope={dirty:o,ctx:e}),me.$set(aa);const oa={};o&2&&(oa.$$scope={dirty:o,ctx:e}),ue.$set(oa)},i(e){Qa||(w(f.$$.fragment,e),w(G.$$.fragment,e),w(ye.$$.fragment,e),w(be.$$.fragment,e),w($e.$$.fragment,e),w(oe.$$.fragment,e),w(ke.$$.fragment,e),w(xe.$$.fragment,e),w(je.$$.fragment,e),w(Pe.$$.fragment,e),w(Ae.$$.fragment,e),w(Ue.$$.fragment,e),w(Ce.$$.fragment,e),w(Le.$$.fragment,e),w(Te.$$.fragment,e),w(Ie.$$.fragment,e),w(qe.$$.fragment,e),w(Me.$$.fragment,e),w(ze.$$.fragment,e),w(De.$$.fragment,e),w(Ne.$$.fragment,e),w(Be.$$.fragment,e),w(Ge.$$.fragment,e),w(pe.$$.fragment,e),w(Re.$$.fragment,e),w(fe.$$.fragment,e),w(me.$$.fragment,e),w(Oe.$$.fragment,e),w(Se.$$.fragment,e),w(ue.$$.fragment,e),Qa=!0)},o(e){y(f.$$.fragment,e),y(G.$$.fragment,e),y(ye.$$.fragment,e),y(be.$$.fragment,e),y($e.$$.fragment,e),y(oe.$$.fragment,e),y(ke.$$.fragment,e),y(xe.$$.fragment,e),y(je.$$.fragment,e),y(Pe.$$.fragment,e),y(Ae.$$.fragment,e),y(Ue.$$.fragment,e),y(Ce.$$.fragment,e),y(Le.$$.fragment,e),y(Te.$$.fragment,e),y(Ie.$$.fragment,e),y(qe.$$.fragment,e),y(Me.$$.fragment,e),y(ze.$$.fragment,e),y(De.$$.fragment,e),y(Ne.$$.fragment,e),y(Be.$$.fragment,e),y(Ge.$$.fragment,e),y(pe.$$.fragment,e),y(Re.$$.fragment,e),y(fe.$$.fragment,e),y(me.$$.fragment,e),y(Oe.$$.fragment,e),y(Se.$$.fragment,e),y(ue.$$.fragment,e),Qa=!1},d(e){t(p),e&&t(g),e&&t(m),x(f),e&&t(A),e&&t(U),e&&t(I),x(G,e),e&&t(we),e&&t(Je),e&&t(na),e&&t(R),e&&t(ia),e&&t(Ye),e&&t(la),e&&t(H),x(ye),e&&t(ra),e&&t(ae),e&&t(da),x(be,e),e&&t(ca),e&&t(Ke),e&&t(ha),x($e,e),e&&t(pa),e&&t(Qe),e&&t(fa),x(oe,e),e&&t(ma),e&&t(W),x(ke),e&&t(ua),e&&t(Xe),e&&t(_a),e&&t(Ze),e&&t(ga),x(xe,e),e&&t(va),e&&t(et),e&&t(wa),x(je,e),e&&t(ya),e&&t(T),e&&t(ba),e&&t(J),x(Pe),e&&t($a),e&&t(ie),e&&t(ka),e&&t(le),e&&t(xa),x(Ae,e),e&&t(ja),e&&t(at),e&&t(Pa),x(Ue,e),e&&t(Ea),e&&t(ot),e&&t(Aa),x(Ce,e),e&&t(Ua),e&&t(re),e&&t(Ca),e&&t(O),e&&t(La),e&&t(Y),e&&t(Ta),e&&t(S),e&&t(Ia),x(Le,e),e&&t(qa),x(Te,e),e&&t(Ma),e&&t(de),e&&t(za),x(Ie,e),e&&t(Da),e&&t(V),x(qe),e&&t(Na),e&&t(st),e&&t(Ba),x(Me,e),e&&t(Ga),e&&t(nt),e&&t(Ra),e&&t(F),e&&t(Oa),e&&t(it),e&&t(Sa),e&&t(K),x(ze),e&&t(Fa),e&&t(Q),x(De),e&&t(Ha),e&&t(X),x(Ne),e&&t(Wa),e&&t(Z),x(Be),e&&t(Ja),e&&t(q),x(Ge),x(pe),e&&t(Ya),e&&t(M),x(Re),x(fe),x(me),e&&t(Va),e&&t(ee),x(Oe),e&&t(Ka),e&&t(B),x(Se),x(ue)}}}const Ni={local:"initialize-a-model-with-100-billions-parameters-in-no-time-and-without-using-any-ram",title:"Initialize a model with 100 billions parameters in no time and without using any RAM."};function Bi(C){return vi(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Hi extends ui{constructor(p){super();_i(this,p,Bi,Di,gi,{})}}export{Hi as default,Ni as metadata};
