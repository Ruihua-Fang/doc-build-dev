import{S as zs,i as js,s as Ns,e as o,k as s,w as m,t,M as qs,c,d as a,m as i,a as l,x as f,h as r,b as h,F as e,g as L,y as g,q as u,o as _,B as v,v as Ss}from"../chunks/vendor-4918fc3c.js";import{T as Vs}from"../chunks/Tip-3d800dd6.js";import{D as b}from"../chunks/Docstring-02f0cd65.js";import{I as Gs}from"../chunks/IconCopyLink-21d338b1.js";function Rs(Rr){let $,Q,A,P,G,k,Te,R,M,Z,I;return{c(){$=o("p"),Q=t("Every "),A=o("code"),P=t("object"),G=t(" must have a "),k=o("code"),Te=t("load_state_dict"),R=t(" and "),M=o("code"),Z=t("state_dict"),I=t(" function to be stored.")},l(W){$=c(W,"P",{});var w=l($);Q=r(w,"Every "),A=c(w,"CODE",{});var gt=l(A);P=r(gt,"object"),gt.forEach(a),G=r(w," must have a "),k=c(w,"CODE",{});var ut=l(k);Te=r(ut,"load_state_dict"),ut.forEach(a),R=r(w," and "),M=c(w,"CODE",{});var Le=l(M);Z=r(Le,"state_dict"),Le.forEach(a),I=r(w," function to be stored."),w.forEach(a)},m(W,w){L(W,$,w),e($,Q),e($,A),e(A,P),e($,G),e($,k),e(k,Te),e($,R),e($,M),e(M,Z),e($,I)},d(W){W&&a($)}}}function Ms(Rr){let $,Q,A,P,G,k,Te,R,M,Z,I,W,w,gt,ut,Le,x,F,La,_t,Pa,Ia,St,Oa,Ua,Ca,Pe,za,vt,ja,Na,qa,C,Sa,Vt,Va,Ga,Gt,Ra,Ma,Rt,Wa,Fa,Ha,H,Ya,Mt,Ka,Xa,Wt,Ba,Ja,Qa,Ie,Za,bt,eo,to,Mr,ee,ro,Ft,ao,oo,Wr,y,te,Ht,co,lo,$t,no,so,io,Oe,po,Yt,ho,mo,fo,Ue,go,Kt,uo,_o,vo,Ce,bo,yt,$o,yo,Eo,ze,wo,Et,Ao,xo,Do,Y,ko,wt,To,Lo,Xt,Po,Io,Oo,T,Uo,re,Co,Bt,zo,jo,No,Jt,qo,So,ae,Vo,Qt,Go,Ro,Mo,Zt,Wo,Fo,Fr,d,je,Ho,er,Yo,Ko,tr,Xo,Bo,Ne,oe,rr,Jo,Qo,ar,Zo,ec,tc,ce,or,rc,ac,At,oc,cc,lc,le,qe,nc,cr,sc,ic,ne,Se,dc,K,pc,lr,hc,mc,nr,fc,gc,uc,se,Ve,_c,Ge,vc,sr,bc,$c,yc,ie,Re,Ec,Me,wc,ir,Ac,xc,Dc,de,We,kc,Fe,Tc,dr,Lc,Pc,Ic,pe,He,Oc,pr,Uc,Cc,he,Ye,zc,hr,jc,Nc,j,Ke,qc,Xe,Sc,mr,Vc,Gc,Rc,fr,Mc,Wc,me,Be,Fc,Je,Hc,gr,Yc,Kc,Xc,fe,Qe,Bc,ur,Jc,Qc,N,Ze,Zc,_r,el,tl,vr,rl,al,ge,et,ol,X,cl,br,ll,nl,$r,sl,il,dl,q,tt,pl,yr,hl,ml,Er,fl,gl,ue,rt,ul,wr,_l,vl,O,at,bl,ot,$l,Ar,yl,El,wl,xr,Al,xl,B,xt,Dr,Dl,kl,Tl,Dt,kr,Ll,Pl,Il,kt,Tr,Ol,Ul,Cl,_e,ct,zl,lt,jl,Lr,Nl,ql,Sl,U,nt,Vl,z,Gl,Pr,Rl,Ml,Ir,Wl,Fl,Or,Hl,Yl,Kl,Ur,Xl,Bl,ve,Jl,be,st,Ql,it,Zl,Cr,en,tn,rn,$e,dt,an,zr,on,cn,ye,pt,ln,jr,nn,sn,Ee,ht,dn,J,pn,Nr,hn,mn,Tt,fn,gn,un,we,mt,_n,qr,vn,Hr;return k=new Gs({}),je=new b({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.PrecisionType, str] = None"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.kwargs_handlers.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <code>LoggerType</code> or <a href="/docs/accelerate/pr_323/en/internal#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all</code>&#x201D; is selected, will pick up all available trackers in the environment and intialize them. Can also
accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L59"}}),qe=new b({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L802"}}),Se=new b({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L512"}}),Ve=new b({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L728"}}),Re=new b({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L543"}}),We=new b({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L550"}}),He=new b({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L650"}}),Ye=new b({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L716"}}),Ke=new b({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L557",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),Be=new b({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L610"}}),Qe=new b({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L689"}}),Ze=new b({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L276"}}),et=new b({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L636"}}),tt=new b({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L285"}}),rt=new b({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L575"}}),at=new b({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L329"}}),ct=new b({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L303"}}),nt=new b({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L778"}}),ve=new Vs({props:{$$slots:{default:[Rs]},$$scope:{ctx:Rr}}}),st=new b({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L658"}}),dt=new b({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L669"}}),pt=new b({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/pr_323/en/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L523"}}),ht=new b({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L592"}}),mt=new b({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/pr_323/src/accelerate/accelerator.py#L603"}}),{c(){$=o("meta"),Q=s(),A=o("h1"),P=o("a"),G=o("span"),m(k.$$.fragment),Te=s(),R=o("span"),M=t("Accelerator"),Z=s(),I=o("p"),W=t("The "),w=o("a"),gt=t("Accelerator"),ut=t(` is the main class provided by \u{1F917} Accelerate. It serves at the main entrypoint for
the API. To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate juste:`),Le=s(),x=o("ol"),F=o("li"),La=t("Initialize an "),_t=o("a"),Pa=t("Accelerator"),Ia=t(" object (that we will call "),St=o("code"),Oa=t("accelerator"),Ua=t(` in the rest of this
page) as early as possible in your script.`),Ca=s(),Pe=o("li"),za=t("Pass along your model(s), optimizer(s), dataloader(s) to the "),vt=o("a"),ja=t("prepare()"),Na=t(" method."),qa=s(),C=o("li"),Sa=t("(Optional but best practice) Remove all the "),Vt=o("code"),Va=t(".cuda()"),Ga=t(" or "),Gt=o("code"),Ra=t(".to(device)"),Ma=t(` in your code and let the
`),Rt=o("code"),Wa=t("accelerator"),Fa=t(" handle device placement for you."),Ha=s(),H=o("li"),Ya=t("Replace the "),Mt=o("code"),Ka=t("loss.backward()"),Xa=t(" in your code by "),Wt=o("code"),Ba=t("accelerator.backward(loss)"),Ja=t("."),Qa=s(),Ie=o("li"),Za=t(`(Optional, when using distributed evaluation) Gather your predictions and labelsbefore storing them or using them
for metric computation using `),bt=o("a"),eo=t("gather()"),to=t("."),Mr=s(),ee=o("p"),ro=t(`This is all what is needed in most cases. For more advanced case or a nicer experience here are the functions you
should search for and replace by the corresponding methods of your `),Ft=o("code"),ao=t("accelerator"),oo=t(":"),Wr=s(),y=o("ul"),te=o("li"),Ht=o("code"),co=t("print"),lo=t(" statements should be replaced by "),$t=o("a"),no=t("print()"),so=t(` to be only printed once per
process.`),io=s(),Oe=o("li"),po=t("Use "),Yt=o("code"),ho=t("is_local_main_process()"),mo=t(" for statements that should be executed once per server."),fo=s(),Ue=o("li"),go=t("Use "),Kt=o("code"),uo=t("is_main_process()"),_o=t(" for statements that should be executed once only."),vo=s(),Ce=o("li"),bo=t("Use "),yt=o("a"),$o=t("wait_for_everyone()"),yo=t(` to make sure all processes join that point before continuing
(useful before a model save for instance).`),Eo=s(),ze=o("li"),wo=t("Use "),Et=o("a"),Ao=t("unwrap_model()"),xo=t(" to unwrap your model before saving it."),Do=s(),Y=o("li"),ko=t("Use "),wt=o("a"),To=t("save()"),Lo=t(" instead of "),Xt=o("code"),Po=t("torch.save"),Io=t("."),Oo=s(),T=o("li"),Uo=t("Use "),re=o("a"),Co=t("clip"),Bt=o("em"),zo=t("grad_norm"),jo=t("()"),No=t(" instead of "),Jt=o("code"),qo=t("torch.nn.utils.clip_grad_norm_"),So=t(` and
`),ae=o("a"),Vo=t("clip"),Qt=o("em"),Go=t("grad_value"),Ro=t("()"),Mo=t(" instead of "),Zt=o("code"),Wo=t("torch.nn.utils.clip_grad_value_"),Fo=t("."),Fr=s(),d=o("div"),m(je.$$.fragment),Ho=s(),er=o("p"),Yo=t("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Ko=s(),tr=o("p"),Xo=t("Attributes"),Bo=s(),Ne=o("ul"),oe=o("li"),rr=o("strong"),Jo=t("device"),Qo=t(" ("),ar=o("code"),Zo=t("torch.device"),ec=t(") \u2014 The device to use."),tc=s(),ce=o("li"),or=o("strong"),rc=t("state"),ac=t(" ("),At=o("a"),oc=t("AcceleratorState"),cc=t(") \u2014 The distributed setup state."),lc=s(),le=o("div"),m(qe.$$.fragment),nc=s(),cr=o("p"),sc=t(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),ic=s(),ne=o("div"),m(Se.$$.fragment),dc=s(),K=o("p"),pc=t("Use "),lr=o("code"),hc=t("accelerator.backward(loss)"),mc=t(" in lieu of "),nr=o("code"),fc=t("loss.backward()"),gc=t("."),uc=s(),se=o("div"),m(Ve.$$.fragment),_c=s(),Ge=o("p"),vc=t("Alias for "),sr=o("code"),bc=t("Accelerate.free_memory"),$c=t(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),yc=s(),ie=o("div"),m(Re.$$.fragment),Ec=s(),Me=o("p"),wc=t("Should be used in place of "),ir=o("code"),Ac=t("torch.nn.utils.clip_grad_norm_"),xc=t("."),Dc=s(),de=o("div"),m(We.$$.fragment),kc=s(),Fe=o("p"),Tc=t("Should be used in place of "),dr=o("code"),Lc=t("torch.nn.utils.clip_grad_value_"),Pc=t("."),Ic=s(),pe=o("div"),m(He.$$.fragment),Oc=s(),pr=o("p"),Uc=t("Runs any special end training behaviors, such as stopping trackers"),Cc=s(),he=o("div"),m(Ye.$$.fragment),zc=s(),hr=o("p"),jc=t(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Nc=s(),j=o("div"),m(Ke.$$.fragment),qc=s(),Xe=o("p"),Sc=t("Gather the values in "),mr=o("em"),Vc=t("tensor"),Gc=t(` accross all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Rc=s(),fr=o("p"),Mc=t(`Note:
This gather happens in all processes.`),Wc=s(),me=o("div"),m(Be.$$.fragment),Fc=s(),Je=o("p"),Hc=t("Initializes a run for all trackers stored in "),gr=o("code"),Yc=t("self.log_with"),Kc=t(", potentially with starting configurations"),Xc=s(),fe=o("div"),m(Qe.$$.fragment),Bc=s(),ur=o("p"),Jc=t("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Qc=s(),N=o("div"),m(Ze.$$.fragment),Zc=s(),_r=o("p"),el=t("Lets the local main process go inside a with block."),tl=s(),vr=o("p"),rl=t("The other processes will enter the with block after the main process exits."),al=s(),ge=o("div"),m(et.$$.fragment),ol=s(),X=o("p"),cl=t("Logs "),br=o("code"),ll=t("values"),nl=t(" to all stored trackers in "),$r=o("code"),sl=t("self.trackers"),il=t("."),dl=s(),q=o("div"),m(tt.$$.fragment),pl=s(),yr=o("p"),hl=t("Lets the main process go first inside a with block."),ml=s(),Er=o("p"),fl=t("The other processes will enter the with block after the main process exits."),gl=s(),ue=o("div"),m(rt.$$.fragment),ul=s(),wr=o("p"),_l=t(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),vl=s(),O=o("div"),m(at.$$.fragment),bl=s(),ot=o("p"),$l=t("Prepare all objects passed in "),Ar=o("code"),yl=t("args"),El=t(` for distributed training and mixed precision, then return them in the same
order.`),wl=s(),xr=o("p"),Al=t("Accepts the following type of objects:"),xl=s(),B=o("ul"),xt=o("li"),Dr=o("code"),Dl=t("torch.utils.data.DataLoader"),kl=t(": PyTorch Dataloader"),Tl=s(),Dt=o("li"),kr=o("code"),Ll=t("torch.nn.Module"),Pl=t(": PyTorch Module"),Il=s(),kt=o("li"),Tr=o("code"),Ol=t("torch.optim.Optimizer"),Ul=t(": PyTorch Optimizer"),Cl=s(),_e=o("div"),m(ct.$$.fragment),zl=s(),lt=o("p"),jl=t("Use in replacement of "),Lr=o("code"),Nl=t("print()"),ql=t(" to only print once per server."),Sl=s(),U=o("div"),m(nt.$$.fragment),Vl=s(),z=o("p"),Gl=t("Makes note of "),Pr=o("code"),Rl=t("objects"),Ml=t(" and will save or load them in during "),Ir=o("code"),Wl=t("save_state"),Fl=t(" or "),Or=o("code"),Hl=t("load_state"),Yl=t("."),Kl=s(),Ur=o("p"),Xl=t(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Bl=s(),m(ve.$$.fragment),Jl=s(),be=o("div"),m(st.$$.fragment),Ql=s(),it=o("p"),Zl=t("Save the object passed to disk once per machine. Use in place of "),Cr=o("code"),en=t("torch.save"),tn=t("."),rn=s(),$e=o("div"),m(dt.$$.fragment),an=s(),zr=o("p"),on=t("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),cn=s(),ye=o("div"),m(pt.$$.fragment),ln=s(),jr=o("p"),nn=t("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),sn=s(),Ee=o("div"),m(ht.$$.fragment),dn=s(),J=o("p"),pn=t("Unwraps the "),Nr=o("code"),hn=t("model"),mn=t(" from the additional layer possible added by "),Tt=o("a"),fn=t("prepare()"),gn=t(`. Useful before saving
the model.`),un=s(),we=o("div"),m(mt.$$.fragment),_n=s(),qr=o("p"),vn=t(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(n){const E=qs('[data-svelte="svelte-1phssyn"]',document.head);$=c(E,"META",{name:!0,content:!0}),E.forEach(a),Q=i(n),A=c(n,"H1",{class:!0});var ft=l(A);P=c(ft,"A",{id:!0,class:!0,href:!0});var En=l(P);G=c(En,"SPAN",{});var wn=l(G);f(k.$$.fragment,wn),wn.forEach(a),En.forEach(a),Te=i(ft),R=c(ft,"SPAN",{});var An=l(R);M=r(An,"Accelerator"),An.forEach(a),ft.forEach(a),Z=i(n),I=c(n,"P",{});var Yr=l(I);W=r(Yr,"The "),w=c(Yr,"A",{href:!0});var xn=l(w);gt=r(xn,"Accelerator"),xn.forEach(a),ut=r(Yr,` is the main class provided by \u{1F917} Accelerate. It serves at the main entrypoint for
the API. To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate juste:`),Yr.forEach(a),Le=i(n),x=c(n,"OL",{});var S=l(x);F=c(S,"LI",{});var Lt=l(F);La=r(Lt,"Initialize an "),_t=c(Lt,"A",{href:!0});var Dn=l(_t);Pa=r(Dn,"Accelerator"),Dn.forEach(a),Ia=r(Lt," object (that we will call "),St=c(Lt,"CODE",{});var kn=l(St);Oa=r(kn,"accelerator"),kn.forEach(a),Ua=r(Lt,` in the rest of this
page) as early as possible in your script.`),Lt.forEach(a),Ca=i(S),Pe=c(S,"LI",{});var Kr=l(Pe);za=r(Kr,"Pass along your model(s), optimizer(s), dataloader(s) to the "),vt=c(Kr,"A",{href:!0});var Tn=l(vt);ja=r(Tn,"prepare()"),Tn.forEach(a),Na=r(Kr," method."),Kr.forEach(a),qa=i(S),C=c(S,"LI",{});var Ae=l(C);Sa=r(Ae,"(Optional but best practice) Remove all the "),Vt=c(Ae,"CODE",{});var Ln=l(Vt);Va=r(Ln,".cuda()"),Ln.forEach(a),Ga=r(Ae," or "),Gt=c(Ae,"CODE",{});var Pn=l(Gt);Ra=r(Pn,".to(device)"),Pn.forEach(a),Ma=r(Ae,` in your code and let the
`),Rt=c(Ae,"CODE",{});var In=l(Rt);Wa=r(In,"accelerator"),In.forEach(a),Fa=r(Ae," handle device placement for you."),Ae.forEach(a),Ha=i(S),H=c(S,"LI",{});var Pt=l(H);Ya=r(Pt,"Replace the "),Mt=c(Pt,"CODE",{});var On=l(Mt);Ka=r(On,"loss.backward()"),On.forEach(a),Xa=r(Pt," in your code by "),Wt=c(Pt,"CODE",{});var Un=l(Wt);Ba=r(Un,"accelerator.backward(loss)"),Un.forEach(a),Ja=r(Pt,"."),Pt.forEach(a),Qa=i(S),Ie=c(S,"LI",{});var Xr=l(Ie);Za=r(Xr,`(Optional, when using distributed evaluation) Gather your predictions and labelsbefore storing them or using them
for metric computation using `),bt=c(Xr,"A",{href:!0});var Cn=l(bt);eo=r(Cn,"gather()"),Cn.forEach(a),to=r(Xr,"."),Xr.forEach(a),S.forEach(a),Mr=i(n),ee=c(n,"P",{});var Br=l(ee);ro=r(Br,`This is all what is needed in most cases. For more advanced case or a nicer experience here are the functions you
should search for and replace by the corresponding methods of your `),Ft=c(Br,"CODE",{});var zn=l(Ft);ao=r(zn,"accelerator"),zn.forEach(a),oo=r(Br,":"),Br.forEach(a),Wr=i(n),y=c(n,"UL",{});var D=l(y);te=c(D,"LI",{});var Sr=l(te);Ht=c(Sr,"CODE",{});var jn=l(Ht);co=r(jn,"print"),jn.forEach(a),lo=r(Sr," statements should be replaced by "),$t=c(Sr,"A",{href:!0});var Nn=l($t);no=r(Nn,"print()"),Nn.forEach(a),so=r(Sr,` to be only printed once per
process.`),Sr.forEach(a),io=i(D),Oe=c(D,"LI",{});var Jr=l(Oe);po=r(Jr,"Use "),Yt=c(Jr,"CODE",{});var qn=l(Yt);ho=r(qn,"is_local_main_process()"),qn.forEach(a),mo=r(Jr," for statements that should be executed once per server."),Jr.forEach(a),fo=i(D),Ue=c(D,"LI",{});var Qr=l(Ue);go=r(Qr,"Use "),Kt=c(Qr,"CODE",{});var Sn=l(Kt);uo=r(Sn,"is_main_process()"),Sn.forEach(a),_o=r(Qr," for statements that should be executed once only."),Qr.forEach(a),vo=i(D),Ce=c(D,"LI",{});var Zr=l(Ce);bo=r(Zr,"Use "),yt=c(Zr,"A",{href:!0});var Vn=l(yt);$o=r(Vn,"wait_for_everyone()"),Vn.forEach(a),yo=r(Zr,` to make sure all processes join that point before continuing
(useful before a model save for instance).`),Zr.forEach(a),Eo=i(D),ze=c(D,"LI",{});var ea=l(ze);wo=r(ea,"Use "),Et=c(ea,"A",{href:!0});var Gn=l(Et);Ao=r(Gn,"unwrap_model()"),Gn.forEach(a),xo=r(ea," to unwrap your model before saving it."),ea.forEach(a),Do=i(D),Y=c(D,"LI",{});var It=l(Y);ko=r(It,"Use "),wt=c(It,"A",{href:!0});var Rn=l(wt);To=r(Rn,"save()"),Rn.forEach(a),Lo=r(It," instead of "),Xt=c(It,"CODE",{});var Mn=l(Xt);Po=r(Mn,"torch.save"),Mn.forEach(a),Io=r(It,"."),It.forEach(a),Oo=i(D),T=c(D,"LI",{});var V=l(T);Uo=r(V,"Use "),re=c(V,"A",{href:!0});var ta=l(re);Co=r(ta,"clip"),Bt=c(ta,"EM",{});var Wn=l(Bt);zo=r(Wn,"grad_norm"),Wn.forEach(a),jo=r(ta,"()"),ta.forEach(a),No=r(V," instead of "),Jt=c(V,"CODE",{});var Fn=l(Jt);qo=r(Fn,"torch.nn.utils.clip_grad_norm_"),Fn.forEach(a),So=r(V,` and
`),ae=c(V,"A",{href:!0});var ra=l(ae);Vo=r(ra,"clip"),Qt=c(ra,"EM",{});var Hn=l(Qt);Go=r(Hn,"grad_value"),Hn.forEach(a),Ro=r(ra,"()"),ra.forEach(a),Mo=r(V," instead of "),Zt=c(V,"CODE",{});var Yn=l(Zt);Wo=r(Yn,"torch.nn.utils.clip_grad_value_"),Yn.forEach(a),Fo=r(V,"."),V.forEach(a),D.forEach(a),Fr=i(n),d=c(n,"DIV",{class:!0});var p=l(d);f(je.$$.fragment,p),Ho=i(p),er=c(p,"P",{});var Kn=l(er);Yo=r(Kn,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Kn.forEach(a),Ko=i(p),tr=c(p,"P",{});var Xn=l(tr);Xo=r(Xn,"Attributes"),Xn.forEach(a),Bo=i(p),Ne=c(p,"UL",{});var aa=l(Ne);oe=c(aa,"LI",{});var Vr=l(oe);rr=c(Vr,"STRONG",{});var Bn=l(rr);Jo=r(Bn,"device"),Bn.forEach(a),Qo=r(Vr," ("),ar=c(Vr,"CODE",{});var Jn=l(ar);Zo=r(Jn,"torch.device"),Jn.forEach(a),ec=r(Vr,") \u2014 The device to use."),Vr.forEach(a),tc=i(aa),ce=c(aa,"LI",{});var Gr=l(ce);or=c(Gr,"STRONG",{});var Qn=l(or);rc=r(Qn,"state"),Qn.forEach(a),ac=r(Gr," ("),At=c(Gr,"A",{href:!0});var Zn=l(At);oc=r(Zn,"AcceleratorState"),Zn.forEach(a),cc=r(Gr,") \u2014 The distributed setup state."),Gr.forEach(a),aa.forEach(a),lc=i(p),le=c(p,"DIV",{class:!0});var oa=l(le);f(qe.$$.fragment,oa),nc=i(oa),cr=c(oa,"P",{});var es=l(cr);sc=r(es,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),es.forEach(a),oa.forEach(a),ic=i(p),ne=c(p,"DIV",{class:!0});var ca=l(ne);f(Se.$$.fragment,ca),dc=i(ca),K=c(ca,"P",{});var Ot=l(K);pc=r(Ot,"Use "),lr=c(Ot,"CODE",{});var ts=l(lr);hc=r(ts,"accelerator.backward(loss)"),ts.forEach(a),mc=r(Ot," in lieu of "),nr=c(Ot,"CODE",{});var rs=l(nr);fc=r(rs,"loss.backward()"),rs.forEach(a),gc=r(Ot,"."),Ot.forEach(a),ca.forEach(a),uc=i(p),se=c(p,"DIV",{class:!0});var la=l(se);f(Ve.$$.fragment,la),_c=i(la),Ge=c(la,"P",{});var na=l(Ge);vc=r(na,"Alias for "),sr=c(na,"CODE",{});var as=l(sr);bc=r(as,"Accelerate.free_memory"),as.forEach(a),$c=r(na,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),na.forEach(a),la.forEach(a),yc=i(p),ie=c(p,"DIV",{class:!0});var sa=l(ie);f(Re.$$.fragment,sa),Ec=i(sa),Me=c(sa,"P",{});var ia=l(Me);wc=r(ia,"Should be used in place of "),ir=c(ia,"CODE",{});var os=l(ir);Ac=r(os,"torch.nn.utils.clip_grad_norm_"),os.forEach(a),xc=r(ia,"."),ia.forEach(a),sa.forEach(a),Dc=i(p),de=c(p,"DIV",{class:!0});var da=l(de);f(We.$$.fragment,da),kc=i(da),Fe=c(da,"P",{});var pa=l(Fe);Tc=r(pa,"Should be used in place of "),dr=c(pa,"CODE",{});var cs=l(dr);Lc=r(cs,"torch.nn.utils.clip_grad_value_"),cs.forEach(a),Pc=r(pa,"."),pa.forEach(a),da.forEach(a),Ic=i(p),pe=c(p,"DIV",{class:!0});var ha=l(pe);f(He.$$.fragment,ha),Oc=i(ha),pr=c(ha,"P",{});var ls=l(pr);Uc=r(ls,"Runs any special end training behaviors, such as stopping trackers"),ls.forEach(a),ha.forEach(a),Cc=i(p),he=c(p,"DIV",{class:!0});var ma=l(he);f(Ye.$$.fragment,ma),zc=i(ma),hr=c(ma,"P",{});var ns=l(hr);jc=r(ns,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),ns.forEach(a),ma.forEach(a),Nc=i(p),j=c(p,"DIV",{class:!0});var Ut=l(j);f(Ke.$$.fragment,Ut),qc=i(Ut),Xe=c(Ut,"P",{});var fa=l(Xe);Sc=r(fa,"Gather the values in "),mr=c(fa,"EM",{});var ss=l(mr);Vc=r(ss,"tensor"),ss.forEach(a),Gc=r(fa,` accross all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),fa.forEach(a),Rc=i(Ut),fr=c(Ut,"P",{});var is=l(fr);Mc=r(is,`Note:
This gather happens in all processes.`),is.forEach(a),Ut.forEach(a),Wc=i(p),me=c(p,"DIV",{class:!0});var ga=l(me);f(Be.$$.fragment,ga),Fc=i(ga),Je=c(ga,"P",{});var ua=l(Je);Hc=r(ua,"Initializes a run for all trackers stored in "),gr=c(ua,"CODE",{});var ds=l(gr);Yc=r(ds,"self.log_with"),ds.forEach(a),Kc=r(ua,", potentially with starting configurations"),ua.forEach(a),ga.forEach(a),Xc=i(p),fe=c(p,"DIV",{class:!0});var _a=l(fe);f(Qe.$$.fragment,_a),Bc=i(_a),ur=c(_a,"P",{});var ps=l(ur);Jc=r(ps,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),ps.forEach(a),_a.forEach(a),Qc=i(p),N=c(p,"DIV",{class:!0});var Ct=l(N);f(Ze.$$.fragment,Ct),Zc=i(Ct),_r=c(Ct,"P",{});var hs=l(_r);el=r(hs,"Lets the local main process go inside a with block."),hs.forEach(a),tl=i(Ct),vr=c(Ct,"P",{});var ms=l(vr);rl=r(ms,"The other processes will enter the with block after the main process exits."),ms.forEach(a),Ct.forEach(a),al=i(p),ge=c(p,"DIV",{class:!0});var va=l(ge);f(et.$$.fragment,va),ol=i(va),X=c(va,"P",{});var zt=l(X);cl=r(zt,"Logs "),br=c(zt,"CODE",{});var fs=l(br);ll=r(fs,"values"),fs.forEach(a),nl=r(zt," to all stored trackers in "),$r=c(zt,"CODE",{});var gs=l($r);sl=r(gs,"self.trackers"),gs.forEach(a),il=r(zt,"."),zt.forEach(a),va.forEach(a),dl=i(p),q=c(p,"DIV",{class:!0});var jt=l(q);f(tt.$$.fragment,jt),pl=i(jt),yr=c(jt,"P",{});var us=l(yr);hl=r(us,"Lets the main process go first inside a with block."),us.forEach(a),ml=i(jt),Er=c(jt,"P",{});var _s=l(Er);fl=r(_s,"The other processes will enter the with block after the main process exits."),_s.forEach(a),jt.forEach(a),gl=i(p),ue=c(p,"DIV",{class:!0});var ba=l(ue);f(rt.$$.fragment,ba),ul=i(ba),wr=c(ba,"P",{});var vs=l(wr);_l=r(vs,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),vs.forEach(a),ba.forEach(a),vl=i(p),O=c(p,"DIV",{class:!0});var xe=l(O);f(at.$$.fragment,xe),bl=i(xe),ot=c(xe,"P",{});var $a=l(ot);$l=r($a,"Prepare all objects passed in "),Ar=c($a,"CODE",{});var bs=l(Ar);yl=r(bs,"args"),bs.forEach(a),El=r($a,` for distributed training and mixed precision, then return them in the same
order.`),$a.forEach(a),wl=i(xe),xr=c(xe,"P",{});var $s=l(xr);Al=r($s,"Accepts the following type of objects:"),$s.forEach(a),xl=i(xe),B=c(xe,"UL",{});var Nt=l(B);xt=c(Nt,"LI",{});var bn=l(xt);Dr=c(bn,"CODE",{});var ys=l(Dr);Dl=r(ys,"torch.utils.data.DataLoader"),ys.forEach(a),kl=r(bn,": PyTorch Dataloader"),bn.forEach(a),Tl=i(Nt),Dt=c(Nt,"LI",{});var $n=l(Dt);kr=c($n,"CODE",{});var Es=l(kr);Ll=r(Es,"torch.nn.Module"),Es.forEach(a),Pl=r($n,": PyTorch Module"),$n.forEach(a),Il=i(Nt),kt=c(Nt,"LI",{});var yn=l(kt);Tr=c(yn,"CODE",{});var ws=l(Tr);Ol=r(ws,"torch.optim.Optimizer"),ws.forEach(a),Ul=r(yn,": PyTorch Optimizer"),yn.forEach(a),Nt.forEach(a),xe.forEach(a),Cl=i(p),_e=c(p,"DIV",{class:!0});var ya=l(_e);f(ct.$$.fragment,ya),zl=i(ya),lt=c(ya,"P",{});var Ea=l(lt);jl=r(Ea,"Use in replacement of "),Lr=c(Ea,"CODE",{});var As=l(Lr);Nl=r(As,"print()"),As.forEach(a),ql=r(Ea," to only print once per server."),Ea.forEach(a),ya.forEach(a),Sl=i(p),U=c(p,"DIV",{class:!0});var De=l(U);f(nt.$$.fragment,De),Vl=i(De),z=c(De,"P",{});var ke=l(z);Gl=r(ke,"Makes note of "),Pr=c(ke,"CODE",{});var xs=l(Pr);Rl=r(xs,"objects"),xs.forEach(a),Ml=r(ke," and will save or load them in during "),Ir=c(ke,"CODE",{});var Ds=l(Ir);Wl=r(Ds,"save_state"),Ds.forEach(a),Fl=r(ke," or "),Or=c(ke,"CODE",{});var ks=l(Or);Hl=r(ks,"load_state"),ks.forEach(a),Yl=r(ke,"."),ke.forEach(a),Kl=i(De),Ur=c(De,"P",{});var Ts=l(Ur);Xl=r(Ts,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Ts.forEach(a),Bl=i(De),f(ve.$$.fragment,De),De.forEach(a),Jl=i(p),be=c(p,"DIV",{class:!0});var wa=l(be);f(st.$$.fragment,wa),Ql=i(wa),it=c(wa,"P",{});var Aa=l(it);Zl=r(Aa,"Save the object passed to disk once per machine. Use in place of "),Cr=c(Aa,"CODE",{});var Ls=l(Cr);en=r(Ls,"torch.save"),Ls.forEach(a),tn=r(Aa,"."),Aa.forEach(a),wa.forEach(a),rn=i(p),$e=c(p,"DIV",{class:!0});var xa=l($e);f(dt.$$.fragment,xa),an=i(xa),zr=c(xa,"P",{});var Ps=l(zr);on=r(Ps,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Ps.forEach(a),xa.forEach(a),cn=i(p),ye=c(p,"DIV",{class:!0});var Da=l(ye);f(pt.$$.fragment,Da),ln=i(Da),jr=c(Da,"P",{});var Is=l(jr);nn=r(Is,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Is.forEach(a),Da.forEach(a),sn=i(p),Ee=c(p,"DIV",{class:!0});var ka=l(Ee);f(ht.$$.fragment,ka),dn=i(ka),J=c(ka,"P",{});var qt=l(J);pn=r(qt,"Unwraps the "),Nr=c(qt,"CODE",{});var Os=l(Nr);hn=r(Os,"model"),Os.forEach(a),mn=r(qt," from the additional layer possible added by "),Tt=c(qt,"A",{href:!0});var Us=l(Tt);fn=r(Us,"prepare()"),Us.forEach(a),gn=r(qt,`. Useful before saving
the model.`),qt.forEach(a),ka.forEach(a),un=i(p),we=c(p,"DIV",{class:!0});var Ta=l(we);f(mt.$$.fragment,Ta),_n=i(Ta),qr=c(Ta,"P",{});var Cs=l(qr);vn=r(Cs,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),Cs.forEach(a),Ta.forEach(a),p.forEach(a),this.h()},h(){h($,"name","hf:doc:metadata"),h($,"content",JSON.stringify(Ws)),h(P,"id","accelerate.Accelerator"),h(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(P,"href","#accelerate.Accelerator"),h(A,"class","relative group"),h(w,"href","/docs/accelerate/pr_323/en/accelerator#accelerate.Accelerator"),h(_t,"href","/docs/accelerate/pr_323/en/accelerator#accelerate.Accelerator"),h(vt,"href","/docs/accelerate/pr_323/en/accelerator#accelerate.Accelerator.prepare"),h(bt,"href","/docs/accelerate/pr_323/en/accelerator#accelerate.Accelerator.gather"),h($t,"href","/docs/accelerate/pr_323/en/accelerator#accelerate.Accelerator.print"),h(yt,"href","/docs/accelerate/pr_323/en/accelerator#accelerate.Accelerator.wait_for_everyone"),h(Et,"href","/docs/accelerate/pr_323/en/accelerator#accelerate.Accelerator.unwrap_model"),h(wt,"href","/docs/accelerate/pr_323/en/accelerator#accelerate.Accelerator.save"),h(re,"href","/docs/accelerate/pr_323/en/accelerator#accelerate.Accelerator.clip_grad_norm_"),h(ae,"href","/docs/accelerate/pr_323/en/accelerator#accelerate.Accelerator.clip_grad_value_"),h(At,"href","/docs/accelerate/pr_323/en/internal#accelerate.state.AcceleratorState"),h(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Tt,"href","/docs/accelerate/pr_323/en/accelerator#accelerate.Accelerator.prepare"),h(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(d,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(n,E){e(document.head,$),L(n,Q,E),L(n,A,E),e(A,P),e(P,G),g(k,G,null),e(A,Te),e(A,R),e(R,M),L(n,Z,E),L(n,I,E),e(I,W),e(I,w),e(w,gt),e(I,ut),L(n,Le,E),L(n,x,E),e(x,F),e(F,La),e(F,_t),e(_t,Pa),e(F,Ia),e(F,St),e(St,Oa),e(F,Ua),e(x,Ca),e(x,Pe),e(Pe,za),e(Pe,vt),e(vt,ja),e(Pe,Na),e(x,qa),e(x,C),e(C,Sa),e(C,Vt),e(Vt,Va),e(C,Ga),e(C,Gt),e(Gt,Ra),e(C,Ma),e(C,Rt),e(Rt,Wa),e(C,Fa),e(x,Ha),e(x,H),e(H,Ya),e(H,Mt),e(Mt,Ka),e(H,Xa),e(H,Wt),e(Wt,Ba),e(H,Ja),e(x,Qa),e(x,Ie),e(Ie,Za),e(Ie,bt),e(bt,eo),e(Ie,to),L(n,Mr,E),L(n,ee,E),e(ee,ro),e(ee,Ft),e(Ft,ao),e(ee,oo),L(n,Wr,E),L(n,y,E),e(y,te),e(te,Ht),e(Ht,co),e(te,lo),e(te,$t),e($t,no),e(te,so),e(y,io),e(y,Oe),e(Oe,po),e(Oe,Yt),e(Yt,ho),e(Oe,mo),e(y,fo),e(y,Ue),e(Ue,go),e(Ue,Kt),e(Kt,uo),e(Ue,_o),e(y,vo),e(y,Ce),e(Ce,bo),e(Ce,yt),e(yt,$o),e(Ce,yo),e(y,Eo),e(y,ze),e(ze,wo),e(ze,Et),e(Et,Ao),e(ze,xo),e(y,Do),e(y,Y),e(Y,ko),e(Y,wt),e(wt,To),e(Y,Lo),e(Y,Xt),e(Xt,Po),e(Y,Io),e(y,Oo),e(y,T),e(T,Uo),e(T,re),e(re,Co),e(re,Bt),e(Bt,zo),e(re,jo),e(T,No),e(T,Jt),e(Jt,qo),e(T,So),e(T,ae),e(ae,Vo),e(ae,Qt),e(Qt,Go),e(ae,Ro),e(T,Mo),e(T,Zt),e(Zt,Wo),e(T,Fo),L(n,Fr,E),L(n,d,E),g(je,d,null),e(d,Ho),e(d,er),e(er,Yo),e(d,Ko),e(d,tr),e(tr,Xo),e(d,Bo),e(d,Ne),e(Ne,oe),e(oe,rr),e(rr,Jo),e(oe,Qo),e(oe,ar),e(ar,Zo),e(oe,ec),e(Ne,tc),e(Ne,ce),e(ce,or),e(or,rc),e(ce,ac),e(ce,At),e(At,oc),e(ce,cc),e(d,lc),e(d,le),g(qe,le,null),e(le,nc),e(le,cr),e(cr,sc),e(d,ic),e(d,ne),g(Se,ne,null),e(ne,dc),e(ne,K),e(K,pc),e(K,lr),e(lr,hc),e(K,mc),e(K,nr),e(nr,fc),e(K,gc),e(d,uc),e(d,se),g(Ve,se,null),e(se,_c),e(se,Ge),e(Ge,vc),e(Ge,sr),e(sr,bc),e(Ge,$c),e(d,yc),e(d,ie),g(Re,ie,null),e(ie,Ec),e(ie,Me),e(Me,wc),e(Me,ir),e(ir,Ac),e(Me,xc),e(d,Dc),e(d,de),g(We,de,null),e(de,kc),e(de,Fe),e(Fe,Tc),e(Fe,dr),e(dr,Lc),e(Fe,Pc),e(d,Ic),e(d,pe),g(He,pe,null),e(pe,Oc),e(pe,pr),e(pr,Uc),e(d,Cc),e(d,he),g(Ye,he,null),e(he,zc),e(he,hr),e(hr,jc),e(d,Nc),e(d,j),g(Ke,j,null),e(j,qc),e(j,Xe),e(Xe,Sc),e(Xe,mr),e(mr,Vc),e(Xe,Gc),e(j,Rc),e(j,fr),e(fr,Mc),e(d,Wc),e(d,me),g(Be,me,null),e(me,Fc),e(me,Je),e(Je,Hc),e(Je,gr),e(gr,Yc),e(Je,Kc),e(d,Xc),e(d,fe),g(Qe,fe,null),e(fe,Bc),e(fe,ur),e(ur,Jc),e(d,Qc),e(d,N),g(Ze,N,null),e(N,Zc),e(N,_r),e(_r,el),e(N,tl),e(N,vr),e(vr,rl),e(d,al),e(d,ge),g(et,ge,null),e(ge,ol),e(ge,X),e(X,cl),e(X,br),e(br,ll),e(X,nl),e(X,$r),e($r,sl),e(X,il),e(d,dl),e(d,q),g(tt,q,null),e(q,pl),e(q,yr),e(yr,hl),e(q,ml),e(q,Er),e(Er,fl),e(d,gl),e(d,ue),g(rt,ue,null),e(ue,ul),e(ue,wr),e(wr,_l),e(d,vl),e(d,O),g(at,O,null),e(O,bl),e(O,ot),e(ot,$l),e(ot,Ar),e(Ar,yl),e(ot,El),e(O,wl),e(O,xr),e(xr,Al),e(O,xl),e(O,B),e(B,xt),e(xt,Dr),e(Dr,Dl),e(xt,kl),e(B,Tl),e(B,Dt),e(Dt,kr),e(kr,Ll),e(Dt,Pl),e(B,Il),e(B,kt),e(kt,Tr),e(Tr,Ol),e(kt,Ul),e(d,Cl),e(d,_e),g(ct,_e,null),e(_e,zl),e(_e,lt),e(lt,jl),e(lt,Lr),e(Lr,Nl),e(lt,ql),e(d,Sl),e(d,U),g(nt,U,null),e(U,Vl),e(U,z),e(z,Gl),e(z,Pr),e(Pr,Rl),e(z,Ml),e(z,Ir),e(Ir,Wl),e(z,Fl),e(z,Or),e(Or,Hl),e(z,Yl),e(U,Kl),e(U,Ur),e(Ur,Xl),e(U,Bl),g(ve,U,null),e(d,Jl),e(d,be),g(st,be,null),e(be,Ql),e(be,it),e(it,Zl),e(it,Cr),e(Cr,en),e(it,tn),e(d,rn),e(d,$e),g(dt,$e,null),e($e,an),e($e,zr),e(zr,on),e(d,cn),e(d,ye),g(pt,ye,null),e(ye,ln),e(ye,jr),e(jr,nn),e(d,sn),e(d,Ee),g(ht,Ee,null),e(Ee,dn),e(Ee,J),e(J,pn),e(J,Nr),e(Nr,hn),e(J,mn),e(J,Tt),e(Tt,fn),e(J,gn),e(d,un),e(d,we),g(mt,we,null),e(we,_n),e(we,qr),e(qr,vn),Hr=!0},p(n,[E]){const ft={};E&2&&(ft.$$scope={dirty:E,ctx:n}),ve.$set(ft)},i(n){Hr||(u(k.$$.fragment,n),u(je.$$.fragment,n),u(qe.$$.fragment,n),u(Se.$$.fragment,n),u(Ve.$$.fragment,n),u(Re.$$.fragment,n),u(We.$$.fragment,n),u(He.$$.fragment,n),u(Ye.$$.fragment,n),u(Ke.$$.fragment,n),u(Be.$$.fragment,n),u(Qe.$$.fragment,n),u(Ze.$$.fragment,n),u(et.$$.fragment,n),u(tt.$$.fragment,n),u(rt.$$.fragment,n),u(at.$$.fragment,n),u(ct.$$.fragment,n),u(nt.$$.fragment,n),u(ve.$$.fragment,n),u(st.$$.fragment,n),u(dt.$$.fragment,n),u(pt.$$.fragment,n),u(ht.$$.fragment,n),u(mt.$$.fragment,n),Hr=!0)},o(n){_(k.$$.fragment,n),_(je.$$.fragment,n),_(qe.$$.fragment,n),_(Se.$$.fragment,n),_(Ve.$$.fragment,n),_(Re.$$.fragment,n),_(We.$$.fragment,n),_(He.$$.fragment,n),_(Ye.$$.fragment,n),_(Ke.$$.fragment,n),_(Be.$$.fragment,n),_(Qe.$$.fragment,n),_(Ze.$$.fragment,n),_(et.$$.fragment,n),_(tt.$$.fragment,n),_(rt.$$.fragment,n),_(at.$$.fragment,n),_(ct.$$.fragment,n),_(nt.$$.fragment,n),_(ve.$$.fragment,n),_(st.$$.fragment,n),_(dt.$$.fragment,n),_(pt.$$.fragment,n),_(ht.$$.fragment,n),_(mt.$$.fragment,n),Hr=!1},d(n){a($),n&&a(Q),n&&a(A),v(k),n&&a(Z),n&&a(I),n&&a(Le),n&&a(x),n&&a(Mr),n&&a(ee),n&&a(Wr),n&&a(y),n&&a(Fr),n&&a(d),v(je),v(qe),v(Se),v(Ve),v(Re),v(We),v(He),v(Ye),v(Ke),v(Be),v(Qe),v(Ze),v(et),v(tt),v(rt),v(at),v(ct),v(nt),v(ve),v(st),v(dt),v(pt),v(ht),v(mt)}}}const Ws={local:"accelerate.Accelerator",title:"Accelerator"};function Fs(Rr){return Ss(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Bs extends zs{constructor($){super();js(this,$,Fs,Ms,Ns,{})}}export{Bs as default,Ws as metadata};
